
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8d 9e 00 00       	call   c0009ead <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 85 31 02 00       	call   c00231aa <_init>
c0000025:	c3                   	ret    
c0000026:	bb 2e 3e 02 c0       	mov    ebx,0xc0023e2e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 3c 3e 02 c0    	cmp    ebx,0xc0023e3c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 85 02 c0       	mov    eax,0xc00285f8
c0000049:	3d f8 85 02 c0       	cmp    eax,0xc00285f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 85 02 c0       	push   0xc00285f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 85 02 c0       	mov    eax,0xc00285f8
c0000075:	2d f8 85 02 c0       	sub    eax,0xc00285f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 85 02 c0       	push   0xc00285f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 80 87 02 c0 00 	cmp    BYTE PTR ds:0xc0028780,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 44 3e 02 c0       	mov    ebx,0xc0023e44
c00000bb:	81 eb 40 3e 02 c0    	sub    ebx,0xc0023e40
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 40 3e 02 c0       	mov    esi,0xc0023e40
c00000ca:	a1 84 87 02 c0       	mov    eax,ds:0xc0028784
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 84 87 02 c0       	mov    ds:0xc0028784,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 84 87 02 c0       	mov    eax,ds:0xc0028784
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 85 02 c0       	push   0xc00285f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 80 87 02 c0 01 	mov    BYTE PTR ds:0xc0028780,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 88 87 02 c0       	push   0xc0028788
c000012c:	68 f8 85 02 c0       	push   0xc00285f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <getRDRAND>:
c0000219:	b9 64 00 00 00       	mov    ecx,0x64

c000021e <retry>:
c000021e:	0f c7 f0             	rdrand eax
c0000221:	72 05                	jb     c0000228 <retry.done>
c0000223:	e2 f9                	loop   c000021e <retry>

c0000225 <retry.fail>:
c0000225:	31 c0                	xor    eax,eax
c0000227:	c3                   	ret    

c0000228 <retry.done>:
c0000228:	c3                   	ret    

c0000229 <detectCPUID>:
c0000229:	9c                   	pushf  
c000022a:	9c                   	pushf  
c000022b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000232:	9d                   	popf   
c0000233:	9c                   	pushf  
c0000234:	58                   	pop    eax
c0000235:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000238:	9d                   	popf   
c0000239:	25 00 00 20 00       	and    eax,0x200000
c000023e:	c3                   	ret    

c000023f <goToVM86>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000245:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000248:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000024b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000024e:	25 ff ff 00 00       	and    eax,0xffff
c0000253:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000259:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000025f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000265:	52                   	push   edx
c0000266:	51                   	push   ecx
c0000267:	68 02 02 02 00       	push   0x20202
c000026c:	53                   	push   ebx
c000026d:	50                   	push   eax
c000026e:	cf                   	iret   

c000026f <goToUsermode>:
c000026f:	55                   	push   ebp
c0000270:	89 e5                	mov    ebp,esp
c0000272:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000275:	66 b8 23 00          	mov    ax,0x23
c0000279:	66 8e d8             	mov    ds,ax
c000027c:	66 8e c0             	mov    es,ax
c000027f:	66 8e e0             	mov    fs,ax
c0000282:	66 8e e8             	mov    gs,ax
c0000285:	89 e0                	mov    eax,esp
c0000287:	68 23 00 00 00       	push   0x23
c000028c:	50                   	push   eax
c000028d:	68 02 02 00 00       	push   0x202
c0000292:	68 1b 00 00 00       	push   0x1b
c0000297:	53                   	push   ebx
c0000298:	cf                   	iret   

c0000299 <switchToThreadASMFirstTime>:
c0000299:	9c                   	pushf  
c000029a:	fa                   	cli    
c000029b:	50                   	push   eax
c000029c:	53                   	push   ebx
c000029d:	51                   	push   ecx
c000029e:	52                   	push   edx
c000029f:	56                   	push   esi
c00002a0:	57                   	push   edi
c00002a1:	55                   	push   ebp
c00002a2:	e9 11 00 00 00       	jmp    c00002b8 <commonThreadSwitch>

c00002a7 <switchToThreadASM>:
c00002a7:	9c                   	pushf  
c00002a8:	50                   	push   eax
c00002a9:	53                   	push   ebx
c00002aa:	51                   	push   ecx
c00002ab:	52                   	push   edx
c00002ac:	56                   	push   esi
c00002ad:	57                   	push   edi
c00002ae:	55                   	push   ebp
c00002af:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002b5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002b8 <commonThreadSwitch>:
c00002b8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002bc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002c4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002c7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ca:	0f 20 d9             	mov    ecx,cr3
c00002cd:	39 c8                	cmp    eax,ecx
c00002cf:	74 03                	je     c00002d4 <commonThreadSwitch.doneVAS>
c00002d1:	0f 22 d8             	mov    cr3,eax

c00002d4 <commonThreadSwitch.doneVAS>:
c00002d4:	0f 20 c0             	mov    eax,cr0
c00002d7:	0c 08                	or     al,0x8
c00002d9:	0f 22 c0             	mov    cr0,eax
c00002dc:	85 d2                	test   edx,edx
c00002de:	75 11                	jne    c00002f1 <commonThreadSwitch.firstTime>
c00002e0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002e3:	e8 c0 84 01 00       	call   c00187a8 <changeTSS>
c00002e8:	5d                   	pop    ebp
c00002e9:	5f                   	pop    edi
c00002ea:	5e                   	pop    esi
c00002eb:	5a                   	pop    edx
c00002ec:	59                   	pop    ecx
c00002ed:	5b                   	pop    ebx
c00002ee:	58                   	pop    eax
c00002ef:	9d                   	popf   
c00002f0:	c3                   	ret    

c00002f1 <commonThreadSwitch.firstTime>:
c00002f1:	fa                   	cli    
c00002f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002f5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002fa:	60                   	pusha  
c00002fb:	e8 40 cb 00 00       	call   c000ce40 <mapVASFirstTime>
c0000300:	61                   	popa   
c0000301:	89 c4                	mov    esp,eax
c0000303:	56                   	push   esi
c0000304:	52                   	push   edx
c0000305:	e8 9e 84 01 00       	call   c00187a8 <changeTSS>
c000030a:	5a                   	pop    edx
c000030b:	5e                   	pop    esi
c000030c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000313:	5d                   	pop    ebp
c0000314:	5f                   	pop    edi
c0000315:	5e                   	pop    esi
c0000316:	59                   	pop    ecx
c0000317:	59                   	pop    ecx
c0000318:	5b                   	pop    ebx
c0000319:	58                   	pop    eax
c000031a:	81 c4 04 00 00 00    	add    esp,0x4
c0000320:	6a 02                	push   0x2
c0000322:	9d                   	popf   
c0000323:	52                   	push   edx
c0000324:	e8 67 89 01 00       	call   c0018c90 <taskStartupFunction>
c0000329:	5a                   	pop    edx
c000032a:	50                   	push   eax
c000032b:	ff d2                	call   edx
c000032d:	e8 aa 8f 01 00       	call   c00192dc <taskReturned>
c0000332:	e9 fb ff ff ff       	jmp    c0000332 <commonThreadSwitch.firstTime+0x41>

c0000337 <asmQuickAcquireLock>:
c0000337:	55                   	push   ebp
c0000338:	89 e5                	mov    ebp,esp
c000033a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000033d <asmQuickAcquireLock.retry>:
c000033d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000342:	72 02                	jb     c0000346 <asmQuickAcquireLock.spin_with_pause>
c0000344:	fa                   	cli    
c0000345:	c3                   	ret    

c0000346 <asmQuickAcquireLock.spin_with_pause>:
c0000346:	f3 90                	pause  
c0000348:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000034e:	75 f6                	jne    c0000346 <asmQuickAcquireLock.spin_with_pause>
c0000350:	e9 e8 ff ff ff       	jmp    c000033d <asmQuickAcquireLock.retry>

c0000355 <asmQuickReleaseLock>:
c0000355:	55                   	push   ebp
c0000356:	89 e5                	mov    ebp,esp
c0000358:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000035f:	5d                   	pop    ebp
c0000360:	c3                   	ret    

c0000361 <asmAcquireLock>:
c0000361:	55                   	push   ebp
c0000362:	89 e5                	mov    ebp,esp
c0000364:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000367 <asmAcquireLock.retry>:
c0000367:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000036c:	72 05                	jb     c0000373 <asmAcquireLock.spin_with_pause>
c000036e:	9c                   	pushf  
c000036f:	58                   	pop    eax
c0000370:	fa                   	cli    
c0000371:	5d                   	pop    ebp
c0000372:	c3                   	ret    

c0000373 <asmAcquireLock.spin_with_pause>:
c0000373:	f3 90                	pause  
c0000375:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000037b:	75 f6                	jne    c0000373 <asmAcquireLock.spin_with_pause>
c000037d:	e9 e5 ff ff ff       	jmp    c0000367 <asmAcquireLock.retry>

c0000382 <asmReleaseLock>:
c0000382:	55                   	push   ebp
c0000383:	89 e5                	mov    ebp,esp
c0000385:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000388:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000038b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000391:	52                   	push   edx
c0000392:	9d                   	popf   
c0000393:	5d                   	pop    ebp
c0000394:	c3                   	ret    

c0000395 <loadGDT>:
c0000395:	0f 01 15 d0 8b 02 c0 	lgdtd  ds:0xc0028bd0
c000039c:	66 b8 10 00          	mov    ax,0x10
c00003a0:	66 8e d8             	mov    ds,ax
c00003a3:	66 8e c0             	mov    es,ax
c00003a6:	66 8e e0             	mov    fs,ax
c00003a9:	66 8e e8             	mov    gs,ax
c00003ac:	66 8e d0             	mov    ss,ax
c00003af:	e9 00 00 00 00       	jmp    c00003b4 <flush2>

c00003b4 <flush2>:
c00003b4:	c3                   	ret    

c00003b5 <isr0>:
c00003b5:	fa                   	cli    
c00003b6:	68 00 00 00 00       	push   0x0
c00003bb:	68 00 00 00 00       	push   0x0
c00003c0:	e9 44 01 00 00       	jmp    c0000509 <int_common_stub>

c00003c5 <isr1>:
c00003c5:	fa                   	cli    
c00003c6:	6a 00                	push   0x0
c00003c8:	6a 01                	push   0x1
c00003ca:	e9 3a 01 00 00       	jmp    c0000509 <int_common_stub>

c00003cf <isr2>:
c00003cf:	fa                   	cli    
c00003d0:	6a 00                	push   0x0
c00003d2:	6a 02                	push   0x2
c00003d4:	e9 30 01 00 00       	jmp    c0000509 <int_common_stub>

c00003d9 <isr3>:
c00003d9:	fa                   	cli    
c00003da:	6a 00                	push   0x0
c00003dc:	6a 03                	push   0x3
c00003de:	e9 26 01 00 00       	jmp    c0000509 <int_common_stub>

c00003e3 <isr4>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 04                	push   0x4
c00003e8:	e9 1c 01 00 00       	jmp    c0000509 <int_common_stub>

c00003ed <isr5>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 05                	push   0x5
c00003f2:	e9 12 01 00 00       	jmp    c0000509 <int_common_stub>

c00003f7 <isr6>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 06                	push   0x6
c00003fc:	e9 08 01 00 00       	jmp    c0000509 <int_common_stub>

c0000401 <isr7>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 07                	push   0x7
c0000406:	e9 fe 00 00 00       	jmp    c0000509 <int_common_stub>

c000040b <isr8>:
c000040b:	fa                   	cli    
c000040c:	6a 08                	push   0x8
c000040e:	e9 f6 00 00 00       	jmp    c0000509 <int_common_stub>

c0000413 <isr9>:
c0000413:	fa                   	cli    
c0000414:	6a 00                	push   0x0
c0000416:	6a 09                	push   0x9
c0000418:	e9 ec 00 00 00       	jmp    c0000509 <int_common_stub>

c000041d <isr10>:
c000041d:	fa                   	cli    
c000041e:	6a 0a                	push   0xa
c0000420:	e9 e4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000425 <isr11>:
c0000425:	fa                   	cli    
c0000426:	6a 0b                	push   0xb
c0000428:	e9 dc 00 00 00       	jmp    c0000509 <int_common_stub>

c000042d <isr12>:
c000042d:	fa                   	cli    
c000042e:	6a 0c                	push   0xc
c0000430:	e9 d4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000435 <isr13>:
c0000435:	fa                   	cli    
c0000436:	6a 0d                	push   0xd
c0000438:	e9 cc 00 00 00       	jmp    c0000509 <int_common_stub>

c000043d <isr14>:
c000043d:	fa                   	cli    
c000043e:	6a 0e                	push   0xe
c0000440:	e9 c4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000445 <isr15>:
c0000445:	fa                   	cli    
c0000446:	6a 00                	push   0x0
c0000448:	6a 0f                	push   0xf
c000044a:	e9 ba 00 00 00       	jmp    c0000509 <int_common_stub>

c000044f <isr16>:
c000044f:	fa                   	cli    
c0000450:	6a 00                	push   0x0
c0000452:	6a 10                	push   0x10
c0000454:	e9 b0 00 00 00       	jmp    c0000509 <int_common_stub>

c0000459 <isr17>:
c0000459:	fa                   	cli    
c000045a:	6a 00                	push   0x0
c000045c:	6a 11                	push   0x11
c000045e:	e9 a6 00 00 00       	jmp    c0000509 <int_common_stub>

c0000463 <isr18>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 12                	push   0x12
c0000468:	e9 9c 00 00 00       	jmp    c0000509 <int_common_stub>

c000046d <irq3>:
c000046d:	fa                   	cli    
c000046e:	6a 00                	push   0x0
c0000470:	6a 23                	push   0x23
c0000472:	e9 92 00 00 00       	jmp    c0000509 <int_common_stub>

c0000477 <irq4>:
c0000477:	fa                   	cli    
c0000478:	6a 00                	push   0x0
c000047a:	6a 24                	push   0x24
c000047c:	e9 88 00 00 00       	jmp    c0000509 <int_common_stub>

c0000481 <irq5>:
c0000481:	fa                   	cli    
c0000482:	6a 00                	push   0x0
c0000484:	6a 25                	push   0x25
c0000486:	e9 7e 00 00 00       	jmp    c0000509 <int_common_stub>

c000048b <irq6>:
c000048b:	fa                   	cli    
c000048c:	6a 00                	push   0x0
c000048e:	6a 26                	push   0x26
c0000490:	e9 74 00 00 00       	jmp    c0000509 <int_common_stub>

c0000495 <irq7>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 27                	push   0x27
c000049a:	e9 6a 00 00 00       	jmp    c0000509 <int_common_stub>

c000049f <irq8>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 28                	push   0x28
c00004a4:	e9 60 00 00 00       	jmp    c0000509 <int_common_stub>

c00004a9 <irq9>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 29                	push   0x29
c00004ae:	e9 56 00 00 00       	jmp    c0000509 <int_common_stub>

c00004b3 <irq10>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 2a                	push   0x2a
c00004b8:	e9 4c 00 00 00       	jmp    c0000509 <int_common_stub>

c00004bd <irq11>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 2b                	push   0x2b
c00004c2:	e9 42 00 00 00       	jmp    c0000509 <int_common_stub>

c00004c7 <irq12>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 2c                	push   0x2c
c00004cc:	e9 38 00 00 00       	jmp    c0000509 <int_common_stub>

c00004d1 <irq13>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 2d                	push   0x2d
c00004d6:	e9 2e 00 00 00       	jmp    c0000509 <int_common_stub>

c00004db <irq14>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 2e                	push   0x2e
c00004e0:	e9 24 00 00 00       	jmp    c0000509 <int_common_stub>

c00004e5 <irq15>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 2f                	push   0x2f
c00004ea:	e9 1a 00 00 00       	jmp    c0000509 <int_common_stub>

c00004ef <irq1>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 21                	push   0x21
c00004f4:	eb 13                	jmp    c0000509 <int_common_stub>

c00004f6 <irq2>:
c00004f6:	fa                   	cli    
c00004f7:	6a 00                	push   0x0
c00004f9:	6a 22                	push   0x22
c00004fb:	eb 0c                	jmp    c0000509 <int_common_stub>

c00004fd <isr96>:
c00004fd:	6a 00                	push   0x0
c00004ff:	6a 60                	push   0x60
c0000501:	fb                   	sti    
c0000502:	eb 05                	jmp    c0000509 <int_common_stub>

c0000504 <irq0>:
c0000504:	fa                   	cli    
c0000505:	6a 00                	push   0x0
c0000507:	6a 20                	push   0x20

c0000509 <int_common_stub>:
c0000509:	60                   	pusha  
c000050a:	1e                   	push   ds
c000050b:	06                   	push   es
c000050c:	0f a0                	push   fs
c000050e:	0f a8                	push   gs
c0000510:	66 b8 10 00          	mov    ax,0x10
c0000514:	66 8e d8             	mov    ds,ax
c0000517:	66 8e c0             	mov    es,ax
c000051a:	66 8e e0             	mov    fs,ax
c000051d:	66 8e e8             	mov    gs,ax
c0000520:	54                   	push   esp
c0000521:	fc                   	cld    
c0000522:	e8 12 ea 00 00       	call   c000ef39 <int_handler>
c0000527:	81 c4 04 00 00 00    	add    esp,0x4
c000052d:	0f a9                	pop    gs
c000052f:	0f a1                	pop    fs
c0000531:	07                   	pop    es
c0000532:	1f                   	pop    ds
c0000533:	61                   	popa   
c0000534:	81 c4 08 00 00 00    	add    esp,0x8
c000053a:	cf                   	iret   

c000053b <irq16>:
c000053b:	fa                   	cli    
c000053c:	6a 00                	push   0x0
c000053e:	6a 30                	push   0x30
c0000540:	e9 c4 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000545 <irq17>:
c0000545:	fa                   	cli    
c0000546:	6a 00                	push   0x0
c0000548:	6a 31                	push   0x31
c000054a:	e9 ba ff ff ff       	jmp    c0000509 <int_common_stub>

c000054f <irq18>:
c000054f:	fa                   	cli    
c0000550:	6a 00                	push   0x0
c0000552:	6a 32                	push   0x32
c0000554:	e9 b0 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000559 <irq19>:
c0000559:	fa                   	cli    
c000055a:	6a 00                	push   0x0
c000055c:	6a 33                	push   0x33
c000055e:	e9 a6 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000563 <irq20>:
c0000563:	fa                   	cli    
c0000564:	6a 00                	push   0x0
c0000566:	6a 34                	push   0x34
c0000568:	e9 9c ff ff ff       	jmp    c0000509 <int_common_stub>

c000056d <irq21>:
c000056d:	fa                   	cli    
c000056e:	6a 00                	push   0x0
c0000570:	6a 35                	push   0x35
c0000572:	e9 92 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000577 <irq22>:
c0000577:	fa                   	cli    
c0000578:	6a 00                	push   0x0
c000057a:	6a 36                	push   0x36
c000057c:	e9 88 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000581 <irq23>:
c0000581:	fa                   	cli    
c0000582:	6a 00                	push   0x0
c0000584:	6a 37                	push   0x37
c0000586:	e9 7e ff ff ff       	jmp    c0000509 <int_common_stub>

c000058b <memcpy>:
c000058b:	e9 7a 83 00 00       	jmp    c000890a <__not_memcpy>

c0000590 <memcmp>:
c0000590:	56                   	push   esi
c0000591:	53                   	push   ebx
c0000592:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000596:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000059a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000059e:	85 f6                	test   esi,esi
c00005a0:	74 1d                	je     c00005bf <memcmp+0x2f>
c00005a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a4:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a7:	38 cb                	cmp    bl,cl
c00005a9:	75 19                	jne    c00005c4 <memcmp+0x34>
c00005ab:	01 c6                	add    esi,eax
c00005ad:	eb 0a                	jmp    c00005b9 <memcmp+0x29>
c00005af:	90                   	nop
c00005b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005b2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005b5:	38 d9                	cmp    cl,bl
c00005b7:	75 0b                	jne    c00005c4 <memcmp+0x34>
c00005b9:	40                   	inc    eax
c00005ba:	42                   	inc    edx
c00005bb:	39 f0                	cmp    eax,esi
c00005bd:	75 f1                	jne    c00005b0 <memcmp+0x20>
c00005bf:	31 c0                	xor    eax,eax
c00005c1:	5b                   	pop    ebx
c00005c2:	5e                   	pop    esi
c00005c3:	c3                   	ret    
c00005c4:	0f b6 c1             	movzx  eax,cl
c00005c7:	29 d8                	sub    eax,ebx
c00005c9:	5b                   	pop    ebx
c00005ca:	5e                   	pop    esi
c00005cb:	c3                   	ret    

c00005cc <memmove>:
c00005cc:	55                   	push   ebp
c00005cd:	57                   	push   edi
c00005ce:	56                   	push   esi
c00005cf:	53                   	push   ebx
c00005d0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005d4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005dc:	39 dd                	cmp    ebp,ebx
c00005de:	0f 83 80 00 00 00    	jae    c0000664 <memmove+0x98>
c00005e4:	85 d2                	test   edx,edx
c00005e6:	74 74                	je     c000065c <memmove+0x90>
c00005e8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005eb:	8d 75 04             	lea    esi,[ebp+0x4]
c00005ee:	39 cd                	cmp    ebp,ecx
c00005f0:	0f 93 c1             	setae  cl
c00005f3:	39 f3                	cmp    ebx,esi
c00005f5:	0f 93 c0             	setae  al
c00005f8:	89 c6                	mov    esi,eax
c00005fa:	09 ce                	or     esi,ecx
c00005fc:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ff:	89 f0                	mov    eax,esi
c0000601:	83 f9 0c             	cmp    ecx,0xc
c0000604:	0f 97 c1             	seta   cl
c0000607:	84 c8                	test   al,cl
c0000609:	74 75                	je     c0000680 <memmove+0xb4>
c000060b:	89 e9                	mov    ecx,ebp
c000060d:	09 d9                	or     ecx,ebx
c000060f:	83 e1 03             	and    ecx,0x3
c0000612:	75 6c                	jne    c0000680 <memmove+0xb4>
c0000614:	89 d7                	mov    edi,edx
c0000616:	89 d9                	mov    ecx,ebx
c0000618:	83 e7 fc             	and    edi,0xfffffffc
c000061b:	89 ee                	mov    esi,ebp
c000061d:	01 df                	add    edi,ebx
c000061f:	90                   	nop
c0000620:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000622:	83 c6 04             	add    esi,0x4
c0000625:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000628:	83 c1 04             	add    ecx,0x4
c000062b:	39 f9                	cmp    ecx,edi
c000062d:	75 f1                	jne    c0000620 <memmove+0x54>
c000062f:	89 d1                	mov    ecx,edx
c0000631:	89 d7                	mov    edi,edx
c0000633:	83 e1 fc             	and    ecx,0xfffffffc
c0000636:	29 cf                	sub    edi,ecx
c0000638:	01 cb                	add    ebx,ecx
c000063a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000063e:	39 ca                	cmp    edx,ecx
c0000640:	74 1a                	je     c000065c <memmove+0x90>
c0000642:	8a 03                	mov    al,BYTE PTR [ebx]
c0000644:	83 ff 01             	cmp    edi,0x1
c0000647:	88 06                	mov    BYTE PTR [esi],al
c0000649:	74 11                	je     c000065c <memmove+0x90>
c000064b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000064e:	83 ff 02             	cmp    edi,0x2
c0000651:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000654:	74 06                	je     c000065c <memmove+0x90>
c0000656:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000659:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000065c:	5b                   	pop    ebx
c000065d:	89 e8                	mov    eax,ebp
c000065f:	5e                   	pop    esi
c0000660:	5f                   	pop    edi
c0000661:	5d                   	pop    ebp
c0000662:	c3                   	ret    
c0000663:	90                   	nop
c0000664:	76 f6                	jbe    c000065c <memmove+0x90>
c0000666:	85 d2                	test   edx,edx
c0000668:	74 f2                	je     c000065c <memmove+0x90>
c000066a:	4b                   	dec    ebx
c000066b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000066e:	66 90                	xchg   ax,ax
c0000670:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000673:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000676:	4a                   	dec    edx
c0000677:	75 f7                	jne    c0000670 <memmove+0xa4>
c0000679:	5b                   	pop    ebx
c000067a:	89 e8                	mov    eax,ebp
c000067c:	5e                   	pop    esi
c000067d:	5f                   	pop    edi
c000067e:	5d                   	pop    ebp
c000067f:	c3                   	ret    
c0000680:	01 ea                	add    edx,ebp
c0000682:	89 e9                	mov    ecx,ebp
c0000684:	8a 03                	mov    al,BYTE PTR [ebx]
c0000686:	41                   	inc    ecx
c0000687:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000068a:	43                   	inc    ebx
c000068b:	39 d1                	cmp    ecx,edx
c000068d:	75 f5                	jne    c0000684 <memmove+0xb8>
c000068f:	eb cb                	jmp    c000065c <memmove+0x90>
c0000691:	8d 76 00             	lea    esi,[esi+0x0]

c0000694 <memset>:
c0000694:	57                   	push   edi
c0000695:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000699:	85 c9                	test   ecx,ecx
c000069b:	74 0b                	je     c00006a8 <memset+0x14>
c000069d:	fc                   	cld    
c000069e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00006a6:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00006a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ac:	5f                   	pop    edi
c00006ad:	c3                   	ret    
c00006ae:	66 90                	xchg   ax,ax

c00006b0 <strlen>:
c00006b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006b4:	31 c0                	xor    eax,eax
c00006b6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006b9:	74 09                	je     c00006c4 <strlen+0x14>
c00006bb:	90                   	nop
c00006bc:	40                   	inc    eax
c00006bd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006c1:	75 f9                	jne    c00006bc <strlen+0xc>
c00006c3:	c3                   	ret    
c00006c4:	c3                   	ret    
c00006c5:	8d 76 00             	lea    esi,[esi+0x0]

c00006c8 <strpbrk>:
c00006c8:	57                   	push   edi
c00006c9:	56                   	push   esi
c00006ca:	53                   	push   ebx
c00006cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006d3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006d5:	84 db                	test   bl,bl
c00006d7:	74 21                	je     c00006fa <strpbrk+0x32>
c00006d9:	8a 07                	mov    al,BYTE PTR [edi]
c00006db:	84 c0                	test   al,al
c00006dd:	74 14                	je     c00006f3 <strpbrk+0x2b>
c00006df:	38 d8                	cmp    al,bl
c00006e1:	74 19                	je     c00006fc <strpbrk+0x34>
c00006e3:	89 fa                	mov    edx,edi
c00006e5:	eb 05                	jmp    c00006ec <strpbrk+0x24>
c00006e7:	90                   	nop
c00006e8:	38 d9                	cmp    cl,bl
c00006ea:	74 10                	je     c00006fc <strpbrk+0x34>
c00006ec:	42                   	inc    edx
c00006ed:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006ef:	84 c9                	test   cl,cl
c00006f1:	75 f5                	jne    c00006e8 <strpbrk+0x20>
c00006f3:	46                   	inc    esi
c00006f4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006f6:	84 db                	test   bl,bl
c00006f8:	75 e1                	jne    c00006db <strpbrk+0x13>
c00006fa:	31 f6                	xor    esi,esi
c00006fc:	89 f0                	mov    eax,esi
c00006fe:	5b                   	pop    ebx
c00006ff:	5e                   	pop    esi
c0000700:	5f                   	pop    edi
c0000701:	c3                   	ret    
c0000702:	66 90                	xchg   ax,ax

c0000704 <strtok>:
c0000704:	56                   	push   esi
c0000705:	53                   	push   ebx
c0000706:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000070a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000070e:	85 db                	test   ebx,ebx
c0000710:	75 07                	jne    c0000719 <strtok+0x15>
c0000712:	eb 2c                	jmp    c0000740 <strtok+0x3c>
c0000714:	43                   	inc    ebx
c0000715:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000719:	56                   	push   esi
c000071a:	53                   	push   ebx
c000071b:	e8 a8 ff ff ff       	call   c00006c8 <strpbrk>
c0000720:	5a                   	pop    edx
c0000721:	a3 a0 87 02 c0       	mov    ds:0xc00287a0,eax
c0000726:	59                   	pop    ecx
c0000727:	39 d8                	cmp    eax,ebx
c0000729:	74 e9                	je     c0000714 <strtok+0x10>
c000072b:	85 c0                	test   eax,eax
c000072d:	74 1b                	je     c000074a <strtok+0x46>
c000072f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000732:	8d 50 01             	lea    edx,[eax+0x1]
c0000735:	89 d8                	mov    eax,ebx
c0000737:	89 15 a0 87 02 c0    	mov    DWORD PTR ds:0xc00287a0,edx
c000073d:	5b                   	pop    ebx
c000073e:	5e                   	pop    esi
c000073f:	c3                   	ret    
c0000740:	8b 1d a0 87 02 c0    	mov    ebx,DWORD PTR ds:0xc00287a0
c0000746:	85 db                	test   ebx,ebx
c0000748:	75 cf                	jne    c0000719 <strtok+0x15>
c000074a:	31 c0                	xor    eax,eax
c000074c:	5b                   	pop    ebx
c000074d:	5e                   	pop    esi
c000074e:	c3                   	ret    
c000074f:	90                   	nop

c0000750 <strcpy>:
c0000750:	53                   	push   ebx
c0000751:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000755:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000759:	89 c3                	mov    ebx,eax
c000075b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075d:	84 d2                	test   dl,dl
c000075f:	74 0d                	je     c000076e <strcpy+0x1e>
c0000761:	8d 76 00             	lea    esi,[esi+0x0]
c0000764:	88 13                	mov    BYTE PTR [ebx],dl
c0000766:	41                   	inc    ecx
c0000767:	43                   	inc    ebx
c0000768:	8a 11                	mov    dl,BYTE PTR [ecx]
c000076a:	84 d2                	test   dl,dl
c000076c:	75 f6                	jne    c0000764 <strcpy+0x14>
c000076e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000771:	5b                   	pop    ebx
c0000772:	c3                   	ret    
c0000773:	90                   	nop

c0000774 <strncpy>:
c0000774:	55                   	push   ebp
c0000775:	57                   	push   edi
c0000776:	56                   	push   esi
c0000777:	53                   	push   ebx
c0000778:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000077c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000780:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000784:	85 c0                	test   eax,eax
c0000786:	74 39                	je     c00007c1 <strncpy+0x4d>
c0000788:	8a 1e                	mov    bl,BYTE PTR [esi]
c000078a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000078d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000790:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000793:	84 db                	test   bl,bl
c0000795:	74 31                	je     c00007c8 <strncpy+0x54>
c0000797:	85 c9                	test   ecx,ecx
c0000799:	74 26                	je     c00007c1 <strncpy+0x4d>
c000079b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000079e:	8d 48 fe             	lea    ecx,[eax-0x2]
c00007a1:	8d 55 02             	lea    edx,[ebp+0x2]
c00007a4:	8d 46 02             	lea    eax,[esi+0x2]
c00007a7:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00007aa:	84 db                	test   bl,bl
c00007ac:	75 0f                	jne    c00007bd <strncpy+0x49>
c00007ae:	eb 18                	jmp    c00007c8 <strncpy+0x54>
c00007b0:	40                   	inc    eax
c00007b1:	42                   	inc    edx
c00007b2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007b5:	49                   	dec    ecx
c00007b6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 0b                	je     c00007c8 <strncpy+0x54>
c00007bd:	85 c9                	test   ecx,ecx
c00007bf:	75 ef                	jne    c00007b0 <strncpy+0x3c>
c00007c1:	5b                   	pop    ebx
c00007c2:	89 e8                	mov    eax,ebp
c00007c4:	5e                   	pop    esi
c00007c5:	5f                   	pop    edi
c00007c6:	5d                   	pop    ebp
c00007c7:	c3                   	ret    
c00007c8:	85 c9                	test   ecx,ecx
c00007ca:	74 f5                	je     c00007c1 <strncpy+0x4d>
c00007cc:	fc                   	cld    
c00007cd:	31 c0                	xor    eax,eax
c00007cf:	89 d7                	mov    edi,edx
c00007d1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007d3:	89 e8                	mov    eax,ebp
c00007d5:	5b                   	pop    ebx
c00007d6:	5e                   	pop    esi
c00007d7:	5f                   	pop    edi
c00007d8:	5d                   	pop    ebp
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strcmp>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007e6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007e8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007eb:	38 d1                	cmp    cl,dl
c00007ed:	75 1d                	jne    c000080c <strcmp+0x30>
c00007ef:	84 c9                	test   cl,cl
c00007f1:	74 21                	je     c0000814 <strcmp+0x38>
c00007f3:	b8 01 00 00 00       	mov    eax,0x1
c00007f8:	eb 07                	jmp    c0000801 <strcmp+0x25>
c00007fa:	66 90                	xchg   ax,ax
c00007fc:	40                   	inc    eax
c00007fd:	84 d2                	test   dl,dl
c00007ff:	74 13                	je     c0000814 <strcmp+0x38>
c0000801:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000804:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c0000808:	38 ca                	cmp    dl,cl
c000080a:	74 f0                	je     c00007fc <strcmp+0x20>
c000080c:	0f b6 c2             	movzx  eax,dl
c000080f:	5b                   	pop    ebx
c0000810:	29 c8                	sub    eax,ecx
c0000812:	5e                   	pop    esi
c0000813:	c3                   	ret    
c0000814:	31 c0                	xor    eax,eax
c0000816:	5b                   	pop    ebx
c0000817:	5e                   	pop    esi
c0000818:	c3                   	ret    
c0000819:	8d 76 00             	lea    esi,[esi+0x0]

c000081c <strchr>:
c000081c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000820:	8a 10                	mov    dl,BYTE PTR [eax]
c0000822:	84 d2                	test   dl,dl
c0000824:	74 15                	je     c000083b <strchr+0x1f>
c0000826:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000082a:	38 ca                	cmp    dl,cl
c000082c:	75 06                	jne    c0000834 <strchr+0x18>
c000082e:	eb 0e                	jmp    c000083e <strchr+0x22>
c0000830:	38 ca                	cmp    dl,cl
c0000832:	74 09                	je     c000083d <strchr+0x21>
c0000834:	40                   	inc    eax
c0000835:	8a 10                	mov    dl,BYTE PTR [eax]
c0000837:	84 d2                	test   dl,dl
c0000839:	75 f5                	jne    c0000830 <strchr+0x14>
c000083b:	31 c0                	xor    eax,eax
c000083d:	c3                   	ret    
c000083e:	c3                   	ret    
c000083f:	90                   	nop

c0000840 <strncmp>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000847:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084f:	85 ff                	test   edi,edi
c0000851:	74 28                	je     c000087b <strncmp+0x3b>
c0000853:	8a 16                	mov    dl,BYTE PTR [esi]
c0000855:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000858:	38 d1                	cmp    cl,dl
c000085a:	75 28                	jne    c0000884 <strncmp+0x44>
c000085c:	8d 46 01             	lea    eax,[esi+0x1]
c000085f:	84 c9                	test   cl,cl
c0000861:	74 18                	je     c000087b <strncmp+0x3b>
c0000863:	01 fe                	add    esi,edi
c0000865:	eb 0f                	jmp    c0000876 <strncmp+0x36>
c0000867:	90                   	nop
c0000868:	8a 10                	mov    dl,BYTE PTR [eax]
c000086a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000086d:	38 ca                	cmp    dl,cl
c000086f:	75 13                	jne    c0000884 <strncmp+0x44>
c0000871:	40                   	inc    eax
c0000872:	84 d2                	test   dl,dl
c0000874:	74 05                	je     c000087b <strncmp+0x3b>
c0000876:	43                   	inc    ebx
c0000877:	39 c6                	cmp    esi,eax
c0000879:	75 ed                	jne    c0000868 <strncmp+0x28>
c000087b:	5b                   	pop    ebx
c000087c:	31 c0                	xor    eax,eax
c000087e:	5e                   	pop    esi
c000087f:	5f                   	pop    edi
c0000880:	c3                   	ret    
c0000881:	8d 76 00             	lea    esi,[esi+0x0]
c0000884:	5b                   	pop    ebx
c0000885:	0f b6 c2             	movzx  eax,dl
c0000888:	5e                   	pop    esi
c0000889:	29 c8                	sub    eax,ecx
c000088b:	5f                   	pop    edi
c000088c:	c3                   	ret    
c000088d:	8d 76 00             	lea    esi,[esi+0x0]

c0000890 <strcat>:
c0000890:	56                   	push   esi
c0000891:	53                   	push   ebx
c0000892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000896:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000089a:	89 c3                	mov    ebx,eax
c000089c:	eb 04                	jmp    c00008a2 <strcat+0x12>
c000089e:	66 90                	xchg   ax,ax
c00008a0:	89 d3                	mov    ebx,edx
c00008a2:	8d 53 01             	lea    edx,[ebx+0x1]
c00008a5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x10>
c00008ab:	31 d2                	xor    edx,edx
c00008ad:	8d 76 00             	lea    esi,[esi+0x0]
c00008b0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008b3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008b6:	42                   	inc    edx
c00008b7:	84 c9                	test   cl,cl
c00008b9:	75 f5                	jne    c00008b0 <strcat+0x20>
c00008bb:	5b                   	pop    ebx
c00008bc:	5e                   	pop    esi
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strncat>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ce:	85 f6                	test   esi,esi
c00008d0:	74 1e                	je     c00008f0 <strncat+0x30>
c00008d2:	89 c2                	mov    edx,eax
c00008d4:	42                   	inc    edx
c00008d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008d9:	75 f9                	jne    c00008d4 <strncat+0x14>
c00008db:	01 ce                	add    esi,ecx
c00008dd:	eb 06                	jmp    c00008e5 <strncat+0x25>
c00008df:	90                   	nop
c00008e0:	39 f1                	cmp    ecx,esi
c00008e2:	74 10                	je     c00008f4 <strncat+0x34>
c00008e4:	42                   	inc    edx
c00008e5:	41                   	inc    ecx
c00008e6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008e9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008ec:	84 db                	test   bl,bl
c00008ee:	75 f0                	jne    c00008e0 <strncat+0x20>
c00008f0:	5b                   	pop    ebx
c00008f1:	5e                   	pop    esi
c00008f2:	c3                   	ret    
c00008f3:	90                   	nop
c00008f4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f7:	5b                   	pop    ebx
c00008f8:	5e                   	pop    esi
c00008f9:	c3                   	ret    
c00008fa:	66 90                	xchg   ax,ax

c00008fc <strstr>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	57                   	push   edi
c0000908:	e8 a3 fd ff ff       	call   c00006b0 <strlen>
c000090d:	59                   	pop    ecx
c000090e:	85 c0                	test   eax,eax
c0000910:	74 2a                	je     c000093c <strstr+0x40>
c0000912:	89 c6                	mov    esi,eax
c0000914:	eb 12                	jmp    c0000928 <strstr+0x2c>
c0000916:	66 90                	xchg   ax,ax
c0000918:	56                   	push   esi
c0000919:	57                   	push   edi
c000091a:	53                   	push   ebx
c000091b:	e8 70 fc ff ff       	call   c0000590 <memcmp>
c0000920:	83 c4 0c             	add    esp,0xc
c0000923:	85 c0                	test   eax,eax
c0000925:	74 15                	je     c000093c <strstr+0x40>
c0000927:	43                   	inc    ebx
c0000928:	53                   	push   ebx
c0000929:	e8 82 fd ff ff       	call   c00006b0 <strlen>
c000092e:	5a                   	pop    edx
c000092f:	39 f0                	cmp    eax,esi
c0000931:	73 e5                	jae    c0000918 <strstr+0x1c>
c0000933:	5b                   	pop    ebx
c0000934:	31 c0                	xor    eax,eax
c0000936:	5e                   	pop    esi
c0000937:	5f                   	pop    edi
c0000938:	c3                   	ret    
c0000939:	8d 76 00             	lea    esi,[esi+0x0]
c000093c:	89 d8                	mov    eax,ebx
c000093e:	5b                   	pop    ebx
c000093f:	5e                   	pop    esi
c0000940:	5f                   	pop    edi
c0000941:	c3                   	ret    
c0000942:	66 90                	xchg   ax,ax

c0000944 <toupper>:
c0000944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000948:	0f b6 d0             	movzx  edx,al
c000094b:	f6 82 60 3e 02 c0 02 	test   BYTE PTR [edx-0x3ffdc1a0],0x2
c0000952:	74 03                	je     c0000957 <toupper+0x13>
c0000954:	83 e8 20             	sub    eax,0x20
c0000957:	c3                   	ret    

c0000958 <tolower>:
c0000958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000095c:	0f b6 d0             	movzx  edx,al
c000095f:	f6 82 60 3e 02 c0 01 	test   BYTE PTR [edx-0x3ffdc1a0],0x1
c0000966:	74 03                	je     c000096b <tolower+0x13>
c0000968:	83 c0 20             	add    eax,0x20
c000096b:	c3                   	ret    

c000096c <simple_strtoul>:
c000096c:	55                   	push   ebp
c000096d:	57                   	push   edi
c000096e:	56                   	push   esi
c000096f:	53                   	push   ebx
c0000970:	83 ec 08             	sub    esp,0x8
c0000973:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000977:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000097b:	90                   	nop
c000097c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000097f:	f6 82 60 3e 02 c0 08 	test   BYTE PTR [edx-0x3ffdc1a0],0x8
c0000986:	75 05                	jne    c000098d <simple_strtoul+0x21>
c0000988:	80 fa 09             	cmp    dl,0x9
c000098b:	75 03                	jne    c0000990 <simple_strtoul+0x24>
c000098d:	41                   	inc    ecx
c000098e:	eb ec                	jmp    c000097c <simple_strtoul+0x10>
c0000990:	80 fa 2d             	cmp    dl,0x2d
c0000993:	0f 84 1b 01 00 00    	je     c0000ab4 <simple_strtoul+0x148>
c0000999:	80 fa 2b             	cmp    dl,0x2b
c000099c:	0f 84 c2 00 00 00    	je     c0000a64 <simple_strtoul+0xf8>
c00009a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009aa:	85 f6                	test   esi,esi
c00009ac:	0f 85 c3 00 00 00    	jne    c0000a75 <simple_strtoul+0x109>
c00009b2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009b4:	80 fa 30             	cmp    dl,0x30
c00009b7:	0f 84 47 01 00 00    	je     c0000b04 <simple_strtoul+0x198>
c00009bd:	be 0a 00 00 00       	mov    esi,0xa
c00009c2:	84 d2                	test   dl,dl
c00009c4:	0f 84 6f 01 00 00    	je     c0000b39 <simple_strtoul+0x1cd>
c00009ca:	31 ed                	xor    ebp,ebp
c00009cc:	31 ff                	xor    edi,edi
c00009ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009d5:	eb 2b                	jmp    c0000a02 <simple_strtoul+0x96>
c00009d7:	90                   	nop
c00009d8:	83 eb 30             	sub    ebx,0x30
c00009db:	39 f3                	cmp    ebx,esi
c00009dd:	73 4d                	jae    c0000a2c <simple_strtoul+0xc0>
c00009df:	31 d2                	xor    edx,edx
c00009e1:	89 d8                	mov    eax,ebx
c00009e3:	f7 d0                	not    eax
c00009e5:	f7 f6                	div    esi
c00009e7:	39 f8                	cmp    eax,edi
c00009e9:	0f 82 b1 00 00 00    	jb     c0000aa0 <simple_strtoul+0x134>
c00009ef:	0f af fe             	imul   edi,esi
c00009f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009f9:	01 df                	add    edi,ebx
c00009fb:	41                   	inc    ecx
c00009fc:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009fe:	84 d2                	test   dl,dl
c0000a00:	74 2a                	je     c0000a2c <simple_strtoul+0xc0>
c0000a02:	0f b6 da             	movzx  ebx,dl
c0000a05:	f6 83 60 3e 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc1a0],0x4
c0000a0c:	75 ca                	jne    c00009d8 <simple_strtoul+0x6c>
c0000a0e:	0f be d2             	movsx  edx,dl
c0000a11:	52                   	push   edx
c0000a12:	e8 2d ff ff ff       	call   c0000944 <toupper>
c0000a17:	5b                   	pop    ebx
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 3e 02 c0 01 	test   BYTE PTR [edx-0x3ffdc1a0],0x1
c0000a22:	74 08                	je     c0000a2c <simple_strtoul+0xc0>
c0000a24:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a27:	39 f3                	cmp    ebx,esi
c0000a29:	72 b4                	jb     c00009df <simple_strtoul+0x73>
c0000a2b:	90                   	nop
c0000a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a30:	85 c0                	test   eax,eax
c0000a32:	74 14                	je     c0000a48 <simple_strtoul+0xdc>
c0000a34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a37:	09 f8                	or     eax,edi
c0000a39:	75 71                	jne    c0000aac <simple_strtoul+0x140>
c0000a3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a3f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a43:	31 ff                	xor    edi,edi
c0000a45:	89 30                	mov    DWORD PTR [eax],esi
c0000a47:	90                   	nop
c0000a48:	4d                   	dec    ebp
c0000a49:	75 05                	jne    c0000a50 <simple_strtoul+0xe4>
c0000a4b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a50:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a55:	75 02                	jne    c0000a59 <simple_strtoul+0xed>
c0000a57:	f7 df                	neg    edi
c0000a59:	83 c4 08             	add    esp,0x8
c0000a5c:	89 f8                	mov    eax,edi
c0000a5e:	5b                   	pop    ebx
c0000a5f:	5e                   	pop    esi
c0000a60:	5f                   	pop    edi
c0000a61:	5d                   	pop    ebp
c0000a62:	c3                   	ret    
c0000a63:	90                   	nop
c0000a64:	41                   	inc    ecx
c0000a65:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a6d:	85 f6                	test   esi,esi
c0000a6f:	0f 84 3d ff ff ff    	je     c00009b2 <simple_strtoul+0x46>
c0000a75:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a78:	83 f8 22             	cmp    eax,0x22
c0000a7b:	77 6a                	ja     c0000ae7 <simple_strtoul+0x17b>
c0000a7d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a7f:	83 fe 08             	cmp    esi,0x8
c0000a82:	0f 84 a2 00 00 00    	je     c0000b2a <simple_strtoul+0x1be>
c0000a88:	83 fe 10             	cmp    esi,0x10
c0000a8b:	0f 85 31 ff ff ff    	jne    c00009c2 <simple_strtoul+0x56>
c0000a91:	80 fa 30             	cmp    dl,0x30
c0000a94:	74 2c                	je     c0000ac2 <simple_strtoul+0x156>
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	e9 22 ff ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000aa0:	bd 01 00 00 00       	mov    ebp,0x1
c0000aa5:	31 ff                	xor    edi,edi
c0000aa7:	e9 4f ff ff ff       	jmp    c00009fb <simple_strtoul+0x8f>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	89 08                	mov    DWORD PTR [eax],ecx
c0000ab2:	eb 94                	jmp    c0000a48 <simple_strtoul+0xdc>
c0000ab4:	41                   	inc    ecx
c0000ab5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000abd:	e9 e8 fe ff ff       	jmp    c00009aa <simple_strtoul+0x3e>
c0000ac2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac9:	50                   	push   eax
c0000aca:	e8 89 fe ff ff       	call   c0000958 <tolower>
c0000acf:	5e                   	pop    esi
c0000ad0:	83 f8 78             	cmp    eax,0x78
c0000ad3:	0f 84 84 00 00 00    	je     c0000b5d <simple_strtoul+0x1f1>
c0000ad9:	41                   	inc    ecx
c0000ada:	be 10 00 00 00       	mov    esi,0x10
c0000adf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ae2:	e9 db fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000ae7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aeb:	85 ff                	test   edi,edi
c0000aed:	74 5c                	je     c0000b4b <simple_strtoul+0x1df>
c0000aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000af3:	85 c9                	test   ecx,ecx
c0000af5:	75 4e                	jne    c0000b45 <simple_strtoul+0x1d9>
c0000af7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000afd:	31 ff                	xor    edi,edi
c0000aff:	e9 4c ff ff ff       	jmp    c0000a50 <simple_strtoul+0xe4>
c0000b04:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b08:	88 04 24             	mov    BYTE PTR [esp],al
c0000b0b:	50                   	push   eax
c0000b0c:	e8 47 fe ff ff       	call   c0000958 <tolower>
c0000b11:	5d                   	pop    ebp
c0000b12:	83 f8 78             	cmp    eax,0x78
c0000b15:	74 3b                	je     c0000b52 <simple_strtoul+0x1e6>
c0000b17:	41                   	inc    ecx
c0000b18:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b1b:	80 fa 30             	cmp    dl,0x30
c0000b1e:	74 13                	je     c0000b33 <simple_strtoul+0x1c7>
c0000b20:	be 08 00 00 00       	mov    esi,0x8
c0000b25:	e9 98 fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000b2a:	80 fa 30             	cmp    dl,0x30
c0000b2d:	0f 85 8f fe ff ff    	jne    c00009c2 <simple_strtoul+0x56>
c0000b33:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b36:	41                   	inc    ecx
c0000b37:	eb e7                	jmp    c0000b20 <simple_strtoul+0x1b4>
c0000b39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b3d:	85 d2                	test   edx,edx
c0000b3f:	74 0a                	je     c0000b4b <simple_strtoul+0x1df>
c0000b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b45:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b49:	89 30                	mov    DWORD PTR [eax],esi
c0000b4b:	31 ff                	xor    edi,edi
c0000b4d:	e9 fe fe ff ff       	jmp    c0000a50 <simple_strtoul+0xe4>
c0000b52:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 34 ff ff ff       	jmp    c0000a91 <simple_strtoul+0x125>
c0000b5d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b60:	be 10 00 00 00       	mov    esi,0x10
c0000b65:	83 c1 02             	add    ecx,0x2
c0000b68:	e9 55 fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>

c0000b6d <largebin_index>:
c0000b6d:	89 c2                	mov    edx,eax
c0000b6f:	c1 ea 08             	shr    edx,0x8
c0000b72:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b78:	77 10                	ja     c0000b8a <largebin_index+0x1d>
c0000b7a:	0f bd d2             	bsr    edx,edx
c0000b7d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b80:	d3 e8                	shr    eax,cl
c0000b82:	83 e0 03             	and    eax,0x3
c0000b85:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b89:	c3                   	ret    
c0000b8a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b8f:	c3                   	ret    

c0000b90 <malloc_init_state>:
c0000b90:	53                   	push   ebx
c0000b91:	8d 50 34             	lea    edx,[eax+0x34]
c0000b94:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b9a:	89 d1                	mov    ecx,edx
c0000b9c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b9f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000ba2:	83 c2 08             	add    edx,0x8
c0000ba5:	39 da                	cmp    edx,ebx
c0000ba7:	75 f3                	jne    c0000b9c <malloc_init_state+0xc>
c0000ba9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bab:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000bb5:	83 e2 03             	and    edx,0x3
c0000bb8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bc2:	83 ca 48             	or     edx,0x48
c0000bc5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bcf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bd9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000be0:	89 10                	mov    DWORD PTR [eax],edx
c0000be2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000be5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bef:	5b                   	pop    ebx
c0000bf0:	c3                   	ret    

c0000bf1 <malloc_consolidate>:
c0000bf1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bf3:	85 d2                	test   edx,edx
c0000bf5:	0f 84 d8 00 00 00    	je     c0000cd3 <malloc_consolidate+0xe2>
c0000bfb:	55                   	push   ebp
c0000bfc:	83 e2 fd             	and    edx,0xfffffffd
c0000bff:	57                   	push   edi
c0000c00:	89 c5                	mov    ebp,eax
c0000c02:	56                   	push   esi
c0000c03:	8d 78 34             	lea    edi,[eax+0x34]
c0000c06:	53                   	push   ebx
c0000c07:	83 ec 10             	sub    esp,0x10
c0000c0a:	89 10                	mov    DWORD PTR [eax],edx
c0000c0c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c10:	c1 ea 03             	shr    edx,0x3
c0000c13:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c17:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c1b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c1e:	85 d2                	test   edx,edx
c0000c20:	0f 84 98 00 00 00    	je     c0000cbe <malloc_consolidate+0xcd>
c0000c26:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c2d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c30:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c33:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c37:	89 f9                	mov    ecx,edi
c0000c39:	83 e1 fe             	and    ecx,0xfffffffe
c0000c3c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c3f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c42:	83 e3 fc             	and    ebx,0xfffffffc
c0000c45:	83 e7 01             	and    edi,0x1
c0000c48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c4b:	75 14                	jne    c0000c61 <malloc_consolidate+0x70>
c0000c4d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c4f:	29 fa                	sub    edx,edi
c0000c51:	01 f9                	add    ecx,edi
c0000c53:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c56:	89 fb                	mov    ebx,edi
c0000c58:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c5b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c5e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c61:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c64:	74 40                	je     c0000ca6 <malloc_consolidate+0xb5>
c0000c66:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c69:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c6c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c70:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c73:	83 e7 01             	and    edi,0x1
c0000c76:	75 0e                	jne    c0000c86 <malloc_consolidate+0x95>
c0000c78:	01 d9                	add    ecx,ebx
c0000c7a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c7d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c80:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c83:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c86:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c89:	89 ce                	mov    esi,ecx
c0000c8b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c8e:	83 ce 01             	or     esi,0x1
c0000c91:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c94:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c97:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c9a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c9e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ca1:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ca4:	eb 0c                	jmp    c0000cb2 <malloc_consolidate+0xc1>
c0000ca6:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ca9:	83 c9 01             	or     ecx,0x1
c0000cac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000caf:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000cb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000cb6:	85 d2                	test   edx,edx
c0000cb8:	0f 85 6f ff ff ff    	jne    c0000c2d <malloc_consolidate+0x3c>
c0000cbe:	83 c5 04             	add    ebp,0x4
c0000cc1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cc5:	0f 85 50 ff ff ff    	jne    c0000c1b <malloc_consolidate+0x2a>
c0000ccb:	83 c4 10             	add    esp,0x10
c0000cce:	5b                   	pop    ebx
c0000ccf:	5e                   	pop    esi
c0000cd0:	5f                   	pop    edi
c0000cd1:	5d                   	pop    ebp
c0000cd2:	c3                   	ret    
c0000cd3:	e9 b8 fe ff ff       	jmp    c0000b90 <malloc_init_state>

c0000cd8 <dlfree>:
c0000cd8:	57                   	push   edi
c0000cd9:	56                   	push   esi
c0000cda:	53                   	push   ebx
c0000cdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cdf:	85 db                	test   ebx,ebx
c0000ce1:	0f 84 e2 00 00 00    	je     c0000dc9 <dlfree+0xf1>
c0000ce7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cea:	8b 0d c0 87 02 c0    	mov    ecx,DWORD PTR ds:0xc00287c0
c0000cf0:	89 f0                	mov    eax,esi
c0000cf2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cf5:	83 e0 fc             	and    eax,0xfffffffc
c0000cf8:	39 c1                	cmp    ecx,eax
c0000cfa:	72 24                	jb     c0000d20 <dlfree+0x48>
c0000cfc:	83 c9 03             	or     ecx,0x3
c0000cff:	c1 e8 03             	shr    eax,0x3
c0000d02:	89 0d c0 87 02 c0    	mov    DWORD PTR ds:0xc00287c0,ecx
c0000d08:	83 e8 02             	sub    eax,0x2
c0000d0b:	8b 0c 85 c4 87 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd783c]
c0000d12:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d14:	89 14 85 c4 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd783c],edx
c0000d1b:	e9 a9 00 00 00       	jmp    c0000dc9 <dlfree+0xf1>
c0000d20:	83 e6 02             	and    esi,0x2
c0000d23:	0f 85 a0 00 00 00    	jne    c0000dc9 <dlfree+0xf1>
c0000d29:	83 c9 01             	or     ecx,0x1
c0000d2c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d2f:	89 0d c0 87 02 c0    	mov    DWORD PTR ds:0xc00287c0,ecx
c0000d35:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d38:	83 e1 fc             	and    ecx,0xfffffffc
c0000d3b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d3f:	75 13                	jne    c0000d54 <dlfree+0x7c>
c0000d41:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d44:	29 da                	sub    edx,ebx
c0000d46:	01 d8                	add    eax,ebx
c0000d48:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d4b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d4e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d51:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d54:	39 35 ec 87 02 c0    	cmp    DWORD PTR ds:0xc00287ec,esi
c0000d5a:	74 40                	je     c0000d9c <dlfree+0xc4>
c0000d5c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d60:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d63:	80 e3 01             	and    bl,0x1
c0000d66:	75 0e                	jne    c0000d76 <dlfree+0x9e>
c0000d68:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d6b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d6e:	01 c8                	add    eax,ecx
c0000d70:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d73:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d76:	8b 0d fc 87 02 c0    	mov    ecx,DWORD PTR ds:0xc00287fc
c0000d7c:	c7 42 0c f4 87 02 c0 	mov    DWORD PTR [edx+0xc],0xc00287f4
c0000d83:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d86:	89 15 fc 87 02 c0    	mov    DWORD PTR ds:0xc00287fc,edx
c0000d8c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d8f:	89 c1                	mov    ecx,eax
c0000d91:	83 c9 01             	or     ecx,0x1
c0000d94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d97:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d9a:	eb 10                	jmp    c0000dac <dlfree+0xd4>
c0000d9c:	01 c8                	add    eax,ecx
c0000d9e:	89 c1                	mov    ecx,eax
c0000da0:	83 c9 01             	or     ecx,0x1
c0000da3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000da6:	89 15 ec 87 02 c0    	mov    DWORD PTR ds:0xc00287ec,edx
c0000dac:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000db1:	76 16                	jbe    c0000dc9 <dlfree+0xf1>
c0000db3:	f6 05 c0 87 02 c0 02 	test   BYTE PTR ds:0xc00287c0,0x2
c0000dba:	74 0d                	je     c0000dc9 <dlfree+0xf1>
c0000dbc:	5b                   	pop    ebx
c0000dbd:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c0000dc2:	5e                   	pop    esi
c0000dc3:	5f                   	pop    edi
c0000dc4:	e9 28 fe ff ff       	jmp    c0000bf1 <malloc_consolidate>
c0000dc9:	5b                   	pop    ebx
c0000dca:	5e                   	pop    esi
c0000dcb:	5f                   	pop    edi
c0000dcc:	c3                   	ret    

c0000dcd <sYSMALLOc>:
c0000dcd:	55                   	push   ebp
c0000dce:	57                   	push   edi
c0000dcf:	56                   	push   esi
c0000dd0:	53                   	push   ebx
c0000dd1:	89 d3                	mov    ebx,edx
c0000dd3:	83 ec 2c             	sub    esp,0x2c
c0000dd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dda:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000de0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000de3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000de6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dea:	74 1f                	je     c0000e0b <sYSMALLOc+0x3e>
c0000dec:	89 d8                	mov    eax,ebx
c0000dee:	e8 fe fd ff ff       	call   c0000bf1 <malloc_consolidate>
c0000df3:	83 ec 0c             	sub    esp,0xc
c0000df6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dfa:	83 e8 07             	sub    eax,0x7
c0000dfd:	50                   	push   eax
c0000dfe:	e8 30 02 00 00       	call   c0001033 <dlmalloc>
c0000e03:	83 c4 10             	add    esp,0x10
c0000e06:	e9 20 02 00 00       	jmp    c000102b <sYSMALLOc+0x25e>
c0000e0b:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e0e:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e14:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e17:	83 e0 fc             	and    eax,0xfffffffc
c0000e1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e22:	83 c0 10             	add    eax,0x10
c0000e25:	01 c1                	add    ecx,eax
c0000e27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e2b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e32:	74 04                	je     c0000e38 <sYSMALLOc+0x6b>
c0000e34:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e38:	f7 da                	neg    edx
c0000e3a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e3e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e42:	21 d1                	and    ecx,edx
c0000e44:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e48:	7f 07                	jg     c0000e51 <sYSMALLOc+0x84>
c0000e4a:	31 c0                	xor    eax,eax
c0000e4c:	e9 da 01 00 00       	jmp    c000102b <sYSMALLOc+0x25e>
c0000e51:	83 ec 0c             	sub    esp,0xc
c0000e54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e58:	e8 53 8e 00 00       	call   c0009cb0 <sbrk>
c0000e5d:	83 c4 10             	add    esp,0x10
c0000e60:	89 c6                	mov    esi,eax
c0000e62:	83 f8 ff             	cmp    eax,0xffffffff
c0000e65:	74 e3                	je     c0000e4a <sYSMALLOc+0x7d>
c0000e67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e6b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e6f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e72:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e78:	39 f1                	cmp    ecx,esi
c0000e7a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e80:	75 13                	jne    c0000e95 <sYSMALLOc+0xc8>
c0000e82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e86:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e8a:	83 c8 01             	or     eax,0x1
c0000e8d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e90:	e9 3e 01 00 00       	jmp    c0000fd3 <sYSMALLOc+0x206>
c0000e95:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e9b:	88 d0                	mov    al,dl
c0000e9d:	83 e0 01             	and    eax,0x1
c0000ea0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ea5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000ea9:	0f 95 c0             	setne  al
c0000eac:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000eb0:	39 f1                	cmp    ecx,esi
c0000eb2:	76 12                	jbe    c0000ec6 <sYSMALLOc+0xf9>
c0000eb4:	84 c0                	test   al,al
c0000eb6:	74 0e                	je     c0000ec6 <sYSMALLOc+0xf9>
c0000eb8:	83 e2 fe             	and    edx,0xfffffffe
c0000ebb:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ec1:	e9 83 00 00 00       	jmp    c0000f49 <sYSMALLOc+0x17c>
c0000ec6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ecb:	74 7c                	je     c0000f49 <sYSMALLOc+0x17c>
c0000ecd:	84 c0                	test   al,al
c0000ecf:	74 0c                	je     c0000edd <sYSMALLOc+0x110>
c0000ed1:	89 f0                	mov    eax,esi
c0000ed3:	29 c8                	sub    eax,ecx
c0000ed5:	01 e8                	add    eax,ebp
c0000ed7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000edd:	89 f2                	mov    edx,esi
c0000edf:	83 e2 07             	and    edx,0x7
c0000ee2:	74 0c                	je     c0000ef0 <sYSMALLOc+0x123>
c0000ee4:	b8 08 00 00 00       	mov    eax,0x8
c0000ee9:	29 d0                	sub    eax,edx
c0000eeb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eee:	eb 04                	jmp    c0000ef4 <sYSMALLOc+0x127>
c0000ef0:	89 f5                	mov    ebp,esi
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ef8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000efc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f00:	01 c1                	add    ecx,eax
c0000f02:	83 ec 0c             	sub    esp,0xc
c0000f05:	01 f1                	add    ecx,esi
c0000f07:	01 ca                	add    edx,ecx
c0000f09:	29 c8                	sub    eax,ecx
c0000f0b:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000f0f:	01 c2                	add    edx,eax
c0000f11:	52                   	push   edx
c0000f12:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f16:	e8 95 8d 00 00       	call   c0009cb0 <sbrk>
c0000f1b:	83 c4 10             	add    esp,0x10
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f25:	75 0f                	jne    c0000f36 <sYSMALLOc+0x169>
c0000f27:	83 ec 0c             	sub    esp,0xc
c0000f2a:	6a 00                	push   0x0
c0000f2c:	e8 7f 8d 00 00       	call   c0009cb0 <sbrk>
c0000f31:	83 c4 10             	add    esp,0x10
c0000f34:	eb 30                	jmp    c0000f66 <sYSMALLOc+0x199>
c0000f36:	39 c6                	cmp    esi,eax
c0000f38:	76 33                	jbe    c0000f6d <sYSMALLOc+0x1a0>
c0000f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f3e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f45:	01 f0                	add    eax,esi
c0000f47:	eb 1d                	jmp    c0000f66 <sYSMALLOc+0x199>
c0000f49:	83 ec 0c             	sub    esp,0xc
c0000f4c:	89 f5                	mov    ebp,esi
c0000f4e:	6a 00                	push   0x0
c0000f50:	e8 5b 8d 00 00       	call   c0009cb0 <sbrk>
c0000f55:	89 c2                	mov    edx,eax
c0000f57:	29 f2                	sub    edx,esi
c0000f59:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f5d:	83 c4 10             	add    esp,0x10
c0000f60:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f66:	31 d2                	xor    edx,edx
c0000f68:	83 f8 ff             	cmp    eax,0xffffffff
c0000f6b:	74 66                	je     c0000fd3 <sYSMALLOc+0x206>
c0000f6d:	29 e8                	sub    eax,ebp
c0000f6f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f72:	01 d0                	add    eax,edx
c0000f74:	83 c8 01             	or     eax,0x1
c0000f77:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f7a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f80:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f85:	74 4c                	je     c0000fd3 <sYSMALLOc+0x206>
c0000f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f8b:	83 e8 0c             	sub    eax,0xc
c0000f8e:	83 e0 f8             	and    eax,0xfffffff8
c0000f91:	89 c2                	mov    edx,eax
c0000f93:	83 ca 01             	or     edx,0x1
c0000f96:	83 f8 0f             	cmp    eax,0xf
c0000f99:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f9c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000fa4:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000fac:	76 25                	jbe    c0000fd3 <sYSMALLOc+0x206>
c0000fae:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fb4:	83 ec 0c             	sub    esp,0xc
c0000fb7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fc1:	83 c7 08             	add    edi,0x8
c0000fc4:	57                   	push   edi
c0000fc5:	e8 0e fd ff ff       	call   c0000cd8 <dlfree>
c0000fca:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fd0:	83 c4 10             	add    esp,0x10
c0000fd3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fdf:	73 06                	jae    c0000fe7 <sYSMALLOc+0x21a>
c0000fe1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fe7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fed:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ff3:	73 06                	jae    c0000ffb <sYSMALLOc+0x22e>
c0000ff5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ffb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ffe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001001:	83 e2 fc             	and    edx,0xfffffffc
c0001004:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001008:	0f 82 3c fe ff ff    	jb     c0000e4a <sYSMALLOc+0x7d>
c000100e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001012:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001015:	29 fa                	sub    edx,edi
c0001017:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000101a:	83 ca 01             	or     edx,0x1
c000101d:	89 fb                	mov    ebx,edi
c000101f:	83 c0 08             	add    eax,0x8
c0001022:	83 cb 01             	or     ebx,0x1
c0001025:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001028:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000102b:	83 c4 2c             	add    esp,0x2c
c000102e:	5b                   	pop    ebx
c000102f:	5e                   	pop    esi
c0001030:	5f                   	pop    edi
c0001031:	5d                   	pop    ebp
c0001032:	c3                   	ret    

c0001033 <dlmalloc>:
c0001033:	55                   	push   ebp
c0001034:	57                   	push   edi
c0001035:	56                   	push   esi
c0001036:	53                   	push   ebx
c0001037:	83 ec 1c             	sub    esp,0x1c
c000103a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000103e:	83 f8 df             	cmp    eax,0xffffffdf
c0001041:	0f 87 70 03 00 00    	ja     c00013b7 <dlmalloc+0x384>
c0001047:	83 c0 0b             	add    eax,0xb
c000104a:	be 10 00 00 00       	mov    esi,0x10
c000104f:	83 f8 0f             	cmp    eax,0xf
c0001052:	76 05                	jbe    c0001059 <dlmalloc+0x26>
c0001054:	83 e0 f8             	and    eax,0xfffffff8
c0001057:	89 c6                	mov    esi,eax
c0001059:	8b 3d c0 87 02 c0    	mov    edi,DWORD PTR ds:0xc00287c0
c000105f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001065:	75 17                	jne    c000107e <dlmalloc+0x4b>
c0001067:	85 ff                	test   edi,edi
c0001069:	0f 85 05 03 00 00    	jne    c0001374 <dlmalloc+0x341>
c000106f:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c0001074:	e8 78 fb ff ff       	call   c0000bf1 <malloc_consolidate>
c0001079:	e9 f6 02 00 00       	jmp    c0001374 <dlmalloc+0x341>
c000107e:	39 f7                	cmp    edi,esi
c0001080:	72 1f                	jb     c00010a1 <dlmalloc+0x6e>
c0001082:	89 f2                	mov    edx,esi
c0001084:	c1 ea 03             	shr    edx,0x3
c0001087:	83 ea 02             	sub    edx,0x2
c000108a:	8b 04 95 c4 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd783c]
c0001091:	85 c0                	test   eax,eax
c0001093:	74 0c                	je     c00010a1 <dlmalloc+0x6e>
c0001095:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001098:	89 0c 95 c4 87 02 c0 	mov    DWORD PTR [edx*4-0x3ffd783c],ecx
c000109f:	eb 30                	jmp    c00010d1 <dlmalloc+0x9e>
c00010a1:	89 f0                	mov    eax,esi
c00010a3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a9:	77 2e                	ja     c00010d9 <dlmalloc+0xa6>
c00010ab:	c1 e8 03             	shr    eax,0x3
c00010ae:	8d 14 c5 f4 87 02 c0 	lea    edx,[eax*8-0x3ffd780c]
c00010b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010b9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010bc:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010bf:	39 c3                	cmp    ebx,eax
c00010c1:	74 2e                	je     c00010f1 <dlmalloc+0xbe>
c00010c3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010c6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010cb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010ce:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010d1:	83 c0 08             	add    eax,0x8
c00010d4:	e9 e0 02 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c00010d9:	e8 8f fa ff ff       	call   c0000b6d <largebin_index>
c00010de:	83 e7 02             	and    edi,0x2
c00010e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010e5:	74 0a                	je     c00010f1 <dlmalloc+0xbe>
c00010e7:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c00010ec:	e8 00 fb ff ff       	call   c0000bf1 <malloc_consolidate>
c00010f1:	8d 46 10             	lea    eax,[esi+0x10]
c00010f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010f8:	8b 1d 00 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028800
c00010fe:	81 fb f4 87 02 c0    	cmp    ebx,0xc00287f4
c0001104:	0f 84 13 01 00 00    	je     c000121d <dlmalloc+0x1ea>
c000110a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000110d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001110:	83 e7 fc             	and    edi,0xfffffffc
c0001113:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001119:	77 4c                	ja     c0001167 <dlmalloc+0x134>
c000111b:	3d f4 87 02 c0       	cmp    eax,0xc00287f4
c0001120:	75 45                	jne    c0001167 <dlmalloc+0x134>
c0001122:	39 1d f0 87 02 c0    	cmp    DWORD PTR ds:0xc00287f0,ebx
c0001128:	75 3d                	jne    c0001167 <dlmalloc+0x134>
c000112a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000112e:	73 37                	jae    c0001167 <dlmalloc+0x134>
c0001130:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001133:	89 fa                	mov    edx,edi
c0001135:	a3 fc 87 02 c0       	mov    ds:0xc00287fc,eax
c000113a:	a3 00 88 02 c0       	mov    ds:0xc0028800,eax
c000113f:	a3 f0 87 02 c0       	mov    ds:0xc00287f0,eax
c0001144:	29 f2                	sub    edx,esi
c0001146:	c7 40 08 f4 87 02 c0 	mov    DWORD PTR [eax+0x8],0xc00287f4
c000114d:	c7 40 0c f4 87 02 c0 	mov    DWORD PTR [eax+0xc],0xc00287f4
c0001154:	83 ce 01             	or     esi,0x1
c0001157:	89 d1                	mov    ecx,edx
c0001159:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000115c:	83 c9 01             	or     ecx,0x1
c000115f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001162:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001165:	eb 15                	jmp    c000117c <dlmalloc+0x149>
c0001167:	a3 00 88 02 c0       	mov    ds:0xc0028800,eax
c000116c:	39 fe                	cmp    esi,edi
c000116e:	c7 40 08 f4 87 02 c0 	mov    DWORD PTR [eax+0x8],0xc00287f4
c0001175:	75 0d                	jne    c0001184 <dlmalloc+0x151>
c0001177:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000117c:	8d 43 08             	lea    eax,[ebx+0x8]
c000117f:	e9 35 02 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001184:	89 f8                	mov    eax,edi
c0001186:	81 ff ff 00 00 00    	cmp    edi,0xff
c000118c:	77 19                	ja     c00011a7 <dlmalloc+0x174>
c000118e:	c1 e8 03             	shr    eax,0x3
c0001191:	8d 14 00             	lea    edx,[eax+eax*1]
c0001194:	83 c2 0d             	add    edx,0xd
c0001197:	8d 2c 95 b8 87 02 c0 	lea    ebp,[edx*4-0x3ffd7848]
c000119e:	8b 14 95 c0 87 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7840]
c00011a5:	eb 46                	jmp    c00011ed <dlmalloc+0x1ba>
c00011a7:	e8 c1 f9 ff ff       	call   c0000b6d <largebin_index>
c00011ac:	8d 14 00             	lea    edx,[eax+eax*1]
c00011af:	83 c2 0d             	add    edx,0xd
c00011b2:	8d 0c 95 c0 87 02 c0 	lea    ecx,[edx*4-0x3ffd7840]
c00011b9:	8b 14 95 c0 87 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7840]
c00011c0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011c3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011c7:	89 d5                	mov    ebp,edx
c00011c9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011cd:	74 1e                	je     c00011ed <dlmalloc+0x1ba>
c00011cf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011d2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011d5:	77 12                	ja     c00011e9 <dlmalloc+0x1b6>
c00011d7:	83 cf 01             	or     edi,0x1
c00011da:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011dd:	76 05                	jbe    c00011e4 <dlmalloc+0x1b1>
c00011df:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011e2:	eb f6                	jmp    c00011da <dlmalloc+0x1a7>
c00011e4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011e7:	eb 04                	jmp    c00011ed <dlmalloc+0x1ba>
c00011e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ed:	89 c7                	mov    edi,eax
c00011ef:	88 c1                	mov    cl,al
c00011f1:	c1 ff 05             	sar    edi,0x5
c00011f4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011f8:	bf 01 00 00 00       	mov    edi,0x1
c00011fd:	d3 e7                	shl    edi,cl
c00011ff:	89 f8                	mov    eax,edi
c0001201:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001205:	09 04 bd f4 8a 02 c0 	or     DWORD PTR [edi*4-0x3ffd750c],eax
c000120c:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000120f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001212:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001215:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001218:	e9 db fe ff ff       	jmp    c00010f8 <dlmalloc+0xc5>
c000121d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001223:	76 78                	jbe    c000129d <dlmalloc+0x26a>
c0001225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001229:	8d 04 c5 f4 87 02 c0 	lea    eax,[eax*8-0x3ffd780c]
c0001230:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001233:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001236:	39 ca                	cmp    edx,ecx
c0001238:	74 63                	je     c000129d <dlmalloc+0x26a>
c000123a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000123d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001240:	83 e3 fc             	and    ebx,0xfffffffc
c0001243:	39 de                	cmp    esi,ebx
c0001245:	77 52                	ja     c0001299 <dlmalloc+0x266>
c0001247:	89 df                	mov    edi,ebx
c0001249:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000124c:	29 f7                	sub    edi,esi
c000124e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001251:	01 d3                	add    ebx,edx
c0001253:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001256:	83 ff 0f             	cmp    edi,0xf
c0001259:	8d 42 08             	lea    eax,[edx+0x8]
c000125c:	77 09                	ja     c0001267 <dlmalloc+0x234>
c000125e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001262:	e9 52 01 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001267:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000126a:	83 ce 01             	or     esi,0x1
c000126d:	89 0d fc 87 02 c0    	mov    DWORD PTR ds:0xc00287fc,ecx
c0001273:	89 0d 00 88 02 c0    	mov    DWORD PTR ds:0xc0028800,ecx
c0001279:	c7 41 08 f4 87 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00287f4
c0001280:	c7 41 0c f4 87 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00287f4
c0001287:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000128a:	89 fa                	mov    edx,edi
c000128c:	83 ca 01             	or     edx,0x1
c000128f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001292:	89 3b                	mov    DWORD PTR [ebx],edi
c0001294:	e9 20 01 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001299:	89 c2                	mov    edx,eax
c000129b:	eb 99                	jmp    c0001236 <dlmalloc+0x203>
c000129d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00012a1:	b8 01 00 00 00       	mov    eax,0x1
c00012a6:	41                   	inc    ecx
c00012a7:	89 cb                	mov    ebx,ecx
c00012a9:	8d 14 cd ec 87 02 c0 	lea    edx,[ecx*8-0x3ffd7814]
c00012b0:	c1 eb 05             	shr    ebx,0x5
c00012b3:	d3 e0                	shl    eax,cl
c00012b5:	8b 3c 9d f4 8a 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd750c]
c00012bc:	39 f8                	cmp    eax,edi
c00012be:	77 04                	ja     c00012c4 <dlmalloc+0x291>
c00012c0:	85 c0                	test   eax,eax
c00012c2:	75 26                	jne    c00012ea <dlmalloc+0x2b7>
c00012c4:	43                   	inc    ebx
c00012c5:	83 fb 02             	cmp    ebx,0x2
c00012c8:	0f 87 a6 00 00 00    	ja     c0001374 <dlmalloc+0x341>
c00012ce:	8b 3c 9d f4 8a 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd750c]
c00012d5:	85 ff                	test   edi,edi
c00012d7:	74 eb                	je     c00012c4 <dlmalloc+0x291>
c00012d9:	89 d8                	mov    eax,ebx
c00012db:	c1 e0 06             	shl    eax,0x6
c00012de:	8d 14 85 ec 87 02 c0 	lea    edx,[eax*4-0x3ffd7814]
c00012e5:	b8 01 00 00 00       	mov    eax,0x1
c00012ea:	85 f8                	test   eax,edi
c00012ec:	75 07                	jne    c00012f5 <dlmalloc+0x2c2>
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	01 c0                	add    eax,eax
c00012f3:	eb f5                	jmp    c00012ea <dlmalloc+0x2b7>
c00012f5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012f8:	39 ca                	cmp    edx,ecx
c00012fa:	75 14                	jne    c0001310 <dlmalloc+0x2dd>
c00012fc:	89 c1                	mov    ecx,eax
c00012fe:	83 c2 08             	add    edx,0x8
c0001301:	f7 d1                	not    ecx
c0001303:	01 c0                	add    eax,eax
c0001305:	21 cf                	and    edi,ecx
c0001307:	89 3c 9d f4 8a 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd750c],edi
c000130e:	eb ac                	jmp    c00012bc <dlmalloc+0x289>
c0001310:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001313:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001316:	83 e0 fc             	and    eax,0xfffffffc
c0001319:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000131c:	89 c3                	mov    ebx,eax
c000131e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001321:	29 f3                	sub    ebx,esi
c0001323:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001326:	83 fb 0f             	cmp    ebx,0xf
c0001329:	8d 41 08             	lea    eax,[ecx+0x8]
c000132c:	77 09                	ja     c0001337 <dlmalloc+0x304>
c000132e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001332:	e9 82 00 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001337:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000133a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001340:	89 3d fc 87 02 c0    	mov    DWORD PTR ds:0xc00287fc,edi
c0001346:	89 3d 00 88 02 c0    	mov    DWORD PTR ds:0xc0028800,edi
c000134c:	c7 47 08 f4 87 02 c0 	mov    DWORD PTR [edi+0x8],0xc00287f4
c0001353:	c7 47 0c f4 87 02 c0 	mov    DWORD PTR [edi+0xc],0xc00287f4
c000135a:	77 06                	ja     c0001362 <dlmalloc+0x32f>
c000135c:	89 3d f0 87 02 c0    	mov    DWORD PTR ds:0xc00287f0,edi
c0001362:	83 ce 01             	or     esi,0x1
c0001365:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001368:	89 d9                	mov    ecx,ebx
c000136a:	83 c9 01             	or     ecx,0x1
c000136d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001370:	89 1a                	mov    DWORD PTR [edx],ebx
c0001372:	eb 45                	jmp    c00013b9 <dlmalloc+0x386>
c0001374:	a1 ec 87 02 c0       	mov    eax,ds:0xc00287ec
c0001379:	8d 4e 10             	lea    ecx,[esi+0x10]
c000137c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000137f:	83 e2 fc             	and    edx,0xfffffffc
c0001382:	39 d1                	cmp    ecx,edx
c0001384:	77 1e                	ja     c00013a4 <dlmalloc+0x371>
c0001386:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001389:	89 f3                	mov    ebx,esi
c000138b:	89 0d ec 87 02 c0    	mov    DWORD PTR ds:0xc00287ec,ecx
c0001391:	83 cb 01             	or     ebx,0x1
c0001394:	29 f2                	sub    edx,esi
c0001396:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001399:	83 ca 01             	or     edx,0x1
c000139c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000139f:	e9 2d fd ff ff       	jmp    c00010d1 <dlmalloc+0x9e>
c00013a4:	83 c4 1c             	add    esp,0x1c
c00013a7:	89 f0                	mov    eax,esi
c00013a9:	5b                   	pop    ebx
c00013aa:	ba c0 87 02 c0       	mov    edx,0xc00287c0
c00013af:	5e                   	pop    esi
c00013b0:	5f                   	pop    edi
c00013b1:	5d                   	pop    ebp
c00013b2:	e9 16 fa ff ff       	jmp    c0000dcd <sYSMALLOc>
c00013b7:	31 c0                	xor    eax,eax
c00013b9:	83 c4 1c             	add    esp,0x1c
c00013bc:	5b                   	pop    ebx
c00013bd:	5e                   	pop    esi
c00013be:	5f                   	pop    edi
c00013bf:	5d                   	pop    ebp
c00013c0:	c3                   	ret    

c00013c1 <iALLOc>:
c00013c1:	55                   	push   ebp
c00013c2:	89 c5                	mov    ebp,eax
c00013c4:	57                   	push   edi
c00013c5:	56                   	push   esi
c00013c6:	53                   	push   ebx
c00013c7:	83 ec 2c             	sub    esp,0x2c
c00013ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013ce:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013d6:	83 3d c0 87 02 c0 00 	cmp    DWORD PTR ds:0xc00287c0,0x0
c00013dd:	75 12                	jne    c00013f1 <iALLOc+0x30>
c00013df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013e3:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c00013e8:	e8 04 f8 ff ff       	call   c0000bf1 <malloc_consolidate>
c00013ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013f6:	74 12                	je     c000140a <iALLOc+0x49>
c00013f8:	85 ed                	test   ebp,ebp
c00013fa:	0f 84 64 01 00 00    	je     c0001564 <iALLOc+0x1a3>
c0001400:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001408:	eb 33                	jmp    c000143d <iALLOc+0x7c>
c000140a:	85 ed                	test   ebp,ebp
c000140c:	75 14                	jne    c0001422 <iALLOc+0x61>
c000140e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001416:	83 c4 2c             	add    esp,0x2c
c0001419:	5b                   	pop    ebx
c000141a:	5e                   	pop    esi
c000141b:	5f                   	pop    edi
c000141c:	5d                   	pop    ebp
c000141d:	e9 11 fc ff ff       	jmp    c0001033 <dlmalloc>
c0001422:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001429:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001431:	83 f8 0f             	cmp    eax,0xf
c0001434:	76 07                	jbe    c000143d <iALLOc+0x7c>
c0001436:	83 e0 f8             	and    eax,0xfffffff8
c0001439:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000143d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001442:	75 09                	jne    c000144d <iALLOc+0x8c>
c0001444:	89 d0                	mov    eax,edx
c0001446:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001449:	31 f6                	xor    esi,esi
c000144b:	eb 3b                	jmp    c0001488 <iALLOc+0xc7>
c000144d:	8b 02                	mov    eax,DWORD PTR [edx]
c000144f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001457:	83 c0 0b             	add    eax,0xb
c000145a:	83 f8 0f             	cmp    eax,0xf
c000145d:	76 07                	jbe    c0001466 <iALLOc+0xa5>
c000145f:	83 e0 f8             	and    eax,0xfffffff8
c0001462:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001466:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000146a:	0f af f5             	imul   esi,ebp
c000146d:	eb 25                	jmp    c0001494 <iALLOc+0xd3>
c000146f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001471:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001474:	bb 10 00 00 00       	mov    ebx,0x10
c0001479:	83 f9 0f             	cmp    ecx,0xf
c000147c:	76 05                	jbe    c0001483 <iALLOc+0xc2>
c000147e:	83 e1 f8             	and    ecx,0xfffffff8
c0001481:	89 cb                	mov    ebx,ecx
c0001483:	01 de                	add    esi,ebx
c0001485:	83 c0 04             	add    eax,0x4
c0001488:	39 c7                	cmp    edi,eax
c000148a:	75 e3                	jne    c000146f <iALLOc+0xae>
c000148c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001494:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001498:	8b 1d 14 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b14
c000149e:	83 ec 0c             	sub    esp,0xc
c00014a1:	c7 05 14 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b14,0x0
c00014ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00014af:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014b3:	50                   	push   eax
c00014b4:	e8 7a fb ff ff       	call   c0001033 <dlmalloc>
c00014b9:	83 c4 10             	add    esp,0x10
c00014bc:	89 1d 14 8b 02 c0    	mov    DWORD PTR ds:0xc0028b14,ebx
c00014c2:	85 c0                	test   eax,eax
c00014c4:	0f 84 92 00 00 00    	je     c000155c <iALLOc+0x19b>
c00014ca:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014cd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014d0:	83 e3 fc             	and    ebx,0xfffffffc
c00014d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014d7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014dc:	74 1e                	je     c00014fc <iALLOc+0x13b>
c00014de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014e2:	89 d9                	mov    ecx,ebx
c00014e4:	52                   	push   edx
c00014e5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014e9:	83 e9 04             	sub    ecx,0x4
c00014ec:	51                   	push   ecx
c00014ed:	6a 00                	push   0x0
c00014ef:	50                   	push   eax
c00014f0:	e8 9f f1 ff ff       	call   c0000694 <memset>
c00014f5:	83 c4 10             	add    esp,0x10
c00014f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001501:	75 14                	jne    c0001517 <iALLOc+0x156>
c0001503:	8d 04 37             	lea    eax,[edi+esi*1]
c0001506:	29 f3                	sub    ebx,esi
c0001508:	8d 48 08             	lea    ecx,[eax+0x8]
c000150b:	83 cb 01             	or     ebx,0x1
c000150e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001512:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001515:	89 f3                	mov    ebx,esi
c0001517:	31 c0                	xor    eax,eax
c0001519:	4d                   	dec    ebp
c000151a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000151d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001521:	39 c5                	cmp    ebp,eax
c0001523:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001526:	74 2c                	je     c0001554 <iALLOc+0x193>
c0001528:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000152c:	85 c9                	test   ecx,ecx
c000152e:	75 15                	jne    c0001545 <iALLOc+0x184>
c0001530:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001533:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001536:	b9 10 00 00 00       	mov    ecx,0x10
c000153b:	83 fe 0f             	cmp    esi,0xf
c000153e:	76 05                	jbe    c0001545 <iALLOc+0x184>
c0001540:	83 e6 f8             	and    esi,0xfffffff8
c0001543:	89 f1                	mov    ecx,esi
c0001545:	89 ce                	mov    esi,ecx
c0001547:	29 cb                	sub    ebx,ecx
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	40                   	inc    eax
c000154d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001550:	01 cf                	add    edi,ecx
c0001552:	eb c6                	jmp    c000151a <iALLOc+0x159>
c0001554:	83 cb 01             	or     ebx,0x1
c0001557:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000155a:	eb 08                	jmp    c0001564 <iALLOc+0x1a3>
c000155c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001568:	83 c4 2c             	add    esp,0x2c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	c3                   	ret    

c0001570 <dlrealloc>:
c0001570:	55                   	push   ebp
c0001571:	57                   	push   edi
c0001572:	56                   	push   esi
c0001573:	53                   	push   ebx
c0001574:	83 ec 1c             	sub    esp,0x1c
c0001577:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000157b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000157f:	85 db                	test   ebx,ebx
c0001581:	75 10                	jne    c0001593 <dlrealloc+0x23>
c0001583:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001587:	83 c4 1c             	add    esp,0x1c
c000158a:	5b                   	pop    ebx
c000158b:	5e                   	pop    esi
c000158c:	5f                   	pop    edi
c000158d:	5d                   	pop    ebp
c000158e:	e9 a0 fa ff ff       	jmp    c0001033 <dlmalloc>
c0001593:	83 f8 df             	cmp    eax,0xffffffdf
c0001596:	76 07                	jbe    c000159f <dlrealloc+0x2f>
c0001598:	31 db                	xor    ebx,ebx
c000159a:	e9 6a 01 00 00       	jmp    c0001709 <dlrealloc+0x199>
c000159f:	83 c0 0b             	add    eax,0xb
c00015a2:	bd 10 00 00 00       	mov    ebp,0x10
c00015a7:	83 f8 0f             	cmp    eax,0xf
c00015aa:	76 05                	jbe    c00015b1 <dlrealloc+0x41>
c00015ac:	83 e0 f8             	and    eax,0xfffffff8
c00015af:	89 c5                	mov    ebp,eax
c00015b1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015b4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015b7:	89 c6                	mov    esi,eax
c00015b9:	83 e6 fc             	and    esi,0xfffffffc
c00015bc:	a8 02                	test   al,0x2
c00015be:	75 d8                	jne    c0001598 <dlrealloc+0x28>
c00015c0:	39 f5                	cmp    ebp,esi
c00015c2:	0f 86 04 01 00 00    	jbe    c00016cc <dlrealloc+0x15c>
c00015c8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015cb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015ce:	39 15 ec 87 02 c0    	cmp    DWORD PTR ds:0xc00287ec,edx
c00015d4:	75 33                	jne    c0001609 <dlrealloc+0x99>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015df:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015e2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015e6:	77 49                	ja     c0001631 <dlrealloc+0xc1>
c00015e8:	01 ef                	add    edi,ebp
c00015ea:	83 e0 01             	and    eax,0x1
c00015ed:	09 e8                	or     eax,ebp
c00015ef:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015f2:	89 3d ec 87 02 c0    	mov    DWORD PTR ds:0xc00287ec,edi
c00015f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015fc:	29 e8                	sub    eax,ebp
c00015fe:	83 c8 01             	or     eax,0x1
c0001601:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001604:	e9 00 01 00 00       	jmp    c0001709 <dlrealloc+0x199>
c0001609:	89 c8                	mov    eax,ecx
c000160b:	83 e0 fe             	and    eax,0xfffffffe
c000160e:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001613:	75 1c                	jne    c0001631 <dlrealloc+0xc1>
c0001615:	83 e1 fc             	and    ecx,0xfffffffc
c0001618:	01 f1                	add    ecx,esi
c000161a:	39 cd                	cmp    ebp,ecx
c000161c:	77 13                	ja     c0001631 <dlrealloc+0xc1>
c000161e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001621:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001624:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001627:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000162a:	89 ce                	mov    esi,ecx
c000162c:	e9 9b 00 00 00       	jmp    c00016cc <dlrealloc+0x15c>
c0001631:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001635:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001638:	83 ec 0c             	sub    esp,0xc
c000163b:	50                   	push   eax
c000163c:	e8 f2 f9 ff ff       	call   c0001033 <dlmalloc>
c0001641:	83 c4 10             	add    esp,0x10
c0001644:	85 c0                	test   eax,eax
c0001646:	0f 84 4c ff ff ff    	je     c0001598 <dlrealloc+0x28>
c000164c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000164f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001653:	39 ca                	cmp    edx,ecx
c0001655:	75 0a                	jne    c0001661 <dlrealloc+0xf1>
c0001657:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000165a:	83 e0 fc             	and    eax,0xfffffffc
c000165d:	01 c6                	add    esi,eax
c000165f:	eb 6b                	jmp    c00016cc <dlrealloc+0x15c>
c0001661:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001664:	83 f9 27             	cmp    ecx,0x27
c0001667:	76 08                	jbe    c0001671 <dlrealloc+0x101>
c0001669:	89 de                	mov    esi,ebx
c000166b:	89 c7                	mov    edi,eax
c000166d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000166f:	eb 43                	jmp    c00016b4 <dlrealloc+0x144>
c0001671:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001673:	83 f9 13             	cmp    ecx,0x13
c0001676:	89 10                	mov    DWORD PTR [eax],edx
c0001678:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000167b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000167e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001681:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001684:	76 2e                	jbe    c00016b4 <dlrealloc+0x144>
c0001686:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001689:	83 f9 1b             	cmp    ecx,0x1b
c000168c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000168f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001692:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001695:	76 1d                	jbe    c00016b4 <dlrealloc+0x144>
c0001697:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000169a:	83 f9 23             	cmp    ecx,0x23
c000169d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00016a0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00016a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00016a6:	76 0c                	jbe    c00016b4 <dlrealloc+0x144>
c00016a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00016ab:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00016ae:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016b1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016b8:	83 ec 0c             	sub    esp,0xc
c00016bb:	53                   	push   ebx
c00016bc:	e8 17 f6 ff ff       	call   c0000cd8 <dlfree>
c00016c1:	83 c4 10             	add    esp,0x10
c00016c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016c8:	89 c3                	mov    ebx,eax
c00016ca:	eb 3d                	jmp    c0001709 <dlrealloc+0x199>
c00016cc:	89 f2                	mov    edx,esi
c00016ce:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016d1:	29 ea                	sub    edx,ebp
c00016d3:	83 e1 01             	and    ecx,0x1
c00016d6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016d9:	83 fa 0f             	cmp    edx,0xf
c00016dc:	77 0b                	ja     c00016e9 <dlrealloc+0x179>
c00016de:	09 ce                	or     esi,ecx
c00016e0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016e3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e7:	eb 20                	jmp    c0001709 <dlrealloc+0x199>
c00016e9:	01 ef                	add    edi,ebp
c00016eb:	83 ec 0c             	sub    esp,0xc
c00016ee:	09 cd                	or     ebp,ecx
c00016f0:	83 ca 01             	or     edx,0x1
c00016f3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016f6:	83 c7 08             	add    edi,0x8
c00016f9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016fc:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001700:	57                   	push   edi
c0001701:	e8 d2 f5 ff ff       	call   c0000cd8 <dlfree>
c0001706:	83 c4 10             	add    esp,0x10
c0001709:	83 c4 1c             	add    esp,0x1c
c000170c:	89 d8                	mov    eax,ebx
c000170e:	5b                   	pop    ebx
c000170f:	5e                   	pop    esi
c0001710:	5f                   	pop    edi
c0001711:	5d                   	pop    ebp
c0001712:	c3                   	ret    

c0001713 <dlmemalign>:
c0001713:	55                   	push   ebp
c0001714:	57                   	push   edi
c0001715:	56                   	push   esi
c0001716:	53                   	push   ebx
c0001717:	83 ec 0c             	sub    esp,0xc
c000171a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000171e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001722:	83 fa 08             	cmp    edx,0x8
c0001725:	77 10                	ja     c0001737 <dlmemalign+0x24>
c0001727:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000172b:	83 c4 0c             	add    esp,0xc
c000172e:	5b                   	pop    ebx
c000172f:	5e                   	pop    esi
c0001730:	5f                   	pop    edi
c0001731:	5d                   	pop    ebp
c0001732:	e9 fc f8 ff ff       	jmp    c0001033 <dlmalloc>
c0001737:	bf 10 00 00 00       	mov    edi,0x10
c000173c:	83 fa 0f             	cmp    edx,0xf
c000173f:	76 13                	jbe    c0001754 <dlmemalign+0x41>
c0001741:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001744:	85 d1                	test   ecx,edx
c0001746:	75 04                	jne    c000174c <dlmemalign+0x39>
c0001748:	89 d7                	mov    edi,edx
c000174a:	eb 08                	jmp    c0001754 <dlmemalign+0x41>
c000174c:	39 d7                	cmp    edi,edx
c000174e:	73 04                	jae    c0001754 <dlmemalign+0x41>
c0001750:	01 ff                	add    edi,edi
c0001752:	eb f8                	jmp    c000174c <dlmemalign+0x39>
c0001754:	83 f8 df             	cmp    eax,0xffffffdf
c0001757:	76 07                	jbe    c0001760 <dlmemalign+0x4d>
c0001759:	31 c0                	xor    eax,eax
c000175b:	e9 ce 00 00 00       	jmp    c000182e <dlmemalign+0x11b>
c0001760:	83 c0 0b             	add    eax,0xb
c0001763:	bd 10 00 00 00       	mov    ebp,0x10
c0001768:	83 f8 0f             	cmp    eax,0xf
c000176b:	76 05                	jbe    c0001772 <dlmemalign+0x5f>
c000176d:	83 e0 f8             	and    eax,0xfffffff8
c0001770:	89 c5                	mov    ebp,eax
c0001772:	83 ec 0c             	sub    esp,0xc
c0001775:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001779:	50                   	push   eax
c000177a:	e8 b4 f8 ff ff       	call   c0001033 <dlmalloc>
c000177f:	83 c4 10             	add    esp,0x10
c0001782:	89 c1                	mov    ecx,eax
c0001784:	85 c0                	test   eax,eax
c0001786:	74 d1                	je     c0001759 <dlmemalign+0x46>
c0001788:	31 d2                	xor    edx,edx
c000178a:	8d 70 f8             	lea    esi,[eax-0x8]
c000178d:	f7 f7                	div    edi
c000178f:	85 d2                	test   edx,edx
c0001791:	74 62                	je     c00017f5 <dlmemalign+0xe2>
c0001793:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001797:	89 f8                	mov    eax,edi
c0001799:	f7 d8                	neg    eax
c000179b:	21 c3                	and    ebx,eax
c000179d:	83 eb 08             	sub    ebx,0x8
c00017a0:	89 d8                	mov    eax,ebx
c00017a2:	29 f0                	sub    eax,esi
c00017a4:	83 f8 0f             	cmp    eax,0xf
c00017a7:	77 02                	ja     c00017ab <dlmemalign+0x98>
c00017a9:	01 fb                	add    ebx,edi
c00017ab:	89 d8                	mov    eax,ebx
c00017ad:	29 f0                	sub    eax,esi
c00017af:	89 c6                	mov    esi,eax
c00017b1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017b4:	89 c2                	mov    edx,eax
c00017b6:	83 e2 fc             	and    edx,0xfffffffc
c00017b9:	29 f2                	sub    edx,esi
c00017bb:	a8 02                	test   al,0x2
c00017bd:	74 10                	je     c00017cf <dlmemalign+0xbc>
c00017bf:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017c2:	83 ca 02             	or     edx,0x2
c00017c5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017c8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ca:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017cd:	eb 5f                	jmp    c000182e <dlmemalign+0x11b>
c00017cf:	83 ec 0c             	sub    esp,0xc
c00017d2:	89 d0                	mov    eax,edx
c00017d4:	83 c8 01             	or     eax,0x1
c00017d7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017da:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017df:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017e2:	83 e0 01             	and    eax,0x1
c00017e5:	09 f0                	or     eax,esi
c00017e7:	89 de                	mov    esi,ebx
c00017e9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ec:	51                   	push   ecx
c00017ed:	e8 e6 f4 ff ff       	call   c0000cd8 <dlfree>
c00017f2:	83 c4 10             	add    esp,0x10
c00017f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017f8:	a8 02                	test   al,0x2
c00017fa:	75 2f                	jne    c000182b <dlmemalign+0x118>
c00017fc:	83 e0 fc             	and    eax,0xfffffffc
c00017ff:	8d 55 10             	lea    edx,[ebp+0x10]
c0001802:	39 c2                	cmp    edx,eax
c0001804:	73 25                	jae    c000182b <dlmemalign+0x118>
c0001806:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001809:	83 ec 0c             	sub    esp,0xc
c000180c:	29 e8                	sub    eax,ebp
c000180e:	83 c2 08             	add    edx,0x8
c0001811:	83 c8 01             	or     eax,0x1
c0001814:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001817:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000181a:	83 e0 01             	and    eax,0x1
c000181d:	09 c5                	or     ebp,eax
c000181f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001822:	52                   	push   edx
c0001823:	e8 b0 f4 ff ff       	call   c0000cd8 <dlfree>
c0001828:	83 c4 10             	add    esp,0x10
c000182b:	8d 46 08             	lea    eax,[esi+0x8]
c000182e:	83 c4 0c             	add    esp,0xc
c0001831:	5b                   	pop    ebx
c0001832:	5e                   	pop    esi
c0001833:	5f                   	pop    edi
c0001834:	5d                   	pop    ebp
c0001835:	c3                   	ret    

c0001836 <dlcalloc>:
c0001836:	53                   	push   ebx
c0001837:	83 ec 14             	sub    esp,0x14
c000183a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000183e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001843:	50                   	push   eax
c0001844:	e8 ea f7 ff ff       	call   c0001033 <dlmalloc>
c0001849:	83 c4 10             	add    esp,0x10
c000184c:	89 c3                	mov    ebx,eax
c000184e:	85 c0                	test   eax,eax
c0001850:	74 77                	je     c00018c9 <dlcalloc+0x93>
c0001852:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001855:	89 d0                	mov    eax,edx
c0001857:	83 e0 fc             	and    eax,0xfffffffc
c000185a:	80 e2 02             	and    dl,0x2
c000185d:	75 5a                	jne    c00018b9 <dlcalloc+0x83>
c000185f:	83 e8 04             	sub    eax,0x4
c0001862:	83 f8 27             	cmp    eax,0x27
c0001865:	76 03                	jbe    c000186a <dlcalloc+0x34>
c0001867:	51                   	push   ecx
c0001868:	eb 53                	jmp    c00018bd <dlcalloc+0x87>
c000186a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001870:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001877:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000187e:	83 f8 13             	cmp    eax,0x13
c0001881:	76 46                	jbe    c00018c9 <dlcalloc+0x93>
c0001883:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000188a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001891:	83 f8 1b             	cmp    eax,0x1b
c0001894:	76 33                	jbe    c00018c9 <dlcalloc+0x93>
c0001896:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000189d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00018a4:	83 f8 23             	cmp    eax,0x23
c00018a7:	76 20                	jbe    c00018c9 <dlcalloc+0x93>
c00018a9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018b0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018b7:	eb 10                	jmp    c00018c9 <dlcalloc+0x93>
c00018b9:	83 e8 08             	sub    eax,0x8
c00018bc:	52                   	push   edx
c00018bd:	50                   	push   eax
c00018be:	6a 00                	push   0x0
c00018c0:	53                   	push   ebx
c00018c1:	e8 ce ed ff ff       	call   c0000694 <memset>
c00018c6:	83 c4 10             	add    esp,0x10
c00018c9:	89 d8                	mov    eax,ebx
c00018cb:	83 c4 08             	add    esp,0x8
c00018ce:	5b                   	pop    ebx
c00018cf:	c3                   	ret    

c00018d0 <dlcfree>:
c00018d0:	e9 03 f4 ff ff       	jmp    c0000cd8 <dlfree>

c00018d5 <dlindependent_calloc>:
c00018d5:	83 ec 28             	sub    esp,0x28
c00018d8:	b9 03 00 00 00       	mov    ecx,0x3
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018e9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018f1:	e8 cb fa ff ff       	call   c00013c1 <iALLOc>
c00018f6:	83 c4 2c             	add    esp,0x2c
c00018f9:	c3                   	ret    

c00018fa <dlindependent_comalloc>:
c00018fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001902:	31 c9                	xor    ecx,ecx
c0001904:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001908:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000190c:	e9 b0 fa ff ff       	jmp    c00013c1 <iALLOc>

c0001911 <dlvalloc>:
c0001911:	83 ec 0c             	sub    esp,0xc
c0001914:	83 3d c0 87 02 c0 00 	cmp    DWORD PTR ds:0xc00287c0,0x0
c000191b:	75 0a                	jne    c0001927 <dlvalloc+0x16>
c000191d:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c0001922:	e8 ca f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001927:	50                   	push   eax
c0001928:	50                   	push   eax
c0001929:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000192d:	ff 35 1c 8b 02 c0    	push   DWORD PTR ds:0xc0028b1c
c0001933:	e8 db fd ff ff       	call   c0001713 <dlmemalign>
c0001938:	83 c4 1c             	add    esp,0x1c
c000193b:	c3                   	ret    

c000193c <dlpvalloc>:
c000193c:	83 ec 0c             	sub    esp,0xc
c000193f:	83 3d c0 87 02 c0 00 	cmp    DWORD PTR ds:0xc00287c0,0x0
c0001946:	75 0a                	jne    c0001952 <dlpvalloc+0x16>
c0001948:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c000194d:	e8 9f f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001952:	a1 1c 8b 02 c0       	mov    eax,ds:0xc0028b1c
c0001957:	89 c1                	mov    ecx,eax
c0001959:	52                   	push   edx
c000195a:	f7 d9                	neg    ecx
c000195c:	52                   	push   edx
c000195d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001961:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001965:	21 ca                	and    edx,ecx
c0001967:	52                   	push   edx
c0001968:	50                   	push   eax
c0001969:	e8 a5 fd ff ff       	call   c0001713 <dlmemalign>
c000196e:	83 c4 1c             	add    esp,0x1c
c0001971:	c3                   	ret    

c0001972 <dlmalloc_trim>:
c0001972:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c0001977:	e8 75 f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c000197c:	31 c0                	xor    eax,eax
c000197e:	c3                   	ret    

c000197f <dlmalloc_usable_size>:
c000197f:	53                   	push   ebx
c0001980:	31 c0                	xor    eax,eax
c0001982:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001986:	85 c9                	test   ecx,ecx
c0001988:	74 24                	je     c00019ae <dlmalloc_usable_size+0x2f>
c000198a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000198d:	f6 c2 02             	test   dl,0x2
c0001990:	74 08                	je     c000199a <dlmalloc_usable_size+0x1b>
c0001992:	83 e2 fc             	and    edx,0xfffffffc
c0001995:	8d 42 f8             	lea    eax,[edx-0x8]
c0001998:	eb 14                	jmp    c00019ae <dlmalloc_usable_size+0x2f>
c000199a:	89 d3                	mov    ebx,edx
c000199c:	31 c0                	xor    eax,eax
c000199e:	83 e3 fe             	and    ebx,0xfffffffe
c00019a1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00019a6:	74 06                	je     c00019ae <dlmalloc_usable_size+0x2f>
c00019a8:	83 e2 fc             	and    edx,0xfffffffc
c00019ab:	8d 42 fc             	lea    eax,[edx-0x4]
c00019ae:	5b                   	pop    ebx
c00019af:	c3                   	ret    

c00019b0 <dlmallinfo>:
c00019b0:	55                   	push   ebp
c00019b1:	57                   	push   edi
c00019b2:	56                   	push   esi
c00019b3:	53                   	push   ebx
c00019b4:	83 ec 08             	sub    esp,0x8
c00019b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019bb:	83 3d ec 87 02 c0 00 	cmp    DWORD PTR ds:0xc00287ec,0x0
c00019c2:	75 0a                	jne    c00019ce <dlmallinfo+0x1e>
c00019c4:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c00019c9:	e8 23 f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c00019ce:	a1 ec 87 02 c0       	mov    eax,ds:0xc00287ec
c00019d3:	31 ed                	xor    ebp,ebp
c00019d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019d8:	31 c9                	xor    ecx,ecx
c00019da:	83 e0 fc             	and    eax,0xfffffffc
c00019dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019e1:	31 c0                	xor    eax,eax
c00019e3:	8b 14 85 c4 87 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd783c]
c00019ea:	85 d2                	test   edx,edx
c00019ec:	74 0e                	je     c00019fc <dlmallinfo+0x4c>
c00019ee:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019f1:	45                   	inc    ebp
c00019f2:	83 e6 fc             	and    esi,0xfffffffc
c00019f5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019f8:	01 f1                	add    ecx,esi
c00019fa:	eb ee                	jmp    c00019ea <dlmallinfo+0x3a>
c00019fc:	40                   	inc    eax
c00019fd:	83 f8 0a             	cmp    eax,0xa
c0001a00:	75 e1                	jne    c00019e3 <dlmallinfo+0x33>
c0001a02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a06:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a0d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a10:	b8 f4 87 02 c0       	mov    eax,0xc00287f4
c0001a15:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a18:	39 f0                	cmp    eax,esi
c0001a1a:	74 10                	je     c0001a2c <dlmallinfo+0x7c>
c0001a1c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a1f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a22:	83 e7 fc             	and    edi,0xfffffffc
c0001a25:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a28:	01 fa                	add    edx,edi
c0001a2a:	eb ec                	jmp    c0001a18 <dlmallinfo+0x68>
c0001a2c:	83 c0 08             	add    eax,0x8
c0001a2f:	3d ec 8a 02 c0       	cmp    eax,0xc0028aec
c0001a34:	75 df                	jne    c0001a15 <dlmallinfo+0x65>
c0001a36:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a39:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a3c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a3f:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c0001a44:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a47:	89 03                	mov    DWORD PTR [ebx],eax
c0001a49:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a4c:	8b 35 10 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b10
c0001a52:	29 d0                	sub    eax,edx
c0001a54:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a57:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a5a:	8b 35 24 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b24
c0001a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a64:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a67:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a6a:	8b 35 34 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b34
c0001a70:	89 d8                	mov    eax,ebx
c0001a72:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a75:	83 c4 08             	add    esp,0x8
c0001a78:	5b                   	pop    ebx
c0001a79:	5e                   	pop    esi
c0001a7a:	5f                   	pop    edi
c0001a7b:	5d                   	pop    ebp
c0001a7c:	c2 04 00             	ret    0x4

c0001a7f <dlmalloc_stats>:
c0001a7f:	83 ec 30             	sub    esp,0x30
c0001a82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a86:	50                   	push   eax
c0001a87:	e8 24 ff ff ff       	call   c00019b0 <dlmallinfo>
c0001a8c:	83 c4 30             	add    esp,0x30
c0001a8f:	c3                   	ret    

c0001a90 <dlmallopt>:
c0001a90:	56                   	push   esi
c0001a91:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c0001a96:	53                   	push   ebx
c0001a97:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a9f:	e8 4d f1 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001aa4:	8d 46 04             	lea    eax,[esi+0x4]
c0001aa7:	83 f8 05             	cmp    eax,0x5
c0001aaa:	77 67                	ja     c0001b13 <dlmallopt+0x83>
c0001aac:	ff 24 85 64 3f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc09c]
c0001ab3:	83 fb 50             	cmp    ebx,0x50
c0001ab6:	77 5b                	ja     c0001b13 <dlmallopt+0x83>
c0001ab8:	ba 08 00 00 00       	mov    edx,0x8
c0001abd:	85 db                	test   ebx,ebx
c0001abf:	74 12                	je     c0001ad3 <dlmallopt+0x43>
c0001ac1:	83 c3 0b             	add    ebx,0xb
c0001ac4:	ba 10 00 00 00       	mov    edx,0x10
c0001ac9:	83 fb 0f             	cmp    ebx,0xf
c0001acc:	76 05                	jbe    c0001ad3 <dlmallopt+0x43>
c0001ace:	89 da                	mov    edx,ebx
c0001ad0:	83 e2 f8             	and    edx,0xfffffff8
c0001ad3:	a1 c0 87 02 c0       	mov    eax,ds:0xc00287c0
c0001ad8:	83 e0 03             	and    eax,0x3
c0001adb:	09 d0                	or     eax,edx
c0001add:	a3 c0 87 02 c0       	mov    ds:0xc00287c0,eax
c0001ae2:	eb 31                	jmp    c0001b15 <dlmallopt+0x85>
c0001ae4:	89 1d 04 8b 02 c0    	mov    DWORD PTR ds:0xc0028b04,ebx
c0001aea:	eb 06                	jmp    c0001af2 <dlmallopt+0x62>
c0001aec:	89 1d 08 8b 02 c0    	mov    DWORD PTR ds:0xc0028b08,ebx
c0001af2:	be 01 00 00 00       	mov    esi,0x1
c0001af7:	eb 1c                	jmp    c0001b15 <dlmallopt+0x85>
c0001af9:	89 1d 0c 8b 02 c0    	mov    DWORD PTR ds:0xc0028b0c,ebx
c0001aff:	eb f1                	jmp    c0001af2 <dlmallopt+0x62>
c0001b01:	31 f6                	xor    esi,esi
c0001b03:	85 db                	test   ebx,ebx
c0001b05:	75 0e                	jne    c0001b15 <dlmallopt+0x85>
c0001b07:	c7 05 14 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b14,0x0
c0001b11:	eb df                	jmp    c0001af2 <dlmallopt+0x62>
c0001b13:	31 f6                	xor    esi,esi
c0001b15:	89 f0                	mov    eax,esi
c0001b17:	5b                   	pop    ebx
c0001b18:	5e                   	pop    esi
c0001b19:	c3                   	ret    

c0001b1a <disk_status>:
c0001b1a:	31 c0                	xor    eax,eax
c0001b1c:	c3                   	ret    

c0001b1d <disk_initialize>:
c0001b1d:	31 c0                	xor    eax,eax
c0001b1f:	c3                   	ret    

c0001b20 <disk_read>:
c0001b20:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b25:	0f b6 04 85 80 a2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d80]
c0001b2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b31:	e9 62 a5 01 00       	jmp    c001c098 <fatWrapperReadDisk>

c0001b36 <disk_write>:
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 80 a2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d80]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 94 a5 01 00       	jmp    c001c0e0 <fatWrapperWriteDisk>

c0001b4c <disk_ioctl>:
c0001b4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b55:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b5a:	0f b6 04 85 80 a2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d80]
c0001b62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b66:	e9 bd a5 01 00       	jmp    c001c128 <fatWrapperIoctl>

c0001b6b <ld_word>:
c0001b6b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_dword>:
c0001b78:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b7c:	89 d1                	mov    ecx,edx
c0001b7e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b82:	c1 e1 08             	shl    ecx,0x8
c0001b85:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b88:	09 ca                	or     edx,ecx
c0001b8a:	c1 e2 08             	shl    edx,0x8
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	c3                   	ret    

c0001b90 <ld_qword>:
c0001b90:	57                   	push   edi
c0001b91:	56                   	push   esi
c0001b92:	53                   	push   ebx
c0001b93:	31 db                	xor    ebx,ebx
c0001b95:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b98:	89 df                	mov    edi,ebx
c0001b9a:	89 ce                	mov    esi,ecx
c0001b9c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ba0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba4:	c1 e6 08             	shl    esi,0x8
c0001ba7:	09 f2                	or     edx,esi
c0001ba9:	89 d6                	mov    esi,edx
c0001bab:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001baf:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb3:	c1 e6 08             	shl    esi,0x8
c0001bb6:	09 f2                	or     edx,esi
c0001bb8:	89 d6                	mov    esi,edx
c0001bba:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bbe:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bc2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bc5:	c1 e6 08             	shl    esi,0x8
c0001bc8:	89 fb                	mov    ebx,edi
c0001bca:	09 f2                	or     edx,esi
c0001bcc:	89 d1                	mov    ecx,edx
c0001bce:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bd2:	c1 e1 08             	shl    ecx,0x8
c0001bd5:	89 da                	mov    edx,ebx
c0001bd7:	09 c8                	or     eax,ecx
c0001bd9:	5b                   	pop    ebx
c0001bda:	5e                   	pop    esi
c0001bdb:	5f                   	pop    edi
c0001bdc:	c3                   	ret    

c0001bdd <st_word>:
c0001bdd:	66 89 10             	mov    WORD PTR [eax],dx
c0001be0:	c3                   	ret    

c0001be1 <st_dword>:
c0001be1:	89 10                	mov    DWORD PTR [eax],edx
c0001be3:	c3                   	ret    

c0001be4 <st_qword>:
c0001be4:	89 10                	mov    DWORD PTR [eax],edx
c0001be6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001be9:	c3                   	ret    

c0001bea <mem_cpy>:
c0001bea:	85 c9                	test   ecx,ecx
c0001bec:	74 10                	je     c0001bfe <mem_cpy+0x14>
c0001bee:	57                   	push   edi
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	56                   	push   esi
c0001bf2:	89 c7                	mov    edi,eax
c0001bf4:	89 d6                	mov    esi,edx
c0001bf6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bf7:	39 f9                	cmp    ecx,edi
c0001bf9:	75 fb                	jne    c0001bf6 <mem_cpy+0xc>
c0001bfb:	5e                   	pop    esi
c0001bfc:	5f                   	pop    edi
c0001bfd:	c3                   	ret    
c0001bfe:	c3                   	ret    

c0001bff <mem_set>:
c0001bff:	01 c1                	add    ecx,eax
c0001c01:	40                   	inc    eax
c0001c02:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001c05:	39 c8                	cmp    eax,ecx
c0001c07:	75 f8                	jne    c0001c01 <mem_set+0x2>
c0001c09:	c3                   	ret    

c0001c0a <mem_cmp>:
c0001c0a:	57                   	push   edi
c0001c0b:	56                   	push   esi
c0001c0c:	89 c6                	mov    esi,eax
c0001c0e:	53                   	push   ebx
c0001c0f:	46                   	inc    esi
c0001c10:	42                   	inc    edx
c0001c11:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c15:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c19:	29 fb                	sub    ebx,edi
c0001c1b:	89 cf                	mov    edi,ecx
c0001c1d:	29 f7                	sub    edi,esi
c0001c1f:	01 c7                	add    edi,eax
c0001c21:	74 04                	je     c0001c27 <mem_cmp+0x1d>
c0001c23:	85 db                	test   ebx,ebx
c0001c25:	74 e8                	je     c0001c0f <mem_cmp+0x5>
c0001c27:	89 d8                	mov    eax,ebx
c0001c29:	5b                   	pop    ebx
c0001c2a:	5e                   	pop    esi
c0001c2b:	5f                   	pop    edi
c0001c2c:	c3                   	ret    

c0001c2d <chk_chr>:
c0001c2d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c30:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c33:	74 07                	je     c0001c3c <chk_chr+0xf>
c0001c35:	39 d1                	cmp    ecx,edx
c0001c37:	74 03                	je     c0001c3c <chk_chr+0xf>
c0001c39:	40                   	inc    eax
c0001c3a:	eb f1                	jmp    c0001c2d <chk_chr>
c0001c3c:	89 c8                	mov    eax,ecx
c0001c3e:	c3                   	ret    

c0001c3f <dbc_1st>:
c0001c3f:	31 c0                	xor    eax,eax
c0001c41:	c3                   	ret    

c0001c42 <dbc_2nd>:
c0001c42:	31 c0                	xor    eax,eax
c0001c44:	c3                   	ret    

c0001c45 <tchar2uni>:
c0001c45:	57                   	push   edi
c0001c46:	89 c7                	mov    edi,eax
c0001c48:	56                   	push   esi
c0001c49:	53                   	push   ebx
c0001c4a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c4c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c4e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c51:	84 c9                	test   cl,cl
c0001c53:	78 0a                	js     c0001c5f <tchar2uni+0x1a>
c0001c55:	0f b6 d1             	movzx  edx,cl
c0001c58:	89 f3                	mov    ebx,esi
c0001c5a:	e9 9f 00 00 00       	jmp    c0001cfe <tchar2uni+0xb9>
c0001c5f:	88 ca                	mov    dl,cl
c0001c61:	83 e2 e0             	and    edx,0xffffffe0
c0001c64:	80 fa c0             	cmp    dl,0xc0
c0001c67:	75 0c                	jne    c0001c75 <tchar2uni+0x30>
c0001c69:	89 ca                	mov    edx,ecx
c0001c6b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c70:	83 e2 1f             	and    edx,0x1f
c0001c73:	eb 2e                	jmp    c0001ca3 <tchar2uni+0x5e>
c0001c75:	88 ca                	mov    dl,cl
c0001c77:	83 e2 f0             	and    edx,0xfffffff0
c0001c7a:	80 fa e0             	cmp    dl,0xe0
c0001c7d:	75 0c                	jne    c0001c8b <tchar2uni+0x46>
c0001c7f:	89 ca                	mov    edx,ecx
c0001c81:	b9 02 00 00 00       	mov    ecx,0x2
c0001c86:	83 e2 0f             	and    edx,0xf
c0001c89:	eb 18                	jmp    c0001ca3 <tchar2uni+0x5e>
c0001c8b:	88 ca                	mov    dl,cl
c0001c8d:	83 e2 f8             	and    edx,0xfffffff8
c0001c90:	88 d0                	mov    al,dl
c0001c92:	83 ca ff             	or     edx,0xffffffff
c0001c95:	3c f0                	cmp    al,0xf0
c0001c97:	75 6c                	jne    c0001d05 <tchar2uni+0xc0>
c0001c99:	89 ca                	mov    edx,ecx
c0001c9b:	b9 03 00 00 00       	mov    ecx,0x3
c0001ca0:	83 e2 07             	and    edx,0x7
c0001ca3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ca7:	46                   	inc    esi
c0001ca8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001cab:	88 c8                	mov    al,cl
c0001cad:	83 e0 c0             	and    eax,0xffffffc0
c0001cb0:	3c 80                	cmp    al,0x80
c0001cb2:	75 4e                	jne    c0001d02 <tchar2uni+0xbd>
c0001cb4:	c1 e2 06             	shl    edx,0x6
c0001cb7:	83 e1 3f             	and    ecx,0x3f
c0001cba:	09 ca                	or     edx,ecx
c0001cbc:	39 de                	cmp    esi,ebx
c0001cbe:	75 e7                	jne    c0001ca7 <tchar2uni+0x62>
c0001cc0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cc3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cc9:	77 37                	ja     c0001d02 <tchar2uni+0xbd>
c0001ccb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cd1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cd7:	76 29                	jbe    c0001d02 <tchar2uni+0xbd>
c0001cd9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cdf:	76 1d                	jbe    c0001cfe <tchar2uni+0xb9>
c0001ce1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ce7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001ced:	c1 e1 06             	shl    ecx,0x6
c0001cf0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cf6:	09 ca                	or     edx,ecx
c0001cf8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cfe:	89 1f                	mov    DWORD PTR [edi],ebx
c0001d00:	eb 03                	jmp    c0001d05 <tchar2uni+0xc0>
c0001d02:	83 ca ff             	or     edx,0xffffffff
c0001d05:	5b                   	pop    ebx
c0001d06:	89 d0                	mov    eax,edx
c0001d08:	5e                   	pop    esi
c0001d09:	5f                   	pop    edi
c0001d0a:	c3                   	ret    

c0001d0b <put_utf>:
c0001d0b:	53                   	push   ebx
c0001d0c:	83 f8 7f             	cmp    eax,0x7f
c0001d0f:	89 c3                	mov    ebx,eax
c0001d11:	b0 00                	mov    al,0x0
c0001d13:	77 11                	ja     c0001d26 <put_utf+0x1b>
c0001d15:	85 c9                	test   ecx,ecx
c0001d17:	0f 84 e5 00 00 00    	je     c0001e02 <put_utf+0xf7>
c0001d1d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d1f:	b0 01                	mov    al,0x1
c0001d21:	e9 dc 00 00 00       	jmp    c0001e02 <put_utf+0xf7>
c0001d26:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d2c:	77 23                	ja     c0001d51 <put_utf+0x46>
c0001d2e:	83 f9 01             	cmp    ecx,0x1
c0001d31:	0f 86 cb 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d37:	89 d8                	mov    eax,ebx
c0001d39:	83 e3 3f             	and    ebx,0x3f
c0001d3c:	c1 e8 06             	shr    eax,0x6
c0001d3f:	83 cb 80             	or     ebx,0xffffff80
c0001d42:	83 c8 c0             	or     eax,0xffffffc0
c0001d45:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d48:	88 02                	mov    BYTE PTR [edx],al
c0001d4a:	b0 02                	mov    al,0x2
c0001d4c:	e9 b1 00 00 00       	jmp    c0001e02 <put_utf+0xf7>
c0001d51:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d57:	77 40                	ja     c0001d99 <put_utf+0x8e>
c0001d59:	83 f9 02             	cmp    ecx,0x2
c0001d5c:	0f 86 a0 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d62:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d68:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d6e:	0f 86 8e 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d74:	89 d8                	mov    eax,ebx
c0001d76:	c1 e8 0c             	shr    eax,0xc
c0001d79:	83 c8 e0             	or     eax,0xffffffe0
c0001d7c:	88 02                	mov    BYTE PTR [edx],al
c0001d7e:	89 d8                	mov    eax,ebx
c0001d80:	83 e3 3f             	and    ebx,0x3f
c0001d83:	c1 e8 06             	shr    eax,0x6
c0001d86:	83 cb 80             	or     ebx,0xffffff80
c0001d89:	83 e0 3f             	and    eax,0x3f
c0001d8c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d8f:	83 c8 80             	or     eax,0xffffff80
c0001d92:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d95:	b0 03                	mov    al,0x3
c0001d97:	eb 69                	jmp    c0001e02 <put_utf+0xf7>
c0001d99:	83 f9 03             	cmp    ecx,0x3
c0001d9c:	76 64                	jbe    c0001e02 <put_utf+0xf7>
c0001d9e:	89 d9                	mov    ecx,ebx
c0001da0:	0f b7 c3             	movzx  eax,bx
c0001da3:	66 31 c9             	xor    cx,cx
c0001da6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001dac:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001db2:	c1 e9 06             	shr    ecx,0x6
c0001db5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dbb:	77 43                	ja     c0001e00 <put_utf+0xf5>
c0001dbd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dc3:	77 3b                	ja     c0001e00 <put_utf+0xf5>
c0001dc5:	09 cb                	or     ebx,ecx
c0001dc7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	c1 e8 12             	shr    eax,0x12
c0001dd2:	83 c8 f0             	or     eax,0xfffffff0
c0001dd5:	88 02                	mov    BYTE PTR [edx],al
c0001dd7:	89 d8                	mov    eax,ebx
c0001dd9:	c1 e8 0c             	shr    eax,0xc
c0001ddc:	83 e0 3f             	and    eax,0x3f
c0001ddf:	83 c8 80             	or     eax,0xffffff80
c0001de2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001de5:	89 d8                	mov    eax,ebx
c0001de7:	83 e3 3f             	and    ebx,0x3f
c0001dea:	c1 e8 06             	shr    eax,0x6
c0001ded:	83 cb 80             	or     ebx,0xffffff80
c0001df0:	83 e0 3f             	and    eax,0x3f
c0001df3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001df6:	83 c8 80             	or     eax,0xffffff80
c0001df9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dfc:	b0 04                	mov    al,0x4
c0001dfe:	eb 02                	jmp    c0001e02 <put_utf+0xf7>
c0001e00:	31 c0                	xor    eax,eax
c0001e02:	5b                   	pop    ebx
c0001e03:	c3                   	ret    

c0001e04 <clst2sect>:
c0001e04:	89 c1                	mov    ecx,eax
c0001e06:	83 ea 02             	sub    edx,0x2
c0001e09:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001e0c:	83 e8 02             	sub    eax,0x2
c0001e0f:	39 d0                	cmp    eax,edx
c0001e11:	76 0d                	jbe    c0001e20 <clst2sect+0x1c>
c0001e13:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e17:	f7 e2                	mul    edx
c0001e19:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e1c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e1f:	c3                   	ret    
c0001e20:	31 c0                	xor    eax,eax
c0001e22:	31 d2                	xor    edx,edx
c0001e24:	c3                   	ret    

c0001e25 <clmt_clust>:
c0001e25:	57                   	push   edi
c0001e26:	89 cf                	mov    edi,ecx
c0001e28:	56                   	push   esi
c0001e29:	89 d6                	mov    esi,edx
c0001e2b:	53                   	push   ebx
c0001e2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e30:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e33:	89 f2                	mov    edx,esi
c0001e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e37:	c1 ef 09             	shr    edi,0x9
c0001e3a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e3e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e41:	89 f9                	mov    ecx,edi
c0001e43:	31 ff                	xor    edi,edi
c0001e45:	57                   	push   edi
c0001e46:	56                   	push   esi
c0001e47:	51                   	push   ecx
c0001e48:	52                   	push   edx
c0001e49:	e8 42 11 02 00       	call   c0022f90 <__udivdi3>
c0001e4e:	83 c4 10             	add    esp,0x10
c0001e51:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e53:	85 d2                	test   edx,edx
c0001e55:	74 10                	je     c0001e67 <clmt_clust+0x42>
c0001e57:	39 d0                	cmp    eax,edx
c0001e59:	72 07                	jb     c0001e62 <clmt_clust+0x3d>
c0001e5b:	29 d0                	sub    eax,edx
c0001e5d:	83 c3 08             	add    ebx,0x8
c0001e60:	eb ef                	jmp    c0001e51 <clmt_clust+0x2c>
c0001e62:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e65:	89 c2                	mov    edx,eax
c0001e67:	5b                   	pop    ebx
c0001e68:	89 d0                	mov    eax,edx
c0001e6a:	5e                   	pop    esi
c0001e6b:	5f                   	pop    edi
c0001e6c:	c3                   	ret    

c0001e6d <pick_lfn>:
c0001e6d:	55                   	push   ebp
c0001e6e:	57                   	push   edi
c0001e6f:	56                   	push   esi
c0001e70:	89 d6                	mov    esi,edx
c0001e72:	53                   	push   ebx
c0001e73:	89 c3                	mov    ebx,eax
c0001e75:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e78:	e8 ee fc ff ff       	call   c0001b6b <ld_word>
c0001e7d:	66 85 c0             	test   ax,ax
c0001e80:	74 04                	je     c0001e86 <pick_lfn+0x19>
c0001e82:	31 c0                	xor    eax,eax
c0001e84:	eb 5c                	jmp    c0001ee2 <pick_lfn+0x75>
c0001e86:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e89:	bd 01 00 00 00       	mov    ebp,0x1
c0001e8e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e91:	31 ff                	xor    edi,edi
c0001e93:	49                   	dec    ecx
c0001e94:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e97:	0f b6 87 80 40 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdbf80]
c0001e9e:	01 f0                	add    eax,esi
c0001ea0:	e8 c6 fc ff ff       	call   c0001b6b <ld_word>
c0001ea5:	66 85 ed             	test   bp,bp
c0001ea8:	74 11                	je     c0001ebb <pick_lfn+0x4e>
c0001eaa:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001eb0:	77 d0                	ja     c0001e82 <pick_lfn+0x15>
c0001eb2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001eb6:	89 c5                	mov    ebp,eax
c0001eb8:	41                   	inc    ecx
c0001eb9:	eb 04                	jmp    c0001ebf <pick_lfn+0x52>
c0001ebb:	66 40                	inc    ax
c0001ebd:	75 c3                	jne    c0001e82 <pick_lfn+0x15>
c0001ebf:	47                   	inc    edi
c0001ec0:	83 ff 0d             	cmp    edi,0xd
c0001ec3:	75 d2                	jne    c0001e97 <pick_lfn+0x2a>
c0001ec5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ec8:	74 13                	je     c0001edd <pick_lfn+0x70>
c0001eca:	66 85 ed             	test   bp,bp
c0001ecd:	74 0e                	je     c0001edd <pick_lfn+0x70>
c0001ecf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ed5:	77 ab                	ja     c0001e82 <pick_lfn+0x15>
c0001ed7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001edd:	b8 01 00 00 00       	mov    eax,0x1
c0001ee2:	5b                   	pop    ebx
c0001ee3:	5e                   	pop    esi
c0001ee4:	5f                   	pop    edi
c0001ee5:	5d                   	pop    ebp
c0001ee6:	c3                   	ret    

c0001ee7 <put_lfn>:
c0001ee7:	55                   	push   ebp
c0001ee8:	31 ed                	xor    ebp,ebp
c0001eea:	57                   	push   edi
c0001eeb:	89 d7                	mov    edi,edx
c0001eed:	56                   	push   esi
c0001eee:	31 f6                	xor    esi,esi
c0001ef0:	53                   	push   ebx
c0001ef1:	83 ec 08             	sub    esp,0x8
c0001ef4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ef7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eff:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001f05:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001f08:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f0b:	31 d2                	xor    edx,edx
c0001f0d:	e8 cb fc ff ff       	call   c0001bdd <st_word>
c0001f12:	0f b6 d9             	movzx  ebx,cl
c0001f15:	4b                   	dec    ebx
c0001f16:	6b db 0d             	imul   ebx,ebx,0xd
c0001f19:	66 83 fe ff          	cmp    si,0xffff
c0001f1d:	74 08                	je     c0001f27 <put_lfn+0x40>
c0001f1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f22:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f26:	43                   	inc    ebx
c0001f27:	0f b6 85 80 40 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdbf80]
c0001f2e:	0f b7 d6             	movzx  edx,si
c0001f31:	01 f8                	add    eax,edi
c0001f33:	e8 a5 fc ff ff       	call   c0001bdd <st_word>
c0001f38:	66 85 f6             	test   si,si
c0001f3b:	75 03                	jne    c0001f40 <put_lfn+0x59>
c0001f3d:	83 ce ff             	or     esi,0xffffffff
c0001f40:	45                   	inc    ebp
c0001f41:	83 fd 0d             	cmp    ebp,0xd
c0001f44:	75 d3                	jne    c0001f19 <put_lfn+0x32>
c0001f46:	66 46                	inc    si
c0001f48:	74 0a                	je     c0001f54 <put_lfn+0x6d>
c0001f4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f4d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f52:	75 09                	jne    c0001f5d <put_lfn+0x76>
c0001f54:	88 c8                	mov    al,cl
c0001f56:	83 c8 40             	or     eax,0x40
c0001f59:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f5d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f61:	88 07                	mov    BYTE PTR [edi],al
c0001f63:	83 c4 08             	add    esp,0x8
c0001f66:	5b                   	pop    ebx
c0001f67:	5e                   	pop    esi
c0001f68:	5f                   	pop    edi
c0001f69:	5d                   	pop    ebp
c0001f6a:	c3                   	ret    

c0001f6b <gen_numname>:
c0001f6b:	57                   	push   edi
c0001f6c:	89 cf                	mov    edi,ecx
c0001f6e:	56                   	push   esi
c0001f6f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f74:	53                   	push   ebx
c0001f75:	89 c6                	mov    esi,eax
c0001f77:	83 ec 10             	sub    esp,0x10
c0001f7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f7e:	e8 67 fc ff ff       	call   c0001bea <mem_cpy>
c0001f83:	83 fb 05             	cmp    ebx,0x5
c0001f86:	76 2d                	jbe    c0001fb5 <gen_numname+0x4a>
c0001f88:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f8b:	66 85 c0             	test   ax,ax
c0001f8e:	74 25                	je     c0001fb5 <gen_numname+0x4a>
c0001f90:	83 c7 02             	add    edi,0x2
c0001f93:	ba 10 00 00 00       	mov    edx,0x10
c0001f98:	01 db                	add    ebx,ebx
c0001f9a:	89 c1                	mov    ecx,eax
c0001f9c:	66 d1 e8             	shr    ax,1
c0001f9f:	83 e1 01             	and    ecx,0x1
c0001fa2:	01 cb                	add    ebx,ecx
c0001fa4:	0f ba e3 10          	bt     ebx,0x10
c0001fa8:	73 06                	jae    c0001fb0 <gen_numname+0x45>
c0001faa:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fb0:	4a                   	dec    edx
c0001fb1:	75 e5                	jne    c0001f98 <gen_numname+0x2d>
c0001fb3:	eb d3                	jmp    c0001f88 <gen_numname+0x1d>
c0001fb5:	b8 07 00 00 00       	mov    eax,0x7
c0001fba:	88 d9                	mov    cl,bl
c0001fbc:	83 e1 0f             	and    ecx,0xf
c0001fbf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fc2:	80 fa 39             	cmp    dl,0x39
c0001fc5:	76 03                	jbe    c0001fca <gen_numname+0x5f>
c0001fc7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fca:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fcd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fd1:	89 da                	mov    edx,ebx
c0001fd3:	c1 ea 04             	shr    edx,0x4
c0001fd6:	83 fb 0f             	cmp    ebx,0xf
c0001fd9:	76 06                	jbe    c0001fe1 <gen_numname+0x76>
c0001fdb:	89 c8                	mov    eax,ecx
c0001fdd:	89 d3                	mov    ebx,edx
c0001fdf:	eb d9                	jmp    c0001fba <gen_numname+0x4f>
c0001fe1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fe6:	31 d2                	xor    edx,edx
c0001fe8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001feb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fee:	39 ca                	cmp    edx,ecx
c0001ff0:	73 18                	jae    c000200a <gen_numname+0x9f>
c0001ff2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff5:	3c 20                	cmp    al,0x20
c0001ff7:	74 11                	je     c000200a <gen_numname+0x9f>
c0001ff9:	e8 41 fc ff ff       	call   c0001c3f <dbc_1st>
c0001ffe:	85 c0                	test   eax,eax
c0002000:	74 05                	je     c0002007 <gen_numname+0x9c>
c0002002:	39 d3                	cmp    ebx,edx
c0002004:	74 04                	je     c000200a <gen_numname+0x9f>
c0002006:	42                   	inc    edx
c0002007:	42                   	inc    edx
c0002008:	eb e1                	jmp    c0001feb <gen_numname+0x80>
c000200a:	b0 20                	mov    al,0x20
c000200c:	83 f9 07             	cmp    ecx,0x7
c000200f:	77 05                	ja     c0002016 <gen_numname+0xab>
c0002011:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002015:	41                   	inc    ecx
c0002016:	42                   	inc    edx
c0002017:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000201b:	83 fa 07             	cmp    edx,0x7
c000201e:	76 ea                	jbe    c000200a <gen_numname+0x9f>
c0002020:	83 c4 10             	add    esp,0x10
c0002023:	5b                   	pop    ebx
c0002024:	5e                   	pop    esi
c0002025:	5f                   	pop    edi
c0002026:	c3                   	ret    

c0002027 <sum_sfn>:
c0002027:	31 c9                	xor    ecx,ecx
c0002029:	31 d2                	xor    edx,edx
c000202b:	d0 ca                	ror    dl,1
c000202d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002030:	41                   	inc    ecx
c0002031:	83 f9 0b             	cmp    ecx,0xb
c0002034:	75 f5                	jne    c000202b <sum_sfn+0x4>
c0002036:	88 d0                	mov    al,dl
c0002038:	c3                   	ret    

c0002039 <xdir_sum>:
c0002039:	56                   	push   esi
c000203a:	31 c9                	xor    ecx,ecx
c000203c:	53                   	push   ebx
c000203d:	31 d2                	xor    edx,edx
c000203f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002043:	43                   	inc    ebx
c0002044:	c1 e3 05             	shl    ebx,0x5
c0002047:	83 fa 02             	cmp    edx,0x2
c000204a:	74 0b                	je     c0002057 <xdir_sum+0x1e>
c000204c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002050:	66 d1 c9             	ror    cx,1
c0002053:	01 f1                	add    ecx,esi
c0002055:	eb 05                	jmp    c000205c <xdir_sum+0x23>
c0002057:	ba 03 00 00 00       	mov    edx,0x3
c000205c:	42                   	inc    edx
c000205d:	39 d3                	cmp    ebx,edx
c000205f:	77 e6                	ja     c0002047 <xdir_sum+0xe>
c0002061:	89 c8                	mov    eax,ecx
c0002063:	5b                   	pop    ebx
c0002064:	5e                   	pop    esi
c0002065:	c3                   	ret    

c0002066 <xsum32>:
c0002066:	d1 ca                	ror    edx,1
c0002068:	0f b6 c0             	movzx  eax,al
c000206b:	01 d0                	add    eax,edx
c000206d:	c3                   	ret    

c000206e <get_xfileinfo>:
c000206e:	55                   	push   ebp
c000206f:	31 c9                	xor    ecx,ecx
c0002071:	57                   	push   edi
c0002072:	bd 40 00 00 00       	mov    ebp,0x40
c0002077:	56                   	push   esi
c0002078:	31 ff                	xor    edi,edi
c000207a:	53                   	push   ebx
c000207b:	89 c6                	mov    esi,eax
c000207d:	83 ec 0c             	sub    esp,0xc
c0002080:	89 d3                	mov    ebx,edx
c0002082:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002089:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000208d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002090:	76 6d                	jbe    c00020ff <get_xfileinfo+0x91>
c0002092:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002098:	76 0b                	jbe    c00020a5 <get_xfileinfo+0x37>
c000209a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000209e:	bf 01 00 00 00       	mov    edi,0x1
c00020a3:	eb 63                	jmp    c0002108 <get_xfileinfo+0x9a>
c00020a5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00020ab:	75 03                	jne    c00020b0 <get_xfileinfo+0x42>
c00020ad:	83 c5 02             	add    ebp,0x2
c00020b0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020b3:	83 c5 02             	add    ebp,0x2
c00020b6:	e8 b0 fa ff ff       	call   c0001b6b <ld_word>
c00020bb:	ff 04 24             	inc    DWORD PTR [esp]
c00020be:	66 85 c9             	test   cx,cx
c00020c1:	75 0d                	jne    c00020d0 <get_xfileinfo+0x62>
c00020c3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020c9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020ce:	76 2b                	jbe    c00020fb <get_xfileinfo+0x8d>
c00020d0:	c1 e1 10             	shl    ecx,0x10
c00020d3:	ba ff 00 00 00       	mov    edx,0xff
c00020d8:	0f b7 c0             	movzx  eax,ax
c00020db:	29 fa                	sub    edx,edi
c00020dd:	09 c8                	or     eax,ecx
c00020df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020e3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020eb:	e8 1b fc ff ff       	call   c0001d0b <put_utf>
c00020f0:	84 c0                	test   al,al
c00020f2:	74 a6                	je     c000209a <get_xfileinfo+0x2c>
c00020f4:	0f b6 c0             	movzx  eax,al
c00020f7:	01 c7                	add    edi,eax
c00020f9:	31 c0                	xor    eax,eax
c00020fb:	89 c1                	mov    ecx,eax
c00020fd:	eb 8a                	jmp    c0002089 <get_xfileinfo+0x1b>
c00020ff:	85 ff                	test   edi,edi
c0002101:	74 97                	je     c000209a <get_xfileinfo+0x2c>
c0002103:	66 85 c9             	test   cx,cx
c0002106:	75 92                	jne    c000209a <get_xfileinfo+0x2c>
c0002108:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000210d:	31 c0                	xor    eax,eax
c000210f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002113:	31 d2                	xor    edx,edx
c0002115:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002118:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000211b:	80 e1 10             	and    cl,0x10
c000211e:	75 08                	jne    c0002128 <get_xfileinfo+0xba>
c0002120:	8d 46 38             	lea    eax,[esi+0x38]
c0002123:	e8 68 fa ff ff       	call   c0001b90 <ld_qword>
c0002128:	89 03                	mov    DWORD PTR [ebx],eax
c000212a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000212d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002130:	e8 36 fa ff ff       	call   c0001b6b <ld_word>
c0002135:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002139:	8d 46 0e             	lea    eax,[esi+0xe]
c000213c:	e8 2a fa ff ff       	call   c0001b6b <ld_word>
c0002141:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002145:	83 c4 0c             	add    esp,0xc
c0002148:	5b                   	pop    ebx
c0002149:	5e                   	pop    esi
c000214a:	5f                   	pop    edi
c000214b:	5d                   	pop    ebp
c000214c:	c3                   	ret    

c000214d <get_ldnumber>:
c000214d:	8b 10                	mov    edx,DWORD PTR [eax]
c000214f:	85 d2                	test   edx,edx
c0002151:	74 14                	je     c0002167 <get_ldnumber+0x1a>
c0002153:	56                   	push   esi
c0002154:	53                   	push   ebx
c0002155:	89 d3                	mov    ebx,edx
c0002157:	43                   	inc    ebx
c0002158:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215b:	80 f9 1f             	cmp    cl,0x1f
c000215e:	76 0d                	jbe    c000216d <get_ldnumber+0x20>
c0002160:	80 f9 3a             	cmp    cl,0x3a
c0002163:	75 f2                	jne    c0002157 <get_ldnumber+0xa>
c0002165:	eb 0a                	jmp    c0002171 <get_ldnumber+0x24>
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	89 c8                	mov    eax,ecx
c000216c:	c3                   	ret    
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	eb 24                	jmp    c0002195 <get_ldnumber+0x48>
c0002171:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002174:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002177:	80 f9 09             	cmp    cl,0x9
c000217a:	77 16                	ja     c0002192 <get_ldnumber+0x45>
c000217c:	83 c2 02             	add    edx,0x2
c000217f:	83 c9 ff             	or     ecx,0xffffffff
c0002182:	39 d3                	cmp    ebx,edx
c0002184:	75 0f                	jne    c0002195 <get_ldnumber+0x48>
c0002186:	89 f2                	mov    edx,esi
c0002188:	89 18                	mov    DWORD PTR [eax],ebx
c000218a:	0f be ca             	movsx  ecx,dl
c000218d:	83 e9 30             	sub    ecx,0x30
c0002190:	eb 03                	jmp    c0002195 <get_ldnumber+0x48>
c0002192:	83 c9 ff             	or     ecx,0xffffffff
c0002195:	89 c8                	mov    eax,ecx
c0002197:	5b                   	pop    ebx
c0002198:	5e                   	pop    esi
c0002199:	c3                   	ret    

c000219a <crc32>:
c000219a:	56                   	push   esi
c000219b:	89 d6                	mov    esi,edx
c000219d:	53                   	push   ebx
c000219e:	b2 01                	mov    dl,0x1
c00021a0:	bb 08 00 00 00       	mov    ebx,0x8
c00021a5:	89 f1                	mov    ecx,esi
c00021a7:	84 d1                	test   cl,dl
c00021a9:	0f 95 c1             	setne  cl
c00021ac:	0f b6 c9             	movzx  ecx,cl
c00021af:	31 c1                	xor    ecx,eax
c00021b1:	89 c8                	mov    eax,ecx
c00021b3:	d1 e8                	shr    eax,1
c00021b5:	80 e1 01             	and    cl,0x1
c00021b8:	74 05                	je     c00021bf <crc32+0x25>
c00021ba:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021bf:	d1 e2                	shl    edx,1
c00021c1:	4b                   	dec    ebx
c00021c2:	75 e1                	jne    c00021a5 <crc32+0xb>
c00021c4:	5b                   	pop    ebx
c00021c5:	5e                   	pop    esi
c00021c6:	c3                   	ret    

c00021c7 <test_gpt_header>:
c00021c7:	55                   	push   ebp
c00021c8:	b9 10 00 00 00       	mov    ecx,0x10
c00021cd:	57                   	push   edi
c00021ce:	ba 80 3f 02 c0       	mov    edx,0xc0023f80
c00021d3:	56                   	push   esi
c00021d4:	31 ff                	xor    edi,edi
c00021d6:	53                   	push   ebx
c00021d7:	89 c3                	mov    ebx,eax
c00021d9:	e8 2c fa ff ff       	call   c0001c0a <mem_cmp>
c00021de:	85 c0                	test   eax,eax
c00021e0:	75 55                	jne    c0002237 <test_gpt_header+0x70>
c00021e2:	89 c7                	mov    edi,eax
c00021e4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021e9:	83 ce ff             	or     esi,0xffffffff
c00021ec:	31 d2                	xor    edx,edx
c00021ee:	83 fd 03             	cmp    ebp,0x3
c00021f1:	76 05                	jbe    c00021f8 <test_gpt_header+0x31>
c00021f3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021f8:	89 f0                	mov    eax,esi
c00021fa:	45                   	inc    ebp
c00021fb:	e8 9a ff ff ff       	call   c000219a <crc32>
c0002200:	83 fd 4c             	cmp    ebp,0x4c
c0002203:	89 c6                	mov    esi,eax
c0002205:	75 e5                	jne    c00021ec <test_gpt_header+0x25>
c0002207:	8d 43 10             	lea    eax,[ebx+0x10]
c000220a:	f7 d6                	not    esi
c000220c:	e8 67 f9 ff ff       	call   c0001b78 <ld_dword>
c0002211:	39 c6                	cmp    esi,eax
c0002213:	75 22                	jne    c0002237 <test_gpt_header+0x70>
c0002215:	8d 43 54             	lea    eax,[ebx+0x54]
c0002218:	e8 5b f9 ff ff       	call   c0001b78 <ld_dword>
c000221d:	83 c0 80             	add    eax,0xffffff80
c0002220:	75 15                	jne    c0002237 <test_gpt_header+0x70>
c0002222:	8d 43 50             	lea    eax,[ebx+0x50]
c0002225:	e8 4e f9 ff ff       	call   c0001b78 <ld_dword>
c000222a:	3d 80 00 00 00       	cmp    eax,0x80
c000222f:	0f 96 c0             	setbe  al
c0002232:	0f b6 c0             	movzx  eax,al
c0002235:	89 c7                	mov    edi,eax
c0002237:	5b                   	pop    ebx
c0002238:	89 f8                	mov    eax,edi
c000223a:	5e                   	pop    esi
c000223b:	5f                   	pop    edi
c000223c:	5d                   	pop    ebp
c000223d:	c3                   	ret    

c000223e <make_rand>:
c000223e:	56                   	push   esi
c000223f:	85 c0                	test   eax,eax
c0002241:	53                   	push   ebx
c0002242:	75 05                	jne    c0002249 <make_rand+0xb>
c0002244:	b8 01 00 00 00       	mov    eax,0x1
c0002249:	01 d1                	add    ecx,edx
c000224b:	bb 08 00 00 00       	mov    ebx,0x8
c0002250:	89 c6                	mov    esi,eax
c0002252:	d1 e8                	shr    eax,1
c0002254:	83 e6 01             	and    esi,0x1
c0002257:	85 f6                	test   esi,esi
c0002259:	74 05                	je     c0002260 <make_rand+0x22>
c000225b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002260:	4b                   	dec    ebx
c0002261:	75 ed                	jne    c0002250 <make_rand+0x12>
c0002263:	42                   	inc    edx
c0002264:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002267:	39 ca                	cmp    edx,ecx
c0002269:	75 e0                	jne    c000224b <make_rand+0xd>
c000226b:	5b                   	pop    ebx
c000226c:	5e                   	pop    esi
c000226d:	c3                   	ret    

c000226e <validate>:
c000226e:	56                   	push   esi
c000226f:	53                   	push   ebx
c0002270:	89 d6                	mov    esi,edx
c0002272:	51                   	push   ecx
c0002273:	85 c0                	test   eax,eax
c0002275:	75 09                	jne    c0002280 <validate+0x12>
c0002277:	b8 09 00 00 00       	mov    eax,0x9
c000227c:	31 c9                	xor    ecx,ecx
c000227e:	eb 2f                	jmp    c00022af <validate+0x41>
c0002280:	89 c3                	mov    ebx,eax
c0002282:	8b 00                	mov    eax,DWORD PTR [eax]
c0002284:	85 c0                	test   eax,eax
c0002286:	74 ef                	je     c0002277 <validate+0x9>
c0002288:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000228b:	74 ea                	je     c0002277 <validate+0x9>
c000228d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002291:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002295:	75 e0                	jne    c0002277 <validate+0x9>
c0002297:	83 ec 0c             	sub    esp,0xc
c000229a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000229e:	50                   	push   eax
c000229f:	e8 76 f8 ff ff       	call   c0001b1a <disk_status>
c00022a4:	83 c4 10             	add    esp,0x10
c00022a7:	a8 01                	test   al,0x1
c00022a9:	75 cc                	jne    c0002277 <validate+0x9>
c00022ab:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022ad:	31 c0                	xor    eax,eax
c00022af:	89 0e                	mov    DWORD PTR [esi],ecx
c00022b1:	5a                   	pop    edx
c00022b2:	5b                   	pop    ebx
c00022b3:	5e                   	pop    esi
c00022b4:	c3                   	ret    

c00022b5 <sync_window>:
c00022b5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022b9:	0f 84 85 00 00 00    	je     c0002344 <sync_window+0x8f>
c00022bf:	55                   	push   ebp
c00022c0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022c3:	57                   	push   edi
c00022c4:	56                   	push   esi
c00022c5:	53                   	push   ebx
c00022c6:	89 c3                	mov    ebx,eax
c00022c8:	83 ec 28             	sub    esp,0x28
c00022cb:	6a 01                	push   0x1
c00022cd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022d0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022d3:	55                   	push   ebp
c00022d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022d8:	50                   	push   eax
c00022d9:	e8 58 f8 ff ff       	call   c0001b36 <disk_write>
c00022de:	83 c4 20             	add    esp,0x20
c00022e1:	ba 01 00 00 00       	mov    edx,0x1
c00022e6:	85 c0                	test   eax,eax
c00022e8:	75 50                	jne    c000233a <sync_window+0x85>
c00022ea:	31 ff                	xor    edi,edi
c00022ec:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022f3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022f7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022fa:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022fd:	89 c6                	mov    esi,eax
c00022ff:	89 d7                	mov    edi,edx
c0002301:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002304:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002308:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000230b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000230f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002313:	73 23                	jae    c0002338 <sync_window+0x83>
c0002315:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002319:	75 1d                	jne    c0002338 <sync_window+0x83>
c000231b:	83 ec 0c             	sub    esp,0xc
c000231e:	6a 01                	push   0x1
c0002320:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002324:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002328:	52                   	push   edx
c0002329:	50                   	push   eax
c000232a:	55                   	push   ebp
c000232b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000232f:	50                   	push   eax
c0002330:	e8 01 f8 ff ff       	call   c0001b36 <disk_write>
c0002335:	83 c4 20             	add    esp,0x20
c0002338:	31 d2                	xor    edx,edx
c000233a:	83 c4 1c             	add    esp,0x1c
c000233d:	89 d0                	mov    eax,edx
c000233f:	5b                   	pop    ebx
c0002340:	5e                   	pop    esi
c0002341:	5f                   	pop    edi
c0002342:	5d                   	pop    ebp
c0002343:	c3                   	ret    
c0002344:	31 d2                	xor    edx,edx
c0002346:	89 d0                	mov    eax,edx
c0002348:	c3                   	ret    

c0002349 <move_window>:
c0002349:	56                   	push   esi
c000234a:	53                   	push   ebx
c000234b:	89 c3                	mov    ebx,eax
c000234d:	83 ec 14             	sub    esp,0x14
c0002350:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002353:	75 07                	jne    c000235c <move_window+0x13>
c0002355:	31 f6                	xor    esi,esi
c0002357:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000235a:	74 59                	je     c00023b5 <move_window+0x6c>
c000235c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002360:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002364:	89 d8                	mov    eax,ebx
c0002366:	e8 4a ff ff ff       	call   c00022b5 <sync_window>
c000236b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000236f:	89 c6                	mov    esi,eax
c0002371:	85 c0                	test   eax,eax
c0002373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002377:	75 3c                	jne    c00023b5 <move_window+0x6c>
c0002379:	83 ec 0c             	sub    esp,0xc
c000237c:	8d 43 54             	lea    eax,[ebx+0x54]
c000237f:	6a 01                	push   0x1
c0002381:	51                   	push   ecx
c0002382:	52                   	push   edx
c0002383:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002387:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000238b:	50                   	push   eax
c000238c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002390:	50                   	push   eax
c0002391:	e8 8a f7 ff ff       	call   c0001b20 <disk_read>
c0002396:	83 c4 20             	add    esp,0x20
c0002399:	85 c0                	test   eax,eax
c000239b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000239f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00023a3:	74 0a                	je     c00023af <move_window+0x66>
c00023a5:	83 ca ff             	or     edx,0xffffffff
c00023a8:	be 01 00 00 00       	mov    esi,0x1
c00023ad:	89 d1                	mov    ecx,edx
c00023af:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023b2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023b5:	89 f0                	mov    eax,esi
c00023b7:	83 c4 14             	add    esp,0x14
c00023ba:	5b                   	pop    ebx
c00023bb:	5e                   	pop    esi
c00023bc:	c3                   	ret    

c00023bd <check_fs>:
c00023bd:	53                   	push   ebx
c00023be:	89 c3                	mov    ebx,eax
c00023c0:	83 ec 08             	sub    esp,0x8
c00023c3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023ce:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023d5:	e8 6f ff ff ff       	call   c0002349 <move_window>
c00023da:	ba 04 00 00 00       	mov    edx,0x4
c00023df:	85 c0                	test   eax,eax
c00023e1:	0f 85 89 00 00 00    	jne    c0002470 <check_fs+0xb3>
c00023e7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023ed:	e8 79 f7 ff ff       	call   c0001b6b <ld_word>
c00023f2:	ba 03 00 00 00       	mov    edx,0x3
c00023f7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023fb:	75 73                	jne    c0002470 <check_fs+0xb3>
c00023fd:	ba a0 40 02 c0       	mov    edx,0xc00240a0
c0002402:	8d 43 54             	lea    eax,[ebx+0x54]
c0002405:	b9 0b 00 00 00       	mov    ecx,0xb
c000240a:	e8 fb f7 ff ff       	call   c0001c0a <mem_cmp>
c000240f:	ba 01 00 00 00       	mov    edx,0x1
c0002414:	85 c0                	test   eax,eax
c0002416:	74 58                	je     c0002470 <check_fs+0xb3>
c0002418:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000241b:	8d 50 18             	lea    edx,[eax+0x18]
c000241e:	80 fa 01             	cmp    dl,0x1
c0002421:	76 09                	jbe    c000242c <check_fs+0x6f>
c0002423:	ba 02 00 00 00       	mov    edx,0x2
c0002428:	3c eb                	cmp    al,0xeb
c000242a:	75 44                	jne    c0002470 <check_fs+0xb3>
c000242c:	ba b4 6f 02 c0       	mov    edx,0xc0026fb4
c0002431:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002437:	b9 03 00 00 00       	mov    ecx,0x3
c000243c:	e8 c9 f7 ff ff       	call   c0001c0a <mem_cmp>
c0002441:	31 d2                	xor    edx,edx
c0002443:	85 c0                	test   eax,eax
c0002445:	74 29                	je     c0002470 <check_fs+0xb3>
c0002447:	ba ac 40 02 c0       	mov    edx,0xc00240ac
c000244c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002452:	b9 05 00 00 00       	mov    ecx,0x5
c0002457:	e8 ae f7 ff ff       	call   c0001c0a <mem_cmp>
c000245c:	31 d2                	xor    edx,edx
c000245e:	85 c0                	test   eax,eax
c0002460:	74 0e                	je     c0002470 <check_fs+0xb3>
c0002462:	31 d2                	xor    edx,edx
c0002464:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000246b:	0f 95 c2             	setne  dl
c000246e:	01 d2                	add    edx,edx
c0002470:	89 d0                	mov    eax,edx
c0002472:	83 c4 08             	add    esp,0x8
c0002475:	5b                   	pop    ebx
c0002476:	c3                   	ret    

c0002477 <find_volume>:
c0002477:	55                   	push   ebp
c0002478:	31 c9                	xor    ecx,ecx
c000247a:	57                   	push   edi
c000247b:	56                   	push   esi
c000247c:	89 d6                	mov    esi,edx
c000247e:	53                   	push   ebx
c000247f:	31 d2                	xor    edx,edx
c0002481:	83 ec 3c             	sub    esp,0x3c
c0002484:	89 c3                	mov    ebx,eax
c0002486:	e8 32 ff ff ff       	call   c00023bd <check_fs>
c000248b:	83 f8 02             	cmp    eax,0x2
c000248e:	74 0e                	je     c000249e <find_volume+0x27>
c0002490:	0f 87 5d 01 00 00    	ja     c00025f3 <find_volume+0x17c>
c0002496:	85 f6                	test   esi,esi
c0002498:	0f 84 55 01 00 00    	je     c00025f3 <find_volume+0x17c>
c000249e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00024a5:	0f 85 dd 00 00 00    	jne    c0002588 <find_volume+0x111>
c00024ab:	31 c9                	xor    ecx,ecx
c00024ad:	ba 01 00 00 00       	mov    edx,0x1
c00024b2:	89 d8                	mov    eax,ebx
c00024b4:	e8 90 fe ff ff       	call   c0002349 <move_window>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	74 0a                	je     c00024c7 <find_volume+0x50>
c00024bd:	b8 04 00 00 00       	mov    eax,0x4
c00024c2:	e9 2c 01 00 00       	jmp    c00025f3 <find_volume+0x17c>
c00024c7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ca:	89 e8                	mov    eax,ebp
c00024cc:	e8 f6 fc ff ff       	call   c00021c7 <test_gpt_header>
c00024d1:	85 c0                	test   eax,eax
c00024d3:	75 0a                	jne    c00024df <find_volume+0x68>
c00024d5:	b8 03 00 00 00       	mov    eax,0x3
c00024da:	e9 14 01 00 00       	jmp    c00025f3 <find_volume+0x17c>
c00024df:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024e5:	e8 8e f6 ff ff       	call   c0001b78 <ld_dword>
c00024ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024ee:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024f4:	e8 97 f6 ff ff       	call   c0001b90 <ld_qword>
c00024f9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002501:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002505:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002509:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002511:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002515:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002519:	74 ba                	je     c00024d5 <find_volume+0x5e>
c000251b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000251f:	31 c9                	xor    ecx,ecx
c0002521:	c1 e7 07             	shl    edi,0x7
c0002524:	89 d8                	mov    eax,ebx
c0002526:	89 fa                	mov    edx,edi
c0002528:	c1 ea 09             	shr    edx,0x9
c000252b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000252f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002533:	e8 11 fe ff ff       	call   c0002349 <move_window>
c0002538:	85 c0                	test   eax,eax
c000253a:	75 81                	jne    c00024bd <find_volume+0x46>
c000253c:	81 e7 80 01 00 00    	and    edi,0x180
c0002542:	b9 10 00 00 00       	mov    ecx,0x10
c0002547:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000254b:	ba 90 40 02 c0       	mov    edx,0xc0024090
c0002550:	e8 b5 f6 ff ff       	call   c0001c0a <mem_cmp>
c0002555:	85 c0                	test   eax,eax
c0002557:	75 29                	jne    c0002582 <find_volume+0x10b>
c0002559:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000255d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002561:	e8 2a f6 ff ff       	call   c0001b90 <ld_qword>
c0002566:	89 d1                	mov    ecx,edx
c0002568:	89 c2                	mov    edx,eax
c000256a:	89 d8                	mov    eax,ebx
c000256c:	e8 4c fe ff ff       	call   c00023bd <check_fs>
c0002571:	85 f6                	test   esi,esi
c0002573:	75 07                	jne    c000257c <find_volume+0x105>
c0002575:	83 f8 01             	cmp    eax,0x1
c0002578:	77 08                	ja     c0002582 <find_volume+0x10b>
c000257a:	eb 77                	jmp    c00025f3 <find_volume+0x17c>
c000257c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002580:	74 71                	je     c00025f3 <find_volume+0x17c>
c0002582:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002586:	eb 89                	jmp    c0002511 <find_volume+0x9a>
c0002588:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000258c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002592:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002598:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000259c:	89 cd                	mov    ebp,ecx
c000259e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00025a2:	89 f8                	mov    eax,edi
c00025a4:	83 c7 10             	add    edi,0x10
c00025a7:	e8 cc f5 ff ff       	call   c0001b78 <ld_dword>
c00025ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025b0:	89 01                	mov    DWORD PTR [ecx],eax
c00025b2:	83 c1 04             	add    ecx,0x4
c00025b5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025b9:	75 e3                	jne    c000259e <find_volume+0x127>
c00025bb:	31 ff                	xor    edi,edi
c00025bd:	85 f6                	test   esi,esi
c00025bf:	74 03                	je     c00025c4 <find_volume+0x14d>
c00025c1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025c4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025c8:	85 d2                	test   edx,edx
c00025ca:	74 14                	je     c00025e0 <find_volume+0x169>
c00025cc:	31 c9                	xor    ecx,ecx
c00025ce:	89 d8                	mov    eax,ebx
c00025d0:	e8 e8 fd ff ff       	call   c00023bd <check_fs>
c00025d5:	83 f8 01             	cmp    eax,0x1
c00025d8:	76 19                	jbe    c00025f3 <find_volume+0x17c>
c00025da:	85 f6                	test   esi,esi
c00025dc:	74 0f                	je     c00025ed <find_volume+0x176>
c00025de:	eb 13                	jmp    c00025f3 <find_volume+0x17c>
c00025e0:	85 f6                	test   esi,esi
c00025e2:	0f 85 ed fe ff ff    	jne    c00024d5 <find_volume+0x5e>
c00025e8:	b8 03 00 00 00       	mov    eax,0x3
c00025ed:	47                   	inc    edi
c00025ee:	83 ff 03             	cmp    edi,0x3
c00025f1:	76 d1                	jbe    c00025c4 <find_volume+0x14d>
c00025f3:	83 c4 3c             	add    esp,0x3c
c00025f6:	5b                   	pop    ebx
c00025f7:	5e                   	pop    esi
c00025f8:	5f                   	pop    edi
c00025f9:	5d                   	pop    ebp
c00025fa:	c3                   	ret    

c00025fb <mount_volume>:
c00025fb:	55                   	push   ebp
c00025fc:	57                   	push   edi
c00025fd:	89 cf                	mov    edi,ecx
c00025ff:	56                   	push   esi
c0002600:	53                   	push   ebx
c0002601:	bb 0b 00 00 00       	mov    ebx,0xb
c0002606:	83 ec 3c             	sub    esp,0x3c
c0002609:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000260f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002613:	e8 35 fb ff ff       	call   c000214d <get_ldnumber>
c0002618:	85 c0                	test   eax,eax
c000261a:	0f 88 3a 05 00 00    	js     c0002b5a <mount_volume+0x55f>
c0002620:	8b 2c 85 60 8b 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd74a0]
c0002627:	89 c6                	mov    esi,eax
c0002629:	bb 0c 00 00 00       	mov    ebx,0xc
c000262e:	85 ed                	test   ebp,ebp
c0002630:	0f 84 24 05 00 00    	je     c0002b5a <mount_volume+0x55f>
c0002636:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000263a:	83 e7 fe             	and    edi,0xfffffffe
c000263d:	89 2a                	mov    DWORD PTR [edx],ebp
c000263f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002643:	74 32                	je     c0002677 <mount_volume+0x7c>
c0002645:	83 ec 0c             	sub    esp,0xc
c0002648:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000264c:	50                   	push   eax
c000264d:	e8 c8 f4 ff ff       	call   c0001b1a <disk_status>
c0002652:	83 c4 10             	add    esp,0x10
c0002655:	a8 01                	test   al,0x1
c0002657:	75 1e                	jne    c0002677 <mount_volume+0x7c>
c0002659:	31 db                	xor    ebx,ebx
c000265b:	89 f9                	mov    ecx,edi
c000265d:	84 c9                	test   cl,cl
c000265f:	0f 84 f5 04 00 00    	je     c0002b5a <mount_volume+0x55f>
c0002665:	a8 04                	test   al,0x4
c0002667:	0f 84 ed 04 00 00    	je     c0002b5a <mount_volume+0x55f>
c000266d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002672:	e9 e3 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c0002677:	83 ec 0c             	sub    esp,0xc
c000267a:	89 f0                	mov    eax,esi
c000267c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002680:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002683:	0f b6 f0             	movzx  esi,al
c0002686:	bb 03 00 00 00       	mov    ebx,0x3
c000268b:	56                   	push   esi
c000268c:	e8 8c f4 ff ff       	call   c0001b1d <disk_initialize>
c0002691:	83 c4 10             	add    esp,0x10
c0002694:	a8 01                	test   al,0x1
c0002696:	0f 85 be 04 00 00    	jne    c0002b5a <mount_volume+0x55f>
c000269c:	89 f9                	mov    ecx,edi
c000269e:	84 c9                	test   cl,cl
c00026a0:	74 04                	je     c00026a6 <mount_volume+0xab>
c00026a2:	a8 04                	test   al,0x4
c00026a4:	75 c7                	jne    c000266d <mount_volume+0x72>
c00026a6:	31 d2                	xor    edx,edx
c00026a8:	89 e8                	mov    eax,ebp
c00026aa:	e8 c8 fd ff ff       	call   c0002477 <find_volume>
c00026af:	83 f8 04             	cmp    eax,0x4
c00026b2:	75 0a                	jne    c00026be <mount_volume+0xc3>
c00026b4:	bb 01 00 00 00       	mov    ebx,0x1
c00026b9:	e9 9c 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c00026be:	83 f8 01             	cmp    eax,0x1
c00026c1:	76 0a                	jbe    c00026cd <mount_volume+0xd2>
c00026c3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026c8:	e9 8d 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c00026cd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026d0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026db:	75 17                	jne    c00026f4 <mount_volume+0xf9>
c00026dd:	b8 0b 00 00 00       	mov    eax,0xb
c00026e2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026e7:	75 da                	jne    c00026c3 <mount_volume+0xc8>
c00026e9:	40                   	inc    eax
c00026ea:	83 f8 40             	cmp    eax,0x40
c00026ed:	75 f3                	jne    c00026e2 <mount_volume+0xe7>
c00026ef:	e9 5a 02 00 00       	jmp    c000294e <mount_volume+0x353>
c00026f4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026f7:	e8 6f f4 ff ff       	call   c0001b6b <ld_word>
c00026fc:	66 3d 00 02          	cmp    ax,0x200
c0002700:	75 c1                	jne    c00026c3 <mount_volume+0xc8>
c0002702:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002705:	e8 61 f4 ff ff       	call   c0001b6b <ld_word>
c000270a:	0f b7 c0             	movzx  eax,ax
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	85 c0                	test   eax,eax
c0002713:	75 0c                	jne    c0002721 <mount_volume+0x126>
c0002715:	8d 45 78             	lea    eax,[ebp+0x78]
c0002718:	e8 5b f4 ff ff       	call   c0001b78 <ld_dword>
c000271d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002725:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002728:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000272b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000272f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002732:	48                   	dec    eax
c0002733:	3c 01                	cmp    al,0x1
c0002735:	77 8c                	ja     c00026c3 <mount_volume+0xc8>
c0002737:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000273b:	89 c3                	mov    ebx,eax
c000273d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002741:	66 85 c0             	test   ax,ax
c0002744:	0f 84 79 ff ff ff    	je     c00026c3 <mount_volume+0xc8>
c000274a:	8d 40 ff             	lea    eax,[eax-0x1]
c000274d:	85 d8                	test   eax,ebx
c000274f:	0f 85 6e ff ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002755:	8d 45 65             	lea    eax,[ebp+0x65]
c0002758:	e8 0e f4 ff ff       	call   c0001b6b <ld_word>
c000275d:	89 c7                	mov    edi,eax
c000275f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002763:	a8 0f                	test   al,0xf
c0002765:	0f 85 58 ff ff ff    	jne    c00026c3 <mount_volume+0xc8>
c000276b:	8d 45 67             	lea    eax,[ebp+0x67]
c000276e:	e8 f8 f3 ff ff       	call   c0001b6b <ld_word>
c0002773:	0f b7 f0             	movzx  esi,ax
c0002776:	85 f6                	test   esi,esi
c0002778:	75 0a                	jne    c0002784 <mount_volume+0x189>
c000277a:	8d 45 74             	lea    eax,[ebp+0x74]
c000277d:	e8 f6 f3 ff ff       	call   c0001b78 <ld_dword>
c0002782:	89 c6                	mov    esi,eax
c0002784:	8d 45 62             	lea    eax,[ebp+0x62]
c0002787:	e8 df f3 ff ff       	call   c0001b6b <ld_word>
c000278c:	66 85 c0             	test   ax,ax
c000278f:	0f 84 2e ff ff ff    	je     c00026c3 <mount_volume+0xc8>
c0002795:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000279a:	0f b7 c8             	movzx  ecx,ax
c000279d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00027a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00027a6:	89 fa                	mov    edx,edi
c00027a8:	66 c1 ea 04          	shr    dx,0x4
c00027ac:	0f b7 d2             	movzx  edx,dx
c00027af:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027b3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027ba:	39 c6                	cmp    esi,eax
c00027bc:	0f 82 01 ff ff ff    	jb     c00026c3 <mount_volume+0xc8>
c00027c2:	29 c6                	sub    esi,eax
c00027c4:	31 d2                	xor    edx,edx
c00027c6:	89 f0                	mov    eax,esi
c00027c8:	f7 f3                	div    ebx
c00027ca:	39 de                	cmp    esi,ebx
c00027cc:	0f 82 f1 fe ff ff    	jb     c00026c3 <mount_volume+0xc8>
c00027d2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027d7:	0f 87 e6 fe ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00027dd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027e2:	0f 86 63 03 00 00    	jbe    c0002b4b <mount_volume+0x550>
c00027e8:	bb 03 00 00 00       	mov    ebx,0x3
c00027ed:	8d 70 02             	lea    esi,[eax+0x2]
c00027f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027f8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027fb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027fe:	31 d2                	xor    edx,edx
c0002800:	89 c8                	mov    eax,ecx
c0002802:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002805:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002809:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000280d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002811:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002815:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002818:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000281b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000281f:	31 d2                	xor    edx,edx
c0002821:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002825:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	83 fb 03             	cmp    ebx,0x3
c0002832:	75 2b                	jne    c000285f <mount_volume+0x264>
c0002834:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002837:	e8 2f f3 ff ff       	call   c0001b6b <ld_word>
c000283c:	66 09 c7             	or     di,ax
c000283f:	0f 85 7e fe ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002845:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000284b:	c1 e6 02             	shl    esi,0x2
c000284e:	e8 25 f3 ff ff       	call   c0001b78 <ld_dword>
c0002853:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000285a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000285d:	eb 30                	jmp    c000288f <mount_volume+0x294>
c000285f:	66 85 ff             	test   di,di
c0002862:	0f 84 5b fe ff ff    	je     c00026c3 <mount_volume+0xc8>
c0002868:	31 d2                	xor    edx,edx
c000286a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000286e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002872:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002876:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002879:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000287c:	83 fb 02             	cmp    ebx,0x2
c000287f:	75 04                	jne    c0002885 <mount_volume+0x28a>
c0002881:	01 f6                	add    esi,esi
c0002883:	eb 0a                	jmp    c000288f <mount_volume+0x294>
c0002885:	8d 04 76             	lea    eax,[esi+esi*2]
c0002888:	83 e6 01             	and    esi,0x1
c000288b:	d1 e8                	shr    eax,1
c000288d:	01 c6                	add    esi,eax
c000288f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002895:	c1 ee 09             	shr    esi,0x9
c0002898:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000289c:	0f 87 21 fe ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00028a2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00028a9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028b0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028b4:	83 fb 03             	cmp    ebx,0x3
c00028b7:	75 7a                	jne    c0002933 <mount_volume+0x338>
c00028b9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028bf:	e8 a7 f2 ff ff       	call   c0001b6b <ld_word>
c00028c4:	66 48                	dec    ax
c00028c6:	75 6b                	jne    c0002933 <mount_volume+0x338>
c00028c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028d0:	83 c2 01             	add    edx,0x1
c00028d3:	89 e8                	mov    eax,ebp
c00028d5:	83 d1 00             	adc    ecx,0x0
c00028d8:	e8 6c fa ff ff       	call   c0002349 <move_window>
c00028dd:	85 c0                	test   eax,eax
c00028df:	75 52                	jne    c0002933 <mount_volume+0x338>
c00028e1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028e5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028eb:	e8 7b f2 ff ff       	call   c0001b6b <ld_word>
c00028f0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028f4:	75 3d                	jne    c0002933 <mount_volume+0x338>
c00028f6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028f9:	e8 7a f2 ff ff       	call   c0001b78 <ld_dword>
c00028fe:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002903:	75 2e                	jne    c0002933 <mount_volume+0x338>
c0002905:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000290b:	e8 68 f2 ff ff       	call   c0001b78 <ld_dword>
c0002910:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002915:	75 1c                	jne    c0002933 <mount_volume+0x338>
c0002917:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000291d:	e8 56 f2 ff ff       	call   c0001b78 <ld_dword>
c0002922:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002925:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000292b:	e8 48 f2 ff ff       	call   c0001b78 <ld_dword>
c0002930:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002933:	66 a1 40 8b 02 c0    	mov    ax,ds:0xc0028b40
c0002939:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000293c:	40                   	inc    eax
c000293d:	31 db                	xor    ebx,ebx
c000293f:	66 a3 40 8b 02 c0    	mov    ds:0xc0028b40,ax
c0002945:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002949:	e9 0c 02 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c000294e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002954:	e8 12 f2 ff ff       	call   c0001b6b <ld_word>
c0002959:	66 3d 00 01          	cmp    ax,0x100
c000295d:	0f 85 60 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002963:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000296a:	0f 85 53 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002970:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002976:	e8 15 f2 ff ff       	call   c0001b90 <ld_qword>
c000297b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000297f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002983:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002989:	e8 ea f1 ff ff       	call   c0001b78 <ld_dword>
c000298e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002991:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002997:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000299a:	fe c8                	dec    al
c000299c:	0f 85 21 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c00029a2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00029a9:	bb 01 00 00 00       	mov    ebx,0x1
c00029ae:	d3 e3                	shl    ebx,cl
c00029b0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029b4:	66 85 db             	test   bx,bx
c00029b7:	0f 84 06 fd ff ff    	je     c00026c3 <mount_volume+0xc8>
c00029bd:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029c3:	e8 b0 f1 ff ff       	call   c0001b78 <ld_dword>
c00029c8:	89 c6                	mov    esi,eax
c00029ca:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029cf:	0f 87 ee fc ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00029d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d9:	8d 40 02             	lea    eax,[eax+0x2]
c00029dc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029df:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029e6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029e9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029ef:	e8 84 f1 ff ff       	call   c0001b78 <ld_dword>
c00029f4:	31 d2                	xor    edx,edx
c00029f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029fa:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002a06:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002a09:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002a0c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a12:	e8 61 f1 ff ff       	call   c0001b78 <ld_dword>
c0002a17:	31 d2                	xor    edx,edx
c0002a19:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a1d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a21:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a25:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a28:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a2b:	0f b7 c3             	movzx  eax,bx
c0002a2e:	31 d2                	xor    edx,edx
c0002a30:	0f af f0             	imul   esi,eax
c0002a33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a37:	89 f0                	mov    eax,esi
c0002a39:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a3d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a41:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a45:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a49:	39 c1                	cmp    ecx,eax
c0002a4b:	89 df                	mov    edi,ebx
c0002a4d:	19 d7                	sbb    edi,edx
c0002a4f:	0f 82 6e fc ff ff    	jb     c00026c3 <mount_volume+0xc8>
c0002a55:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a5b:	31 db                	xor    ebx,ebx
c0002a5d:	e8 16 f1 ff ff       	call   c0001b78 <ld_dword>
c0002a62:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a69:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	75 39                	jne    c0002ab1 <mount_volume+0x4b6>
c0002a78:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a7c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a80:	0f 86 3d fc ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002a86:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a89:	31 ff                	xor    edi,edi
c0002a8b:	89 e8                	mov    eax,ebp
c0002a8d:	e8 72 f3 ff ff       	call   c0001e04 <clst2sect>
c0002a92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a96:	01 c6                	add    esi,eax
c0002a98:	89 e8                	mov    eax,ebp
c0002a9a:	11 d7                	adc    edi,edx
c0002a9c:	89 f2                	mov    edx,esi
c0002a9e:	89 f9                	mov    ecx,edi
c0002aa0:	e8 a4 f8 ff ff       	call   c0002349 <move_window>
c0002aa5:	85 c0                	test   eax,eax
c0002aa7:	0f 85 07 fc ff ff    	jne    c00026b4 <mount_volume+0xb9>
c0002aad:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ab1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002ab6:	74 0b                	je     c0002ac3 <mount_volume+0x4c8>
c0002ab8:	83 c3 20             	add    ebx,0x20
c0002abb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ac1:	eb b1                	jmp    c0002a74 <mount_volume+0x479>
c0002ac3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ac6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aca:	e8 a9 f0 ff ff       	call   c0001b78 <ld_dword>
c0002acf:	89 c3                	mov    ebx,eax
c0002ad1:	83 f8 01             	cmp    eax,0x1
c0002ad4:	0f 86 e9 fb ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002ada:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002add:	0f 86 e0 fb ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002ae3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ae6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002aea:	0f af c2             	imul   eax,edx
c0002aed:	31 d2                	xor    edx,edx
c0002aef:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002af2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002af5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002af8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002afb:	31 c9                	xor    ecx,ecx
c0002afd:	89 da                	mov    edx,ebx
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	c1 ea 07             	shr    edx,0x7
c0002b04:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002b07:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002b0a:	e8 3a f8 ff ff       	call   c0002349 <move_window>
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 85 9d fb ff ff    	jne    c00026b4 <mount_volume+0xb9>
c0002b17:	89 d8                	mov    eax,ebx
c0002b19:	83 e0 7f             	and    eax,0x7f
c0002b1c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b1f:	e8 54 f0 ff ff       	call   c0001b78 <ld_dword>
c0002b24:	83 f8 ff             	cmp    eax,0xffffffff
c0002b27:	74 0a                	je     c0002b33 <mount_volume+0x538>
c0002b29:	43                   	inc    ebx
c0002b2a:	39 d8                	cmp    eax,ebx
c0002b2c:	74 cd                	je     c0002afb <mount_volume+0x500>
c0002b2e:	e9 90 fb ff ff       	jmp    c00026c3 <mount_volume+0xc8>
c0002b33:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b3a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b41:	bb 04 00 00 00       	mov    ebx,0x4
c0002b46:	e9 e8 fd ff ff       	jmp    c0002933 <mount_volume+0x338>
c0002b4b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b50:	19 db                	sbb    ebx,ebx
c0002b52:	83 c3 02             	add    ebx,0x2
c0002b55:	e9 93 fc ff ff       	jmp    c00027ed <mount_volume+0x1f2>
c0002b5a:	83 c4 3c             	add    esp,0x3c
c0002b5d:	89 d8                	mov    eax,ebx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	5f                   	pop    edi
c0002b62:	5d                   	pop    ebp
c0002b63:	c3                   	ret    

c0002b64 <find_bitmap>:
c0002b64:	55                   	push   ebp
c0002b65:	57                   	push   edi
c0002b66:	89 c7                	mov    edi,eax
c0002b68:	56                   	push   esi
c0002b69:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b6c:	53                   	push   ebx
c0002b6d:	83 ec 1c             	sub    esp,0x1c
c0002b70:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b73:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b77:	83 e8 02             	sub    eax,0x2
c0002b7a:	39 f0                	cmp    eax,esi
c0002b7c:	77 02                	ja     c0002b80 <find_bitmap+0x1c>
c0002b7e:	31 f6                	xor    esi,esi
c0002b80:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b84:	89 f3                	mov    ebx,esi
c0002b86:	31 ed                	xor    ebp,ebp
c0002b88:	31 c9                	xor    ecx,ecx
c0002b8a:	89 da                	mov    edx,ebx
c0002b8c:	89 f8                	mov    eax,edi
c0002b8e:	c1 ea 0c             	shr    edx,0xc
c0002b91:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b94:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b97:	e8 ad f7 ff ff       	call   c0002349 <move_window>
c0002b9c:	85 c0                	test   eax,eax
c0002b9e:	75 68                	jne    c0002c08 <find_bitmap+0xa4>
c0002ba0:	89 da                	mov    edx,ebx
c0002ba2:	89 d9                	mov    ecx,ebx
c0002ba4:	c1 ea 03             	shr    edx,0x3
c0002ba7:	83 e1 07             	and    ecx,0x7
c0002baa:	b8 01 00 00 00       	mov    eax,0x1
c0002baf:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002bb5:	d3 e0                	shl    eax,cl
c0002bb7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002bba:	83 e9 02             	sub    ecx,0x2
c0002bbd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bc1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bc5:	43                   	inc    ebx
c0002bc6:	21 c1                	and    ecx,eax
c0002bc8:	d1 e0                	shl    eax,1
c0002bca:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bce:	77 09                	ja     c0002bd9 <find_bitmap+0x75>
c0002bd0:	31 db                	xor    ebx,ebx
c0002bd2:	ba 00 02 00 00       	mov    edx,0x200
c0002bd7:	31 c0                	xor    eax,eax
c0002bd9:	84 c9                	test   cl,cl
c0002bdb:	75 10                	jne    c0002bed <find_bitmap+0x89>
c0002bdd:	45                   	inc    ebp
c0002bde:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002be2:	75 0f                	jne    c0002bf3 <find_bitmap+0x8f>
c0002be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002be8:	83 c0 02             	add    eax,0x2
c0002beb:	eb 22                	jmp    c0002c0f <find_bitmap+0xab>
c0002bed:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bf1:	31 ed                	xor    ebp,ebp
c0002bf3:	39 de                	cmp    esi,ebx
c0002bf5:	74 16                	je     c0002c0d <find_bitmap+0xa9>
c0002bf7:	84 c0                	test   al,al
c0002bf9:	75 c6                	jne    c0002bc1 <find_bitmap+0x5d>
c0002bfb:	42                   	inc    edx
c0002bfc:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002c02:	77 84                	ja     c0002b88 <find_bitmap+0x24>
c0002c04:	b0 01                	mov    al,0x1
c0002c06:	eb b9                	jmp    c0002bc1 <find_bitmap+0x5d>
c0002c08:	83 c8 ff             	or     eax,0xffffffff
c0002c0b:	eb 02                	jmp    c0002c0f <find_bitmap+0xab>
c0002c0d:	31 c0                	xor    eax,eax
c0002c0f:	83 c4 1c             	add    esp,0x1c
c0002c12:	5b                   	pop    ebx
c0002c13:	5e                   	pop    esi
c0002c14:	5f                   	pop    edi
c0002c15:	5d                   	pop    ebp
c0002c16:	c3                   	ret    

c0002c17 <change_bitmap>:
c0002c17:	55                   	push   ebp
c0002c18:	89 cd                	mov    ebp,ecx
c0002c1a:	57                   	push   edi
c0002c1b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c1e:	56                   	push   esi
c0002c1f:	89 c7                	mov    edi,eax
c0002c21:	53                   	push   ebx
c0002c22:	89 c8                	mov    eax,ecx
c0002c24:	83 ec 1c             	sub    esp,0x1c
c0002c27:	31 d2                	xor    edx,edx
c0002c29:	89 ce                	mov    esi,ecx
c0002c2b:	c1 e8 0c             	shr    eax,0xc
c0002c2e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c33:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c36:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c39:	c1 ee 03             	shr    esi,0x3
c0002c3c:	83 e1 07             	and    ecx,0x7
c0002c3f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c45:	d3 e3                	shl    ebx,cl
c0002c47:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c4b:	89 c1                	mov    ecx,eax
c0002c4d:	89 d3                	mov    ebx,edx
c0002c4f:	83 c1 01             	add    ecx,0x1
c0002c52:	83 d3 00             	adc    ebx,0x0
c0002c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c59:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c5d:	89 d1                	mov    ecx,edx
c0002c5f:	89 c2                	mov    edx,eax
c0002c61:	89 f8                	mov    eax,edi
c0002c63:	e8 e1 f6 ff ff       	call   c0002349 <move_window>
c0002c68:	89 c1                	mov    ecx,eax
c0002c6a:	85 c0                	test   eax,eax
c0002c6c:	75 48                	jne    c0002cb6 <change_bitmap+0x9f>
c0002c6e:	31 d2                	xor    edx,edx
c0002c70:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c74:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c78:	0f 95 c2             	setne  dl
c0002c7b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c7f:	74 3c                	je     c0002cbd <change_bitmap+0xa6>
c0002c81:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c85:	4d                   	dec    ebp
c0002c86:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c8a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c8e:	74 32                	je     c0002cc2 <change_bitmap+0xab>
c0002c90:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c94:	75 d8                	jne    c0002c6e <change_bitmap+0x57>
c0002c96:	8d 46 01             	lea    eax,[esi+0x1]
c0002c99:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c9e:	89 c3                	mov    ebx,eax
c0002ca0:	31 f6                	xor    esi,esi
c0002ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002caa:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002cb0:	74 99                	je     c0002c4b <change_bitmap+0x34>
c0002cb2:	89 de                	mov    esi,ebx
c0002cb4:	eb b8                	jmp    c0002c6e <change_bitmap+0x57>
c0002cb6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cbb:	eb 05                	jmp    c0002cc2 <change_bitmap+0xab>
c0002cbd:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc2:	83 c4 1c             	add    esp,0x1c
c0002cc5:	89 c8                	mov    eax,ecx
c0002cc7:	5b                   	pop    ebx
c0002cc8:	5e                   	pop    esi
c0002cc9:	5f                   	pop    edi
c0002cca:	5d                   	pop    ebp
c0002ccb:	c3                   	ret    

c0002ccc <put_fat>:
c0002ccc:	83 fa 01             	cmp    edx,0x1
c0002ccf:	0f 86 7b 01 00 00    	jbe    c0002e50 <put_fat+0x184>
c0002cd5:	55                   	push   ebp
c0002cd6:	57                   	push   edi
c0002cd7:	89 cf                	mov    edi,ecx
c0002cd9:	56                   	push   esi
c0002cda:	b9 02 00 00 00       	mov    ecx,0x2
c0002cdf:	53                   	push   ebx
c0002ce0:	89 c6                	mov    esi,eax
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 d3                	mov    ebx,edx
c0002ce7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cea:	0f 86 68 01 00 00    	jbe    c0002e58 <put_fat+0x18c>
c0002cf0:	8a 00                	mov    al,BYTE PTR [eax]
c0002cf2:	3c 02                	cmp    al,0x2
c0002cf4:	0f 84 c7 00 00 00    	je     c0002dc1 <put_fat+0xf5>
c0002cfa:	77 09                	ja     c0002d05 <put_fat+0x39>
c0002cfc:	fe c8                	dec    al
c0002cfe:	74 17                	je     c0002d17 <put_fat+0x4b>
c0002d00:	e9 53 01 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002d05:	b9 02 00 00 00       	mov    ecx,0x2
c0002d0a:	3c 04                	cmp    al,0x4
c0002d0c:	0f 86 e1 00 00 00    	jbe    c0002df3 <put_fat+0x127>
c0002d12:	e9 41 01 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002d17:	89 d5                	mov    ebp,edx
c0002d19:	31 c9                	xor    ecx,ecx
c0002d1b:	d1 ed                	shr    ebp,1
c0002d1d:	89 f0                	mov    eax,esi
c0002d1f:	01 d5                	add    ebp,edx
c0002d21:	89 ea                	mov    edx,ebp
c0002d23:	c1 ea 09             	shr    edx,0x9
c0002d26:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d29:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d2c:	e8 18 f6 ff ff       	call   c0002349 <move_window>
c0002d31:	89 c1                	mov    ecx,eax
c0002d33:	85 c0                	test   eax,eax
c0002d35:	0f 85 1d 01 00 00    	jne    c0002e58 <put_fat+0x18c>
c0002d3b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d42:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d45:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d4f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d53:	89 f8                	mov    eax,edi
c0002d55:	83 e3 01             	and    ebx,0x1
c0002d58:	74 0d                	je     c0002d67 <put_fat+0x9b>
c0002d5a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d5d:	89 fa                	mov    edx,edi
c0002d5f:	83 e0 0f             	and    eax,0xf
c0002d62:	c1 e2 04             	shl    edx,0x4
c0002d65:	09 d0                	or     eax,edx
c0002d67:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d6e:	31 c9                	xor    ecx,ecx
c0002d70:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d74:	c1 ea 09             	shr    edx,0x9
c0002d77:	89 f0                	mov    eax,esi
c0002d79:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d7c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d7f:	e8 c5 f5 ff ff       	call   c0002349 <move_window>
c0002d84:	89 c1                	mov    ecx,eax
c0002d86:	85 c0                	test   eax,eax
c0002d88:	0f 85 ca 00 00 00    	jne    c0002e58 <put_fat+0x18c>
c0002d8e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d92:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d98:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d9c:	85 db                	test   ebx,ebx
c0002d9e:	74 07                	je     c0002da7 <put_fat+0xdb>
c0002da0:	c1 ef 04             	shr    edi,0x4
c0002da3:	89 fa                	mov    edx,edi
c0002da5:	eb 0e                	jmp    c0002db5 <put_fat+0xe9>
c0002da7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002daa:	c1 ef 08             	shr    edi,0x8
c0002dad:	83 e2 f0             	and    edx,0xfffffff0
c0002db0:	83 e7 0f             	and    edi,0xf
c0002db3:	09 fa                	or     edx,edi
c0002db5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002db8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dbc:	e9 97 00 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002dc1:	31 c9                	xor    ecx,ecx
c0002dc3:	c1 ea 08             	shr    edx,0x8
c0002dc6:	89 f0                	mov    eax,esi
c0002dc8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dcb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dce:	e8 76 f5 ff ff       	call   c0002349 <move_window>
c0002dd3:	89 c1                	mov    ecx,eax
c0002dd5:	85 c0                	test   eax,eax
c0002dd7:	75 7f                	jne    c0002e58 <put_fat+0x18c>
c0002dd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ddd:	01 db                	add    ebx,ebx
c0002ddf:	0f b7 d7             	movzx  edx,di
c0002de2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002de8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dec:	e8 ec ed ff ff       	call   c0001bdd <st_word>
c0002df1:	eb 53                	jmp    c0002e46 <put_fat+0x17a>
c0002df3:	31 c9                	xor    ecx,ecx
c0002df5:	c1 ea 07             	shr    edx,0x7
c0002df8:	89 f0                	mov    eax,esi
c0002dfa:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dfd:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e00:	e8 44 f5 ff ff       	call   c0002349 <move_window>
c0002e05:	89 c1                	mov    ecx,eax
c0002e07:	85 c0                	test   eax,eax
c0002e09:	75 4d                	jne    c0002e58 <put_fat+0x18c>
c0002e0b:	c1 e3 02             	shl    ebx,0x2
c0002e0e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e14:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e17:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e1b:	74 1c                	je     c0002e39 <put_fat+0x16d>
c0002e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e21:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 4a ed ff ff       	call   c0001b78 <ld_dword>
c0002e2e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e32:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e37:	09 c7                	or     edi,eax
c0002e39:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e3d:	89 fa                	mov    edx,edi
c0002e3f:	89 d8                	mov    eax,ebx
c0002e41:	e8 9b ed ff ff       	call   c0001be1 <st_dword>
c0002e46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e4e:	eb 08                	jmp    c0002e58 <put_fat+0x18c>
c0002e50:	b9 02 00 00 00       	mov    ecx,0x2
c0002e55:	89 c8                	mov    eax,ecx
c0002e57:	c3                   	ret    
c0002e58:	83 c4 1c             	add    esp,0x1c
c0002e5b:	89 c8                	mov    eax,ecx
c0002e5d:	5b                   	pop    ebx
c0002e5e:	5e                   	pop    esi
c0002e5f:	5f                   	pop    edi
c0002e60:	5d                   	pop    ebp
c0002e61:	c3                   	ret    

c0002e62 <fill_last_frag>:
c0002e62:	57                   	push   edi
c0002e63:	89 cf                	mov    edi,ecx
c0002e65:	56                   	push   esi
c0002e66:	89 d6                	mov    esi,edx
c0002e68:	53                   	push   ebx
c0002e69:	89 c3                	mov    ebx,eax
c0002e6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e6e:	85 c0                	test   eax,eax
c0002e70:	74 21                	je     c0002e93 <fill_last_frag+0x31>
c0002e72:	89 f9                	mov    ecx,edi
c0002e74:	83 f8 01             	cmp    eax,0x1
c0002e77:	76 05                	jbe    c0002e7e <fill_last_frag+0x1c>
c0002e79:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e7c:	29 c1                	sub    ecx,eax
c0002e7e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e81:	29 c2                	sub    edx,eax
c0002e83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e85:	e8 42 fe ff ff       	call   c0002ccc <put_fat>
c0002e8a:	85 c0                	test   eax,eax
c0002e8c:	75 05                	jne    c0002e93 <fill_last_frag+0x31>
c0002e8e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e91:	eb d8                	jmp    c0002e6b <fill_last_frag+0x9>
c0002e93:	5b                   	pop    ebx
c0002e94:	5e                   	pop    esi
c0002e95:	5f                   	pop    edi
c0002e96:	c3                   	ret    

c0002e97 <fill_first_frag>:
c0002e97:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e9b:	75 2d                	jne    c0002eca <fill_first_frag+0x33>
c0002e9d:	57                   	push   edi
c0002e9e:	56                   	push   esi
c0002e9f:	53                   	push   ebx
c0002ea0:	89 c3                	mov    ebx,eax
c0002ea2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002ea5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ea8:	01 d7                	add    edi,edx
c0002eaa:	39 fa                	cmp    edx,edi
c0002eac:	74 14                	je     c0002ec2 <fill_first_frag+0x2b>
c0002eae:	8d 72 01             	lea    esi,[edx+0x1]
c0002eb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002eb3:	89 f1                	mov    ecx,esi
c0002eb5:	e8 12 fe ff ff       	call   c0002ccc <put_fat>
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	85 c0                	test   eax,eax
c0002ebe:	74 ea                	je     c0002eaa <fill_first_frag+0x13>
c0002ec0:	eb 0b                	jmp    c0002ecd <fill_first_frag+0x36>
c0002ec2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ec6:	31 c0                	xor    eax,eax
c0002ec8:	eb 03                	jmp    c0002ecd <fill_first_frag+0x36>
c0002eca:	31 c0                	xor    eax,eax
c0002ecc:	c3                   	ret    
c0002ecd:	5b                   	pop    ebx
c0002ece:	5e                   	pop    esi
c0002ecf:	5f                   	pop    edi
c0002ed0:	c3                   	ret    

c0002ed1 <get_fat>:
c0002ed1:	83 fa 01             	cmp    edx,0x1
c0002ed4:	0f 86 db 01 00 00    	jbe    c00030b5 <get_fat+0x1e4>
c0002eda:	55                   	push   ebp
c0002edb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee0:	57                   	push   edi
c0002ee1:	56                   	push   esi
c0002ee2:	53                   	push   ebx
c0002ee3:	83 ec 1c             	sub    esp,0x1c
c0002ee6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ee8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002eeb:	0f 86 cc 01 00 00    	jbe    c00030bd <get_fat+0x1ec>
c0002ef1:	89 c3                	mov    ebx,eax
c0002ef3:	89 d6                	mov    esi,edx
c0002ef5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ef7:	3c 02                	cmp    al,0x2
c0002ef9:	0f 84 99 00 00 00    	je     c0002f98 <get_fat+0xc7>
c0002eff:	77 09                	ja     c0002f0a <get_fat+0x39>
c0002f01:	fe c8                	dec    al
c0002f03:	74 1a                	je     c0002f1f <get_fat+0x4e>
c0002f05:	e9 b3 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f0a:	3c 03                	cmp    al,0x3
c0002f0c:	0f 84 b5 00 00 00    	je     c0002fc7 <get_fat+0xf6>
c0002f12:	3c 04                	cmp    al,0x4
c0002f14:	0f 84 e3 00 00 00    	je     c0002ffd <get_fat+0x12c>
c0002f1a:	e9 9e 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f1f:	89 d3                	mov    ebx,edx
c0002f21:	31 c9                	xor    ecx,ecx
c0002f23:	d1 eb                	shr    ebx,1
c0002f25:	89 f8                	mov    eax,edi
c0002f27:	01 d3                	add    ebx,edx
c0002f29:	89 da                	mov    edx,ebx
c0002f2b:	c1 ea 09             	shr    edx,0x9
c0002f2e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f31:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f34:	e8 10 f4 ff ff       	call   c0002349 <move_window>
c0002f39:	85 c0                	test   eax,eax
c0002f3b:	74 08                	je     c0002f45 <get_fat+0x74>
c0002f3d:	83 c9 ff             	or     ecx,0xffffffff
c0002f40:	e9 78 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f45:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f48:	31 c9                	xor    ecx,ecx
c0002f4a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f50:	89 ea                	mov    edx,ebp
c0002f52:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f56:	c1 ea 09             	shr    edx,0x9
c0002f59:	89 f8                	mov    eax,edi
c0002f5b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f5e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f61:	e8 e3 f3 ff ff       	call   c0002349 <move_window>
c0002f66:	85 c0                	test   eax,eax
c0002f68:	75 d3                	jne    c0002f3d <get_fat+0x6c>
c0002f6a:	0f b6 c3             	movzx  eax,bl
c0002f6d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f73:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f78:	c1 e3 08             	shl    ebx,0x8
c0002f7b:	09 c3                	or     ebx,eax
c0002f7d:	89 d9                	mov    ecx,ebx
c0002f7f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f85:	83 e6 01             	and    esi,0x1
c0002f88:	0f 84 2f 01 00 00    	je     c00030bd <get_fat+0x1ec>
c0002f8e:	89 d9                	mov    ecx,ebx
c0002f90:	c1 e9 04             	shr    ecx,0x4
c0002f93:	e9 25 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f98:	31 c9                	xor    ecx,ecx
c0002f9a:	c1 ea 08             	shr    edx,0x8
c0002f9d:	89 f8                	mov    eax,edi
c0002f9f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fa2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fa5:	e8 9f f3 ff ff       	call   c0002349 <move_window>
c0002faa:	85 c0                	test   eax,eax
c0002fac:	75 8f                	jne    c0002f3d <get_fat+0x6c>
c0002fae:	01 f6                	add    esi,esi
c0002fb0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fb6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fba:	e8 ac eb ff ff       	call   c0001b6b <ld_word>
c0002fbf:	0f b7 c8             	movzx  ecx,ax
c0002fc2:	e9 f6 00 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002fc7:	31 c9                	xor    ecx,ecx
c0002fc9:	c1 ea 07             	shr    edx,0x7
c0002fcc:	89 f8                	mov    eax,edi
c0002fce:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fd1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fd4:	e8 70 f3 ff ff       	call   c0002349 <move_window>
c0002fd9:	85 c0                	test   eax,eax
c0002fdb:	0f 85 5c ff ff ff    	jne    c0002f3d <get_fat+0x6c>
c0002fe1:	c1 e6 02             	shl    esi,0x2
c0002fe4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fea:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fee:	e8 85 eb ff ff       	call   c0001b78 <ld_dword>
c0002ff3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ff8:	e9 b4 00 00 00       	jmp    c00030b1 <get_fat+0x1e0>
c0002ffd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003000:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003003:	89 d1                	mov    ecx,edx
c0003005:	09 c1                	or     ecx,eax
c0003007:	74 06                	je     c000300f <get_fat+0x13e>
c0003009:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000300d:	75 0f                	jne    c000301e <get_fat+0x14d>
c000300f:	b9 01 00 00 00       	mov    ecx,0x1
c0003014:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003018:	0f 85 9f 00 00 00    	jne    c00030bd <get_fat+0x1ec>
c000301e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003022:	89 f5                	mov    ebp,esi
c0003024:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003029:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000302c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000302f:	80 f9 02             	cmp    cl,0x2
c0003032:	75 35                	jne    c0003069 <get_fat+0x198>
c0003034:	83 c0 ff             	add    eax,0xffffffff
c0003037:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000303c:	83 d2 ff             	adc    edx,0xffffffff
c000303f:	31 db                	xor    ebx,ebx
c0003041:	0f ac d0 09          	shrd   eax,edx,0x9
c0003045:	53                   	push   ebx
c0003046:	c1 ea 09             	shr    edx,0x9
c0003049:	51                   	push   ecx
c000304a:	52                   	push   edx
c000304b:	50                   	push   eax
c000304c:	e8 3f ff 01 00       	call   c0022f90 <__udivdi3>
c0003051:	83 c4 10             	add    esp,0x10
c0003054:	b9 01 00 00 00       	mov    ecx,0x1
c0003059:	39 c5                	cmp    ebp,eax
c000305b:	77 60                	ja     c00030bd <get_fat+0x1ec>
c000305d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003062:	74 59                	je     c00030bd <get_fat+0x1ec>
c0003064:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003067:	eb 54                	jmp    c00030bd <get_fat+0x1ec>
c0003069:	80 f9 03             	cmp    cl,0x3
c000306c:	75 05                	jne    c0003073 <get_fat+0x1a2>
c000306e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003071:	77 f1                	ja     c0003064 <get_fat+0x193>
c0003073:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003078:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000307c:	75 3f                	jne    c00030bd <get_fat+0x1ec>
c000307e:	31 c9                	xor    ecx,ecx
c0003080:	89 f2                	mov    edx,esi
c0003082:	89 f8                	mov    eax,edi
c0003084:	c1 ea 07             	shr    edx,0x7
c0003087:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000308d:	e8 b7 f2 ff ff       	call   c0002349 <move_window>
c0003092:	85 c0                	test   eax,eax
c0003094:	0f 85 a3 fe ff ff    	jne    c0002f3d <get_fat+0x6c>
c000309a:	c1 e6 02             	shl    esi,0x2
c000309d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030a7:	e8 cc ea ff ff       	call   c0001b78 <ld_dword>
c00030ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030b1:	89 c1                	mov    ecx,eax
c00030b3:	eb 08                	jmp    c00030bd <get_fat+0x1ec>
c00030b5:	b9 01 00 00 00       	mov    ecx,0x1
c00030ba:	89 c8                	mov    eax,ecx
c00030bc:	c3                   	ret    
c00030bd:	83 c4 1c             	add    esp,0x1c
c00030c0:	89 c8                	mov    eax,ecx
c00030c2:	5b                   	pop    ebx
c00030c3:	5e                   	pop    esi
c00030c4:	5f                   	pop    edi
c00030c5:	5d                   	pop    ebp
c00030c6:	c3                   	ret    

c00030c7 <dir_sdi>:
c00030c7:	55                   	push   ebp
c00030c8:	57                   	push   edi
c00030c9:	56                   	push   esi
c00030ca:	53                   	push   ebx
c00030cb:	89 c3                	mov    ebx,eax
c00030cd:	83 ec 1c             	sub    esp,0x1c
c00030d0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030d2:	31 c0                	xor    eax,eax
c00030d4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030d7:	0f 94 c0             	sete   al
c00030da:	48                   	dec    eax
c00030db:	25 00 00 20 f0       	and    eax,0xf0200000
c00030e0:	05 00 00 00 10       	add    eax,0x10000000
c00030e5:	39 d0                	cmp    eax,edx
c00030e7:	77 0a                	ja     c00030f3 <dir_sdi+0x2c>
c00030e9:	b8 02 00 00 00       	mov    eax,0x2
c00030ee:	e9 c4 00 00 00       	jmp    c00031b7 <dir_sdi+0xf0>
c00030f3:	89 d6                	mov    esi,edx
c00030f5:	f6 c2 1f             	test   dl,0x1f
c00030f8:	75 ef                	jne    c00030e9 <dir_sdi+0x22>
c00030fa:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030fd:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003100:	85 c9                	test   ecx,ecx
c0003102:	75 2d                	jne    c0003131 <dir_sdi+0x6a>
c0003104:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003107:	77 1b                	ja     c0003124 <dir_sdi+0x5d>
c0003109:	89 f2                	mov    edx,esi
c000310b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000310f:	c1 ea 05             	shr    edx,0x5
c0003112:	39 c2                	cmp    edx,eax
c0003114:	73 d3                	jae    c00030e9 <dir_sdi+0x22>
c0003116:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003119:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000311c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000311f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003122:	eb 4b                	jmp    c000316f <dir_sdi+0xa8>
c0003124:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003127:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000312b:	85 c0                	test   eax,eax
c000312d:	74 da                	je     c0003109 <dir_sdi+0x42>
c000312f:	89 c1                	mov    ecx,eax
c0003131:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003135:	c1 e5 09             	shl    ebp,0x9
c0003138:	89 ca                	mov    edx,ecx
c000313a:	39 ee                	cmp    esi,ebp
c000313c:	72 1c                	jb     c000315a <dir_sdi+0x93>
c000313e:	89 d8                	mov    eax,ebx
c0003140:	e8 8c fd ff ff       	call   c0002ed1 <get_fat>
c0003145:	89 c1                	mov    ecx,eax
c0003147:	83 f8 ff             	cmp    eax,0xffffffff
c000314a:	74 66                	je     c00031b2 <dir_sdi+0xeb>
c000314c:	83 f8 01             	cmp    eax,0x1
c000314f:	76 98                	jbe    c00030e9 <dir_sdi+0x22>
c0003151:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003154:	76 93                	jbe    c00030e9 <dir_sdi+0x22>
c0003156:	29 ee                	sub    esi,ebp
c0003158:	eb de                	jmp    c0003138 <dir_sdi+0x71>
c000315a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000315e:	89 f8                	mov    eax,edi
c0003160:	e8 9f ec ff ff       	call   c0001e04 <clst2sect>
c0003165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003169:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000316c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000316f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003172:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003175:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003178:	89 d1                	mov    ecx,edx
c000317a:	09 c1                	or     ecx,eax
c000317c:	0f 84 67 ff ff ff    	je     c00030e9 <dir_sdi+0x22>
c0003182:	89 f1                	mov    ecx,esi
c0003184:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000318c:	c1 e9 09             	shr    ecx,0x9
c000318f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003193:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003197:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000319b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000319e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00031a4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031a7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00031ae:	31 c0                	xor    eax,eax
c00031b0:	eb 05                	jmp    c00031b7 <dir_sdi+0xf0>
c00031b2:	b8 01 00 00 00       	mov    eax,0x1
c00031b7:	83 c4 1c             	add    esp,0x1c
c00031ba:	5b                   	pop    ebx
c00031bb:	5e                   	pop    esi
c00031bc:	5f                   	pop    edi
c00031bd:	5d                   	pop    ebp
c00031be:	c3                   	ret    

c00031bf <create_chain>:
c00031bf:	55                   	push   ebp
c00031c0:	89 c5                	mov    ebp,eax
c00031c2:	57                   	push   edi
c00031c3:	56                   	push   esi
c00031c4:	53                   	push   ebx
c00031c5:	83 ec 1c             	sub    esp,0x1c
c00031c8:	85 d2                	test   edx,edx
c00031ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031ce:	8b 30                	mov    esi,DWORD PTR [eax]
c00031d0:	75 0e                	jne    c00031e0 <create_chain+0x21>
c00031d2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031d5:	85 ff                	test   edi,edi
c00031d7:	74 39                	je     c0003212 <create_chain+0x53>
c00031d9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031dc:	77 39                	ja     c0003217 <create_chain+0x58>
c00031de:	eb 32                	jmp    c0003212 <create_chain+0x53>
c00031e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031e4:	e8 e8 fc ff ff       	call   c0002ed1 <get_fat>
c00031e9:	89 c3                	mov    ebx,eax
c00031eb:	83 f8 01             	cmp    eax,0x1
c00031ee:	77 0a                	ja     c00031fa <create_chain+0x3b>
c00031f0:	bb 01 00 00 00       	mov    ebx,0x1
c00031f5:	e9 ba 01 00 00       	jmp    c00033b4 <create_chain+0x1f5>
c00031fa:	83 f8 ff             	cmp    eax,0xffffffff
c00031fd:	0f 84 62 01 00 00    	je     c0003365 <create_chain+0x1a6>
c0003203:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003206:	0f 87 a8 01 00 00    	ja     c00033b4 <create_chain+0x1f5>
c000320c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003210:	eb 05                	jmp    c0003217 <create_chain+0x58>
c0003212:	bf 01 00 00 00       	mov    edi,0x1
c0003217:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000321b:	75 07                	jne    c0003224 <create_chain+0x65>
c000321d:	31 db                	xor    ebx,ebx
c000321f:	e9 90 01 00 00       	jmp    c00033b4 <create_chain+0x1f5>
c0003224:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003227:	75 74                	jne    c000329d <create_chain+0xde>
c0003229:	b9 01 00 00 00       	mov    ecx,0x1
c000322e:	89 fa                	mov    edx,edi
c0003230:	89 f0                	mov    eax,esi
c0003232:	e8 2d f9 ff ff       	call   c0002b64 <find_bitmap>
c0003237:	89 c3                	mov    ebx,eax
c0003239:	8d 40 ff             	lea    eax,[eax-0x1]
c000323c:	83 f8 fd             	cmp    eax,0xfffffffd
c000323f:	0f 87 6f 01 00 00    	ja     c00033b4 <create_chain+0x1f5>
c0003245:	83 ec 0c             	sub    esp,0xc
c0003248:	b9 01 00 00 00       	mov    ecx,0x1
c000324d:	6a 01                	push   0x1
c000324f:	89 da                	mov    edx,ebx
c0003251:	89 f0                	mov    eax,esi
c0003253:	e8 bf f9 ff ff       	call   c0002c17 <change_bitmap>
c0003258:	83 c4 10             	add    esp,0x10
c000325b:	83 f8 02             	cmp    eax,0x2
c000325e:	74 90                	je     c00031f0 <create_chain+0x31>
c0003260:	83 f8 01             	cmp    eax,0x1
c0003263:	0f 84 fc 00 00 00    	je     c0003365 <create_chain+0x1a6>
c0003269:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000326e:	75 09                	jne    c0003279 <create_chain+0xba>
c0003270:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003274:	e9 0c 01 00 00       	jmp    c0003385 <create_chain+0x1c6>
c0003279:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000327d:	0f 85 e7 00 00 00    	jne    c000336a <create_chain+0x1ab>
c0003283:	8d 57 01             	lea    edx,[edi+0x1]
c0003286:	39 da                	cmp    edx,ebx
c0003288:	0f 84 f7 00 00 00    	je     c0003385 <create_chain+0x1c6>
c000328e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003291:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003295:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003298:	e9 cd 00 00 00       	jmp    c000336a <create_chain+0x1ab>
c000329d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00032a1:	75 41                	jne    c00032e4 <create_chain+0x125>
c00032a3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00032a6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032a9:	77 05                	ja     c00032b0 <create_chain+0xf1>
c00032ab:	bb 02 00 00 00       	mov    ebx,0x2
c00032b0:	89 da                	mov    edx,ebx
c00032b2:	89 e8                	mov    eax,ebp
c00032b4:	e8 18 fc ff ff       	call   c0002ed1 <get_fat>
c00032b9:	83 f8 01             	cmp    eax,0x1
c00032bc:	0f 84 2e ff ff ff    	je     c00031f0 <create_chain+0x31>
c00032c2:	83 f8 ff             	cmp    eax,0xffffffff
c00032c5:	0f 84 9a 00 00 00    	je     c0003365 <create_chain+0x1a6>
c00032cb:	85 c0                	test   eax,eax
c00032cd:	74 11                	je     c00032e0 <create_chain+0x121>
c00032cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032d2:	83 f8 01             	cmp    eax,0x1
c00032d5:	76 0d                	jbe    c00032e4 <create_chain+0x125>
c00032d7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032da:	76 08                	jbe    c00032e4 <create_chain+0x125>
c00032dc:	89 c7                	mov    edi,eax
c00032de:	eb 04                	jmp    c00032e4 <create_chain+0x125>
c00032e0:	85 db                	test   ebx,ebx
c00032e2:	75 38                	jne    c000331c <create_chain+0x15d>
c00032e4:	89 fb                	mov    ebx,edi
c00032e6:	43                   	inc    ebx
c00032e7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032ea:	77 0e                	ja     c00032fa <create_chain+0x13b>
c00032ec:	83 ff 01             	cmp    edi,0x1
c00032ef:	0f 86 28 ff ff ff    	jbe    c000321d <create_chain+0x5e>
c00032f5:	bb 02 00 00 00       	mov    ebx,0x2
c00032fa:	89 da                	mov    edx,ebx
c00032fc:	89 e8                	mov    eax,ebp
c00032fe:	e8 ce fb ff ff       	call   c0002ed1 <get_fat>
c0003303:	85 c0                	test   eax,eax
c0003305:	74 15                	je     c000331c <create_chain+0x15d>
c0003307:	83 f8 01             	cmp    eax,0x1
c000330a:	0f 84 e0 fe ff ff    	je     c00031f0 <create_chain+0x31>
c0003310:	40                   	inc    eax
c0003311:	74 52                	je     c0003365 <create_chain+0x1a6>
c0003313:	39 fb                	cmp    ebx,edi
c0003315:	75 cf                	jne    c00032e6 <create_chain+0x127>
c0003317:	e9 01 ff ff ff       	jmp    c000321d <create_chain+0x5e>
c000331c:	83 c9 ff             	or     ecx,0xffffffff
c000331f:	89 da                	mov    edx,ebx
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 a4 f9 ff ff       	call   c0002ccc <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 32                	jne    c000335e <create_chain+0x19f>
c000332c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003331:	74 11                	je     c0003344 <create_chain+0x185>
c0003333:	89 d9                	mov    ecx,ebx
c0003335:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003339:	89 f0                	mov    eax,esi
c000333b:	e8 8c f9 ff ff       	call   c0002ccc <put_fat>
c0003340:	85 c0                	test   eax,eax
c0003342:	75 1a                	jne    c000335e <create_chain+0x19f>
c0003344:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003347:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000334a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000334d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003350:	39 d0                	cmp    eax,edx
c0003352:	77 04                	ja     c0003358 <create_chain+0x199>
c0003354:	48                   	dec    eax
c0003355:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003358:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000335c:	eb 56                	jmp    c00033b4 <create_chain+0x1f5>
c000335e:	48                   	dec    eax
c000335f:	0f 85 8b fe ff ff    	jne    c00031f0 <create_chain+0x31>
c0003365:	83 cb ff             	or     ebx,0xffffffff
c0003368:	eb 4a                	jmp    c00033b4 <create_chain+0x1f5>
c000336a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003371:	41                   	inc    ecx
c0003372:	39 d9                	cmp    ecx,ebx
c0003374:	75 19                	jne    c000338f <create_chain+0x1d0>
c0003376:	b9 02 00 00 00       	mov    ecx,0x2
c000337b:	85 d2                	test   edx,edx
c000337d:	74 03                	je     c0003382 <create_chain+0x1c3>
c000337f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003382:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003385:	85 c0                	test   eax,eax
c0003387:	0f 85 63 fe ff ff    	jne    c00031f0 <create_chain+0x31>
c000338d:	eb b5                	jmp    c0003344 <create_chain+0x185>
c000338f:	85 d2                	test   edx,edx
c0003391:	75 07                	jne    c000339a <create_chain+0x1db>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	89 d9                	mov    ecx,ebx
c000339c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033a0:	89 e8                	mov    eax,ebp
c00033a2:	e8 bb fa ff ff       	call   c0002e62 <fill_last_frag>
c00033a7:	85 c0                	test   eax,eax
c00033a9:	75 b3                	jne    c000335e <create_chain+0x19f>
c00033ab:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033b2:	eb 90                	jmp    c0003344 <create_chain+0x185>
c00033b4:	83 c4 1c             	add    esp,0x1c
c00033b7:	89 d8                	mov    eax,ebx
c00033b9:	5b                   	pop    ebx
c00033ba:	5e                   	pop    esi
c00033bb:	5f                   	pop    edi
c00033bc:	5d                   	pop    ebp
c00033bd:	c3                   	ret    

c00033be <remove_chain>:
c00033be:	55                   	push   ebp
c00033bf:	57                   	push   edi
c00033c0:	56                   	push   esi
c00033c1:	53                   	push   ebx
c00033c2:	83 ec 1c             	sub    esp,0x1c
c00033c5:	83 fa 01             	cmp    edx,0x1
c00033c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033cc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033ce:	77 0a                	ja     c00033da <remove_chain+0x1c>
c00033d0:	b8 02 00 00 00       	mov    eax,0x2
c00033d5:	e9 24 01 00 00       	jmp    c00034fe <remove_chain+0x140>
c00033da:	89 d6                	mov    esi,edx
c00033dc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033df:	76 ef                	jbe    c00033d0 <remove_chain+0x12>
c00033e1:	89 c7                	mov    edi,eax
c00033e3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033e8:	75 06                	jne    c00033f0 <remove_chain+0x32>
c00033ea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033ee:	eb 54                	jmp    c0003444 <remove_chain+0x86>
c00033f0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033f3:	75 06                	jne    c00033fb <remove_chain+0x3d>
c00033f5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033f9:	74 ef                	je     c00033ea <remove_chain+0x2c>
c00033fb:	83 c9 ff             	or     ecx,0xffffffff
c00033fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003402:	89 d8                	mov    eax,ebx
c0003404:	e8 c3 f8 ff ff       	call   c0002ccc <put_fat>
c0003409:	85 c0                	test   eax,eax
c000340b:	74 dd                	je     c00033ea <remove_chain+0x2c>
c000340d:	e9 ec 00 00 00       	jmp    c00034fe <remove_chain+0x140>
c0003412:	83 f8 01             	cmp    eax,0x1
c0003415:	74 b9                	je     c00033d0 <remove_chain+0x12>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	74 6d                	je     c0003489 <remove_chain+0xcb>
c000341c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000341f:	75 6f                	jne    c0003490 <remove_chain+0xd2>
c0003421:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003424:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003427:	8d 51 fe             	lea    edx,[ecx-0x2]
c000342a:	39 d0                	cmp    eax,edx
c000342c:	73 08                	jae    c0003436 <remove_chain+0x78>
c000342e:	40                   	inc    eax
c000342f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003433:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003436:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003439:	39 e9                	cmp    ecx,ebp
c000343b:	75 64                	jne    c00034a1 <remove_chain+0xe3>
c000343d:	89 ee                	mov    esi,ebp
c000343f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003442:	76 0f                	jbe    c0003453 <remove_chain+0x95>
c0003444:	89 f2                	mov    edx,esi
c0003446:	89 f8                	mov    eax,edi
c0003448:	e8 84 fa ff ff       	call   c0002ed1 <get_fat>
c000344d:	89 c5                	mov    ebp,eax
c000344f:	85 c0                	test   eax,eax
c0003451:	75 bf                	jne    c0003412 <remove_chain+0x54>
c0003453:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003456:	0f 85 a0 00 00 00    	jne    c00034fc <remove_chain+0x13e>
c000345c:	eb 6c                	jmp    c00034ca <remove_chain+0x10c>
c000345e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003461:	84 c0                	test   al,al
c0003463:	75 7d                	jne    c00034e2 <remove_chain+0x124>
c0003465:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003468:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000346c:	0f 84 86 00 00 00    	je     c00034f8 <remove_chain+0x13a>
c0003472:	89 da                	mov    edx,ebx
c0003474:	89 f8                	mov    eax,edi
c0003476:	e8 56 fa ff ff       	call   c0002ed1 <get_fat>
c000347b:	83 f8 01             	cmp    eax,0x1
c000347e:	0f 86 4c ff ff ff    	jbe    c00033d0 <remove_chain+0x12>
c0003484:	83 f8 ff             	cmp    eax,0xffffffff
c0003487:	75 4e                	jne    c00034d7 <remove_chain+0x119>
c0003489:	b8 01 00 00 00       	mov    eax,0x1
c000348e:	eb 6e                	jmp    c00034fe <remove_chain+0x140>
c0003490:	31 c9                	xor    ecx,ecx
c0003492:	89 f2                	mov    edx,esi
c0003494:	89 d8                	mov    eax,ebx
c0003496:	e8 31 f8 ff ff       	call   c0002ccc <put_fat>
c000349b:	85 c0                	test   eax,eax
c000349d:	74 82                	je     c0003421 <remove_chain+0x63>
c000349f:	eb 5d                	jmp    c00034fe <remove_chain+0x140>
c00034a1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034a4:	75 1b                	jne    c00034c1 <remove_chain+0x103>
c00034a6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00034aa:	89 d8                	mov    eax,ebx
c00034ac:	83 ec 0c             	sub    esp,0xc
c00034af:	6a 00                	push   0x0
c00034b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034b5:	e8 5d f7 ff ff       	call   c0002c17 <change_bitmap>
c00034ba:	83 c4 10             	add    esp,0x10
c00034bd:	85 c0                	test   eax,eax
c00034bf:	75 3d                	jne    c00034fe <remove_chain+0x140>
c00034c1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034c5:	e9 73 ff ff ff       	jmp    c000343d <remove_chain+0x7f>
c00034ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034cf:	75 8d                	jne    c000345e <remove_chain+0xa0>
c00034d1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034d5:	eb 25                	jmp    c00034fc <remove_chain+0x13e>
c00034d7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034da:	89 c3                	mov    ebx,eax
c00034dc:	39 c2                	cmp    edx,eax
c00034de:	74 88                	je     c0003468 <remove_chain+0xaa>
c00034e0:	eb 1a                	jmp    c00034fc <remove_chain+0x13e>
c00034e2:	3c 03                	cmp    al,0x3
c00034e4:	75 16                	jne    c00034fc <remove_chain+0x13e>
c00034e6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034e9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034ed:	77 0d                	ja     c00034fc <remove_chain+0x13e>
c00034ef:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034f2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034f6:	72 04                	jb     c00034fc <remove_chain+0x13e>
c00034f8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034fc:	31 c0                	xor    eax,eax
c00034fe:	83 c4 1c             	add    esp,0x1c
c0003501:	5b                   	pop    ebx
c0003502:	5e                   	pop    esi
c0003503:	5f                   	pop    edi
c0003504:	5d                   	pop    ebp
c0003505:	c3                   	ret    

c0003506 <dir_clear>:
c0003506:	55                   	push   ebp
c0003507:	57                   	push   edi
c0003508:	56                   	push   esi
c0003509:	89 c6                	mov    esi,eax
c000350b:	53                   	push   ebx
c000350c:	83 ec 1c             	sub    esp,0x1c
c000350f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003513:	e8 9d ed ff ff       	call   c00022b5 <sync_window>
c0003518:	85 c0                	test   eax,eax
c000351a:	0f 85 de 00 00 00    	jne    c00035fe <dir_clear+0xf8>
c0003520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003524:	89 f0                	mov    eax,esi
c0003526:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003529:	e8 d6 e8 ff ff       	call   c0001e04 <clst2sect>
c000352e:	b9 00 02 00 00       	mov    ecx,0x200
c0003533:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003537:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000353b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000353e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003541:	89 e8                	mov    eax,ebp
c0003543:	31 d2                	xor    edx,edx
c0003545:	e8 b5 e6 ff ff       	call   c0001bff <mem_set>
c000354a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000354e:	c1 e3 09             	shl    ebx,0x9
c0003551:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003557:	76 1f                	jbe    c0003578 <dir_clear+0x72>
c0003559:	bb 00 80 00 00       	mov    ebx,0x8000
c000355e:	eb 18                	jmp    c0003578 <dir_clear+0x72>
c0003560:	83 ec 0c             	sub    esp,0xc
c0003563:	53                   	push   ebx
c0003564:	e8 6b 50 00 00       	call   c00085d4 <ff_memalloc>
c0003569:	83 c4 10             	add    esp,0x10
c000356c:	89 c7                	mov    edi,eax
c000356e:	85 c0                	test   eax,eax
c0003570:	0f 85 8f 00 00 00    	jne    c0003605 <dir_clear+0xff>
c0003576:	d1 eb                	shr    ebx,1
c0003578:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000357e:	77 e0                	ja     c0003560 <dir_clear+0x5a>
c0003580:	31 db                	xor    ebx,ebx
c0003582:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003586:	39 d8                	cmp    eax,ebx
c0003588:	76 66                	jbe    c00035f0 <dir_clear+0xea>
c000358a:	83 ec 0c             	sub    esp,0xc
c000358d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003591:	6a 01                	push   0x1
c0003593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000359b:	55                   	push   ebp
c000359c:	50                   	push   eax
c000359d:	e8 94 e5 ff ff       	call   c0001b36 <disk_write>
c00035a2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00035a7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00035ac:	83 c4 20             	add    esp,0x20
c00035af:	85 c0                	test   eax,eax
c00035b1:	75 3d                	jne    c00035f0 <dir_clear+0xea>
c00035b3:	43                   	inc    ebx
c00035b4:	eb cc                	jmp    c0003582 <dir_clear+0x7c>
c00035b6:	83 ec 0c             	sub    esp,0xc
c00035b9:	31 d2                	xor    edx,edx
c00035bb:	55                   	push   ebp
c00035bc:	89 d8                	mov    eax,ebx
c00035be:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035c2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035c6:	52                   	push   edx
c00035c7:	50                   	push   eax
c00035c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035cc:	57                   	push   edi
c00035cd:	50                   	push   eax
c00035ce:	e8 63 e5 ff ff       	call   c0001b36 <disk_write>
c00035d3:	83 c4 20             	add    esp,0x20
c00035d6:	85 c0                	test   eax,eax
c00035d8:	75 0a                	jne    c00035e4 <dir_clear+0xde>
c00035da:	01 eb                	add    ebx,ebp
c00035dc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e0:	39 d8                	cmp    eax,ebx
c00035e2:	77 d2                	ja     c00035b6 <dir_clear+0xb0>
c00035e4:	83 ec 0c             	sub    esp,0xc
c00035e7:	57                   	push   edi
c00035e8:	e8 ff 4f 00 00       	call   c00085ec <ff_memfree>
c00035ed:	83 c4 10             	add    esp,0x10
c00035f0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035f4:	39 d8                	cmp    eax,ebx
c00035f6:	0f 95 c0             	setne  al
c00035f9:	0f b6 c0             	movzx  eax,al
c00035fc:	eb 19                	jmp    c0003617 <dir_clear+0x111>
c00035fe:	b8 01 00 00 00       	mov    eax,0x1
c0003603:	eb 12                	jmp    c0003617 <dir_clear+0x111>
c0003605:	89 d9                	mov    ecx,ebx
c0003607:	31 d2                	xor    edx,edx
c0003609:	c1 eb 09             	shr    ebx,0x9
c000360c:	e8 ee e5 ff ff       	call   c0001bff <mem_set>
c0003611:	89 dd                	mov    ebp,ebx
c0003613:	31 db                	xor    ebx,ebx
c0003615:	eb c5                	jmp    c00035dc <dir_clear+0xd6>
c0003617:	83 c4 1c             	add    esp,0x1c
c000361a:	5b                   	pop    ebx
c000361b:	5e                   	pop    esi
c000361c:	5f                   	pop    edi
c000361d:	5d                   	pop    ebp
c000361e:	c3                   	ret    

c000361f <dir_next>:
c000361f:	55                   	push   ebp
c0003620:	57                   	push   edi
c0003621:	56                   	push   esi
c0003622:	53                   	push   ebx
c0003623:	89 c3                	mov    ebx,eax
c0003625:	83 ec 1c             	sub    esp,0x1c
c0003628:	8b 28                	mov    ebp,DWORD PTR [eax]
c000362a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000362e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003631:	8d 78 20             	lea    edi,[eax+0x20]
c0003634:	31 c0                	xor    eax,eax
c0003636:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000363a:	0f 94 c0             	sete   al
c000363d:	48                   	dec    eax
c000363e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003643:	05 00 00 00 10       	add    eax,0x10000000
c0003648:	39 f8                	cmp    eax,edi
c000364a:	77 0e                	ja     c000365a <dir_next+0x3b>
c000364c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003653:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000365a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000365d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003660:	b8 04 00 00 00       	mov    eax,0x4
c0003665:	89 ce                	mov    esi,ecx
c0003667:	09 d6                	or     esi,edx
c0003669:	0f 84 da 00 00 00    	je     c0003749 <dir_next+0x12a>
c000366f:	89 f8                	mov    eax,edi
c0003671:	25 ff 01 00 00       	and    eax,0x1ff
c0003676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000367a:	0f 85 b9 00 00 00    	jne    c0003739 <dir_next+0x11a>
c0003680:	83 c2 01             	add    edx,0x1
c0003683:	83 d1 00             	adc    ecx,0x0
c0003686:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003689:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000368c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000368f:	85 d2                	test   edx,edx
c0003691:	75 29                	jne    c00036bc <dir_next+0x9d>
c0003693:	89 fa                	mov    edx,edi
c0003695:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003699:	c1 ea 05             	shr    edx,0x5
c000369c:	39 c2                	cmp    edx,eax
c000369e:	0f 82 95 00 00 00    	jb     c0003739 <dir_next+0x11a>
c00036a4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00036ab:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036b2:	b8 04 00 00 00       	mov    eax,0x4
c00036b7:	e9 8d 00 00 00       	jmp    c0003749 <dir_next+0x12a>
c00036bc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036c0:	89 f9                	mov    ecx,edi
c00036c2:	48                   	dec    eax
c00036c3:	c1 e9 09             	shr    ecx,0x9
c00036c6:	85 c8                	test   eax,ecx
c00036c8:	75 6f                	jne    c0003739 <dir_next+0x11a>
c00036ca:	89 d8                	mov    eax,ebx
c00036cc:	e8 00 f8 ff ff       	call   c0002ed1 <get_fat>
c00036d1:	89 c6                	mov    esi,eax
c00036d3:	83 f8 01             	cmp    eax,0x1
c00036d6:	77 07                	ja     c00036df <dir_next+0xc0>
c00036d8:	b8 02 00 00 00       	mov    eax,0x2
c00036dd:	eb 6a                	jmp    c0003749 <dir_next+0x12a>
c00036df:	83 f8 ff             	cmp    eax,0xffffffff
c00036e2:	75 07                	jne    c00036eb <dir_next+0xcc>
c00036e4:	b8 01 00 00 00       	mov    eax,0x1
c00036e9:	eb 5e                	jmp    c0003749 <dir_next+0x12a>
c00036eb:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036ee:	77 37                	ja     c0003727 <dir_next+0x108>
c00036f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036f5:	74 ad                	je     c00036a4 <dir_next+0x85>
c00036f7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036fa:	89 d8                	mov    eax,ebx
c00036fc:	e8 be fa ff ff       	call   c00031bf <create_chain>
c0003701:	89 c6                	mov    esi,eax
c0003703:	b8 07 00 00 00       	mov    eax,0x7
c0003708:	85 f6                	test   esi,esi
c000370a:	74 3d                	je     c0003749 <dir_next+0x12a>
c000370c:	83 fe 01             	cmp    esi,0x1
c000370f:	74 c7                	je     c00036d8 <dir_next+0xb9>
c0003711:	83 fe ff             	cmp    esi,0xffffffff
c0003714:	74 ce                	je     c00036e4 <dir_next+0xc5>
c0003716:	89 f2                	mov    edx,esi
c0003718:	89 e8                	mov    eax,ebp
c000371a:	e8 e7 fd ff ff       	call   c0003506 <dir_clear>
c000371f:	85 c0                	test   eax,eax
c0003721:	75 c1                	jne    c00036e4 <dir_next+0xc5>
c0003723:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003727:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000372a:	89 f2                	mov    edx,esi
c000372c:	89 e8                	mov    eax,ebp
c000372e:	e8 d1 e6 ff ff       	call   c0001e04 <clst2sect>
c0003733:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003736:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000373d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003740:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003744:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003747:	31 c0                	xor    eax,eax
c0003749:	83 c4 1c             	add    esp,0x1c
c000374c:	5b                   	pop    ebx
c000374d:	5e                   	pop    esi
c000374e:	5f                   	pop    edi
c000374f:	5d                   	pop    ebp
c0003750:	c3                   	ret    

c0003751 <load_xdir>:
c0003751:	55                   	push   ebp
c0003752:	57                   	push   edi
c0003753:	56                   	push   esi
c0003754:	89 c6                	mov    esi,eax
c0003756:	53                   	push   ebx
c0003757:	83 ec 1c             	sub    esp,0x1c
c000375a:	8b 00                	mov    eax,DWORD PTR [eax]
c000375c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000375f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003762:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003765:	e8 df eb ff ff       	call   c0002349 <move_window>
c000376a:	89 c3                	mov    ebx,eax
c000376c:	85 c0                	test   eax,eax
c000376e:	0f 85 0c 01 00 00    	jne    c0003880 <load_xdir+0x12f>
c0003774:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003777:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000377a:	0f 85 fb 00 00 00    	jne    c000387b <load_xdir+0x12a>
c0003780:	89 f8                	mov    eax,edi
c0003782:	b9 20 00 00 00       	mov    ecx,0x20
c0003787:	e8 5e e4 ff ff       	call   c0001bea <mem_cpy>
c000378c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003790:	40                   	inc    eax
c0003791:	c1 e0 05             	shl    eax,0x5
c0003794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003798:	83 e8 60             	sub    eax,0x60
c000379b:	3d 00 02 00 00       	cmp    eax,0x200
c00037a0:	0f 87 d5 00 00 00    	ja     c000387b <load_xdir+0x12a>
c00037a6:	31 d2                	xor    edx,edx
c00037a8:	89 f0                	mov    eax,esi
c00037aa:	e8 70 fe ff ff       	call   c000361f <dir_next>
c00037af:	89 c3                	mov    ebx,eax
c00037b1:	83 f8 04             	cmp    eax,0x4
c00037b4:	0f 84 c1 00 00 00    	je     c000387b <load_xdir+0x12a>
c00037ba:	85 c0                	test   eax,eax
c00037bc:	0f 85 be 00 00 00    	jne    c0003880 <load_xdir+0x12f>
c00037c2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037c5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ca:	e8 7a eb ff ff       	call   c0002349 <move_window>
c00037cf:	89 c3                	mov    ebx,eax
c00037d1:	85 c0                	test   eax,eax
c00037d3:	0f 85 a7 00 00 00    	jne    c0003880 <load_xdir+0x12f>
c00037d9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037dc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037df:	0f 85 96 00 00 00    	jne    c000387b <load_xdir+0x12a>
c00037e5:	8d 47 20             	lea    eax,[edi+0x20]
c00037e8:	b9 20 00 00 00       	mov    ecx,0x20
c00037ed:	e8 f8 e3 ff ff       	call   c0001bea <mem_cpy>
c00037f2:	31 d2                	xor    edx,edx
c00037f4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037f8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037fd:	83 c0 2c             	add    eax,0x2c
c0003800:	f7 f1                	div    ecx
c0003802:	c1 e0 05             	shl    eax,0x5
c0003805:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003809:	77 70                	ja     c000387b <load_xdir+0x12a>
c000380b:	bd 40 00 00 00       	mov    ebp,0x40
c0003810:	31 d2                	xor    edx,edx
c0003812:	89 f0                	mov    eax,esi
c0003814:	e8 06 fe ff ff       	call   c000361f <dir_next>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	83 f8 04             	cmp    eax,0x4
c000381e:	74 5b                	je     c000387b <load_xdir+0x12a>
c0003820:	85 c0                	test   eax,eax
c0003822:	75 5c                	jne    c0003880 <load_xdir+0x12f>
c0003824:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003827:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000382a:	8b 06                	mov    eax,DWORD PTR [esi]
c000382c:	e8 18 eb ff ff       	call   c0002349 <move_window>
c0003831:	89 c3                	mov    ebx,eax
c0003833:	85 c0                	test   eax,eax
c0003835:	75 49                	jne    c0003880 <load_xdir+0x12f>
c0003837:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000383a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000383d:	75 3c                	jne    c000387b <load_xdir+0x12a>
c000383f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003845:	77 0d                	ja     c0003854 <load_xdir+0x103>
c0003847:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000384a:	b9 20 00 00 00       	mov    ecx,0x20
c000384f:	e8 96 e3 ff ff       	call   c0001bea <mem_cpy>
c0003854:	83 c5 20             	add    ebp,0x20
c0003857:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000385b:	77 b3                	ja     c0003810 <load_xdir+0xbf>
c000385d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003863:	77 1b                	ja     c0003880 <load_xdir+0x12f>
c0003865:	89 f8                	mov    eax,edi
c0003867:	e8 cd e7 ff ff       	call   c0002039 <xdir_sum>
c000386c:	89 c1                	mov    ecx,eax
c000386e:	8d 47 02             	lea    eax,[edi+0x2]
c0003871:	e8 f5 e2 ff ff       	call   c0001b6b <ld_word>
c0003876:	66 39 c1             	cmp    cx,ax
c0003879:	74 05                	je     c0003880 <load_xdir+0x12f>
c000387b:	bb 02 00 00 00       	mov    ebx,0x2
c0003880:	83 c4 1c             	add    esp,0x1c
c0003883:	89 d8                	mov    eax,ebx
c0003885:	5b                   	pop    ebx
c0003886:	5e                   	pop    esi
c0003887:	5f                   	pop    edi
c0003888:	5d                   	pop    ebp
c0003889:	c3                   	ret    

c000388a <load_obj_xdir>:
c000388a:	53                   	push   ebx
c000388b:	89 c3                	mov    ebx,eax
c000388d:	83 ec 08             	sub    esp,0x8
c0003890:	8b 02                	mov    eax,DWORD PTR [edx]
c0003892:	89 03                	mov    DWORD PTR [ebx],eax
c0003894:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003897:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000389a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000389d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00038a0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00038a3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00038aa:	30 c0                	xor    al,al
c00038ac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038b3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038b6:	89 d8                	mov    eax,ebx
c00038b8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038bb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038be:	e8 04 f8 ff ff       	call   c00030c7 <dir_sdi>
c00038c3:	85 c0                	test   eax,eax
c00038c5:	75 0b                	jne    c00038d2 <load_obj_xdir+0x48>
c00038c7:	89 d8                	mov    eax,ebx
c00038c9:	83 c4 08             	add    esp,0x8
c00038cc:	5b                   	pop    ebx
c00038cd:	e9 7f fe ff ff       	jmp    c0003751 <load_xdir>
c00038d2:	83 c4 08             	add    esp,0x8
c00038d5:	5b                   	pop    ebx
c00038d6:	c3                   	ret    

c00038d7 <dir_read>:
c00038d7:	55                   	push   ebp
c00038d8:	bd 04 00 00 00       	mov    ebp,0x4
c00038dd:	57                   	push   edi
c00038de:	56                   	push   esi
c00038df:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e4:	53                   	push   ebx
c00038e5:	89 c3                	mov    ebx,eax
c00038e7:	83 ec 1c             	sub    esp,0x1c
c00038ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ee:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038f5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038f8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038fb:	89 c8                	mov    eax,ecx
c00038fd:	09 d0                	or     eax,edx
c00038ff:	0f 84 25 01 00 00    	je     c0003a2a <dir_read+0x153>
c0003905:	89 f8                	mov    eax,edi
c0003907:	e8 3d ea ff ff       	call   c0002349 <move_window>
c000390c:	89 c5                	mov    ebp,eax
c000390e:	85 c0                	test   eax,eax
c0003910:	0f 85 23 01 00 00    	jne    c0003a39 <dir_read+0x162>
c0003916:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003919:	8a 0a                	mov    cl,BYTE PTR [edx]
c000391b:	84 c9                	test   cl,cl
c000391d:	0f 84 11 01 00 00    	je     c0003a34 <dir_read+0x15d>
c0003923:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003926:	75 48                	jne    c0003970 <dir_read+0x99>
c0003928:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000392d:	74 10                	je     c000393f <dir_read+0x68>
c000392f:	80 f9 83             	cmp    cl,0x83
c0003932:	0f 85 dd 00 00 00    	jne    c0003a15 <dir_read+0x13e>
c0003938:	31 ed                	xor    ebp,ebp
c000393a:	e9 08 01 00 00       	jmp    c0003a47 <dir_read+0x170>
c000393f:	80 f9 85             	cmp    cl,0x85
c0003942:	0f 85 cd 00 00 00    	jne    c0003a15 <dir_read+0x13e>
c0003948:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000394b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000394e:	89 d8                	mov    eax,ebx
c0003950:	e8 fc fd ff ff       	call   c0003751 <load_xdir>
c0003955:	89 c5                	mov    ebp,eax
c0003957:	85 c0                	test   eax,eax
c0003959:	0f 85 da 00 00 00    	jne    c0003a39 <dir_read+0x162>
c000395f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003962:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003965:	83 e0 3f             	and    eax,0x3f
c0003968:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000396b:	e9 d7 00 00 00       	jmp    c0003a47 <dir_read+0x170>
c0003970:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003973:	83 e0 3f             	and    eax,0x3f
c0003976:	80 f9 2e             	cmp    cl,0x2e
c0003979:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000397d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003980:	0f 84 8a 00 00 00    	je     c0003a10 <dir_read+0x139>
c0003986:	80 f9 e5             	cmp    cl,0xe5
c0003989:	0f 84 81 00 00 00    	je     c0003a10 <dir_read+0x139>
c000398f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003993:	83 e0 1f             	and    eax,0x1f
c0003996:	83 f8 08             	cmp    eax,0x8
c0003999:	0f 94 c0             	sete   al
c000399c:	0f b6 c0             	movzx  eax,al
c000399f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00039a3:	75 6b                	jne    c0003a10 <dir_read+0x139>
c00039a5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00039aa:	75 44                	jne    c00039f0 <dir_read+0x119>
c00039ac:	f6 c1 40             	test   cl,0x40
c00039af:	74 12                	je     c00039c3 <dir_read+0xec>
c00039b1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039b4:	83 e1 bf             	and    ecx,0xffffffbf
c00039b7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039bb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039be:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039c1:	eb 06                	jmp    c00039c9 <dir_read+0xf2>
c00039c3:	89 f0                	mov    eax,esi
c00039c5:	38 c8                	cmp    al,cl
c00039c7:	75 47                	jne    c0003a10 <dir_read+0x139>
c00039c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039cd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039d2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039d5:	75 3e                	jne    c0003a15 <dir_read+0x13e>
c00039d7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039db:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039de:	e8 8a e4 ff ff       	call   c0001e6d <pick_lfn>
c00039e3:	85 c0                	test   eax,eax
c00039e5:	74 2e                	je     c0003a15 <dir_read+0x13e>
c00039e7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039eb:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039ee:	eb 25                	jmp    c0003a15 <dir_read+0x13e>
c00039f0:	89 f0                	mov    eax,esi
c00039f2:	84 c0                	test   al,al
c00039f4:	75 11                	jne    c0003a07 <dir_read+0x130>
c00039f6:	89 d0                	mov    eax,edx
c00039f8:	e8 2a e6 ff ff       	call   c0002027 <sum_sfn>
c00039fd:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003a01:	0f 84 31 ff ff ff    	je     c0003938 <dir_read+0x61>
c0003a07:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003a0e:	eb 37                	jmp    c0003a47 <dir_read+0x170>
c0003a10:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a15:	31 d2                	xor    edx,edx
c0003a17:	89 d8                	mov    eax,ebx
c0003a19:	e8 01 fc ff ff       	call   c000361f <dir_next>
c0003a1e:	89 c5                	mov    ebp,eax
c0003a20:	85 c0                	test   eax,eax
c0003a22:	0f 84 cd fe ff ff    	je     c00038f5 <dir_read+0x1e>
c0003a28:	eb 0f                	jmp    c0003a39 <dir_read+0x162>
c0003a2a:	85 ed                	test   ebp,ebp
c0003a2c:	0f 84 06 ff ff ff    	je     c0003938 <dir_read+0x61>
c0003a32:	eb 05                	jmp    c0003a39 <dir_read+0x162>
c0003a34:	bd 04 00 00 00       	mov    ebp,0x4
c0003a39:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a47:	83 c4 1c             	add    esp,0x1c
c0003a4a:	89 e8                	mov    eax,ebp
c0003a4c:	5b                   	pop    ebx
c0003a4d:	5e                   	pop    esi
c0003a4e:	5f                   	pop    edi
c0003a4f:	5d                   	pop    ebp
c0003a50:	c3                   	ret    

c0003a51 <dir_alloc>:
c0003a51:	55                   	push   ebp
c0003a52:	89 d5                	mov    ebp,edx
c0003a54:	57                   	push   edi
c0003a55:	31 d2                	xor    edx,edx
c0003a57:	56                   	push   esi
c0003a58:	53                   	push   ebx
c0003a59:	89 c3                	mov    ebx,eax
c0003a5b:	83 ec 0c             	sub    esp,0xc
c0003a5e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a60:	e8 62 f6 ff ff       	call   c00030c7 <dir_sdi>
c0003a65:	85 c0                	test   eax,eax
c0003a67:	75 4e                	jne    c0003ab7 <dir_alloc+0x66>
c0003a69:	31 f6                	xor    esi,esi
c0003a6b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a6e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a71:	89 f8                	mov    eax,edi
c0003a73:	e8 d1 e8 ff ff       	call   c0002349 <move_window>
c0003a78:	85 c0                	test   eax,eax
c0003a7a:	75 3b                	jne    c0003ab7 <dir_alloc+0x66>
c0003a7c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a7f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a82:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a84:	75 07                	jne    c0003a8d <dir_alloc+0x3c>
c0003a86:	f7 d2                	not    edx
c0003a88:	c0 ea 07             	shr    dl,0x7
c0003a8b:	eb 0d                	jmp    c0003a9a <dir_alloc+0x49>
c0003a8d:	84 d2                	test   dl,dl
c0003a8f:	0f 94 c1             	sete   cl
c0003a92:	80 fa e5             	cmp    dl,0xe5
c0003a95:	0f 94 c2             	sete   dl
c0003a98:	09 ca                	or     edx,ecx
c0003a9a:	84 d2                	test   dl,dl
c0003a9c:	74 07                	je     c0003aa5 <dir_alloc+0x54>
c0003a9e:	46                   	inc    esi
c0003a9f:	39 ee                	cmp    esi,ebp
c0003aa1:	75 04                	jne    c0003aa7 <dir_alloc+0x56>
c0003aa3:	eb 1c                	jmp    c0003ac1 <dir_alloc+0x70>
c0003aa5:	31 f6                	xor    esi,esi
c0003aa7:	ba 01 00 00 00       	mov    edx,0x1
c0003aac:	89 d8                	mov    eax,ebx
c0003aae:	e8 6c fb ff ff       	call   c000361f <dir_next>
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	74 b4                	je     c0003a6b <dir_alloc+0x1a>
c0003ab7:	83 f8 04             	cmp    eax,0x4
c0003aba:	75 05                	jne    c0003ac1 <dir_alloc+0x70>
c0003abc:	b8 07 00 00 00       	mov    eax,0x7
c0003ac1:	83 c4 0c             	add    esp,0xc
c0003ac4:	5b                   	pop    ebx
c0003ac5:	5e                   	pop    esi
c0003ac6:	5f                   	pop    edi
c0003ac7:	5d                   	pop    ebp
c0003ac8:	c3                   	ret    

c0003ac9 <store_xdir>:
c0003ac9:	55                   	push   ebp
c0003aca:	57                   	push   edi
c0003acb:	89 c7                	mov    edi,eax
c0003acd:	56                   	push   esi
c0003ace:	53                   	push   ebx
c0003acf:	83 ec 0c             	sub    esp,0xc
c0003ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ad4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ad7:	89 e8                	mov    eax,ebp
c0003ad9:	e8 5b e5 ff ff       	call   c0002039 <xdir_sum>
c0003ade:	0f b7 d0             	movzx  edx,ax
c0003ae1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ae4:	e8 f4 e0 ff ff       	call   c0001bdd <st_word>
c0003ae9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003aed:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003af0:	89 f8                	mov    eax,edi
c0003af2:	e8 d0 f5 ff ff       	call   c00030c7 <dir_sdi>
c0003af7:	89 c6                	mov    esi,eax
c0003af9:	85 f6                	test   esi,esi
c0003afb:	75 3d                	jne    c0003b3a <store_xdir+0x71>
c0003afd:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003b00:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003b03:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b05:	e8 3f e8 ff ff       	call   c0002349 <move_window>
c0003b0a:	89 c6                	mov    esi,eax
c0003b0c:	85 c0                	test   eax,eax
c0003b0e:	75 2a                	jne    c0003b3a <store_xdir+0x71>
c0003b10:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b13:	b9 20 00 00 00       	mov    ecx,0x20
c0003b18:	89 ea                	mov    edx,ebp
c0003b1a:	e8 cb e0 ff ff       	call   c0001bea <mem_cpy>
c0003b1f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b21:	85 db                	test   ebx,ebx
c0003b23:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b27:	74 11                	je     c0003b3a <store_xdir+0x71>
c0003b29:	31 d2                	xor    edx,edx
c0003b2b:	89 f8                	mov    eax,edi
c0003b2d:	83 c5 20             	add    ebp,0x20
c0003b30:	e8 ea fa ff ff       	call   c000361f <dir_next>
c0003b35:	4b                   	dec    ebx
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	eb bf                	jmp    c0003af9 <store_xdir+0x30>
c0003b3a:	89 f0                	mov    eax,esi
c0003b3c:	83 fe 02             	cmp    esi,0x2
c0003b3f:	76 05                	jbe    c0003b46 <store_xdir+0x7d>
c0003b41:	b8 02 00 00 00       	mov    eax,0x2
c0003b46:	83 c4 0c             	add    esp,0xc
c0003b49:	5b                   	pop    ebx
c0003b4a:	5e                   	pop    esi
c0003b4b:	5f                   	pop    edi
c0003b4c:	5d                   	pop    ebp
c0003b4d:	c3                   	ret    

c0003b4e <dir_remove>:
c0003b4e:	57                   	push   edi
c0003b4f:	56                   	push   esi
c0003b50:	53                   	push   ebx
c0003b51:	89 c3                	mov    ebx,eax
c0003b53:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b56:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b58:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b5b:	83 fa ff             	cmp    edx,0xffffffff
c0003b5e:	74 09                	je     c0003b69 <dir_remove+0x1b>
c0003b60:	e8 62 f5 ff ff       	call   c00030c7 <dir_sdi>
c0003b65:	85 c0                	test   eax,eax
c0003b67:	75 41                	jne    c0003baa <dir_remove+0x5c>
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f0                	mov    eax,esi
c0003b71:	e8 d3 e7 ff ff       	call   c0002349 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 26                	jne    c0003ba0 <dir_remove+0x52>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b80:	75 05                	jne    c0003b87 <dir_remove+0x39>
c0003b82:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b85:	eb 03                	jmp    c0003b8a <dir_remove+0x3c>
c0003b87:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b8a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b8e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b91:	73 17                	jae    c0003baa <dir_remove+0x5c>
c0003b93:	31 d2                	xor    edx,edx
c0003b95:	89 d8                	mov    eax,ebx
c0003b97:	e8 83 fa ff ff       	call   c000361f <dir_next>
c0003b9c:	85 c0                	test   eax,eax
c0003b9e:	74 c9                	je     c0003b69 <dir_remove+0x1b>
c0003ba0:	83 f8 04             	cmp    eax,0x4
c0003ba3:	75 05                	jne    c0003baa <dir_remove+0x5c>
c0003ba5:	b8 02 00 00 00       	mov    eax,0x2
c0003baa:	5b                   	pop    ebx
c0003bab:	5e                   	pop    esi
c0003bac:	5f                   	pop    edi
c0003bad:	c3                   	ret    

c0003bae <create_name>:
c0003bae:	55                   	push   ebp
c0003baf:	89 d5                	mov    ebp,edx
c0003bb1:	57                   	push   edi
c0003bb2:	89 c7                	mov    edi,eax
c0003bb4:	56                   	push   esi
c0003bb5:	31 f6                	xor    esi,esi
c0003bb7:	53                   	push   ebx
c0003bb8:	83 ec 3c             	sub    esp,0x3c
c0003bbb:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bc1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bce:	e8 72 e0 ff ff       	call   c0001c45 <tchar2uni>
c0003bd3:	89 c3                	mov    ebx,eax
c0003bd5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bd8:	75 0a                	jne    c0003be4 <create_name+0x36>
c0003bda:	b8 06 00 00 00       	mov    eax,0x6
c0003bdf:	e9 9e 02 00 00       	jmp    c0003e82 <create_name+0x2d4>
c0003be4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003be9:	76 0c                	jbe    c0003bf7 <create_name+0x49>
c0003beb:	c1 e8 10             	shr    eax,0x10
c0003bee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bf2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bf6:	46                   	inc    esi
c0003bf7:	66 83 fb 1f          	cmp    bx,0x1f
c0003bfb:	76 4f                	jbe    c0003c4c <create_name+0x9e>
c0003bfd:	66 83 fb 5c          	cmp    bx,0x5c
c0003c01:	74 35                	je     c0003c38 <create_name+0x8a>
c0003c03:	66 83 fb 2f          	cmp    bx,0x2f
c0003c07:	74 2f                	je     c0003c38 <create_name+0x8a>
c0003c09:	66 83 fb 7f          	cmp    bx,0x7f
c0003c0d:	77 11                	ja     c0003c20 <create_name+0x72>
c0003c0f:	0f b7 d3             	movzx  edx,bx
c0003c12:	b8 b2 40 02 c0       	mov    eax,0xc00240b2
c0003c17:	e8 11 e0 ff ff       	call   c0001c2d <chk_chr>
c0003c1c:	85 c0                	test   eax,eax
c0003c1e:	75 ba                	jne    c0003bda <create_name+0x2c>
c0003c20:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c26:	77 b2                	ja     c0003bda <create_name+0x2c>
c0003c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c2c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c30:	46                   	inc    esi
c0003c31:	eb 97                	jmp    c0003bca <create_name+0x1c>
c0003c33:	40                   	inc    eax
c0003c34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c3e:	80 fa 2f             	cmp    dl,0x2f
c0003c41:	74 f0                	je     c0003c33 <create_name+0x85>
c0003c43:	80 fa 5c             	cmp    dl,0x5c
c0003c46:	74 eb                	je     c0003c33 <create_name+0x85>
c0003c48:	31 db                	xor    ebx,ebx
c0003c4a:	eb 02                	jmp    c0003c4e <create_name+0xa0>
c0003c4c:	b3 04                	mov    bl,0x4
c0003c4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c52:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c55:	85 f6                	test   esi,esi
c0003c57:	74 18                	je     c0003c71 <create_name+0xc3>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c62:	66 83 f8 20          	cmp    ax,0x20
c0003c66:	74 06                	je     c0003c6e <create_name+0xc0>
c0003c68:	66 83 f8 2e          	cmp    ax,0x2e
c0003c6c:	75 03                	jne    c0003c71 <create_name+0xc3>
c0003c6e:	4e                   	dec    esi
c0003c6f:	eb e4                	jmp    c0003c55 <create_name+0xa7>
c0003c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c75:	31 ed                	xor    ebp,ebp
c0003c77:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c7d:	85 f6                	test   esi,esi
c0003c7f:	0f 84 55 ff ff ff    	je     c0003bda <create_name+0x2c>
c0003c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c89:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c8c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c90:	66 83 f8 20          	cmp    ax,0x20
c0003c94:	75 04                	jne    c0003c9a <create_name+0xec>
c0003c96:	89 d5                	mov    ebp,edx
c0003c98:	eb eb                	jmp    c0003c85 <create_name+0xd7>
c0003c9a:	85 ed                	test   ebp,ebp
c0003c9c:	75 06                	jne    c0003ca4 <create_name+0xf6>
c0003c9e:	66 83 f8 2e          	cmp    ax,0x2e
c0003ca2:	75 08                	jne    c0003cac <create_name+0xfe>
c0003ca4:	83 cb 03             	or     ebx,0x3
c0003ca7:	eb 03                	jmp    c0003cac <create_name+0xfe>
c0003ca9:	4e                   	dec    esi
c0003caa:	74 0c                	je     c0003cb8 <create_name+0x10a>
c0003cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cb0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003cb6:	75 f1                	jne    c0003ca9 <create_name+0xfb>
c0003cb8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cbd:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cc0:	ba 20 00 00 00       	mov    edx,0x20
c0003cc5:	e8 35 df ff ff       	call   c0001bff <mem_set>
c0003cca:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cd2:	31 c9                	xor    ecx,ecx
c0003cd4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cd9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003ce8:	66 85 ed             	test   bp,bp
c0003ceb:	0f 84 30 01 00 00    	je     c0003e21 <create_name+0x273>
c0003cf1:	66 83 fd 20          	cmp    bp,0x20
c0003cf5:	74 10                	je     c0003d07 <create_name+0x159>
c0003cf7:	66 83 fd 2e          	cmp    bp,0x2e
c0003cfb:	75 13                	jne    c0003d10 <create_name+0x162>
c0003cfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d01:	0f 84 6b 01 00 00    	je     c0003e72 <create_name+0x2c4>
c0003d07:	83 cb 03             	or     ebx,0x3
c0003d0a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003d0e:	eb c9                	jmp    c0003cd9 <create_name+0x12b>
c0003d10:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d14:	73 0b                	jae    c0003d21 <create_name+0x173>
c0003d16:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d1a:	75 47                	jne    c0003d63 <create_name+0x1b5>
c0003d1c:	e9 51 01 00 00       	jmp    c0003e72 <create_name+0x2c4>
c0003d21:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d26:	75 10                	jne    c0003d38 <create_name+0x18a>
c0003d28:	83 cb 03             	or     ebx,0x3
c0003d2b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d33:	e9 e9 00 00 00       	jmp    c0003e21 <create_name+0x273>
c0003d38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d3c:	74 0d                	je     c0003d4b <create_name+0x19d>
c0003d3e:	83 cb 03             	or     ebx,0x3
c0003d41:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d45:	0f 87 d6 00 00 00    	ja     c0003e21 <create_name+0x273>
c0003d4b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d50:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d54:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d5c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d61:	eb a7                	jmp    c0003d0a <create_name+0x15c>
c0003d63:	66 83 fd 7f          	cmp    bp,0x7f
c0003d67:	76 68                	jbe    c0003dd1 <create_name+0x223>
c0003d69:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d6d:	88 da                	mov    dl,bl
c0003d6f:	83 ca 02             	or     edx,0x2
c0003d72:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d76:	50                   	push   eax
c0003d77:	50                   	push   eax
c0003d78:	68 b5 01 00 00       	push   0x1b5
c0003d7d:	55                   	push   ebp
c0003d7e:	e8 81 48 00 00       	call   c0008604 <ff_uni2oem>
c0003d83:	83 c4 10             	add    esp,0x10
c0003d86:	89 c5                	mov    ebp,eax
c0003d88:	a8 80                	test   al,0x80
c0003d8a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d8e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d92:	74 0c                	je     c0003da0 <create_name+0x1f2>
c0003d94:	83 e5 7f             	and    ebp,0x7f
c0003d97:	0f b6 ad 00 40 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc000]
c0003d9e:	eb 2a                	jmp    c0003dca <create_name+0x21c>
c0003da0:	66 3d ff 00          	cmp    ax,0xff
c0003da4:	76 24                	jbe    c0003dca <create_name+0x21c>
c0003da6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003daa:	48                   	dec    eax
c0003dab:	39 c8                	cmp    eax,ecx
c0003dad:	77 0c                	ja     c0003dbb <create_name+0x20d>
c0003daf:	83 cb 03             	or     ebx,0x3
c0003db2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003db6:	e9 4f ff ff ff       	jmp    c0003d0a <create_name+0x15c>
c0003dbb:	89 e8                	mov    eax,ebp
c0003dbd:	88 d3                	mov    bl,dl
c0003dbf:	66 c1 e8 08          	shr    ax,0x8
c0003dc3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003dc7:	41                   	inc    ecx
c0003dc8:	eb 4b                	jmp    c0003e15 <create_name+0x267>
c0003dca:	88 d3                	mov    bl,dl
c0003dcc:	66 85 ed             	test   bp,bp
c0003dcf:	74 19                	je     c0003dea <create_name+0x23c>
c0003dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dd5:	0f b7 d5             	movzx  edx,bp
c0003dd8:	b8 bb 40 02 c0       	mov    eax,0xc00240bb
c0003ddd:	e8 4b de ff ff       	call   c0001c2d <chk_chr>
c0003de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003de6:	85 c0                	test   eax,eax
c0003de8:	74 0a                	je     c0003df4 <create_name+0x246>
c0003dea:	83 cb 03             	or     ebx,0x3
c0003ded:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003df2:	eb 21                	jmp    c0003e15 <create_name+0x267>
c0003df4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 07                	ja     c0003e04 <create_name+0x256>
c0003dfd:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003e02:	eb 11                	jmp    c0003e15 <create_name+0x267>
c0003e04:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003e07:	66 83 f8 19          	cmp    ax,0x19
c0003e0b:	77 08                	ja     c0003e15 <create_name+0x267>
c0003e0d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e12:	83 ed 20             	sub    ebp,0x20
c0003e15:	89 e8                	mov    eax,ebp
c0003e17:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e1b:	41                   	inc    ecx
c0003e1c:	e9 e9 fe ff ff       	jmp    c0003d0a <create_name+0x15c>
c0003e21:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e25:	75 04                	jne    c0003e2b <create_name+0x27d>
c0003e27:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e2b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e30:	75 05                	jne    c0003e37 <create_name+0x289>
c0003e32:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e37:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e3b:	83 e0 0c             	and    eax,0xc
c0003e3e:	3c 0c                	cmp    al,0xc
c0003e40:	74 0b                	je     c0003e4d <create_name+0x29f>
c0003e42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e46:	83 e0 03             	and    eax,0x3
c0003e49:	3c 03                	cmp    al,0x3
c0003e4b:	75 05                	jne    c0003e52 <create_name+0x2a4>
c0003e4d:	83 cb 02             	or     ebx,0x2
c0003e50:	eb 19                	jmp    c0003e6b <create_name+0x2bd>
c0003e52:	f6 c3 02             	test   bl,0x2
c0003e55:	75 14                	jne    c0003e6b <create_name+0x2bd>
c0003e57:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e5c:	74 03                	je     c0003e61 <create_name+0x2b3>
c0003e5e:	83 cb 10             	or     ebx,0x10
c0003e61:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e66:	74 03                	je     c0003e6b <create_name+0x2bd>
c0003e68:	83 cb 08             	or     ebx,0x8
c0003e6b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e6e:	31 c0                	xor    eax,eax
c0003e70:	eb 10                	jmp    c0003e82 <create_name+0x2d4>
c0003e72:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e77:	0f 85 ce fe ff ff    	jne    c0003d4b <create_name+0x19d>
c0003e7d:	e9 a6 fe ff ff       	jmp    c0003d28 <create_name+0x17a>
c0003e82:	83 c4 3c             	add    esp,0x3c
c0003e85:	5b                   	pop    ebx
c0003e86:	5e                   	pop    esi
c0003e87:	5f                   	pop    edi
c0003e88:	5d                   	pop    ebp
c0003e89:	c3                   	ret    

c0003e8a <xname_sum>:
c0003e8a:	56                   	push   esi
c0003e8b:	53                   	push   ebx
c0003e8c:	89 c6                	mov    esi,eax
c0003e8e:	51                   	push   ecx
c0003e8f:	31 db                	xor    ebx,ebx
c0003e91:	83 c6 02             	add    esi,0x2
c0003e94:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e98:	66 85 c0             	test   ax,ax
c0003e9b:	74 1f                	je     c0003ebc <xname_sum+0x32>
c0003e9d:	83 ec 0c             	sub    esp,0xc
c0003ea0:	66 d1 cb             	ror    bx,1
c0003ea3:	50                   	push   eax
c0003ea4:	e8 67 48 00 00       	call   c0008710 <ff_wtoupper>
c0003ea9:	83 c4 10             	add    esp,0x10
c0003eac:	0f b6 d0             	movzx  edx,al
c0003eaf:	66 c1 e8 08          	shr    ax,0x8
c0003eb3:	01 d3                	add    ebx,edx
c0003eb5:	66 d1 cb             	ror    bx,1
c0003eb8:	01 c3                	add    ebx,eax
c0003eba:	eb d5                	jmp    c0003e91 <xname_sum+0x7>
c0003ebc:	89 d8                	mov    eax,ebx
c0003ebe:	5a                   	pop    edx
c0003ebf:	5b                   	pop    ebx
c0003ec0:	5e                   	pop    esi
c0003ec1:	c3                   	ret    

c0003ec2 <create_xdir>:
c0003ec2:	55                   	push   ebp
c0003ec3:	b9 40 00 00 00       	mov    ecx,0x40
c0003ec8:	57                   	push   edi
c0003ec9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ece:	56                   	push   esi
c0003ecf:	31 ff                	xor    edi,edi
c0003ed1:	53                   	push   ebx
c0003ed2:	be 40 00 00 00       	mov    esi,0x40
c0003ed7:	89 c3                	mov    ebx,eax
c0003ed9:	83 ec 1c             	sub    esp,0x1c
c0003edc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ee0:	31 d2                	xor    edx,edx
c0003ee2:	e8 18 dd ff ff       	call   c0001bff <mem_set>
c0003ee7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eea:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003eee:	31 c9                	xor    ecx,ecx
c0003ef0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ef3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ef7:	83 c6 02             	add    esi,0x2
c0003efa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003efe:	66 85 ed             	test   bp,bp
c0003f01:	74 12                	je     c0003f15 <create_xdir+0x53>
c0003f03:	0f b6 c1             	movzx  eax,cl
c0003f06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f0a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003f0e:	66 83 fd 01          	cmp    bp,0x1
c0003f12:	80 d9 ff             	sbb    cl,0xff
c0003f15:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f18:	0f b7 d5             	movzx  edx,bp
c0003f1b:	83 c6 02             	add    esi,0x2
c0003f1e:	e8 ba dc ff ff       	call   c0001bdd <st_word>
c0003f23:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f29:	75 d3                	jne    c0003efe <create_xdir+0x3c>
c0003f2b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f32:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f36:	0f b6 c1             	movzx  eax,cl
c0003f39:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f3e:	74 07                	je     c0003f47 <create_xdir+0x85>
c0003f40:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f45:	eb a9                	jmp    c0003ef0 <create_xdir+0x2e>
c0003f47:	8d 47 02             	lea    eax,[edi+0x2]
c0003f4a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f4d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f50:	89 d0                	mov    eax,edx
c0003f52:	e8 33 ff ff ff       	call   c0003e8a <xname_sum>
c0003f57:	83 c4 1c             	add    esp,0x1c
c0003f5a:	0f b7 d0             	movzx  edx,ax
c0003f5d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f60:	5b                   	pop    ebx
c0003f61:	5e                   	pop    esi
c0003f62:	5f                   	pop    edi
c0003f63:	5d                   	pop    ebp
c0003f64:	e9 74 dc ff ff       	jmp    c0001bdd <st_word>

c0003f69 <cmp_lfn>:
c0003f69:	55                   	push   ebp
c0003f6a:	57                   	push   edi
c0003f6b:	89 d7                	mov    edi,edx
c0003f6d:	56                   	push   esi
c0003f6e:	53                   	push   ebx
c0003f6f:	83 ec 1c             	sub    esp,0x1c
c0003f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f76:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f79:	e8 ed db ff ff       	call   c0001b6b <ld_word>
c0003f7e:	66 85 c0             	test   ax,ax
c0003f81:	74 07                	je     c0003f8a <cmp_lfn+0x21>
c0003f83:	31 c0                	xor    eax,eax
c0003f85:	e9 9a 00 00 00       	jmp    c0004024 <cmp_lfn+0xbb>
c0003f8a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f8c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f91:	83 e3 3f             	and    ebx,0x3f
c0003f94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f9c:	4b                   	dec    ebx
c0003f9d:	6b db 0d             	imul   ebx,ebx,0xd
c0003fa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fa4:	0f b6 80 80 40 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdbf80]
c0003fab:	01 f8                	add    eax,edi
c0003fad:	e8 b9 db ff ff       	call   c0001b6b <ld_word>
c0003fb2:	66 85 ed             	test   bp,bp
c0003fb5:	89 c6                	mov    esi,eax
c0003fb7:	74 3c                	je     c0003ff5 <cmp_lfn+0x8c>
c0003fb9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fbf:	77 c2                	ja     c0003f83 <cmp_lfn+0x1a>
c0003fc1:	83 ec 0c             	sub    esp,0xc
c0003fc4:	0f b7 c0             	movzx  eax,ax
c0003fc7:	50                   	push   eax
c0003fc8:	e8 43 47 00 00       	call   c0008710 <ff_wtoupper>
c0003fcd:	89 c5                	mov    ebp,eax
c0003fcf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fda:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fde:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fe1:	e8 2a 47 00 00       	call   c0008710 <ff_wtoupper>
c0003fe6:	83 c4 10             	add    esp,0x10
c0003fe9:	39 c5                	cmp    ebp,eax
c0003feb:	75 96                	jne    c0003f83 <cmp_lfn+0x1a>
c0003fed:	89 f5                	mov    ebp,esi
c0003fef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ff3:	eb 04                	jmp    c0003ff9 <cmp_lfn+0x90>
c0003ff5:	66 46                	inc    si
c0003ff7:	75 8a                	jne    c0003f83 <cmp_lfn+0x1a>
c0003ff9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ffd:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004002:	75 9c                	jne    c0003fa0 <cmp_lfn+0x37>
c0004004:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004007:	74 16                	je     c000401f <cmp_lfn+0xb6>
c0004009:	66 85 ed             	test   bp,bp
c000400c:	74 11                	je     c000401f <cmp_lfn+0xb6>
c000400e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004012:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004017:	0f 94 c0             	sete   al
c000401a:	0f b6 c0             	movzx  eax,al
c000401d:	eb 05                	jmp    c0004024 <cmp_lfn+0xbb>
c000401f:	b8 01 00 00 00       	mov    eax,0x1
c0004024:	83 c4 1c             	add    esp,0x1c
c0004027:	5b                   	pop    ebx
c0004028:	5e                   	pop    esi
c0004029:	5f                   	pop    edi
c000402a:	5d                   	pop    ebp
c000402b:	c3                   	ret    

c000402c <dir_find>:
c000402c:	55                   	push   ebp
c000402d:	31 d2                	xor    edx,edx
c000402f:	57                   	push   edi
c0004030:	56                   	push   esi
c0004031:	53                   	push   ebx
c0004032:	89 c3                	mov    ebx,eax
c0004034:	83 ec 1c             	sub    esp,0x1c
c0004037:	8b 30                	mov    esi,DWORD PTR [eax]
c0004039:	e8 89 f0 ff ff       	call   c00030c7 <dir_sdi>
c000403e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004041:	85 c0                	test   eax,eax
c0004043:	0f 85 9e 01 00 00    	jne    c00041e7 <dir_find+0x1bb>
c0004049:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000404c:	0f 85 8d 00 00 00    	jne    c00040df <dir_find+0xb3>
c0004052:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004055:	e8 30 fe ff ff       	call   c0003e8a <xname_sum>
c000405a:	89 c7                	mov    edi,eax
c000405c:	31 d2                	xor    edx,edx
c000405e:	89 d8                	mov    eax,ebx
c0004060:	e8 72 f8 ff ff       	call   c00038d7 <dir_read>
c0004065:	85 c0                	test   eax,eax
c0004067:	0f 85 5e 01 00 00    	jne    c00041cb <dir_find+0x19f>
c000406d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004070:	8d 41 24             	lea    eax,[ecx+0x24]
c0004073:	e8 f3 da ff ff       	call   c0001b6b <ld_word>
c0004078:	66 39 f8             	cmp    ax,di
c000407b:	75 df                	jne    c000405c <dir_find+0x30>
c000407d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004080:	31 ed                	xor    ebp,ebp
c0004082:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004086:	ba 40 00 00 00       	mov    edx,0x40
c000408b:	89 e9                	mov    ecx,ebp
c000408d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004091:	0f 84 42 01 00 00    	je     c00041d9 <dir_find+0x1ad>
c0004097:	f6 c2 1f             	test   dl,0x1f
c000409a:	75 03                	jne    c000409f <dir_find+0x73>
c000409c:	83 c2 02             	add    edx,0x2
c000409f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00040a3:	89 d0                	mov    eax,edx
c00040a5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00040a8:	e8 be da ff ff       	call   c0001b6b <ld_word>
c00040ad:	83 ec 0c             	sub    esp,0xc
c00040b0:	0f b7 c0             	movzx  eax,ax
c00040b3:	50                   	push   eax
c00040b4:	e8 57 46 00 00       	call   c0008710 <ff_wtoupper>
c00040b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040bd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040c0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040c7:	e8 44 46 00 00       	call   c0008710 <ff_wtoupper>
c00040cc:	83 c4 10             	add    esp,0x10
c00040cf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040d3:	75 87                	jne    c000405c <dir_find+0x30>
c00040d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040d9:	45                   	inc    ebp
c00040da:	83 c2 02             	add    edx,0x2
c00040dd:	eb ac                	jmp    c000408b <dir_find+0x5f>
c00040df:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040e6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040f0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040f3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040f6:	89 f0                	mov    eax,esi
c00040f8:	e8 4c e2 ff ff       	call   c0002349 <move_window>
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 c6 00 00 00    	jne    c00041cb <dir_find+0x19f>
c0004105:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004108:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000410b:	84 c9                	test   cl,cl
c000410d:	0f 84 bd 00 00 00    	je     c00041d0 <dir_find+0x1a4>
c0004113:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004116:	88 d0                	mov    al,dl
c0004118:	83 e0 3f             	and    eax,0x3f
c000411b:	80 f9 e5             	cmp    cl,0xe5
c000411e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004121:	0f 84 87 00 00 00    	je     c00041ae <dir_find+0x182>
c0004127:	80 e2 08             	and    dl,0x8
c000412a:	74 06                	je     c0004132 <dir_find+0x106>
c000412c:	3c 0f                	cmp    al,0xf
c000412e:	75 7e                	jne    c00041ae <dir_find+0x182>
c0004130:	eb 04                	jmp    c0004136 <dir_find+0x10a>
c0004132:	3c 0f                	cmp    al,0xf
c0004134:	75 4c                	jne    c0004182 <dir_find+0x156>
c0004136:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000413a:	75 7e                	jne    c00041ba <dir_find+0x18e>
c000413c:	f6 c1 40             	test   cl,0x40
c000413f:	74 12                	je     c0004153 <dir_find+0x127>
c0004141:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004144:	83 e1 bf             	and    ecx,0xffffffbf
c0004147:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000414b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000414e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004151:	eb 06                	jmp    c0004159 <dir_find+0x12d>
c0004153:	89 f8                	mov    eax,edi
c0004155:	38 c8                	cmp    al,cl
c0004157:	75 5c                	jne    c00041b5 <dir_find+0x189>
c0004159:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000415d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004162:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004165:	75 53                	jne    c00041ba <dir_find+0x18e>
c0004167:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000416b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000416e:	89 ea                	mov    edx,ebp
c0004170:	e8 f4 fd ff ff       	call   c0003f69 <cmp_lfn>
c0004175:	85 c0                	test   eax,eax
c0004177:	74 41                	je     c00041ba <dir_find+0x18e>
c0004179:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000417d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004180:	eb 38                	jmp    c00041ba <dir_find+0x18e>
c0004182:	89 f8                	mov    eax,edi
c0004184:	84 c0                	test   al,al
c0004186:	75 0d                	jne    c0004195 <dir_find+0x169>
c0004188:	89 e8                	mov    eax,ebp
c000418a:	e8 98 de ff ff       	call   c0002027 <sum_sfn>
c000418f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004193:	74 52                	je     c00041e7 <dir_find+0x1bb>
c0004195:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004199:	75 13                	jne    c00041ae <dir_find+0x182>
c000419b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000419e:	b9 0b 00 00 00       	mov    ecx,0xb
c00041a3:	89 e8                	mov    eax,ebp
c00041a5:	e8 60 da ff ff       	call   c0001c0a <mem_cmp>
c00041aa:	85 c0                	test   eax,eax
c00041ac:	74 39                	je     c00041e7 <dir_find+0x1bb>
c00041ae:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041b5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ba:	31 d2                	xor    edx,edx
c00041bc:	89 d8                	mov    eax,ebx
c00041be:	e8 5c f4 ff ff       	call   c000361f <dir_next>
c00041c3:	85 c0                	test   eax,eax
c00041c5:	0f 84 25 ff ff ff    	je     c00040f0 <dir_find+0xc4>
c00041cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041ce:	eb 17                	jmp    c00041e7 <dir_find+0x1bb>
c00041d0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041d7:	eb 0e                	jmp    c00041e7 <dir_find+0x1bb>
c00041d9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041dc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041e1:	0f 85 75 fe ff ff    	jne    c000405c <dir_find+0x30>
c00041e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041ea:	83 c4 1c             	add    esp,0x1c
c00041ed:	5b                   	pop    ebx
c00041ee:	5e                   	pop    esi
c00041ef:	5f                   	pop    edi
c00041f0:	5d                   	pop    ebp
c00041f1:	c3                   	ret    

c00041f2 <dir_register>:
c00041f2:	55                   	push   ebp
c00041f3:	57                   	push   edi
c00041f4:	56                   	push   esi
c00041f5:	be 06 00 00 00       	mov    esi,0x6
c00041fa:	53                   	push   ebx
c00041fb:	83 ec 6c             	sub    esp,0x6c
c00041fe:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004202:	0f 85 62 02 00 00    	jne    c000446a <dir_register+0x278>
c0004208:	8b 28                	mov    ebp,DWORD PTR [eax]
c000420a:	31 ff                	xor    edi,edi
c000420c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000420f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004214:	74 03                	je     c0004219 <dir_register+0x27>
c0004216:	47                   	inc    edi
c0004217:	eb f6                	jmp    c000420f <dir_register+0x1d>
c0004219:	89 c3                	mov    ebx,eax
c000421b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000421f:	0f 85 e1 00 00 00    	jne    c0004306 <dir_register+0x114>
c0004225:	83 c7 0e             	add    edi,0xe
c0004228:	b9 0f 00 00 00       	mov    ecx,0xf
c000422d:	89 f8                	mov    eax,edi
c000422f:	31 d2                	xor    edx,edx
c0004231:	f7 f1                	div    ecx
c0004233:	8d 50 02             	lea    edx,[eax+0x2]
c0004236:	89 c7                	mov    edi,eax
c0004238:	89 d8                	mov    eax,ebx
c000423a:	e8 12 f8 ff ff       	call   c0003a51 <dir_alloc>
c000423f:	89 c6                	mov    esi,eax
c0004241:	85 c0                	test   eax,eax
c0004243:	0f 85 21 02 00 00    	jne    c000446a <dir_register+0x278>
c0004249:	81 c7 01 00 00 08    	add    edi,0x8000001
c000424f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004252:	c1 e7 05             	shl    edi,0x5
c0004255:	29 f8                	sub    eax,edi
c0004257:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000425a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000425d:	a8 04                	test   al,0x4
c000425f:	0f 84 91 00 00 00    	je     c00042f6 <dir_register+0x104>
c0004265:	83 e0 fb             	and    eax,0xfffffffb
c0004268:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000426b:	89 d8                	mov    eax,ebx
c000426d:	e8 25 ec ff ff       	call   c0002e97 <fill_first_frag>
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 ee 01 00 00    	jne    c0004468 <dir_register+0x276>
c000427a:	83 c9 ff             	or     ecx,0xffffffff
c000427d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004280:	89 d8                	mov    eax,ebx
c0004282:	e8 db eb ff ff       	call   c0002e62 <fill_last_frag>
c0004287:	85 c0                	test   eax,eax
c0004289:	0f 85 d9 01 00 00    	jne    c0004468 <dir_register+0x276>
c000428f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004293:	74 61                	je     c00042f6 <dir_register+0x104>
c0004295:	89 da                	mov    edx,ebx
c0004297:	8d 44 24 14          	lea    eax,[esp+0x14]
c000429b:	e8 ea f5 ff ff       	call   c000388a <load_obj_xdir>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	0f 85 c0 01 00 00    	jne    c0004468 <dir_register+0x276>
c00042a8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00042ac:	31 c9                	xor    ecx,ecx
c00042ae:	c1 e2 09             	shl    edx,0x9
c00042b1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042b4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042b7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042ba:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042c0:	83 c0 38             	add    eax,0x38
c00042c3:	e8 1c d9 ff ff       	call   c0001be4 <st_qword>
c00042c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042cb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042ce:	83 c0 28             	add    eax,0x28
c00042d1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042d4:	e8 0b d9 ff ff       	call   c0001be4 <st_qword>
c00042d9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042dc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042df:	83 c8 01             	or     eax,0x1
c00042e2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042e9:	e8 db f7 ff ff       	call   c0003ac9 <store_xdir>
c00042ee:	85 c0                	test   eax,eax
c00042f0:	0f 85 72 01 00 00    	jne    c0004468 <dir_register+0x276>
c00042f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042fc:	e8 c1 fb ff ff       	call   c0003ec2 <create_xdir>
c0004301:	e9 64 01 00 00       	jmp    c000446a <dir_register+0x278>
c0004306:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004309:	b9 0c 00 00 00       	mov    ecx,0xc
c000430e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004312:	89 c2                	mov    edx,eax
c0004314:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004318:	e8 cd d8 ff ff       	call   c0001bea <mem_cpy>
c000431d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004322:	74 58                	je     c000437c <dir_register+0x18a>
c0004324:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004328:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004330:	83 ec 0c             	sub    esp,0xc
c0004333:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000433a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000433e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004342:	e8 24 dc ff ff       	call   c0001f6b <gen_numname>
c0004347:	89 d8                	mov    eax,ebx
c0004349:	e8 de fc ff ff       	call   c000402c <dir_find>
c000434e:	83 c4 10             	add    esp,0x10
c0004351:	89 c6                	mov    esi,eax
c0004353:	85 c0                	test   eax,eax
c0004355:	75 15                	jne    c000436c <dir_register+0x17a>
c0004357:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000435b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004360:	75 ce                	jne    c0004330 <dir_register+0x13e>
c0004362:	be 07 00 00 00       	mov    esi,0x7
c0004367:	e9 fe 00 00 00       	jmp    c000446a <dir_register+0x278>
c000436c:	83 f8 04             	cmp    eax,0x4
c000436f:	0f 85 f5 00 00 00    	jne    c000446a <dir_register+0x278>
c0004375:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004379:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000437c:	b9 01 00 00 00       	mov    ecx,0x1
c0004381:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004386:	74 0f                	je     c0004397 <dir_register+0x1a5>
c0004388:	b9 0d 00 00 00       	mov    ecx,0xd
c000438d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004390:	31 d2                	xor    edx,edx
c0004392:	f7 f1                	div    ecx
c0004394:	8d 48 01             	lea    ecx,[eax+0x1]
c0004397:	89 ca                	mov    edx,ecx
c0004399:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439d:	89 d8                	mov    eax,ebx
c000439f:	e8 ad f6 ff ff       	call   c0003a51 <dir_alloc>
c00043a4:	89 c6                	mov    esi,eax
c00043a6:	85 c0                	test   eax,eax
c00043a8:	0f 85 bc 00 00 00    	jne    c000446a <dir_register+0x278>
c00043ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b2:	49                   	dec    ecx
c00043b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043b7:	74 6a                	je     c0004423 <dir_register+0x231>
c00043b9:	89 c8                	mov    eax,ecx
c00043bb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043be:	c1 e0 05             	shl    eax,0x5
c00043c1:	29 c2                	sub    edx,eax
c00043c3:	89 d8                	mov    eax,ebx
c00043c5:	e8 fd ec ff ff       	call   c00030c7 <dir_sdi>
c00043ca:	89 c6                	mov    esi,eax
c00043cc:	85 c0                	test   eax,eax
c00043ce:	0f 85 96 00 00 00    	jne    c000446a <dir_register+0x278>
c00043d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043d8:	e8 4a dc ff ff       	call   c0002027 <sum_sfn>
c00043dd:	0f b6 f8             	movzx  edi,al
c00043e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043e6:	89 e8                	mov    eax,ebp
c00043e8:	e8 5c df ff ff       	call   c0002349 <move_window>
c00043ed:	89 c6                	mov    esi,eax
c00043ef:	85 c0                	test   eax,eax
c00043f1:	75 77                	jne    c000446a <dir_register+0x278>
c00043f3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043f8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043fb:	83 ec 0c             	sub    esp,0xc
c00043fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004401:	57                   	push   edi
c0004402:	e8 e0 da ff ff       	call   c0001ee7 <put_lfn>
c0004407:	31 d2                	xor    edx,edx
c0004409:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000440d:	89 d8                	mov    eax,ebx
c000440f:	e8 0b f2 ff ff       	call   c000361f <dir_next>
c0004414:	83 c4 10             	add    esp,0x10
c0004417:	89 c6                	mov    esi,eax
c0004419:	85 c0                	test   eax,eax
c000441b:	75 4d                	jne    c000446a <dir_register+0x278>
c000441d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004421:	75 bd                	jne    c00043e0 <dir_register+0x1ee>
c0004423:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004426:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004429:	89 e8                	mov    eax,ebp
c000442b:	e8 19 df ff ff       	call   c0002349 <move_window>
c0004430:	89 c6                	mov    esi,eax
c0004432:	85 c0                	test   eax,eax
c0004434:	75 34                	jne    c000446a <dir_register+0x278>
c0004436:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004439:	b9 20 00 00 00       	mov    ecx,0x20
c000443e:	31 d2                	xor    edx,edx
c0004440:	e8 ba d7 ff ff       	call   c0001bff <mem_set>
c0004445:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004448:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000444c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004451:	e8 94 d7 ff ff       	call   c0001bea <mem_cpy>
c0004456:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004459:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000445c:	83 e0 18             	and    eax,0x18
c000445f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004462:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004466:	eb 02                	jmp    c000446a <dir_register+0x278>
c0004468:	89 c6                	mov    esi,eax
c000446a:	83 c4 6c             	add    esp,0x6c
c000446d:	89 f0                	mov    eax,esi
c000446f:	5b                   	pop    ebx
c0004470:	5e                   	pop    esi
c0004471:	5f                   	pop    edi
c0004472:	5d                   	pop    ebp
c0004473:	c3                   	ret    

c0004474 <sync_fs>:
c0004474:	56                   	push   esi
c0004475:	53                   	push   ebx
c0004476:	53                   	push   ebx
c0004477:	89 c3                	mov    ebx,eax
c0004479:	e8 37 de ff ff       	call   c00022b5 <sync_window>
c000447e:	85 c0                	test   eax,eax
c0004480:	0f 85 b1 00 00 00    	jne    c0004537 <sync_fs+0xc3>
c0004486:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004489:	0f 85 8e 00 00 00    	jne    c000451d <sync_fs+0xa9>
c000448f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004493:	0f 85 84 00 00 00    	jne    c000451d <sync_fs+0xa9>
c0004499:	b9 00 02 00 00       	mov    ecx,0x200
c000449e:	8d 73 54             	lea    esi,[ebx+0x54]
c00044a1:	31 d2                	xor    edx,edx
c00044a3:	89 f0                	mov    eax,esi
c00044a5:	e8 55 d7 ff ff       	call   c0001bff <mem_set>
c00044aa:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044b0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044b5:	e8 23 d7 ff ff       	call   c0001bdd <st_word>
c00044ba:	ba 52 52 61 41       	mov    edx,0x41615252
c00044bf:	89 f0                	mov    eax,esi
c00044c1:	e8 1b d7 ff ff       	call   c0001be1 <st_dword>
c00044c6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044cc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044d1:	e8 0b d7 ff ff       	call   c0001be1 <st_dword>
c00044d6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044d9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044df:	e8 fd d6 ff ff       	call   c0001be1 <st_dword>
c00044e4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044e7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044ed:	e8 ef d6 ff ff       	call   c0001be1 <st_dword>
c00044f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044f5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044f8:	83 c0 01             	add    eax,0x1
c00044fb:	83 d2 00             	adc    edx,0x0
c00044fe:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004501:	83 ec 0c             	sub    esp,0xc
c0004504:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004507:	6a 01                	push   0x1
c0004509:	52                   	push   edx
c000450a:	50                   	push   eax
c000450b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000450f:	56                   	push   esi
c0004510:	50                   	push   eax
c0004511:	e8 20 d6 ff ff       	call   c0001b36 <disk_write>
c0004516:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000451a:	83 c4 20             	add    esp,0x20
c000451d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004521:	51                   	push   ecx
c0004522:	6a 00                	push   0x0
c0004524:	6a 00                	push   0x0
c0004526:	50                   	push   eax
c0004527:	e8 20 d6 ff ff       	call   c0001b4c <disk_ioctl>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	85 c0                	test   eax,eax
c0004531:	0f 95 c0             	setne  al
c0004534:	0f b6 c0             	movzx  eax,al
c0004537:	5a                   	pop    edx
c0004538:	5b                   	pop    ebx
c0004539:	5e                   	pop    esi
c000453a:	c3                   	ret    

c000453b <create_partition>:
c000453b:	55                   	push   ebp
c000453c:	0f b6 c0             	movzx  eax,al
c000453f:	57                   	push   edi
c0004540:	56                   	push   esi
c0004541:	53                   	push   ebx
c0004542:	83 ec 60             	sub    esp,0x60
c0004545:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004549:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000454d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004551:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004555:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004559:	50                   	push   eax
c000455a:	6a 01                	push   0x1
c000455c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004560:	e8 e7 d5 ff ff       	call   c0001b4c <disk_ioctl>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	85 c0                	test   eax,eax
c000456a:	74 0a                	je     c0004576 <create_partition+0x3b>
c000456c:	b8 01 00 00 00       	mov    eax,0x1
c0004571:	e9 67 05 00 00       	jmp    c0004add <create_partition+0x5a2>
c0004576:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000457a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000457e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004582:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004586:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000458b:	0f 86 ed 03 00 00    	jbe    c000497e <create_partition+0x443>
c0004591:	83 c0 df             	add    eax,0xffffffdf
c0004594:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000459c:	83 d2 ff             	adc    edx,0xffffffff
c000459f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00045a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00045a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00045af:	83 c0 bd             	add    eax,0xffffffbd
c00045b2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045b9:	83 d2 ff             	adc    edx,0xffffffff
c00045bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045c4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045cc:	be 22 00 00 00       	mov    esi,0x22
c00045d1:	31 ff                	xor    edi,edi
c00045d3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045db:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045e3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045ef:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f5:	75 0e                	jne    c0004605 <create_partition+0xca>
c00045f7:	b9 00 02 00 00       	mov    ecx,0x200
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	89 d8                	mov    eax,ebx
c0004600:	e8 fa d5 ff ff       	call   c0001bff <mem_set>
c0004605:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004609:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000460d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004611:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004614:	0f 84 23 01 00 00    	je     c000473d <create_partition+0x202>
c000461a:	89 f0                	mov    eax,esi
c000461c:	89 fa                	mov    edx,edi
c000461e:	05 ff 07 00 00       	add    eax,0x7ff
c0004623:	83 d2 00             	adc    edx,0x0
c0004626:	89 c1                	mov    ecx,eax
c0004628:	89 d7                	mov    edi,edx
c000462a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004630:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004634:	89 ce                	mov    esi,ecx
c0004636:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000463a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000463e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004642:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004645:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004649:	89 04 24             	mov    DWORD PTR [esp],eax
c000464c:	b8 64 00 00 00       	mov    eax,0x64
c0004651:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004654:	b8 00 00 00 00       	mov    eax,0x0
c0004659:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000465d:	72 41                	jb     c00046a0 <create_partition+0x165>
c000465f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004667:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000466b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004670:	01 c1                	add    ecx,eax
c0004672:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004676:	f7 24 24             	mul    DWORD PTR [esp]
c0004679:	6a 00                	push   0x0
c000467b:	01 ca                	add    edx,ecx
c000467d:	6a 64                	push   0x64
c000467f:	52                   	push   edx
c0004680:	50                   	push   eax
c0004681:	e8 0a e9 01 00       	call   c0022f90 <__udivdi3>
c0004686:	83 c4 10             	add    esp,0x10
c0004689:	05 ff 07 00 00       	add    eax,0x7ff
c000468e:	83 d2 00             	adc    edx,0x0
c0004691:	89 c1                	mov    ecx,eax
c0004693:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004697:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000469d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00046a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00046a7:	01 f0                	add    eax,esi
c00046a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00046ad:	11 fa                	adc    edx,edi
c00046af:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046b3:	19 d1                	sbb    ecx,edx
c00046b5:	73 2e                	jae    c00046e5 <create_partition+0x1aa>
c00046b7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046bb:	89 f8                	mov    eax,edi
c00046bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046c4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046d0:	73 6b                	jae    c000473d <create_partition+0x202>
c00046d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046da:	29 f0                	sub    eax,esi
c00046dc:	19 fa                	sbb    edx,edi
c00046de:	89 04 24             	mov    DWORD PTR [esp],eax
c00046e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046ec:	74 4f                	je     c000473d <create_partition+0x202>
c00046ee:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046f1:	b9 10 00 00 00       	mov    ecx,0x10
c00046f6:	ba 90 40 02 c0       	mov    edx,0xc0024090
c00046fb:	e8 ea d4 ff ff       	call   c0001bea <mem_cpy>
c0004700:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004704:	b9 10 00 00 00       	mov    ecx,0x10
c0004709:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000470d:	e8 2c db ff ff       	call   c000223e <make_rand>
c0004712:	89 f2                	mov    edx,esi
c0004714:	89 f9                	mov    ecx,edi
c0004716:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000471a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000471e:	e8 c1 d4 ff ff       	call   c0001be4 <st_qword>
c0004723:	03 34 24             	add    esi,DWORD PTR [esp]
c0004726:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000472a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000472e:	89 f2                	mov    edx,esi
c0004730:	89 f9                	mov    ecx,edi
c0004732:	83 c2 ff             	add    edx,0xffffffff
c0004735:	83 d1 ff             	adc    ecx,0xffffffff
c0004738:	e8 a7 d4 ff ff       	call   c0001be4 <st_qword>
c000473d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004741:	83 e8 80             	sub    eax,0xffffff80
c0004744:	89 c5                	mov    ebp,eax
c0004746:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000474a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004750:	75 6b                	jne    c00047bd <create_partition+0x282>
c0004752:	45                   	inc    ebp
c0004753:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004757:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000475c:	e8 39 da ff ff       	call   c000219a <crc32>
c0004761:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000476b:	75 e5                	jne    c0004752 <create_partition+0x217>
c000476d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004771:	31 d2                	xor    edx,edx
c0004773:	83 ec 0c             	sub    esp,0xc
c0004776:	c1 ed 09             	shr    ebp,0x9
c0004779:	6a 01                	push   0x1
c000477b:	8d 45 02             	lea    eax,[ebp+0x2]
c000477e:	52                   	push   edx
c000477f:	50                   	push   eax
c0004780:	53                   	push   ebx
c0004781:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004785:	e8 ac d3 ff ff       	call   c0001b36 <disk_write>
c000478a:	83 c4 20             	add    esp,0x20
c000478d:	85 c0                	test   eax,eax
c000478f:	0f 85 d7 fd ff ff    	jne    c000456c <create_partition+0x31>
c0004795:	83 ec 0c             	sub    esp,0xc
c0004798:	31 d2                	xor    edx,edx
c000479a:	6a 01                	push   0x1
c000479c:	89 e8                	mov    eax,ebp
c000479e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00047a2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00047a6:	52                   	push   edx
c00047a7:	50                   	push   eax
c00047a8:	53                   	push   ebx
c00047a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ad:	e8 84 d3 ff ff       	call   c0001b36 <disk_write>
c00047b2:	83 c4 20             	add    esp,0x20
c00047b5:	85 c0                	test   eax,eax
c00047b7:	0f 85 af fd ff ff    	jne    c000456c <create_partition+0x31>
c00047bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047c5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ca:	74 0d                	je     c00047d9 <create_partition+0x29e>
c00047cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047d4:	e9 12 fe ff ff       	jmp    c00045eb <create_partition+0xb0>
c00047d9:	31 d2                	xor    edx,edx
c00047db:	b9 00 02 00 00       	mov    ecx,0x200
c00047e0:	89 d8                	mov    eax,ebx
c00047e2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047e5:	e8 15 d4 ff ff       	call   c0001bff <mem_set>
c00047ea:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047ed:	b9 10 00 00 00       	mov    ecx,0x10
c00047f2:	ba 80 3f 02 c0       	mov    edx,0xc0023f80
c00047f7:	89 d8                	mov    eax,ebx
c00047f9:	e8 ec d3 ff ff       	call   c0001bea <mem_cpy>
c00047fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004802:	8d 43 58             	lea    eax,[ebx+0x58]
c0004805:	f7 d2                	not    edx
c0004807:	e8 d5 d3 ff ff       	call   c0001be1 <st_dword>
c000480c:	8d 43 18             	lea    eax,[ebx+0x18]
c000480f:	31 c9                	xor    ecx,ecx
c0004811:	89 04 24             	mov    DWORD PTR [esp],eax
c0004814:	ba 01 00 00 00       	mov    edx,0x1
c0004819:	e8 c6 d3 ff ff       	call   c0001be4 <st_qword>
c000481e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004822:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004826:	83 c2 ff             	add    edx,0xffffffff
c0004829:	89 e8                	mov    eax,ebp
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 b1 d3 ff ff       	call   c0001be4 <st_qword>
c0004833:	31 c9                	xor    ecx,ecx
c0004835:	8d 43 28             	lea    eax,[ebx+0x28]
c0004838:	ba 22 00 00 00       	mov    edx,0x22
c000483d:	e8 a2 d3 ff ff       	call   c0001be4 <st_qword>
c0004842:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004846:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000484a:	83 c2 de             	add    edx,0xffffffde
c000484d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004850:	83 d1 ff             	adc    ecx,0xffffffff
c0004853:	31 f6                	xor    esi,esi
c0004855:	e8 8a d3 ff ff       	call   c0001be4 <st_qword>
c000485a:	8d 43 54             	lea    eax,[ebx+0x54]
c000485d:	ba 80 00 00 00       	mov    edx,0x80
c0004862:	e8 7a d3 ff ff       	call   c0001be1 <st_dword>
c0004867:	8d 43 50             	lea    eax,[ebx+0x50]
c000486a:	ba 80 00 00 00       	mov    edx,0x80
c000486f:	e8 6d d3 ff ff       	call   c0001be1 <st_dword>
c0004874:	ba 02 00 00 00       	mov    edx,0x2
c0004879:	89 f8                	mov    eax,edi
c000487b:	e8 61 d3 ff ff       	call   c0001be1 <st_dword>
c0004880:	8d 53 38             	lea    edx,[ebx+0x38]
c0004883:	b9 10 00 00 00       	mov    ecx,0x10
c0004888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000488c:	e8 ad d9 ff ff       	call   c000223e <make_rand>
c0004891:	83 c8 ff             	or     eax,0xffffffff
c0004894:	46                   	inc    esi
c0004895:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000489a:	e8 fb d8 ff ff       	call   c000219a <crc32>
c000489f:	83 fe 5c             	cmp    esi,0x5c
c00048a2:	75 f0                	jne    c0004894 <create_partition+0x359>
c00048a4:	f7 d0                	not    eax
c00048a6:	8d 73 10             	lea    esi,[ebx+0x10]
c00048a9:	89 c2                	mov    edx,eax
c00048ab:	89 f0                	mov    eax,esi
c00048ad:	e8 2f d3 ff ff       	call   c0001be1 <st_dword>
c00048b2:	83 ec 0c             	sub    esp,0xc
c00048b5:	6a 01                	push   0x1
c00048b7:	6a 00                	push   0x0
c00048b9:	6a 01                	push   0x1
c00048bb:	53                   	push   ebx
c00048bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c0:	e8 71 d2 ff ff       	call   c0001b36 <disk_write>
c00048c5:	83 c4 20             	add    esp,0x20
c00048c8:	85 c0                	test   eax,eax
c00048ca:	0f 85 9c fc ff ff    	jne    c000456c <create_partition+0x31>
c00048d0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048d4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048d8:	83 c2 ff             	add    edx,0xffffffff
c00048db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048de:	83 d1 ff             	adc    ecx,0xffffffff
c00048e1:	e8 fe d2 ff ff       	call   c0001be4 <st_qword>
c00048e6:	ba 01 00 00 00       	mov    edx,0x1
c00048eb:	31 c9                	xor    ecx,ecx
c00048ed:	89 e8                	mov    eax,ebp
c00048ef:	e8 f0 d2 ff ff       	call   c0001be4 <st_qword>
c00048f4:	89 f8                	mov    eax,edi
c00048f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048fe:	31 ff                	xor    edi,edi
c0004900:	e8 df d2 ff ff       	call   c0001be4 <st_qword>
c0004905:	89 f0                	mov    eax,esi
c0004907:	31 d2                	xor    edx,edx
c0004909:	e8 d3 d2 ff ff       	call   c0001be1 <st_dword>
c000490e:	83 c8 ff             	or     eax,0xffffffff
c0004911:	47                   	inc    edi
c0004912:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004917:	e8 7e d8 ff ff       	call   c000219a <crc32>
c000491c:	83 ff 5c             	cmp    edi,0x5c
c000491f:	75 f0                	jne    c0004911 <create_partition+0x3d6>
c0004921:	f7 d0                	not    eax
c0004923:	89 c2                	mov    edx,eax
c0004925:	89 f0                	mov    eax,esi
c0004927:	e8 b5 d2 ff ff       	call   c0001be1 <st_dword>
c000492c:	83 ec 0c             	sub    esp,0xc
c000492f:	6a 01                	push   0x1
c0004931:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004935:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004939:	83 c0 ff             	add    eax,0xffffffff
c000493c:	83 d2 ff             	adc    edx,0xffffffff
c000493f:	52                   	push   edx
c0004940:	50                   	push   eax
c0004941:	53                   	push   ebx
c0004942:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004946:	e8 eb d1 ff ff       	call   c0001b36 <disk_write>
c000494b:	83 c4 20             	add    esp,0x20
c000494e:	85 c0                	test   eax,eax
c0004950:	0f 85 16 fc ff ff    	jne    c000456c <create_partition+0x31>
c0004956:	31 d2                	xor    edx,edx
c0004958:	89 d8                	mov    eax,ebx
c000495a:	b9 00 02 00 00       	mov    ecx,0x200
c000495f:	e8 9b d2 ff ff       	call   c0001bff <mem_set>
c0004964:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000496a:	b9 10 00 00 00       	mov    ecx,0x10
c000496f:	ba 90 3f 02 c0       	mov    edx,0xc0023f90
c0004974:	e8 71 d2 ff ff       	call   c0001bea <mem_cpy>
c0004979:	e9 21 01 00 00       	jmp    c0004a9f <create_partition+0x564>
c000497e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004982:	b9 05 00 00 00       	mov    ecx,0x5
c0004987:	89 04 24             	mov    DWORD PTR [esp],eax
c000498a:	bf 08 00 00 00       	mov    edi,0x8
c000498f:	89 f8                	mov    eax,edi
c0004991:	31 d2                	xor    edx,edx
c0004993:	0f b6 f0             	movzx  esi,al
c0004996:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004999:	f7 f6                	div    esi
c000499b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00049a0:	76 0a                	jbe    c00049ac <create_partition+0x471>
c00049a2:	d1 e7                	shl    edi,1
c00049a4:	49                   	dec    ecx
c00049a5:	75 e8                	jne    c000498f <create_partition+0x454>
c00049a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00049ac:	b9 00 02 00 00       	mov    ecx,0x200
c00049b1:	31 d2                	xor    edx,edx
c00049b3:	89 d8                	mov    eax,ebx
c00049b5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049bb:	e8 3f d2 ff ff       	call   c0001bff <mem_set>
c00049c0:	b9 64 00 00 00       	mov    ecx,0x64
c00049c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049c8:	31 d2                	xor    edx,edx
c00049ca:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049d2:	f7 f1                	div    ecx
c00049d4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049dd:	89 f8                	mov    eax,edi
c00049df:	0f b6 c0             	movzx  eax,al
c00049e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049e6:	e9 80 00 00 00       	jmp    c0004a6b <create_partition+0x530>
c00049eb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ee:	29 cf                	sub    edi,ecx
c00049f0:	89 ca                	mov    edx,ecx
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049f9:	e8 e3 d1 ff ff       	call   c0001be1 <st_dword>
c00049fe:	8d 46 04             	lea    eax,[esi+0x4]
c0004a01:	89 fa                	mov    edx,edi
c0004a03:	83 c6 10             	add    esi,0x10
c0004a06:	e8 d6 d1 ff ff       	call   c0001be1 <st_dword>
c0004a0b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004a0f:	31 d2                	xor    edx,edx
c0004a11:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a14:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a18:	89 c8                	mov    eax,ecx
c0004a1a:	01 f9                	add    ecx,edi
c0004a1c:	f7 f5                	div    ebp
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	31 d2                	xor    edx,edx
c0004a22:	45                   	inc    ebp
c0004a23:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a27:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a2a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a2d:	89 c2                	mov    edx,eax
c0004a2f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a32:	c1 ea 02             	shr    edx,0x2
c0004a35:	83 e2 c0             	and    edx,0xffffffc0
c0004a38:	09 ea                	or     edx,ebp
c0004a3a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a3f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a42:	31 d2                	xor    edx,edx
c0004a44:	f7 f5                	div    ebp
c0004a46:	89 d7                	mov    edi,edx
c0004a48:	31 d2                	xor    edx,edx
c0004a4a:	47                   	inc    edi
c0004a4b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a4f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a52:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a55:	89 c5                	mov    ebp,eax
c0004a57:	c1 ed 02             	shr    ebp,0x2
c0004a5a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a5d:	09 ef                	or     edi,ebp
c0004a5f:	89 fa                	mov    edx,edi
c0004a61:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a64:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a69:	74 34                	je     c0004a9f <create_partition+0x564>
c0004a6b:	85 c9                	test   ecx,ecx
c0004a6d:	74 30                	je     c0004a9f <create_partition+0x564>
c0004a6f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a72:	76 2b                	jbe    c0004a9f <create_partition+0x564>
c0004a74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a78:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a7c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a7f:	83 ff 64             	cmp    edi,0x64
c0004a82:	76 4b                	jbe    c0004acf <create_partition+0x594>
c0004a84:	89 f8                	mov    eax,edi
c0004a86:	01 c8                	add    eax,ecx
c0004a88:	0f 82 5d ff ff ff    	jb     c00049eb <create_partition+0x4b0>
c0004a8e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a91:	0f 87 54 ff ff ff    	ja     c00049eb <create_partition+0x4b0>
c0004a97:	85 ff                	test   edi,edi
c0004a99:	0f 85 51 ff ff ff    	jne    c00049f0 <create_partition+0x4b5>
c0004a9f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004aa5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004aaa:	e8 2e d1 ff ff       	call   c0001bdd <st_word>
c0004aaf:	83 ec 0c             	sub    esp,0xc
c0004ab2:	6a 01                	push   0x1
c0004ab4:	6a 00                	push   0x0
c0004ab6:	6a 00                	push   0x0
c0004ab8:	53                   	push   ebx
c0004ab9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004abd:	e8 74 d0 ff ff       	call   c0001b36 <disk_write>
c0004ac2:	83 c4 20             	add    esp,0x20
c0004ac5:	85 c0                	test   eax,eax
c0004ac7:	0f 95 c0             	setne  al
c0004aca:	0f b6 c0             	movzx  eax,al
c0004acd:	eb 0e                	jmp    c0004add <create_partition+0x5a2>
c0004acf:	74 07                	je     c0004ad8 <create_partition+0x59d>
c0004ad1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ad6:	eb ac                	jmp    c0004a84 <create_partition+0x549>
c0004ad8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004adb:	eb a7                	jmp    c0004a84 <create_partition+0x549>
c0004add:	83 c4 5c             	add    esp,0x5c
c0004ae0:	5b                   	pop    ebx
c0004ae1:	5e                   	pop    esi
c0004ae2:	5f                   	pop    edi
c0004ae3:	5d                   	pop    ebp
c0004ae4:	c3                   	ret    

c0004ae5 <get_fileinfo>:
c0004ae5:	55                   	push   ebp
c0004ae6:	57                   	push   edi
c0004ae7:	56                   	push   esi
c0004ae8:	53                   	push   ebx
c0004ae9:	83 ec 1c             	sub    esp,0x1c
c0004aec:	8b 30                	mov    esi,DWORD PTR [eax]
c0004aee:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004af2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004af6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004af9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004afc:	0f 84 dc 01 00 00    	je     c0004cde <get_fileinfo+0x1f9>
c0004b02:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004b05:	75 0f                	jne    c0004b16 <get_fileinfo+0x31>
c0004b07:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004b0a:	83 c4 1c             	add    esp,0x1c
c0004b0d:	5b                   	pop    ebx
c0004b0e:	5e                   	pop    esi
c0004b0f:	5f                   	pop    edi
c0004b10:	5d                   	pop    ebp
c0004b11:	e9 58 d5 ff ff       	jmp    c000206e <get_xfileinfo>
c0004b16:	89 d3                	mov    ebx,edx
c0004b18:	89 c6                	mov    esi,eax
c0004b1a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b1e:	74 6a                	je     c0004b8a <get_fileinfo+0xa5>
c0004b20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b28:	31 ed                	xor    ebp,ebp
c0004b2a:	31 ff                	xor    edi,edi
c0004b2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b37:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b3b:	66 85 d2             	test   dx,dx
c0004b3e:	74 3e                	je     c0004b7e <get_fileinfo+0x99>
c0004b40:	66 85 ed             	test   bp,bp
c0004b43:	75 0c                	jne    c0004b51 <get_fileinfo+0x6c>
c0004b45:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b4b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b4f:	76 22                	jbe    c0004b73 <get_fileinfo+0x8e>
c0004b51:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b56:	89 e8                	mov    eax,ebp
c0004b58:	29 f9                	sub    ecx,edi
c0004b5a:	c1 e0 10             	shl    eax,0x10
c0004b5d:	09 d0                	or     eax,edx
c0004b5f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b63:	e8 a3 d1 ff ff       	call   c0001d0b <put_utf>
c0004b68:	84 c0                	test   al,al
c0004b6a:	74 10                	je     c0004b7c <get_fileinfo+0x97>
c0004b6c:	0f b6 c0             	movzx  eax,al
c0004b6f:	31 d2                	xor    edx,edx
c0004b71:	01 c7                	add    edi,eax
c0004b73:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b78:	89 d5                	mov    ebp,edx
c0004b7a:	eb b0                	jmp    c0004b2c <get_fileinfo+0x47>
c0004b7c:	31 ff                	xor    edi,edi
c0004b7e:	66 85 ed             	test   bp,bp
c0004b81:	74 02                	je     c0004b85 <get_fileinfo+0xa0>
c0004b83:	31 ff                	xor    edi,edi
c0004b85:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b8a:	31 ff                	xor    edi,edi
c0004b8c:	31 c9                	xor    ecx,ecx
c0004b8e:	83 f9 0a             	cmp    ecx,0xa
c0004b91:	0f 87 ad 00 00 00    	ja     c0004c44 <get_fileinfo+0x15f>
c0004b97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b9d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ba1:	66 83 fa 20          	cmp    dx,0x20
c0004ba5:	0f 84 92 00 00 00    	je     c0004c3d <get_fileinfo+0x158>
c0004bab:	66 83 fa 05          	cmp    dx,0x5
c0004baf:	75 05                	jne    c0004bb6 <get_fileinfo+0xd1>
c0004bb1:	ba e5 00 00 00       	mov    edx,0xe5
c0004bb6:	83 ff 0b             	cmp    edi,0xb
c0004bb9:	77 0b                	ja     c0004bc6 <get_fileinfo+0xe1>
c0004bbb:	83 fd 09             	cmp    ebp,0x9
c0004bbe:	75 06                	jne    c0004bc6 <get_fileinfo+0xe1>
c0004bc0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bc5:	47                   	inc    edi
c0004bc6:	0f b7 c2             	movzx  eax,dx
c0004bc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bcd:	e8 6d d0 ff ff       	call   c0001c3f <dbc_1st>
c0004bd2:	85 c0                	test   eax,eax
c0004bd4:	74 2f                	je     c0004c05 <get_fileinfo+0x120>
c0004bd6:	83 fd 08             	cmp    ebp,0x8
c0004bd9:	74 2a                	je     c0004c05 <get_fileinfo+0x120>
c0004bdb:	83 fd 0b             	cmp    ebp,0xb
c0004bde:	74 25                	je     c0004c05 <get_fileinfo+0x120>
c0004be0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004be3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004be7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004beb:	e8 52 d0 ff ff       	call   c0001c42 <dbc_2nd>
c0004bf0:	85 c0                	test   eax,eax
c0004bf2:	74 11                	je     c0004c05 <get_fileinfo+0x120>
c0004bf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004bf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bfd:	c1 e2 08             	shl    edx,0x8
c0004c00:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004c03:	09 c2                	or     edx,eax
c0004c05:	0f b7 d2             	movzx  edx,dx
c0004c08:	50                   	push   eax
c0004c09:	50                   	push   eax
c0004c0a:	68 b5 01 00 00       	push   0x1b5
c0004c0f:	52                   	push   edx
c0004c10:	e8 87 3a 00 00       	call   c000869c <ff_oem2uni>
c0004c15:	83 c4 10             	add    esp,0x10
c0004c18:	66 85 c0             	test   ax,ax
c0004c1b:	75 04                	jne    c0004c21 <get_fileinfo+0x13c>
c0004c1d:	31 ff                	xor    edi,edi
c0004c1f:	eb 23                	jmp    c0004c44 <get_fileinfo+0x15f>
c0004c21:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c26:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c2a:	29 f9                	sub    ecx,edi
c0004c2c:	0f b7 c0             	movzx  eax,ax
c0004c2f:	e8 d7 d0 ff ff       	call   c0001d0b <put_utf>
c0004c34:	84 c0                	test   al,al
c0004c36:	74 e5                	je     c0004c1d <get_fileinfo+0x138>
c0004c38:	0f b6 c0             	movzx  eax,al
c0004c3b:	01 c7                	add    edi,eax
c0004c3d:	89 e9                	mov    ecx,ebp
c0004c3f:	e9 4a ff ff ff       	jmp    c0004b8e <get_fileinfo+0xa9>
c0004c44:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c49:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c4d:	75 54                	jne    c0004ca3 <get_fileinfo+0x1be>
c0004c4f:	85 ff                	test   edi,edi
c0004c51:	75 0b                	jne    c0004c5e <get_fileinfo+0x179>
c0004c53:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c57:	ba 01 00 00 00       	mov    edx,0x1
c0004c5c:	eb 33                	jmp    c0004c91 <get_fileinfo+0x1ac>
c0004c5e:	b1 08                	mov    cl,0x8
c0004c60:	31 d2                	xor    edx,edx
c0004c62:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c68:	84 c0                	test   al,al
c0004c6a:	74 25                	je     c0004c91 <get_fileinfo+0x1ac>
c0004c6c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c70:	74 16                	je     c0004c88 <get_fileinfo+0x1a3>
c0004c72:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c75:	66 83 ff 19          	cmp    di,0x19
c0004c79:	77 0f                	ja     c0004c8a <get_fileinfo+0x1a5>
c0004c7b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c7e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c81:	74 07                	je     c0004c8a <get_fileinfo+0x1a5>
c0004c83:	83 c0 20             	add    eax,0x20
c0004c86:	eb 02                	jmp    c0004c8a <get_fileinfo+0x1a5>
c0004c88:	b1 10                	mov    cl,0x10
c0004c8a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c8e:	42                   	inc    edx
c0004c8f:	eb d1                	jmp    c0004c62 <get_fileinfo+0x17d>
c0004c91:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c96:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c99:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c9d:	75 04                	jne    c0004ca3 <get_fileinfo+0x1be>
c0004c9f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ca3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ca6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004ca9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004cac:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004caf:	83 c0 1c             	add    eax,0x1c
c0004cb2:	e8 c1 ce ff ff       	call   c0001b78 <ld_dword>
c0004cb7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cbe:	89 03                	mov    DWORD PTR [ebx],eax
c0004cc0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc3:	83 c0 16             	add    eax,0x16
c0004cc6:	e8 a0 ce ff ff       	call   c0001b6b <ld_word>
c0004ccb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ccf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd2:	83 c0 18             	add    eax,0x18
c0004cd5:	e8 91 ce ff ff       	call   c0001b6b <ld_word>
c0004cda:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cde:	83 c4 1c             	add    esp,0x1c
c0004ce1:	5b                   	pop    ebx
c0004ce2:	5e                   	pop    esi
c0004ce3:	5f                   	pop    edi
c0004ce4:	5d                   	pop    ebp
c0004ce5:	c3                   	ret    

c0004ce6 <ld_clust.isra.0>:
c0004ce6:	56                   	push   esi
c0004ce7:	89 c6                	mov    esi,eax
c0004ce9:	53                   	push   ebx
c0004cea:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004ced:	89 d3                	mov    ebx,edx
c0004cef:	e8 77 ce ff ff       	call   c0001b6b <ld_word>
c0004cf4:	0f b7 c8             	movzx  ecx,ax
c0004cf7:	89 f0                	mov    eax,esi
c0004cf9:	3c 03                	cmp    al,0x3
c0004cfb:	75 0d                	jne    c0004d0a <ld_clust.isra.0+0x24>
c0004cfd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d00:	e8 66 ce ff ff       	call   c0001b6b <ld_word>
c0004d05:	c1 e0 10             	shl    eax,0x10
c0004d08:	09 c1                	or     ecx,eax
c0004d0a:	89 c8                	mov    eax,ecx
c0004d0c:	5b                   	pop    ebx
c0004d0d:	5e                   	pop    esi
c0004d0e:	c3                   	ret    

c0004d0f <st_clust.isra.1>:
c0004d0f:	56                   	push   esi
c0004d10:	89 c6                	mov    esi,eax
c0004d12:	53                   	push   ebx
c0004d13:	89 d3                	mov    ebx,edx
c0004d15:	0f b7 d1             	movzx  edx,cx
c0004d18:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d1b:	e8 bd ce ff ff       	call   c0001bdd <st_word>
c0004d20:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d23:	75 0f                	jne    c0004d34 <st_clust.isra.1+0x25>
c0004d25:	c1 e9 10             	shr    ecx,0x10
c0004d28:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d2b:	89 ca                	mov    edx,ecx
c0004d2d:	5b                   	pop    ebx
c0004d2e:	5e                   	pop    esi
c0004d2f:	e9 a9 ce ff ff       	jmp    c0001bdd <st_word>
c0004d34:	5b                   	pop    ebx
c0004d35:	5e                   	pop    esi
c0004d36:	c3                   	ret    

c0004d37 <init_alloc_info.isra.2>:
c0004d37:	56                   	push   esi
c0004d38:	53                   	push   ebx
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	89 d3                	mov    ebx,edx
c0004d3d:	51                   	push   ecx
c0004d3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d40:	83 c0 34             	add    eax,0x34
c0004d43:	e8 30 ce ff ff       	call   c0001b78 <ld_dword>
c0004d48:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	83 c0 38             	add    eax,0x38
c0004d50:	e8 3b ce ff ff       	call   c0001b90 <ld_qword>
c0004d55:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d58:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d5d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d67:	83 e0 02             	and    eax,0x2
c0004d6a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d6d:	5b                   	pop    ebx
c0004d6e:	5b                   	pop    ebx
c0004d6f:	5e                   	pop    esi
c0004d70:	c3                   	ret    

c0004d71 <follow_path>:
c0004d71:	56                   	push   esi
c0004d72:	53                   	push   ebx
c0004d73:	89 c3                	mov    ebx,eax
c0004d75:	83 ec 14             	sub    esp,0x14
c0004d78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d7c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d82:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d84:	80 fa 5c             	cmp    dl,0x5c
c0004d87:	75 07                	jne    c0004d90 <follow_path+0x1f>
c0004d89:	40                   	inc    eax
c0004d8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8e:	eb ee                	jmp    c0004d7e <follow_path+0xd>
c0004d90:	80 fa 2f             	cmp    dl,0x2f
c0004d93:	74 f4                	je     c0004d89 <follow_path+0x18>
c0004d95:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d9c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004da6:	77 52                	ja     c0004dfa <follow_path+0x89>
c0004da8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004dac:	31 d2                	xor    edx,edx
c0004dae:	89 d8                	mov    eax,ebx
c0004db0:	e8 12 e3 ff ff       	call   c00030c7 <dir_sdi>
c0004db5:	eb 7c                	jmp    c0004e33 <follow_path+0xc2>
c0004db7:	89 d8                	mov    eax,ebx
c0004db9:	e8 6e f2 ff ff       	call   c000402c <dir_find>
c0004dbe:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	75 46                	jne    c0004e0b <follow_path+0x9a>
c0004dc5:	80 e2 04             	and    dl,0x4
c0004dc8:	75 69                	jne    c0004e33 <follow_path+0xc2>
c0004dca:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dce:	74 5e                	je     c0004e2e <follow_path+0xbd>
c0004dd0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dd2:	3c 04                	cmp    al,0x4
c0004dd4:	75 41                	jne    c0004e17 <follow_path+0xa6>
c0004dd6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dd9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ddd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004de0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004de3:	30 c0                	xor    al,al
c0004de5:	09 d0                	or     eax,edx
c0004de7:	89 da                	mov    edx,ebx
c0004de9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dec:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004def:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004df2:	8d 46 10             	lea    eax,[esi+0x10]
c0004df5:	e8 3d ff ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0004dfa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dfe:	89 d8                	mov    eax,ebx
c0004e00:	e8 a9 ed ff ff       	call   c0003bae <create_name>
c0004e05:	85 c0                	test   eax,eax
c0004e07:	74 ae                	je     c0004db7 <follow_path+0x46>
c0004e09:	eb 28                	jmp    c0004e33 <follow_path+0xc2>
c0004e0b:	83 f8 04             	cmp    eax,0x4
c0004e0e:	75 23                	jne    c0004e33 <follow_path+0xc2>
c0004e10:	80 e2 04             	and    dl,0x4
c0004e13:	74 19                	je     c0004e2e <follow_path+0xbd>
c0004e15:	eb 1c                	jmp    c0004e33 <follow_path+0xc2>
c0004e17:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e20:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e24:	e8 bd fe ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0004e29:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e2c:	eb cc                	jmp    c0004dfa <follow_path+0x89>
c0004e2e:	b8 05 00 00 00       	mov    eax,0x5
c0004e33:	83 c4 14             	add    esp,0x14
c0004e36:	5b                   	pop    ebx
c0004e37:	5e                   	pop    esi
c0004e38:	c3                   	ret    

c0004e39 <f_mount>:
c0004e39:	53                   	push   ebx
c0004e3a:	83 ec 18             	sub    esp,0x18
c0004e3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e4d:	e8 fb d2 ff ff       	call   c000214d <get_ldnumber>
c0004e52:	89 c2                	mov    edx,eax
c0004e54:	b8 0b 00 00 00       	mov    eax,0xb
c0004e59:	85 d2                	test   edx,edx
c0004e5b:	78 39                	js     c0004e96 <f_mount+0x5d>
c0004e5d:	8b 04 95 60 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd74a0]
c0004e64:	85 c0                	test   eax,eax
c0004e66:	74 03                	je     c0004e6b <f_mount+0x32>
c0004e68:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6f:	85 c0                	test   eax,eax
c0004e71:	74 03                	je     c0004e76 <f_mount+0x3d>
c0004e73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7a:	89 04 95 60 8b 02 c0 	mov    DWORD PTR [edx*4-0x3ffd74a0],eax
c0004e81:	31 c0                	xor    eax,eax
c0004e83:	84 db                	test   bl,bl
c0004e85:	74 0f                	je     c0004e96 <f_mount+0x5d>
c0004e87:	31 c9                	xor    ecx,ecx
c0004e89:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e91:	e8 65 d7 ff ff       	call   c00025fb <mount_volume>
c0004e96:	83 c4 18             	add    esp,0x18
c0004e99:	5b                   	pop    ebx
c0004e9a:	c3                   	ret    

c0004e9b <f_open>:
c0004e9b:	55                   	push   ebp
c0004e9c:	bd 09 00 00 00       	mov    ebp,0x9
c0004ea1:	57                   	push   edi
c0004ea2:	56                   	push   esi
c0004ea3:	53                   	push   ebx
c0004ea4:	83 ec 7c             	sub    esp,0x7c
c0004ea7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004eae:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004eb5:	85 db                	test   ebx,ebx
c0004eb7:	0f 84 10 04 00 00    	je     c00052cd <f_open+0x432>
c0004ebd:	89 fe                	mov    esi,edi
c0004ebf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ec3:	83 e6 3f             	and    esi,0x3f
c0004ec6:	89 f0                	mov    eax,esi
c0004ec8:	0f b6 c8             	movzx  ecx,al
c0004ecb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ed2:	e8 24 d7 ff ff       	call   c00025fb <mount_volume>
c0004ed7:	89 c5                	mov    ebp,eax
c0004ed9:	85 c0                	test   eax,eax
c0004edb:	0f 85 e6 03 00 00    	jne    c00052c7 <f_open+0x42c>
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eee:	83 ec 0c             	sub    esp,0xc
c0004ef1:	68 60 04 00 00       	push   0x460
c0004ef6:	e8 d9 36 00 00       	call   c00085d4 <ff_memalloc>
c0004efb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eff:	83 c4 10             	add    esp,0x10
c0004f02:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004f07:	0f 84 c0 03 00 00    	je     c00052cd <f_open+0x432>
c0004f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f15:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f1b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f1e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f21:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f2c:	e8 40 fe ff ff       	call   c0004d71 <follow_path>
c0004f31:	89 c5                	mov    ebp,eax
c0004f33:	85 c0                	test   eax,eax
c0004f35:	75 0c                	jne    c0004f43 <f_open+0xa8>
c0004f37:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f3c:	79 05                	jns    c0004f43 <f_open+0xa8>
c0004f3e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f43:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f49:	0f 84 84 01 00 00    	je     c00050d3 <f_open+0x238>
c0004f4f:	85 ed                	test   ebp,ebp
c0004f51:	74 20                	je     c0004f73 <f_open+0xd8>
c0004f53:	83 fd 04             	cmp    ebp,0x4
c0004f56:	0f 85 58 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f5c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f60:	83 ce 08             	or     esi,0x8
c0004f63:	e8 8a f2 ff ff       	call   c00041f2 <dir_register>
c0004f68:	89 c5                	mov    ebp,eax
c0004f6a:	85 c0                	test   eax,eax
c0004f6c:	74 2f                	je     c0004f9d <f_open+0x102>
c0004f6e:	e9 41 03 00 00       	jmp    c00052b4 <f_open+0x419>
c0004f73:	bd 07 00 00 00       	mov    ebp,0x7
c0004f78:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f7d:	0f 85 31 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f83:	bd 08 00 00 00       	mov    ebp,0x8
c0004f88:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f8e:	0f 85 20 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f94:	83 e7 08             	and    edi,0x8
c0004f97:	0f 84 65 01 00 00    	je     c0005102 <f_open+0x267>
c0004f9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa1:	8a 02                	mov    al,BYTE PTR [edx]
c0004fa3:	3c 04                	cmp    al,0x4
c0004fa5:	0f 85 97 00 00 00    	jne    c0005042 <f_open+0x1a7>
c0004fab:	8d 42 10             	lea    eax,[edx+0x10]
c0004fae:	89 13                	mov    DWORD PTR [ebx],edx
c0004fb0:	89 da                	mov    edx,ebx
c0004fb2:	e8 80 fd ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0004fb7:	31 d2                	xor    edx,edx
c0004fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbd:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc5:	83 c0 02             	add    eax,0x2
c0004fc8:	e8 32 cc ff ff       	call   c0001bff <mem_set>
c0004fcd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fd2:	31 d2                	xor    edx,edx
c0004fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fdb:	83 c0 26             	add    eax,0x26
c0004fde:	e8 1c cc ff ff       	call   c0001bff <mem_set>
c0004fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fea:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fee:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ff3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff6:	83 c0 08             	add    eax,0x8
c0004ff9:	e8 e3 cb ff ff       	call   c0001be1 <st_dword>
c0004ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005002:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005005:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005009:	8d 44 24 24          	lea    eax,[esp+0x24]
c000500d:	e8 b7 ea ff ff       	call   c0003ac9 <store_xdir>
c0005012:	89 c5                	mov    ebp,eax
c0005014:	85 c0                	test   eax,eax
c0005016:	0f 85 98 02 00 00    	jne    c00052b4 <f_open+0x419>
c000501c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000501f:	85 d2                	test   edx,edx
c0005021:	0f 84 db 00 00 00    	je     c0005102 <f_open+0x267>
c0005027:	31 c9                	xor    ecx,ecx
c0005029:	89 d8                	mov    eax,ebx
c000502b:	e8 8e e3 ff ff       	call   c00033be <remove_chain>
c0005030:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005034:	89 c5                	mov    ebp,eax
c0005036:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005039:	48                   	dec    eax
c000503a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000503d:	e9 b8 00 00 00       	jmp    c00050fa <f_open+0x25f>
c0005042:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005046:	89 ea                	mov    edx,ebp
c0005048:	e8 99 fc ff ff       	call   c0004ce6 <ld_clust.isra.0>
c000504d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005052:	89 c7                	mov    edi,eax
c0005054:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005057:	e8 85 cb ff ff       	call   c0001be1 <st_dword>
c000505c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005060:	31 c9                	xor    ecx,ecx
c0005062:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000506e:	e8 9c fc ff ff       	call   c0004d0f <st_clust.isra.1>
c0005073:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005077:	31 d2                	xor    edx,edx
c0005079:	83 c0 1c             	add    eax,0x1c
c000507c:	e8 60 cb ff ff       	call   c0001be1 <st_dword>
c0005081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005085:	85 ff                	test   edi,edi
c0005087:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000508b:	74 75                	je     c0005102 <f_open+0x267>
c000508d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005091:	31 c9                	xor    ecx,ecx
c0005093:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005096:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000509d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050a1:	89 fa                	mov    edx,edi
c00050a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050a7:	e8 12 e3 ff ff       	call   c00033be <remove_chain>
c00050ac:	89 c5                	mov    ebp,eax
c00050ae:	85 c0                	test   eax,eax
c00050b0:	0f 85 fe 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c2:	4f                   	dec    edi
c00050c3:	e8 81 d2 ff ff       	call   c0002349 <move_window>
c00050c8:	89 c5                	mov    ebp,eax
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050d1:	eb 27                	jmp    c00050fa <f_open+0x25f>
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	0f 85 d9 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050db:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050df:	bd 04 00 00 00       	mov    ebp,0x4
c00050e4:	a8 10                	test   al,0x10
c00050e6:	0f 85 c8 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050ec:	83 e7 02             	and    edi,0x2
c00050ef:	74 11                	je     c0005102 <f_open+0x267>
c00050f1:	bd 07 00 00 00       	mov    ebp,0x7
c00050f6:	a8 01                	test   al,0x1
c00050f8:	eb 02                	jmp    c00050fc <f_open+0x261>
c00050fa:	85 ed                	test   ebp,ebp
c00050fc:	0f 85 b2 01 00 00    	jne    c00052b4 <f_open+0x419>
c0005102:	f7 c6 08 00 00 00    	test   esi,0x8
c0005108:	74 03                	je     c000510d <f_open+0x272>
c000510a:	83 ce 40             	or     esi,0x40
c000510d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005111:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005114:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005117:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000511a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000511d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005121:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005124:	8a 02                	mov    al,BYTE PTR [edx]
c0005126:	3c 04                	cmp    al,0x4
c0005128:	75 2a                	jne    c0005154 <f_open+0x2b9>
c000512a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000512e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005133:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005136:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000513a:	30 c0                	xor    al,al
c000513c:	09 c8                	or     eax,ecx
c000513e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005141:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005145:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005148:	8d 42 10             	lea    eax,[edx+0x10]
c000514b:	89 da                	mov    edx,ebx
c000514d:	e8 e5 fb ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0005152:	eb 1c                	jmp    c0005170 <f_open+0x2d5>
c0005154:	89 fa                	mov    edx,edi
c0005156:	e8 8b fb ff ff       	call   c0004ce6 <ld_clust.isra.0>
c000515b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000515e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005161:	e8 12 ca ff ff       	call   c0001b78 <ld_dword>
c0005166:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000516d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005174:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000517b:	89 03                	mov    DWORD PTR [ebx],eax
c000517d:	31 d2                	xor    edx,edx
c000517f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005183:	b9 00 02 00 00       	mov    ecx,0x200
c0005188:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000518c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005190:	89 f0                	mov    eax,esi
c0005192:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005199:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000519c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00051a3:	8d 43 50             	lea    eax,[ebx+0x50]
c00051a6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00051ad:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051b8:	e8 42 ca ff ff       	call   c0001bff <mem_set>
c00051bd:	83 e6 20             	and    esi,0x20
c00051c0:	75 07                	jne    c00051c9 <f_open+0x32e>
c00051c2:	31 ed                	xor    ebp,ebp
c00051c4:	e9 eb 00 00 00       	jmp    c00052b4 <f_open+0x419>
c00051c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051cc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051db:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051df:	74 e1                	je     c00051c2 <f_open+0x327>
c00051e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051e9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051ec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051f3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051f6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051fa:	31 ff                	xor    edi,edi
c00051fc:	c1 e5 09             	shl    ebp,0x9
c00051ff:	89 ee                	mov    esi,ebp
c0005201:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005205:	89 f8                	mov    eax,edi
c0005207:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000520b:	73 22                	jae    c000522f <f_open+0x394>
c000520d:	89 d8                	mov    eax,ebx
c000520f:	e8 bd dc ff ff       	call   c0002ed1 <get_fat>
c0005214:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005218:	89 c2                	mov    edx,eax
c000521a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000521e:	83 f8 01             	cmp    eax,0x1
c0005221:	76 10                	jbe    c0005233 <f_open+0x398>
c0005223:	83 f8 ff             	cmp    eax,0xffffffff
c0005226:	75 d9                	jne    c0005201 <f_open+0x366>
c0005228:	bd 01 00 00 00       	mov    ebp,0x1
c000522d:	eb 09                	jmp    c0005238 <f_open+0x39d>
c000522f:	31 ed                	xor    ebp,ebp
c0005231:	eb 05                	jmp    c0005238 <f_open+0x39d>
c0005233:	bd 02 00 00 00       	mov    ebp,0x2
c0005238:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000523b:	85 ed                	test   ebp,ebp
c000523d:	75 75                	jne    c00052b4 <f_open+0x419>
c000523f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005243:	25 ff 01 00 00       	and    eax,0x1ff
c0005248:	0f 84 74 ff ff ff    	je     c00051c2 <f_open+0x327>
c000524e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005252:	bd 02 00 00 00       	mov    ebp,0x2
c0005257:	89 c8                	mov    eax,ecx
c0005259:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000525d:	e8 a2 cb ff ff       	call   c0001e04 <clst2sect>
c0005262:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005266:	89 d7                	mov    edi,edx
c0005268:	09 c7                	or     edi,eax
c000526a:	74 48                	je     c00052b4 <f_open+0x419>
c000526c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005270:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005274:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000527c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005280:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005284:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005288:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000528b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000528f:	83 ec 0c             	sub    esp,0xc
c0005292:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005295:	6a 01                	push   0x1
c0005297:	52                   	push   edx
c0005298:	50                   	push   eax
c0005299:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000529d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052a1:	50                   	push   eax
c00052a2:	e8 79 c8 ff ff       	call   c0001b20 <disk_read>
c00052a7:	83 c4 20             	add    esp,0x20
c00052aa:	85 c0                	test   eax,eax
c00052ac:	0f 95 c0             	setne  al
c00052af:	0f b6 c0             	movzx  eax,al
c00052b2:	89 c5                	mov    ebp,eax
c00052b4:	83 ec 0c             	sub    esp,0xc
c00052b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052bb:	e8 2c 33 00 00       	call   c00085ec <ff_memfree>
c00052c0:	83 c4 10             	add    esp,0x10
c00052c3:	85 ed                	test   ebp,ebp
c00052c5:	74 06                	je     c00052cd <f_open+0x432>
c00052c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052cd:	83 c4 7c             	add    esp,0x7c
c00052d0:	89 e8                	mov    eax,ebp
c00052d2:	5b                   	pop    ebx
c00052d3:	5e                   	pop    esi
c00052d4:	5f                   	pop    edi
c00052d5:	5d                   	pop    ebp
c00052d6:	c3                   	ret    

c00052d7 <f_read>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052ec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052f0:	89 d8                	mov    eax,ebx
c00052f2:	e8 77 cf ff ff       	call   c000226e <validate>
c00052f7:	89 c5                	mov    ebp,eax
c00052f9:	85 c0                	test   eax,eax
c00052fb:	0f 85 4c 02 00 00    	jne    c000554d <f_read+0x276>
c0005301:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005305:	85 ed                	test   ebp,ebp
c0005307:	0f 85 40 02 00 00    	jne    c000554d <f_read+0x276>
c000530d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005311:	0f 84 31 02 00 00    	je     c0005548 <f_read+0x271>
c0005317:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000531a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000531d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005320:	bf 00 00 00 00       	mov    edi,0x0
c0005325:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005328:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000532c:	89 d1                	mov    ecx,edx
c000532e:	19 f9                	sbb    ecx,edi
c0005330:	0f 83 cf 00 00 00    	jae    c0005405 <f_read+0x12e>
c0005336:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000533a:	e9 c6 00 00 00       	jmp    c0005405 <f_read+0x12e>
c000533f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005342:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005345:	89 d0                	mov    eax,edx
c0005347:	25 ff 01 00 00       	and    eax,0x1ff
c000534c:	0f 85 c9 01 00 00    	jne    c000551b <f_read+0x244>
c0005352:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005356:	89 d6                	mov    esi,edx
c0005358:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000535c:	89 cf                	mov    edi,ecx
c000535e:	48                   	dec    eax
c000535f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005363:	21 f0                	and    eax,esi
c0005365:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005369:	0f 84 a6 00 00 00    	je     c0005415 <f_read+0x13e>
c000536f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005373:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005376:	89 c8                	mov    eax,ecx
c0005378:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000537b:	e8 84 ca ff ff       	call   c0001e04 <clst2sect>
c0005380:	89 d7                	mov    edi,edx
c0005382:	09 c7                	or     edi,eax
c0005384:	0f 84 b4 00 00 00    	je     c000543e <f_read+0x167>
c000538a:	31 ff                	xor    edi,edi
c000538c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005390:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005393:	01 c6                	add    esi,eax
c0005395:	11 d7                	adc    edi,edx
c0005397:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000539f:	0f 86 fd 00 00 00    	jbe    c00054a2 <f_read+0x1cb>
c00053a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00053a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00053ad:	c1 e8 09             	shr    eax,0x9
c00053b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053b7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053ba:	39 c2                	cmp    edx,eax
c00053bc:	76 07                	jbe    c00053c5 <f_read+0xee>
c00053be:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053cc:	57                   	push   edi
c00053cd:	56                   	push   esi
c00053ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053d6:	50                   	push   eax
c00053d7:	e8 44 c7 ff ff       	call   c0001b20 <disk_read>
c00053dc:	83 c4 20             	add    esp,0x20
c00053df:	85 c0                	test   eax,eax
c00053e1:	75 6e                	jne    c0005451 <f_read+0x17a>
c00053e3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053e7:	78 7e                	js     c0005467 <f_read+0x190>
c00053e9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053ec:	c1 e6 09             	shl    esi,0x9
c00053ef:	31 ff                	xor    edi,edi
c00053f1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053f9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053fd:	01 30                	add    DWORD PTR [eax],esi
c00053ff:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005402:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005405:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000540a:	0f 85 2f ff ff ff    	jne    c000533f <f_read+0x68>
c0005410:	e9 38 01 00 00       	jmp    c000554d <f_read+0x276>
c0005415:	89 c8                	mov    eax,ecx
c0005417:	09 d0                	or     eax,edx
c0005419:	75 05                	jne    c0005420 <f_read+0x149>
c000541b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000541e:	eb 19                	jmp    c0005439 <f_read+0x162>
c0005420:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005424:	74 09                	je     c000542f <f_read+0x158>
c0005426:	89 d8                	mov    eax,ebx
c0005428:	e8 f8 c9 ff ff       	call   c0001e25 <clmt_clust>
c000542d:	eb 0a                	jmp    c0005439 <f_read+0x162>
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 d8                	mov    eax,ebx
c0005434:	e8 98 da ff ff       	call   c0002ed1 <get_fat>
c0005439:	83 f8 01             	cmp    eax,0x1
c000543c:	77 0e                	ja     c000544c <f_read+0x175>
c000543e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005442:	bd 02 00 00 00       	mov    ebp,0x2
c0005447:	e9 01 01 00 00       	jmp    c000554d <f_read+0x276>
c000544c:	83 f8 ff             	cmp    eax,0xffffffff
c000544f:	75 0e                	jne    c000545f <f_read+0x188>
c0005451:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005455:	bd 01 00 00 00       	mov    ebp,0x1
c000545a:	e9 ee 00 00 00       	jmp    c000554d <f_read+0x276>
c000545f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005462:	e9 08 ff ff ff       	jmp    c000536f <f_read+0x98>
c0005467:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000546a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000546d:	29 f0                	sub    eax,esi
c000546f:	19 fa                	sbb    edx,edi
c0005471:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005474:	89 d7                	mov    edi,edx
c0005476:	ba 00 00 00 00       	mov    edx,0x0
c000547b:	89 f9                	mov    ecx,edi
c000547d:	19 d1                	sbb    ecx,edx
c000547f:	0f 83 64 ff ff ff    	jae    c00053e9 <f_read+0x112>
c0005485:	89 c7                	mov    edi,eax
c0005487:	8d 53 50             	lea    edx,[ebx+0x50]
c000548a:	c1 e7 09             	shl    edi,0x9
c000548d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005491:	b9 00 02 00 00       	mov    ecx,0x200
c0005496:	01 f8                	add    eax,edi
c0005498:	e8 4d c7 ff ff       	call   c0001bea <mem_cpy>
c000549d:	e9 47 ff ff ff       	jmp    c00053e9 <f_read+0x112>
c00054a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00054a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00054a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00054af:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054b3:	75 05                	jne    c00054ba <f_read+0x1e3>
c00054b5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054b8:	74 5b                	je     c0005515 <f_read+0x23e>
c00054ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00054bd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c5:	79 2a                	jns    c00054f1 <f_read+0x21a>
c00054c7:	83 ec 0c             	sub    esp,0xc
c00054ca:	6a 01                	push   0x1
c00054cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054dc:	50                   	push   eax
c00054dd:	e8 54 c6 ff ff       	call   c0001b36 <disk_write>
c00054e2:	83 c4 20             	add    esp,0x20
c00054e5:	85 c0                	test   eax,eax
c00054e7:	0f 85 64 ff ff ff    	jne    c0005451 <f_read+0x17a>
c00054ed:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054f1:	83 ec 0c             	sub    esp,0xc
c00054f4:	6a 01                	push   0x1
c00054f6:	57                   	push   edi
c00054f7:	56                   	push   esi
c00054f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005500:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005504:	50                   	push   eax
c0005505:	e8 16 c6 ff ff       	call   c0001b20 <disk_read>
c000550a:	83 c4 20             	add    esp,0x20
c000550d:	85 c0                	test   eax,eax
c000550f:	0f 85 3c ff ff ff    	jne    c0005451 <f_read+0x17a>
c0005515:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005518:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000551b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000551e:	ba 00 02 00 00       	mov    edx,0x200
c0005523:	25 ff 01 00 00       	and    eax,0x1ff
c0005528:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000552c:	29 c2                	sub    edx,eax
c000552e:	39 d6                	cmp    esi,edx
c0005530:	76 02                	jbe    c0005534 <f_read+0x25d>
c0005532:	89 d6                	mov    esi,edx
c0005534:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005538:	89 f1                	mov    ecx,esi
c000553a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000553e:	e8 a7 c6 ff ff       	call   c0001bea <mem_cpy>
c0005543:	e9 a7 fe ff ff       	jmp    c00053ef <f_read+0x118>
c0005548:	bd 07 00 00 00       	mov    ebp,0x7
c000554d:	83 c4 2c             	add    esp,0x2c
c0005550:	89 e8                	mov    eax,ebp
c0005552:	5b                   	pop    ebx
c0005553:	5e                   	pop    esi
c0005554:	5f                   	pop    edi
c0005555:	5d                   	pop    ebp
c0005556:	c3                   	ret    

c0005557 <f_write>:
c0005557:	55                   	push   ebp
c0005558:	57                   	push   edi
c0005559:	56                   	push   esi
c000555a:	53                   	push   ebx
c000555b:	83 ec 2c             	sub    esp,0x2c
c000555e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005562:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005566:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000556c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005570:	89 d8                	mov    eax,ebx
c0005572:	e8 f7 cc ff ff       	call   c000226e <validate>
c0005577:	89 c5                	mov    ebp,eax
c0005579:	85 c0                	test   eax,eax
c000557b:	0f 85 86 02 00 00    	jne    c0005807 <f_write+0x2b0>
c0005581:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005585:	85 ed                	test   ebp,ebp
c0005587:	0f 85 7a 02 00 00    	jne    c0005807 <f_write+0x2b0>
c000558d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005591:	0f 84 6b 02 00 00    	je     c0005802 <f_write+0x2ab>
c0005597:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000559b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000559e:	0f 84 43 01 00 00    	je     c00056e7 <f_write+0x190>
c00055a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055a7:	89 c1                	mov    ecx,eax
c00055a9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00055ad:	0f 83 34 01 00 00    	jae    c00056e7 <f_write+0x190>
c00055b3:	f7 d0                	not    eax
c00055b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055b9:	e9 29 01 00 00       	jmp    c00056e7 <f_write+0x190>
c00055be:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055c1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055c4:	89 d0                	mov    eax,edx
c00055c6:	25 ff 01 00 00       	and    eax,0x1ff
c00055cb:	0f 85 00 02 00 00    	jne    c00057d1 <f_write+0x27a>
c00055d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055d5:	89 d6                	mov    esi,edx
c00055d7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055db:	89 cf                	mov    edi,ecx
c00055dd:	48                   	dec    eax
c00055de:	0f ac fe 09          	shrd   esi,edi,0x9
c00055e2:	21 f0                	and    eax,esi
c00055e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055e8:	0f 84 06 01 00 00    	je     c00056f4 <f_write+0x19d>
c00055ee:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055f2:	0f 88 6e 01 00 00    	js     c0005766 <f_write+0x20f>
c00055f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ff:	89 c8                	mov    eax,ecx
c0005601:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005605:	e8 fa c7 ff ff       	call   c0001e04 <clst2sect>
c000560a:	89 d1                	mov    ecx,edx
c000560c:	09 c1                	or     ecx,eax
c000560e:	0f 84 1c 01 00 00    	je     c0005730 <f_write+0x1d9>
c0005614:	31 ff                	xor    edi,edi
c0005616:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000561a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000561e:	01 c6                	add    esi,eax
c0005620:	11 d7                	adc    edi,edx
c0005622:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000562a:	0f 86 63 01 00 00    	jbe    c0005793 <f_write+0x23c>
c0005630:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005634:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005638:	c1 e8 09             	shr    eax,0x9
c000563b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005643:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005647:	39 c2                	cmp    edx,eax
c0005649:	76 08                	jbe    c0005653 <f_write+0xfc>
c000564b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000564f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005653:	83 ec 0c             	sub    esp,0xc
c0005656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000565a:	57                   	push   edi
c000565b:	56                   	push   esi
c000565c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005660:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005664:	50                   	push   eax
c0005665:	e8 cc c4 ff ff       	call   c0001b36 <disk_write>
c000566a:	83 c4 20             	add    esp,0x20
c000566d:	85 c0                	test   eax,eax
c000566f:	0f 85 ce 00 00 00    	jne    c0005743 <f_write+0x1ec>
c0005675:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005678:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000567b:	29 f0                	sub    eax,esi
c000567d:	19 fa                	sbb    edx,edi
c000567f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005683:	89 d7                	mov    edi,edx
c0005685:	ba 00 00 00 00       	mov    edx,0x0
c000568a:	89 f9                	mov    ecx,edi
c000568c:	19 d1                	sbb    ecx,edx
c000568e:	73 1c                	jae    c00056ac <f_write+0x155>
c0005690:	89 c7                	mov    edi,eax
c0005692:	b9 00 02 00 00       	mov    ecx,0x200
c0005697:	c1 e7 09             	shl    edi,0x9
c000569a:	8d 43 50             	lea    eax,[ebx+0x50]
c000569d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00056a1:	89 fa                	mov    edx,edi
c00056a3:	e8 42 c5 ff ff       	call   c0001bea <mem_cpy>
c00056a8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00056ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056b0:	c1 e6 09             	shl    esi,0x9
c00056b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056b7:	31 ff                	xor    edi,edi
c00056b9:	01 30                	add    DWORD PTR [eax],esi
c00056bb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056bf:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056c6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056cc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056cf:	89 c1                	mov    ecx,eax
c00056d1:	39 f2                	cmp    edx,esi
c00056d3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056d6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056d9:	19 f9                	sbb    ecx,edi
c00056db:	73 04                	jae    c00056e1 <f_write+0x18a>
c00056dd:	89 f2                	mov    edx,esi
c00056df:	89 f8                	mov    eax,edi
c00056e1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056e7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056ec:	0f 85 cc fe ff ff    	jne    c00055be <f_write+0x67>
c00056f2:	eb 2e                	jmp    c0005722 <f_write+0x1cb>
c00056f4:	89 c8                	mov    eax,ecx
c00056f6:	09 d0                	or     eax,edx
c00056f8:	75 0b                	jne    c0005705 <f_write+0x1ae>
c00056fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056fd:	31 d2                	xor    edx,edx
c00056ff:	85 c0                	test   eax,eax
c0005701:	75 28                	jne    c000572b <f_write+0x1d4>
c0005703:	eb 12                	jmp    c0005717 <f_write+0x1c0>
c0005705:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005709:	74 09                	je     c0005714 <f_write+0x1bd>
c000570b:	89 d8                	mov    eax,ebx
c000570d:	e8 13 c7 ff ff       	call   c0001e25 <clmt_clust>
c0005712:	eb 0a                	jmp    c000571e <f_write+0x1c7>
c0005714:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005717:	89 d8                	mov    eax,ebx
c0005719:	e8 a1 da ff ff       	call   c00031bf <create_chain>
c000571e:	85 c0                	test   eax,eax
c0005720:	75 09                	jne    c000572b <f_write+0x1d4>
c0005722:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005726:	e9 dc 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c000572b:	83 f8 01             	cmp    eax,0x1
c000572e:	75 0e                	jne    c000573e <f_write+0x1e7>
c0005730:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005734:	bd 02 00 00 00       	mov    ebp,0x2
c0005739:	e9 c9 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c000573e:	83 f8 ff             	cmp    eax,0xffffffff
c0005741:	75 0e                	jne    c0005751 <f_write+0x1fa>
c0005743:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005747:	bd 01 00 00 00       	mov    ebp,0x1
c000574c:	e9 b6 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c0005751:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005754:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005758:	0f 85 90 fe ff ff    	jne    c00055ee <f_write+0x97>
c000575e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005761:	e9 88 fe ff ff       	jmp    c00055ee <f_write+0x97>
c0005766:	83 ec 0c             	sub    esp,0xc
c0005769:	8d 43 50             	lea    eax,[ebx+0x50]
c000576c:	6a 01                	push   0x1
c000576e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005771:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005774:	50                   	push   eax
c0005775:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005779:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000577d:	50                   	push   eax
c000577e:	e8 b3 c3 ff ff       	call   c0001b36 <disk_write>
c0005783:	83 c4 20             	add    esp,0x20
c0005786:	85 c0                	test   eax,eax
c0005788:	75 b9                	jne    c0005743 <f_write+0x1ec>
c000578a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000578e:	e9 65 fe ff ff       	jmp    c00055f8 <f_write+0xa1>
c0005793:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005796:	75 05                	jne    c000579d <f_write+0x246>
c0005798:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000579b:	74 2e                	je     c00057cb <f_write+0x274>
c000579d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00057a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00057a6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00057a9:	73 20                	jae    c00057cb <f_write+0x274>
c00057ab:	83 ec 0c             	sub    esp,0xc
c00057ae:	8d 43 50             	lea    eax,[ebx+0x50]
c00057b1:	6a 01                	push   0x1
c00057b3:	57                   	push   edi
c00057b4:	56                   	push   esi
c00057b5:	50                   	push   eax
c00057b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057ba:	50                   	push   eax
c00057bb:	e8 60 c3 ff ff       	call   c0001b20 <disk_read>
c00057c0:	83 c4 20             	add    esp,0x20
c00057c3:	85 c0                	test   eax,eax
c00057c5:	0f 85 78 ff ff ff    	jne    c0005743 <f_write+0x1ec>
c00057cb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057ce:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057d1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057d4:	ba 00 02 00 00       	mov    edx,0x200
c00057d9:	25 ff 01 00 00       	and    eax,0x1ff
c00057de:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057e2:	29 c2                	sub    edx,eax
c00057e4:	39 d6                	cmp    esi,edx
c00057e6:	76 02                	jbe    c00057ea <f_write+0x293>
c00057e8:	89 d6                	mov    esi,edx
c00057ea:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057ee:	89 f1                	mov    ecx,esi
c00057f0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057f4:	e8 f1 c3 ff ff       	call   c0001bea <mem_cpy>
c00057f9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057fd:	e9 b1 fe ff ff       	jmp    c00056b3 <f_write+0x15c>
c0005802:	bd 07 00 00 00       	mov    ebp,0x7
c0005807:	83 c4 2c             	add    esp,0x2c
c000580a:	89 e8                	mov    eax,ebp
c000580c:	5b                   	pop    ebx
c000580d:	5e                   	pop    esi
c000580e:	5f                   	pop    edi
c000580f:	5d                   	pop    ebp
c0005810:	c3                   	ret    

c0005811 <f_sync>:
c0005811:	56                   	push   esi
c0005812:	53                   	push   ebx
c0005813:	83 ec 64             	sub    esp,0x64
c0005816:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000581a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000581e:	89 d8                	mov    eax,ebx
c0005820:	e8 49 ca ff ff       	call   c000226e <validate>
c0005825:	85 c0                	test   eax,eax
c0005827:	0f 85 ba 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000582d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005830:	f6 c2 40             	test   dl,0x40
c0005833:	0f 84 ae 01 00 00    	je     c00059e7 <f_sync+0x1d6>
c0005839:	84 d2                	test   dl,dl
c000583b:	79 33                	jns    c0005870 <f_sync+0x5f>
c000583d:	83 ec 0c             	sub    esp,0xc
c0005840:	8d 43 50             	lea    eax,[ebx+0x50]
c0005843:	6a 01                	push   0x1
c0005845:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005848:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584b:	50                   	push   eax
c000584c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005850:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005854:	50                   	push   eax
c0005855:	e8 dc c2 ff ff       	call   c0001b36 <disk_write>
c000585a:	83 c4 20             	add    esp,0x20
c000585d:	89 c2                	mov    edx,eax
c000585f:	b8 01 00 00 00       	mov    eax,0x1
c0005864:	85 d2                	test   edx,edx
c0005866:	0f 85 7b 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000586c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005874:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005877:	0f 85 11 01 00 00    	jne    c000598e <f_sync+0x17d>
c000587d:	89 d8                	mov    eax,ebx
c000587f:	e8 13 d6 ff ff       	call   c0002e97 <fill_first_frag>
c0005884:	85 c0                	test   eax,eax
c0005886:	0f 85 5b 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000588c:	83 c9 ff             	or     ecx,0xffffffff
c000588f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005892:	89 d8                	mov    eax,ebx
c0005894:	e8 c9 d5 ff ff       	call   c0002e62 <fill_last_frag>
c0005899:	85 c0                	test   eax,eax
c000589b:	0f 85 46 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	68 60 04 00 00       	push   0x460
c00058a9:	e8 26 2d 00 00       	call   c00085d4 <ff_memalloc>
c00058ae:	83 c4 10             	add    esp,0x10
c00058b1:	89 c6                	mov    esi,eax
c00058b3:	b8 11 00 00 00       	mov    eax,0x11
c00058b8:	85 f6                	test   esi,esi
c00058ba:	0f 84 27 01 00 00    	je     c00059e7 <f_sync+0x1d6>
c00058c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058c4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ca:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058cd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058d0:	89 da                	mov    edx,ebx
c00058d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058d6:	e8 af df ff ff       	call   c000388a <load_obj_xdir>
c00058db:	85 c0                	test   eax,eax
c00058dd:	0f 85 95 00 00 00    	jne    c0005978 <f_sync+0x167>
c00058e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058e7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058ea:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058ee:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058f1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058f4:	83 ca 01             	or     edx,0x1
c00058f7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058fa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005900:	83 c0 34             	add    eax,0x34
c0005903:	e8 d9 c2 ff ff       	call   c0001be1 <st_dword>
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005915:	83 c0 38             	add    eax,0x38
c0005918:	e8 c7 c2 ff ff       	call   c0001be4 <st_qword>
c000591d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005924:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005927:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592a:	83 c0 28             	add    eax,0x28
c000592d:	e8 b2 c2 ff ff       	call   c0001be4 <st_qword>
c0005932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005936:	ba 00 00 21 50       	mov    edx,0x50210000
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 0c             	add    eax,0xc
c0005941:	e8 9b c2 ff ff       	call   c0001be1 <st_dword>
c0005946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000594d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005951:	31 d2                	xor    edx,edx
c0005953:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005956:	83 c0 10             	add    eax,0x10
c0005959:	e8 83 c2 ff ff       	call   c0001be1 <st_dword>
c000595e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005962:	e8 62 e1 ff ff       	call   c0003ac9 <store_xdir>
c0005967:	85 c0                	test   eax,eax
c0005969:	75 0d                	jne    c0005978 <f_sync+0x167>
c000596b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596f:	e8 00 eb ff ff       	call   c0004474 <sync_fs>
c0005974:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005978:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000597c:	83 ec 0c             	sub    esp,0xc
c000597f:	56                   	push   esi
c0005980:	e8 67 2c 00 00       	call   c00085ec <ff_memfree>
c0005985:	83 c4 10             	add    esp,0x10
c0005988:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000598c:	eb 59                	jmp    c00059e7 <f_sync+0x1d6>
c000598e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005991:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005994:	e8 b0 c9 ff ff       	call   c0002349 <move_window>
c0005999:	85 c0                	test   eax,eax
c000599b:	75 4a                	jne    c00059e7 <f_sync+0x1d6>
c000599d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00059a0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00059a4:	89 f2                	mov    edx,esi
c00059a6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00059a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00059ab:	e8 5f f3 ff ff       	call   c0004d0f <st_clust.isra.1>
c00059b0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059b3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059b6:	e8 26 c2 ff ff       	call   c0001be1 <st_dword>
c00059bb:	8d 46 16             	lea    eax,[esi+0x16]
c00059be:	ba 00 00 21 50       	mov    edx,0x50210000
c00059c3:	e8 19 c2 ff ff       	call   c0001be1 <st_dword>
c00059c8:	8d 46 12             	lea    eax,[esi+0x12]
c00059cb:	31 d2                	xor    edx,edx
c00059cd:	e8 0b c2 ff ff       	call   c0001bdd <st_word>
c00059d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059d6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059de:	e8 91 ea ff ff       	call   c0004474 <sync_fs>
c00059e3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059e7:	83 c4 64             	add    esp,0x64
c00059ea:	5b                   	pop    ebx
c00059eb:	5e                   	pop    esi
c00059ec:	c3                   	ret    

c00059ed <f_close>:
c00059ed:	53                   	push   ebx
c00059ee:	83 ec 24             	sub    esp,0x24
c00059f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059f5:	53                   	push   ebx
c00059f6:	e8 16 fe ff ff       	call   c0005811 <f_sync>
c00059fb:	83 c4 10             	add    esp,0x10
c00059fe:	85 c0                	test   eax,eax
c0005a00:	75 15                	jne    c0005a17 <f_close+0x2a>
c0005a02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005a06:	89 d8                	mov    eax,ebx
c0005a08:	e8 61 c8 ff ff       	call   c000226e <validate>
c0005a0d:	85 c0                	test   eax,eax
c0005a0f:	75 06                	jne    c0005a17 <f_close+0x2a>
c0005a11:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a17:	83 c4 18             	add    esp,0x18
c0005a1a:	5b                   	pop    ebx
c0005a1b:	c3                   	ret    

c0005a1c <f_lseek>:
c0005a1c:	55                   	push   ebp
c0005a1d:	57                   	push   edi
c0005a1e:	56                   	push   esi
c0005a1f:	53                   	push   ebx
c0005a20:	83 ec 3c             	sub    esp,0x3c
c0005a23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a27:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a2b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a36:	89 d8                	mov    eax,ebx
c0005a38:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a3c:	e8 2d c8 ff ff       	call   c000226e <validate>
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 7a 04 00 00    	jne    c0005ec7 <f_lseek+0x4ab>
c0005a4d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a55:	85 c0                	test   eax,eax
c0005a57:	0f 85 6a 04 00 00    	jne    c0005ec7 <f_lseek+0x4ab>
c0005a5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a61:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a64:	74 0c                	je     c0005a72 <f_lseek+0x56>
c0005a66:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a69:	85 c0                	test   eax,eax
c0005a6b:	75 1f                	jne    c0005a8c <f_lseek+0x70>
c0005a6d:	e9 b5 01 00 00       	jmp    c0005c27 <f_lseek+0x20b>
c0005a72:	83 c9 ff             	or     ecx,0xffffffff
c0005a75:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a78:	89 d8                	mov    eax,ebx
c0005a7a:	e8 e3 d3 ff ff       	call   c0002e62 <fill_last_frag>
c0005a7f:	85 c0                	test   eax,eax
c0005a81:	74 e3                	je     c0005a66 <f_lseek+0x4a>
c0005a83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a87:	e9 3b 04 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005a8c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a91:	0f 85 ac 00 00 00    	jne    c0005b43 <f_lseek+0x127>
c0005a97:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a9b:	0f 85 a2 00 00 00    	jne    c0005b43 <f_lseek+0x127>
c0005aa1:	8d 78 04             	lea    edi,[eax+0x4]
c0005aa4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0005aa9:	be 02 00 00 00       	mov    esi,0x2
c0005aae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ab2:	85 ed                	test   ebp,ebp
c0005ab4:	74 73                	je     c0005b29 <f_lseek+0x10d>
c0005ab6:	89 e9                	mov    ecx,ebp
c0005ab8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005abf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ac2:	89 ca                	mov    edx,ecx
c0005ac4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ac8:	89 d8                	mov    eax,ebx
c0005aca:	e8 02 d4 ff ff       	call   c0002ed1 <get_fat>
c0005acf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ad3:	83 f8 01             	cmp    eax,0x1
c0005ad6:	77 11                	ja     c0005ae9 <f_lseek+0xcd>
c0005ad8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005adc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ae4:	e9 de 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005ae9:	83 f8 ff             	cmp    eax,0xffffffff
c0005aec:	75 11                	jne    c0005aff <f_lseek+0xe3>
c0005aee:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005af2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005afa:	e9 c8 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005aff:	8d 51 01             	lea    edx,[ecx+0x1]
c0005b02:	89 c1                	mov    ecx,eax
c0005b04:	39 c2                	cmp    edx,eax
c0005b06:	74 b7                	je     c0005abf <f_lseek+0xa3>
c0005b08:	83 c6 02             	add    esi,0x2
c0005b0b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005b0f:	72 0b                	jb     c0005b1c <f_lseek+0x100>
c0005b11:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b14:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b17:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b19:	83 c7 08             	add    edi,0x8
c0005b1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b20:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b23:	76 04                	jbe    c0005b29 <f_lseek+0x10d>
c0005b25:	89 c5                	mov    ebp,eax
c0005b27:	eb 8d                	jmp    c0005ab6 <f_lseek+0x9a>
c0005b29:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b2c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b30:	89 30                	mov    DWORD PTR [eax],esi
c0005b32:	0f 87 87 03 00 00    	ja     c0005ebf <f_lseek+0x4a3>
c0005b38:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b3e:	e9 84 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005b43:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b46:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b55:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b60:	73 0f                	jae    c0005b71 <f_lseek+0x155>
c0005b62:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b79:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b7c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b83:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b87:	0f 84 3a 03 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005b8d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b91:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b95:	83 c6 ff             	add    esi,0xffffffff
c0005b98:	89 d8                	mov    eax,ebx
c0005b9a:	83 d7 ff             	adc    edi,0xffffffff
c0005b9d:	89 f2                	mov    edx,esi
c0005b9f:	89 f9                	mov    ecx,edi
c0005ba1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ba5:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ba8:	e8 78 c2 ff ff       	call   c0001e25 <clmt_clust>
c0005bad:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005bb1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bb4:	89 c2                	mov    edx,eax
c0005bb6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bba:	89 c8                	mov    eax,ecx
c0005bbc:	e8 43 c2 ff ff       	call   c0001e04 <clst2sect>
c0005bc1:	89 d7                	mov    edi,edx
c0005bc3:	09 c7                	or     edi,eax
c0005bc5:	0f 84 0d ff ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005bcb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bcf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bd5:	0f 84 ec 02 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005bdb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005be3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005be6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bee:	4d                   	dec    ebp
c0005bef:	31 ff                	xor    edi,edi
c0005bf1:	21 ee                	and    esi,ebp
c0005bf3:	01 c6                	add    esi,eax
c0005bf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005bf8:	11 d7                	adc    edi,edx
c0005bfa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bfd:	39 fa                	cmp    edx,edi
c0005bff:	75 08                	jne    c0005c09 <f_lseek+0x1ed>
c0005c01:	39 f0                	cmp    eax,esi
c0005c03:	0f 84 be 02 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005c09:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c0c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c10:	0f 89 80 02 00 00    	jns    c0005e96 <f_lseek+0x47a>
c0005c16:	83 ec 0c             	sub    esp,0xc
c0005c19:	6a 01                	push   0x1
c0005c1b:	52                   	push   edx
c0005c1c:	50                   	push   eax
c0005c1d:	55                   	push   ebp
c0005c1e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c22:	e9 5a 02 00 00       	jmp    c0005e81 <f_lseek+0x465>
c0005c27:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c2b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c2e:	74 16                	je     c0005c46 <f_lseek+0x22a>
c0005c30:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c35:	76 0f                	jbe    c0005c46 <f_lseek+0x22a>
c0005c37:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c3e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c46:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c49:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c4c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c4f:	89 c7                	mov    edi,eax
c0005c51:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c55:	73 0d                	jae    c0005c64 <f_lseek+0x248>
c0005c57:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c5b:	75 07                	jne    c0005c64 <f_lseek+0x248>
c0005c5d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c64:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c6a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c6e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c75:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c7c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c7f:	75 09                	jne    c0005c8a <f_lseek+0x26e>
c0005c81:	31 f6                	xor    esi,esi
c0005c83:	31 ff                	xor    edi,edi
c0005c85:	e9 af 01 00 00       	jmp    c0005e39 <f_lseek+0x41d>
c0005c8a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c8e:	89 d7                	mov    edi,edx
c0005c90:	c1 e1 09             	shl    ecx,0x9
c0005c93:	09 c7                	or     edi,eax
c0005c95:	89 cd                	mov    ebp,ecx
c0005c97:	74 6d                	je     c0005d06 <f_lseek+0x2ea>
c0005c99:	83 c0 ff             	add    eax,0xffffffff
c0005c9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ca0:	83 d2 ff             	adc    edx,0xffffffff
c0005ca3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ca6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005caa:	83 c0 ff             	add    eax,0xffffffff
c0005cad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005cb1:	83 d2 ff             	adc    edx,0xffffffff
c0005cb4:	31 ff                	xor    edi,edi
c0005cb6:	57                   	push   edi
c0005cb7:	51                   	push   ecx
c0005cb8:	52                   	push   edx
c0005cb9:	50                   	push   eax
c0005cba:	e8 d1 d2 01 00       	call   c0022f90 <__udivdi3>
c0005cbf:	83 c4 10             	add    esp,0x10
c0005cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cca:	57                   	push   edi
c0005ccb:	55                   	push   ebp
c0005ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cd4:	e8 b7 d2 01 00       	call   c0022f90 <__udivdi3>
c0005cd9:	83 c4 10             	add    esp,0x10
c0005cdc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005ce0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ce4:	19 d1                	sbb    ecx,edx
c0005ce6:	72 1e                	jb     c0005d06 <f_lseek+0x2ea>
c0005ce8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cec:	89 e9                	mov    ecx,ebp
c0005cee:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cf1:	f7 d9                	neg    ecx
c0005cf3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cf6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cfa:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005cfd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005d00:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005d04:	eb 28                	jmp    c0005d2e <f_lseek+0x312>
c0005d06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d09:	85 c0                	test   eax,eax
c0005d0b:	75 1e                	jne    c0005d2b <f_lseek+0x30f>
c0005d0d:	31 d2                	xor    edx,edx
c0005d0f:	89 d8                	mov    eax,ebx
c0005d11:	e8 a9 d4 ff ff       	call   c00031bf <create_chain>
c0005d16:	83 f8 01             	cmp    eax,0x1
c0005d19:	0f 84 b9 fd ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005d1f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d22:	0f 84 c6 fd ff ff    	je     c0005aee <f_lseek+0xd2>
c0005d28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d2b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d2e:	85 c0                	test   eax,eax
c0005d30:	0f 84 4b ff ff ff    	je     c0005c81 <f_lseek+0x265>
c0005d36:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d3a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d42:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d4c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	0f 83 9d 00 00 00    	jae    c0005df6 <f_lseek+0x3da>
c0005d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d5d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d61:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d64:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d68:	01 f2                	add    edx,esi
c0005d6a:	11 f9                	adc    ecx,edi
c0005d6c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d70:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d74:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d77:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d7a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d7d:	f6 c1 02             	test   cl,0x2
c0005d80:	74 35                	je     c0005db7 <f_lseek+0x39b>
c0005d82:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d86:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d89:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d8c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d90:	73 16                	jae    c0005da8 <f_lseek+0x38c>
c0005d92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d96:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d9a:	88 ca                	mov    dl,cl
c0005d9c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d9f:	83 ca 40             	or     edx,0x40
c0005da2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005da5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005da8:	89 c2                	mov    edx,eax
c0005daa:	89 d8                	mov    eax,ebx
c0005dac:	e8 0e d4 ff ff       	call   c00031bf <create_chain>
c0005db1:	85 c0                	test   eax,eax
c0005db3:	75 0b                	jne    c0005dc0 <f_lseek+0x3a4>
c0005db5:	eb 30                	jmp    c0005de7 <f_lseek+0x3cb>
c0005db7:	89 c2                	mov    edx,eax
c0005db9:	89 d8                	mov    eax,ebx
c0005dbb:	e8 11 d1 ff ff       	call   c0002ed1 <get_fat>
c0005dc0:	83 f8 ff             	cmp    eax,0xffffffff
c0005dc3:	0f 84 25 fd ff ff    	je     c0005aee <f_lseek+0xd2>
c0005dc9:	83 f8 01             	cmp    eax,0x1
c0005dcc:	0f 86 06 fd ff ff    	jbe    c0005ad8 <f_lseek+0xbc>
c0005dd2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dd6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dd9:	0f 86 f9 fc ff ff    	jbe    c0005ad8 <f_lseek+0xbc>
c0005ddf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005de2:	e9 5b ff ff ff       	jmp    c0005d42 <f_lseek+0x326>
c0005de7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005df6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005df9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005dfd:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005e00:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005e03:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005e06:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005e0c:	0f 84 6f fe ff ff    	je     c0005c81 <f_lseek+0x265>
c0005e12:	89 c2                	mov    edx,eax
c0005e14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e18:	e8 e7 bf ff ff       	call   c0001e04 <clst2sect>
c0005e1d:	89 d7                	mov    edi,edx
c0005e1f:	09 c7                	or     edi,eax
c0005e21:	0f 84 b1 fc ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005e27:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e2e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e32:	c1 ef 09             	shr    edi,0x9
c0005e35:	01 c6                	add    esi,eax
c0005e37:	11 d7                	adc    edi,edx
c0005e39:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e3c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e3f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e42:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e45:	19 d1                	sbb    ecx,edx
c0005e47:	73 0a                	jae    c0005e53 <f_lseek+0x437>
c0005e49:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e4c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e4f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e53:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e58:	74 6d                	je     c0005ec7 <f_lseek+0x4ab>
c0005e5a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e5d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e60:	39 fa                	cmp    edx,edi
c0005e62:	75 04                	jne    c0005e68 <f_lseek+0x44c>
c0005e64:	39 f0                	cmp    eax,esi
c0005e66:	74 5f                	je     c0005ec7 <f_lseek+0x4ab>
c0005e68:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e6b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e6f:	79 25                	jns    c0005e96 <f_lseek+0x47a>
c0005e71:	83 ec 0c             	sub    esp,0xc
c0005e74:	6a 01                	push   0x1
c0005e76:	52                   	push   edx
c0005e77:	50                   	push   eax
c0005e78:	55                   	push   ebp
c0005e79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e7d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e81:	50                   	push   eax
c0005e82:	e8 af bc ff ff       	call   c0001b36 <disk_write>
c0005e87:	83 c4 20             	add    esp,0x20
c0005e8a:	85 c0                	test   eax,eax
c0005e8c:	0f 85 5c fc ff ff    	jne    c0005aee <f_lseek+0xd2>
c0005e92:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e96:	83 ec 0c             	sub    esp,0xc
c0005e99:	6a 01                	push   0x1
c0005e9b:	57                   	push   edi
c0005e9c:	56                   	push   esi
c0005e9d:	55                   	push   ebp
c0005e9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ea2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ea6:	50                   	push   eax
c0005ea7:	e8 74 bc ff ff       	call   c0001b20 <disk_read>
c0005eac:	83 c4 20             	add    esp,0x20
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	0f 85 37 fc ff ff    	jne    c0005aee <f_lseek+0xd2>
c0005eb7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ebd:	eb 08                	jmp    c0005ec7 <f_lseek+0x4ab>
c0005ebf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ecb:	83 c4 3c             	add    esp,0x3c
c0005ece:	5b                   	pop    ebx
c0005ecf:	5e                   	pop    esi
c0005ed0:	5f                   	pop    edi
c0005ed1:	5d                   	pop    ebp
c0005ed2:	c3                   	ret    

c0005ed3 <f_opendir>:
c0005ed3:	56                   	push   esi
c0005ed4:	b8 09 00 00 00       	mov    eax,0x9
c0005ed9:	53                   	push   ebx
c0005eda:	83 ec 24             	sub    esp,0x24
c0005edd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee1:	85 db                	test   ebx,ebx
c0005ee3:	0f 84 e6 00 00 00    	je     c0005fcf <f_opendir+0xfc>
c0005ee9:	31 c9                	xor    ecx,ecx
c0005eeb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eef:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ef3:	e8 03 c7 ff ff       	call   c00025fb <mount_volume>
c0005ef8:	85 c0                	test   eax,eax
c0005efa:	0f 85 c9 00 00 00    	jne    c0005fc9 <f_opendir+0xf6>
c0005f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f04:	83 ec 0c             	sub    esp,0xc
c0005f07:	89 03                	mov    DWORD PTR [ebx],eax
c0005f09:	68 60 04 00 00       	push   0x460
c0005f0e:	e8 c1 26 00 00       	call   c00085d4 <ff_memalloc>
c0005f13:	83 c4 10             	add    esp,0x10
c0005f16:	89 c6                	mov    esi,eax
c0005f18:	b8 11 00 00 00       	mov    eax,0x11
c0005f1d:	85 f6                	test   esi,esi
c0005f1f:	0f 84 aa 00 00 00    	je     c0005fcf <f_opendir+0xfc>
c0005f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f29:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f2f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f35:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f39:	89 d8                	mov    eax,ebx
c0005f3b:	e8 31 ee ff ff       	call   c0004d71 <follow_path>
c0005f40:	85 c0                	test   eax,eax
c0005f42:	75 61                	jne    c0005fa5 <f_opendir+0xd2>
c0005f44:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f48:	78 46                	js     c0005f90 <f_opendir+0xbd>
c0005f4a:	b8 05 00 00 00       	mov    eax,0x5
c0005f4f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f53:	74 50                	je     c0005fa5 <f_opendir+0xd2>
c0005f55:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f59:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f5b:	3c 04                	cmp    al,0x4
c0005f5d:	75 26                	jne    c0005f85 <f_opendir+0xb2>
c0005f5f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f62:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f65:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f68:	30 d2                	xor    dl,dl
c0005f6a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f6e:	09 c2                	or     edx,eax
c0005f70:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f73:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f76:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f79:	89 da                	mov    edx,ebx
c0005f7b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f7e:	e8 b4 ed ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0005f83:	eb 0b                	jmp    c0005f90 <f_opendir+0xbd>
c0005f85:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f88:	e8 59 ed ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0005f8d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f94:	31 d2                	xor    edx,edx
c0005f96:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f9a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f9e:	89 d8                	mov    eax,ebx
c0005fa0:	e8 22 d1 ff ff       	call   c00030c7 <dir_sdi>
c0005fa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fa9:	83 ec 0c             	sub    esp,0xc
c0005fac:	56                   	push   esi
c0005fad:	e8 3a 26 00 00       	call   c00085ec <ff_memfree>
c0005fb2:	83 c4 10             	add    esp,0x10
c0005fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb9:	83 f8 04             	cmp    eax,0x4
c0005fbc:	74 06                	je     c0005fc4 <f_opendir+0xf1>
c0005fbe:	85 c0                	test   eax,eax
c0005fc0:	74 0d                	je     c0005fcf <f_opendir+0xfc>
c0005fc2:	eb 05                	jmp    c0005fc9 <f_opendir+0xf6>
c0005fc4:	b8 05 00 00 00       	mov    eax,0x5
c0005fc9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fcf:	83 c4 24             	add    esp,0x24
c0005fd2:	5b                   	pop    ebx
c0005fd3:	5e                   	pop    esi
c0005fd4:	c3                   	ret    

c0005fd5 <f_closedir>:
c0005fd5:	53                   	push   ebx
c0005fd6:	83 ec 18             	sub    esp,0x18
c0005fd9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fdd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fe1:	89 d8                	mov    eax,ebx
c0005fe3:	e8 86 c2 ff ff       	call   c000226e <validate>
c0005fe8:	85 c0                	test   eax,eax
c0005fea:	75 06                	jne    c0005ff2 <f_closedir+0x1d>
c0005fec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ff2:	83 c4 18             	add    esp,0x18
c0005ff5:	5b                   	pop    ebx
c0005ff6:	c3                   	ret    

c0005ff7 <f_readdir>:
c0005ff7:	57                   	push   edi
c0005ff8:	56                   	push   esi
c0005ff9:	53                   	push   ebx
c0005ffa:	83 ec 20             	sub    esp,0x20
c0005ffd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006001:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006005:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006009:	89 d8                	mov    eax,ebx
c000600b:	e8 5e c2 ff ff       	call   c000226e <validate>
c0006010:	85 c0                	test   eax,eax
c0006012:	75 77                	jne    c000608b <f_readdir+0x94>
c0006014:	85 ff                	test   edi,edi
c0006016:	75 0b                	jne    c0006023 <f_readdir+0x2c>
c0006018:	31 d2                	xor    edx,edx
c000601a:	89 d8                	mov    eax,ebx
c000601c:	e8 a6 d0 ff ff       	call   c00030c7 <dir_sdi>
c0006021:	eb 68                	jmp    c000608b <f_readdir+0x94>
c0006023:	83 ec 0c             	sub    esp,0xc
c0006026:	68 60 04 00 00       	push   0x460
c000602b:	e8 a4 25 00 00       	call   c00085d4 <ff_memalloc>
c0006030:	83 c4 10             	add    esp,0x10
c0006033:	89 c6                	mov    esi,eax
c0006035:	b8 11 00 00 00       	mov    eax,0x11
c000603a:	85 f6                	test   esi,esi
c000603c:	74 4d                	je     c000608b <f_readdir+0x94>
c000603e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006042:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006048:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000604b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000604e:	31 d2                	xor    edx,edx
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 80 d8 ff ff       	call   c00038d7 <dir_read>
c0006057:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000605c:	75 19                	jne    c0006077 <f_readdir+0x80>
c000605e:	89 fa                	mov    edx,edi
c0006060:	89 d8                	mov    eax,ebx
c0006062:	e8 7e ea ff ff       	call   c0004ae5 <get_fileinfo>
c0006067:	31 d2                	xor    edx,edx
c0006069:	89 d8                	mov    eax,ebx
c000606b:	e8 af d5 ff ff       	call   c000361f <dir_next>
c0006070:	83 f8 04             	cmp    eax,0x4
c0006073:	75 02                	jne    c0006077 <f_readdir+0x80>
c0006075:	31 c0                	xor    eax,eax
c0006077:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000607b:	83 ec 0c             	sub    esp,0xc
c000607e:	56                   	push   esi
c000607f:	e8 68 25 00 00       	call   c00085ec <ff_memfree>
c0006084:	83 c4 10             	add    esp,0x10
c0006087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000608b:	83 c4 20             	add    esp,0x20
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	5f                   	pop    edi
c0006091:	c3                   	ret    

c0006092 <f_stat>:
c0006092:	57                   	push   edi
c0006093:	31 c9                	xor    ecx,ecx
c0006095:	56                   	push   esi
c0006096:	53                   	push   ebx
c0006097:	83 ec 50             	sub    esp,0x50
c000609a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000609e:	8d 54 24 04          	lea    edx,[esp+0x4]
c00060a2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00060a6:	e8 50 c5 ff ff       	call   c00025fb <mount_volume>
c00060ab:	89 c3                	mov    ebx,eax
c00060ad:	85 c0                	test   eax,eax
c00060af:	75 67                	jne    c0006118 <f_stat+0x86>
c00060b1:	83 ec 0c             	sub    esp,0xc
c00060b4:	bb 11 00 00 00       	mov    ebx,0x11
c00060b9:	68 60 04 00 00       	push   0x460
c00060be:	e8 11 25 00 00       	call   c00085d4 <ff_memalloc>
c00060c3:	83 c4 10             	add    esp,0x10
c00060c6:	89 c6                	mov    esi,eax
c00060c8:	85 c0                	test   eax,eax
c00060ca:	74 4c                	je     c0006118 <f_stat+0x86>
c00060cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060d0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060d6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060dc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060e0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e4:	e8 88 ec ff ff       	call   c0004d71 <follow_path>
c00060e9:	89 c3                	mov    ebx,eax
c00060eb:	85 c0                	test   eax,eax
c00060ed:	75 1d                	jne    c000610c <f_stat+0x7a>
c00060ef:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060f4:	78 11                	js     c0006107 <f_stat+0x75>
c00060f6:	85 ff                	test   edi,edi
c00060f8:	74 12                	je     c000610c <f_stat+0x7a>
c00060fa:	89 fa                	mov    edx,edi
c00060fc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006100:	e8 e0 e9 ff ff       	call   c0004ae5 <get_fileinfo>
c0006105:	eb 05                	jmp    c000610c <f_stat+0x7a>
c0006107:	bb 06 00 00 00       	mov    ebx,0x6
c000610c:	83 ec 0c             	sub    esp,0xc
c000610f:	56                   	push   esi
c0006110:	e8 d7 24 00 00       	call   c00085ec <ff_memfree>
c0006115:	83 c4 10             	add    esp,0x10
c0006118:	83 c4 50             	add    esp,0x50
c000611b:	89 d8                	mov    eax,ebx
c000611d:	5b                   	pop    ebx
c000611e:	5e                   	pop    esi
c000611f:	5f                   	pop    edi
c0006120:	c3                   	ret    

c0006121 <f_getfree>:
c0006121:	55                   	push   ebp
c0006122:	31 c9                	xor    ecx,ecx
c0006124:	57                   	push   edi
c0006125:	56                   	push   esi
c0006126:	53                   	push   ebx
c0006127:	83 ec 5c             	sub    esp,0x5c
c000612a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000612e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006132:	e8 c4 c4 ff ff       	call   c00025fb <mount_volume>
c0006137:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000613b:	85 c0                	test   eax,eax
c000613d:	0f 85 9d 01 00 00    	jne    c00062e0 <f_getfree+0x1bf>
c0006143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006147:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000614b:	89 02                	mov    DWORD PTR [edx],eax
c000614d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006150:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006153:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006156:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000615a:	39 f2                	cmp    edx,esi
c000615c:	77 0b                	ja     c0006169 <f_getfree+0x48>
c000615e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006162:	89 10                	mov    DWORD PTR [eax],edx
c0006164:	e9 77 01 00 00       	jmp    c00062e0 <f_getfree+0x1bf>
c0006169:	8a 10                	mov    dl,BYTE PTR [eax]
c000616b:	80 fa 01             	cmp    dl,0x1
c000616e:	75 3a                	jne    c00061aa <f_getfree+0x89>
c0006170:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006174:	be 02 00 00 00       	mov    esi,0x2
c0006179:	31 db                	xor    ebx,ebx
c000617b:	89 f2                	mov    edx,esi
c000617d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006181:	e8 4b cd ff ff       	call   c0002ed1 <get_fat>
c0006186:	83 f8 ff             	cmp    eax,0xffffffff
c0006189:	0f 84 28 01 00 00    	je     c00062b7 <f_getfree+0x196>
c000618f:	83 f8 01             	cmp    eax,0x1
c0006192:	0f 84 29 01 00 00    	je     c00062c1 <f_getfree+0x1a0>
c0006198:	83 d3 00             	adc    ebx,0x0
c000619b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000619f:	46                   	inc    esi
c00061a0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00061a3:	77 d6                	ja     c000617b <f_getfree+0x5a>
c00061a5:	e9 25 01 00 00       	jmp    c00062cf <f_getfree+0x1ae>
c00061aa:	80 fa 04             	cmp    dl,0x4
c00061ad:	0f 85 88 00 00 00    	jne    c000623b <f_getfree+0x11a>
c00061b3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061b6:	31 ed                	xor    ebp,ebp
c00061b8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061c3:	31 db                	xor    ebx,ebx
c00061c5:	85 ed                	test   ebp,ebp
c00061c7:	75 3f                	jne    c0006208 <f_getfree+0xe7>
c00061c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061d1:	83 c0 01             	add    eax,0x1
c00061d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061d8:	83 d2 00             	adc    edx,0x0
c00061db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061eb:	e8 59 c1 ff ff       	call   c0002349 <move_window>
c00061f0:	85 c0                	test   eax,eax
c00061f2:	0f 85 d3 00 00 00    	jne    c00062cb <f_getfree+0x1aa>
c00061f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006200:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006204:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006208:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000620c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000620f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006213:	89 cf                	mov    edi,ecx
c0006215:	85 f6                	test   esi,esi
c0006217:	74 12                	je     c000622b <f_getfree+0x10a>
c0006219:	88 c1                	mov    cl,al
c000621b:	83 e1 01             	and    ecx,0x1
c000621e:	80 f9 01             	cmp    cl,0x1
c0006221:	83 d3 00             	adc    ebx,0x0
c0006224:	d0 e8                	shr    al,1
c0006226:	4e                   	dec    esi
c0006227:	39 fe                	cmp    esi,edi
c0006229:	75 ea                	jne    c0006215 <f_getfree+0xf4>
c000622b:	45                   	inc    ebp
c000622c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006232:	85 f6                	test   esi,esi
c0006234:	75 8f                	jne    c00061c5 <f_getfree+0xa4>
c0006236:	e9 94 00 00 00       	jmp    c00062cf <f_getfree+0x1ae>
c000623b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000623e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006241:	31 f6                	xor    esi,esi
c0006243:	31 db                	xor    ebx,ebx
c0006245:	85 f6                	test   esi,esi
c0006247:	75 1b                	jne    c0006264 <f_getfree+0x143>
c0006249:	89 d7                	mov    edi,edx
c000624b:	89 cd                	mov    ebp,ecx
c000624d:	83 c7 01             	add    edi,0x1
c0006250:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006254:	83 d5 00             	adc    ebp,0x0
c0006257:	e8 ed c0 ff ff       	call   c0002349 <move_window>
c000625c:	85 c0                	test   eax,eax
c000625e:	75 6b                	jne    c00062cb <f_getfree+0x1aa>
c0006260:	89 fa                	mov    edx,edi
c0006262:	89 e9                	mov    ecx,ebp
c0006264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006268:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000626c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006270:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006273:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006277:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000627b:	75 11                	jne    c000628e <f_getfree+0x16d>
c000627d:	e8 e9 b8 ff ff       	call   c0001b6b <ld_word>
c0006282:	66 83 f8 01          	cmp    ax,0x1
c0006286:	83 d3 00             	adc    ebx,0x0
c0006289:	83 c6 02             	add    esi,0x2
c000628c:	eb 13                	jmp    c00062a1 <f_getfree+0x180>
c000628e:	e8 e5 b8 ff ff       	call   c0001b78 <ld_dword>
c0006293:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006298:	83 f8 01             	cmp    eax,0x1
c000629b:	83 d3 00             	adc    ebx,0x0
c000629e:	83 c6 04             	add    esi,0x4
c00062a1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00062a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00062ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00062af:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062b3:	75 90                	jne    c0006245 <f_getfree+0x124>
c00062b5:	eb 18                	jmp    c00062cf <f_getfree+0x1ae>
c00062b7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062bf:	eb 0e                	jmp    c00062cf <f_getfree+0x1ae>
c00062c1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062c9:	eb 04                	jmp    c00062cf <f_getfree+0x1ae>
c00062cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062cf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062d3:	89 18                	mov    DWORD PTR [eax],ebx
c00062d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062d9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062dc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062e4:	83 c4 5c             	add    esp,0x5c
c00062e7:	5b                   	pop    ebx
c00062e8:	5e                   	pop    esi
c00062e9:	5f                   	pop    edi
c00062ea:	5d                   	pop    ebp
c00062eb:	c3                   	ret    

c00062ec <f_truncate>:
c00062ec:	56                   	push   esi
c00062ed:	53                   	push   ebx
c00062ee:	83 ec 14             	sub    esp,0x14
c00062f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062f5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062f9:	89 d8                	mov    eax,ebx
c00062fb:	e8 6e bf ff ff       	call   c000226e <validate>
c0006300:	89 c6                	mov    esi,eax
c0006302:	85 c0                	test   eax,eax
c0006304:	0f 85 d2 00 00 00    	jne    c00063dc <f_truncate+0xf0>
c000630a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000630e:	85 f6                	test   esi,esi
c0006310:	0f 85 c6 00 00 00    	jne    c00063dc <f_truncate+0xf0>
c0006316:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000631a:	0f 84 b7 00 00 00    	je     c00063d7 <f_truncate+0xeb>
c0006320:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006323:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006326:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006329:	89 d1                	mov    ecx,edx
c000632b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000632e:	0f 83 a8 00 00 00    	jae    c00063dc <f_truncate+0xf0>
c0006334:	09 c2                	or     edx,eax
c0006336:	75 15                	jne    c000634d <f_truncate+0x61>
c0006338:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000633b:	31 c9                	xor    ecx,ecx
c000633d:	89 d8                	mov    eax,ebx
c000633f:	e8 7a d0 ff ff       	call   c00033be <remove_chain>
c0006344:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000634b:	eb 35                	jmp    c0006382 <f_truncate+0x96>
c000634d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006350:	89 d8                	mov    eax,ebx
c0006352:	e8 7a cb ff ff       	call   c0002ed1 <get_fat>
c0006357:	89 c2                	mov    edx,eax
c0006359:	b8 01 00 00 00       	mov    eax,0x1
c000635e:	83 fa ff             	cmp    edx,0xffffffff
c0006361:	74 1f                	je     c0006382 <f_truncate+0x96>
c0006363:	b8 02 00 00 00       	mov    eax,0x2
c0006368:	83 fa 01             	cmp    edx,0x1
c000636b:	74 15                	je     c0006382 <f_truncate+0x96>
c000636d:	31 c0                	xor    eax,eax
c000636f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006373:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006376:	76 0a                	jbe    c0006382 <f_truncate+0x96>
c0006378:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000637b:	89 d8                	mov    eax,ebx
c000637d:	e8 3c d0 ff ff       	call   c00033be <remove_chain>
c0006382:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006385:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006388:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000638b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000638e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006391:	83 ca 40             	or     edx,0x40
c0006394:	85 c0                	test   eax,eax
c0006396:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006399:	75 35                	jne    c00063d0 <f_truncate+0xe4>
c000639b:	84 d2                	test   dl,dl
c000639d:	79 3d                	jns    c00063dc <f_truncate+0xf0>
c000639f:	83 ec 0c             	sub    esp,0xc
c00063a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00063a5:	6a 01                	push   0x1
c00063a7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00063aa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00063ad:	50                   	push   eax
c00063ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063b2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063b6:	50                   	push   eax
c00063b7:	e8 7a b7 ff ff       	call   c0001b36 <disk_write>
c00063bc:	83 c4 20             	add    esp,0x20
c00063bf:	85 c0                	test   eax,eax
c00063c1:	75 08                	jne    c00063cb <f_truncate+0xdf>
c00063c3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063c7:	31 f6                	xor    esi,esi
c00063c9:	eb 11                	jmp    c00063dc <f_truncate+0xf0>
c00063cb:	b8 01 00 00 00       	mov    eax,0x1
c00063d0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063d3:	89 c6                	mov    esi,eax
c00063d5:	eb 05                	jmp    c00063dc <f_truncate+0xf0>
c00063d7:	be 07 00 00 00       	mov    esi,0x7
c00063dc:	89 f0                	mov    eax,esi
c00063de:	83 c4 14             	add    esp,0x14
c00063e1:	5b                   	pop    ebx
c00063e2:	5e                   	pop    esi
c00063e3:	c3                   	ret    

c00063e4 <f_unlink>:
c00063e4:	56                   	push   esi
c00063e5:	b9 02 00 00 00       	mov    ecx,0x2
c00063ea:	53                   	push   ebx
c00063eb:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063f1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063f5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063fc:	e8 fa c1 ff ff       	call   c00025fb <mount_volume>
c0006401:	85 c0                	test   eax,eax
c0006403:	0f 85 55 01 00 00    	jne    c000655e <f_unlink+0x17a>
c0006409:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000640d:	83 ec 0c             	sub    esp,0xc
c0006410:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006414:	68 60 04 00 00       	push   0x460
c0006419:	e8 b6 21 00 00       	call   c00085d4 <ff_memalloc>
c000641e:	83 c4 10             	add    esp,0x10
c0006421:	89 c3                	mov    ebx,eax
c0006423:	b8 11 00 00 00       	mov    eax,0x11
c0006428:	85 db                	test   ebx,ebx
c000642a:	0f 84 2e 01 00 00    	je     c000655e <f_unlink+0x17a>
c0006430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006434:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000643a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000643d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006440:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006447:	8d 44 24 48          	lea    eax,[esp+0x48]
c000644b:	e8 21 e9 ff ff       	call   c0004d71 <follow_path>
c0006450:	85 c0                	test   eax,eax
c0006452:	0f 85 f2 00 00 00    	jne    c000654a <f_unlink+0x166>
c0006458:	b8 06 00 00 00       	mov    eax,0x6
c000645d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006465:	0f 88 df 00 00 00    	js     c000654a <f_unlink+0x166>
c000646b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006470:	74 0a                	je     c000647c <f_unlink+0x98>
c0006472:	b8 07 00 00 00       	mov    eax,0x7
c0006477:	e9 ce 00 00 00       	jmp    c000654a <f_unlink+0x166>
c000647c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006480:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006484:	8a 02                	mov    al,BYTE PTR [edx]
c0006486:	3c 04                	cmp    al,0x4
c0006488:	75 12                	jne    c000649c <f_unlink+0xb8>
c000648a:	8d 42 10             	lea    eax,[edx+0x10]
c000648d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006491:	e8 a1 e8 ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0006496:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000649a:	eb 0e                	jmp    c00064aa <f_unlink+0xc6>
c000649c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00064a3:	e8 3e e8 ff ff       	call   c0004ce6 <ld_clust.isra.0>
c00064a8:	89 c6                	mov    esi,eax
c00064aa:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00064af:	75 12                	jne    c00064c3 <f_unlink+0xdf>
c00064b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064b5:	e8 94 d6 ff ff       	call   c0003b4e <dir_remove>
c00064ba:	85 c0                	test   eax,eax
c00064bc:	74 6c                	je     c000652a <f_unlink+0x146>
c00064be:	e9 87 00 00 00       	jmp    c000654a <f_unlink+0x166>
c00064c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064ce:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064d5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064d8:	75 21                	jne    c00064fb <f_unlink+0x117>
c00064da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064e2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064e9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064f0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064f4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064fb:	31 d2                	xor    edx,edx
c00064fd:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006504:	e8 be cb ff ff       	call   c00030c7 <dir_sdi>
c0006509:	85 c0                	test   eax,eax
c000650b:	75 3d                	jne    c000654a <f_unlink+0x166>
c000650d:	31 d2                	xor    edx,edx
c000650f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006516:	e8 bc d3 ff ff       	call   c00038d7 <dir_read>
c000651b:	85 c0                	test   eax,eax
c000651d:	0f 84 4f ff ff ff    	je     c0006472 <f_unlink+0x8e>
c0006523:	83 f8 04             	cmp    eax,0x4
c0006526:	75 22                	jne    c000654a <f_unlink+0x166>
c0006528:	eb 87                	jmp    c00064b1 <f_unlink+0xcd>
c000652a:	85 f6                	test   esi,esi
c000652c:	75 0b                	jne    c0006539 <f_unlink+0x155>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	e8 3d df ff ff       	call   c0004474 <sync_fs>
c0006537:	eb 11                	jmp    c000654a <f_unlink+0x166>
c0006539:	31 c9                	xor    ecx,ecx
c000653b:	89 f2                	mov    edx,esi
c000653d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006541:	e8 78 ce ff ff       	call   c00033be <remove_chain>
c0006546:	85 c0                	test   eax,eax
c0006548:	74 e4                	je     c000652e <f_unlink+0x14a>
c000654a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000654e:	83 ec 0c             	sub    esp,0xc
c0006551:	53                   	push   ebx
c0006552:	e8 95 20 00 00       	call   c00085ec <ff_memfree>
c0006557:	83 c4 10             	add    esp,0x10
c000655a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000655e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006564:	5b                   	pop    ebx
c0006565:	5e                   	pop    esi
c0006566:	c3                   	ret    

c0006567 <f_mkdir>:
c0006567:	57                   	push   edi
c0006568:	b9 02 00 00 00       	mov    ecx,0x2
c000656d:	56                   	push   esi
c000656e:	53                   	push   ebx
c000656f:	83 c4 80             	add    esp,0xffffff80
c0006572:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006576:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000657d:	e8 79 c0 ff ff       	call   c00025fb <mount_volume>
c0006582:	89 c3                	mov    ebx,eax
c0006584:	85 c0                	test   eax,eax
c0006586:	0f 85 fe 01 00 00    	jne    c000678a <f_mkdir+0x223>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	bb 11 00 00 00       	mov    ebx,0x11
c0006595:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006599:	83 ec 0c             	sub    esp,0xc
c000659c:	68 60 04 00 00       	push   0x460
c00065a1:	e8 2e 20 00 00       	call   c00085d4 <ff_memalloc>
c00065a6:	83 c4 10             	add    esp,0x10
c00065a9:	89 c7                	mov    edi,eax
c00065ab:	85 c0                	test   eax,eax
c00065ad:	0f 84 d7 01 00 00    	je     c000678a <f_mkdir+0x223>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065bd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065c3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ca:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065ce:	e8 9e e7 ff ff       	call   c0004d71 <follow_path>
c00065d3:	89 c3                	mov    ebx,eax
c00065d5:	85 c0                	test   eax,eax
c00065d7:	74 3e                	je     c0006617 <f_mkdir+0xb0>
c00065d9:	83 f8 04             	cmp    eax,0x4
c00065dc:	75 3e                	jne    c000661c <f_mkdir+0xb5>
c00065de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e2:	31 d2                	xor    edx,edx
c00065e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065ec:	e8 ce cb ff ff       	call   c00031bf <create_chain>
c00065f1:	89 c6                	mov    esi,eax
c00065f3:	85 c0                	test   eax,eax
c00065f5:	74 0c                	je     c0006603 <f_mkdir+0x9c>
c00065f7:	bb 02 00 00 00       	mov    ebx,0x2
c00065fc:	83 f8 01             	cmp    eax,0x1
c00065ff:	74 07                	je     c0006608 <f_mkdir+0xa1>
c0006601:	eb 2a                	jmp    c000662d <f_mkdir+0xc6>
c0006603:	bb 07 00 00 00       	mov    ebx,0x7
c0006608:	31 c9                	xor    ecx,ecx
c000660a:	89 f2                	mov    edx,esi
c000660c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006610:	e8 a9 cd ff ff       	call   c00033be <remove_chain>
c0006615:	eb 05                	jmp    c000661c <f_mkdir+0xb5>
c0006617:	bb 08 00 00 00       	mov    ebx,0x8
c000661c:	83 ec 0c             	sub    esp,0xc
c000661f:	57                   	push   edi
c0006620:	e8 c7 1f 00 00       	call   c00085ec <ff_memfree>
c0006625:	83 c4 10             	add    esp,0x10
c0006628:	e9 5d 01 00 00       	jmp    c000678a <f_mkdir+0x223>
c000662d:	bb 01 00 00 00       	mov    ebx,0x1
c0006632:	83 f8 ff             	cmp    eax,0xffffffff
c0006635:	74 d1                	je     c0006608 <f_mkdir+0xa1>
c0006637:	89 f2                	mov    edx,esi
c0006639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663d:	e8 c4 ce ff ff       	call   c0003506 <dir_clear>
c0006642:	89 c3                	mov    ebx,eax
c0006644:	85 c0                	test   eax,eax
c0006646:	75 c0                	jne    c0006608 <f_mkdir+0xa1>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000664f:	74 69                	je     c00066ba <f_mkdir+0x153>
c0006651:	b9 0b 00 00 00       	mov    ecx,0xb
c0006656:	83 c0 54             	add    eax,0x54
c0006659:	ba 20 00 00 00       	mov    edx,0x20
c000665e:	e8 9c b5 ff ff       	call   c0001bff <mem_set>
c0006663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006667:	ba 00 00 21 50       	mov    edx,0x50210000
c000666c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006670:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006674:	83 c0 6a             	add    eax,0x6a
c0006677:	e8 65 b5 ff ff       	call   c0001be1 <st_dword>
c000667c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006680:	89 f1                	mov    ecx,esi
c0006682:	8d 50 54             	lea    edx,[eax+0x54]
c0006685:	e8 85 e6 ff ff       	call   c0004d0f <st_clust.isra.1>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	b9 20 00 00 00       	mov    ecx,0x20
c0006693:	8d 50 54             	lea    edx,[eax+0x54]
c0006696:	83 c0 74             	add    eax,0x74
c0006699:	e8 4c b5 ff ff       	call   c0001bea <mem_cpy>
c000669e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00066a6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00066aa:	8d 50 74             	lea    edx,[eax+0x74]
c00066ad:	e8 5d e6 ff ff       	call   c0004d0f <st_clust.isra.1>
c00066b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066be:	e8 2f db ff ff       	call   c00041f2 <dir_register>
c00066c3:	89 c3                	mov    ebx,eax
c00066c5:	85 c0                	test   eax,eax
c00066c7:	0f 85 3b ff ff ff    	jne    c0006608 <f_mkdir+0xa1>
c00066cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d4:	75 74                	jne    c000674a <f_mkdir+0x1e3>
c00066d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066de:	83 c0 0c             	add    eax,0xc
c00066e1:	e8 fb b4 ff ff       	call   c0001be1 <st_dword>
c00066e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ea:	89 f2                	mov    edx,esi
c00066ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ef:	83 c0 34             	add    eax,0x34
c00066f2:	e8 ea b4 ff ff       	call   c0001be1 <st_dword>
c00066f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066fb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006702:	c1 e2 09             	shl    edx,0x9
c0006705:	83 c0 38             	add    eax,0x38
c0006708:	e8 d4 b4 ff ff       	call   c0001be1 <st_dword>
c000670d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006711:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006715:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006718:	c1 e2 09             	shl    edx,0x9
c000671b:	83 c0 28             	add    eax,0x28
c000671e:	e8 be b4 ff ff       	call   c0001be1 <st_dword>
c0006723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006727:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000672a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000672e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006731:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006735:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006739:	e8 8b d3 ff ff       	call   c0003ac9 <store_xdir>
c000673e:	89 c3                	mov    ebx,eax
c0006740:	85 c0                	test   eax,eax
c0006742:	0f 85 d4 fe ff ff    	jne    c000661c <f_mkdir+0xb5>
c0006748:	eb 30                	jmp    c000677a <f_mkdir+0x213>
c000674a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000674e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006753:	83 c0 16             	add    eax,0x16
c0006756:	e8 86 b4 ff ff       	call   c0001be1 <st_dword>
c000675b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675f:	89 f1                	mov    ecx,esi
c0006761:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006765:	e8 a5 e5 ff ff       	call   c0004d0f <st_clust.isra.1>
c000676a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000676e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	e8 f1 dc ff ff       	call   c0004474 <sync_fs>
c0006783:	89 c3                	mov    ebx,eax
c0006785:	e9 92 fe ff ff       	jmp    c000661c <f_mkdir+0xb5>
c000678a:	83 ec 80             	sub    esp,0xffffff80
c000678d:	89 d8                	mov    eax,ebx
c000678f:	5b                   	pop    ebx
c0006790:	5e                   	pop    esi
c0006791:	5f                   	pop    edi
c0006792:	c3                   	ret    

c0006793 <f_rename>:
c0006793:	55                   	push   ebp
c0006794:	57                   	push   edi
c0006795:	56                   	push   esi
c0006796:	53                   	push   ebx
c0006797:	81 ec fc 00 00 00    	sub    esp,0xfc
c000679d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00067a4:	e8 a4 b9 ff ff       	call   c000214d <get_ldnumber>
c00067a9:	b9 02 00 00 00       	mov    ecx,0x2
c00067ae:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067b2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067b9:	e8 3d be ff ff       	call   c00025fb <mount_volume>
c00067be:	85 c0                	test   eax,eax
c00067c0:	0f 85 b5 02 00 00    	jne    c0006a7b <f_rename+0x2e8>
c00067c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ca:	83 ec 0c             	sub    esp,0xc
c00067cd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067d1:	68 60 04 00 00       	push   0x460
c00067d6:	e8 f9 1d 00 00       	call   c00085d4 <ff_memalloc>
c00067db:	83 c4 10             	add    esp,0x10
c00067de:	89 c3                	mov    ebx,eax
c00067e0:	b8 11 00 00 00       	mov    eax,0x11
c00067e5:	85 db                	test   ebx,ebx
c00067e7:	0f 84 8e 02 00 00    	je     c0006a7b <f_rename+0x2e8>
c00067ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067f7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067fa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067fd:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006804:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006808:	e8 64 e5 ff ff       	call   c0004d71 <follow_path>
c000680d:	85 c0                	test   eax,eax
c000680f:	0f 85 52 02 00 00    	jne    c0006a67 <f_rename+0x2d4>
c0006815:	b8 06 00 00 00       	mov    eax,0x6
c000681a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006822:	0f 85 3f 02 00 00    	jne    c0006a67 <f_rename+0x2d4>
c0006828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000682c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000682f:	0f 85 05 01 00 00    	jne    c000693a <f_rename+0x1a7>
c0006835:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006838:	b9 40 00 00 00       	mov    ecx,0x40
c000683d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006841:	e8 a4 b3 ff ff       	call   c0001bea <mem_cpy>
c0006846:	b9 4c 00 00 00       	mov    ecx,0x4c
c000684b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000684f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006856:	e8 8f b3 ff ff       	call   c0001bea <mem_cpy>
c000685b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006862:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006869:	e8 03 e5 ff ff       	call   c0004d71 <follow_path>
c000686e:	85 c0                	test   eax,eax
c0006870:	75 29                	jne    c000689b <f_rename+0x108>
c0006872:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006876:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000687d:	74 0a                	je     c0006889 <f_rename+0xf6>
c000687f:	b8 08 00 00 00       	mov    eax,0x8
c0006884:	e9 de 01 00 00       	jmp    c0006a67 <f_rename+0x2d4>
c0006889:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006890:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006897:	75 e6                	jne    c000687f <f_rename+0xec>
c0006899:	eb 09                	jmp    c00068a4 <f_rename+0x111>
c000689b:	83 f8 04             	cmp    eax,0x4
c000689e:	0f 85 c3 01 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00068a4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068ab:	e8 42 d9 ff ff       	call   c00041f2 <dir_register>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	0f 85 af 01 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00068b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068bf:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068c2:	89 c5                	mov    ebp,eax
c00068c4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068cb:	8d 46 24             	lea    eax,[esi+0x24]
c00068ce:	e8 98 b2 ff ff       	call   c0001b6b <ld_word>
c00068d3:	b9 40 00 00 00       	mov    ecx,0x40
c00068d8:	89 c7                	mov    edi,eax
c00068da:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068de:	89 f0                	mov    eax,esi
c00068e0:	e8 05 b3 ff ff       	call   c0001bea <mem_cpy>
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	89 e9                	mov    ecx,ebp
c00068eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ee:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068f1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ff:	0f b7 d7             	movzx  edx,di
c0006902:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006905:	83 c0 24             	add    eax,0x24
c0006908:	e8 d0 b2 ff ff       	call   c0001bdd <st_word>
c000690d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006911:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006914:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006917:	a8 10                	test   al,0x10
c0006919:	75 06                	jne    c0006921 <f_rename+0x18e>
c000691b:	83 c8 20             	or     eax,0x20
c000691e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006921:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006928:	e8 9c d1 ff ff       	call   c0003ac9 <store_xdir>
c000692d:	85 c0                	test   eax,eax
c000692f:	0f 84 1c 01 00 00    	je     c0006a51 <f_rename+0x2be>
c0006935:	e9 2d 01 00 00       	jmp    c0006a67 <f_rename+0x2d4>
c000693a:	b9 20 00 00 00       	mov    ecx,0x20
c000693f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006946:	8d 44 24 18          	lea    eax,[esp+0x18]
c000694a:	e8 9b b2 ff ff       	call   c0001bea <mem_cpy>
c000694f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006954:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 86 b2 ff ff       	call   c0001bea <mem_cpy>
c0006964:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000696b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006972:	e8 fa e3 ff ff       	call   c0004d71 <follow_path>
c0006977:	85 c0                	test   eax,eax
c0006979:	75 27                	jne    c00069a2 <f_rename+0x20f>
c000697b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000697f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006986:	0f 85 f3 fe ff ff    	jne    c000687f <f_rename+0xec>
c000698c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006993:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000699a:	0f 85 df fe ff ff    	jne    c000687f <f_rename+0xec>
c00069a0:	eb 09                	jmp    c00069ab <f_rename+0x218>
c00069a2:	83 f8 04             	cmp    eax,0x4
c00069a5:	0f 85 bc 00 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00069ab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069b2:	e8 3b d8 ff ff       	call   c00041f2 <dir_register>
c00069b7:	85 c0                	test   eax,eax
c00069b9:	0f 85 a8 00 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00069bf:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069c6:	b9 13 00 00 00       	mov    ecx,0x13
c00069cb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069ce:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069d2:	e8 13 b2 ff ff       	call   c0001bea <mem_cpy>
c00069d7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069db:	a8 10                	test   al,0x10
c00069dd:	75 03                	jne    c00069e2 <f_rename+0x24f>
c00069df:	83 c8 20             	or     eax,0x20
c00069e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069ed:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069f1:	74 5e                	je     c0006a51 <f_rename+0x2be>
c00069f3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069fa:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069fe:	74 51                	je     c0006a51 <f_rename+0x2be>
c0006a00:	89 f2                	mov    edx,esi
c0006a02:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006a06:	8a 07                	mov    al,BYTE PTR [edi]
c0006a08:	e8 d9 e2 ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0006a0d:	89 c2                	mov    edx,eax
c0006a0f:	89 f8                	mov    eax,edi
c0006a11:	e8 ee b3 ff ff       	call   c0001e04 <clst2sect>
c0006a16:	89 c6                	mov    esi,eax
c0006a18:	89 d1                	mov    ecx,edx
c0006a1a:	b8 02 00 00 00       	mov    eax,0x2
c0006a1f:	09 f2                	or     edx,esi
c0006a21:	74 44                	je     c0006a67 <f_rename+0x2d4>
c0006a23:	89 f2                	mov    edx,esi
c0006a25:	89 f8                	mov    eax,edi
c0006a27:	e8 1d b9 ff ff       	call   c0002349 <move_window>
c0006a2c:	85 c0                	test   eax,eax
c0006a2e:	75 37                	jne    c0006a67 <f_rename+0x2d4>
c0006a30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a34:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a38:	75 17                	jne    c0006a51 <f_rename+0x2be>
c0006a3a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a3d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a44:	e8 c6 e2 ff ff       	call   c0004d0f <st_clust.isra.1>
c0006a49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a51:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a55:	e8 f4 d0 ff ff       	call   c0003b4e <dir_remove>
c0006a5a:	85 c0                	test   eax,eax
c0006a5c:	75 09                	jne    c0006a67 <f_rename+0x2d4>
c0006a5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a62:	e8 0d da ff ff       	call   c0004474 <sync_fs>
c0006a67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a6b:	83 ec 0c             	sub    esp,0xc
c0006a6e:	53                   	push   ebx
c0006a6f:	e8 78 1b 00 00       	call   c00085ec <ff_memfree>
c0006a74:	83 c4 10             	add    esp,0x10
c0006a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a7b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a81:	5b                   	pop    ebx
c0006a82:	5e                   	pop    esi
c0006a83:	5f                   	pop    edi
c0006a84:	5d                   	pop    ebp
c0006a85:	c3                   	ret    

c0006a86 <f_chmod>:
c0006a86:	57                   	push   edi
c0006a87:	b9 02 00 00 00       	mov    ecx,0x2
c0006a8c:	56                   	push   esi
c0006a8d:	53                   	push   ebx
c0006a8e:	83 ec 60             	sub    esp,0x60
c0006a91:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a95:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a99:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a9d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006aa1:	e8 55 bb ff ff       	call   c00025fb <mount_volume>
c0006aa6:	85 c0                	test   eax,eax
c0006aa8:	0f 85 af 00 00 00    	jne    c0006b5d <f_chmod+0xd7>
c0006aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab2:	83 ec 0c             	sub    esp,0xc
c0006ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006ab9:	68 60 04 00 00       	push   0x460
c0006abe:	e8 11 1b 00 00       	call   c00085d4 <ff_memalloc>
c0006ac3:	83 c4 10             	add    esp,0x10
c0006ac6:	89 c6                	mov    esi,eax
c0006ac8:	b8 11 00 00 00       	mov    eax,0x11
c0006acd:	85 f6                	test   esi,esi
c0006acf:	0f 84 88 00 00 00    	je     c0006b5d <f_chmod+0xd7>
c0006ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006adf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ae2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ae5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ae9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aed:	e8 7f e2 ff ff       	call   c0004d71 <follow_path>
c0006af2:	85 c0                	test   eax,eax
c0006af4:	75 53                	jne    c0006b49 <f_chmod+0xc3>
c0006af6:	b8 06 00 00 00       	mov    eax,0x6
c0006afb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006b00:	75 47                	jne    c0006b49 <f_chmod+0xc3>
c0006b02:	89 f9                	mov    ecx,edi
c0006b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b08:	83 e1 27             	and    ecx,0x27
c0006b0b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b0e:	75 1d                	jne    c0006b2d <f_chmod+0xa7>
c0006b10:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b13:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b16:	21 cb                	and    ebx,ecx
c0006b18:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b1b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b22:	e8 a2 cf ff ff       	call   c0003ac9 <store_xdir>
c0006b27:	85 c0                	test   eax,eax
c0006b29:	75 1e                	jne    c0006b49 <f_chmod+0xc3>
c0006b2b:	eb 13                	jmp    c0006b40 <f_chmod+0xba>
c0006b2d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b31:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b34:	21 cb                	and    ebx,ecx
c0006b36:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b39:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b3c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b44:	e8 2b d9 ff ff       	call   c0004474 <sync_fs>
c0006b49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b4d:	83 ec 0c             	sub    esp,0xc
c0006b50:	56                   	push   esi
c0006b51:	e8 96 1a 00 00       	call   c00085ec <ff_memfree>
c0006b56:	83 c4 10             	add    esp,0x10
c0006b59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b5d:	83 c4 60             	add    esp,0x60
c0006b60:	5b                   	pop    ebx
c0006b61:	5e                   	pop    esi
c0006b62:	5f                   	pop    edi
c0006b63:	c3                   	ret    

c0006b64 <f_utime>:
c0006b64:	56                   	push   esi
c0006b65:	b9 02 00 00 00       	mov    ecx,0x2
c0006b6a:	53                   	push   ebx
c0006b6b:	83 ec 64             	sub    esp,0x64
c0006b6e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b72:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b76:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b7a:	e8 7c ba ff ff       	call   c00025fb <mount_volume>
c0006b7f:	85 c0                	test   eax,eax
c0006b81:	0f 85 b5 00 00 00    	jne    c0006c3c <f_utime+0xd8>
c0006b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8b:	83 ec 0c             	sub    esp,0xc
c0006b8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b92:	68 60 04 00 00       	push   0x460
c0006b97:	e8 38 1a 00 00       	call   c00085d4 <ff_memalloc>
c0006b9c:	83 c4 10             	add    esp,0x10
c0006b9f:	89 c3                	mov    ebx,eax
c0006ba1:	b8 11 00 00 00       	mov    eax,0x11
c0006ba6:	85 db                	test   ebx,ebx
c0006ba8:	0f 84 8e 00 00 00    	je     c0006c3c <f_utime+0xd8>
c0006bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006bb8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bbb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbe:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc6:	e8 a6 e1 ff ff       	call   c0004d71 <follow_path>
c0006bcb:	85 c0                	test   eax,eax
c0006bcd:	75 59                	jne    c0006c28 <f_utime+0xc4>
c0006bcf:	b8 06 00 00 00       	mov    eax,0x6
c0006bd4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd9:	75 4d                	jne    c0006c28 <f_utime+0xc4>
c0006bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006be3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006be7:	c1 e2 10             	shl    edx,0x10
c0006bea:	09 ca                	or     edx,ecx
c0006bec:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bef:	75 1a                	jne    c0006c0b <f_utime+0xa7>
c0006bf1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bf4:	83 c0 0c             	add    eax,0xc
c0006bf7:	e8 e5 af ff ff       	call   c0001be1 <st_dword>
c0006bfc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c00:	e8 c4 ce ff ff       	call   c0003ac9 <store_xdir>
c0006c05:	85 c0                	test   eax,eax
c0006c07:	75 1f                	jne    c0006c28 <f_utime+0xc4>
c0006c09:	eb 14                	jmp    c0006c1f <f_utime+0xbb>
c0006c0b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006c0f:	83 c0 16             	add    eax,0x16
c0006c12:	e8 ca af ff ff       	call   c0001be1 <st_dword>
c0006c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c23:	e8 4c d8 ff ff       	call   c0004474 <sync_fs>
c0006c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2c:	83 ec 0c             	sub    esp,0xc
c0006c2f:	53                   	push   ebx
c0006c30:	e8 b7 19 00 00       	call   c00085ec <ff_memfree>
c0006c35:	83 c4 10             	add    esp,0x10
c0006c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c3c:	83 c4 64             	add    esp,0x64
c0006c3f:	5b                   	pop    ebx
c0006c40:	5e                   	pop    esi
c0006c41:	c3                   	ret    

c0006c42 <f_getlabel>:
c0006c42:	55                   	push   ebp
c0006c43:	31 c9                	xor    ecx,ecx
c0006c45:	57                   	push   edi
c0006c46:	56                   	push   esi
c0006c47:	53                   	push   ebx
c0006c48:	83 ec 6c             	sub    esp,0x6c
c0006c4b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c56:	e8 a0 b9 ff ff       	call   c00025fb <mount_volume>
c0006c5b:	89 c6                	mov    esi,eax
c0006c5d:	85 c0                	test   eax,eax
c0006c5f:	0f 85 c1 01 00 00    	jne    c0006e26 <f_getlabel+0x1e4>
c0006c65:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c6d:	0f 84 5f 01 00 00    	je     c0006dd2 <f_getlabel+0x190>
c0006c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c77:	31 d2                	xor    edx,edx
c0006c79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c7d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c89:	e8 39 c4 ff ff       	call   c00030c7 <dir_sdi>
c0006c8e:	85 c0                	test   eax,eax
c0006c90:	0f 85 2d 01 00 00    	jne    c0006dc3 <f_getlabel+0x181>
c0006c96:	ba 01 00 00 00       	mov    edx,0x1
c0006c9b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9f:	e8 33 cc ff ff       	call   c00038d7 <dir_read>
c0006ca4:	85 c0                	test   eax,eax
c0006ca6:	0f 85 17 01 00 00    	jne    c0006dc3 <f_getlabel+0x181>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cb3:	74 09                	je     c0006cbe <f_getlabel+0x7c>
c0006cb5:	31 db                	xor    ebx,ebx
c0006cb7:	31 c9                	xor    ecx,ecx
c0006cb9:	e9 c8 00 00 00       	jmp    c0006d86 <f_getlabel+0x144>
c0006cbe:	31 ed                	xor    ebp,ebp
c0006cc0:	31 db                	xor    ebx,ebx
c0006cc2:	31 ff                	xor    edi,edi
c0006cc4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cc8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ccc:	39 fa                	cmp    edx,edi
c0006cce:	76 4b                	jbe    c0006d1b <f_getlabel+0xd9>
c0006cd0:	47                   	inc    edi
c0006cd1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cd4:	01 d0                	add    eax,edx
c0006cd6:	e8 90 ae ff ff       	call   c0001b6b <ld_word>
c0006cdb:	66 85 ed             	test   bp,bp
c0006cde:	75 0d                	jne    c0006ced <f_getlabel+0xab>
c0006ce0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ce6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006ceb:	76 28                	jbe    c0006d15 <f_getlabel+0xd3>
c0006ced:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cf4:	89 e9                	mov    ecx,ebp
c0006cf6:	01 da                	add    edx,ebx
c0006cf8:	c1 e1 10             	shl    ecx,0x10
c0006cfb:	0f b7 c0             	movzx  eax,ax
c0006cfe:	09 c8                	or     eax,ecx
c0006d00:	b9 04 00 00 00       	mov    ecx,0x4
c0006d05:	e8 01 b0 ff ff       	call   c0001d0b <put_utf>
c0006d0a:	84 c0                	test   al,al
c0006d0c:	74 0b                	je     c0006d19 <f_getlabel+0xd7>
c0006d0e:	0f b6 c0             	movzx  eax,al
c0006d11:	01 c3                	add    ebx,eax
c0006d13:	31 c0                	xor    eax,eax
c0006d15:	89 c5                	mov    ebp,eax
c0006d17:	eb ab                	jmp    c0006cc4 <f_getlabel+0x82>
c0006d19:	31 db                	xor    ebx,ebx
c0006d1b:	66 85 ed             	test   bp,bp
c0006d1e:	74 02                	je     c0006d22 <f_getlabel+0xe0>
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d29:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d2d:	e9 a0 00 00 00       	jmp    c0006dd2 <f_getlabel+0x190>
c0006d32:	83 ff 0b             	cmp    edi,0xb
c0006d35:	74 11                	je     c0006d48 <f_getlabel+0x106>
c0006d37:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d40:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d43:	c1 e0 08             	shl    eax,0x8
c0006d46:	09 c2                	or     edx,eax
c0006d48:	0f b7 d2             	movzx  edx,dx
c0006d4b:	50                   	push   eax
c0006d4c:	50                   	push   eax
c0006d4d:	68 b5 01 00 00       	push   0x1b5
c0006d52:	52                   	push   edx
c0006d53:	e8 44 19 00 00       	call   c000869c <ff_oem2uni>
c0006d58:	83 c4 10             	add    esp,0x10
c0006d5b:	66 85 c0             	test   ax,ax
c0006d5e:	74 46                	je     c0006da6 <f_getlabel+0x164>
c0006d60:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d67:	0f b7 c0             	movzx  eax,ax
c0006d6a:	01 da                	add    edx,ebx
c0006d6c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d71:	e8 95 af ff ff       	call   c0001d0b <put_utf>
c0006d76:	84 c0                	test   al,al
c0006d78:	74 2c                	je     c0006da6 <f_getlabel+0x164>
c0006d7a:	0f b6 c0             	movzx  eax,al
c0006d7d:	01 c3                	add    ebx,eax
c0006d7f:	83 ff 0b             	cmp    edi,0xb
c0006d82:	74 24                	je     c0006da8 <f_getlabel+0x166>
c0006d84:	89 f9                	mov    ecx,edi
c0006d86:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d8a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d8d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d92:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d9b:	e8 9f ae ff ff       	call   c0001c3f <dbc_1st>
c0006da0:	85 c0                	test   eax,eax
c0006da2:	74 a4                	je     c0006d48 <f_getlabel+0x106>
c0006da4:	eb 8c                	jmp    c0006d32 <f_getlabel+0xf0>
c0006da6:	31 db                	xor    ebx,ebx
c0006da8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006daf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006db2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006db9:	74 17                	je     c0006dd2 <f_getlabel+0x190>
c0006dbb:	4b                   	dec    ebx
c0006dbc:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006dbf:	74 ee                	je     c0006daf <f_getlabel+0x16d>
c0006dc1:	eb 0f                	jmp    c0006dd2 <f_getlabel+0x190>
c0006dc3:	83 f8 04             	cmp    eax,0x4
c0006dc6:	75 5c                	jne    c0006e24 <f_getlabel+0x1e2>
c0006dc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dcf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dd2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dda:	74 4a                	je     c0006e26 <f_getlabel+0x1e4>
c0006ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006de3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006de6:	e8 5e b5 ff ff       	call   c0002349 <move_window>
c0006deb:	89 c6                	mov    esi,eax
c0006ded:	85 c0                	test   eax,eax
c0006def:	75 35                	jne    c0006e26 <f_getlabel+0x1e4>
c0006df1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006df5:	b8 43 00 00 00       	mov    eax,0x43
c0006dfa:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dfc:	80 f9 03             	cmp    cl,0x3
c0006dff:	74 0f                	je     c0006e10 <f_getlabel+0x1ce>
c0006e01:	31 c0                	xor    eax,eax
c0006e03:	80 f9 04             	cmp    cl,0x4
c0006e06:	0f 94 c0             	sete   al
c0006e09:	48                   	dec    eax
c0006e0a:	83 e0 c3             	and    eax,0xffffffc3
c0006e0d:	83 c0 64             	add    eax,0x64
c0006e10:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e14:	e8 5f ad ff ff       	call   c0001b78 <ld_dword>
c0006e19:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e20:	89 07                	mov    DWORD PTR [edi],eax
c0006e22:	eb 02                	jmp    c0006e26 <f_getlabel+0x1e4>
c0006e24:	89 c6                	mov    esi,eax
c0006e26:	83 c4 6c             	add    esp,0x6c
c0006e29:	89 f0                	mov    eax,esi
c0006e2b:	5b                   	pop    ebx
c0006e2c:	5e                   	pop    esi
c0006e2d:	5f                   	pop    edi
c0006e2e:	5d                   	pop    ebp
c0006e2f:	c3                   	ret    

c0006e30 <f_setlabel>:
c0006e30:	56                   	push   esi
c0006e31:	b9 02 00 00 00       	mov    ecx,0x2
c0006e36:	53                   	push   ebx
c0006e37:	83 ec 74             	sub    esp,0x74
c0006e3a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e3e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e45:	e8 b1 b7 ff ff       	call   c00025fb <mount_volume>
c0006e4a:	89 c6                	mov    esi,eax
c0006e4c:	85 c0                	test   eax,eax
c0006e4e:	0f 85 41 02 00 00    	jne    c0007095 <f_setlabel+0x265>
c0006e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e58:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e5b:	0f 85 8e 00 00 00    	jne    c0006eef <f_setlabel+0xbf>
c0006e61:	b9 16 00 00 00       	mov    ecx,0x16
c0006e66:	31 d2                	xor    edx,edx
c0006e68:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e6c:	31 db                	xor    ebx,ebx
c0006e6e:	e8 8c ad ff ff       	call   c0001bff <mem_set>
c0006e73:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e7a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e7d:	0f 86 0a 01 00 00    	jbe    c0006f8d <f_setlabel+0x15d>
c0006e83:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e8a:	e8 b6 ad ff ff       	call   c0001c45 <tchar2uni>
c0006e8f:	89 c6                	mov    esi,eax
c0006e91:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e96:	76 2a                	jbe    c0006ec2 <f_setlabel+0x92>
c0006e98:	83 f8 ff             	cmp    eax,0xffffffff
c0006e9b:	74 05                	je     c0006ea2 <f_setlabel+0x72>
c0006e9d:	83 fb 09             	cmp    ebx,0x9
c0006ea0:	76 0a                	jbe    c0006eac <f_setlabel+0x7c>
c0006ea2:	be 06 00 00 00       	mov    esi,0x6
c0006ea7:	e9 e9 01 00 00       	jmp    c0007095 <f_setlabel+0x265>
c0006eac:	89 c2                	mov    edx,eax
c0006eae:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eb2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006eb5:	c1 ea 10             	shr    edx,0x10
c0006eb8:	01 c8                	add    eax,ecx
c0006eba:	43                   	inc    ebx
c0006ebb:	e8 1d ad ff ff       	call   c0001bdd <st_word>
c0006ec0:	eb 04                	jmp    c0006ec6 <f_setlabel+0x96>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	74 dc                	je     c0006ea2 <f_setlabel+0x72>
c0006ec6:	89 f2                	mov    edx,esi
c0006ec8:	b8 d7 3f 02 c0       	mov    eax,0xc0023fd7
c0006ecd:	e8 5b ad ff ff       	call   c0001c2d <chk_chr>
c0006ed2:	85 c0                	test   eax,eax
c0006ed4:	75 cc                	jne    c0006ea2 <f_setlabel+0x72>
c0006ed6:	83 fb 0a             	cmp    ebx,0xa
c0006ed9:	77 c7                	ja     c0006ea2 <f_setlabel+0x72>
c0006edb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ede:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ee2:	0f b7 d6             	movzx  edx,si
c0006ee5:	01 c8                	add    eax,ecx
c0006ee7:	43                   	inc    ebx
c0006ee8:	e8 f0 ac ff ff       	call   c0001bdd <st_word>
c0006eed:	eb 84                	jmp    c0006e73 <f_setlabel+0x43>
c0006eef:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ef4:	ba 20 00 00 00       	mov    edx,0x20
c0006ef9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006efd:	31 db                	xor    ebx,ebx
c0006eff:	e8 fb ac ff ff       	call   c0001bff <mem_set>
c0006f04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f0e:	76 60                	jbe    c0006f70 <f_setlabel+0x140>
c0006f10:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f17:	e8 29 ad ff ff       	call   c0001c45 <tchar2uni>
c0006f1c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f21:	0f 87 7b ff ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0006f27:	83 ec 0c             	sub    esp,0xc
c0006f2a:	50                   	push   eax
c0006f2b:	e8 e0 17 00 00       	call   c0008710 <ff_wtoupper>
c0006f30:	5a                   	pop    edx
c0006f31:	59                   	pop    ecx
c0006f32:	68 b5 01 00 00       	push   0x1b5
c0006f37:	50                   	push   eax
c0006f38:	e8 c7 16 00 00       	call   c0008604 <ff_uni2oem>
c0006f3d:	83 c4 10             	add    esp,0x10
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	66 85 c0             	test   ax,ax
c0006f45:	0f 84 57 ff ff ff    	je     c0006ea2 <f_setlabel+0x72>
c0006f4b:	0f b7 d0             	movzx  edx,ax
c0006f4e:	b8 d0 3f 02 c0       	mov    eax,0xc0023fd0
c0006f53:	e8 d5 ac ff ff       	call   c0001c2d <chk_chr>
c0006f58:	85 c0                	test   eax,eax
c0006f5a:	0f 85 42 ff ff ff    	jne    c0006ea2 <f_setlabel+0x72>
c0006f60:	66 81 fe ff 00       	cmp    si,0xff
c0006f65:	0f 87 14 01 00 00    	ja     c000707f <f_setlabel+0x24f>
c0006f6b:	e9 fa 00 00 00       	jmp    c000706a <f_setlabel+0x23a>
c0006f70:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f75:	0f 84 27 ff ff ff    	je     c0006ea2 <f_setlabel+0x72>
c0006f7b:	85 db                	test   ebx,ebx
c0006f7d:	74 0e                	je     c0006f8d <f_setlabel+0x15d>
c0006f7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f82:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f87:	75 04                	jne    c0006f8d <f_setlabel+0x15d>
c0006f89:	89 c3                	mov    ebx,eax
c0006f8b:	eb ee                	jmp    c0006f7b <f_setlabel+0x14b>
c0006f8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f91:	31 d2                	xor    edx,edx
c0006f93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f97:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 1f c1 ff ff       	call   c00030c7 <dir_sdi>
c0006fa8:	89 c6                	mov    esi,eax
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 85 e3 00 00 00    	jne    c0007095 <f_setlabel+0x265>
c0006fb2:	ba 01 00 00 00       	mov    edx,0x1
c0006fb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fbb:	e8 17 c9 ff ff       	call   c00038d7 <dir_read>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	75 21                	jne    c0006fe5 <f_setlabel+0x1b5>
c0006fc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fc8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fcc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fcf:	74 5d                	je     c000702e <f_setlabel+0x1fe>
c0006fd1:	85 db                	test   ebx,ebx
c0006fd3:	74 0b                	je     c0006fe0 <f_setlabel+0x1b0>
c0006fd5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fda:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fde:	eb 70                	jmp    c0007050 <f_setlabel+0x220>
c0006fe0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fe3:	eb 70                	jmp    c0007055 <f_setlabel+0x225>
c0006fe5:	83 f8 04             	cmp    eax,0x4
c0006fe8:	75 7c                	jne    c0007066 <f_setlabel+0x236>
c0006fea:	85 db                	test   ebx,ebx
c0006fec:	0f 84 a3 00 00 00    	je     c0007095 <f_setlabel+0x265>
c0006ff2:	ba 01 00 00 00       	mov    edx,0x1
c0006ff7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ffb:	e8 51 ca ff ff       	call   c0003a51 <dir_alloc>
c0007000:	89 c6                	mov    esi,eax
c0007002:	85 c0                	test   eax,eax
c0007004:	0f 85 8b 00 00 00    	jne    c0007095 <f_setlabel+0x265>
c000700a:	31 d2                	xor    edx,edx
c000700c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007010:	b9 20 00 00 00       	mov    ecx,0x20
c0007015:	e8 e5 ab ff ff       	call   c0001bff <mem_set>
c000701a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000701e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007021:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007025:	75 18                	jne    c000703f <f_setlabel+0x20f>
c0007027:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000702a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007031:	b9 16 00 00 00       	mov    ecx,0x16
c0007036:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000703a:	83 c0 02             	add    eax,0x2
c000703d:	eb 9b                	jmp    c0006fda <f_setlabel+0x1aa>
c000703f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007043:	b9 0b 00 00 00       	mov    ecx,0xb
c0007048:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000704c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007050:	e8 95 ab ff ff       	call   c0001bea <mem_cpy>
c0007055:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007059:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000705d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007061:	e8 0e d4 ff ff       	call   c0004474 <sync_fs>
c0007066:	89 c6                	mov    esi,eax
c0007068:	eb 2b                	jmp    c0007095 <f_setlabel+0x265>
c000706a:	83 fb 0a             	cmp    ebx,0xa
c000706d:	0f 87 2f fe ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0007073:	89 f0                	mov    eax,esi
c0007075:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007079:	43                   	inc    ebx
c000707a:	e9 85 fe ff ff       	jmp    c0006f04 <f_setlabel+0xd4>
c000707f:	83 fb 09             	cmp    ebx,0x9
c0007082:	0f 87 1a fe ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0007088:	89 f0                	mov    eax,esi
c000708a:	66 c1 e8 08          	shr    ax,0x8
c000708e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007092:	43                   	inc    ebx
c0007093:	eb de                	jmp    c0007073 <f_setlabel+0x243>
c0007095:	89 f0                	mov    eax,esi
c0007097:	83 c4 74             	add    esp,0x74
c000709a:	5b                   	pop    ebx
c000709b:	5e                   	pop    esi
c000709c:	c3                   	ret    

c000709d <f_expand>:
c000709d:	55                   	push   ebp
c000709e:	57                   	push   edi
c000709f:	56                   	push   esi
c00070a0:	53                   	push   ebx
c00070a1:	83 ec 3c             	sub    esp,0x3c
c00070a4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00070a8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00070ac:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070b8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070bc:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070c4:	89 d8                	mov    eax,ebx
c00070c6:	e8 a3 b1 ff ff       	call   c000226e <validate>
c00070cb:	89 c5                	mov    ebp,eax
c00070cd:	85 c0                	test   eax,eax
c00070cf:	0f 85 f4 01 00 00    	jne    c00072c9 <f_expand+0x22c>
c00070d5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070d9:	85 ed                	test   ebp,ebp
c00070db:	0f 85 e8 01 00 00    	jne    c00072c9 <f_expand+0x22c>
c00070e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070e5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070e9:	75 0a                	jne    c00070f5 <f_expand+0x58>
c00070eb:	bd 07 00 00 00       	mov    ebp,0x7
c00070f0:	e9 d4 01 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00070f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070f8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070fb:	75 ee                	jne    c00070eb <f_expand+0x4e>
c00070fd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0007101:	74 e8                	je     c00070eb <f_expand+0x4e>
c0007103:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0007107:	8a 0e                	mov    cl,BYTE PTR [esi]
c0007109:	80 f9 04             	cmp    cl,0x4
c000710c:	74 07                	je     c0007115 <f_expand+0x78>
c000710e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007113:	77 d6                	ja     c00070eb <f_expand+0x4e>
c0007115:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007119:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000711d:	c1 e0 09             	shl    eax,0x9
c0007120:	8d 50 ff             	lea    edx,[eax-0x1]
c0007123:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007127:	0f 95 c2             	setne  dl
c000712a:	0f b6 d2             	movzx  edx,dl
c000712d:	89 d7                	mov    edi,edx
c000712f:	31 d2                	xor    edx,edx
c0007131:	52                   	push   edx
c0007132:	50                   	push   eax
c0007133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000713b:	e8 50 be 01 00       	call   c0022f90 <__udivdi3>
c0007140:	83 c4 10             	add    esp,0x10
c0007143:	01 f8                	add    eax,edi
c0007145:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007149:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000714c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007150:	83 ff 01             	cmp    edi,0x1
c0007153:	76 05                	jbe    c000715a <f_expand+0xbd>
c0007155:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007158:	77 05                	ja     c000715f <f_expand+0xc2>
c000715a:	bf 02 00 00 00       	mov    edi,0x2
c000715f:	80 f9 04             	cmp    cl,0x4
c0007162:	75 19                	jne    c000717d <f_expand+0xe0>
c0007164:	89 f0                	mov    eax,esi
c0007166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000716a:	89 fa                	mov    edx,edi
c000716c:	e8 f3 b9 ff ff       	call   c0002b64 <find_bitmap>
c0007171:	89 c6                	mov    esi,eax
c0007173:	85 c0                	test   eax,eax
c0007175:	0f 84 70 ff ff ff    	je     c00070eb <f_expand+0x4e>
c000717b:	eb 7f                	jmp    c00071fc <f_expand+0x15f>
c000717d:	89 fe                	mov    esi,edi
c000717f:	89 f9                	mov    ecx,edi
c0007181:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007189:	89 ca                	mov    edx,ecx
c000718b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000718f:	89 d8                	mov    eax,ebx
c0007191:	e8 3b bd ff ff       	call   c0002ed1 <get_fat>
c0007196:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000719a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000719e:	41                   	inc    ecx
c000719f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071a3:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c00071a6:	77 05                	ja     c00071ad <f_expand+0x110>
c00071a8:	b9 02 00 00 00       	mov    ecx,0x2
c00071ad:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071b2:	74 3e                	je     c00071f2 <f_expand+0x155>
c00071b4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071b9:	75 0a                	jne    c00071c5 <f_expand+0x128>
c00071bb:	bd 01 00 00 00       	mov    ebp,0x1
c00071c0:	e9 04 01 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00071c5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ca:	75 13                	jne    c00071df <f_expand+0x142>
c00071cc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071d4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071d8:	75 0f                	jne    c00071e9 <f_expand+0x14c>
c00071da:	e9 ce 00 00 00       	jmp    c00072ad <f_expand+0x210>
c00071df:	89 ce                	mov    esi,ecx
c00071e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071e9:	39 f9                	cmp    ecx,edi
c00071eb:	75 9c                	jne    c0007189 <f_expand+0xec>
c00071ed:	e9 f9 fe ff ff       	jmp    c00070eb <f_expand+0x4e>
c00071f2:	bd 02 00 00 00       	mov    ebp,0x2
c00071f7:	e9 cd 00 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00071fc:	83 f8 ff             	cmp    eax,0xffffffff
c00071ff:	74 ba                	je     c00071bb <f_expand+0x11e>
c0007201:	8d 7e ff             	lea    edi,[esi-0x1]
c0007204:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007208:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000720c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007211:	74 51                	je     c0007264 <f_expand+0x1c7>
c0007213:	83 ec 0c             	sub    esp,0xc
c0007216:	89 f2                	mov    edx,esi
c0007218:	6a 01                	push   0x1
c000721a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000721e:	e8 f4 b9 ff ff       	call   c0002c17 <change_bitmap>
c0007223:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007227:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000722b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000722f:	83 c4 10             	add    esp,0x10
c0007232:	85 c0                	test   eax,eax
c0007234:	74 2e                	je     c0007264 <f_expand+0x1c7>
c0007236:	eb 71                	jmp    c00072a9 <f_expand+0x20c>
c0007238:	83 c9 ff             	or     ecx,0xffffffff
c000723b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007240:	74 03                	je     c0007245 <f_expand+0x1a8>
c0007242:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007245:	89 fa                	mov    edx,edi
c0007247:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000724b:	e8 7c ba ff ff       	call   c0002ccc <put_fat>
c0007250:	85 c0                	test   eax,eax
c0007252:	75 55                	jne    c00072a9 <f_expand+0x20c>
c0007254:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007258:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000725c:	47                   	inc    edi
c000725d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007262:	75 d4                	jne    c0007238 <f_expand+0x19b>
c0007264:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007268:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000726c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007271:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007274:	74 53                	je     c00072c9 <f_expand+0x22c>
c0007276:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007279:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000727d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007281:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007285:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007289:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000728c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000728f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007292:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007298:	39 ca                	cmp    edx,ecx
c000729a:	77 2d                	ja     c00072c9 <f_expand+0x22c>
c000729c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c00072a0:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00072a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00072a7:	eb 20                	jmp    c00072c9 <f_expand+0x22c>
c00072a9:	89 c5                	mov    ebp,eax
c00072ab:	eb 1c                	jmp    c00072c9 <f_expand+0x22c>
c00072ad:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072b2:	74 0c                	je     c00072c0 <f_expand+0x223>
c00072b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072b8:	89 f7                	mov    edi,esi
c00072ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072be:	eb 9d                	jmp    c000725d <f_expand+0x1c0>
c00072c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072c7:	eb 9b                	jmp    c0007264 <f_expand+0x1c7>
c00072c9:	83 c4 3c             	add    esp,0x3c
c00072cc:	89 e8                	mov    eax,ebp
c00072ce:	5b                   	pop    ebx
c00072cf:	5e                   	pop    esi
c00072d0:	5f                   	pop    edi
c00072d1:	5d                   	pop    ebp
c00072d2:	c3                   	ret    

c00072d3 <f_forward>:
c00072d3:	55                   	push   ebp
c00072d4:	57                   	push   edi
c00072d5:	56                   	push   esi
c00072d6:	53                   	push   ebx
c00072d7:	83 ec 2c             	sub    esp,0x2c
c00072da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072de:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072e8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072ec:	89 d8                	mov    eax,ebx
c00072ee:	e8 7b af ff ff       	call   c000226e <validate>
c00072f3:	89 c5                	mov    ebp,eax
c00072f5:	85 c0                	test   eax,eax
c00072f7:	0f 85 aa 01 00 00    	jne    c00074a7 <f_forward+0x1d4>
c00072fd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007301:	85 ed                	test   ebp,ebp
c0007303:	0f 85 9e 01 00 00    	jne    c00074a7 <f_forward+0x1d4>
c0007309:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000730d:	0f 84 8f 01 00 00    	je     c00074a2 <f_forward+0x1cf>
c0007313:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007316:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007319:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000731c:	bf 00 00 00 00       	mov    edi,0x0
c0007321:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007324:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007328:	89 d1                	mov    ecx,edx
c000732a:	19 f9                	sbb    ecx,edi
c000732c:	0f 83 cf 00 00 00    	jae    c0007401 <f_forward+0x12e>
c0007332:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007336:	e9 c6 00 00 00       	jmp    c0007401 <f_forward+0x12e>
c000733b:	50                   	push   eax
c000733c:	50                   	push   eax
c000733d:	6a 00                	push   0x0
c000733f:	6a 00                	push   0x0
c0007341:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007345:	83 c4 10             	add    esp,0x10
c0007348:	85 c0                	test   eax,eax
c000734a:	0f 84 57 01 00 00    	je     c00074a7 <f_forward+0x1d4>
c0007350:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007353:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007357:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000735a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000735e:	89 d7                	mov    edi,edx
c0007360:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007363:	89 c6                	mov    esi,eax
c0007365:	0f ac fe 09          	shrd   esi,edi,0x9
c0007369:	21 ce                	and    esi,ecx
c000736b:	89 c1                	mov    ecx,eax
c000736d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007373:	0f 84 98 00 00 00    	je     c0007411 <f_forward+0x13e>
c0007379:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000737d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007380:	89 c8                	mov    eax,ecx
c0007382:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007386:	e8 79 aa ff ff       	call   c0001e04 <clst2sect>
c000738b:	89 d7                	mov    edi,edx
c000738d:	09 c7                	or     edi,eax
c000738f:	0f 84 9e 00 00 00    	je     c0007433 <f_forward+0x160>
c0007395:	31 ff                	xor    edi,edi
c0007397:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000739a:	01 c6                	add    esi,eax
c000739c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00073a0:	11 d7                	adc    edi,edx
c00073a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00073a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00073a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ac:	39 fa                	cmp    edx,edi
c00073ae:	0f 85 a2 00 00 00    	jne    c0007456 <f_forward+0x183>
c00073b4:	39 f0                	cmp    eax,esi
c00073b6:	0f 85 9a 00 00 00    	jne    c0007456 <f_forward+0x183>
c00073bc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073bf:	ba 00 02 00 00       	mov    edx,0x200
c00073c4:	25 ff 01 00 00       	and    eax,0x1ff
c00073c9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073cd:	29 c2                	sub    edx,eax
c00073cf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073d2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073d5:	39 d1                	cmp    ecx,edx
c00073d7:	76 02                	jbe    c00073db <f_forward+0x108>
c00073d9:	89 d1                	mov    ecx,edx
c00073db:	8d 73 50             	lea    esi,[ebx+0x50]
c00073de:	52                   	push   edx
c00073df:	01 c6                	add    esi,eax
c00073e1:	52                   	push   edx
c00073e2:	51                   	push   ecx
c00073e3:	56                   	push   esi
c00073e4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073e8:	83 c4 10             	add    esp,0x10
c00073eb:	85 c0                	test   eax,eax
c00073ed:	74 44                	je     c0007433 <f_forward+0x160>
c00073ef:	31 ff                	xor    edi,edi
c00073f1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073f4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073f7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073fb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ff:	01 07                	add    DWORD PTR [edi],eax
c0007401:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007406:	0f 85 2f ff ff ff    	jne    c000733b <f_forward+0x68>
c000740c:	e9 96 00 00 00       	jmp    c00074a7 <f_forward+0x1d4>
c0007411:	85 f6                	test   esi,esi
c0007413:	0f 85 60 ff ff ff    	jne    c0007379 <f_forward+0xa6>
c0007419:	89 d7                	mov    edi,edx
c000741b:	09 c7                	or     edi,eax
c000741d:	75 05                	jne    c0007424 <f_forward+0x151>
c000741f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007422:	eb 0a                	jmp    c000742e <f_forward+0x15b>
c0007424:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007427:	89 d8                	mov    eax,ebx
c0007429:	e8 a3 ba ff ff       	call   c0002ed1 <get_fat>
c000742e:	83 f8 01             	cmp    eax,0x1
c0007431:	77 0b                	ja     c000743e <f_forward+0x16b>
c0007433:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007437:	bd 02 00 00 00       	mov    ebp,0x2
c000743c:	eb 69                	jmp    c00074a7 <f_forward+0x1d4>
c000743e:	83 f8 ff             	cmp    eax,0xffffffff
c0007441:	75 0b                	jne    c000744e <f_forward+0x17b>
c0007443:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007447:	bd 01 00 00 00       	mov    ebp,0x1
c000744c:	eb 59                	jmp    c00074a7 <f_forward+0x1d4>
c000744e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007451:	e9 23 ff ff ff       	jmp    c0007379 <f_forward+0xa6>
c0007456:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000745a:	79 20                	jns    c000747c <f_forward+0x1a9>
c000745c:	83 ec 0c             	sub    esp,0xc
c000745f:	6a 01                	push   0x1
c0007461:	52                   	push   edx
c0007462:	50                   	push   eax
c0007463:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007467:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000746b:	50                   	push   eax
c000746c:	e8 c5 a6 ff ff       	call   c0001b36 <disk_write>
c0007471:	83 c4 20             	add    esp,0x20
c0007474:	85 c0                	test   eax,eax
c0007476:	75 cb                	jne    c0007443 <f_forward+0x170>
c0007478:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000747c:	83 ec 0c             	sub    esp,0xc
c000747f:	6a 01                	push   0x1
c0007481:	57                   	push   edi
c0007482:	56                   	push   esi
c0007483:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007487:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000748b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000748f:	50                   	push   eax
c0007490:	e8 8b a6 ff ff       	call   c0001b20 <disk_read>
c0007495:	83 c4 20             	add    esp,0x20
c0007498:	85 c0                	test   eax,eax
c000749a:	0f 84 1c ff ff ff    	je     c00073bc <f_forward+0xe9>
c00074a0:	eb a1                	jmp    c0007443 <f_forward+0x170>
c00074a2:	bd 07 00 00 00       	mov    ebp,0x7
c00074a7:	83 c4 2c             	add    esp,0x2c
c00074aa:	89 e8                	mov    eax,ebp
c00074ac:	5b                   	pop    ebx
c00074ad:	5e                   	pop    esi
c00074ae:	5f                   	pop    edi
c00074af:	5d                   	pop    ebp
c00074b0:	c3                   	ret    

c00074b1 <f_mkfs>:
c00074b1:	55                   	push   ebp
c00074b2:	57                   	push   edi
c00074b3:	56                   	push   esi
c00074b4:	53                   	push   ebx
c00074b5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074ba:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074c0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074c7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074ce:	e8 7a ac ff ff       	call   c000214d <get_ldnumber>
c00074d3:	85 c0                	test   eax,eax
c00074d5:	0f 88 ec 10 00 00    	js     c00085c7 <f_mkfs+0x1116>
c00074db:	8b 14 85 60 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd74a0]
c00074e2:	85 d2                	test   edx,edx
c00074e4:	74 03                	je     c00074e9 <f_mkfs+0x38>
c00074e6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074e9:	85 f6                	test   esi,esi
c00074eb:	75 05                	jne    c00074f2 <f_mkfs+0x41>
c00074ed:	be c0 3f 02 c0       	mov    esi,0xc0023fc0
c00074f2:	83 ec 0c             	sub    esp,0xc
c00074f5:	0f b6 c0             	movzx  eax,al
c00074f8:	bb 03 00 00 00       	mov    ebx,0x3
c00074fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007501:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007505:	e8 13 a6 ff ff       	call   c0001b1d <disk_initialize>
c000750a:	83 c4 10             	add    esp,0x10
c000750d:	a8 01                	test   al,0x1
c000750f:	0f 85 b2 10 00 00    	jne    c00085c7 <f_mkfs+0x1116>
c0007515:	bb 0a 00 00 00       	mov    ebx,0xa
c000751a:	a8 04                	test   al,0x4
c000751c:	0f 85 a5 10 00 00    	jne    c00085c7 <f_mkfs+0x1116>
c0007522:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007525:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007529:	85 c0                	test   eax,eax
c000752b:	75 20                	jne    c000754d <f_mkfs+0x9c>
c000752d:	51                   	push   ecx
c000752e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007532:	50                   	push   eax
c0007533:	6a 03                	push   0x3
c0007535:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007539:	e8 0e a6 ff ff       	call   c0001b4c <disk_ioctl>
c000753e:	83 c4 10             	add    esp,0x10
c0007541:	85 c0                	test   eax,eax
c0007543:	74 08                	je     c000754d <f_mkfs+0x9c>
c0007545:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007551:	8d 42 ff             	lea    eax,[edx-0x1]
c0007554:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007559:	77 04                	ja     c000755f <f_mkfs+0xae>
c000755b:	85 c2                	test   edx,eax
c000755d:	74 08                	je     c0007567 <f_mkfs+0xb6>
c000755f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007567:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000756a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000756e:	48                   	dec    eax
c000756f:	3c 01                	cmp    al,0x1
c0007571:	76 05                	jbe    c0007578 <f_mkfs+0xc7>
c0007573:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007578:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000757b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000757f:	48                   	dec    eax
c0007580:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007585:	77 07                	ja     c000758e <f_mkfs+0xdd>
c0007587:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000758c:	74 08                	je     c0007596 <f_mkfs+0xe5>
c000758e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007596:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007599:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000759f:	77 07                	ja     c00075a8 <f_mkfs+0xf7>
c00075a1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00075a4:	85 d8                	test   eax,ebx
c00075a6:	74 02                	je     c00075aa <f_mkfs+0xf9>
c00075a8:	31 db                	xor    ebx,ebx
c00075aa:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075b5:	77 0a                	ja     c00075c1 <f_mkfs+0x110>
c00075b7:	bb 11 00 00 00       	mov    ebx,0x11
c00075bc:	e9 06 10 00 00       	jmp    c00085c7 <f_mkfs+0x1116>
c00075c1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075c8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ca:	85 ed                	test   ebp,ebp
c00075cc:	75 1e                	jne    c00075ec <f_mkfs+0x13b>
c00075ce:	83 ec 0c             	sub    esp,0xc
c00075d1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075d8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075dd:	50                   	push   eax
c00075de:	e8 f1 0f 00 00       	call   c00085d4 <ff_memalloc>
c00075e3:	83 c4 10             	add    esp,0x10
c00075e6:	89 c5                	mov    ebp,eax
c00075e8:	85 c0                	test   eax,eax
c00075ea:	74 cb                	je     c00075b7 <f_mkfs+0x106>
c00075ec:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075f4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075fc:	52                   	push   edx
c00075fd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007601:	50                   	push   eax
c0007602:	6a 01                	push   0x1
c0007604:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007608:	e8 3f a5 ff ff       	call   c0001b4c <disk_ioctl>
c000760d:	83 c4 10             	add    esp,0x10
c0007610:	85 c0                	test   eax,eax
c0007612:	0f 85 4a 0f 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007618:	89 f1                	mov    ecx,esi
c000761a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007622:	83 e1 0f             	and    ecx,0xf
c0007625:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000762d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007631:	83 e6 08             	and    esi,0x8
c0007634:	75 56                	jne    c000768c <f_mkfs+0x1db>
c0007636:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000763a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000763e:	83 ff 00             	cmp    edi,0x0
c0007641:	76 20                	jbe    c0007663 <f_mkfs+0x1b2>
c0007643:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007648:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007650:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007656:	83 d7 ff             	adc    edi,0xffffffff
c0007659:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000765d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007661:	eb 21                	jmp    c0007684 <f_mkfs+0x1d3>
c0007663:	ba 3f 00 00 00       	mov    edx,0x3f
c0007668:	39 f2                	cmp    edx,esi
c000766a:	19 f8                	sbb    eax,edi
c000766c:	73 1e                	jae    c000768c <f_mkfs+0x1db>
c000766e:	83 c6 c1             	add    esi,0xffffffc1
c0007671:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007679:	83 d7 ff             	adc    edi,0xffffffff
c000767c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007680:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007684:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000768c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007690:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007694:	89 04 24             	mov    DWORD PTR [esp],eax
c0007697:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000769b:	31 c0                	xor    eax,eax
c000769d:	ba 7f 00 00 00       	mov    edx,0x7f
c00076a2:	89 c7                	mov    edi,eax
c00076a4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00076a7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00076ab:	0f 83 c5 0a 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c00076b1:	89 df                	mov    edi,ebx
c00076b3:	c1 ef 09             	shr    edi,0x9
c00076b6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076ba:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076c1:	c1 ef 09             	shr    edi,0x9
c00076c4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076c9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076cd:	74 29                	je     c00076f8 <f_mkfs+0x247>
c00076cf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076d5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076da:	0f 97 c2             	seta   dl
c00076dd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076e0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076e4:	0f 92 c0             	setb   al
c00076e7:	08 c2                	or     dl,al
c00076e9:	75 5b                	jne    c0007746 <f_mkfs+0x295>
c00076eb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ef:	83 e0 07             	and    eax,0x7
c00076f2:	3c 04                	cmp    al,0x4
c00076f4:	74 50                	je     c0007746 <f_mkfs+0x295>
c00076f6:	eb 1b                	jmp    c0007713 <f_mkfs+0x262>
c00076f8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076fd:	0f 87 73 0a 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c0007703:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007709:	76 08                	jbe    c0007713 <f_mkfs+0x262>
c000770b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007713:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007717:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000771b:	83 e0 01             	and    eax,0x1
c000771e:	80 e1 02             	and    cl,0x2
c0007721:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007725:	74 0d                	je     c0007734 <f_mkfs+0x283>
c0007727:	84 c0                	test   al,al
c0007729:	0f 84 53 09 00 00    	je     c0008082 <f_mkfs+0xbd1>
c000772f:	e9 12 08 00 00       	jmp    c0007f46 <f_mkfs+0xa95>
c0007734:	bb 13 00 00 00       	mov    ebx,0x13
c0007739:	84 c0                	test   al,al
c000773b:	0f 85 05 08 00 00    	jne    c0007f46 <f_mkfs+0xa95>
c0007741:	e9 39 0e 00 00       	jmp    c000857f <f_mkfs+0x10ce>
c0007746:	31 c0                	xor    eax,eax
c0007748:	ba ff 0f 00 00       	mov    edx,0xfff
c000774d:	89 c7                	mov    edi,eax
c000774f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007752:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007756:	0f 83 1a 0a 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c000775c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007762:	77 39                	ja     c000779d <f_mkfs+0x2ec>
c0007764:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007769:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007771:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007774:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007778:	73 08                	jae    c0007782 <f_mkfs+0x2d1>
c000777a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007782:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007787:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000778a:	b8 00 00 00 00       	mov    eax,0x0
c000778f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007793:	73 08                	jae    c000779d <f_mkfs+0x2ec>
c0007795:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000779d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00077a5:	83 c0 20             	add    eax,0x20
c00077a8:	83 d2 00             	adc    edx,0x0
c00077ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077af:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077b7:	31 d2                	xor    edx,edx
c00077b9:	31 ff                	xor    edi,edi
c00077bb:	52                   	push   edx
c00077bc:	89 fb                	mov    ebx,edi
c00077be:	50                   	push   eax
c00077bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077c7:	e8 c4 b7 01 00       	call   c0022f90 <__udivdi3>
c00077cc:	83 c4 10             	add    esp,0x10
c00077cf:	c1 e0 02             	shl    eax,0x2
c00077d2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077d6:	05 07 02 00 00       	add    eax,0x207
c00077db:	89 f1                	mov    ecx,esi
c00077dd:	c1 e8 09             	shr    eax,0x9
c00077e0:	83 c1 ff             	add    ecx,0xffffffff
c00077e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077e7:	83 d3 ff             	adc    ebx,0xffffffff
c00077ea:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077ee:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077f2:	31 d2                	xor    edx,edx
c00077f4:	01 c8                	add    eax,ecx
c00077f6:	11 da                	adc    edx,ebx
c00077f8:	89 c1                	mov    ecx,eax
c00077fa:	f7 de                	neg    esi
c00077fc:	89 d0                	mov    eax,edx
c00077fe:	83 d7 00             	adc    edi,0x0
c0007801:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007805:	f7 df                	neg    edi
c0007807:	21 f1                	and    ecx,esi
c0007809:	21 f8                	and    eax,edi
c000780b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000780f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007813:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007817:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000781b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000781f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007822:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007826:	0f ac d0 01          	shrd   eax,edx,0x1
c000782a:	89 df                	mov    edi,ebx
c000782c:	d1 ea                	shr    edx,1
c000782e:	39 c1                	cmp    ecx,eax
c0007830:	19 d7                	sbb    edi,edx
c0007832:	0f 83 3e 09 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c0007838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000783c:	31 d2                	xor    edx,edx
c000783e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007842:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007846:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000784a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000784d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007851:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007855:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007859:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000785d:	83 f8 0f             	cmp    eax,0xf
c0007860:	0f 86 10 09 00 00    	jbe    c0008176 <f_mkfs+0xcc5>
c0007866:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000786e:	0f 87 02 09 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c0007874:	31 d2                	xor    edx,edx
c0007876:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000787a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007882:	83 c0 07             	add    eax,0x7
c0007885:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000788d:	c1 e8 03             	shr    eax,0x3
c0007890:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007897:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000789b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789f:	c1 e0 09             	shl    eax,0x9
c00078a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078a6:	48                   	dec    eax
c00078a7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078ab:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00078af:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078b3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b7:	31 d2                	xor    edx,edx
c00078b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078bd:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078c8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078cd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078d1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078d5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078d9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078dd:	31 ff                	xor    edi,edi
c00078df:	31 f6                	xor    esi,esi
c00078e1:	31 db                	xor    ebx,ebx
c00078e3:	85 ff                	test   edi,edi
c00078e5:	74 05                	je     c00078ec <f_mkfs+0x43b>
c00078e7:	4f                   	dec    edi
c00078e8:	74 44                	je     c000792e <f_mkfs+0x47d>
c00078ea:	eb 4f                	jmp    c000793b <f_mkfs+0x48a>
c00078ec:	83 ec 0c             	sub    esp,0xc
c00078ef:	0f b7 c3             	movzx  eax,bx
c00078f2:	50                   	push   eax
c00078f3:	e8 18 0e 00 00       	call   c0008710 <ff_wtoupper>
c00078f8:	83 c4 10             	add    esp,0x10
c00078fb:	89 c1                	mov    ecx,eax
c00078fd:	8d 53 01             	lea    edx,[ebx+0x1]
c0007900:	66 39 c3             	cmp    bx,ax
c0007903:	75 3e                	jne    c0007943 <f_mkfs+0x492>
c0007905:	be 01 00 00 00       	mov    esi,0x1
c000790a:	89 df                	mov    edi,ebx
c000790c:	66 01 f7             	add    di,si
c000790f:	75 07                	jne    c0007918 <f_mkfs+0x467>
c0007911:	83 fe 7f             	cmp    esi,0x7f
c0007914:	77 31                	ja     c0007947 <f_mkfs+0x496>
c0007916:	eb 16                	jmp    c000792e <f_mkfs+0x47d>
c0007918:	83 ec 0c             	sub    esp,0xc
c000791b:	0f b7 ff             	movzx  edi,di
c000791e:	57                   	push   edi
c000791f:	e8 ec 0d 00 00       	call   c0008710 <ff_wtoupper>
c0007924:	83 c4 10             	add    esp,0x10
c0007927:	39 c7                	cmp    edi,eax
c0007929:	75 e6                	jne    c0007911 <f_mkfs+0x460>
c000792b:	46                   	inc    esi
c000792c:	eb dc                	jmp    c000790a <f_mkfs+0x459>
c000792e:	31 c0                	xor    eax,eax
c0007930:	89 d9                	mov    ecx,ebx
c0007932:	4e                   	dec    esi
c0007933:	0f 95 c0             	setne  al
c0007936:	43                   	inc    ebx
c0007937:	89 c7                	mov    edi,eax
c0007939:	eb 14                	jmp    c000794f <f_mkfs+0x49e>
c000793b:	89 f1                	mov    ecx,esi
c000793d:	01 f3                	add    ebx,esi
c000793f:	31 ff                	xor    edi,edi
c0007941:	eb 0c                	jmp    c000794f <f_mkfs+0x49e>
c0007943:	89 d3                	mov    ebx,edx
c0007945:	eb 08                	jmp    c000794f <f_mkfs+0x49e>
c0007947:	bf 02 00 00 00       	mov    edi,0x2
c000794c:	83 c9 ff             	or     ecx,0xffffffff
c000794f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007953:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007956:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000795a:	0f b6 c1             	movzx  eax,cl
c000795d:	e8 04 a7 ff ff       	call   c0002066 <xsum32>
c0007962:	66 c1 e9 08          	shr    cx,0x8
c0007966:	89 c2                	mov    edx,eax
c0007968:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000796b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000796f:	0f b7 c1             	movzx  eax,cx
c0007972:	e8 ef a6 ff ff       	call   c0002066 <xsum32>
c0007977:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000797c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007980:	66 85 db             	test   bx,bx
c0007983:	74 1f                	je     c00079a4 <f_mkfs+0x4f3>
c0007985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007988:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000798f:	83 c0 02             	add    eax,0x2
c0007992:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007998:	39 c2                	cmp    edx,eax
c000799a:	74 08                	je     c00079a4 <f_mkfs+0x4f3>
c000799c:	89 04 24             	mov    DWORD PTR [esp],eax
c000799f:	e9 3f ff ff ff       	jmp    c00078e3 <f_mkfs+0x432>
c00079a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00079a7:	83 ec 0c             	sub    esp,0xc
c00079aa:	05 01 02 00 00       	add    eax,0x201
c00079af:	c1 e8 09             	shr    eax,0x9
c00079b2:	50                   	push   eax
c00079b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079bf:	55                   	push   ebp
c00079c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079c4:	e8 6d a1 ff ff       	call   c0001b36 <disk_write>
c00079c9:	83 c4 20             	add    esp,0x20
c00079cc:	85 c0                	test   eax,eax
c00079ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079d1:	0f 85 8b 0b 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00079d7:	89 d0                	mov    eax,edx
c00079d9:	31 d2                	xor    edx,edx
c00079db:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079df:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079e3:	66 85 db             	test   bx,bx
c00079e6:	74 04                	je     c00079ec <f_mkfs+0x53b>
c00079e8:	31 c0                	xor    eax,eax
c00079ea:	eb b0                	jmp    c000799c <f_mkfs+0x4eb>
c00079ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079f0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079f4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079f8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079fe:	31 d2                	xor    edx,edx
c0007a00:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007a0b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007a0f:	c1 eb 09             	shr    ebx,0x9
c0007a12:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a1d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a25:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a29:	8d 70 01             	lea    esi,[eax+0x1]
c0007a2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a34:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a3b:	31 d2                	xor    edx,edx
c0007a3d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a42:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a45:	89 c1                	mov    ecx,eax
c0007a47:	89 e8                	mov    eax,ebp
c0007a49:	e8 b1 a1 ff ff       	call   c0001bff <mem_set>
c0007a4e:	31 c0                	xor    eax,eax
c0007a50:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a53:	76 10                	jbe    c0007a65 <f_mkfs+0x5b4>
c0007a55:	83 fe 07             	cmp    esi,0x7
c0007a58:	76 0b                	jbe    c0007a65 <f_mkfs+0x5b4>
c0007a5a:	40                   	inc    eax
c0007a5b:	83 ee 08             	sub    esi,0x8
c0007a5e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a63:	eb eb                	jmp    c0007a50 <f_mkfs+0x59f>
c0007a65:	b2 01                	mov    dl,0x1
c0007a67:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a6b:	85 f6                	test   esi,esi
c0007a6d:	74 0c                	je     c0007a7b <f_mkfs+0x5ca>
c0007a6f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a72:	76 07                	jbe    c0007a7b <f_mkfs+0x5ca>
c0007a74:	08 11                	or     BYTE PTR [ecx],dl
c0007a76:	4e                   	dec    esi
c0007a77:	d1 e2                	shl    edx,1
c0007a79:	eb f0                	jmp    c0007a6b <f_mkfs+0x5ba>
c0007a7b:	89 df                	mov    edi,ebx
c0007a7d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a81:	76 04                	jbe    c0007a87 <f_mkfs+0x5d6>
c0007a83:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a87:	83 ec 0c             	sub    esp,0xc
c0007a8a:	57                   	push   edi
c0007a8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a93:	55                   	push   ebp
c0007a94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a98:	e8 99 a0 ff ff       	call   c0001b36 <disk_write>
c0007a9d:	83 c4 20             	add    esp,0x20
c0007aa0:	85 c0                	test   eax,eax
c0007aa2:	0f 85 ba 0a 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007aa8:	31 d2                	xor    edx,edx
c0007aaa:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007aae:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007ab2:	29 fb                	sub    ebx,edi
c0007ab4:	0f 85 7a ff ff ff    	jne    c0007a34 <f_mkfs+0x583>
c0007aba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007abe:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ac6:	31 f6                	xor    esi,esi
c0007ac8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007acc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007acf:	31 d2                	xor    edx,edx
c0007ad1:	89 e8                	mov    eax,ebp
c0007ad3:	e8 27 a1 ff ff       	call   c0001bff <mem_set>
c0007ad8:	31 c9                	xor    ecx,ecx
c0007ada:	85 db                	test   ebx,ebx
c0007adc:	75 40                	jne    c0007b1e <f_mkfs+0x66d>
c0007ade:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ae3:	89 e8                	mov    eax,ebp
c0007ae5:	bb 02 00 00 00       	mov    ebx,0x2
c0007aea:	e8 f2 a0 ff ff       	call   c0001be1 <st_dword>
c0007aef:	8d 45 04             	lea    eax,[ebp+0x4]
c0007af2:	83 ca ff             	or     edx,0xffffffff
c0007af5:	e8 e7 a0 ff ff       	call   c0001be1 <st_dword>
c0007afa:	b9 08 00 00 00       	mov    ecx,0x8
c0007aff:	eb 1d                	jmp    c0007b1e <f_mkfs+0x66d>
c0007b01:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b04:	76 3b                	jbe    c0007b41 <f_mkfs+0x690>
c0007b06:	43                   	inc    ebx
c0007b07:	83 fe 01             	cmp    esi,0x1
c0007b0a:	89 da                	mov    edx,ebx
c0007b0c:	77 03                	ja     c0007b11 <f_mkfs+0x660>
c0007b0e:	83 ca ff             	or     edx,0xffffffff
c0007b11:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b15:	4e                   	dec    esi
c0007b16:	e8 c6 a0 ff ff       	call   c0001be1 <st_dword>
c0007b1b:	83 c1 04             	add    ecx,0x4
c0007b1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b22:	85 f6                	test   esi,esi
c0007b24:	75 db                	jne    c0007b01 <f_mkfs+0x650>
c0007b26:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b2b:	77 14                	ja     c0007b41 <f_mkfs+0x690>
c0007b2d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b31:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b38:	85 f6                	test   esi,esi
c0007b3a:	74 05                	je     c0007b41 <f_mkfs+0x690>
c0007b3c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b3f:	77 dd                	ja     c0007b1e <f_mkfs+0x66d>
c0007b41:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b45:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b49:	39 cf                	cmp    edi,ecx
c0007b4b:	76 02                	jbe    c0007b4f <f_mkfs+0x69e>
c0007b4d:	89 cf                	mov    edi,ecx
c0007b4f:	83 ec 0c             	sub    esp,0xc
c0007b52:	57                   	push   edi
c0007b53:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b57:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b5b:	55                   	push   ebp
c0007b5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b60:	e8 d1 9f ff ff       	call   c0001b36 <disk_write>
c0007b65:	83 c4 20             	add    esp,0x20
c0007b68:	85 c0                	test   eax,eax
c0007b6a:	0f 85 f2 09 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007b70:	31 d2                	xor    edx,edx
c0007b72:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b76:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b7a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b7e:	0f 85 48 ff ff ff    	jne    c0007acc <f_mkfs+0x61b>
c0007b84:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b87:	31 d2                	xor    edx,edx
c0007b89:	89 e8                	mov    eax,ebp
c0007b8b:	31 ff                	xor    edi,edi
c0007b8d:	e8 6d a0 ff ff       	call   c0001bff <mem_set>
c0007b92:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b95:	ba 02 00 00 00       	mov    edx,0x2
c0007b9a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b9e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007ba2:	e8 3a a0 ff ff       	call   c0001be1 <st_dword>
c0007ba7:	8d 45 38             	lea    eax,[ebp+0x38]
c0007baa:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007bae:	e8 2e a0 ff ff       	call   c0001be1 <st_dword>
c0007bb3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007bb6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007bba:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bbe:	e8 1e a0 ff ff       	call   c0001be1 <st_dword>
c0007bc3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bc6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bce:	83 c2 02             	add    edx,0x2
c0007bd1:	e8 0b a0 ff ff       	call   c0001be1 <st_dword>
c0007bd6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bd9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bdd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007be1:	e8 fb 9f ff ff       	call   c0001be1 <st_dword>
c0007be6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bea:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bef:	89 c6                	mov    esi,eax
c0007bf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bf5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007c00:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007c03:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c07:	39 cb                	cmp    ebx,ecx
c0007c09:	76 02                	jbe    c0007c0d <f_mkfs+0x75c>
c0007c0b:	89 cb                	mov    ebx,ecx
c0007c0d:	83 ec 0c             	sub    esp,0xc
c0007c10:	53                   	push   ebx
c0007c11:	57                   	push   edi
c0007c12:	56                   	push   esi
c0007c13:	55                   	push   ebp
c0007c14:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c18:	e8 19 9f ff ff       	call   c0001b36 <disk_write>
c0007c1d:	83 c4 20             	add    esp,0x20
c0007c20:	85 c0                	test   eax,eax
c0007c22:	0f 85 3a 09 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007c28:	31 d2                	xor    edx,edx
c0007c2a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c2f:	89 e8                	mov    eax,ebp
c0007c31:	e8 c9 9f ff ff       	call   c0001bff <mem_set>
c0007c36:	31 d2                	xor    edx,edx
c0007c38:	01 de                	add    esi,ebx
c0007c3a:	11 d7                	adc    edi,edx
c0007c3c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c3f:	75 bf                	jne    c0007c00 <f_mkfs+0x74f>
c0007c41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c49:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c51:	b9 00 02 00 00       	mov    ecx,0x200
c0007c56:	31 d2                	xor    edx,edx
c0007c58:	89 e8                	mov    eax,ebp
c0007c5a:	e8 a0 9f ff ff       	call   c0001bff <mem_set>
c0007c5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c64:	ba a0 40 02 c0       	mov    edx,0xc00240a0
c0007c69:	89 e8                	mov    eax,ebp
c0007c6b:	e8 7a 9f ff ff       	call   c0001bea <mem_cpy>
c0007c70:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c77:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c7b:	e8 64 9f ff ff       	call   c0001be4 <st_qword>
c0007c80:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c84:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c87:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c8b:	e8 54 9f ff ff       	call   c0001be4 <st_qword>
c0007c90:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c93:	ba 20 00 00 00       	mov    edx,0x20
c0007c98:	e8 44 9f ff ff       	call   c0001be1 <st_dword>
c0007c9d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007ca1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007ca5:	e8 37 9f ff ff       	call   c0001be1 <st_dword>
c0007caa:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007cae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007cb2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007cb6:	e8 26 9f ff ff       	call   c0001be1 <st_dword>
c0007cbb:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cbe:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cc2:	e8 1a 9f ff ff       	call   c0001be1 <st_dword>
c0007cc7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007ccb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cce:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cd1:	e8 0b 9f ff ff       	call   c0001be1 <st_dword>
c0007cd6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cd9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cde:	e8 fe 9e ff ff       	call   c0001be1 <st_dword>
c0007ce3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ce6:	ba 00 01 00 00       	mov    edx,0x100
c0007ceb:	e8 ed 9e ff ff       	call   c0001bdd <st_word>
c0007cf0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cf4:	b8 0a 00 00 00       	mov    eax,0xa
c0007cf9:	48                   	dec    eax
c0007cfa:	74 05                	je     c0007d01 <f_mkfs+0x850>
c0007cfc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cff:	eb f8                	jmp    c0007cf9 <f_mkfs+0x848>
c0007d01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d05:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007d09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d0d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d11:	74 05                	je     c0007d18 <f_mkfs+0x867>
c0007d13:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d16:	eb f5                	jmp    c0007d0d <f_mkfs+0x85c>
c0007d18:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d1b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d20:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d26:	31 db                	xor    ebx,ebx
c0007d28:	e8 b0 9e ff ff       	call   c0001bdd <st_word>
c0007d2d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d33:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d38:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d3b:	e8 9d 9e ff ff       	call   c0001bdd <st_word>
c0007d40:	31 c9                	xor    ecx,ecx
c0007d42:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d45:	83 f8 01             	cmp    eax,0x1
c0007d48:	76 13                	jbe    c0007d5d <f_mkfs+0x8ac>
c0007d4a:	83 f9 70             	cmp    ecx,0x70
c0007d4d:	74 0e                	je     c0007d5d <f_mkfs+0x8ac>
c0007d4f:	89 da                	mov    edx,ebx
c0007d51:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d56:	e8 0b a3 ff ff       	call   c0002066 <xsum32>
c0007d5b:	89 c3                	mov    ebx,eax
c0007d5d:	41                   	inc    ecx
c0007d5e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d64:	75 dc                	jne    c0007d42 <f_mkfs+0x891>
c0007d66:	89 f0                	mov    eax,esi
c0007d68:	89 fa                	mov    edx,edi
c0007d6a:	83 c0 01             	add    eax,0x1
c0007d6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d71:	83 d2 00             	adc    edx,0x0
c0007d74:	83 ec 0c             	sub    esp,0xc
c0007d77:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d7b:	6a 01                	push   0x1
c0007d7d:	57                   	push   edi
c0007d7e:	56                   	push   esi
c0007d7f:	55                   	push   ebp
c0007d80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d84:	e8 ad 9d ff ff       	call   c0001b36 <disk_write>
c0007d89:	83 c4 20             	add    esp,0x20
c0007d8c:	85 c0                	test   eax,eax
c0007d8e:	0f 85 ce 07 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	b9 00 02 00 00       	mov    ecx,0x200
c0007d9b:	89 e8                	mov    eax,ebp
c0007d9d:	e8 5d 9e ff ff       	call   c0001bff <mem_set>
c0007da2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007da7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007daa:	e8 2e 9e ff ff       	call   c0001bdd <st_word>
c0007daf:	89 f0                	mov    eax,esi
c0007db1:	89 fa                	mov    edx,edi
c0007db3:	83 c0 09             	add    eax,0x9
c0007db6:	83 d2 00             	adc    edx,0x0
c0007db9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dbc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007dc0:	31 c9                	xor    ecx,ecx
c0007dc2:	41                   	inc    ecx
c0007dc3:	89 da                	mov    edx,ebx
c0007dc5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dca:	e8 97 a2 ff ff       	call   c0002066 <xsum32>
c0007dcf:	89 c3                	mov    ebx,eax
c0007dd1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dd7:	75 e9                	jne    c0007dc2 <f_mkfs+0x911>
c0007dd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ddd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007de1:	83 c0 01             	add    eax,0x1
c0007de4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007de8:	83 d2 00             	adc    edx,0x0
c0007deb:	83 ec 0c             	sub    esp,0xc
c0007dee:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007df2:	6a 01                	push   0x1
c0007df4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007df8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dfc:	55                   	push   ebp
c0007dfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e01:	e8 30 9d ff ff       	call   c0001b36 <disk_write>
c0007e06:	83 c4 20             	add    esp,0x20
c0007e09:	85 c0                	test   eax,eax
c0007e0b:	0f 85 51 07 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007e11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e15:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e19:	75 09                	jne    c0007e24 <f_mkfs+0x973>
c0007e1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e1e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e22:	74 12                	je     c0007e36 <f_mkfs+0x985>
c0007e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e28:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e34:	eb 8a                	jmp    c0007dc0 <f_mkfs+0x90f>
c0007e36:	31 d2                	xor    edx,edx
c0007e38:	b9 00 02 00 00       	mov    ecx,0x200
c0007e3d:	89 e8                	mov    eax,ebp
c0007e3f:	e8 bb 9d ff ff       	call   c0001bff <mem_set>
c0007e44:	83 c6 0b             	add    esi,0xb
c0007e47:	83 d7 00             	adc    edi,0x0
c0007e4a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e4e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e52:	31 c9                	xor    ecx,ecx
c0007e54:	41                   	inc    ecx
c0007e55:	89 da                	mov    edx,ebx
c0007e57:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e5c:	e8 05 a2 ff ff       	call   c0002066 <xsum32>
c0007e61:	89 c3                	mov    ebx,eax
c0007e63:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e69:	75 e9                	jne    c0007e54 <f_mkfs+0x9a3>
c0007e6b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e6e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e72:	83 c6 01             	add    esi,0x1
c0007e75:	83 d7 00             	adc    edi,0x0
c0007e78:	83 ec 0c             	sub    esp,0xc
c0007e7b:	6a 01                	push   0x1
c0007e7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e85:	55                   	push   ebp
c0007e86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e8a:	e8 a7 9c ff ff       	call   c0001b36 <disk_write>
c0007e8f:	83 c4 20             	add    esp,0x20
c0007e92:	85 c0                	test   eax,eax
c0007e94:	0f 85 c8 06 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007e9a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e9e:	75 06                	jne    c0007ea6 <f_mkfs+0x9f5>
c0007ea0:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007ea4:	74 09                	je     c0007eaf <f_mkfs+0x9fe>
c0007ea6:	89 34 24             	mov    DWORD PTR [esp],esi
c0007ea9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007ead:	eb a3                	jmp    c0007e52 <f_mkfs+0x9a1>
c0007eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007eb3:	89 da                	mov    edx,ebx
c0007eb5:	01 e8                	add    eax,ebp
c0007eb7:	e8 25 9d ff ff       	call   c0001be1 <st_dword>
c0007ebc:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ec1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ec9:	75 e4                	jne    c0007eaf <f_mkfs+0x9fe>
c0007ecb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ece:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ed2:	83 c6 02             	add    esi,0x2
c0007ed5:	83 d7 00             	adc    edi,0x0
c0007ed8:	83 ec 0c             	sub    esp,0xc
c0007edb:	6a 01                	push   0x1
c0007edd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ee1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ee5:	55                   	push   ebp
c0007ee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eea:	e8 47 9c ff ff       	call   c0001b36 <disk_write>
c0007eef:	83 c4 20             	add    esp,0x20
c0007ef2:	85 c0                	test   eax,eax
c0007ef4:	0f 85 68 06 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007efa:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eff:	74 0d                	je     c0007f0e <f_mkfs+0xa5d>
c0007f01:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007f09:	e9 43 fd ff ff       	jmp    c0007c51 <f_mkfs+0x7a0>
c0007f0e:	b1 07                	mov    cl,0x7
c0007f10:	e9 e3 05 00 00       	jmp    c00084f8 <f_mkfs+0x1047>
c0007f15:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f1a:	0f 85 4f 02 00 00    	jne    c000816f <f_mkfs+0xcbe>
c0007f20:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f25:	0f 86 22 02 00 00    	jbe    c000814d <f_mkfs+0xc9c>
c0007f2b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f30:	0f 85 81 06 00 00    	jne    c00085b7 <f_mkfs+0x1106>
c0007f36:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f3d:	83 f8 40             	cmp    eax,0x40
c0007f40:	0f 87 51 06 00 00    	ja     c0008597 <f_mkfs+0x10e6>
c0007f46:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f4a:	85 ff                	test   edi,edi
c0007f4c:	75 1c                	jne    c0007f6a <f_mkfs+0xab9>
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	ba a0 3f 02 c0       	mov    edx,0xc0023fa0
c0007f56:	c1 e9 0c             	shr    ecx,0xc
c0007f59:	bf 01 00 00 00       	mov    edi,0x1
c0007f5e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f61:	66 85 c0             	test   ax,ax
c0007f64:	0f 85 95 01 00 00    	jne    c00080ff <f_mkfs+0xc4e>
c0007f6a:	31 d2                	xor    edx,edx
c0007f6c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f6f:	f7 f7                	div    edi
c0007f71:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f76:	0f 86 95 01 00 00    	jbe    c0008111 <f_mkfs+0xc60>
c0007f7c:	83 c0 02             	add    eax,0x2
c0007f7f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f84:	01 c0                	add    eax,eax
c0007f86:	05 ff 01 00 00       	add    eax,0x1ff
c0007f8b:	be 01 00 00 00       	mov    esi,0x1
c0007f90:	c1 e8 09             	shr    eax,0x9
c0007f93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f9b:	c1 e0 05             	shl    eax,0x5
c0007f9e:	c1 e8 09             	shr    eax,0x9
c0007fa1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007fa5:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fb0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fb4:	89 f0                	mov    eax,esi
c0007fb6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fba:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fbe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fc2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fca:	31 d2                	xor    edx,edx
c0007fcc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fd1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fd5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fd9:	31 db                	xor    ebx,ebx
c0007fdb:	01 c8                	add    eax,ecx
c0007fdd:	11 da                	adc    edx,ebx
c0007fdf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fe3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fe7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007feb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fef:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ff3:	f7 da                	neg    edx
c0007ff5:	21 d1                	and    ecx,edx
c0007ff7:	29 d9                	sub    ecx,ebx
c0007ff9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ffe:	0f 85 20 01 00 00    	jne    c0008124 <f_mkfs+0xc73>
c0008004:	31 db                	xor    ebx,ebx
c0008006:	01 ce                	add    esi,ecx
c0008008:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c000800c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008010:	31 d2                	xor    edx,edx
c0008012:	89 f8                	mov    eax,edi
c0008014:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008018:	c1 e0 04             	shl    eax,0x4
c000801b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000801f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008023:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008027:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000802b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000802e:	19 d3                	sbb    ebx,edx
c0008030:	0f 82 40 01 00 00    	jb     c0008176 <f_mkfs+0xcc5>
c0008036:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008039:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000803d:	89 c8                	mov    eax,ecx
c000803f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008044:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008048:	29 f0                	sub    eax,esi
c000804a:	29 d0                	sub    eax,edx
c000804c:	31 d2                	xor    edx,edx
c000804e:	f7 f7                	div    edi
c0008050:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008055:	89 c3                	mov    ebx,eax
c0008057:	0f 85 b8 fe ff ff    	jne    c0007f15 <f_mkfs+0xa64>
c000805d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008062:	0f 87 1d 01 00 00    	ja     c0008185 <f_mkfs+0xcd4>
c0008068:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000806d:	0f 85 03 01 00 00    	jne    c0008176 <f_mkfs+0xcc5>
c0008073:	83 ff 01             	cmp    edi,0x1
c0008076:	0f 86 fa 00 00 00    	jbe    c0008176 <f_mkfs+0xcc5>
c000807c:	d1 ef                	shr    edi,1
c000807e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008082:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008086:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008089:	85 db                	test   ebx,ebx
c000808b:	75 2d                	jne    c00080ba <f_mkfs+0xc09>
c000808d:	89 cb                	mov    ebx,ecx
c000808f:	ba b0 3f 02 c0       	mov    edx,0xc0023fb0
c0008094:	c1 eb 11             	shr    ebx,0x11
c0008097:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000809f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00080a2:	66 85 c0             	test   ax,ax
c00080a5:	74 11                	je     c00080b8 <f_mkfs+0xc07>
c00080a7:	83 c2 02             	add    edx,0x2
c00080aa:	39 d8                	cmp    eax,ebx
c00080ac:	77 0a                	ja     c00080b8 <f_mkfs+0xc07>
c00080ae:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080b2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080b6:	eb e7                	jmp    c000809f <f_mkfs+0xbee>
c00080b8:	31 db                	xor    ebx,ebx
c00080ba:	31 d2                	xor    edx,edx
c00080bc:	89 c8                	mov    eax,ecx
c00080be:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080c2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080c9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080ce:	c1 ea 09             	shr    edx,0x9
c00080d1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080da:	0f 87 96 00 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c00080e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080ec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080f0:	be 20 00 00 00       	mov    esi,0x20
c00080f5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080fa:	e9 a6 fe ff ff       	jmp    c0007fa5 <f_mkfs+0xaf4>
c00080ff:	83 c2 02             	add    edx,0x2
c0008102:	39 c8                	cmp    eax,ecx
c0008104:	0f 87 60 fe ff ff    	ja     c0007f6a <f_mkfs+0xab9>
c000810a:	01 ff                	add    edi,edi
c000810c:	e9 4d fe ff ff       	jmp    c0007f5e <f_mkfs+0xaad>
c0008111:	8d 04 40             	lea    eax,[eax+eax*2]
c0008114:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008119:	40                   	inc    eax
c000811a:	d1 e8                	shr    eax,1
c000811c:	83 c0 03             	add    eax,0x3
c000811f:	e9 62 fe ff ff       	jmp    c0007f86 <f_mkfs+0xad5>
c0008124:	31 d2                	xor    edx,edx
c0008126:	89 c8                	mov    eax,ecx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	85 d2                	test   edx,edx
c000812e:	74 0c                	je     c000813c <f_mkfs+0xc8b>
c0008130:	49                   	dec    ecx
c0008131:	46                   	inc    esi
c0008132:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008137:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000813c:	89 c8                	mov    eax,ecx
c000813e:	31 d2                	xor    edx,edx
c0008140:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008144:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008148:	e9 c3 fe ff ff       	jmp    c0008010 <f_mkfs+0xb5f>
c000814d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008152:	77 31                	ja     c0008185 <f_mkfs+0xcd4>
c0008154:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008159:	75 1b                	jne    c0008176 <f_mkfs+0xcc5>
c000815b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000815e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008162:	3d 80 00 00 00       	cmp    eax,0x80
c0008167:	0f 86 d9 fd ff ff    	jbe    c0007f46 <f_mkfs+0xa95>
c000816d:	eb 07                	jmp    c0008176 <f_mkfs+0xcc5>
c000816f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008174:	76 0a                	jbe    c0008180 <f_mkfs+0xccf>
c0008176:	bb 0e 00 00 00       	mov    ebx,0xe
c000817b:	e9 ff 03 00 00       	jmp    c000857f <f_mkfs+0x10ce>
c0008180:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008185:	31 d2                	xor    edx,edx
c0008187:	b9 00 02 00 00       	mov    ecx,0x200
c000818c:	89 e8                	mov    eax,ebp
c000818e:	e8 6c 9a ff ff       	call   c0001bff <mem_set>
c0008193:	b9 0b 00 00 00       	mov    ecx,0xb
c0008198:	ba c2 40 02 c0       	mov    edx,0xc00240c2
c000819d:	89 e8                	mov    eax,ebp
c000819f:	e8 46 9a ff ff       	call   c0001bea <mem_cpy>
c00081a4:	8d 45 0b             	lea    eax,[ebp+0xb]
c00081a7:	ba 00 02 00 00       	mov    edx,0x200
c00081ac:	e8 2c 9a ff ff       	call   c0001bdd <st_word>
c00081b1:	89 f8                	mov    eax,edi
c00081b3:	0f b7 d6             	movzx  edx,si
c00081b6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081b9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081bc:	e8 1c 9a ff ff       	call   c0001bdd <st_word>
c00081c1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081c5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ca:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081cd:	75 08                	jne    c00081d7 <f_mkfs+0xd26>
c00081cf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081d7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081de:	e8 fa 99 ff ff       	call   c0001bdd <st_word>
c00081e3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081e8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081ec:	39 d0                	cmp    eax,edx
c00081ee:	b8 00 00 00 00       	mov    eax,0x0
c00081f3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081f7:	72 0a                	jb     c0008203 <f_mkfs+0xd52>
c00081f9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081fc:	e8 dc 99 ff ff       	call   c0001bdd <st_word>
c0008201:	eb 08                	jmp    c000820b <f_mkfs+0xd5a>
c0008203:	8d 45 20             	lea    eax,[ebp+0x20]
c0008206:	e8 d6 99 ff ff       	call   c0001be1 <st_dword>
c000820b:	8d 45 18             	lea    eax,[ebp+0x18]
c000820e:	ba 3f 00 00 00       	mov    edx,0x3f
c0008213:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008217:	e8 c1 99 ff ff       	call   c0001bdd <st_word>
c000821c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000821f:	ba ff 00 00 00       	mov    edx,0xff
c0008224:	e8 b4 99 ff ff       	call   c0001bdd <st_word>
c0008229:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000822c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008230:	e8 ac 99 ff ff       	call   c0001be1 <st_dword>
c0008235:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000823a:	75 57                	jne    c0008293 <f_mkfs+0xde2>
c000823c:	8d 45 43             	lea    eax,[ebp+0x43]
c000823f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008244:	e8 98 99 ff ff       	call   c0001be1 <st_dword>
c0008249:	8d 45 24             	lea    eax,[ebp+0x24]
c000824c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008250:	e8 8c 99 ff ff       	call   c0001be1 <st_dword>
c0008255:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008258:	ba 02 00 00 00       	mov    edx,0x2
c000825d:	e8 7f 99 ff ff       	call   c0001be1 <st_dword>
c0008262:	8d 45 30             	lea    eax,[ebp+0x30]
c0008265:	ba 01 00 00 00       	mov    edx,0x1
c000826a:	e8 6e 99 ff ff       	call   c0001bdd <st_word>
c000826f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008272:	ba 06 00 00 00       	mov    edx,0x6
c0008277:	e8 61 99 ff ff       	call   c0001bdd <st_word>
c000827c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008280:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008284:	8d 45 47             	lea    eax,[ebp+0x47]
c0008287:	b9 13 00 00 00       	mov    ecx,0x13
c000828c:	ba ce 40 02 c0       	mov    edx,0xc00240ce
c0008291:	eb 2f                	jmp    c00082c2 <f_mkfs+0xe11>
c0008293:	8d 45 27             	lea    eax,[ebp+0x27]
c0008296:	ba 00 00 21 50       	mov    edx,0x50210000
c000829b:	e8 41 99 ff ff       	call   c0001be1 <st_dword>
c00082a0:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00082a5:	8d 45 16             	lea    eax,[ebp+0x16]
c00082a8:	e8 30 99 ff ff       	call   c0001bdd <st_word>
c00082ad:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082b1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082b5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082b8:	b9 13 00 00 00       	mov    ecx,0x13
c00082bd:	ba e2 40 02 c0       	mov    edx,0xc00240e2
c00082c2:	e8 23 99 ff ff       	call   c0001bea <mem_cpy>
c00082c7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082cd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082d2:	89 f0                	mov    eax,esi
c00082d4:	e8 04 99 ff ff       	call   c0001bdd <st_word>
c00082d9:	83 ec 0c             	sub    esp,0xc
c00082dc:	6a 01                	push   0x1
c00082de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082e6:	55                   	push   ebp
c00082e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082eb:	e8 46 98 ff ff       	call   c0001b36 <disk_write>
c00082f0:	83 c4 20             	add    esp,0x20
c00082f3:	85 c0                	test   eax,eax
c00082f5:	0f 85 67 02 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00082fb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008300:	0f 85 b7 00 00 00    	jne    c00083bd <f_mkfs+0xf0c>
c0008306:	83 ec 0c             	sub    esp,0xc
c0008309:	6a 01                	push   0x1
c000830b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008313:	83 c0 06             	add    eax,0x6
c0008316:	83 d2 00             	adc    edx,0x0
c0008319:	52                   	push   edx
c000831a:	50                   	push   eax
c000831b:	55                   	push   ebp
c000831c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008320:	e8 11 98 ff ff       	call   c0001b36 <disk_write>
c0008325:	83 c4 20             	add    esp,0x20
c0008328:	b9 00 02 00 00       	mov    ecx,0x200
c000832d:	31 d2                	xor    edx,edx
c000832f:	89 e8                	mov    eax,ebp
c0008331:	e8 c9 98 ff ff       	call   c0001bff <mem_set>
c0008336:	ba 52 52 61 41       	mov    edx,0x41615252
c000833b:	89 e8                	mov    eax,ebp
c000833d:	e8 9f 98 ff ff       	call   c0001be1 <st_dword>
c0008342:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008348:	ba 72 72 41 61       	mov    edx,0x61417272
c000834d:	e8 8f 98 ff ff       	call   c0001be1 <st_dword>
c0008352:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008355:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000835b:	e8 81 98 ff ff       	call   c0001be1 <st_dword>
c0008360:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008366:	ba 02 00 00 00       	mov    edx,0x2
c000836b:	e8 71 98 ff ff       	call   c0001be1 <st_dword>
c0008370:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008375:	89 f0                	mov    eax,esi
c0008377:	e8 61 98 ff ff       	call   c0001bdd <st_word>
c000837c:	83 ec 0c             	sub    esp,0xc
c000837f:	6a 01                	push   0x1
c0008381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008385:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008389:	83 c0 07             	add    eax,0x7
c000838c:	83 d2 00             	adc    edx,0x0
c000838f:	52                   	push   edx
c0008390:	50                   	push   eax
c0008391:	55                   	push   ebp
c0008392:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008396:	e8 9b 97 ff ff       	call   c0001b36 <disk_write>
c000839b:	83 c4 14             	add    esp,0x14
c000839e:	6a 01                	push   0x1
c00083a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083a4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083a8:	83 c0 01             	add    eax,0x1
c00083ab:	83 d2 00             	adc    edx,0x0
c00083ae:	52                   	push   edx
c00083af:	50                   	push   eax
c00083b0:	55                   	push   ebp
c00083b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083b5:	e8 7c 97 ff ff       	call   c0001b36 <disk_write>
c00083ba:	83 c4 20             	add    esp,0x20
c00083bd:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083c4:	31 d2                	xor    edx,edx
c00083c6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083cc:	31 db                	xor    ebx,ebx
c00083ce:	89 e8                	mov    eax,ebp
c00083d0:	e8 2a 98 ff ff       	call   c0001bff <mem_set>
c00083d5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083e1:	0f 94 c3             	sete   bl
c00083e4:	4b                   	dec    ebx
c00083e5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083eb:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083f6:	75 21                	jne    c0008419 <f_mkfs+0xf68>
c00083f8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083fd:	89 e8                	mov    eax,ebp
c00083ff:	e8 dd 97 ff ff       	call   c0001be1 <st_dword>
c0008404:	8d 45 04             	lea    eax,[ebp+0x4]
c0008407:	83 ca ff             	or     edx,0xffffffff
c000840a:	e8 d2 97 ff ff       	call   c0001be1 <st_dword>
c000840f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008412:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008417:	eb 04                	jmp    c000841d <f_mkfs+0xf6c>
c0008419:	89 da                	mov    edx,ebx
c000841b:	89 e8                	mov    eax,ebp
c000841d:	e8 bf 97 ff ff       	call   c0001be1 <st_dword>
c0008422:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008426:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000842a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000842e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008432:	39 ce                	cmp    esi,ecx
c0008434:	76 02                	jbe    c0008438 <f_mkfs+0xf87>
c0008436:	89 ce                	mov    esi,ecx
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	56                   	push   esi
c000843c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008440:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008444:	55                   	push   ebp
c0008445:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008449:	e8 e8 96 ff ff       	call   c0001b36 <disk_write>
c000844e:	83 c4 20             	add    esp,0x20
c0008451:	85 c0                	test   eax,eax
c0008453:	0f 85 09 01 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0008459:	31 d2                	xor    edx,edx
c000845b:	b9 00 02 00 00       	mov    ecx,0x200
c0008460:	89 e8                	mov    eax,ebp
c0008462:	e8 98 97 ff ff       	call   c0001bff <mem_set>
c0008467:	31 d2                	xor    edx,edx
c0008469:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000846d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008471:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008475:	75 b3                	jne    c000842a <f_mkfs+0xf79>
c0008477:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000847a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008481:	40                   	inc    eax
c0008482:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008486:	0f 87 65 ff ff ff    	ja     c00083f1 <f_mkfs+0xf40>
c000848c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008491:	74 04                	je     c0008497 <f_mkfs+0xfe6>
c0008493:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008497:	89 fb                	mov    ebx,edi
c0008499:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000849d:	76 04                	jbe    c00084a3 <f_mkfs+0xff2>
c000849f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00084a3:	83 ec 0c             	sub    esp,0xc
c00084a6:	53                   	push   ebx
c00084a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084af:	55                   	push   ebp
c00084b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084b4:	e8 7d 96 ff ff       	call   c0001b36 <disk_write>
c00084b9:	83 c4 20             	add    esp,0x20
c00084bc:	85 c0                	test   eax,eax
c00084be:	0f 85 9e 00 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00084c4:	31 d2                	xor    edx,edx
c00084c6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ca:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084ce:	29 df                	sub    edi,ebx
c00084d0:	75 c5                	jne    c0008497 <f_mkfs+0xfe6>
c00084d2:	b1 0c                	mov    cl,0xc
c00084d4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084d9:	74 1d                	je     c00084f8 <f_mkfs+0x1047>
c00084db:	b8 ff ff 00 00       	mov    eax,0xffff
c00084e0:	b1 06                	mov    cl,0x6
c00084e2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084e6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084ea:	72 0c                	jb     c00084f8 <f_mkfs+0x1047>
c00084ec:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084f1:	0f 94 c1             	sete   cl
c00084f4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084f8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084fd:	75 4c                	jne    c000854b <f_mkfs+0x109a>
c00084ff:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008503:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008507:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000850e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008515:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008520:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000852b:	0f b6 c9             	movzx  ecx,cl
c000852e:	83 ec 0c             	sub    esp,0xc
c0008531:	55                   	push   ebp
c0008532:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000853d:	e8 f9 bf ff ff       	call   c000453b <create_partition>
c0008542:	83 c4 10             	add    esp,0x10
c0008545:	89 c3                	mov    ebx,eax
c0008547:	85 c0                	test   eax,eax
c0008549:	75 34                	jne    c000857f <f_mkfs+0x10ce>
c000854b:	31 db                	xor    ebx,ebx
c000854d:	50                   	push   eax
c000854e:	6a 00                	push   0x0
c0008550:	6a 00                	push   0x0
c0008552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008556:	e8 f1 95 ff ff       	call   c0001b4c <disk_ioctl>
c000855b:	83 c4 10             	add    esp,0x10
c000855e:	85 c0                	test   eax,eax
c0008560:	74 1d                	je     c000857f <f_mkfs+0x10ce>
c0008562:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856a:	75 0c                	jne    c0008578 <f_mkfs+0x10c7>
c000856c:	83 ec 0c             	sub    esp,0xc
c000856f:	55                   	push   ebp
c0008570:	e8 77 00 00 00       	call   c00085ec <ff_memfree>
c0008575:	83 c4 10             	add    esp,0x10
c0008578:	bb 01 00 00 00       	mov    ebx,0x1
c000857d:	eb 48                	jmp    c00085c7 <f_mkfs+0x1116>
c000857f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008587:	75 3e                	jne    c00085c7 <f_mkfs+0x1116>
c0008589:	83 ec 0c             	sub    esp,0xc
c000858c:	55                   	push   ebp
c000858d:	e8 5a 00 00 00       	call   c00085ec <ff_memfree>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	eb 30                	jmp    c00085c7 <f_mkfs+0x1116>
c0008597:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000859c:	0f 85 eb fa ff ff    	jne    c000808d <f_mkfs+0xbdc>
c00085a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00085a6:	81 ff 80 00 00 00    	cmp    edi,0x80
c00085ac:	0f 86 b8 f9 ff ff    	jbe    c0007f6a <f_mkfs+0xab9>
c00085b2:	e9 bf fb ff ff       	jmp    c0008176 <f_mkfs+0xcc5>
c00085b7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085bc:	0f 85 c0 fa ff ff    	jne    c0008082 <f_mkfs+0xbd1>
c00085c2:	e9 af fb ff ff       	jmp    c0008176 <f_mkfs+0xcc5>
c00085c7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085cd:	89 d8                	mov    eax,ebx
c00085cf:	5b                   	pop    ebx
c00085d0:	5e                   	pop    esi
c00085d1:	5f                   	pop    edi
c00085d2:	5d                   	pop    ebp
c00085d3:	c3                   	ret    

c00085d4 <ff_memalloc>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 04 18 00 00       	call   c0009de7 <malloc>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	83 c4 0c             	add    esp,0xc
c00085e9:	c3                   	ret    
c00085ea:	66 90                	xchg   ax,ax

c00085ec <ff_memfree>:
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	83 ec 0c             	sub    esp,0xc
c00085f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085f6:	e8 fc 17 00 00       	call   c0009df7 <free>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	90                   	nop
c00085ff:	83 c4 0c             	add    esp,0xc
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <ff_uni2oem>:
c0008604:	83 ec 14             	sub    esp,0x14
c0008607:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000860b:	66 89 04 24          	mov    WORD PTR [esp],ax
c000860f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008616:	c7 44 24 0c 00 44 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024400
c000861e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008623:	77 0b                	ja     c0008630 <ff_uni2oem+0x2c>
c0008625:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008629:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000862e:	eb 60                	jmp    c0008690 <ff_uni2oem+0x8c>
c0008630:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008638:	77 56                	ja     c0008690 <ff_uni2oem+0x8c>
c000863a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008640:	75 4e                	jne    c0008690 <ff_uni2oem+0x8c>
c0008642:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008649:	eb 0d                	jmp    c0008658 <ff_uni2oem+0x54>
c000864b:	90                   	nop
c000864c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008651:	40                   	inc    eax
c0008652:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008657:	90                   	nop
c0008658:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000865e:	77 1c                	ja     c000867c <ff_uni2oem+0x78>
c0008660:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008665:	01 c0                	add    eax,eax
c0008667:	89 c2                	mov    edx,eax
c0008669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866d:	01 d0                	add    eax,edx
c000866f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008672:	0f b7 c0             	movzx  eax,ax
c0008675:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008679:	75 d1                	jne    c000864c <ff_uni2oem+0x48>
c000867b:	90                   	nop
c000867c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008681:	83 e8 80             	sub    eax,0xffffff80
c0008684:	25 ff 00 00 00       	and    eax,0xff
c0008689:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000868e:	66 90                	xchg   ax,ax
c0008690:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008695:	83 c4 14             	add    esp,0x14
c0008698:	c3                   	ret    
c0008699:	8d 76 00             	lea    esi,[esi+0x0]

c000869c <ff_oem2uni>:
c000869c:	83 ec 18             	sub    esp,0x18
c000869f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086a7:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00086ac:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086b0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086b7:	c7 44 24 10 00 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024400
c00086bf:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086c5:	77 0d                	ja     c00086d4 <ff_oem2uni+0x38>
c00086c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086cb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086d0:	eb 32                	jmp    c0008704 <ff_oem2uni+0x68>
c00086d2:	66 90                	xchg   ax,ax
c00086d4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086da:	75 28                	jne    c0008704 <ff_oem2uni+0x68>
c00086dc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086e3:	77 1f                	ja     c0008704 <ff_oem2uni+0x68>
c00086e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086ea:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086ef:	01 c0                	add    eax,eax
c00086f1:	89 c2                	mov    edx,eax
c00086f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f7:	01 d0                	add    eax,edx
c00086f9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086fc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008701:	8d 76 00             	lea    esi,[esi+0x0]
c0008704:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008709:	83 c4 18             	add    esp,0x18
c000870c:	c3                   	ret    
c000870d:	8d 76 00             	lea    esi,[esi+0x0]

c0008710 <ff_wtoupper>:
c0008710:	83 ec 10             	sub    esp,0x10
c0008713:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000871b:	0f 87 4f 01 00 00    	ja     c0008870 <ff_wtoupper+0x160>
c0008721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008725:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000872a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008731:	77 09                	ja     c000873c <ff_wtoupper+0x2c>
c0008733:	b8 00 42 02 c0       	mov    eax,0xc0024200
c0008738:	eb 0a                	jmp    c0008744 <ff_wtoupper+0x34>
c000873a:	66 90                	xchg   ax,ax
c000873c:	b8 40 41 02 c0       	mov    eax,0xc0024140
c0008741:	8d 76 00             	lea    esi,[esi+0x0]
c0008744:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008748:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000874c:	8d 50 02             	lea    edx,[eax+0x2]
c000874f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008753:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008756:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000875b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008761:	0f 84 fd 00 00 00    	je     c0008864 <ff_wtoupper+0x154>
c0008767:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000876c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008771:	0f 82 ed 00 00 00    	jb     c0008864 <ff_wtoupper+0x154>
c0008777:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000877b:	8d 50 02             	lea    edx,[eax+0x2]
c000877e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008782:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008785:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000878a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000878f:	66 c1 e8 08          	shr    ax,0x8
c0008793:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008798:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000879f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00087a4:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00087a9:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00087ae:	01 ca                	add    edx,ecx
c00087b0:	39 d0                	cmp    eax,edx
c00087b2:	0f 8d 8c 00 00 00    	jge    c0008844 <ff_wtoupper+0x134>
c00087b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087bd:	83 f8 08             	cmp    eax,0x8
c00087c0:	0f 87 9a 00 00 00    	ja     c0008860 <ff_wtoupper+0x150>
c00087c6:	8b 04 85 00 41 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf00]
c00087cd:	ff e0                	jmp    eax
c00087cf:	90                   	nop
c00087d0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087d5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087da:	29 c2                	sub    edx,eax
c00087dc:	89 d0                	mov    eax,edx
c00087de:	01 c0                	add    eax,eax
c00087e0:	89 c2                	mov    edx,eax
c00087e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087e6:	01 d0                	add    eax,edx
c00087e8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087eb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087f0:	eb 4e                	jmp    c0008840 <ff_wtoupper+0x130>
c00087f2:	66 90                	xchg   ax,ax
c00087f4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087fd:	83 e0 01             	and    eax,0x1
c0008800:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008805:	eb 39                	jmp    c0008840 <ff_wtoupper+0x130>
c0008807:	90                   	nop
c0008808:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000880e:	eb 30                	jmp    c0008840 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008816:	eb 28                	jmp    c0008840 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000881e:	eb 20                	jmp    c0008840 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008826:	eb 18                	jmp    c0008840 <ff_wtoupper+0x130>
c0008828:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000882e:	eb 10                	jmp    c0008840 <ff_wtoupper+0x130>
c0008830:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008836:	eb 08                	jmp    c0008840 <ff_wtoupper+0x130>
c0008838:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000883f:	90                   	nop
c0008840:	eb 1e                	jmp    c0008860 <ff_wtoupper+0x150>
c0008842:	66 90                	xchg   ax,ax
c0008844:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000884a:	0f 85 f8 fe ff ff    	jne    c0008748 <ff_wtoupper+0x38>
c0008850:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008855:	01 c0                	add    eax,eax
c0008857:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000885b:	e9 e8 fe ff ff       	jmp    c0008748 <ff_wtoupper+0x38>
c0008860:	90                   	nop
c0008861:	8d 76 00             	lea    esi,[esi+0x0]
c0008864:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008869:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000886d:	8d 76 00             	lea    esi,[esi+0x0]
c0008870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	c3                   	ret    

c0008878 <CPU::current()>:
c0008878:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000887d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008883:	c3                   	ret    

c0008884 <operator new(unsigned long)>:
c0008884:	e9 5e 15 00 00       	jmp    c0009de7 <malloc>

c0008889 <operator delete(void*)>:
c0008889:	e9 79 15 00 00       	jmp    c0009e07 <rfree>

c000888e <disableIRQs()>:
c000888e:	fa                   	cli    
c000888f:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0008895:	c3                   	ret    

c0008896 <enableIRQs()>:
c0008896:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000889b:	48                   	dec    eax
c000889c:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00088a1:	75 01                	jne    c00088a4 <enableIRQs()+0xe>
c00088a3:	fb                   	sti    
c00088a4:	c3                   	ret    

c00088a5 <lockScheduler()>:
c00088a5:	fa                   	cli    
c00088a6:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00088ac:	c3                   	ret    

c00088ad <unlockScheduler()>:
c00088ad:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00088b2:	48                   	dec    eax
c00088b3:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00088b8:	75 01                	jne    c00088bb <unlockScheduler()+0xe>
c00088ba:	fb                   	sti    
c00088bb:	c3                   	ret    

c00088bc <lockStuff()>:
c00088bc:	fa                   	cli    
c00088bd:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00088c3:	ff 05 e4 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e4
c00088c9:	c3                   	ret    

c00088ca <unlockStuff()>:
c00088ca:	83 ec 0c             	sub    esp,0xc
c00088cd:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00088d2:	48                   	dec    eax
c00088d3:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c00088d8:	75 18                	jne    c00088f2 <unlockStuff()+0x28>
c00088da:	83 3d e0 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a0e0,0x0
c00088e1:	74 0f                	je     c00088f2 <unlockStuff()+0x28>
c00088e3:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c00088ed:	e8 0a 06 01 00       	call   c0018efc <schedule()>
c00088f2:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00088f7:	48                   	dec    eax
c00088f8:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00088fd:	75 01                	jne    c0008900 <unlockStuff()+0x36>
c00088ff:	fb                   	sti    
c0008900:	83 c4 0c             	add    esp,0xc
c0008903:	c3                   	ret    

c0008904 <Virt::getAKernelVAS()>:
c0008904:	a1 f0 8c 02 c0       	mov    eax,ds:0xc0028cf0
c0008909:	c3                   	ret    

c000890a <__not_memcpy>:
c000890a:	57                   	push   edi
c000890b:	56                   	push   esi
c000890c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008910:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008914:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008918:	89 c7                	mov    edi,eax
c000891a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000891c:	5e                   	pop    esi
c000891d:	5f                   	pop    edi
c000891e:	c3                   	ret    
c000891f:	90                   	nop

c0008920 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008920:	83 ec 0c             	sub    esp,0xc
c0008923:	83 ec 08             	sub    esp,0x8
c0008926:	68 00 45 02 c0       	push   0xc0024500
c000892b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000892f:	e8 a8 7e ff ff       	call   c00007dc <strcmp>
c0008934:	83 c4 10             	add    esp,0x10
c0008937:	85 c0                	test   eax,eax
c0008939:	0f 94 c0             	sete   al
c000893c:	84 c0                	test   al,al
c000893e:	74 0c                	je     c000894c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008940:	b8 c8 8b 02 c0       	mov    eax,0xc0028bc8
c0008945:	e9 ea 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000894a:	66 90                	xchg   ax,ax
c000894c:	83 ec 08             	sub    esp,0x8
c000894f:	68 09 45 02 c0       	push   0xc0024509
c0008954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008958:	e8 7f 7e ff ff       	call   c00007dc <strcmp>
c000895d:	83 c4 10             	add    esp,0x10
c0008960:	85 c0                	test   eax,eax
c0008962:	0f 94 c0             	sete   al
c0008965:	84 c0                	test   al,al
c0008967:	74 0b                	je     c0008974 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008969:	b8 90 2f 02 c0       	mov    eax,0xc0022f90
c000896e:	e9 c1 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008973:	90                   	nop
c0008974:	83 ec 08             	sub    esp,0x8
c0008977:	68 13 45 02 c0       	push   0xc0024513
c000897c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008980:	e8 57 7e ff ff       	call   c00007dc <strcmp>
c0008985:	83 c4 10             	add    esp,0x10
c0008988:	85 c0                	test   eax,eax
c000898a:	0f 94 c0             	sete   al
c000898d:	84 c0                	test   al,al
c000898f:	74 0b                	je     c000899c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008991:	b8 c4 2c 02 c0       	mov    eax,0xc0022cc4
c0008996:	e9 99 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000899b:	90                   	nop
c000899c:	83 ec 08             	sub    esp,0x8
c000899f:	68 1c 45 02 c0       	push   0xc002451c
c00089a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089a8:	e8 2f 7e ff ff       	call   c00007dc <strcmp>
c00089ad:	83 c4 10             	add    esp,0x10
c00089b0:	85 c0                	test   eax,eax
c00089b2:	0f 94 c0             	sete   al
c00089b5:	84 c0                	test   al,al
c00089b7:	74 07                	je     c00089c0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089b9:	b8 90 30 02 c0       	mov    eax,0xc0023090
c00089be:	eb 74                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089c0:	83 ec 08             	sub    esp,0x8
c00089c3:	68 26 45 02 c0       	push   0xc0024526
c00089c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089cc:	e8 0b 7e ff ff       	call   c00007dc <strcmp>
c00089d1:	83 c4 10             	add    esp,0x10
c00089d4:	85 c0                	test   eax,eax
c00089d6:	0f 94 c0             	sete   al
c00089d9:	84 c0                	test   al,al
c00089db:	74 07                	je     c00089e4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089dd:	b8 10 2e 02 c0       	mov    eax,0xc0022e10
c00089e2:	eb 50                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089e4:	83 ec 08             	sub    esp,0x8
c00089e7:	68 2f 45 02 c0       	push   0xc002452f
c00089ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089f0:	e8 e7 7d ff ff       	call   c00007dc <strcmp>
c00089f5:	83 c4 10             	add    esp,0x10
c00089f8:	85 c0                	test   eax,eax
c00089fa:	0f 94 c0             	sete   al
c00089fd:	84 c0                	test   al,al
c00089ff:	74 07                	je     c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0008a01:	b8 cc 8b 02 c0       	mov    eax,0xc0028bcc
c0008a06:	eb 2c                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a08:	83 ec 08             	sub    esp,0x8
c0008a0b:	68 3c 45 02 c0       	push   0xc002453c
c0008a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a14:	e8 c3 7d ff ff       	call   c00007dc <strcmp>
c0008a19:	83 c4 10             	add    esp,0x10
c0008a1c:	85 c0                	test   eax,eax
c0008a1e:	0f 94 c0             	sete   al
c0008a21:	84 c0                	test   al,al
c0008a23:	74 07                	je     c0008a2c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a25:	b8 cd 8b 02 c0       	mov    eax,0xc0028bcd
c0008a2a:	eb 08                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a2c:	b8 00 00 00 00       	mov    eax,0x0
c0008a31:	8d 76 00             	lea    esi,[esi+0x0]
c0008a34:	83 c4 0c             	add    esp,0xc
c0008a37:	c3                   	ret    

c0008a38 <Computer::close(int, int, void*)>:
c0008a38:	57                   	push   edi
c0008a39:	56                   	push   esi
c0008a3a:	53                   	push   ebx
c0008a3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a43:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a47:	83 ec 0c             	sub    esp,0xc
c0008a4a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a50:	e8 7b 5d 00 00       	call   c000e7d0 <Device::closeAll()>
c0008a55:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a5b:	83 c4 10             	add    esp,0x10
c0008a5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a60:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a64:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a6c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a74:	5b                   	pop    ebx
c0008a75:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a78:	5e                   	pop    esi
c0008a79:	5f                   	pop    edi
c0008a7a:	ff e0                	jmp    eax

c0008a7c <Krnl::firstTask()>:
c0008a7c:	53                   	push   ebx
c0008a7d:	83 ec 14             	sub    esp,0x14
c0008a80:	68 49 45 02 c0       	push   0xc0024549
c0008a85:	e8 b7 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008a8a:	fb                   	sti    
c0008a8b:	c7 04 24 60 45 02 c0 	mov    DWORD PTR [esp],0xc0024560
c0008a92:	e8 aa 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008a97:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a9e:	e8 44 13 00 00       	call   c0009de7 <malloc>
c0008aa3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008aaa:	89 c3                	mov    ebx,eax
c0008aac:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0008ab2:	68 79 45 02 c0       	push   0xc0024579
c0008ab7:	6a 01                	push   0x1
c0008ab9:	50                   	push   eax
c0008aba:	e8 19 00 01 00       	call   c0018ad8 <Process::Process(bool, char const*, Process*, char**)>
c0008abf:	83 c4 20             	add    esp,0x20
c0008ac2:	68 ff 00 00 00       	push   0xff
c0008ac7:	6a 00                	push   0x0
c0008ac9:	68 df 97 00 c0       	push   0xc00097df
c0008ace:	53                   	push   ebx
c0008acf:	e8 0c 02 01 00       	call   c0018ce0 <Process::createThread(void (*)(void*), void*, int)>
c0008ad4:	6a 7a                	push   0x7a
c0008ad6:	6a 00                	push   0x0
c0008ad8:	68 24 97 01 c0       	push   0xc0019724
c0008add:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0008ae3:	e8 f8 01 01 00       	call   c0018ce0 <Process::createThread(void (*)(void*), void*, int)>
c0008ae8:	83 c4 14             	add    esp,0x14
c0008aeb:	a3 c8 a0 02 c0       	mov    ds:0xc002a0c8,eax
c0008af0:	68 6c 48 02 c0       	push   0xc002486c
c0008af5:	c6 05 cd 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028bcd,0x1
c0008afc:	e8 40 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b01:	e8 f9 0f 01 00       	call   c0019aff <Vm::initialise8086()>
c0008b06:	e8 5f 49 00 00       	call   c000d46a <Fs::initVFS()>
c0008b0b:	c7 04 24 86 45 02 c0 	mov    DWORD PTR [esp],0xc0024586
c0008b12:	e8 2a 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b17:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0008b1c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b22:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b24:	6a 00                	push   0x0
c0008b26:	6a 00                	push   0x0
c0008b28:	6a 00                	push   0x0
c0008b2a:	50                   	push   eax
c0008b2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b2e:	83 c4 14             	add    esp,0x14
c0008b31:	68 6c 48 02 c0       	push   0xc002486c
c0008b36:	e8 06 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b3b:	e8 06 e8 00 00       	call   c0017346 <Sys::loadSyscalls()>
c0008b40:	e8 67 c5 00 00       	call   c00150ac <Krnl::loadSystemEnv()>
c0008b45:	e8 b9 c9 00 00       	call   c0015503 <Krnl::setupPowerManager()>
c0008b4a:	83 c4 0c             	add    esp,0xc
c0008b4d:	6a 3a                	push   0x3a
c0008b4f:	68 a0 45 02 c0       	push   0xc00245a0
c0008b54:	68 a9 45 02 c0       	push   0xc00245a9
c0008b59:	e8 ab d5 00 00       	call   c0016109 <Reg::readIntWithDefault(char*, char*, int)>
c0008b5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b61:	e8 22 55 00 00       	call   c000e088 <User::loadClockSettings(int)>
c0008b66:	c7 04 24 90 48 02 c0 	mov    DWORD PTR [esp],0xc0024890
c0008b6d:	e8 cf 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b72:	58                   	pop    eax
c0008b73:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0008b78:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b7e:	e8 0d 5c 00 00       	call   c000e790 <Device::loadDriversForAll()>
c0008b83:	c7 04 24 b1 45 02 c0 	mov    DWORD PTR [esp],0xc00245b1
c0008b8a:	e8 b2 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b8f:	e8 80 c0 00 00       	call   c0014c14 <Krnl::startCPUs()>
c0008b94:	c7 04 24 cb 45 02 c0 	mov    DWORD PTR [esp],0xc00245cb
c0008b9b:	e8 a1 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008ba0:	5a                   	pop    edx
c0008ba1:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c0008ba7:	59                   	pop    ecx
c0008ba8:	6a 01                	push   0x1
c0008baa:	68 dc 45 02 c0       	push   0xc00245dc
c0008baf:	e8 62 f9 00 00       	call   c0018516 <Thr::loadDLL(char const*, bool)>
c0008bb4:	5a                   	pop    edx
c0008bb5:	59                   	pop    ecx
c0008bb6:	53                   	push   ebx
c0008bb7:	50                   	push   eax
c0008bb8:	e8 8a fb 00 00       	call   c0018747 <Thr::executeDLL(unsigned long, void*)>
c0008bbd:	83 c4 10             	add    esp,0x10
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	6a 02                	push   0x2
c0008bc5:	e8 2a 05 01 00       	call   c00190f4 <blockTask(TaskState)>
c0008bca:	83 c4 10             	add    esp,0x10
c0008bcd:	eb f1                	jmp    c0008bc0 <Krnl::firstTask()+0x144>
c0008bcf:	90                   	nop

c0008bd0 <Computer::Computer()>:
c0008bd0:	83 ec 0c             	sub    esp,0xc
c0008bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd7:	83 ec 08             	sub    esp,0x8
c0008bda:	68 f8 45 02 c0       	push   0xc00245f8
c0008bdf:	50                   	push   eax
c0008be0:	e8 65 5c 00 00       	call   c000e84a <Device::Device(char const*)>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	ba 40 49 02 c0       	mov    edx,0xc0024940
c0008bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf1:	89 10                	mov    DWORD PTR [eax],edx
c0008bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c05:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c13:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c19:	83 ca 04             	or     edx,0x4
c0008c1c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	0f b6 d0             	movzx  edx,al
c0008c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c4b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c5a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c61:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c67:	0f b6 d0             	movzx  edx,al
c0008c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c72:	83 e1 3f             	and    ecx,0x3f
c0008c75:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	0f b6 d0             	movzx  edx,al
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cb1:	8d 50 01             	lea    edx,[eax+0x1]
c0008cb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cb8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cbe:	0f b6 d0             	movzx  edx,al
c0008cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cc9:	83 e1 3f             	and    ecx,0x3f
c0008ccc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	0f b6 d0             	movzx  edx,al
c0008cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d02:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008d08:	8d 50 01             	lea    edx,[eax+0x1]
c0008d0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008d0f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d15:	0f b6 d0             	movzx  edx,al
c0008d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d20:	83 e1 3f             	and    ecx,0x3f
c0008d23:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d27:	90                   	nop
c0008d28:	83 c4 0c             	add    esp,0xc
c0008d2b:	c3                   	ret    

c0008d2c <Computer::setBootMessage(char const*)>:
c0008d2c:	c3                   	ret    
c0008d2d:	90                   	nop

c0008d2e <Computer::detectFeatures()>:
c0008d2e:	55                   	push   ebp
c0008d2f:	57                   	push   edi
c0008d30:	56                   	push   esi
c0008d31:	53                   	push   ebx
c0008d32:	83 ec 1c             	sub    esp,0x1c
c0008d35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d39:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d43:	e8 e1 74 ff ff       	call   c0000229 <detectCPUID>
c0008d48:	85 c0                	test   eax,eax
c0008d4a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d50:	0f 95 c2             	setne  dl
c0008d53:	83 e0 fd             	and    eax,0xfffffffd
c0008d56:	d1 e2                	shl    edx,1
c0008d58:	09 d0                	or     eax,edx
c0008d5a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d60:	a8 02                	test   al,0x2
c0008d62:	75 46                	jne    c0008daa <Computer::detectFeatures()+0x7c>
c0008d64:	f6 05 e1 8b 02 c0 04 	test   BYTE PTR ds:0xc0028be1,0x4
c0008d6b:	74 07                	je     c0008d74 <Computer::detectFeatures()+0x46>
c0008d6d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d74:	e8 dd 9e 01 00       	call   c0022c56 <x87Detect>
c0008d79:	83 e0 01             	and    eax,0x1
c0008d7c:	c1 e0 04             	shl    eax,0x4
c0008d7f:	88 c2                	mov    dl,al
c0008d81:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d87:	83 e0 ef             	and    eax,0xffffffef
c0008d8a:	09 d0                	or     eax,edx
c0008d8c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d92:	a8 10                	test   al,0x10
c0008d94:	0f 85 2a 01 00 00    	jne    c0008ec4 <Computer::detectFeatures()+0x196>
c0008d9a:	84 c0                	test   al,al
c0008d9c:	0f 88 45 01 00 00    	js     c0008ee7 <Computer::detectFeatures()+0x1b9>
c0008da2:	83 c4 1c             	add    esp,0x1c
c0008da5:	5b                   	pop    ebx
c0008da6:	5e                   	pop    esi
c0008da7:	5f                   	pop    edi
c0008da8:	5d                   	pop    ebp
c0008da9:	c3                   	ret    
c0008daa:	83 ec 0c             	sub    esp,0xc
c0008dad:	6a 20                	push   0x20
c0008daf:	e8 26 aa 00 00       	call   c00137da <CPU::cpuidCheckEDX(unsigned int)>
c0008db4:	83 e0 01             	and    eax,0x1
c0008db7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dbe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dc4:	83 e0 f7             	and    eax,0xfffffff7
c0008dc7:	09 d0                	or     eax,edx
c0008dc9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dcf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dd6:	e8 ff a9 00 00       	call   c00137da <CPU::cpuidCheckEDX(unsigned int)>
c0008ddb:	83 e0 01             	and    eax,0x1
c0008dde:	88 c2                	mov    dl,al
c0008de0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008de6:	83 e0 fe             	and    eax,0xfffffffe
c0008de9:	09 d0                	or     eax,edx
c0008deb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008df1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008df8:	e8 dd a9 00 00       	call   c00137da <CPU::cpuidCheckEDX(unsigned int)>
c0008dfd:	c1 e0 07             	shl    eax,0x7
c0008e00:	88 c2                	mov    dl,al
c0008e02:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008e08:	83 e0 7f             	and    eax,0x7f
c0008e0b:	09 d0                	or     eax,edx
c0008e0d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e13:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e1a:	e8 bb a9 00 00       	call   c00137da <CPU::cpuidCheckEDX(unsigned int)>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 e0 01             	and    eax,0x1
c0008e25:	c1 e0 05             	shl    eax,0x5
c0008e28:	88 c2                	mov    dl,al
c0008e2a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e30:	83 e0 df             	and    eax,0xffffffdf
c0008e33:	09 d0                	or     eax,edx
c0008e35:	f7 05 e0 8b 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028be0,0x401
c0008e3f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e45:	0f 84 c2 00 00 00    	je     c0008f0d <Computer::detectFeatures()+0x1df>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e5a:	88 c2                	mov    dl,al
c0008e5c:	83 e2 09             	and    edx,0x9
c0008e5f:	fe ca                	dec    dl
c0008e61:	75 09                	jne    c0008e6c <Computer::detectFeatures()+0x13e>
c0008e63:	83 e0 fe             	and    eax,0xfffffffe
c0008e66:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e6c:	83 ec 0c             	sub    esp,0xc
c0008e6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e73:	50                   	push   eax
c0008e74:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e78:	55                   	push   ebp
c0008e79:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e7d:	57                   	push   edi
c0008e7e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e82:	56                   	push   esi
c0008e83:	68 00 00 00 80       	push   0x80000000
c0008e88:	e8 c9 a8 00 00       	call   c0013756 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e8d:	83 c4 20             	add    esp,0x20
c0008e90:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e9b:	0f 86 c3 fe ff ff    	jbe    c0008d64 <Computer::detectFeatures()+0x36>
c0008ea1:	83 ec 0c             	sub    esp,0xc
c0008ea4:	50                   	push   eax
c0008ea5:	55                   	push   ebp
c0008ea6:	57                   	push   edi
c0008ea7:	56                   	push   esi
c0008ea8:	68 01 00 00 80       	push   0x80000001
c0008ead:	e8 a4 a8 00 00       	call   c0013756 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008eb2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ebc:	83 c4 20             	add    esp,0x20
c0008ebf:	e9 a0 fe ff ff       	jmp    c0008d64 <Computer::detectFeatures()+0x36>
c0008ec4:	e8 47 9d 01 00       	call   c0022c10 <absolutelyNoChanceInHell>
c0008ec9:	88 c2                	mov    dl,al
c0008ecb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ed1:	c1 e2 07             	shl    edx,0x7
c0008ed4:	83 e0 7f             	and    eax,0x7f
c0008ed7:	09 d0                	or     eax,edx
c0008ed9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008edf:	84 c0                	test   al,al
c0008ee1:	0f 89 bb fe ff ff    	jns    c0008da2 <Computer::detectFeatures()+0x74>
c0008ee7:	e8 94 9c 01 00       	call   c0022b80 <avxDetect>
c0008eec:	83 e0 01             	and    eax,0x1
c0008eef:	c1 e0 05             	shl    eax,0x5
c0008ef2:	88 c2                	mov    dl,al
c0008ef4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008efa:	83 e0 df             	and    eax,0xffffffdf
c0008efd:	09 d0                	or     eax,edx
c0008eff:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008f05:	83 c4 1c             	add    esp,0x1c
c0008f08:	5b                   	pop    ebx
c0008f09:	5e                   	pop    esi
c0008f0a:	5f                   	pop    edi
c0008f0b:	5d                   	pop    ebp
c0008f0c:	c3                   	ret    
c0008f0d:	83 ec 0c             	sub    esp,0xc
c0008f10:	68 00 02 00 00       	push   0x200
c0008f15:	e8 c0 a8 00 00       	call   c00137da <CPU::cpuidCheckEDX(unsigned int)>
c0008f1a:	83 c4 10             	add    esp,0x10
c0008f1d:	83 e0 01             	and    eax,0x1
c0008f20:	88 c2                	mov    dl,al
c0008f22:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f28:	83 e0 fe             	and    eax,0xfffffffe
c0008f2b:	09 d0                	or     eax,edx
c0008f2d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f33:	e9 1c ff ff ff       	jmp    c0008e54 <Computer::detectFeatures()+0x126>

c0008f38 <Computer::displayFeatures()>:
c0008f38:	53                   	push   ebx
c0008f39:	83 ec 14             	sub    esp,0x14
c0008f3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f40:	68 08 46 02 c0       	push   0xc0024608
c0008f45:	e8 89 41 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0008f4a:	83 c4 10             	add    esp,0x10
c0008f4d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f54:	0f 85 73 02 00 00    	jne    c00091cd <Computer::displayFeatures()+0x295>
c0008f5a:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0008f5f:	83 ec 08             	sub    esp,0x8
c0008f62:	50                   	push   eax
c0008f63:	68 1b 46 02 c0       	push   0xc002461b
c0008f68:	e8 66 41 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0008f6d:	83 c4 10             	add    esp,0x10
c0008f70:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f77:	0f 85 8c 02 00 00    	jne    c0009209 <Computer::displayFeatures()+0x2d1>
c0008f7d:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0008f82:	83 ec 08             	sub    esp,0x8
c0008f85:	50                   	push   eax
c0008f86:	68 2c 46 02 c0       	push   0xc002462c
c0008f8b:	e8 43 41 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f9a:	0f 85 5f 02 00 00    	jne    c00091ff <Computer::displayFeatures()+0x2c7>
c0008fa0:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0008fa5:	83 ec 08             	sub    esp,0x8
c0008fa8:	50                   	push   eax
c0008fa9:	68 3d 46 02 c0       	push   0xc002463d
c0008fae:	e8 20 41 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0008fb3:	83 c4 10             	add    esp,0x10
c0008fb6:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fbd:	0f 85 32 02 00 00    	jne    c00091f5 <Computer::displayFeatures()+0x2bd>
c0008fc3:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0008fc8:	83 ec 08             	sub    esp,0x8
c0008fcb:	50                   	push   eax
c0008fcc:	68 4e 46 02 c0       	push   0xc002464e
c0008fd1:	e8 fd 40 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fe0:	0f 85 05 02 00 00    	jne    c00091eb <Computer::displayFeatures()+0x2b3>
c0008fe6:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0008feb:	83 ec 08             	sub    esp,0x8
c0008fee:	50                   	push   eax
c0008fef:	68 5f 46 02 c0       	push   0xc002465f
c0008ff4:	e8 da 40 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0008ff9:	83 c4 10             	add    esp,0x10
c0008ffc:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0009003:	0f 85 d8 01 00 00    	jne    c00091e1 <Computer::displayFeatures()+0x2a9>
c0009009:	b8 05 46 02 c0       	mov    eax,0xc0024605
c000900e:	83 ec 08             	sub    esp,0x8
c0009011:	50                   	push   eax
c0009012:	68 70 46 02 c0       	push   0xc0024670
c0009017:	e8 b7 40 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000901c:	83 c4 10             	add    esp,0x10
c000901f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c0009026:	0f 85 ab 01 00 00    	jne    c00091d7 <Computer::displayFeatures()+0x29f>
c000902c:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0009031:	83 ec 08             	sub    esp,0x8
c0009034:	50                   	push   eax
c0009035:	68 81 46 02 c0       	push   0xc0024681
c000903a:	e8 94 40 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000903f:	83 c4 10             	add    esp,0x10
c0009042:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009049:	0f 88 1b 02 00 00    	js     c000926a <Computer::displayFeatures()+0x332>
c000904f:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0009054:	83 ec 08             	sub    esp,0x8
c0009057:	50                   	push   eax
c0009058:	68 92 46 02 c0       	push   0xc0024692
c000905d:	e8 71 40 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0009062:	83 c4 10             	add    esp,0x10
c0009065:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000906c:	0f 85 a1 01 00 00    	jne    c0009213 <Computer::displayFeatures()+0x2db>
c0009072:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0009077:	83 ec 08             	sub    esp,0x8
c000907a:	50                   	push   eax
c000907b:	68 a3 46 02 c0       	push   0xc00246a3
c0009080:	e8 4e 40 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0009085:	83 c4 10             	add    esp,0x10
c0009088:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000908f:	0f 85 cb 01 00 00    	jne    c0009260 <Computer::displayFeatures()+0x328>
c0009095:	b8 05 46 02 c0       	mov    eax,0xc0024605
c000909a:	83 ec 08             	sub    esp,0x8
c000909d:	50                   	push   eax
c000909e:	68 b4 46 02 c0       	push   0xc00246b4
c00090a3:	e8 2b 40 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c00090b2:	0f 85 9e 01 00 00    	jne    c0009256 <Computer::displayFeatures()+0x31e>
c00090b8:	b8 05 46 02 c0       	mov    eax,0xc0024605
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	50                   	push   eax
c00090c1:	68 c5 46 02 c0       	push   0xc00246c5
c00090c6:	e8 08 40 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090d5:	0f 85 71 01 00 00    	jne    c000924c <Computer::displayFeatures()+0x314>
c00090db:	b8 05 46 02 c0       	mov    eax,0xc0024605
c00090e0:	83 ec 08             	sub    esp,0x8
c00090e3:	50                   	push   eax
c00090e4:	68 d6 46 02 c0       	push   0xc00246d6
c00090e9:	e8 e5 3f 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00090ee:	83 c4 10             	add    esp,0x10
c00090f1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090f8:	0f 85 44 01 00 00    	jne    c0009242 <Computer::displayFeatures()+0x30a>
c00090fe:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0009103:	83 ec 08             	sub    esp,0x8
c0009106:	50                   	push   eax
c0009107:	68 e7 46 02 c0       	push   0xc00246e7
c000910c:	e8 c2 3f 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000911b:	0f 85 17 01 00 00    	jne    c0009238 <Computer::displayFeatures()+0x300>
c0009121:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0009126:	83 ec 08             	sub    esp,0x8
c0009129:	50                   	push   eax
c000912a:	68 f8 46 02 c0       	push   0xc00246f8
c000912f:	e8 9f 3f 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0009134:	83 c4 10             	add    esp,0x10
c0009137:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000913e:	0f 85 ea 00 00 00    	jne    c000922e <Computer::displayFeatures()+0x2f6>
c0009144:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0009149:	83 ec 08             	sub    esp,0x8
c000914c:	50                   	push   eax
c000914d:	68 09 47 02 c0       	push   0xc0024709
c0009152:	e8 7c 3f 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0009157:	83 c4 10             	add    esp,0x10
c000915a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009161:	0f 88 0d 01 00 00    	js     c0009274 <Computer::displayFeatures()+0x33c>
c0009167:	b8 05 46 02 c0       	mov    eax,0xc0024605
c000916c:	83 ec 08             	sub    esp,0x8
c000916f:	50                   	push   eax
c0009170:	68 1a 47 02 c0       	push   0xc002471a
c0009175:	e8 59 3f 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c0009184:	0f 85 9a 00 00 00    	jne    c0009224 <Computer::displayFeatures()+0x2ec>
c000918a:	b8 05 46 02 c0       	mov    eax,0xc0024605
c000918f:	83 ec 08             	sub    esp,0x8
c0009192:	50                   	push   eax
c0009193:	68 2b 47 02 c0       	push   0xc002472b
c0009198:	e8 36 3f 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000919d:	83 c4 10             	add    esp,0x10
c00091a0:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c00091a7:	75 74                	jne    c000921d <Computer::displayFeatures()+0x2e5>
c00091a9:	b8 05 46 02 c0       	mov    eax,0xc0024605
c00091ae:	83 ec 08             	sub    esp,0x8
c00091b1:	50                   	push   eax
c00091b2:	68 3c 47 02 c0       	push   0xc002473c
c00091b7:	e8 17 3f 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00091bc:	c7 44 24 20 3b 67 02 c0 	mov    DWORD PTR [esp+0x20],0xc002673b
c00091c4:	83 c4 18             	add    esp,0x18
c00091c7:	5b                   	pop    ebx
c00091c8:	e9 06 3f 00 00       	jmp    c000d0d3 <Dbg::kprintf(char const*, ...)>
c00091cd:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00091d2:	e9 88 fd ff ff       	jmp    c0008f5f <Computer::displayFeatures()+0x27>
c00091d7:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00091dc:	e9 50 fe ff ff       	jmp    c0009031 <Computer::displayFeatures()+0xf9>
c00091e1:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00091e6:	e9 23 fe ff ff       	jmp    c000900e <Computer::displayFeatures()+0xd6>
c00091eb:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00091f0:	e9 f6 fd ff ff       	jmp    c0008feb <Computer::displayFeatures()+0xb3>
c00091f5:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00091fa:	e9 c9 fd ff ff       	jmp    c0008fc8 <Computer::displayFeatures()+0x90>
c00091ff:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009204:	e9 9c fd ff ff       	jmp    c0008fa5 <Computer::displayFeatures()+0x6d>
c0009209:	b8 01 46 02 c0       	mov    eax,0xc0024601
c000920e:	e9 6f fd ff ff       	jmp    c0008f82 <Computer::displayFeatures()+0x4a>
c0009213:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009218:	e9 5a fe ff ff       	jmp    c0009077 <Computer::displayFeatures()+0x13f>
c000921d:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009222:	eb 8a                	jmp    c00091ae <Computer::displayFeatures()+0x276>
c0009224:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009229:	e9 61 ff ff ff       	jmp    c000918f <Computer::displayFeatures()+0x257>
c000922e:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009233:	e9 11 ff ff ff       	jmp    c0009149 <Computer::displayFeatures()+0x211>
c0009238:	b8 01 46 02 c0       	mov    eax,0xc0024601
c000923d:	e9 e4 fe ff ff       	jmp    c0009126 <Computer::displayFeatures()+0x1ee>
c0009242:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009247:	e9 b7 fe ff ff       	jmp    c0009103 <Computer::displayFeatures()+0x1cb>
c000924c:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009251:	e9 8a fe ff ff       	jmp    c00090e0 <Computer::displayFeatures()+0x1a8>
c0009256:	b8 01 46 02 c0       	mov    eax,0xc0024601
c000925b:	e9 5d fe ff ff       	jmp    c00090bd <Computer::displayFeatures()+0x185>
c0009260:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009265:	e9 30 fe ff ff       	jmp    c000909a <Computer::displayFeatures()+0x162>
c000926a:	b8 01 46 02 c0       	mov    eax,0xc0024601
c000926f:	e9 e0 fd ff ff       	jmp    c0009054 <Computer::displayFeatures()+0x11c>
c0009274:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009279:	e9 ee fe ff ff       	jmp    c000916c <Computer::displayFeatures()+0x234>

c000927e <Computer::rdmsr(unsigned int)>:
c000927e:	83 ec 0c             	sub    esp,0xc
c0009281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009285:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000928c:	74 0a                	je     c0009298 <Computer::rdmsr(unsigned int)+0x1a>
c000928e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009292:	0f 32                	rdmsr  
c0009294:	83 c4 0c             	add    esp,0xc
c0009297:	c3                   	ret    
c0009298:	83 ec 0c             	sub    esp,0xc
c000929b:	68 4d 47 02 c0       	push   0xc002474d
c00092a0:	e8 10 bf 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	eb e4                	jmp    c000928e <Computer::rdmsr(unsigned int)+0x10>

c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>:
c00092aa:	57                   	push   edi
c00092ab:	56                   	push   esi
c00092ac:	52                   	push   edx
c00092ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00092b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092b9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092c0:	74 0e                	je     c00092d0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092c6:	89 f0                	mov    eax,esi
c00092c8:	89 fa                	mov    edx,edi
c00092ca:	0f 30                	wrmsr  
c00092cc:	58                   	pop    eax
c00092cd:	5e                   	pop    esi
c00092ce:	5f                   	pop    edi
c00092cf:	c3                   	ret    
c00092d0:	83 ec 0c             	sub    esp,0xc
c00092d3:	68 53 47 02 c0       	push   0xc0024753
c00092d8:	e8 d8 be 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	eb e0                	jmp    c00092c2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092e2 <Computer::shutdown()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 00                	push   0x0
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::restart()>:
c00092fa:	83 ec 0c             	sub    esp,0xc
c00092fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009301:	8b 10                	mov    edx,DWORD PTR [eax]
c0009303:	6a 00                	push   0x0
c0009305:	6a 00                	push   0x0
c0009307:	6a 01                	push   0x1
c0009309:	50                   	push   eax
c000930a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000930d:	83 c4 1c             	add    esp,0x1c
c0009310:	c3                   	ret    
c0009311:	90                   	nop

c0009312 <Computer::sleep()>:
c0009312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009316:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000931c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009320:	e9 83 9a 00 00       	jmp    c0012da8 <ACPI::sleep()>
c0009325:	90                   	nop

c0009326 <Computer::nmiEnabled()>:
c0009326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000932a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009330:	c3                   	ret    
c0009331:	90                   	nop

c0009332 <Computer::readCMOS(unsigned char)>:
c0009332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009336:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000933d:	19 c0                	sbb    eax,eax
c000933f:	83 e0 80             	and    eax,0xffffff80
c0009342:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009346:	e6 70                	out    0x70,al
c0009348:	e4 71                	in     al,0x71
c000934a:	c3                   	ret    
c000934b:	90                   	nop

c000934c <Computer::enableNMI(bool)>:
c000934c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009354:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000935a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009362:	eb ce                	jmp    c0009332 <Computer::readCMOS(unsigned char)>

c0009364 <Computer::open(int, int, void*)>:
c0009364:	56                   	push   esi
c0009365:	53                   	push   ebx
c0009366:	83 ec 10             	sub    esp,0x10
c0009369:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000936d:	68 b0 48 02 c0       	push   0xc00248b0
c0009372:	e8 ca 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009377:	58                   	pop    eax
c0009378:	f6 05 e0 8b 02 c0 04 	test   BYTE PTR ds:0xc0028be0,0x4
c000937f:	5a                   	pop    edx
c0009380:	0f 94 05 a0 7f 02 c0 	sete   BYTE PTR ds:0xc0027fa0
c0009387:	68 58 01 00 00       	push   0x158
c000938c:	68 59 47 02 c0       	push   0xc0024759
c0009391:	e8 3d 3d 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0009396:	59                   	pop    ecx
c0009397:	5e                   	pop    esi
c0009398:	68 14 01 00 00       	push   0x114
c000939d:	68 6f 47 02 c0       	push   0xc002476f
c00093a2:	e8 2c 3d 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00093a7:	58                   	pop    eax
c00093a8:	5a                   	pop    edx
c00093a9:	6a 14                	push   0x14
c00093ab:	68 83 47 02 c0       	push   0xc0024783
c00093b0:	e8 1e 3d 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00093b5:	59                   	pop    ecx
c00093b6:	5e                   	pop    esi
c00093b7:	68 1f 07 00 00       	push   0x71f
c00093bc:	68 96 47 02 c0       	push   0xc0024796
c00093c1:	e8 0d 3d 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00093c6:	58                   	pop    eax
c00093c7:	5a                   	pop    edx
c00093c8:	6a 5f                	push   0x5f
c00093ca:	68 ad 47 02 c0       	push   0xc00247ad
c00093cf:	e8 ff 3c 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00093d4:	c7 04 24 c3 47 02 c0 	mov    DWORD PTR [esp],0xc00247c3
c00093db:	e8 f3 3c 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00093e0:	c7 04 24 d5 47 02 c0 	mov    DWORD PTR [esp],0xc00247d5
c00093e7:	e8 55 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00093ec:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00093f3:	e8 ef 09 00 00       	call   c0009de7 <malloc>
c00093f8:	89 c6                	mov    esi,eax
c00093fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fd:	e8 5e 92 00 00       	call   c0012660 <ACPI::ACPI()>
c0009402:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009408:	c7 04 24 ef 47 02 c0 	mov    DWORD PTR [esp],0xc00247ef
c000940f:	e8 2d 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009414:	59                   	pop    ecx
c0009415:	5e                   	pop    esi
c0009416:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000941c:	53                   	push   ebx
c000941d:	e8 24 52 00 00       	call   c000e646 <Device::addChild(Device*)>
c0009422:	c7 04 24 d4 48 02 c0 	mov    DWORD PTR [esp],0xc00248d4
c0009429:	e8 13 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000942e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009431:	e8 f8 f8 ff ff       	call   c0008d2e <Computer::detectFeatures()>
c0009436:	c7 04 24 f4 48 02 c0 	mov    DWORD PTR [esp],0xc00248f4
c000943d:	e8 ff 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009442:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009445:	e8 ee fa ff ff       	call   c0008f38 <Computer::displayFeatures()>
c000944a:	c7 04 24 09 48 02 c0 	mov    DWORD PTR [esp],0xc0024809
c0009451:	e8 eb 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009456:	58                   	pop    eax
c0009457:	5a                   	pop    edx
c0009458:	6a 01                	push   0x1
c000945a:	53                   	push   ebx
c000945b:	e8 ec fe ff ff       	call   c000934c <Computer::enableNMI(bool)>
c0009460:	c7 04 24 b1 45 02 c0 	mov    DWORD PTR [esp],0xc00245b1
c0009467:	e8 d5 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000946c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009473:	e8 6f 09 00 00       	call   c0009de7 <malloc>
c0009478:	89 04 24             	mov    DWORD PTR [esp],eax
c000947b:	89 c6                	mov    esi,eax
c000947d:	e8 10 a4 00 00       	call   c0013892 <CPU::CPU()>
c0009482:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009488:	59                   	pop    ecx
c0009489:	58                   	pop    eax
c000948a:	56                   	push   esi
c000948b:	53                   	push   ebx
c000948c:	e8 b5 51 00 00       	call   c000e646 <Device::addChild(Device*)>
c0009491:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0009497:	8b 10                	mov    edx,DWORD PTR [eax]
c0009499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000949d:	6a 00                	push   0x0
c000949f:	6a 00                	push   0x0
c00094a1:	50                   	push   eax
c00094a2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094a5:	83 c4 20             	add    esp,0x20
c00094a8:	e8 df c0 00 00       	call   c001558c <Krnl::initRNG()>
c00094ad:	83 ec 0c             	sub    esp,0xc
c00094b0:	68 14 49 02 c0       	push   0xc0024914
c00094b5:	e8 87 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00094ba:	e8 23 57 00 00       	call   c000ebe2 <setupFPU()>
c00094bf:	83 c4 10             	add    esp,0x10
c00094c2:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00094c8:	85 c0                	test   eax,eax
c00094ca:	74 1f                	je     c00094eb <Computer::open(int, int, void*)+0x187>
c00094cc:	83 ec 08             	sub    esp,0x8
c00094cf:	50                   	push   eax
c00094d0:	53                   	push   ebx
c00094d1:	e8 70 51 00 00       	call   c000e646 <Device::addChild(Device*)>
c00094d6:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c00094dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00094de:	6a 00                	push   0x0
c00094e0:	6a 00                	push   0x0
c00094e2:	6a 00                	push   0x0
c00094e4:	50                   	push   eax
c00094e5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094e8:	83 c4 20             	add    esp,0x20
c00094eb:	83 ec 0c             	sub    esp,0xc
c00094ee:	68 1a 48 02 c0       	push   0xc002481a
c00094f3:	e8 49 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00094f8:	c7 04 24 7c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a7c
c00094ff:	e8 f0 f8 00 00       	call   c0018df4 <setupMultitasking(void (*)())>
c0009504:	83 c4 14             	add    esp,0x14
c0009507:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000950c:	5b                   	pop    ebx
c000950d:	5e                   	pop    esi
c000950e:	c3                   	ret    
c000950f:	90                   	nop

c0009510 <Computer::disableNMI()>:
c0009510:	6a 00                	push   0x0
c0009512:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009516:	e8 31 fe ff ff       	call   c000934c <Computer::enableNMI(bool)>
c000951b:	58                   	pop    eax
c000951c:	5a                   	pop    edx
c000951d:	c3                   	ret    

c000951e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000951e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009522:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009529:	19 c0                	sbb    eax,eax
c000952b:	83 e0 80             	and    eax,0xffffff80
c000952e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009532:	e6 70                	out    0x70,al
c0009534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009538:	e6 71                	out    0x71,al
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <Computer::handleNMI()>:
c000953c:	56                   	push   esi
c000953d:	53                   	push   ebx
c000953e:	83 ec 10             	sub    esp,0x10
c0009541:	e4 92                	in     al,0x92
c0009543:	89 c6                	mov    esi,eax
c0009545:	e4 61                	in     al,0x61
c0009547:	68 35 48 02 c0       	push   0xc0024835
c000954c:	88 c3                	mov    bl,al
c000954e:	e8 80 3b 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0009553:	83 c4 10             	add    esp,0x10
c0009556:	83 e6 10             	and    esi,0x10
c0009559:	75 0d                	jne    c0009568 <Computer::handleNMI()+0x2c>
c000955b:	f6 c3 40             	test   bl,0x40
c000955e:	75 1d                	jne    c000957d <Computer::handleNMI()+0x41>
c0009560:	84 db                	test   bl,bl
c0009562:	78 2d                	js     c0009591 <Computer::handleNMI()+0x55>
c0009564:	58                   	pop    eax
c0009565:	5b                   	pop    ebx
c0009566:	5e                   	pop    esi
c0009567:	c3                   	ret    
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 46 48 02 c0       	push   0xc0024846
c0009570:	e8 40 bc 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	f6 c3 40             	test   bl,0x40
c000957b:	74 e3                	je     c0009560 <Computer::handleNMI()+0x24>
c000957d:	83 ec 0c             	sub    esp,0xc
c0009580:	68 53 48 02 c0       	push   0xc0024853
c0009585:	e8 2b bc 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000958a:	83 c4 10             	add    esp,0x10
c000958d:	84 db                	test   bl,bl
c000958f:	79 d3                	jns    c0009564 <Computer::handleNMI()+0x28>
c0009591:	c7 44 24 10 5d 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc002485d
c0009599:	5a                   	pop    edx
c000959a:	5b                   	pop    ebx
c000959b:	5e                   	pop    esi
c000959c:	e9 14 bc 00 00       	jmp    c00151b5 <Krnl::panic(char const*)>
c00095a1:	90                   	nop

c00095a2 <Computer::setDiskActivityLight(int, bool)>:
c00095a2:	56                   	push   esi
c00095a3:	53                   	push   ebx
c00095a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00095a8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00095ad:	77 1b                	ja     c00095ca <Computer::setDiskActivityLight(int, bool)+0x28>
c00095af:	e4 92                	in     al,0x92
c00095b1:	bb 40 00 00 00       	mov    ebx,0x40
c00095b6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00095ba:	89 da                	mov    edx,ebx
c00095bc:	d3 e2                	shl    edx,cl
c00095be:	89 f1                	mov    ecx,esi
c00095c0:	f7 d2                	not    edx
c00095c2:	d3 e3                	shl    ebx,cl
c00095c4:	21 d0                	and    eax,edx
c00095c6:	09 d8                	or     eax,ebx
c00095c8:	e6 92                	out    0x92,al
c00095ca:	5b                   	pop    ebx
c00095cb:	5e                   	pop    esi
c00095cc:	c3                   	ret    
c00095cd:	90                   	nop

c00095ce <GDTEntry::setBase(unsigned int)>:
c00095ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00095d6:	89 c1                	mov    ecx,eax
c00095d8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00095dc:	c1 e9 10             	shr    ecx,0x10
c00095df:	c1 e8 18             	shr    eax,0x18
c00095e2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00095e5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00095e8:	c3                   	ret    
c00095e9:	90                   	nop

c00095ea <GDTEntry::setLimit(unsigned int)>:
c00095ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00095ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095f2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00095f5:	66 89 01             	mov    WORD PTR [ecx],ax
c00095f8:	83 e2 f0             	and    edx,0xfffffff0
c00095fb:	c1 e8 10             	shr    eax,0x10
c00095fe:	83 e0 0f             	and    eax,0xf
c0009601:	09 d0                	or     eax,edx
c0009603:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009606:	c3                   	ret    
c0009607:	90                   	nop

c0009608 <GDT::GDT()>:
c0009608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000960c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009616:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000961c:	90                   	nop
c000961d:	c3                   	ret    

c000961e <GDT::addEntry(GDTEntry)>:
c000961e:	53                   	push   ebx
c000961f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009623:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009627:	8b 02                	mov    eax,DWORD PTR [edx]
c0009629:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000962d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009631:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009635:	8d 48 01             	lea    ecx,[eax+0x1]
c0009638:	c1 e0 03             	shl    eax,0x3
c000963b:	89 0a                	mov    DWORD PTR [edx],ecx
c000963d:	5b                   	pop    ebx
c000963e:	c3                   	ret    
c000963f:	90                   	nop

c0009640 <GDT::getNumberOfEntries()>:
c0009640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009644:	8b 00                	mov    eax,DWORD PTR [eax]
c0009646:	c3                   	ret    
c0009647:	90                   	nop

c0009648 <GDT::flush()>:
c0009648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000964c:	8b 10                	mov    edx,DWORD PTR [eax]
c000964e:	83 c0 04             	add    eax,0x4
c0009651:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009658:	a3 d2 8b 02 c0       	mov    ds:0xc0028bd2,eax
c000965d:	66 89 15 d0 8b 02 c0 	mov    WORD PTR ds:0xc0028bd0,dx
c0009664:	e9 2c 6d ff ff       	jmp    c0000395 <loadGDT>
c0009669:	90                   	nop

c000966a <GDT::setup()>:
c000966a:	57                   	push   edi
c000966b:	56                   	push   esi
c000966c:	53                   	push   ebx
c000966d:	83 ec 40             	sub    esp,0x40
c0009670:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009674:	6a 00                	push   0x0
c0009676:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000967a:	56                   	push   esi
c000967b:	e8 4e ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c0009680:	6a 00                	push   0x0
c0009682:	56                   	push   esi
c0009683:	e8 62 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c0009688:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c0009690:	6a 00                	push   0x0
c0009692:	8d 74 24 44          	lea    esi,[esp+0x44]
c0009696:	56                   	push   esi
c0009697:	e8 32 ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c000969c:	68 ff ff ff 00       	push   0xffffff
c00096a1:	56                   	push   esi
c00096a2:	e8 43 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c00096a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00096ab:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096b0:	0d 00 9a c0 00       	or     eax,0xc09a00
c00096b5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00096c2:	56                   	push   esi
c00096c3:	e8 06 ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c00096c8:	68 ff ff ff 00       	push   0xffffff
c00096cd:	56                   	push   esi
c00096ce:	e8 17 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c00096d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00096d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00096db:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00096df:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00096e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096e7:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096ec:	0d 00 92 c0 00       	or     eax,0xc09200
c00096f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00096f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00096f9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00096fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009701:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009705:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009709:	89 fa                	mov    edx,edi
c000970b:	80 cc 60             	or     ah,0x60
c000970e:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009714:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009718:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000971c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009724:	80 cc 60             	or     ah,0x60
c0009727:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000972b:	89 f8                	mov    eax,edi
c000972d:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009732:	09 d0                	or     eax,edx
c0009734:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0009738:	89 c7                	mov    edi,eax
c000973a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000973e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009742:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009746:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000974a:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009754:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009759:	09 d0                	or     eax,edx
c000975b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000975f:	83 c4 0c             	add    esp,0xc
c0009762:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009766:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000976a:	53                   	push   ebx
c000976b:	e8 ae fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009770:	83 c4 0c             	add    esp,0xc
c0009773:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009777:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000977b:	53                   	push   ebx
c000977c:	e8 9d fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009781:	83 c4 0c             	add    esp,0xc
c0009784:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009788:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000978c:	53                   	push   ebx
c000978d:	e8 8c fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009792:	83 c4 0c             	add    esp,0xc
c0009795:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009799:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000979d:	53                   	push   ebx
c000979e:	e8 7b fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097a3:	83 c4 0c             	add    esp,0xc
c00097a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097ae:	53                   	push   ebx
c00097af:	e8 6a fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097b4:	83 c4 0c             	add    esp,0xc
c00097b7:	57                   	push   edi
c00097b8:	56                   	push   esi
c00097b9:	53                   	push   ebx
c00097ba:	e8 5f fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097bf:	83 c4 0c             	add    esp,0xc
c00097c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00097c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00097ca:	53                   	push   ebx
c00097cb:	e8 4e fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097d3:	e8 70 fe ff ff       	call   c0009648 <GDT::flush()>
c00097d8:	83 c4 50             	add    esp,0x50
c00097db:	5b                   	pop    ebx
c00097dc:	5e                   	pop    esi
c00097dd:	5f                   	pop    edi
c00097de:	c3                   	ret    

c00097df <idleFunction(void*)>:
c00097df:	53                   	push   ebx
c00097e0:	83 ec 08             	sub    esp,0x8
c00097e3:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00097e8:	48                   	dec    eax
c00097e9:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00097ee:	75 01                	jne    c00097f1 <idleFunction(void*)+0x12>
c00097f0:	fb                   	sti    
c00097f1:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00097f6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00097fc:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c0009803:	74 3c                	je     c0009841 <idleFunction(void*)+0x62>
c0009805:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000980c:	74 33                	je     c0009841 <idleFunction(void*)+0x62>
c000980e:	31 db                	xor    ebx,ebx
c0009810:	52                   	push   edx
c0009811:	52                   	push   edx
c0009812:	68 e1 00 00 00       	push   0xe1
c0009817:	50                   	push   eax
c0009818:	e8 61 fa ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c000981d:	53                   	push   ebx
c000981e:	83 e0 02             	and    eax,0x2
c0009821:	50                   	push   eax
c0009822:	68 e1 00 00 00       	push   0xe1
c0009827:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c000982d:	e8 78 fa ff ff       	call   c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>
c0009832:	83 c4 20             	add    esp,0x20
c0009835:	e8 7a 69 ff ff       	call   c00001b4 <doTPAUSE>
c000983a:	e8 d3 99 01 00       	call   c0023212 <idleCommon()>
c000983f:	eb f4                	jmp    c0009835 <idleFunction(void*)+0x56>
c0009841:	fb                   	sti    
c0009842:	f4                   	hlt    
c0009843:	e8 ca 99 01 00       	call   c0023212 <idleCommon()>
c0009848:	eb f7                	jmp    c0009841 <idleFunction(void*)+0x62>
c000984a:	66 90                	xchg   ax,ax

c000984c <IDTEntry::IDTEntry(bool)>:
c000984c:	83 ec 04             	sub    esp,0x4
c000984f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009853:	88 04 24             	mov    BYTE PTR [esp],al
c0009856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000985a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009864:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000986c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000986f:	83 e2 f0             	and    edx,0xfffffff0
c0009872:	83 ca 0e             	or     edx,0xe
c0009875:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000987c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000987f:	83 e2 ef             	and    edx,0xffffffef
c0009882:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009885:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009889:	74 05                	je     c0009890 <IDTEntry::IDTEntry(bool)+0x44>
c000988b:	b2 03                	mov    dl,0x3
c000988d:	eb 05                	jmp    c0009894 <IDTEntry::IDTEntry(bool)+0x48>
c000988f:	90                   	nop
c0009890:	b2 00                	mov    dl,0x0
c0009892:	66 90                	xchg   ax,ax
c0009894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009898:	83 e2 03             	and    edx,0x3
c000989b:	88 d1                	mov    cl,dl
c000989d:	c1 e1 05             	shl    ecx,0x5
c00098a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00098a3:	83 e2 9f             	and    edx,0xffffff9f
c00098a6:	09 ca                	or     edx,ecx
c00098a8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00098ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098af:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00098b2:	83 ca 80             	or     edx,0xffffff80
c00098b5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00098b8:	90                   	nop
c00098b9:	83 c4 04             	add    esp,0x4
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <IDTEntry::setOffset(unsigned int)>:
c00098be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00098c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c6:	66 89 02             	mov    WORD PTR [edx],ax
c00098c9:	c1 e8 10             	shr    eax,0x10
c00098cc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00098d0:	c3                   	ret    
c00098d1:	90                   	nop
c00098d2:	66 90                	xchg   ax,ax

c00098d4 <IDT::IDT()>:
c00098d4:	90                   	nop
c00098d5:	c3                   	ret    

c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00098d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098da:	83 c0 30             	add    eax,0x30
c00098dd:	c3                   	ret    

c00098de <IDT::addEntry(IDTEntry, int)>:
c00098de:	53                   	push   ebx
c00098df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00098e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00098eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00098ef:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00098f2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00098f6:	5b                   	pop    ebx
c00098f7:	c3                   	ret    

c00098f8 <IDT::addEntry(int, void (*)(), bool)>:
c00098f8:	53                   	push   ebx
c00098f9:	83 ec 10             	sub    esp,0x10
c00098fc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009901:	50                   	push   eax
c0009902:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0009906:	53                   	push   ebx
c0009907:	e8 40 ff ff ff       	call   c000984c <IDTEntry::IDTEntry(bool)>
c000990c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009910:	53                   	push   ebx
c0009911:	e8 a8 ff ff ff       	call   c00098be <IDTEntry::setOffset(unsigned int)>
c0009916:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000991a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000991e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009922:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009926:	e8 b3 ff ff ff       	call   c00098de <IDT::addEntry(IDTEntry, int)>
c000992b:	83 c4 30             	add    esp,0x30
c000992e:	5b                   	pop    ebx
c000992f:	c3                   	ret    

c0009930 <IDT::flush()>:
c0009930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009934:	66 c7 05 d8 8b 02 c0 ff 07 	mov    WORD PTR ds:0xc0028bd8,0x7ff
c000993d:	a3 da 8b 02 c0       	mov    ds:0xc0028bda,eax
c0009942:	0f 01 1d d8 8b 02 c0 	lidtd  ds:0xc0028bd8
c0009949:	c3                   	ret    

c000994a <IDT::setup()>:
c000994a:	57                   	push   edi
c000994b:	56                   	push   esi
c000994c:	53                   	push   ebx
c000994d:	83 ec 10             	sub    esp,0x10
c0009950:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009954:	6a 00                	push   0x0
c0009956:	68 b5 03 00 c0       	push   0xc00003b5
c000995b:	6a 00                	push   0x0
c000995d:	53                   	push   ebx
c000995e:	e8 95 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009963:	6a 00                	push   0x0
c0009965:	68 c5 03 00 c0       	push   0xc00003c5
c000996a:	6a 01                	push   0x1
c000996c:	53                   	push   ebx
c000996d:	e8 86 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009972:	83 c4 20             	add    esp,0x20
c0009975:	6a 00                	push   0x0
c0009977:	68 cf 03 00 c0       	push   0xc00003cf
c000997c:	6a 02                	push   0x2
c000997e:	53                   	push   ebx
c000997f:	e8 74 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009984:	6a 00                	push   0x0
c0009986:	68 d9 03 00 c0       	push   0xc00003d9
c000998b:	6a 03                	push   0x3
c000998d:	53                   	push   ebx
c000998e:	e8 65 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009993:	83 c4 20             	add    esp,0x20
c0009996:	6a 00                	push   0x0
c0009998:	68 e3 03 00 c0       	push   0xc00003e3
c000999d:	6a 04                	push   0x4
c000999f:	53                   	push   ebx
c00099a0:	e8 53 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099a5:	6a 00                	push   0x0
c00099a7:	68 ed 03 00 c0       	push   0xc00003ed
c00099ac:	6a 05                	push   0x5
c00099ae:	53                   	push   ebx
c00099af:	e8 44 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099b4:	83 c4 20             	add    esp,0x20
c00099b7:	6a 00                	push   0x0
c00099b9:	68 f7 03 00 c0       	push   0xc00003f7
c00099be:	6a 06                	push   0x6
c00099c0:	53                   	push   ebx
c00099c1:	e8 32 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099c6:	6a 00                	push   0x0
c00099c8:	68 01 04 00 c0       	push   0xc0000401
c00099cd:	6a 07                	push   0x7
c00099cf:	53                   	push   ebx
c00099d0:	e8 23 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099d5:	83 c4 20             	add    esp,0x20
c00099d8:	6a 00                	push   0x0
c00099da:	68 0b 04 00 c0       	push   0xc000040b
c00099df:	6a 08                	push   0x8
c00099e1:	53                   	push   ebx
c00099e2:	e8 11 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099e7:	6a 00                	push   0x0
c00099e9:	68 13 04 00 c0       	push   0xc0000413
c00099ee:	6a 09                	push   0x9
c00099f0:	53                   	push   ebx
c00099f1:	e8 02 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099f6:	83 c4 20             	add    esp,0x20
c00099f9:	6a 00                	push   0x0
c00099fb:	68 1d 04 00 c0       	push   0xc000041d
c0009a00:	6a 0a                	push   0xa
c0009a02:	53                   	push   ebx
c0009a03:	e8 f0 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a08:	6a 00                	push   0x0
c0009a0a:	68 25 04 00 c0       	push   0xc0000425
c0009a0f:	6a 0b                	push   0xb
c0009a11:	53                   	push   ebx
c0009a12:	e8 e1 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a17:	83 c4 20             	add    esp,0x20
c0009a1a:	6a 00                	push   0x0
c0009a1c:	68 2d 04 00 c0       	push   0xc000042d
c0009a21:	6a 0c                	push   0xc
c0009a23:	53                   	push   ebx
c0009a24:	e8 cf fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a29:	6a 00                	push   0x0
c0009a2b:	68 35 04 00 c0       	push   0xc0000435
c0009a30:	6a 0d                	push   0xd
c0009a32:	53                   	push   ebx
c0009a33:	e8 c0 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a38:	83 c4 20             	add    esp,0x20
c0009a3b:	6a 00                	push   0x0
c0009a3d:	68 3d 04 00 c0       	push   0xc000043d
c0009a42:	6a 0e                	push   0xe
c0009a44:	53                   	push   ebx
c0009a45:	e8 ae fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a4a:	6a 00                	push   0x0
c0009a4c:	68 45 04 00 c0       	push   0xc0000445
c0009a51:	6a 0f                	push   0xf
c0009a53:	53                   	push   ebx
c0009a54:	e8 9f fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a59:	83 c4 20             	add    esp,0x20
c0009a5c:	6a 00                	push   0x0
c0009a5e:	68 4f 04 00 c0       	push   0xc000044f
c0009a63:	6a 10                	push   0x10
c0009a65:	53                   	push   ebx
c0009a66:	e8 8d fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a6b:	6a 00                	push   0x0
c0009a6d:	68 59 04 00 c0       	push   0xc0000459
c0009a72:	6a 11                	push   0x11
c0009a74:	53                   	push   ebx
c0009a75:	e8 7e fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a7a:	83 c4 20             	add    esp,0x20
c0009a7d:	6a 00                	push   0x0
c0009a7f:	68 63 04 00 c0       	push   0xc0000463
c0009a84:	6a 12                	push   0x12
c0009a86:	53                   	push   ebx
c0009a87:	e8 6c fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a8c:	6a 01                	push   0x1
c0009a8e:	68 fd 04 00 c0       	push   0xc00004fd
c0009a93:	6a 60                	push   0x60
c0009a95:	53                   	push   ebx
c0009a96:	e8 5d fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a9b:	83 c4 20             	add    esp,0x20
c0009a9e:	6a 00                	push   0x0
c0009aa0:	68 04 05 00 c0       	push   0xc0000504
c0009aa5:	6a 20                	push   0x20
c0009aa7:	53                   	push   ebx
c0009aa8:	e8 4b fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009aad:	6a 00                	push   0x0
c0009aaf:	68 ef 04 00 c0       	push   0xc00004ef
c0009ab4:	6a 21                	push   0x21
c0009ab6:	53                   	push   ebx
c0009ab7:	e8 3c fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009abc:	83 c4 20             	add    esp,0x20
c0009abf:	6a 00                	push   0x0
c0009ac1:	68 f6 04 00 c0       	push   0xc00004f6
c0009ac6:	6a 22                	push   0x22
c0009ac8:	53                   	push   ebx
c0009ac9:	e8 2a fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009ace:	6a 00                	push   0x0
c0009ad0:	68 6d 04 00 c0       	push   0xc000046d
c0009ad5:	6a 23                	push   0x23
c0009ad7:	53                   	push   ebx
c0009ad8:	e8 1b fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009add:	83 c4 20             	add    esp,0x20
c0009ae0:	6a 00                	push   0x0
c0009ae2:	68 77 04 00 c0       	push   0xc0000477
c0009ae7:	6a 24                	push   0x24
c0009ae9:	53                   	push   ebx
c0009aea:	e8 09 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009aef:	6a 00                	push   0x0
c0009af1:	68 81 04 00 c0       	push   0xc0000481
c0009af6:	6a 25                	push   0x25
c0009af8:	53                   	push   ebx
c0009af9:	e8 fa fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009afe:	83 c4 20             	add    esp,0x20
c0009b01:	6a 00                	push   0x0
c0009b03:	68 8b 04 00 c0       	push   0xc000048b
c0009b08:	6a 26                	push   0x26
c0009b0a:	53                   	push   ebx
c0009b0b:	e8 e8 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b10:	6a 00                	push   0x0
c0009b12:	68 95 04 00 c0       	push   0xc0000495
c0009b17:	6a 27                	push   0x27
c0009b19:	53                   	push   ebx
c0009b1a:	e8 d9 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b1f:	83 c4 20             	add    esp,0x20
c0009b22:	6a 00                	push   0x0
c0009b24:	68 9f 04 00 c0       	push   0xc000049f
c0009b29:	6a 28                	push   0x28
c0009b2b:	53                   	push   ebx
c0009b2c:	e8 c7 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b31:	6a 00                	push   0x0
c0009b33:	68 a9 04 00 c0       	push   0xc00004a9
c0009b38:	6a 29                	push   0x29
c0009b3a:	53                   	push   ebx
c0009b3b:	e8 b8 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b40:	83 c4 20             	add    esp,0x20
c0009b43:	6a 00                	push   0x0
c0009b45:	68 b3 04 00 c0       	push   0xc00004b3
c0009b4a:	6a 2a                	push   0x2a
c0009b4c:	53                   	push   ebx
c0009b4d:	e8 a6 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b52:	6a 00                	push   0x0
c0009b54:	68 bd 04 00 c0       	push   0xc00004bd
c0009b59:	6a 2b                	push   0x2b
c0009b5b:	53                   	push   ebx
c0009b5c:	e8 97 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b61:	83 c4 20             	add    esp,0x20
c0009b64:	6a 00                	push   0x0
c0009b66:	68 c7 04 00 c0       	push   0xc00004c7
c0009b6b:	6a 2c                	push   0x2c
c0009b6d:	53                   	push   ebx
c0009b6e:	e8 85 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b73:	6a 00                	push   0x0
c0009b75:	68 d1 04 00 c0       	push   0xc00004d1
c0009b7a:	6a 2d                	push   0x2d
c0009b7c:	53                   	push   ebx
c0009b7d:	e8 76 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b82:	83 c4 20             	add    esp,0x20
c0009b85:	6a 00                	push   0x0
c0009b87:	68 db 04 00 c0       	push   0xc00004db
c0009b8c:	6a 2e                	push   0x2e
c0009b8e:	53                   	push   ebx
c0009b8f:	e8 64 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b94:	6a 00                	push   0x0
c0009b96:	68 e5 04 00 c0       	push   0xc00004e5
c0009b9b:	6a 2f                	push   0x2f
c0009b9d:	53                   	push   ebx
c0009b9e:	e8 55 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009ba3:	83 c4 20             	add    esp,0x20
c0009ba6:	6a 00                	push   0x0
c0009ba8:	68 3b 05 00 c0       	push   0xc000053b
c0009bad:	6a 30                	push   0x30
c0009baf:	53                   	push   ebx
c0009bb0:	e8 43 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bb5:	6a 00                	push   0x0
c0009bb7:	68 45 05 00 c0       	push   0xc0000545
c0009bbc:	6a 31                	push   0x31
c0009bbe:	53                   	push   ebx
c0009bbf:	e8 34 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bc4:	83 c4 20             	add    esp,0x20
c0009bc7:	6a 00                	push   0x0
c0009bc9:	68 4f 05 00 c0       	push   0xc000054f
c0009bce:	6a 32                	push   0x32
c0009bd0:	53                   	push   ebx
c0009bd1:	e8 22 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bd6:	6a 00                	push   0x0
c0009bd8:	68 59 05 00 c0       	push   0xc0000559
c0009bdd:	6a 33                	push   0x33
c0009bdf:	53                   	push   ebx
c0009be0:	e8 13 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009be5:	83 c4 20             	add    esp,0x20
c0009be8:	6a 00                	push   0x0
c0009bea:	68 63 05 00 c0       	push   0xc0000563
c0009bef:	6a 34                	push   0x34
c0009bf1:	53                   	push   ebx
c0009bf2:	e8 01 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bf7:	6a 00                	push   0x0
c0009bf9:	68 6d 05 00 c0       	push   0xc000056d
c0009bfe:	6a 35                	push   0x35
c0009c00:	53                   	push   ebx
c0009c01:	e8 f2 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c06:	83 c4 20             	add    esp,0x20
c0009c09:	6a 00                	push   0x0
c0009c0b:	68 77 05 00 c0       	push   0xc0000577
c0009c10:	6a 36                	push   0x36
c0009c12:	53                   	push   ebx
c0009c13:	e8 e0 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c18:	6a 00                	push   0x0
c0009c1a:	68 81 05 00 c0       	push   0xc0000581
c0009c1f:	6a 37                	push   0x37
c0009c21:	53                   	push   ebx
c0009c22:	e8 d1 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c27:	83 c4 1c             	add    esp,0x1c
c0009c2a:	6a 03                	push   0x3
c0009c2c:	6a 02                	push   0x2
c0009c2e:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c0009c34:	e8 1d 29 00 00       	call   c000c556 <VAS::allocatePages(int, int)>
c0009c39:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009c40:	89 c6                	mov    esi,eax
c0009c42:	e8 a0 01 00 00       	call   c0009de7 <malloc>
c0009c47:	81 c6 00 20 00 00    	add    esi,0x2000
c0009c4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c50:	89 c7                	mov    edi,eax
c0009c52:	e8 99 1a 00 00       	call   c000b6f0 <TSS::TSS()>
c0009c57:	83 c4 0c             	add    esp,0xc
c0009c5a:	68 0b 04 00 c0       	push   0xc000040b
c0009c5f:	56                   	push   esi
c0009c60:	57                   	push   edi
c0009c61:	e8 ce 1a 00 00       	call   c000b734 <TSS::setup(unsigned long, unsigned long)>
c0009c66:	89 c6                	mov    esi,eax
c0009c68:	58                   	pop    eax
c0009c69:	5a                   	pop    edx
c0009c6a:	6a 00                	push   0x0
c0009c6c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c70:	50                   	push   eax
c0009c71:	e8 d6 fb ff ff       	call   c000984c <IDTEntry::IDTEntry(bool)>
c0009c76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c7a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009c7f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009c86:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009c8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c90:	80 ce 05             	or     dh,0x5
c0009c93:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009c96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c9e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009ca1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009ca4:	e8 87 fc ff ff       	call   c0009930 <IDT::flush()>
c0009ca9:	83 c4 20             	add    esp,0x20
c0009cac:	5b                   	pop    ebx
c0009cad:	5e                   	pop    esi
c0009cae:	5f                   	pop    edi
c0009caf:	c3                   	ret    

c0009cb0 <sbrk>:
c0009cb0:	55                   	push   ebp
c0009cb1:	57                   	push   edi
c0009cb2:	56                   	push   esi
c0009cb3:	53                   	push   ebx
c0009cb4:	83 ec 24             	sub    esp,0x24
c0009cb7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cbb:	53                   	push   ebx
c0009cbc:	68 64 49 02 c0       	push   0xc0024964
c0009cc1:	e8 0d 34 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	85 db                	test   ebx,ebx
c0009ccb:	74 5f                	je     c0009d2c <sbrk+0x7c>
c0009ccd:	78 64                	js     c0009d33 <sbrk+0x83>
c0009ccf:	a1 3c 7e 02 c0       	mov    eax,ds:0xc0027e3c
c0009cd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009cd8:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009cde:	89 dd                	mov    ebp,ebx
c0009ce0:	78 69                	js     c0009d4b <sbrk+0x9b>
c0009ce2:	c1 fd 0c             	sar    ebp,0xc
c0009ce5:	bb 00 00 00 00       	mov    ebx,0x0
c0009cea:	8b 35 f0 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028cf0
c0009cf0:	8b 3d 3c 7e 02 c0    	mov    edi,DWORD PTR ds:0xc0027e3c
c0009cf6:	e8 a3 07 00 00       	call   c000a49e <Phys::allocatePage()>
c0009cfb:	68 01 04 00 00       	push   0x401
c0009d00:	57                   	push   edi
c0009d01:	50                   	push   eax
c0009d02:	56                   	push   esi
c0009d03:	e8 4c 27 00 00       	call   c000c454 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d08:	81 05 3c 7e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027e3c,0x1000
c0009d12:	43                   	inc    ebx
c0009d13:	83 c4 10             	add    esp,0x10
c0009d16:	39 dd                	cmp    ebp,ebx
c0009d18:	75 d0                	jne    c0009cea <sbrk+0x3a>
c0009d1a:	0f 20 d8             	mov    eax,cr3
c0009d1d:	0f 22 d8             	mov    cr3,eax
c0009d20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d24:	83 c4 1c             	add    esp,0x1c
c0009d27:	5b                   	pop    ebx
c0009d28:	5e                   	pop    esi
c0009d29:	5f                   	pop    edi
c0009d2a:	5d                   	pop    ebp
c0009d2b:	c3                   	ret    
c0009d2c:	a1 3c 7e 02 c0       	mov    eax,ds:0xc0027e3c
c0009d31:	eb f1                	jmp    c0009d24 <sbrk+0x74>
c0009d33:	83 ec 08             	sub    esp,0x8
c0009d36:	53                   	push   ebx
c0009d37:	68 90 49 02 c0       	push   0xc0024990
c0009d3c:	e8 92 33 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0009d41:	83 c4 10             	add    esp,0x10
c0009d44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009d49:	eb d9                	jmp    c0009d24 <sbrk+0x74>
c0009d4b:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009d51:	eb 8f                	jmp    c0009ce2 <sbrk+0x32>

c0009d53 <mmap>:
c0009d53:	83 ec 18             	sub    esp,0x18
c0009d56:	68 82 49 02 c0       	push   0xc0024982
c0009d5b:	e8 55 b4 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c0009d60:	b8 00 00 00 00       	mov    eax,0x0
c0009d65:	83 c4 1c             	add    esp,0x1c
c0009d68:	c3                   	ret    

c0009d69 <munmap>:
c0009d69:	83 ec 18             	sub    esp,0x18
c0009d6c:	68 87 49 02 c0       	push   0xc0024987
c0009d71:	e8 3f b4 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c0009d76:	b8 00 00 00 00       	mov    eax,0x0
c0009d7b:	83 c4 1c             	add    esp,0x1c
c0009d7e:	c3                   	ret    

c0009d7f <liballoc_lock()>:
c0009d7f:	fa                   	cli    
c0009d80:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0009d86:	b8 00 00 00 00       	mov    eax,0x0
c0009d8b:	c3                   	ret    

c0009d8c <liballoc_unlock()>:
c0009d8c:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0009d91:	48                   	dec    eax
c0009d92:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0009d97:	75 01                	jne    c0009d9a <liballoc_unlock()+0xe>
c0009d99:	fb                   	sti    
c0009d9a:	b8 00 00 00 00       	mov    eax,0x0
c0009d9f:	c3                   	ret    

c0009da0 <liballoc_alloc(int)>:
c0009da0:	83 ec 10             	sub    esp,0x10
c0009da3:	6a 01                	push   0x1
c0009da5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009da9:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c0009daf:	e8 a2 27 00 00       	call   c000c556 <VAS::allocatePages(int, int)>
c0009db4:	83 c4 1c             	add    esp,0x1c
c0009db7:	c3                   	ret    

c0009db8 <liballoc_free(void*, int)>:
c0009db8:	83 ec 14             	sub    esp,0x14
c0009dbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009dbf:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c0009dc5:	e8 36 24 00 00       	call   c000c200 <VAS::freeAllocatedPages(unsigned long)>
c0009dca:	b8 00 00 00 00       	mov    eax,0x0
c0009dcf:	83 c4 1c             	add    esp,0x1c
c0009dd2:	c3                   	ret    

c0009dd3 <realloc>:
c0009dd3:	83 ec 14             	sub    esp,0x14
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dde:	e8 8d 77 ff ff       	call   c0001570 <dlrealloc>
c0009de3:	83 c4 1c             	add    esp,0x1c
c0009de6:	c3                   	ret    

c0009de7 <malloc>:
c0009de7:	83 ec 18             	sub    esp,0x18
c0009dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dee:	e8 40 72 ff ff       	call   c0001033 <dlmalloc>
c0009df3:	83 c4 1c             	add    esp,0x1c
c0009df6:	c3                   	ret    

c0009df7 <free>:
c0009df7:	83 ec 18             	sub    esp,0x18
c0009dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfe:	e8 d5 6e ff ff       	call   c0000cd8 <dlfree>
c0009e03:	83 c4 1c             	add    esp,0x1c
c0009e06:	c3                   	ret    

c0009e07 <rfree>:
c0009e07:	83 ec 18             	sub    esp,0x18
c0009e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0e:	e8 c5 6e ff ff       	call   c0000cd8 <dlfree>
c0009e13:	83 c4 1c             	add    esp,0x1c
c0009e16:	c3                   	ret    

c0009e17 <calloc>:
c0009e17:	56                   	push   esi
c0009e18:	53                   	push   ebx
c0009e19:	83 ec 10             	sub    esp,0x10
c0009e1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009e20:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009e25:	53                   	push   ebx
c0009e26:	e8 bc ff ff ff       	call   c0009de7 <malloc>
c0009e2b:	89 c6                	mov    esi,eax
c0009e2d:	83 c4 0c             	add    esp,0xc
c0009e30:	53                   	push   ebx
c0009e31:	6a 00                	push   0x0
c0009e33:	50                   	push   eax
c0009e34:	e8 5b 68 ff ff       	call   c0000694 <memset>
c0009e39:	89 f0                	mov    eax,esi
c0009e3b:	83 c4 14             	add    esp,0x14
c0009e3e:	5b                   	pop    ebx
c0009e3f:	5e                   	pop    esi
c0009e40:	c3                   	ret    

c0009e41 <Krnl::setBootMessage(char const*)>:
c0009e41:	57                   	push   edi
c0009e42:	56                   	push   esi
c0009e43:	53                   	push   ebx
c0009e44:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009e4a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009e51:	68 9e 00 00 00       	push   0x9e
c0009e56:	6a 00                	push   0x0
c0009e58:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009e5c:	56                   	push   esi
c0009e5d:	e8 32 68 ff ff       	call   c0000694 <memset>
c0009e62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009e65:	e8 46 68 ff ff       	call   c00006b0 <strlen>
c0009e6a:	ba 50 00 00 00       	mov    edx,0x50
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	29 c2                	sub    edx,eax
c0009e74:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009e78:	d1 ea                	shr    edx,1
c0009e7a:	84 c0                	test   al,al
c0009e7c:	74 19                	je     c0009e97 <Krnl::setBootMessage(char const*)+0x56>
c0009e7e:	01 d2                	add    edx,edx
c0009e80:	43                   	inc    ebx
c0009e81:	01 f2                	add    edx,esi
c0009e83:	80 cc 0f             	or     ah,0xf
c0009e86:	83 c2 02             	add    edx,0x2
c0009e89:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009e8d:	43                   	inc    ebx
c0009e8e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009e93:	84 c0                	test   al,al
c0009e95:	75 ec                	jne    c0009e83 <Krnl::setBootMessage(char const*)+0x42>
c0009e97:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009e9c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ea1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009ea3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ea9:	5b                   	pop    ebx
c0009eaa:	5e                   	pop    esi
c0009eab:	5f                   	pop    edi
c0009eac:	c3                   	ret    

c0009ead <kernel_main>:
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 20             	sub    esp,0x20
c0009eb3:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009eb8:	a3 e0 8b 02 c0       	mov    ds:0xc0028be0,eax
c0009ebd:	f6 c4 08             	test   ah,0x8
c0009ec0:	0f 85 7a 03 00 00    	jne    c000a240 <kernel_main+0x393>
c0009ec6:	31 f6                	xor    esi,esi
c0009ec8:	bf f9 03 00 00       	mov    edi,0x3f9
c0009ecd:	89 f0                	mov    eax,esi
c0009ecf:	89 fa                	mov    edx,edi
c0009ed1:	ee                   	out    dx,al
c0009ed2:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009ed7:	b0 80                	mov    al,0x80
c0009ed9:	89 da                	mov    edx,ebx
c0009edb:	ee                   	out    dx,al
c0009edc:	b1 03                	mov    cl,0x3
c0009ede:	ba f8 03 00 00       	mov    edx,0x3f8
c0009ee3:	88 c8                	mov    al,cl
c0009ee5:	ee                   	out    dx,al
c0009ee6:	89 f0                	mov    eax,esi
c0009ee8:	89 fa                	mov    edx,edi
c0009eea:	ee                   	out    dx,al
c0009eeb:	88 c8                	mov    al,cl
c0009eed:	89 da                	mov    edx,ebx
c0009eef:	ee                   	out    dx,al
c0009ef0:	b0 c7                	mov    al,0xc7
c0009ef2:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ef7:	ee                   	out    dx,al
c0009ef8:	b0 0b                	mov    al,0xb
c0009efa:	ba fc 03 00 00       	mov    edx,0x3fc
c0009eff:	ee                   	out    dx,al
c0009f00:	83 ec 0c             	sub    esp,0xc
c0009f03:	68 c0 49 02 c0       	push   0xc00249c0
c0009f08:	e8 c6 31 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0009f17:	0f 85 eb 02 00 00    	jne    c000a208 <kernel_main+0x35b>
c0009f1d:	e8 d2 0c 00 00       	call   c000abf4 <installVgaTextImplementation()>
c0009f22:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0009f29:	0f 85 94 02 00 00    	jne    c000a1c3 <kernel_main+0x316>
c0009f2f:	0f b6 05 40 7e 02 c0 	movzx  eax,BYTE PTR ds:0xc0027e40
c0009f36:	84 c0                	test   al,al
c0009f38:	74 7b                	je     c0009fb5 <kernel_main+0x108>
c0009f3a:	31 db                	xor    ebx,ebx
c0009f3c:	bf 0a 00 00 00       	mov    edi,0xa
c0009f41:	be 05 00 00 00       	mov    esi,0x5
c0009f46:	31 c9                	xor    ecx,ecx
c0009f48:	eb 2a                	jmp    c0009f74 <kernel_main+0xc7>
c0009f4a:	3c 0d                	cmp    al,0xd
c0009f4c:	74 1a                	je     c0009f68 <kernel_main+0xbb>
c0009f4e:	3c 0a                	cmp    al,0xa
c0009f50:	74 40                	je     c0009f92 <kernel_main+0xe5>
c0009f52:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009f55:	80 cc 0e             	or     ah,0xe
c0009f58:	c1 e2 04             	shl    edx,0x4
c0009f5b:	01 ca                	add    edx,ecx
c0009f5d:	41                   	inc    ecx
c0009f5e:	01 fa                	add    edx,edi
c0009f60:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009f68:	43                   	inc    ebx
c0009f69:	0f b6 83 40 7e 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd81c0]
c0009f70:	84 c0                	test   al,al
c0009f72:	74 32                	je     c0009fa6 <kernel_main+0xf9>
c0009f74:	80 b9 76 7e 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd818a],0xdb
c0009f7b:	75 cd                	jne    c0009f4a <kernel_main+0x9d>
c0009f7d:	0f b6 91 75 7e 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd818b]
c0009f84:	83 e2 fe             	and    edx,0xfffffffe
c0009f87:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009f8d:	75 bb                	jne    c0009f4a <kernel_main+0x9d>
c0009f8f:	47                   	inc    edi
c0009f90:	eb b8                	jmp    c0009f4a <kernel_main+0x9d>
c0009f92:	43                   	inc    ebx
c0009f93:	46                   	inc    esi
c0009f94:	31 c9                	xor    ecx,ecx
c0009f96:	0f b6 83 40 7e 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd81c0]
c0009f9d:	bf 0a 00 00 00       	mov    edi,0xa
c0009fa2:	84 c0                	test   al,al
c0009fa4:	75 ce                	jne    c0009f74 <kernel_main+0xc7>
c0009fa6:	8b 15 e0 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028be0
c0009fac:	80 e6 08             	and    dh,0x8
c0009faf:	0f 85 bf 00 00 00    	jne    c000a074 <kernel_main+0x1c7>
c0009fb5:	83 ec 0c             	sub    esp,0xc
c0009fb8:	68 5c 4a 02 c0       	push   0xc0024a5c
c0009fbd:	e8 7f fe ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009fc2:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009fc7:	05 ff 0f 00 00       	add    eax,0xfff
c0009fcc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd4:	e8 44 06 00 00       	call   c000a61d <Phys::physicalMemorySetup(unsigned int)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0009fe3:	0f 85 a2 01 00 00    	jne    c000a18b <kernel_main+0x2de>
c0009fe9:	e8 7e 1f 00 00       	call   c000bf6c <Virt::virtualMemorySetup()>
c0009fee:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0009ff5:	0f 85 58 01 00 00    	jne    c000a153 <kernel_main+0x2a6>
c0009ffb:	83 ec 0c             	sub    esp,0xc
c0009ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c000a002:	56                   	push   esi
c000a003:	e8 20 20 00 00       	call   c000c028 <VAS::VAS()>
c000a008:	83 c4 10             	add    esp,0x10
c000a00b:	89 35 f0 8c 02 c0    	mov    DWORD PTR ds:0xc0028cf0,esi
c000a011:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c000a018:	0f 85 fd 00 00 00    	jne    c000a11b <kernel_main+0x26e>
c000a01e:	e8 fd 5f ff ff       	call   c0000020 <callGlobalConstructors>
c000a023:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c000a02a:	0f 85 b3 00 00 00    	jne    c000a0e3 <kernel_main+0x236>
c000a030:	83 ec 0c             	sub    esp,0xc
c000a033:	68 ec 01 00 00       	push   0x1ec
c000a038:	e8 aa fd ff ff       	call   c0009de7 <malloc>
c000a03d:	89 c3                	mov    ebx,eax
c000a03f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a042:	e8 89 eb ff ff       	call   c0008bd0 <Computer::Computer()>
c000a047:	83 c4 10             	add    esp,0x10
c000a04a:	89 1d c8 8b 02 c0    	mov    DWORD PTR ds:0xc0028bc8,ebx
c000a050:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c000a057:	75 53                	jne    c000a0ac <kernel_main+0x1ff>
c000a059:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a05b:	6a 00                	push   0x0
c000a05d:	6a 00                	push   0x0
c000a05f:	6a 00                	push   0x0
c000a061:	53                   	push   ebx
c000a062:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a065:	89 34 24             	mov    DWORD PTR [esp],esi
c000a068:	e8 6b 22 00 00       	call   c000c2d8 <VAS::~VAS()>
c000a06d:	83 c4 30             	add    esp,0x30
c000a070:	5b                   	pop    ebx
c000a071:	5e                   	pop    esi
c000a072:	5f                   	pop    edi
c000a073:	c3                   	ret    
c000a074:	83 ec 0c             	sub    esp,0xc
c000a077:	68 0b 4a 02 c0       	push   0xc0024a0b
c000a07c:	e8 c0 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a08b:	0f 85 24 ff ff ff    	jne    c0009fb5 <kernel_main+0x108>
c000a091:	eb 04                	jmp    c000a097 <kernel_main+0x1ea>
c000a093:	3c 1c                	cmp    al,0x1c
c000a095:	74 06                	je     c000a09d <kernel_main+0x1f0>
c000a097:	e4 60                	in     al,0x60
c000a099:	3c 5a                	cmp    al,0x5a
c000a09b:	75 f6                	jne    c000a093 <kernel_main+0x1e6>
c000a09d:	e4 60                	in     al,0x60
c000a09f:	3c 5a                	cmp    al,0x5a
c000a0a1:	74 fa                	je     c000a09d <kernel_main+0x1f0>
c000a0a3:	3c 1c                	cmp    al,0x1c
c000a0a5:	74 f6                	je     c000a09d <kernel_main+0x1f0>
c000a0a7:	e9 09 ff ff ff       	jmp    c0009fb5 <kernel_main+0x108>
c000a0ac:	83 ec 0c             	sub    esp,0xc
c000a0af:	68 4a 4a 02 c0       	push   0xc0024a4a
c000a0b4:	e8 88 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a0b9:	83 c4 10             	add    esp,0x10
c000a0bc:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a0c3:	74 0c                	je     c000a0d1 <kernel_main+0x224>
c000a0c5:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c000a0cb:	eb 8c                	jmp    c000a059 <kernel_main+0x1ac>
c000a0cd:	3c 1c                	cmp    al,0x1c
c000a0cf:	74 06                	je     c000a0d7 <kernel_main+0x22a>
c000a0d1:	e4 60                	in     al,0x60
c000a0d3:	3c 5a                	cmp    al,0x5a
c000a0d5:	75 f6                	jne    c000a0cd <kernel_main+0x220>
c000a0d7:	e4 60                	in     al,0x60
c000a0d9:	3c 5a                	cmp    al,0x5a
c000a0db:	74 fa                	je     c000a0d7 <kernel_main+0x22a>
c000a0dd:	3c 1c                	cmp    al,0x1c
c000a0df:	74 f6                	je     c000a0d7 <kernel_main+0x22a>
c000a0e1:	eb e2                	jmp    c000a0c5 <kernel_main+0x218>
c000a0e3:	83 ec 0c             	sub    esp,0xc
c000a0e6:	68 37 4a 02 c0       	push   0xc0024a37
c000a0eb:	e8 51 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a0f0:	83 c4 10             	add    esp,0x10
c000a0f3:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a0fa:	0f 85 30 ff ff ff    	jne    c000a030 <kernel_main+0x183>
c000a100:	eb 04                	jmp    c000a106 <kernel_main+0x259>
c000a102:	3c 1c                	cmp    al,0x1c
c000a104:	74 06                	je     c000a10c <kernel_main+0x25f>
c000a106:	e4 60                	in     al,0x60
c000a108:	3c 5a                	cmp    al,0x5a
c000a10a:	75 f6                	jne    c000a102 <kernel_main+0x255>
c000a10c:	e4 60                	in     al,0x60
c000a10e:	3c 5a                	cmp    al,0x5a
c000a110:	74 fa                	je     c000a10c <kernel_main+0x25f>
c000a112:	3c 1c                	cmp    al,0x1c
c000a114:	74 f6                	je     c000a10c <kernel_main+0x25f>
c000a116:	e9 15 ff ff ff       	jmp    c000a030 <kernel_main+0x183>
c000a11b:	83 ec 0c             	sub    esp,0xc
c000a11e:	68 2d 4a 02 c0       	push   0xc0024a2d
c000a123:	e8 19 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a128:	83 c4 10             	add    esp,0x10
c000a12b:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a132:	0f 85 e6 fe ff ff    	jne    c000a01e <kernel_main+0x171>
c000a138:	eb 04                	jmp    c000a13e <kernel_main+0x291>
c000a13a:	3c 1c                	cmp    al,0x1c
c000a13c:	74 06                	je     c000a144 <kernel_main+0x297>
c000a13e:	e4 60                	in     al,0x60
c000a140:	3c 5a                	cmp    al,0x5a
c000a142:	75 f6                	jne    c000a13a <kernel_main+0x28d>
c000a144:	e4 60                	in     al,0x60
c000a146:	3c 5a                	cmp    al,0x5a
c000a148:	74 fa                	je     c000a144 <kernel_main+0x297>
c000a14a:	3c 1c                	cmp    al,0x1c
c000a14c:	74 f6                	je     c000a144 <kernel_main+0x297>
c000a14e:	e9 cb fe ff ff       	jmp    c000a01e <kernel_main+0x171>
c000a153:	83 ec 0c             	sub    esp,0xc
c000a156:	68 22 4a 02 c0       	push   0xc0024a22
c000a15b:	e8 e1 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a160:	83 c4 10             	add    esp,0x10
c000a163:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a16a:	0f 85 8b fe ff ff    	jne    c0009ffb <kernel_main+0x14e>
c000a170:	eb 04                	jmp    c000a176 <kernel_main+0x2c9>
c000a172:	3c 1c                	cmp    al,0x1c
c000a174:	74 06                	je     c000a17c <kernel_main+0x2cf>
c000a176:	e4 60                	in     al,0x60
c000a178:	3c 5a                	cmp    al,0x5a
c000a17a:	75 f6                	jne    c000a172 <kernel_main+0x2c5>
c000a17c:	e4 60                	in     al,0x60
c000a17e:	3c 5a                	cmp    al,0x5a
c000a180:	74 fa                	je     c000a17c <kernel_main+0x2cf>
c000a182:	3c 1c                	cmp    al,0x1c
c000a184:	74 f6                	je     c000a17c <kernel_main+0x2cf>
c000a186:	e9 70 fe ff ff       	jmp    c0009ffb <kernel_main+0x14e>
c000a18b:	83 ec 0c             	sub    esp,0xc
c000a18e:	68 17 4a 02 c0       	push   0xc0024a17
c000a193:	e8 a9 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a198:	83 c4 10             	add    esp,0x10
c000a19b:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a1a2:	0f 85 41 fe ff ff    	jne    c0009fe9 <kernel_main+0x13c>
c000a1a8:	eb 04                	jmp    c000a1ae <kernel_main+0x301>
c000a1aa:	3c 1c                	cmp    al,0x1c
c000a1ac:	74 06                	je     c000a1b4 <kernel_main+0x307>
c000a1ae:	e4 60                	in     al,0x60
c000a1b0:	3c 5a                	cmp    al,0x5a
c000a1b2:	75 f6                	jne    c000a1aa <kernel_main+0x2fd>
c000a1b4:	e4 60                	in     al,0x60
c000a1b6:	3c 5a                	cmp    al,0x5a
c000a1b8:	74 fa                	je     c000a1b4 <kernel_main+0x307>
c000a1ba:	3c 1c                	cmp    al,0x1c
c000a1bc:	74 f6                	je     c000a1b4 <kernel_main+0x307>
c000a1be:	e9 26 fe ff ff       	jmp    c0009fe9 <kernel_main+0x13c>
c000a1c3:	83 ec 0c             	sub    esp,0xc
c000a1c6:	68 f9 49 02 c0       	push   0xc00249f9
c000a1cb:	e8 71 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a1d0:	8b 15 e0 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028be0
c000a1d6:	83 c4 10             	add    esp,0x10
c000a1d9:	f6 c2 80             	test   dl,0x80
c000a1dc:	74 18                	je     c000a1f6 <kernel_main+0x349>
c000a1de:	0f b6 05 40 7e 02 c0 	movzx  eax,BYTE PTR ds:0xc0027e40
c000a1e5:	84 c0                	test   al,al
c000a1e7:	0f 85 4d fd ff ff    	jne    c0009f3a <kernel_main+0x8d>
c000a1ed:	e9 ba fd ff ff       	jmp    c0009fac <kernel_main+0xff>
c000a1f2:	3c 1c                	cmp    al,0x1c
c000a1f4:	74 06                	je     c000a1fc <kernel_main+0x34f>
c000a1f6:	e4 60                	in     al,0x60
c000a1f8:	3c 5a                	cmp    al,0x5a
c000a1fa:	75 f6                	jne    c000a1f2 <kernel_main+0x345>
c000a1fc:	e4 60                	in     al,0x60
c000a1fe:	3c 5a                	cmp    al,0x5a
c000a200:	74 fa                	je     c000a1fc <kernel_main+0x34f>
c000a202:	3c 1c                	cmp    al,0x1c
c000a204:	74 f6                	je     c000a1fc <kernel_main+0x34f>
c000a206:	eb d6                	jmp    c000a1de <kernel_main+0x331>
c000a208:	83 ec 0c             	sub    esp,0xc
c000a20b:	68 ea 49 02 c0       	push   0xc00249ea
c000a210:	e8 2c fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a215:	83 c4 10             	add    esp,0x10
c000a218:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a21f:	0f 85 f8 fc ff ff    	jne    c0009f1d <kernel_main+0x70>
c000a225:	eb 04                	jmp    c000a22b <kernel_main+0x37e>
c000a227:	3c 1c                	cmp    al,0x1c
c000a229:	74 06                	je     c000a231 <kernel_main+0x384>
c000a22b:	e4 60                	in     al,0x60
c000a22d:	3c 5a                	cmp    al,0x5a
c000a22f:	75 f6                	jne    c000a227 <kernel_main+0x37a>
c000a231:	e4 60                	in     al,0x60
c000a233:	3c 5a                	cmp    al,0x5a
c000a235:	74 fa                	je     c000a231 <kernel_main+0x384>
c000a237:	3c 1c                	cmp    al,0x1c
c000a239:	74 f6                	je     c000a231 <kernel_main+0x384>
c000a23b:	e9 dd fc ff ff       	jmp    c0009f1d <kernel_main+0x70>
c000a240:	83 ec 0c             	sub    esp,0xc
c000a243:	68 d7 49 02 c0       	push   0xc00249d7
c000a248:	e8 f4 fb ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a257:	0f 85 69 fc ff ff    	jne    c0009ec6 <kernel_main+0x19>
c000a25d:	eb 04                	jmp    c000a263 <kernel_main+0x3b6>
c000a25f:	3c 1c                	cmp    al,0x1c
c000a261:	74 06                	je     c000a269 <kernel_main+0x3bc>
c000a263:	e4 60                	in     al,0x60
c000a265:	3c 5a                	cmp    al,0x5a
c000a267:	75 f6                	jne    c000a25f <kernel_main+0x3b2>
c000a269:	e4 60                	in     al,0x60
c000a26b:	3c 5a                	cmp    al,0x5a
c000a26d:	74 fa                	je     c000a269 <kernel_main+0x3bc>
c000a26f:	3c 1c                	cmp    al,0x1c
c000a271:	74 f6                	je     c000a269 <kernel_main+0x3bc>
c000a273:	e9 4e fc ff ff       	jmp    c0009ec6 <kernel_main+0x19>

c000a278 <Phys::allocateDMA(unsigned long)>:
c000a278:	55                   	push   ebp
c000a279:	31 ed                	xor    ebp,ebp
c000a27b:	57                   	push   edi
c000a27c:	56                   	push   esi
c000a27d:	53                   	push   ebx
c000a27e:	31 db                	xor    ebx,ebx
c000a280:	83 ec 28             	sub    esp,0x28
c000a283:	68 7b 4a 02 c0       	push   0xc0024a7b
c000a288:	e8 46 2e 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a28d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a29a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a2a2:	c1 ef 0c             	shr    edi,0xc
c000a2a5:	31 c0                	xor    eax,eax
c000a2a7:	eb 19                	jmp    c000a2c2 <Phys::allocateDMA(unsigned long)+0x4a>
c000a2a9:	85 c0                	test   eax,eax
c000a2ab:	75 06                	jne    c000a2b3 <Phys::allocateDMA(unsigned long)+0x3b>
c000a2ad:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a2b1:	89 dd                	mov    ebp,ebx
c000a2b3:	8d 70 01             	lea    esi,[eax+0x1]
c000a2b6:	39 f7                	cmp    edi,esi
c000a2b8:	74 3f                	je     c000a2f9 <Phys::allocateDMA(unsigned long)+0x81>
c000a2ba:	89 f0                	mov    eax,esi
c000a2bc:	43                   	inc    ebx
c000a2bd:	83 fb 0f             	cmp    ebx,0xf
c000a2c0:	7f 11                	jg     c000a2d3 <Phys::allocateDMA(unsigned long)+0x5b>
c000a2c2:	80 bb fc 8b 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd7404],0x0
c000a2c9:	74 de                	je     c000a2a9 <Phys::allocateDMA(unsigned long)+0x31>
c000a2cb:	31 c0                	xor    eax,eax
c000a2cd:	43                   	inc    ebx
c000a2ce:	83 fb 0f             	cmp    ebx,0xf
c000a2d1:	7e ef                	jle    c000a2c2 <Phys::allocateDMA(unsigned long)+0x4a>
c000a2d3:	83 ec 0c             	sub    esp,0xc
c000a2d6:	68 ab 4a 02 c0       	push   0xc0024aab
c000a2db:	e8 f3 2d 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a2e0:	c7 04 24 68 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b68
c000a2e7:	e8 c9 ae 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	31 c0                	xor    eax,eax
c000a2f1:	83 c4 1c             	add    esp,0x1c
c000a2f4:	5b                   	pop    ebx
c000a2f5:	5e                   	pop    esi
c000a2f6:	5f                   	pop    edi
c000a2f7:	5d                   	pop    ebp
c000a2f8:	c3                   	ret    
c000a2f9:	89 e9                	mov    ecx,ebp
c000a2fb:	c1 f9 04             	sar    ecx,0x4
c000a2fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a302:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a306:	89 ca                	mov    edx,ecx
c000a308:	4a                   	dec    edx
c000a309:	79 03                	jns    c000a30e <Phys::allocateDMA(unsigned long)+0x96>
c000a30b:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a30e:	c1 fa 04             	sar    edx,0x4
c000a311:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a315:	74 08                	je     c000a31f <Phys::allocateDMA(unsigned long)+0xa7>
c000a317:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a31b:	31 c0                	xor    eax,eax
c000a31d:	eb ae                	jmp    c000a2cd <Phys::allocateDMA(unsigned long)+0x55>
c000a31f:	85 f6                	test   esi,esi
c000a321:	74 15                	je     c000a338 <Phys::allocateDMA(unsigned long)+0xc0>
c000a323:	8d 95 fc 8b 02 c0    	lea    edx,[ebp-0x3ffd7404]
c000a329:	8d 84 05 fd 8b 02 c0 	lea    eax,[ebp+eax*1-0x3ffd7403]
c000a330:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a333:	42                   	inc    edx
c000a334:	39 d0                	cmp    eax,edx
c000a336:	75 f8                	jne    c000a330 <Phys::allocateDMA(unsigned long)+0xb8>
c000a338:	83 ec 0c             	sub    esp,0xc
c000a33b:	01 3d f4 8b 02 c0    	add    DWORD PTR ds:0xc0028bf4,edi
c000a341:	68 94 4a 02 c0       	push   0xc0024a94
c000a346:	e8 88 2d 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a34b:	83 c4 10             	add    esp,0x10
c000a34e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a352:	85 c0                	test   eax,eax
c000a354:	74 23                	je     c000a379 <Phys::allocateDMA(unsigned long)+0x101>
c000a356:	83 ec 0c             	sub    esp,0xc
c000a359:	68 8c 7a 02 c0       	push   0xc0027a8c
c000a35e:	e8 70 2d 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a363:	c7 04 24 68 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b68
c000a36a:	e8 46 ae 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000a36f:	83 c4 10             	add    esp,0x10
c000a372:	89 f0                	mov    eax,esi
c000a374:	e9 43 ff ff ff       	jmp    c000a2bc <Phys::allocateDMA(unsigned long)+0x44>
c000a379:	c1 e5 0c             	shl    ebp,0xc
c000a37c:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a382:	e9 6a ff ff ff       	jmp    c000a2f1 <Phys::allocateDMA(unsigned long)+0x79>

c000a387 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a387:	83 ec 18             	sub    esp,0x18
c000a38a:	68 af 4a 02 c0       	push   0xc0024aaf
c000a38f:	e8 3f 2d 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a394:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a398:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a3a2:	c1 ea 0c             	shr    edx,0xc
c000a3a5:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a3aa:	29 15 f4 8b 02 c0    	sub    DWORD PTR ds:0xc0028bf4,edx
c000a3b0:	c1 e8 0c             	shr    eax,0xc
c000a3b3:	83 c4 10             	add    esp,0x10
c000a3b6:	85 d2                	test   edx,edx
c000a3b8:	74 0f                	je     c000a3c9 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a3ba:	05 fc 8b 02 c0       	add    eax,0xc0028bfc
c000a3bf:	01 c2                	add    edx,eax
c000a3c1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a3c4:	40                   	inc    eax
c000a3c5:	39 d0                	cmp    eax,edx
c000a3c7:	75 f8                	jne    c000a3c1 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a3c9:	83 c4 0c             	add    esp,0xc
c000a3cc:	c3                   	ret    

c000a3cd <Phys::setPageState(unsigned long, bool)>:
c000a3cd:	56                   	push   esi
c000a3ce:	ba 01 00 00 00       	mov    edx,0x1
c000a3d3:	53                   	push   ebx
c000a3d4:	8b 35 84 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f84
c000a3da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a3de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3e2:	89 c8                	mov    eax,ecx
c000a3e4:	83 e1 07             	and    ecx,0x7
c000a3e7:	c1 e8 03             	shr    eax,0x3
c000a3ea:	d3 e3                	shl    ebx,cl
c000a3ec:	01 c6                	add    esi,eax
c000a3ee:	d3 e2                	shl    edx,cl
c000a3f0:	f7 d2                	not    edx
c000a3f2:	20 16                	and    BYTE PTR [esi],dl
c000a3f4:	03 05 84 7f 02 c0    	add    eax,DWORD PTR ds:0xc0027f84
c000a3fa:	08 18                	or     BYTE PTR [eax],bl
c000a3fc:	5b                   	pop    ebx
c000a3fd:	5e                   	pop    esi
c000a3fe:	c3                   	ret    

c000a3ff <Phys::getPageState(unsigned long)>:
c000a3ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a403:	8b 15 84 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f84
c000a409:	89 c8                	mov    eax,ecx
c000a40b:	83 e1 07             	and    ecx,0x7
c000a40e:	c1 e8 03             	shr    eax,0x3
c000a411:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a415:	d3 f8                	sar    eax,cl
c000a417:	83 e0 01             	and    eax,0x1
c000a41a:	c3                   	ret    

c000a41b <Phys::freePage(unsigned long)>:
c000a41b:	53                   	push   ebx
c000a41c:	83 ec 10             	sub    esp,0x10
c000a41f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a423:	53                   	push   ebx
c000a424:	68 c5 4a 02 c0       	push   0xc0024ac5
c000a429:	e8 a5 2c 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a42e:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	3d ff ff 00 00       	cmp    eax,0xffff
c000a43c:	76 3d                	jbe    c000a47b <Phys::freePage(unsigned long)+0x60>
c000a43e:	83 ec 0c             	sub    esp,0xc
c000a441:	c1 eb 0c             	shr    ebx,0xc
c000a444:	53                   	push   ebx
c000a445:	e8 b5 ff ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a44a:	83 c4 10             	add    esp,0x10
c000a44d:	84 c0                	test   al,al
c000a44f:	74 19                	je     c000a46a <Phys::freePage(unsigned long)+0x4f>
c000a451:	83 ec 08             	sub    esp,0x8
c000a454:	ff 0d f4 8b 02 c0    	dec    DWORD PTR ds:0xc0028bf4
c000a45a:	6a 00                	push   0x0
c000a45c:	53                   	push   ebx
c000a45d:	e8 6b ff ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	83 c4 08             	add    esp,0x8
c000a468:	5b                   	pop    ebx
c000a469:	c3                   	ret    
c000a46a:	c7 44 24 10 ef 4a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024aef
c000a472:	83 c4 08             	add    esp,0x8
c000a475:	5b                   	pop    ebx
c000a476:	e9 3a ad 00 00       	jmp    c00151b5 <Krnl::panic(char const*)>
c000a47b:	83 ec 08             	sub    esp,0x8
c000a47e:	53                   	push   ebx
c000a47f:	68 d8 4a 02 c0       	push   0xc0024ad8
c000a484:	e8 4a 2c 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a489:	58                   	pop    eax
c000a48a:	5a                   	pop    edx
c000a48b:	68 00 10 00 00       	push   0x1000
c000a490:	53                   	push   ebx
c000a491:	e8 f1 fe ff ff       	call   c000a387 <Phys::freeDMA(unsigned long, unsigned long)>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	83 c4 08             	add    esp,0x8
c000a49c:	5b                   	pop    ebx
c000a49d:	c3                   	ret    

c000a49e <Phys::allocatePage()>:
c000a49e:	56                   	push   esi
c000a49f:	53                   	push   ebx
c000a4a0:	83 ec 14             	sub    esp,0x14
c000a4a3:	8b 35 e8 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028be8
c000a4a9:	89 f3                	mov    ebx,esi
c000a4ab:	eb 0a                	jmp    c000a4b7 <Phys::allocatePage()+0x19>
c000a4ad:	89 1d e8 8b 02 c0    	mov    DWORD PTR ds:0xc0028be8,ebx
c000a4b3:	39 de                	cmp    esi,ebx
c000a4b5:	74 24                	je     c000a4db <Phys::allocatePage()+0x3d>
c000a4b7:	53                   	push   ebx
c000a4b8:	e8 42 ff ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a4bd:	5a                   	pop    edx
c000a4be:	84 c0                	test   al,al
c000a4c0:	74 69                	je     c000a52b <Phys::allocatePage()+0x8d>
c000a4c2:	43                   	inc    ebx
c000a4c3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a4c9:	75 e2                	jne    c000a4ad <Phys::allocatePage()+0xf>
c000a4cb:	31 db                	xor    ebx,ebx
c000a4cd:	c7 05 e8 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028be8,0x0
c000a4d7:	39 de                	cmp    esi,ebx
c000a4d9:	75 dc                	jne    c000a4b7 <Phys::allocatePage()+0x19>
c000a4db:	83 ec 0c             	sub    esp,0xc
c000a4de:	80 35 0c 8c 02 c0 01 	xor    BYTE PTR ds:0xc0028c0c,0x1
c000a4e5:	68 90 4b 02 c0       	push   0xc0024b90
c000a4ea:	e8 e4 2b 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a4ef:	58                   	pop    eax
c000a4f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a4f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a4f8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a4fe:	e8 5f 28 00 00       	call   c000cd62 <VAS::scanForEviction()>
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	85 c0                	test   eax,eax
c000a508:	75 62                	jne    c000a56c <Phys::allocatePage()+0xce>
c000a50a:	83 ec 0c             	sub    esp,0xc
c000a50d:	68 b4 4b 02 c0       	push   0xc0024bb4
c000a512:	e8 9e ac 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000a517:	83 c4 10             	add    esp,0x10
c000a51a:	8b 1d e8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028be8
c000a520:	53                   	push   ebx
c000a521:	e8 d9 fe ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a526:	5a                   	pop    edx
c000a527:	84 c0                	test   al,al
c000a529:	75 97                	jne    c000a4c2 <Phys::allocatePage()+0x24>
c000a52b:	6a 01                	push   0x1
c000a52d:	53                   	push   ebx
c000a52e:	e8 9a fe ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a533:	5a                   	pop    edx
c000a534:	a1 f4 8b 02 c0       	mov    eax,ds:0xc0028bf4
c000a539:	59                   	pop    ecx
c000a53a:	40                   	inc    eax
c000a53b:	8b 15 e8 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028be8
c000a541:	a3 f4 8b 02 c0       	mov    ds:0xc0028bf4,eax
c000a546:	c1 e2 0c             	shl    edx,0xc
c000a549:	52                   	push   edx
c000a54a:	ff 35 f8 8b 02 c0    	push   DWORD PTR ds:0xc0028bf8
c000a550:	50                   	push   eax
c000a551:	68 05 4b 02 c0       	push   0xc0024b05
c000a556:	e8 78 2b 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a55b:	a1 e8 8b 02 c0       	mov    eax,ds:0xc0028be8
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	c1 e0 0c             	shl    eax,0xc
c000a566:	83 c4 14             	add    esp,0x14
c000a569:	5b                   	pop    ebx
c000a56a:	5e                   	pop    esi
c000a56b:	c3                   	ret    
c000a56c:	83 ec 08             	sub    esp,0x8
c000a56f:	89 c2                	mov    edx,eax
c000a571:	6a 01                	push   0x1
c000a573:	c1 ea 0c             	shr    edx,0xc
c000a576:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a57a:	52                   	push   edx
c000a57b:	e8 4d fe ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a587:	eb dd                	jmp    c000a566 <Phys::allocatePage()+0xc8>

c000a589 <Phys::allocateContiguousPages(int)>:
c000a589:	57                   	push   edi
c000a58a:	56                   	push   esi
c000a58b:	53                   	push   ebx
c000a58c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a590:	fa                   	cli    
c000a591:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c000a597:	31 db                	xor    ebx,ebx
c000a599:	85 db                	test   ebx,ebx
c000a59b:	75 11                	jne    c000a5ae <Phys::allocateContiguousPages(int)+0x25>
c000a59d:	e8 fc fe ff ff       	call   c000a49e <Phys::allocatePage()>
c000a5a2:	83 fe 01             	cmp    esi,0x1
c000a5a5:	89 c7                	mov    edi,eax
c000a5a7:	74 21                	je     c000a5ca <Phys::allocateContiguousPages(int)+0x41>
c000a5a9:	bb 01 00 00 00       	mov    ebx,0x1
c000a5ae:	e8 eb fe ff ff       	call   c000a49e <Phys::allocatePage()>
c000a5b3:	89 da                	mov    edx,ebx
c000a5b5:	c1 e2 0c             	shl    edx,0xc
c000a5b8:	01 fa                	add    edx,edi
c000a5ba:	39 c2                	cmp    edx,eax
c000a5bc:	74 20                	je     c000a5de <Phys::allocateContiguousPages(int)+0x55>
c000a5be:	bb 01 00 00 00       	mov    ebx,0x1
c000a5c3:	89 c7                	mov    edi,eax
c000a5c5:	83 fe 01             	cmp    esi,0x1
c000a5c8:	75 e4                	jne    c000a5ae <Phys::allocateContiguousPages(int)+0x25>
c000a5ca:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000a5cf:	48                   	dec    eax
c000a5d0:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000a5d5:	75 01                	jne    c000a5d8 <Phys::allocateContiguousPages(int)+0x4f>
c000a5d7:	fb                   	sti    
c000a5d8:	89 f8                	mov    eax,edi
c000a5da:	5b                   	pop    ebx
c000a5db:	5e                   	pop    esi
c000a5dc:	5f                   	pop    edi
c000a5dd:	c3                   	ret    
c000a5de:	43                   	inc    ebx
c000a5df:	39 f3                	cmp    ebx,esi
c000a5e1:	75 b6                	jne    c000a599 <Phys::allocateContiguousPages(int)+0x10>
c000a5e3:	eb e5                	jmp    c000a5ca <Phys::allocateContiguousPages(int)+0x41>

c000a5e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a5e5:	56                   	push   esi
c000a5e6:	53                   	push   ebx
c000a5e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a5eb:	39 1d ec 8b 02 c0    	cmp    DWORD PTR ds:0xc0028bec,ebx
c000a5f1:	73 06                	jae    c000a5f9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a5f3:	89 1d ec 8b 02 c0    	mov    DWORD PTR ds:0xc0028bec,ebx
c000a5f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a5fd:	c1 eb 0c             	shr    ebx,0xc
c000a600:	c1 e8 0c             	shr    eax,0xc
c000a603:	39 d8                	cmp    eax,ebx
c000a605:	73 13                	jae    c000a61a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a607:	6a 00                	push   0x0
c000a609:	8d 70 01             	lea    esi,[eax+0x1]
c000a60c:	50                   	push   eax
c000a60d:	e8 bb fd ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a612:	5a                   	pop    edx
c000a613:	89 f0                	mov    eax,esi
c000a615:	59                   	pop    ecx
c000a616:	39 f3                	cmp    ebx,esi
c000a618:	75 ed                	jne    c000a607 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a61a:	5b                   	pop    ebx
c000a61b:	5e                   	pop    esi
c000a61c:	c3                   	ret    

c000a61d <Phys::physicalMemorySetup(unsigned int)>:
c000a61d:	55                   	push   ebp
c000a61e:	57                   	push   edi
c000a61f:	56                   	push   esi
c000a620:	53                   	push   ebx
c000a621:	31 db                	xor    ebx,ebx
c000a623:	83 ec 40             	sub    esp,0x40
c000a626:	6a 10                	push   0x10
c000a628:	6a 00                	push   0x0
c000a62a:	68 fc 8b 02 c0       	push   0xc0028bfc
c000a62f:	e8 60 60 ff ff       	call   c0000694 <memset>
c000a634:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a638:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a63d:	05 00 10 00 00       	add    eax,0x1000
c000a642:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a646:	5a                   	pop    edx
c000a647:	59                   	pop    ecx
c000a648:	50                   	push   eax
c000a649:	68 23 4b 02 c0       	push   0xc0024b23
c000a64e:	e8 80 2a 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a653:	83 c4 10             	add    esp,0x10
c000a656:	83 ec 08             	sub    esp,0x8
c000a659:	6a 01                	push   0x1
c000a65b:	53                   	push   ebx
c000a65c:	43                   	inc    ebx
c000a65d:	e8 6b fd ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a662:	83 c4 10             	add    esp,0x10
c000a665:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a66b:	75 e9                	jne    c000a656 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a66d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a674:	66 85 c0             	test   ax,ax
c000a677:	0f 84 8e 01 00 00    	je     c000a80b <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a67d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a681:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a689:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a68d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a696:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a69e:	eb 15                	jmp    c000a6b5 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a6a0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a6a4:	83 c3 18             	add    ebx,0x18
c000a6a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6ab:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a6af:	0f 84 66 01 00 00    	je     c000a81b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a6b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a6b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a6bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a6be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a6c6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a6c8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a6cb:	01 f0                	add    eax,esi
c000a6cd:	55                   	push   ebp
c000a6ce:	11 fa                	adc    edx,edi
c000a6d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a6d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a6d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a6dc:	56                   	push   esi
c000a6dd:	68 e4 4b 02 c0       	push   0xc0024be4
c000a6e2:	e8 ec 29 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a6e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6eb:	83 c4 10             	add    esp,0x10
c000a6ee:	09 f8                	or     eax,edi
c000a6f0:	0f 85 25 01 00 00    	jne    c000a81b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a6f6:	4d                   	dec    ebp
c000a6f7:	75 a7                	jne    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6f9:	ba 00 00 08 00       	mov    edx,0x80000
c000a6fe:	89 c1                	mov    ecx,eax
c000a700:	39 f2                	cmp    edx,esi
c000a702:	19 f9                	sbb    ecx,edi
c000a704:	0f 82 a7 00 00 00    	jb     c000a7b1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a70a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a70e:	89 c1                	mov    ecx,eax
c000a710:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a714:	0f 83 97 00 00 00    	jae    c000a7b1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a71a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a71f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a723:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a727:	39 fa                	cmp    edx,edi
c000a729:	19 e8                	sbb    eax,ebp
c000a72b:	0f 82 a5 01 00 00    	jb     c000a8d6 <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a731:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a735:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a739:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a73f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a744:	83 d5 ff             	adc    ebp,0xffffffff
c000a747:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a74b:	31 c0                	xor    eax,eax
c000a74d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a751:	39 fa                	cmp    edx,edi
c000a753:	89 c1                	mov    ecx,eax
c000a755:	19 e9                	sbb    ecx,ebp
c000a757:	0f 83 43 ff ff ff    	jae    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a75d:	be 00 00 08 00       	mov    esi,0x80000
c000a762:	57                   	push   edi
c000a763:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a767:	57                   	push   edi
c000a768:	56                   	push   esi
c000a769:	68 08 4c 02 c0       	push   0xc0024c08
c000a76e:	e8 60 29 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a773:	5d                   	pop    ebp
c000a774:	58                   	pop    eax
c000a775:	57                   	push   edi
c000a776:	56                   	push   esi
c000a777:	e8 69 fe ff ff       	call   c000a5e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a77c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a784:	83 c4 0c             	add    esp,0xc
c000a787:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a78b:	03 05 f8 8b 02 c0    	add    eax,DWORD PTR ds:0xc0028bf8
c000a791:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a798:	a3 f8 8b 02 c0       	mov    ds:0xc0028bf8,eax
c000a79d:	52                   	push   edx
c000a79e:	50                   	push   eax
c000a79f:	68 49 4b 02 c0       	push   0xc0024b49
c000a7a4:	e8 2a 29 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000a7a9:	83 c4 10             	add    esp,0x10
c000a7ac:	e9 ef fe ff ff       	jmp    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7b1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a7b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a7bd:	39 ea                	cmp    edx,ebp
c000a7bf:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a7c3:	0f 82 d7 fe ff ff    	jb     c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7c9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a7ce:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a7d2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a7d6:	0f 83 c4 fe ff ff    	jae    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7dc:	39 ee                	cmp    esi,ebp
c000a7de:	89 f8                	mov    eax,edi
c000a7e0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a7e4:	0f 83 78 ff ff ff    	jae    c000a762 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a7ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a7ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a7f2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a7f6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a7fa:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a7fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a802:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a806:	e9 57 ff ff ff       	jmp    c000a762 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a80b:	83 ec 0c             	sub    esp,0xc
c000a80e:	68 3b 4b 02 c0       	push   0xc0024b3b
c000a813:	e8 9d a9 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000a818:	83 c4 10             	add    esp,0x10
c000a81b:	83 ec 08             	sub    esp,0x8
c000a81e:	6a 00                	push   0x0
c000a820:	6a 05                	push   0x5
c000a822:	e8 a6 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a827:	58                   	pop    eax
c000a828:	5a                   	pop    edx
c000a829:	6a 00                	push   0x0
c000a82b:	6a 06                	push   0x6
c000a82d:	e8 9b fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a832:	59                   	pop    ecx
c000a833:	5b                   	pop    ebx
c000a834:	bb 60 00 00 00       	mov    ebx,0x60
c000a839:	6a 00                	push   0x0
c000a83b:	6a 07                	push   0x7
c000a83d:	e8 8b fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a842:	83 05 f8 8b 02 c0 03 	add    DWORD PTR ds:0xc0028bf8,0x3
c000a849:	83 c4 10             	add    esp,0x10
c000a84c:	83 ec 08             	sub    esp,0x8
c000a84f:	6a 00                	push   0x0
c000a851:	53                   	push   ebx
c000a852:	43                   	inc    ebx
c000a853:	e8 75 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a858:	83 c4 10             	add    esp,0x10
c000a85b:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a861:	75 e9                	jne    c000a84c <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a863:	a1 f8 8b 02 c0       	mov    eax,ds:0xc0028bf8
c000a868:	bb 40 01 00 00       	mov    ebx,0x140
c000a86d:	83 c0 20             	add    eax,0x20
c000a870:	a3 f8 8b 02 c0       	mov    ds:0xc0028bf8,eax
c000a875:	eb 22                	jmp    c000a899 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a877:	83 ec 08             	sub    esp,0x8
c000a87a:	6a 00                	push   0x0
c000a87c:	53                   	push   ebx
c000a87d:	43                   	inc    ebx
c000a87e:	e8 4a fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a883:	a1 f8 8b 02 c0       	mov    eax,ds:0xc0028bf8
c000a888:	83 c4 10             	add    esp,0x10
c000a88b:	40                   	inc    eax
c000a88c:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a892:	a3 f8 8b 02 c0       	mov    ds:0xc0028bf8,eax
c000a897:	74 07                	je     c000a8a0 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a899:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a89e:	7e d7                	jle    c000a877 <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a8a0:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a8a5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a8aa:	7f 22                	jg     c000a8ce <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a8ac:	83 ec 08             	sub    esp,0x8
c000a8af:	6a 00                	push   0x0
c000a8b1:	53                   	push   ebx
c000a8b2:	43                   	inc    ebx
c000a8b3:	e8 15 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a8b8:	a1 f8 8b 02 c0       	mov    eax,ds:0xc0028bf8
c000a8bd:	83 c4 10             	add    esp,0x10
c000a8c0:	40                   	inc    eax
c000a8c1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a8c7:	a3 f8 8b 02 c0       	mov    ds:0xc0028bf8,eax
c000a8cc:	75 d7                	jne    c000a8a5 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a8ce:	83 c4 3c             	add    esp,0x3c
c000a8d1:	5b                   	pop    ebx
c000a8d2:	5e                   	pop    esi
c000a8d3:	5f                   	pop    edi
c000a8d4:	5d                   	pop    ebp
c000a8d5:	c3                   	ret    
c000a8d6:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a8de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a8e6:	e9 46 fe ff ff       	jmp    c000a731 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a8eb:	90                   	nop

c000a8ec <Pipe::isAtty()>:
c000a8ec:	31 c0                	xor    eax,eax
c000a8ee:	c3                   	ret    
c000a8ef:	90                   	nop

c000a8f0 <Pipe::~Pipe()>:
c000a8f0:	83 ec 0c             	sub    esp,0xc
c000a8f3:	ba 74 4c 02 c0       	mov    edx,0xc0024c74
c000a8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8fc:	89 10                	mov    DWORD PTR [eax],edx
c000a8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a902:	83 ec 0c             	sub    esp,0xc
c000a905:	50                   	push   eax
c000a906:	e8 41 12 00 00       	call   c000bb4c <UnixFile::~UnixFile()>
c000a90b:	83 c4 10             	add    esp,0x10
c000a90e:	90                   	nop
c000a90f:	83 c4 0c             	add    esp,0xc
c000a912:	c3                   	ret    
c000a913:	90                   	nop

c000a914 <Pipe::~Pipe()>:
c000a914:	83 ec 0c             	sub    esp,0xc
c000a917:	83 ec 0c             	sub    esp,0xc
c000a91a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a91e:	e8 cd ff ff ff       	call   c000a8f0 <Pipe::~Pipe()>
c000a923:	83 c4 10             	add    esp,0x10
c000a926:	83 ec 08             	sub    esp,0x8
c000a929:	6a 20                	push   0x20
c000a92b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92f:	e8 be 26 00 00       	call   c000cff2 <operator delete(void*, unsigned long)>
c000a934:	83 c4 10             	add    esp,0x10
c000a937:	83 c4 0c             	add    esp,0xc
c000a93a:	c3                   	ret    
c000a93b:	90                   	nop

c000a93c <Pipe::read(unsigned long long, void*, int*)>:
c000a93c:	55                   	push   ebp
c000a93d:	57                   	push   edi
c000a93e:	56                   	push   esi
c000a93f:	53                   	push   ebx
c000a940:	83 ec 1c             	sub    esp,0x1c
c000a943:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a947:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a94b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a94f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a952:	89 c8                	mov    eax,ecx
c000a954:	99                   	cdq    
c000a955:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a959:	74 24                	je     c000a97f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a95b:	39 f9                	cmp    ecx,edi
c000a95d:	89 d1                	mov    ecx,edx
c000a95f:	19 f1                	sbb    ecx,esi
c000a961:	73 1c                	jae    c000a97f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a963:	fa                   	cli    
c000a964:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c000a96a:	e8 8d e5 00 00       	call   c0018efc <schedule()>
c000a96f:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000a974:	48                   	dec    eax
c000a975:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000a97a:	75 d3                	jne    c000a94f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a97c:	fb                   	sti    
c000a97d:	eb d0                	jmp    c000a94f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a97f:	39 f8                	cmp    eax,edi
c000a981:	89 d1                	mov    ecx,edx
c000a983:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a986:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a98a:	19 f1                	sbb    ecx,esi
c000a98c:	73 07                	jae    c000a995 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a98e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a991:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a995:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a998:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a99b:	29 f7                	sub    edi,esi
c000a99d:	89 f8                	mov    eax,edi
c000a99f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a9a3:	99                   	cdq    
c000a9a4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a9a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9ab:	19 d0                	sbb    eax,edx
c000a9ad:	73 07                	jae    c000a9b6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a9af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a9b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9b6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a9b9:	89 ea                	mov    edx,ebp
c000a9bb:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a9bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a9c4:	74 0d                	je     c000a9d3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a9c6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9c9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a9cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a9d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a9d3:	85 d2                	test   edx,edx
c000a9d5:	74 11                	je     c000a9e8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a9d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9db:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a9de:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a9e2:	89 d1                	mov    ecx,edx
c000a9e4:	89 c7                	mov    edi,eax
c000a9e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a9e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a9eb:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a9ee:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a9f1:	99                   	cdq    
c000a9f2:	89 f7                	mov    edi,esi
c000a9f4:	03 04 24             	add    eax,DWORD PTR [esp]
c000a9f7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a9fb:	c1 ff 1f             	sar    edi,0x1f
c000a9fe:	57                   	push   edi
c000a9ff:	56                   	push   esi
c000aa00:	52                   	push   edx
c000aa01:	50                   	push   eax
c000aa02:	e8 89 86 01 00       	call   c0023090 <__umoddi3>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa0d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aa12:	75 10                	jne    c000aa24 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000aa14:	83 ec 0c             	sub    esp,0xc
c000aa17:	68 31 4c 02 c0       	push   0xc0024c31
c000aa1c:	e8 94 a7 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000aa21:	83 c4 10             	add    esp,0x10
c000aa24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aa28:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa2b:	89 10                	mov    DWORD PTR [eax],edx
c000aa2d:	83 c4 1c             	add    esp,0x1c
c000aa30:	31 c0                	xor    eax,eax
c000aa32:	5b                   	pop    ebx
c000aa33:	5e                   	pop    esi
c000aa34:	5f                   	pop    edi
c000aa35:	5d                   	pop    ebp
c000aa36:	c3                   	ret    
c000aa37:	90                   	nop

c000aa38 <Pipe::write(unsigned long long, void*, int*)>:
c000aa38:	55                   	push   ebp
c000aa39:	57                   	push   edi
c000aa3a:	56                   	push   esi
c000aa3b:	53                   	push   ebx
c000aa3c:	83 ec 1c             	sub    esp,0x1c
c000aa3f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000aa43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa47:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000aa4a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000aa4e:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa51:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa55:	89 d8                	mov    eax,ebx
c000aa57:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000aa5a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000aa5e:	89 d6                	mov    esi,edx
c000aa60:	89 d7                	mov    edi,edx
c000aa62:	c1 ff 1f             	sar    edi,0x1f
c000aa65:	03 34 24             	add    esi,DWORD PTR [esp]
c000aa68:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000aa6c:	c1 f8 1f             	sar    eax,0x1f
c000aa6f:	39 f3                	cmp    ebx,esi
c000aa71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa79:	19 f8                	sbb    eax,edi
c000aa7b:	b8 01 00 00 00       	mov    eax,0x1
c000aa80:	72 6e                	jb     c000aaf0 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000aa82:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000aa85:	01 d0                	add    eax,edx
c000aa87:	99                   	cdq    
c000aa88:	f7 fb                	idiv   ebx
c000aa8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa8e:	29 d3                	sub    ebx,edx
c000aa90:	89 d7                	mov    edi,edx
c000aa92:	89 de                	mov    esi,ebx
c000aa94:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa97:	c1 fb 1f             	sar    ebx,0x1f
c000aa9a:	39 f2                	cmp    edx,esi
c000aa9c:	19 d8                	sbb    eax,ebx
c000aa9e:	b8 00 00 00 00       	mov    eax,0x0
c000aaa3:	72 04                	jb     c000aaa9 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000aaa5:	89 d0                	mov    eax,edx
c000aaa7:	29 f0                	sub    eax,esi
c000aaa9:	89 d3                	mov    ebx,edx
c000aaab:	29 c3                	sub    ebx,eax
c000aaad:	74 0b                	je     c000aaba <Pipe::write(unsigned long long, void*, int*)+0x82>
c000aaaf:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000aab2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000aab6:	89 d9                	mov    ecx,ebx
c000aab8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aaba:	85 c0                	test   eax,eax
c000aabc:	74 0d                	je     c000aacb <Pipe::write(unsigned long long, void*, int*)+0x93>
c000aabe:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000aac2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000aac5:	89 de                	mov    esi,ebx
c000aac7:	89 c1                	mov    ecx,eax
c000aac9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aacb:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000aace:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aad3:	75 10                	jne    c000aae5 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000aad5:	83 ec 0c             	sub    esp,0xc
c000aad8:	68 4d 4c 02 c0       	push   0xc0024c4d
c000aadd:	e8 d3 a6 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000aae2:	83 c4 10             	add    esp,0x10
c000aae5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aae9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aaec:	89 08                	mov    DWORD PTR [eax],ecx
c000aaee:	31 c0                	xor    eax,eax
c000aaf0:	83 c4 1c             	add    esp,0x1c
c000aaf3:	5b                   	pop    ebx
c000aaf4:	5e                   	pop    esi
c000aaf5:	5f                   	pop    edi
c000aaf6:	5d                   	pop    ebp
c000aaf7:	c3                   	ret    

c000aaf8 <Pipe::Pipe(int)>:
c000aaf8:	83 ec 0c             	sub    esp,0xc
c000aafb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaff:	83 ec 08             	sub    esp,0x8
c000ab02:	6a 00                	push   0x0
c000ab04:	50                   	push   eax
c000ab05:	e8 60 0e 00 00       	call   c000b96a <UnixFile::UnixFile(int)>
c000ab0a:	83 c4 10             	add    esp,0x10
c000ab0d:	ba 74 4c 02 c0       	mov    edx,0xc0024c74
c000ab12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab16:	89 10                	mov    DWORD PTR [eax],edx
c000ab18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab20:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ab23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab27:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ab2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab32:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ab39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab3d:	83 ec 0c             	sub    esp,0xc
c000ab40:	50                   	push   eax
c000ab41:	e8 a1 f2 ff ff       	call   c0009de7 <malloc>
c000ab46:	83 c4 10             	add    esp,0x10
c000ab49:	89 c2                	mov    edx,eax
c000ab4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab56:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ab5a:	90                   	nop
c000ab5b:	83 c4 0c             	add    esp,0xc
c000ab5e:	c3                   	ret    
c000ab5f:	90                   	nop

c000ab60 <VgaText::isAtty()>:
c000ab60:	b0 01                	mov    al,0x1
c000ab62:	c3                   	ret    
c000ab63:	90                   	nop

c000ab64 <VgaText::~VgaText()>:
c000ab64:	83 ec 0c             	sub    esp,0xc
c000ab67:	ba fc 4c 02 c0       	mov    edx,0xc0024cfc
c000ab6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab70:	89 10                	mov    DWORD PTR [eax],edx
c000ab72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab76:	83 ec 0c             	sub    esp,0xc
c000ab79:	50                   	push   eax
c000ab7a:	e8 cd 0f 00 00       	call   c000bb4c <UnixFile::~UnixFile()>
c000ab7f:	83 c4 10             	add    esp,0x10
c000ab82:	90                   	nop
c000ab83:	83 c4 0c             	add    esp,0xc
c000ab86:	c3                   	ret    
c000ab87:	90                   	nop

c000ab88 <VgaText::~VgaText()>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 0c             	sub    esp,0xc
c000ab8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab92:	e8 cd ff ff ff       	call   c000ab64 <VgaText::~VgaText()>
c000ab97:	83 c4 10             	add    esp,0x10
c000ab9a:	83 ec 08             	sub    esp,0x8
c000ab9d:	68 b4 01 00 00       	push   0x1b4
c000aba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aba6:	e8 47 24 00 00       	call   c000cff2 <operator delete(void*, unsigned long)>
c000abab:	83 c4 10             	add    esp,0x10
c000abae:	83 c4 0c             	add    esp,0xc
c000abb1:	c3                   	ret    

c000abb2 <VgaText::read(unsigned long long, void*, int*)>:
c000abb2:	83 ec 10             	sub    esp,0x10
c000abb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000abbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc1:	e8 c3 59 00 00       	call   c0010589 <readKeyboard(VgaText*, char*, unsigned long)>
c000abc6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000abca:	89 02                	mov    DWORD PTR [edx],eax
c000abcc:	31 c0                	xor    eax,eax
c000abce:	83 c4 1c             	add    esp,0x1c
c000abd1:	c3                   	ret    

c000abd2 <setTerminalScrollLock(bool)>:
c000abd2:	c3                   	ret    

c000abd3 <addToTerminalCycle(VgaText*)>:
c000abd3:	8b 15 40 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c40
c000abd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abdd:	85 d2                	test   edx,edx
c000abdf:	75 09                	jne    c000abea <addToTerminalCycle(VgaText*)+0x17>
c000abe1:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000abe4:	a3 40 8c 02 c0       	mov    ds:0xc0028c40,eax
c000abe9:	c3                   	ret    
c000abea:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000abed:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000abf0:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000abf3:	c3                   	ret    

c000abf4 <installVgaTextImplementation()>:
c000abf4:	83 ec 10             	sub    esp,0x10
c000abf7:	6a 20                	push   0x20
c000abf9:	6a 00                	push   0x0
c000abfb:	68 20 8c 02 c0       	push   0xc0028c20
c000ac00:	e8 8f 5a ff ff       	call   c0000694 <memset>
c000ac05:	83 c4 1c             	add    esp,0x1c
c000ac08:	c3                   	ret    

c000ac09 <scrollTerminalScrollLock(int)>:
c000ac09:	c3                   	ret    

c000ac0a <VgaText::updateTitle()>:
c000ac0a:	53                   	push   ebx
c000ac0b:	31 c0                	xor    eax,eax
c000ac0d:	83 ec 58             	sub    esp,0x58
c000ac10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ac14:	89 e1                	mov    ecx,esp
c000ac16:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ac1a:	40                   	inc    eax
c000ac1b:	83 f8 50             	cmp    eax,0x50
c000ac1e:	75 f6                	jne    c000ac16 <VgaText::updateTitle()+0xc>
c000ac20:	31 c0                	xor    eax,eax
c000ac22:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000ac29:	84 db                	test   bl,bl
c000ac2b:	74 06                	je     c000ac33 <VgaText::updateTitle()+0x29>
c000ac2d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000ac30:	40                   	inc    eax
c000ac31:	eb ef                	jmp    c000ac22 <VgaText::updateTitle()+0x18>
c000ac33:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000ac36:	85 c0                	test   eax,eax
c000ac38:	74 09                	je     c000ac43 <VgaText::updateTitle()+0x39>
c000ac3a:	53                   	push   ebx
c000ac3b:	53                   	push   ebx
c000ac3c:	51                   	push   ecx
c000ac3d:	52                   	push   edx
c000ac3e:	ff d0                	call   eax
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	83 c4 58             	add    esp,0x58
c000ac46:	5b                   	pop    ebx
c000ac47:	c3                   	ret    

c000ac48 <VgaText::load()>:
c000ac48:	53                   	push   ebx
c000ac49:	31 c0                	xor    eax,eax
c000ac4b:	83 ec 58             	sub    esp,0x58
c000ac4e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ac52:	89 e2                	mov    edx,esp
c000ac54:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ac58:	40                   	inc    eax
c000ac59:	83 f8 50             	cmp    eax,0x50
c000ac5c:	75 f6                	jne    c000ac54 <VgaText::load()+0xc>
c000ac5e:	31 c0                	xor    eax,eax
c000ac60:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000ac67:	84 c9                	test   cl,cl
c000ac69:	74 06                	je     c000ac71 <VgaText::load()+0x29>
c000ac6b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ac6e:	40                   	inc    eax
c000ac6f:	eb ef                	jmp    c000ac60 <VgaText::load()+0x18>
c000ac71:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000ac74:	85 c0                	test   eax,eax
c000ac76:	74 09                	je     c000ac81 <VgaText::load()+0x39>
c000ac78:	51                   	push   ecx
c000ac79:	51                   	push   ecx
c000ac7a:	52                   	push   edx
c000ac7b:	53                   	push   ebx
c000ac7c:	ff d0                	call   eax
c000ac7e:	83 c4 10             	add    esp,0x10
c000ac81:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000ac84:	85 c0                	test   eax,eax
c000ac86:	74 09                	je     c000ac91 <VgaText::load()+0x49>
c000ac88:	83 ec 0c             	sub    esp,0xc
c000ac8b:	53                   	push   ebx
c000ac8c:	ff d0                	call   eax
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	83 c4 58             	add    esp,0x58
c000ac94:	5b                   	pop    ebx
c000ac95:	c3                   	ret    

c000ac96 <VgaText::updateCursor()>:
c000ac96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac9a:	39 05 44 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c44,eax
c000aca0:	75 09                	jne    c000acab <VgaText::updateCursor()+0x15>
c000aca2:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000aca5:	85 c0                	test   eax,eax
c000aca7:	74 02                	je     c000acab <VgaText::updateCursor()+0x15>
c000aca9:	ff e0                	jmp    eax
c000acab:	c3                   	ret    

c000acac <VgaText::doANSI_SGR(int)>:
c000acac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acb4:	85 d2                	test   edx,edx
c000acb6:	75 0b                	jne    c000acc3 <VgaText::doANSI_SGR(int)+0x17>
c000acb8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000acbb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000acbe:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000acc1:	eb 59                	jmp    c000ad1c <VgaText::doANSI_SGR(int)+0x70>
c000acc3:	83 fa 07             	cmp    edx,0x7
c000acc6:	75 0b                	jne    c000acd3 <VgaText::doANSI_SGR(int)+0x27>
c000acc8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000accb:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000acce:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000acd1:	eb 49                	jmp    c000ad1c <VgaText::doANSI_SGR(int)+0x70>
c000acd3:	83 fa 1b             	cmp    edx,0x1b
c000acd6:	74 e0                	je     c000acb8 <VgaText::doANSI_SGR(int)+0xc>
c000acd8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000acdb:	83 f9 07             	cmp    ecx,0x7
c000acde:	77 09                	ja     c000ace9 <VgaText::doANSI_SGR(int)+0x3d>
c000ace0:	8b 14 8d c0 7f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8040]
c000ace7:	eb 20                	jmp    c000ad09 <VgaText::doANSI_SGR(int)+0x5d>
c000ace9:	8d 4a d8             	lea    ecx,[edx-0x28]
c000acec:	83 f9 07             	cmp    ecx,0x7
c000acef:	77 09                	ja     c000acfa <VgaText::doANSI_SGR(int)+0x4e>
c000acf1:	8b 14 8d c0 7f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8040]
c000acf8:	eb 22                	jmp    c000ad1c <VgaText::doANSI_SGR(int)+0x70>
c000acfa:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000acfd:	83 f9 07             	cmp    ecx,0x7
c000ad00:	77 0b                	ja     c000ad0d <VgaText::doANSI_SGR(int)+0x61>
c000ad02:	8b 14 95 78 7e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8188]
c000ad09:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ad0c:	c3                   	ret    
c000ad0d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ad10:	83 f9 07             	cmp    ecx,0x7
c000ad13:	77 0a                	ja     c000ad1f <VgaText::doANSI_SGR(int)+0x73>
c000ad15:	8b 14 95 50 7e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd81b0]
c000ad1c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ad1f:	c3                   	ret    

c000ad20 <VgaText::setDefaultBgColour(VgaColour)>:
c000ad20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad28:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ad2b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ad2e:	c3                   	ret    
c000ad2f:	90                   	nop

c000ad30 <VgaText::setDefaultFgColour(VgaColour)>:
c000ad30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad38:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000ad3b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ad3e:	c3                   	ret    
c000ad3f:	90                   	nop

c000ad40 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ad40:	53                   	push   ebx
c000ad41:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ad45:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad49:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad4d:	51                   	push   ecx
c000ad4e:	e8 cd ff ff ff       	call   c000ad20 <VgaText::setDefaultBgColour(VgaColour)>
c000ad53:	58                   	pop    eax
c000ad54:	5a                   	pop    edx
c000ad55:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ad59:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ad5d:	5b                   	pop    ebx
c000ad5e:	eb d0                	jmp    c000ad30 <VgaText::setDefaultFgColour(VgaColour)>

c000ad60 <VgaText::setTitleTextColour(VgaColour)>:
c000ad60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad68:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000ad6b:	e9 9a fe ff ff       	jmp    c000ac0a <VgaText::updateTitle()>

c000ad70 <VgaText::setTitleColour(VgaColour)>:
c000ad70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad78:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ad7b:	e9 8a fe ff ff       	jmp    c000ac0a <VgaText::updateTitle()>

c000ad80 <VgaText::setTitle(char*)>:
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 10             	sub    esp,0x10
c000ad84:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad8c:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ad92:	50                   	push   eax
c000ad93:	e8 b8 59 ff ff       	call   c0000750 <strcpy>
c000ad98:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad9c:	83 c4 18             	add    esp,0x18
c000ad9f:	5b                   	pop    ebx
c000ada0:	e9 65 fe ff ff       	jmp    c000ac0a <VgaText::updateTitle()>
c000ada5:	90                   	nop

c000ada6 <VgaText::combineColours(unsigned char, unsigned char)>:
c000ada6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000adaa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000adaf:	83 e0 0f             	and    eax,0xf
c000adb2:	c1 e2 04             	shl    edx,0x4
c000adb5:	09 d0                	or     eax,edx
c000adb7:	c3                   	ret    

c000adb8 <VgaText::scrollScreen()>:
c000adb8:	55                   	push   ebp
c000adb9:	b9 01 00 00 00       	mov    ecx,0x1
c000adbe:	57                   	push   edi
c000adbf:	56                   	push   esi
c000adc0:	53                   	push   ebx
c000adc1:	83 ec 0c             	sub    esp,0xc
c000adc4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000adc8:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000adce:	31 ff                	xor    edi,edi
c000add0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000add3:	83 f9 17             	cmp    ecx,0x17
c000add6:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000add9:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000ade0:	75 27                	jne    c000ae09 <VgaText::scrollScreen()+0x51>
c000ade2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000ade5:	01 f5                	add    ebp,esi
c000ade7:	f7 c7 01 00 00 00    	test   edi,0x1
c000aded:	74 16                	je     c000ae05 <VgaText::scrollScreen()+0x4d>
c000adef:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000adf3:	50                   	push   eax
c000adf4:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000adf8:	50                   	push   eax
c000adf9:	e8 a8 ff ff ff       	call   c000ada6 <VgaText::combineColours(unsigned char, unsigned char)>
c000adfe:	5a                   	pop    edx
c000adff:	5a                   	pop    edx
c000ae00:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000ae03:	eb 04                	jmp    c000ae09 <VgaText::scrollScreen()+0x51>
c000ae05:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000ae09:	47                   	inc    edi
c000ae0a:	46                   	inc    esi
c000ae0b:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ae11:	75 bd                	jne    c000add0 <VgaText::scrollScreen()+0x18>
c000ae13:	41                   	inc    ecx
c000ae14:	83 f9 18             	cmp    ecx,0x18
c000ae17:	75 af                	jne    c000adc8 <VgaText::scrollScreen()+0x10>
c000ae19:	39 1d 44 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c44,ebx
c000ae1f:	75 1b                	jne    c000ae3c <VgaText::scrollScreen()+0x84>
c000ae21:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ae25:	74 05                	je     c000ae2c <VgaText::scrollScreen()+0x74>
c000ae27:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000ae2a:	eb 10                	jmp    c000ae3c <VgaText::scrollScreen()+0x84>
c000ae2c:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000ae2f:	85 c0                	test   eax,eax
c000ae31:	74 09                	je     c000ae3c <VgaText::scrollScreen()+0x84>
c000ae33:	83 ec 0c             	sub    esp,0xc
c000ae36:	53                   	push   ebx
c000ae37:	ff d0                	call   eax
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ae40:	83 c4 0c             	add    esp,0xc
c000ae43:	5b                   	pop    ebx
c000ae44:	5e                   	pop    esi
c000ae45:	5f                   	pop    edi
c000ae46:	5d                   	pop    ebp
c000ae47:	e9 4a fe ff ff       	jmp    c000ac96 <VgaText::updateCursor()>

c000ae4c <VgaText::combineCharAndColour(char, unsigned char)>:
c000ae4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ae51:	c1 e0 08             	shl    eax,0x8
c000ae54:	89 c2                	mov    edx,eax
c000ae56:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ae5b:	09 d0                	or     eax,edx
c000ae5d:	c3                   	ret    

c000ae5e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ae5e:	56                   	push   esi
c000ae5f:	53                   	push   ebx
c000ae60:	51                   	push   ecx
c000ae61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae65:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ae6a:	50                   	push   eax
c000ae6b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ae70:	50                   	push   eax
c000ae71:	e8 30 ff ff ff       	call   c000ada6 <VgaText::combineColours(unsigned char, unsigned char)>
c000ae76:	5b                   	pop    ebx
c000ae77:	0f b6 c0             	movzx  eax,al
c000ae7a:	5e                   	pop    esi
c000ae7b:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ae80:	50                   	push   eax
c000ae81:	53                   	push   ebx
c000ae82:	e8 c5 ff ff ff       	call   c000ae4c <VgaText::combineCharAndColour(char, unsigned char)>
c000ae87:	5a                   	pop    edx
c000ae88:	5e                   	pop    esi
c000ae89:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ae8c:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ae92:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ae96:	0f b7 d2             	movzx  edx,dx
c000ae99:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ae9d:	39 0d 44 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c44,ecx
c000aea3:	75 10                	jne    c000aeb5 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aea5:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aea8:	85 c0                	test   eax,eax
c000aeaa:	74 09                	je     c000aeb5 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aeac:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aeb0:	5a                   	pop    edx
c000aeb1:	5b                   	pop    ebx
c000aeb2:	5e                   	pop    esi
c000aeb3:	ff e0                	jmp    eax
c000aeb5:	58                   	pop    eax
c000aeb6:	5b                   	pop    ebx
c000aeb7:	5e                   	pop    esi
c000aeb8:	c3                   	ret    
c000aeb9:	90                   	nop

c000aeba <VgaText::getCursorX()>:
c000aeba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aebe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aec1:	c3                   	ret    

c000aec2 <VgaText::getCursorY()>:
c000aec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aec6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aec9:	c3                   	ret    

c000aeca <VgaText::setCursor(int, int)>:
c000aeca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aece:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aed2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aed5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aed9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aedc:	e9 b5 fd ff ff       	jmp    c000ac96 <VgaText::updateCursor()>

c000aee1 <setActiveTerminal(VgaText*)>:
c000aee1:	53                   	push   ebx
c000aee2:	83 ec 08             	sub    esp,0x8
c000aee5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aee9:	85 db                	test   ebx,ebx
c000aeeb:	75 11                	jne    c000aefe <setActiveTerminal(VgaText*)+0x1d>
c000aeed:	c7 44 24 10 88 4c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024c88
c000aef5:	83 c4 08             	add    esp,0x8
c000aef8:	5b                   	pop    ebx
c000aef9:	e9 b7 a2 00 00       	jmp    c00151b5 <Krnl::panic(char const*)>
c000aefe:	a1 44 8c 02 c0       	mov    eax,ds:0xc0028c44
c000af03:	85 c0                	test   eax,eax
c000af05:	74 0c                	je     c000af13 <setActiveTerminal(VgaText*)+0x32>
c000af07:	83 ec 0c             	sub    esp,0xc
c000af0a:	50                   	push   eax
c000af0b:	e8 86 fd ff ff       	call   c000ac96 <VgaText::updateCursor()>
c000af10:	83 c4 10             	add    esp,0x10
c000af13:	89 1d 44 8c 02 c0    	mov    DWORD PTR ds:0xc0028c44,ebx
c000af19:	51                   	push   ecx
c000af1a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af1d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af20:	53                   	push   ebx
c000af21:	e8 a4 ff ff ff       	call   c000aeca <VgaText::setCursor(int, int)>
c000af26:	83 c4 10             	add    esp,0x10
c000af29:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000af2d:	75 07                	jne    c000af36 <setActiveTerminal(VgaText*)+0x55>
c000af2f:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000af36:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af3a:	83 c4 08             	add    esp,0x8
c000af3d:	5b                   	pop    ebx
c000af3e:	e9 05 fd ff ff       	jmp    c000ac48 <VgaText::load()>

c000af43 <doTerminalCycle()>:
c000af43:	83 ec 18             	sub    esp,0x18
c000af46:	a1 40 8c 02 c0       	mov    eax,ds:0xc0028c40
c000af4b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000af4e:	50                   	push   eax
c000af4f:	a3 40 8c 02 c0       	mov    ds:0xc0028c40,eax
c000af54:	e8 88 ff ff ff       	call   c000aee1 <setActiveTerminal(VgaText*)>
c000af59:	83 c4 1c             	add    esp,0x1c
c000af5c:	c3                   	ret    
c000af5d:	90                   	nop

c000af5e <VgaText::setCursorX(int)>:
c000af5e:	83 ec 10             	sub    esp,0x10
c000af61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af65:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000af68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af6c:	50                   	push   eax
c000af6d:	e8 58 ff ff ff       	call   c000aeca <VgaText::setCursor(int, int)>
c000af72:	83 c4 1c             	add    esp,0x1c
c000af75:	c3                   	ret    

c000af76 <VgaText::setCursorY(int)>:
c000af76:	83 ec 10             	sub    esp,0x10
c000af79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af81:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000af84:	50                   	push   eax
c000af85:	e8 40 ff ff ff       	call   c000aeca <VgaText::setCursor(int, int)>
c000af8a:	83 c4 1c             	add    esp,0x1c
c000af8d:	c3                   	ret    

c000af8e <VgaText::incrementCursor(bool)>:
c000af8e:	56                   	push   esi
c000af8f:	53                   	push   ebx
c000af90:	51                   	push   ecx
c000af91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af95:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af99:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000af9c:	40                   	inc    eax
c000af9d:	83 f8 50             	cmp    eax,0x50
c000afa0:	74 05                	je     c000afa7 <VgaText::incrementCursor(bool)+0x19>
c000afa2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000afa5:	eb 24                	jmp    c000afcb <VgaText::incrementCursor(bool)+0x3d>
c000afa7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000afaa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afb1:	8d 50 01             	lea    edx,[eax+0x1]
c000afb4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000afb7:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000afba:	75 0f                	jne    c000afcb <VgaText::incrementCursor(bool)+0x3d>
c000afbc:	83 ec 0c             	sub    esp,0xc
c000afbf:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000afc2:	53                   	push   ebx
c000afc3:	e8 f0 fd ff ff       	call   c000adb8 <VgaText::scrollScreen()>
c000afc8:	83 c4 10             	add    esp,0x10
c000afcb:	89 f0                	mov    eax,esi
c000afcd:	84 c0                	test   al,al
c000afcf:	74 0c                	je     c000afdd <VgaText::incrementCursor(bool)+0x4f>
c000afd1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000afd5:	5a                   	pop    edx
c000afd6:	5b                   	pop    ebx
c000afd7:	5e                   	pop    esi
c000afd8:	e9 b9 fc ff ff       	jmp    c000ac96 <VgaText::updateCursor()>
c000afdd:	58                   	pop    eax
c000afde:	5b                   	pop    ebx
c000afdf:	5e                   	pop    esi
c000afe0:	c3                   	ret    
c000afe1:	90                   	nop

c000afe2 <VgaText::decrementCursor(bool)>:
c000afe2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000afe6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000afea:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000afed:	85 c0                	test   eax,eax
c000afef:	74 04                	je     c000aff5 <VgaText::decrementCursor(bool)+0x13>
c000aff1:	48                   	dec    eax
c000aff2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000aff5:	84 c9                	test   cl,cl
c000aff7:	74 09                	je     c000b002 <VgaText::decrementCursor(bool)+0x20>
c000aff9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000affd:	e9 94 fc ff ff       	jmp    c000ac96 <VgaText::updateCursor()>
c000b002:	c3                   	ret    
c000b003:	90                   	nop

c000b004 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000b004:	53                   	push   ebx
c000b005:	83 ec 08             	sub    esp,0x8
c000b008:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b00c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b010:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b014:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b018:	3c 07                	cmp    al,0x7
c000b01a:	75 2a                	jne    c000b046 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000b01c:	a1 f8 8c 02 c0       	mov    eax,ds:0xc0028cf8
c000b021:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b029:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000b031:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000b039:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b03d:	83 c4 08             	add    esp,0x8
c000b040:	5b                   	pop    ebx
c000b041:	e9 d4 2f 00 00       	jmp    c000e01a <Buzzer::beep(int, int, bool)>
c000b046:	3c 0d                	cmp    al,0xd
c000b048:	75 09                	jne    c000b053 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000b04a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b051:	eb 2c                	jmp    c000b07f <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000b053:	3c 0a                	cmp    al,0xa
c000b055:	75 31                	jne    c000b088 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000b057:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b05a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b061:	8d 50 01             	lea    edx,[eax+0x1]
c000b064:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000b067:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000b06a:	75 0f                	jne    c000b07b <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000b06c:	83 ec 0c             	sub    esp,0xc
c000b06f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b072:	53                   	push   ebx
c000b073:	e8 40 fd ff ff       	call   c000adb8 <VgaText::scrollScreen()>
c000b078:	83 c4 10             	add    esp,0x10
c000b07b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b07f:	83 c4 08             	add    esp,0x8
c000b082:	5b                   	pop    ebx
c000b083:	e9 0e fc ff ff       	jmp    c000ac96 <VgaText::updateCursor()>
c000b088:	3c 08                	cmp    al,0x8
c000b08a:	75 25                	jne    c000b0b1 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000b08c:	50                   	push   eax
c000b08d:	50                   	push   eax
c000b08e:	6a 01                	push   0x1
c000b090:	53                   	push   ebx
c000b091:	e8 4c ff ff ff       	call   c000afe2 <VgaText::decrementCursor(bool)>
c000b096:	5a                   	pop    edx
c000b097:	59                   	pop    ecx
c000b098:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b09b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b09e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b0a1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b0a4:	6a 20                	push   0x20
c000b0a6:	53                   	push   ebx
c000b0a7:	e8 b2 fd ff ff       	call   c000ae5e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b0ac:	83 c4 28             	add    esp,0x28
c000b0af:	5b                   	pop    ebx
c000b0b0:	c3                   	ret    
c000b0b1:	83 ec 08             	sub    esp,0x8
c000b0b4:	0f be c0             	movsx  eax,al
c000b0b7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0ba:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0bd:	51                   	push   ecx
c000b0be:	52                   	push   edx
c000b0bf:	50                   	push   eax
c000b0c0:	53                   	push   ebx
c000b0c1:	e8 98 fd ff ff       	call   c000ae5e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b0c6:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000b0ca:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000b0d2:	83 c4 28             	add    esp,0x28
c000b0d5:	5b                   	pop    ebx
c000b0d6:	e9 b3 fe ff ff       	jmp    c000af8e <VgaText::incrementCursor(bool)>
c000b0db:	90                   	nop

c000b0dc <VgaText::doUpdate()>:
c000b0dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e0:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000b0e3:	85 c0                	test   eax,eax
c000b0e5:	74 02                	je     c000b0e9 <VgaText::doUpdate()+0xd>
c000b0e7:	ff e0                	jmp    eax
c000b0e9:	c3                   	ret    

c000b0ea <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000b0ea:	55                   	push   ebp
c000b0eb:	31 ed                	xor    ebp,ebp
c000b0ed:	57                   	push   edi
c000b0ee:	56                   	push   esi
c000b0ef:	53                   	push   ebx
c000b0f0:	83 ec 1c             	sub    esp,0x1c
c000b0f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0f7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b0fc:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b103:	50                   	push   eax
c000b104:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b109:	50                   	push   eax
c000b10a:	e8 97 fc ff ff       	call   c000ada6 <VgaText::combineColours(unsigned char, unsigned char)>
c000b10f:	59                   	pop    ecx
c000b110:	0f b6 c0             	movzx  eax,al
c000b113:	5e                   	pop    esi
c000b114:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b119:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b11d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b120:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b124:	0f b7 f6             	movzx  esi,si
c000b127:	01 f6                	add    esi,esi
c000b129:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b12c:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b12f:	84 c0                	test   al,al
c000b131:	0f 84 fd 00 00 00    	je     c000b234 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b137:	3c 0d                	cmp    al,0xd
c000b139:	75 0c                	jne    c000b147 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b13b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b142:	e9 e7 00 00 00       	jmp    c000b22e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b147:	3c 0a                	cmp    al,0xa
c000b149:	75 47                	jne    c000b192 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b14b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b14e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b155:	8d 48 01             	lea    ecx,[eax+0x1]
c000b158:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b15b:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b15e:	75 0f                	jne    c000b16f <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b160:	83 ec 0c             	sub    esp,0xc
c000b163:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b166:	53                   	push   ebx
c000b167:	e8 4c fc ff ff       	call   c000adb8 <VgaText::scrollScreen()>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	83 ec 0c             	sub    esp,0xc
c000b172:	31 ed                	xor    ebp,ebp
c000b174:	53                   	push   ebx
c000b175:	e8 1c fb ff ff       	call   c000ac96 <VgaText::updateCursor()>
c000b17a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b17f:	83 c4 10             	add    esp,0x10
c000b182:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b185:	0f b7 f6             	movzx  esi,si
c000b188:	01 f6                	add    esi,esi
c000b18a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b18d:	e9 9c 00 00 00       	jmp    c000b22e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b192:	3c 08                	cmp    al,0x8
c000b194:	75 35                	jne    c000b1cb <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b196:	56                   	push   esi
c000b197:	56                   	push   esi
c000b198:	6a 01                	push   0x1
c000b19a:	53                   	push   ebx
c000b19b:	e8 42 fe ff ff       	call   c000afe2 <VgaText::decrementCursor(bool)>
c000b1a0:	58                   	pop    eax
c000b1a1:	5a                   	pop    edx
c000b1a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b1a5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b1a8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b1ab:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b1ae:	6a 20                	push   0x20
c000b1b0:	53                   	push   ebx
c000b1b1:	e8 a8 fc ff ff       	call   c000ae5e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b1b6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b1bb:	83 c4 20             	add    esp,0x20
c000b1be:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b1c1:	0f b7 f6             	movzx  esi,si
c000b1c4:	01 f6                	add    esi,esi
c000b1c6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b1c9:	eb 63                	jmp    c000b22e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b1cb:	51                   	push   ecx
c000b1cc:	51                   	push   ecx
c000b1cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d1:	50                   	push   eax
c000b1d2:	e8 75 fc ff ff       	call   c000ae4c <VgaText::combineCharAndColour(char, unsigned char)>
c000b1d7:	83 c4 10             	add    esp,0x10
c000b1da:	66 89 06             	mov    WORD PTR [esi],ax
c000b1dd:	39 1d 44 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c44,ebx
c000b1e3:	75 21                	jne    c000b206 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b1e5:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b1e8:	85 c0                	test   eax,eax
c000b1ea:	74 1a                	je     c000b206 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b1ec:	52                   	push   edx
c000b1ed:	52                   	push   edx
c000b1ee:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b1f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b1f4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b1f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b1fc:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b1ff:	51                   	push   ecx
c000b200:	53                   	push   ebx
c000b201:	ff d0                	call   eax
c000b203:	83 c4 20             	add    esp,0x20
c000b206:	83 c6 02             	add    esi,0x2
c000b209:	50                   	push   eax
c000b20a:	50                   	push   eax
c000b20b:	6a 00                	push   0x0
c000b20d:	53                   	push   ebx
c000b20e:	e8 7b fd ff ff       	call   c000af8e <VgaText::incrementCursor(bool)>
c000b213:	83 c4 10             	add    esp,0x10
c000b216:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b21a:	75 0d                	jne    c000b229 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b21c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b221:	0f b7 f6             	movzx  esi,si
c000b224:	01 f6                	add    esi,esi
c000b226:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b229:	bd 01 00 00 00       	mov    ebp,0x1
c000b22e:	47                   	inc    edi
c000b22f:	e9 f8 fe ff ff       	jmp    c000b12c <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b234:	83 ec 0c             	sub    esp,0xc
c000b237:	53                   	push   ebx
c000b238:	e8 59 fa ff ff       	call   c000ac96 <VgaText::updateCursor()>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	89 e8                	mov    eax,ebp
c000b242:	84 c0                	test   al,al
c000b244:	74 0c                	je     c000b252 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b246:	83 ec 0c             	sub    esp,0xc
c000b249:	53                   	push   ebx
c000b24a:	e8 8d fe ff ff       	call   c000b0dc <VgaText::doUpdate()>
c000b24f:	83 c4 10             	add    esp,0x10
c000b252:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b259:	83 c4 1c             	add    esp,0x1c
c000b25c:	5b                   	pop    ebx
c000b25d:	5e                   	pop    esi
c000b25e:	5f                   	pop    edi
c000b25f:	5d                   	pop    ebp
c000b260:	c3                   	ret    
c000b261:	90                   	nop

c000b262 <VgaText::clearScreen()>:
c000b262:	57                   	push   edi
c000b263:	56                   	push   esi
c000b264:	31 f6                	xor    esi,esi
c000b266:	53                   	push   ebx
c000b267:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b26b:	52                   	push   edx
c000b26c:	6a 00                	push   0x0
c000b26e:	6a 00                	push   0x0
c000b270:	53                   	push   ebx
c000b271:	e8 54 fc ff ff       	call   c000aeca <VgaText::setCursor(int, int)>
c000b276:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b27d:	83 c4 10             	add    esp,0x10
c000b280:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b283:	7e 20                	jle    c000b2a5 <VgaText::clearScreen()+0x43>
c000b285:	31 ff                	xor    edi,edi
c000b287:	50                   	push   eax
c000b288:	50                   	push   eax
c000b289:	56                   	push   esi
c000b28a:	57                   	push   edi
c000b28b:	47                   	inc    edi
c000b28c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b28f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b292:	6a 20                	push   0x20
c000b294:	53                   	push   ebx
c000b295:	e8 c4 fb ff ff       	call   c000ae5e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b29a:	83 c4 20             	add    esp,0x20
c000b29d:	83 ff 50             	cmp    edi,0x50
c000b2a0:	75 e5                	jne    c000b287 <VgaText::clearScreen()+0x25>
c000b2a2:	46                   	inc    esi
c000b2a3:	eb db                	jmp    c000b280 <VgaText::clearScreen()+0x1e>
c000b2a5:	83 ec 0c             	sub    esp,0xc
c000b2a8:	53                   	push   ebx
c000b2a9:	e8 2e fe ff ff       	call   c000b0dc <VgaText::doUpdate()>
c000b2ae:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b2b5:	83 c4 10             	add    esp,0x10
c000b2b8:	5b                   	pop    ebx
c000b2b9:	5e                   	pop    esi
c000b2ba:	5f                   	pop    edi
c000b2bb:	c3                   	ret    

c000b2bc <VgaText::putchar(char)>:
c000b2bc:	56                   	push   esi
c000b2bd:	53                   	push   ebx
c000b2be:	83 ec 14             	sub    esp,0x14
c000b2c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b2c9:	3c 5b                	cmp    al,0x5b
c000b2cb:	75 18                	jne    c000b2e5 <VgaText::putchar(char)+0x29>
c000b2cd:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b2d1:	74 1f                	je     c000b2f2 <VgaText::putchar(char)+0x36>
c000b2d3:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b2d9:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b2e0:	e9 bd 00 00 00       	jmp    c000b3a2 <VgaText::putchar(char)+0xe6>
c000b2e5:	3c 1b                	cmp    al,0x1b
c000b2e7:	75 09                	jne    c000b2f2 <VgaText::putchar(char)+0x36>
c000b2e9:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b2ed:	e9 b0 00 00 00       	jmp    c000b3a2 <VgaText::putchar(char)+0xe6>
c000b2f2:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b2f5:	84 c9                	test   cl,cl
c000b2f7:	0f 84 92 00 00 00    	je     c000b38f <VgaText::putchar(char)+0xd3>
c000b2fd:	8d 50 c0             	lea    edx,[eax-0x40]
c000b300:	80 fa 3e             	cmp    dl,0x3e
c000b303:	77 76                	ja     c000b37b <VgaText::putchar(char)+0xbf>
c000b305:	3c 6d                	cmp    al,0x6d
c000b307:	75 47                	jne    c000b350 <VgaText::putchar(char)+0x94>
c000b309:	31 f6                	xor    esi,esi
c000b30b:	31 d2                	xor    edx,edx
c000b30d:	31 c0                	xor    eax,eax
c000b30f:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b312:	7e 2d                	jle    c000b341 <VgaText::putchar(char)+0x85>
c000b314:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b319:	80 fa 3b             	cmp    dl,0x3b
c000b31c:	75 17                	jne    c000b335 <VgaText::putchar(char)+0x79>
c000b31e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b322:	50                   	push   eax
c000b323:	53                   	push   ebx
c000b324:	e8 83 f9 ff ff       	call   c000acac <VgaText::doANSI_SGR(int)>
c000b329:	59                   	pop    ecx
c000b32a:	31 d2                	xor    edx,edx
c000b32c:	58                   	pop    eax
c000b32d:	31 c0                	xor    eax,eax
c000b32f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b333:	eb 09                	jmp    c000b33e <VgaText::putchar(char)+0x82>
c000b335:	6b c0 0a             	imul   eax,eax,0xa
c000b338:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b33c:	88 ca                	mov    dl,cl
c000b33e:	46                   	inc    esi
c000b33f:	eb ce                	jmp    c000b30f <VgaText::putchar(char)+0x53>
c000b341:	84 d2                	test   dl,dl
c000b343:	74 2e                	je     c000b373 <VgaText::putchar(char)+0xb7>
c000b345:	50                   	push   eax
c000b346:	53                   	push   ebx
c000b347:	e8 60 f9 ff ff       	call   c000acac <VgaText::doANSI_SGR(int)>
c000b34c:	58                   	pop    eax
c000b34d:	5a                   	pop    edx
c000b34e:	eb 23                	jmp    c000b373 <VgaText::putchar(char)+0xb7>
c000b350:	3c 4a                	cmp    al,0x4a
c000b352:	75 1f                	jne    c000b373 <VgaText::putchar(char)+0xb7>
c000b354:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b358:	75 19                	jne    c000b373 <VgaText::putchar(char)+0xb7>
c000b35a:	83 ec 0c             	sub    esp,0xc
c000b35d:	53                   	push   ebx
c000b35e:	e8 ff fe ff ff       	call   c000b262 <VgaText::clearScreen()>
c000b363:	83 c4 0c             	add    esp,0xc
c000b366:	6a 00                	push   0x0
c000b368:	6a 00                	push   0x0
c000b36a:	53                   	push   ebx
c000b36b:	e8 5a fb ff ff       	call   c000aeca <VgaText::setCursor(int, int)>
c000b370:	83 c4 10             	add    esp,0x10
c000b373:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b379:	eb 27                	jmp    c000b3a2 <VgaText::putchar(char)+0xe6>
c000b37b:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b37e:	83 fa 0e             	cmp    edx,0xe
c000b381:	7f 1f                	jg     c000b3a2 <VgaText::putchar(char)+0xe6>
c000b383:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b386:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b389:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b38d:	eb 13                	jmp    c000b3a2 <VgaText::putchar(char)+0xe6>
c000b38f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b392:	0f be c0             	movsx  eax,al
c000b395:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b398:	50                   	push   eax
c000b399:	53                   	push   ebx
c000b39a:	e8 65 fc ff ff       	call   c000b004 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b39f:	83 c4 10             	add    esp,0x10
c000b3a2:	83 c4 14             	add    esp,0x14
c000b3a5:	5b                   	pop    ebx
c000b3a6:	5e                   	pop    esi
c000b3a7:	c3                   	ret    

c000b3a8 <VgaText::putx(unsigned int)>:
c000b3a8:	57                   	push   edi
c000b3a9:	b9 11 00 00 00       	mov    ecx,0x11
c000b3ae:	56                   	push   esi
c000b3af:	be 96 4c 02 c0       	mov    esi,0xc0024c96
c000b3b4:	53                   	push   ebx
c000b3b5:	83 ec 20             	sub    esp,0x20
c000b3b8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b3bc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b3c0:	fc                   	cld    
c000b3c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b3c3:	be 08 00 00 00       	mov    esi,0x8
c000b3c8:	50                   	push   eax
c000b3c9:	50                   	push   eax
c000b3ca:	89 d8                	mov    eax,ebx
c000b3cc:	c1 e3 04             	shl    ebx,0x4
c000b3cf:	c1 e8 1c             	shr    eax,0x1c
c000b3d2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b3d7:	50                   	push   eax
c000b3d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b3dc:	e8 db fe ff ff       	call   c000b2bc <VgaText::putchar(char)>
c000b3e1:	83 c4 10             	add    esp,0x10
c000b3e4:	4e                   	dec    esi
c000b3e5:	75 e1                	jne    c000b3c8 <VgaText::putx(unsigned int)+0x20>
c000b3e7:	83 c4 20             	add    esp,0x20
c000b3ea:	5b                   	pop    ebx
c000b3eb:	5e                   	pop    esi
c000b3ec:	5f                   	pop    edi
c000b3ed:	c3                   	ret    

c000b3ee <VgaText::puts(char const*)>:
c000b3ee:	53                   	push   ebx
c000b3ef:	83 ec 08             	sub    esp,0x8
c000b3f2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b3f6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b3f9:	84 c0                	test   al,al
c000b3fb:	74 12                	je     c000b40f <VgaText::puts(char const*)+0x21>
c000b3fd:	43                   	inc    ebx
c000b3fe:	51                   	push   ecx
c000b3ff:	51                   	push   ecx
c000b400:	50                   	push   eax
c000b401:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b405:	e8 b2 fe ff ff       	call   c000b2bc <VgaText::putchar(char)>
c000b40a:	83 c4 10             	add    esp,0x10
c000b40d:	eb e7                	jmp    c000b3f6 <VgaText::puts(char const*)+0x8>
c000b40f:	83 c4 08             	add    esp,0x8
c000b412:	5b                   	pop    ebx
c000b413:	c3                   	ret    

c000b414 <VgaText::VgaText(char const*)>:
c000b414:	57                   	push   edi
c000b415:	56                   	push   esi
c000b416:	53                   	push   ebx
c000b417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41b:	83 ec 08             	sub    esp,0x8
c000b41e:	6a 00                	push   0x0
c000b420:	50                   	push   eax
c000b421:	e8 44 05 00 00       	call   c000b96a <UnixFile::UnixFile(int)>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	ba fc 4c 02 c0       	mov    edx,0xc0024cfc
c000b42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b432:	89 10                	mov    DWORD PTR [eax],edx
c000b434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b438:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b443:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b456:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b45e:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b469:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b474:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b48a:	8d 50 60             	lea    edx,[eax+0x60]
c000b48d:	bb 20 8c 02 c0       	mov    ebx,0xc0028c20
c000b492:	b8 08 00 00 00       	mov    eax,0x8
c000b497:	fc                   	cld    
c000b498:	89 d7                	mov    edi,edx
c000b49a:	89 de                	mov    esi,ebx
c000b49c:	89 c1                	mov    ecx,eax
c000b49e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a4:	05 82 00 00 00       	add    eax,0x82
c000b4a9:	83 ec 08             	sub    esp,0x8
c000b4ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b0:	50                   	push   eax
c000b4b1:	e8 9a 52 ff ff       	call   c0000750 <strcpy>
c000b4b6:	83 c4 10             	add    esp,0x10
c000b4b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4bd:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b4c4:	83 ec 0c             	sub    esp,0xc
c000b4c7:	6a 01                	push   0x1
c000b4c9:	e8 df 08 00 00       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c000b4ce:	83 c4 10             	add    esp,0x10
c000b4d1:	89 c2                	mov    edx,eax
c000b4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b4da:	8b 1d f0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf0
c000b4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4e7:	89 c6                	mov    esi,eax
c000b4e9:	e8 b0 ef ff ff       	call   c000a49e <Phys::allocatePage()>
c000b4ee:	68 05 0c 00 00       	push   0xc05
c000b4f3:	56                   	push   esi
c000b4f4:	50                   	push   eax
c000b4f5:	53                   	push   ebx
c000b4f6:	e8 59 0f 00 00       	call   c000c454 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b502:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b505:	83 ec 04             	sub    esp,0x4
c000b508:	68 00 0f 00 00       	push   0xf00
c000b50d:	6a 00                	push   0x0
c000b50f:	50                   	push   eax
c000b510:	e8 7f 51 ff ff       	call   c0000694 <memset>
c000b515:	83 c4 10             	add    esp,0x10
c000b518:	83 ec 04             	sub    esp,0x4
c000b51b:	6a 00                	push   0x0
c000b51d:	6a 07                	push   0x7
c000b51f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b523:	e8 18 f8 ff ff       	call   c000ad40 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	83 ec 04             	sub    esp,0x4
c000b52e:	6a 00                	push   0x0
c000b530:	6a 00                	push   0x0
c000b532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b536:	e8 8f f9 ff ff       	call   c000aeca <VgaText::setCursor(int, int)>
c000b53b:	83 c4 10             	add    esp,0x10
c000b53e:	83 ec 0c             	sub    esp,0xc
c000b541:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b545:	e8 18 fd ff ff       	call   c000b262 <VgaText::clearScreen()>
c000b54a:	83 c4 10             	add    esp,0x10
c000b54d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b551:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b559:	05 02 01 00 00       	add    eax,0x102
c000b55e:	83 ec 04             	sub    esp,0x4
c000b561:	6a 30                	push   0x30
c000b563:	6a 00                	push   0x0
c000b565:	50                   	push   eax
c000b566:	e8 29 51 ff ff       	call   c0000694 <memset>
c000b56b:	83 c4 10             	add    esp,0x10
c000b56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b572:	05 32 01 00 00       	add    eax,0x132
c000b577:	83 ec 04             	sub    esp,0x4
c000b57a:	68 80 00 00 00       	push   0x80
c000b57f:	6a 00                	push   0x0
c000b581:	50                   	push   eax
c000b582:	e8 0d 51 ff ff       	call   c0000694 <memset>
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	90                   	nop
c000b58b:	5b                   	pop    ebx
c000b58c:	5e                   	pop    esi
c000b58d:	5f                   	pop    edi
c000b58e:	c3                   	ret    
c000b58f:	90                   	nop

c000b590 <VgaText::receiveKey(unsigned char)>:
c000b590:	55                   	push   ebp
c000b591:	57                   	push   edi
c000b592:	56                   	push   esi
c000b593:	53                   	push   ebx
c000b594:	83 ec 1c             	sub    esp,0x1c
c000b597:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b59b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b59f:	84 db                	test   bl,bl
c000b5a1:	0f 84 c6 00 00 00    	je     c000b66d <VgaText::receiveKey(unsigned char)+0xdd>
c000b5a7:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b5ad:	80 fb 08             	cmp    bl,0x8
c000b5b0:	75 2c                	jne    c000b5de <VgaText::receiveKey(unsigned char)+0x4e>
c000b5b2:	83 ec 0c             	sub    esp,0xc
c000b5b5:	57                   	push   edi
c000b5b6:	e8 f5 50 ff ff       	call   c00006b0 <strlen>
c000b5bb:	83 c4 10             	add    esp,0x10
c000b5be:	85 c0                	test   eax,eax
c000b5c0:	74 41                	je     c000b603 <VgaText::receiveKey(unsigned char)+0x73>
c000b5c2:	50                   	push   eax
c000b5c3:	50                   	push   eax
c000b5c4:	6a 08                	push   0x8
c000b5c6:	56                   	push   esi
c000b5c7:	e8 f0 fc ff ff       	call   c000b2bc <VgaText::putchar(char)>
c000b5cc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b5cf:	e8 dc 50 ff ff       	call   c00006b0 <strlen>
c000b5d4:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b5dc:	eb 22                	jmp    c000b600 <VgaText::receiveKey(unsigned char)+0x70>
c000b5de:	0f be c3             	movsx  eax,bl
c000b5e1:	52                   	push   edx
c000b5e2:	52                   	push   edx
c000b5e3:	50                   	push   eax
c000b5e4:	56                   	push   esi
c000b5e5:	e8 d2 fc ff ff       	call   c000b2bc <VgaText::putchar(char)>
c000b5ea:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b5ee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b5f3:	59                   	pop    ecx
c000b5f4:	5d                   	pop    ebp
c000b5f5:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b5f9:	50                   	push   eax
c000b5fa:	57                   	push   edi
c000b5fb:	e8 90 52 ff ff       	call   c0000890 <strcat>
c000b600:	83 c4 10             	add    esp,0x10
c000b603:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b60a:	75 05                	jne    c000b611 <VgaText::receiveKey(unsigned char)+0x81>
c000b60c:	80 fb 0a             	cmp    bl,0xa
c000b60f:	75 50                	jne    c000b661 <VgaText::receiveKey(unsigned char)+0xd1>
c000b611:	83 ec 0c             	sub    esp,0xc
c000b614:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b61a:	53                   	push   ebx
c000b61b:	e8 90 50 ff ff       	call   c00006b0 <strlen>
c000b620:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b623:	89 c5                	mov    ebp,eax
c000b625:	e8 86 50 ff ff       	call   c00006b0 <strlen>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b631:	3d 80 00 00 00       	cmp    eax,0x80
c000b636:	76 10                	jbe    c000b648 <VgaText::receiveKey(unsigned char)+0xb8>
c000b638:	83 ec 0c             	sub    esp,0xc
c000b63b:	68 a7 4c 02 c0       	push   0xc0024ca7
c000b640:	e8 70 9b 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000b645:	83 c4 10             	add    esp,0x10
c000b648:	50                   	push   eax
c000b649:	50                   	push   eax
c000b64a:	57                   	push   edi
c000b64b:	53                   	push   ebx
c000b64c:	e8 3f 52 ff ff       	call   c0000890 <strcat>
c000b651:	83 c4 0c             	add    esp,0xc
c000b654:	6a 30                	push   0x30
c000b656:	6a 00                	push   0x0
c000b658:	57                   	push   edi
c000b659:	e8 36 50 ff ff       	call   c0000694 <memset>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	83 ec 0c             	sub    esp,0xc
c000b664:	56                   	push   esi
c000b665:	e8 72 fa ff ff       	call   c000b0dc <VgaText::doUpdate()>
c000b66a:	83 c4 10             	add    esp,0x10
c000b66d:	83 c4 1c             	add    esp,0x1c
c000b670:	5b                   	pop    ebx
c000b671:	5e                   	pop    esi
c000b672:	5f                   	pop    edi
c000b673:	5d                   	pop    ebp
c000b674:	c3                   	ret    
c000b675:	90                   	nop

c000b676 <VgaText::write(unsigned long long, void*, int*)>:
c000b676:	55                   	push   ebp
c000b677:	57                   	push   edi
c000b678:	56                   	push   esi
c000b679:	53                   	push   ebx
c000b67a:	83 ec 0c             	sub    esp,0xc
c000b67d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b681:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b685:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b689:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b690:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b693:	39 eb                	cmp    ebx,ebp
c000b695:	74 13                	je     c000b6aa <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b697:	43                   	inc    ebx
c000b698:	50                   	push   eax
c000b699:	50                   	push   eax
c000b69a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b69e:	50                   	push   eax
c000b69f:	56                   	push   esi
c000b6a0:	e8 17 fc ff ff       	call   c000b2bc <VgaText::putchar(char)>
c000b6a5:	83 c4 10             	add    esp,0x10
c000b6a8:	eb e9                	jmp    c000b693 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b6aa:	83 ec 0c             	sub    esp,0xc
c000b6ad:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b6b4:	56                   	push   esi
c000b6b5:	e8 22 fa ff ff       	call   c000b0dc <VgaText::doUpdate()>
c000b6ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b6be:	89 38                	mov    DWORD PTR [eax],edi
c000b6c0:	83 c4 1c             	add    esp,0x1c
c000b6c3:	31 c0                	xor    eax,eax
c000b6c5:	5b                   	pop    ebx
c000b6c6:	5e                   	pop    esi
c000b6c7:	5f                   	pop    edi
c000b6c8:	5d                   	pop    ebp
c000b6c9:	c3                   	ret    

c000b6ca <newTerminal(char*)>:
c000b6ca:	83 ec 28             	sub    esp,0x28
c000b6cd:	68 b4 01 00 00       	push   0x1b4
c000b6d2:	e8 10 e7 ff ff       	call   c0009de7 <malloc>
c000b6d7:	5a                   	pop    edx
c000b6d8:	59                   	pop    ecx
c000b6d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6dd:	50                   	push   eax
c000b6de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6e2:	e8 2d fd ff ff       	call   c000b414 <VgaText::VgaText(char const*)>
c000b6e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6eb:	83 c4 2c             	add    esp,0x2c
c000b6ee:	c3                   	ret    
c000b6ef:	90                   	nop

c000b6f0 <TSS::TSS()>:
c000b6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b6fb:	90                   	nop
c000b6fc:	c3                   	ret    
c000b6fd:	90                   	nop
c000b6fe:	66 90                	xchg   ax,ax

c000b700 <TSS::setESP(unsigned long)>:
c000b700:	55                   	push   ebp
c000b701:	89 e5                	mov    ebp,esp
c000b703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b706:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b709:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b70c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b70f:	90                   	nop
c000b710:	5d                   	pop    ebp
c000b711:	c3                   	ret    
c000b712:	66 90                	xchg   ax,ax

c000b714 <TSS::flush()>:
c000b714:	55                   	push   ebp
c000b715:	89 e5                	mov    ebp,esp
c000b717:	83 ec 10             	sub    esp,0x10
c000b71a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b71d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b71f:	83 c8 03             	or     eax,0x3
c000b722:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b726:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b72a:	66 89 d0             	mov    ax,dx
c000b72d:	0f 00 d8             	ltr    ax
c000b730:	90                   	nop
c000b731:	c9                   	leave  
c000b732:	c3                   	ret    
c000b733:	90                   	nop

c000b734 <TSS::setup(unsigned long, unsigned long)>:
c000b734:	55                   	push   ebp
c000b735:	89 e5                	mov    ebp,esp
c000b737:	83 ec 18             	sub    esp,0x18
c000b73a:	83 ec 0c             	sub    esp,0xc
c000b73d:	6a 68                	push   0x68
c000b73f:	e8 a3 e6 ff ff       	call   c0009de7 <malloc>
c000b744:	83 c4 10             	add    esp,0x10
c000b747:	89 c2                	mov    edx,eax
c000b749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b74c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b74f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b752:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b755:	83 ec 04             	sub    esp,0x4
c000b758:	6a 68                	push   0x68
c000b75a:	6a 00                	push   0x0
c000b75c:	50                   	push   eax
c000b75d:	e8 32 4f ff ff       	call   c0000694 <memset>
c000b762:	83 c4 10             	add    esp,0x10
c000b765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b768:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b76b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b774:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b777:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b77d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b780:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b783:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b786:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b78c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b78f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b79b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7a7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7b3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b7b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7bf:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b7c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7cb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7d7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b7da:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b7dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7e3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b7e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b7e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7ef:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b7f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7fc:	0f 20 da             	mov    edx,cr3
c000b7ff:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b802:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b805:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b80b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b80e:	83 ec 08             	sub    esp,0x8
c000b811:	50                   	push   eax
c000b812:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b815:	50                   	push   eax
c000b816:	e8 b3 dd ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c000b81b:	83 c4 10             	add    esp,0x10
c000b81e:	83 ec 08             	sub    esp,0x8
c000b821:	6a 68                	push   0x68
c000b823:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b826:	50                   	push   eax
c000b827:	e8 be dd ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c000b82c:	83 c4 10             	add    esp,0x10
c000b82f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b833:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b836:	83 e0 0f             	and    eax,0xf
c000b839:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b83c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b83f:	83 c8 40             	or     eax,0x40
c000b842:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b845:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000b84a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b850:	05 78 01 00 00       	add    eax,0x178
c000b855:	83 ec 04             	sub    esp,0x4
c000b858:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b85b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b85e:	50                   	push   eax
c000b85f:	e8 ba dd ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c000b864:	83 c4 10             	add    esp,0x10
c000b867:	89 c2                	mov    edx,eax
c000b869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b86c:	89 10                	mov    DWORD PTR [eax],edx
c000b86e:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000b873:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b879:	05 78 01 00 00       	add    eax,0x178
c000b87e:	83 ec 0c             	sub    esp,0xc
c000b881:	50                   	push   eax
c000b882:	e8 c1 dd ff ff       	call   c0009648 <GDT::flush()>
c000b887:	83 c4 10             	add    esp,0x10
c000b88a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b88d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b88f:	c9                   	leave  
c000b890:	c3                   	ret    
c000b891:	90                   	nop

c000b892 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b896:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b89a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b89d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b8a2:	75 08                	jne    c000b8ac <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b8a4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b8aa:	eb 38                	jmp    c000b8e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b8ac:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b8b1:	75 17                	jne    c000b8ca <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b8b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b8b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b8bb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b8c1:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8c7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b8ca:	89 c1                	mov    ecx,eax
c000b8cc:	83 e1 fd             	and    ecx,0xfffffffd
c000b8cf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b8d5:	74 cd                	je     c000b8a4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b8d7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b8dc:	83 e0 ef             	and    eax,0xffffffef
c000b8df:	83 f8 08             	cmp    eax,0x8
c000b8e2:	76 c0                	jbe    c000b8a4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b8e4:	31 c0                	xor    eax,eax
c000b8e6:	c3                   	ret    
c000b8e7:	90                   	nop

c000b8e8 <ReservedFilename::isAtty()>:
c000b8e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b8ef:	31 c0                	xor    eax,eax
c000b8f1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b8f7:	74 09                	je     c000b902 <ReservedFilename::isAtty()+0x1a>
c000b8f9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b8ff:	0f 94 c0             	sete   al
c000b902:	c3                   	ret    
c000b903:	90                   	nop

c000b904 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b908:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b90c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b90f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b913:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b918:	75 08                	jne    c000b922 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b91a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b920:	eb 3d                	jmp    c000b95f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b922:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b927:	75 17                	jne    c000b940 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b929:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b92e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b931:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b937:	8b 10                	mov    edx,DWORD PTR [eax]
c000b939:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b93d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b940:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b945:	75 04                	jne    c000b94b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b947:	89 0a                	mov    DWORD PTR [edx],ecx
c000b949:	eb 14                	jmp    c000b95f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b94b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b950:	74 c8                	je     c000b91a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b952:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b957:	83 e0 ef             	and    eax,0xffffffef
c000b95a:	83 f8 08             	cmp    eax,0x8
c000b95d:	76 bb                	jbe    c000b91a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b95f:	31 c0                	xor    eax,eax
c000b961:	c3                   	ret    

c000b962 <UnixFile::getFileDescriptor()>:
c000b962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b969:	c3                   	ret    

c000b96a <UnixFile::UnixFile(int)>:
c000b96a:	53                   	push   ebx
c000b96b:	83 ec 28             	sub    esp,0x28
c000b96e:	ba c4 4d 02 c0       	mov    edx,0xc0024dc4
c000b973:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b977:	89 10                	mov    DWORD PTR [eax],edx
c000b979:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b981:	0f 8f 8c 01 00 00    	jg     c000bb13 <UnixFile::UnixFile(int)+0x1a9>
c000b987:	a1 00 80 02 c0       	mov    eax,ds:0xc0028000
c000b98c:	8d 50 01             	lea    edx,[eax+0x1]
c000b98f:	89 15 00 80 02 c0    	mov    DWORD PTR ds:0xc0028000,edx
c000b995:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b999:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b99c:	83 ec 08             	sub    esp,0x8
c000b99f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b9a3:	68 d8 8c 02 c0       	push   0xc0028cd8
c000b9a8:	e8 cb 78 01 00       	call   c0023278 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b9ad:	83 c4 10             	add    esp,0x10
c000b9b0:	a0 d4 8c 02 c0       	mov    al,ds:0xc0028cd4
c000b9b5:	83 f0 01             	xor    eax,0x1
c000b9b8:	84 c0                	test   al,al
c000b9ba:	0f 84 54 01 00 00    	je     c000bb14 <UnixFile::UnixFile(int)+0x1aa>
c000b9c0:	c6 05 d4 8c 02 c0 01 	mov    BYTE PTR ds:0xc0028cd4,0x1
c000b9c7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b9cf:	83 ec 0c             	sub    esp,0xc
c000b9d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9d6:	e8 0c e4 ff ff       	call   c0009de7 <malloc>
c000b9db:	83 c4 10             	add    esp,0x10
c000b9de:	89 c3                	mov    ebx,eax
c000b9e0:	83 ec 08             	sub    esp,0x8
c000b9e3:	68 03 ff ff 0f       	push   0xfffff03
c000b9e8:	53                   	push   ebx
c000b9e9:	e8 2c 01 00 00       	call   c000bb1a <ReservedFilename::ReservedFilename(int)>
c000b9ee:	83 c4 10             	add    esp,0x10
c000b9f1:	89 1d cc 8c 02 c0    	mov    DWORD PTR ds:0xc0028ccc,ebx
c000b9f7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b9ff:	83 ec 0c             	sub    esp,0xc
c000ba02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba06:	e8 dc e3 ff ff       	call   c0009de7 <malloc>
c000ba0b:	83 c4 10             	add    esp,0x10
c000ba0e:	89 c3                	mov    ebx,eax
c000ba10:	83 ec 08             	sub    esp,0x8
c000ba13:	68 01 ff ff 0f       	push   0xfffff01
c000ba18:	53                   	push   ebx
c000ba19:	e8 fc 00 00 00       	call   c000bb1a <ReservedFilename::ReservedFilename(int)>
c000ba1e:	83 c4 10             	add    esp,0x10
c000ba21:	89 1d d0 8c 02 c0    	mov    DWORD PTR ds:0xc0028cd0,ebx
c000ba27:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000ba2f:	83 ec 0c             	sub    esp,0xc
c000ba32:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba36:	e8 ac e3 ff ff       	call   c0009de7 <malloc>
c000ba3b:	83 c4 10             	add    esp,0x10
c000ba3e:	89 c3                	mov    ebx,eax
c000ba40:	83 ec 08             	sub    esp,0x8
c000ba43:	68 00 ff ff 0f       	push   0xfffff00
c000ba48:	53                   	push   ebx
c000ba49:	e8 cc 00 00 00       	call   c000bb1a <ReservedFilename::ReservedFilename(int)>
c000ba4e:	83 c4 10             	add    esp,0x10
c000ba51:	89 1d c4 8c 02 c0    	mov    DWORD PTR ds:0xc0028cc4,ebx
c000ba57:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000ba5f:	83 ec 0c             	sub    esp,0xc
c000ba62:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba66:	e8 7c e3 ff ff       	call   c0009de7 <malloc>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	89 c3                	mov    ebx,eax
c000ba70:	83 ec 08             	sub    esp,0x8
c000ba73:	68 02 ff ff 0f       	push   0xfffff02
c000ba78:	53                   	push   ebx
c000ba79:	e8 9c 00 00 00       	call   c000bb1a <ReservedFilename::ReservedFilename(int)>
c000ba7e:	83 c4 10             	add    esp,0x10
c000ba81:	89 1d c8 8c 02 c0    	mov    DWORD PTR ds:0xc0028cc8,ebx
c000ba87:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ba8f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000ba94:	7f 7e                	jg     c000bb14 <UnixFile::UnixFile(int)+0x1aa>
c000ba96:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000ba9e:	83 ec 0c             	sub    esp,0xc
c000baa1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000baa5:	e8 3d e3 ff ff       	call   c0009de7 <malloc>
c000baaa:	83 c4 10             	add    esp,0x10
c000baad:	89 c3                	mov    ebx,eax
c000baaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bab3:	05 10 ff ff 0f       	add    eax,0xfffff10
c000bab8:	83 ec 08             	sub    esp,0x8
c000babb:	50                   	push   eax
c000babc:	53                   	push   ebx
c000babd:	e8 58 00 00 00       	call   c000bb1a <ReservedFilename::ReservedFilename(int)>
c000bac2:	83 c4 10             	add    esp,0x10
c000bac5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bac9:	89 1c 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],ebx
c000bad0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000bad8:	83 ec 0c             	sub    esp,0xc
c000badb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000badf:	e8 03 e3 ff ff       	call   c0009de7 <malloc>
c000bae4:	83 c4 10             	add    esp,0x10
c000bae7:	89 c3                	mov    ebx,eax
c000bae9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000baed:	05 20 ff ff 0f       	add    eax,0xfffff20
c000baf2:	83 ec 08             	sub    esp,0x8
c000baf5:	50                   	push   eax
c000baf6:	53                   	push   ebx
c000baf7:	e8 1e 00 00 00       	call   c000bb1a <ReservedFilename::ReservedFilename(int)>
c000bafc:	83 c4 10             	add    esp,0x10
c000baff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb03:	89 1c 85 60 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73a0],ebx
c000bb0a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bb0e:	e9 7c ff ff ff       	jmp    c000ba8f <UnixFile::UnixFile(int)+0x125>
c000bb13:	90                   	nop
c000bb14:	83 c4 28             	add    esp,0x28
c000bb17:	5b                   	pop    ebx
c000bb18:	c3                   	ret    
c000bb19:	90                   	nop

c000bb1a <ReservedFilename::ReservedFilename(int)>:
c000bb1a:	83 ec 0c             	sub    esp,0xc
c000bb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb21:	83 ec 08             	sub    esp,0x8
c000bb24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb28:	50                   	push   eax
c000bb29:	e8 3c fe ff ff       	call   c000b96a <UnixFile::UnixFile(int)>
c000bb2e:	83 c4 10             	add    esp,0x10
c000bb31:	ba e0 4d 02 c0       	mov    edx,0xc0024de0
c000bb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb3a:	89 10                	mov    DWORD PTR [eax],edx
c000bb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000bb47:	90                   	nop
c000bb48:	83 c4 0c             	add    esp,0xc
c000bb4b:	c3                   	ret    

c000bb4c <UnixFile::~UnixFile()>:
c000bb4c:	83 ec 1c             	sub    esp,0x1c
c000bb4f:	ba c4 4d 02 c0       	mov    edx,0xc0024dc4
c000bb54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb58:	89 10                	mov    DWORD PTR [eax],edx
c000bb5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb61:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000bb66:	7f 73                	jg     c000bbdb <UnixFile::~UnixFile()+0x8f>
c000bb68:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bb70:	83 ec 0c             	sub    esp,0xc
c000bb73:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bb78:	e8 cf 77 01 00       	call   c002334c <LinkedList<UnixFile>::getFirstElement()>
c000bb7d:	83 c4 10             	add    esp,0x10
c000bb80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb84:	83 ec 0c             	sub    esp,0xc
c000bb87:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bb8c:	e8 c3 77 01 00       	call   c0023354 <LinkedList<UnixFile>::removeFirst()>
c000bb91:	83 c4 10             	add    esp,0x10
c000bb94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb98:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000bb9c:	74 40                	je     c000bbde <UnixFile::~UnixFile()+0x92>
c000bb9e:	83 ec 08             	sub    esp,0x8
c000bba1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bba5:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bbaa:	e8 c9 76 01 00       	call   c0023278 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000bbaf:	83 c4 10             	add    esp,0x10
c000bbb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbb6:	8d 50 01             	lea    edx,[eax+0x1]
c000bbb9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbd:	3d 88 13 00 00       	cmp    eax,0x1388
c000bbc2:	0f 94 c0             	sete   al
c000bbc5:	84 c0                	test   al,al
c000bbc7:	74 a7                	je     c000bb70 <UnixFile::~UnixFile()+0x24>
c000bbc9:	83 ec 0c             	sub    esp,0xc
c000bbcc:	68 9c 4d 02 c0       	push   0xc0024d9c
c000bbd1:	e8 df 95 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000bbd6:	83 c4 10             	add    esp,0x10
c000bbd9:	eb 95                	jmp    c000bb70 <UnixFile::~UnixFile()+0x24>
c000bbdb:	90                   	nop
c000bbdc:	eb 01                	jmp    c000bbdf <UnixFile::~UnixFile()+0x93>
c000bbde:	90                   	nop
c000bbdf:	90                   	nop
c000bbe0:	83 c4 1c             	add    esp,0x1c
c000bbe3:	c3                   	ret    

c000bbe4 <UnixFile::~UnixFile()>:
c000bbe4:	83 ec 0c             	sub    esp,0xc
c000bbe7:	83 ec 0c             	sub    esp,0xc
c000bbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbee:	e8 59 ff ff ff       	call   c000bb4c <UnixFile::~UnixFile()>
c000bbf3:	83 c4 10             	add    esp,0x10
c000bbf6:	83 ec 08             	sub    esp,0x8
c000bbf9:	6a 0c                	push   0xc
c000bbfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbff:	e8 ee 13 00 00       	call   c000cff2 <operator delete(void*, unsigned long)>
c000bc04:	83 c4 10             	add    esp,0x10
c000bc07:	83 c4 0c             	add    esp,0xc
c000bc0a:	c3                   	ret    
c000bc0b:	90                   	nop

c000bc0c <ReservedFilename::~ReservedFilename()>:
c000bc0c:	83 ec 0c             	sub    esp,0xc
c000bc0f:	ba e0 4d 02 c0       	mov    edx,0xc0024de0
c000bc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc18:	89 10                	mov    DWORD PTR [eax],edx
c000bc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc1e:	83 ec 0c             	sub    esp,0xc
c000bc21:	50                   	push   eax
c000bc22:	e8 25 ff ff ff       	call   c000bb4c <UnixFile::~UnixFile()>
c000bc27:	83 c4 10             	add    esp,0x10
c000bc2a:	90                   	nop
c000bc2b:	83 c4 0c             	add    esp,0xc
c000bc2e:	c3                   	ret    
c000bc2f:	90                   	nop

c000bc30 <ReservedFilename::~ReservedFilename()>:
c000bc30:	83 ec 0c             	sub    esp,0xc
c000bc33:	83 ec 0c             	sub    esp,0xc
c000bc36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc3a:	e8 cd ff ff ff       	call   c000bc0c <ReservedFilename::~ReservedFilename()>
c000bc3f:	83 c4 10             	add    esp,0x10
c000bc42:	83 ec 08             	sub    esp,0x8
c000bc45:	6a 0c                	push   0xc
c000bc47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc4b:	e8 a2 13 00 00       	call   c000cff2 <operator delete(void*, unsigned long)>
c000bc50:	83 c4 10             	add    esp,0x10
c000bc53:	83 c4 0c             	add    esp,0xc
c000bc56:	c3                   	ret    

c000bc57 <getFromFileDescriptor(int)>:
c000bc57:	53                   	push   ebx
c000bc58:	83 ec 08             	sub    esp,0x8
c000bc5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc5f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bc65:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bc6b:	7f 2c                	jg     c000bc99 <getFromFileDescriptor(int)+0x42>
c000bc6d:	83 ec 0c             	sub    esp,0xc
c000bc70:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bc75:	e8 d2 76 01 00       	call   c002334c <LinkedList<UnixFile>::getFirstElement()>
c000bc7a:	83 c4 10             	add    esp,0x10
c000bc7d:	85 c0                	test   eax,eax
c000bc7f:	75 04                	jne    c000bc85 <getFromFileDescriptor(int)+0x2e>
c000bc81:	31 c0                	xor    eax,eax
c000bc83:	eb 6e                	jmp    c000bcf3 <getFromFileDescriptor(int)+0x9c>
c000bc85:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bc88:	74 69                	je     c000bcf3 <getFromFileDescriptor(int)+0x9c>
c000bc8a:	52                   	push   edx
c000bc8b:	52                   	push   edx
c000bc8c:	50                   	push   eax
c000bc8d:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bc92:	e8 5f 77 01 00       	call   c00233f6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bc97:	eb e1                	jmp    c000bc7a <getFromFileDescriptor(int)+0x23>
c000bc99:	a1 cc 8c 02 c0       	mov    eax,ds:0xc0028ccc
c000bc9e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bca4:	74 4d                	je     c000bcf3 <getFromFileDescriptor(int)+0x9c>
c000bca6:	a1 d0 8c 02 c0       	mov    eax,ds:0xc0028cd0
c000bcab:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bcb1:	74 40                	je     c000bcf3 <getFromFileDescriptor(int)+0x9c>
c000bcb3:	a1 c8 8c 02 c0       	mov    eax,ds:0xc0028cc8
c000bcb8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bcbe:	74 33                	je     c000bcf3 <getFromFileDescriptor(int)+0x9c>
c000bcc0:	a1 c4 8c 02 c0       	mov    eax,ds:0xc0028cc4
c000bcc5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bccb:	74 26                	je     c000bcf3 <getFromFileDescriptor(int)+0x9c>
c000bccd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bcd3:	83 f8 08             	cmp    eax,0x8
c000bcd6:	77 09                	ja     c000bce1 <getFromFileDescriptor(int)+0x8a>
c000bcd8:	8b 04 85 a0 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7360]
c000bcdf:	eb 12                	jmp    c000bcf3 <getFromFileDescriptor(int)+0x9c>
c000bce1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bce7:	83 fb 08             	cmp    ebx,0x8
c000bcea:	77 95                	ja     c000bc81 <getFromFileDescriptor(int)+0x2a>
c000bcec:	8b 04 9d 60 8c 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd73a0]
c000bcf3:	83 c4 08             	add    esp,0x8
c000bcf6:	5b                   	pop    ebx
c000bcf7:	c3                   	ret    

c000bcf8 <__static_initialization_and_destruction_0(int, int)>:
c000bcf8:	83 ec 0c             	sub    esp,0xc
c000bcfb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bd00:	75 34                	jne    c000bd36 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bd02:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bd0a:	75 2a                	jne    c000bd36 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bd0c:	83 ec 0c             	sub    esp,0xc
c000bd0f:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bd14:	e8 1d 75 01 00       	call   c0023236 <LinkedList<UnixFile>::LinkedList()>
c000bd19:	83 c4 10             	add    esp,0x10
c000bd1c:	83 ec 04             	sub    esp,0x4
c000bd1f:	68 38 7e 02 c0       	push   0xc0027e38
c000bd24:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bd29:	68 34 32 02 c0       	push   0xc0023234
c000bd2e:	e8 39 12 00 00       	call   c000cf6c <__cxa_atexit>
c000bd33:	83 c4 10             	add    esp,0x10
c000bd36:	90                   	nop
c000bd37:	83 c4 0c             	add    esp,0xc
c000bd3a:	c3                   	ret    

c000bd3b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bd3b:	83 ec 0c             	sub    esp,0xc
c000bd3e:	83 ec 08             	sub    esp,0x8
c000bd41:	68 ff ff 00 00       	push   0xffff
c000bd46:	6a 01                	push   0x1
c000bd48:	e8 ab ff ff ff       	call   c000bcf8 <__static_initialization_and_destruction_0(int, int)>
c000bd4d:	83 c4 10             	add    esp,0x10
c000bd50:	83 c4 0c             	add    esp,0xc
c000bd53:	c3                   	ret    

c000bd54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bd54:	53                   	push   ebx
c000bd55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd59:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bd5d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bd63:	89 c8                	mov    eax,ecx
c000bd65:	d1 e8                	shr    eax,1
c000bd67:	03 05 08 80 02 c0    	add    eax,DWORD PTR ds:0xc0028008
c000bd6d:	83 e1 01             	and    ecx,0x1
c000bd70:	8a 10                	mov    dl,BYTE PTR [eax]
c000bd72:	75 09                	jne    c000bd7d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bd74:	83 e2 f0             	and    edx,0xfffffff0
c000bd77:	09 da                	or     edx,ebx
c000bd79:	88 10                	mov    BYTE PTR [eax],dl
c000bd7b:	5b                   	pop    ebx
c000bd7c:	c3                   	ret    
c000bd7d:	c1 e3 04             	shl    ebx,0x4
c000bd80:	83 e2 0f             	and    edx,0xf
c000bd83:	09 da                	or     edx,ebx
c000bd85:	88 10                	mov    BYTE PTR [eax],dl
c000bd87:	5b                   	pop    ebx
c000bd88:	c3                   	ret    

c000bd89 <Virt::getPageState(unsigned long)>:
c000bd89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd8d:	8b 0d 08 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028008
c000bd93:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bd99:	89 d0                	mov    eax,edx
c000bd9b:	d1 e8                	shr    eax,1
c000bd9d:	83 e2 01             	and    edx,0x1
c000bda0:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bda3:	75 04                	jne    c000bda9 <Virt::getPageState(unsigned long)+0x20>
c000bda5:	83 e0 0f             	and    eax,0xf
c000bda8:	c3                   	ret    
c000bda9:	c0 e8 04             	shr    al,0x4
c000bdac:	c3                   	ret    

c000bdad <Virt::allocateKernelVirtualPages(int)>:
c000bdad:	55                   	push   ebp
c000bdae:	31 ed                	xor    ebp,ebp
c000bdb0:	57                   	push   edi
c000bdb1:	56                   	push   esi
c000bdb2:	53                   	push   ebx
c000bdb3:	31 db                	xor    ebx,ebx
c000bdb5:	83 ec 1c             	sub    esp,0x1c
c000bdb8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdbc:	8b 3d 04 80 02 c0    	mov    edi,DWORD PTR ds:0xc0028004
c000bdc2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bdc7:	57                   	push   edi
c000bdc8:	e8 bc ff ff ff       	call   c000bd89 <Virt::getPageState(unsigned long)>
c000bdcd:	5a                   	pop    edx
c000bdce:	84 c0                	test   al,al
c000bdd0:	75 3a                	jne    c000be0c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bdd2:	85 db                	test   ebx,ebx
c000bdd4:	75 02                	jne    c000bdd8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bdd6:	89 fd                	mov    ebp,edi
c000bdd8:	43                   	inc    ebx
c000bdd9:	39 f3                	cmp    ebx,esi
c000bddb:	74 5a                	je     c000be37 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bddd:	47                   	inc    edi
c000bdde:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bde4:	76 31                	jbe    c000be17 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bde6:	c7 05 04 80 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0028004,0xc8000
c000bdf0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bdf5:	75 28                	jne    c000be1f <Virt::allocateKernelVirtualPages(int)+0x72>
c000bdf7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bdfc:	bf 00 80 0c 00       	mov    edi,0xc8000
c000be01:	57                   	push   edi
c000be02:	e8 82 ff ff ff       	call   c000bd89 <Virt::getPageState(unsigned long)>
c000be07:	5a                   	pop    edx
c000be08:	84 c0                	test   al,al
c000be0a:	74 c6                	je     c000bdd2 <Virt::allocateKernelVirtualPages(int)+0x25>
c000be0c:	31 db                	xor    ebx,ebx
c000be0e:	47                   	inc    edi
c000be0f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000be15:	77 cf                	ja     c000bde6 <Virt::allocateKernelVirtualPages(int)+0x39>
c000be17:	89 3d 04 80 02 c0    	mov    DWORD PTR ds:0xc0028004,edi
c000be1d:	eb a8                	jmp    c000bdc7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000be1f:	83 ec 0c             	sub    esp,0xc
c000be22:	68 f4 4d 02 c0       	push   0xc0024df4
c000be27:	e8 89 93 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000be2c:	8b 3d 04 80 02 c0    	mov    edi,DWORD PTR ds:0xc0028004
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	eb 90                	jmp    c000bdc7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000be37:	89 2d 04 80 02 c0    	mov    DWORD PTR ds:0xc0028004,ebp
c000be3d:	4b                   	dec    ebx
c000be3e:	74 5f                	je     c000be9f <Virt::allocateKernelVirtualPages(int)+0xf2>
c000be40:	85 f6                	test   esi,esi
c000be42:	74 3d                	je     c000be81 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000be44:	89 e8                	mov    eax,ebp
c000be46:	31 db                	xor    ebx,ebx
c000be48:	8d 7e ff             	lea    edi,[esi-0x1]
c000be4b:	eb 14                	jmp    c000be61 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000be4d:	6a 01                	push   0x1
c000be4f:	43                   	inc    ebx
c000be50:	50                   	push   eax
c000be51:	e8 fe fe ff ff       	call   c000bd54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be56:	58                   	pop    eax
c000be57:	39 f3                	cmp    ebx,esi
c000be59:	5a                   	pop    edx
c000be5a:	74 25                	je     c000be81 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000be5c:	a1 04 80 02 c0       	mov    eax,ds:0xc0028004
c000be61:	8d 50 01             	lea    edx,[eax+0x1]
c000be64:	85 db                	test   ebx,ebx
c000be66:	89 15 04 80 02 c0    	mov    DWORD PTR ds:0xc0028004,edx
c000be6c:	74 20                	je     c000be8e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000be6e:	39 df                	cmp    edi,ebx
c000be70:	75 db                	jne    c000be4d <Virt::allocateKernelVirtualPages(int)+0xa0>
c000be72:	6a 03                	push   0x3
c000be74:	43                   	inc    ebx
c000be75:	50                   	push   eax
c000be76:	e8 d9 fe ff ff       	call   c000bd54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be7b:	59                   	pop    ecx
c000be7c:	39 f3                	cmp    ebx,esi
c000be7e:	58                   	pop    eax
c000be7f:	75 db                	jne    c000be5c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be81:	83 c4 1c             	add    esp,0x1c
c000be84:	89 e8                	mov    eax,ebp
c000be86:	5b                   	pop    ebx
c000be87:	c1 e0 0c             	shl    eax,0xc
c000be8a:	5e                   	pop    esi
c000be8b:	5f                   	pop    edi
c000be8c:	5d                   	pop    ebp
c000be8d:	c3                   	ret    
c000be8e:	6a 02                	push   0x2
c000be90:	bb 01 00 00 00       	mov    ebx,0x1
c000be95:	50                   	push   eax
c000be96:	e8 b9 fe ff ff       	call   c000bd54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be9b:	58                   	pop    eax
c000be9c:	5a                   	pop    edx
c000be9d:	eb bd                	jmp    c000be5c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be9f:	6a 04                	push   0x4
c000bea1:	8d 45 01             	lea    eax,[ebp+0x1]
c000bea4:	55                   	push   ebp
c000bea5:	a3 04 80 02 c0       	mov    ds:0xc0028004,eax
c000beaa:	e8 a5 fe ff ff       	call   c000bd54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000beaf:	59                   	pop    ecx
c000beb0:	89 e8                	mov    eax,ebp
c000beb2:	5b                   	pop    ebx
c000beb3:	c1 e0 0c             	shl    eax,0xc
c000beb6:	83 c4 1c             	add    esp,0x1c
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	5f                   	pop    edi
c000bebc:	5d                   	pop    ebp
c000bebd:	c3                   	ret    

c000bebe <Virt::freeSwapfilePage(unsigned long)>:
c000bebe:	53                   	push   ebx
c000bebf:	8b 15 ec 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028cec
c000bec5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bec9:	b8 01 00 00 00       	mov    eax,0x1
c000bece:	89 cb                	mov    ebx,ecx
c000bed0:	d3 e0                	shl    eax,cl
c000bed2:	c1 eb 05             	shr    ebx,0x5
c000bed5:	f7 d0                	not    eax
c000bed7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000beda:	5b                   	pop    ebx
c000bedb:	c3                   	ret    

c000bedc <Virt::swapIDToSector(unsigned long)>:
c000bedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bee0:	0f af 05 0c 80 02 c0 	imul   eax,DWORD PTR ds:0xc002800c
c000bee7:	03 05 14 80 02 c0    	add    eax,DWORD PTR ds:0xc0028014
c000beed:	c3                   	ret    

c000beee <Virt::allocateSwapfilePage()>:
c000beee:	55                   	push   ebp
c000beef:	31 d2                	xor    edx,edx
c000bef1:	57                   	push   edi
c000bef2:	56                   	push   esi
c000bef3:	53                   	push   ebx
c000bef4:	83 ec 0c             	sub    esp,0xc
c000bef7:	8b 0d 0c 80 02 c0    	mov    ecx,DWORD PTR ds:0xc002800c
c000befd:	a1 10 80 02 c0       	mov    eax,ds:0xc0028010
c000bf02:	f7 f1                	div    ecx
c000bf04:	39 0d 10 80 02 c0    	cmp    DWORD PTR ds:0xc0028010,ecx
c000bf0a:	72 2d                	jb     c000bf39 <Virt::allocateSwapfilePage()+0x4b>
c000bf0c:	8b 35 ec 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028cec
c000bf12:	8b 16                	mov    edx,DWORD PTR [esi]
c000bf14:	f6 c2 01             	test   dl,0x1
c000bf17:	74 3c                	je     c000bf55 <Virt::allocateSwapfilePage()+0x67>
c000bf19:	31 c9                	xor    ecx,ecx
c000bf1b:	bf 01 00 00 00       	mov    edi,0x1
c000bf20:	eb 12                	jmp    c000bf34 <Virt::allocateSwapfilePage()+0x46>
c000bf22:	89 fd                	mov    ebp,edi
c000bf24:	89 ca                	mov    edx,ecx
c000bf26:	d3 e5                	shl    ebp,cl
c000bf28:	c1 ea 05             	shr    edx,0x5
c000bf2b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bf2e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bf30:	85 ea                	test   edx,ebp
c000bf32:	74 2a                	je     c000bf5e <Virt::allocateSwapfilePage()+0x70>
c000bf34:	41                   	inc    ecx
c000bf35:	39 c8                	cmp    eax,ecx
c000bf37:	77 e9                	ja     c000bf22 <Virt::allocateSwapfilePage()+0x34>
c000bf39:	83 ec 0c             	sub    esp,0xc
c000bf3c:	68 ac 4f 02 c0       	push   0xc0024fac
c000bf41:	e8 6f 92 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000bf46:	83 c4 10             	add    esp,0x10
c000bf49:	31 c9                	xor    ecx,ecx
c000bf4b:	83 c4 0c             	add    esp,0xc
c000bf4e:	89 c8                	mov    eax,ecx
c000bf50:	5b                   	pop    ebx
c000bf51:	5e                   	pop    esi
c000bf52:	5f                   	pop    edi
c000bf53:	5d                   	pop    ebp
c000bf54:	c3                   	ret    
c000bf55:	89 f3                	mov    ebx,esi
c000bf57:	bd 01 00 00 00       	mov    ebp,0x1
c000bf5c:	31 c9                	xor    ecx,ecx
c000bf5e:	09 ea                	or     edx,ebp
c000bf60:	89 c8                	mov    eax,ecx
c000bf62:	89 13                	mov    DWORD PTR [ebx],edx
c000bf64:	83 c4 0c             	add    esp,0xc
c000bf67:	5b                   	pop    ebx
c000bf68:	5e                   	pop    esi
c000bf69:	5f                   	pop    edi
c000bf6a:	5d                   	pop    ebp
c000bf6b:	c3                   	ret    

c000bf6c <Virt::virtualMemorySetup()>:
c000bf6c:	53                   	push   ebx
c000bf6d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bf72:	6a 0f                	push   0xf
c000bf74:	53                   	push   ebx
c000bf75:	43                   	inc    ebx
c000bf76:	e8 d9 fd ff ff       	call   c000bd54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf7b:	58                   	pop    eax
c000bf7c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf82:	5a                   	pop    edx
c000bf83:	75 ed                	jne    c000bf72 <Virt::virtualMemorySetup()+0x6>
c000bf85:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bf8a:	6a 00                	push   0x0
c000bf8c:	53                   	push   ebx
c000bf8d:	43                   	inc    ebx
c000bf8e:	e8 c1 fd ff ff       	call   c000bd54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf93:	59                   	pop    ecx
c000bf94:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf9a:	58                   	pop    eax
c000bf9b:	75 ed                	jne    c000bf8a <Virt::virtualMemorySetup()+0x1e>
c000bf9d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bfa2:	6a 0f                	push   0xf
c000bfa4:	53                   	push   ebx
c000bfa5:	43                   	inc    ebx
c000bfa6:	e8 a9 fd ff ff       	call   c000bd54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bfab:	58                   	pop    eax
c000bfac:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bfb2:	5a                   	pop    edx
c000bfb3:	75 ed                	jne    c000bfa2 <Virt::virtualMemorySetup()+0x36>
c000bfb5:	5b                   	pop    ebx
c000bfb6:	c3                   	ret    

c000bfb7 <Virt::setupPageSwapping(int)>:
c000bfb7:	53                   	push   ebx
c000bfb8:	83 ec 0c             	sub    esp,0xc
c000bfbb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bfbf:	a1 88 91 02 c0       	mov    eax,ds:0xc0029188
c000bfc4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bfca:	8b 10                	mov    edx,DWORD PTR [eax]
c000bfcc:	53                   	push   ebx
c000bfcd:	c1 e3 0b             	shl    ebx,0xb
c000bfd0:	68 c3 4f 02 c0       	push   0xc0024fc3
c000bfd5:	50                   	push   eax
c000bfd6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bfd9:	89 1d 10 80 02 c0    	mov    DWORD PTR ds:0xc0028010,ebx
c000bfdf:	c6 05 18 80 02 c0 43 	mov    BYTE PTR ds:0xc0028018,0x43
c000bfe6:	c1 eb 08             	shr    ebx,0x8
c000bfe9:	a3 14 80 02 c0       	mov    ds:0xc0028014,eax
c000bfee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bff1:	c7 05 0c 80 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002800c,0x8
c000bffb:	e8 e7 dd ff ff       	call   c0009de7 <malloc>
c000c000:	83 c4 0c             	add    esp,0xc
c000c003:	89 c1                	mov    ecx,eax
c000c005:	a3 ec 8c 02 c0       	mov    ds:0xc0028cec,eax
c000c00a:	31 d2                	xor    edx,edx
c000c00c:	a1 10 80 02 c0       	mov    eax,ds:0xc0028010
c000c011:	f7 35 0c 80 02 c0    	div    DWORD PTR ds:0xc002800c
c000c017:	c1 e8 05             	shr    eax,0x5
c000c01a:	50                   	push   eax
c000c01b:	6a 00                	push   0x0
c000c01d:	51                   	push   ecx
c000c01e:	e8 71 46 ff ff       	call   c0000694 <memset>
c000c023:	83 c4 18             	add    esp,0x18
c000c026:	5b                   	pop    ebx
c000c027:	c3                   	ret    

c000c028 <VAS::VAS()>:
c000c028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c02c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c033:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c037:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c03e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c042:	a3 f0 8c 02 c0       	mov    ds:0xc0028cf0,eax
c000c047:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c04b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000c04f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c053:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000c056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c05a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000c061:	90                   	nop
c000c062:	c3                   	ret    
c000c063:	90                   	nop

c000c064 <VAS::VAS(VAS*)>:
c000c064:	83 ec 0c             	sub    esp,0xc
c000c067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c06b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c076:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c07d:	83 ec 0c             	sub    esp,0xc
c000c080:	68 14 4e 02 c0       	push   0xc0024e14
c000c085:	e8 2b 91 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000c08a:	83 c4 10             	add    esp,0x10
c000c08d:	90                   	nop
c000c08e:	83 c4 0c             	add    esp,0xc
c000c091:	c3                   	ret    

c000c092 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000c092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c096:	89 c2                	mov    edx,eax
c000c098:	c1 e8 0a             	shr    eax,0xa
c000c09b:	c1 ea 16             	shr    edx,0x16
c000c09e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c0a3:	19 c9                	sbb    ecx,ecx
c000c0a5:	c1 e2 0c             	shl    edx,0xc
c000c0a8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000c0ae:	25 fc 0f 00 00       	and    eax,0xffc
c000c0b3:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000c0ba:	01 d0                	add    eax,edx
c000c0bc:	c3                   	ret    
c000c0bd:	90                   	nop

c000c0be <VAS::getPageTableEntry(unsigned long)>:
c000c0be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0c2:	89 ca                	mov    edx,ecx
c000c0c4:	c1 e9 0a             	shr    ecx,0xa
c000c0c7:	c1 ea 16             	shr    edx,0x16
c000c0ca:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000c0d0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000c0d6:	c1 e0 0c             	shl    eax,0xc
c000c0d9:	8d 04 08             	lea    eax,[eax+ecx*1]
c000c0dc:	c3                   	ret    

c000c0dd <Virt::freeKernelVirtualPages(unsigned long)>:
c000c0dd:	57                   	push   edi
c000c0de:	56                   	push   esi
c000c0df:	be 01 00 00 00       	mov    esi,0x1
c000c0e4:	53                   	push   ebx
c000c0e5:	83 ec 10             	sub    esp,0x10
c000c0e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c0ec:	c1 eb 0c             	shr    ebx,0xc
c000c0ef:	eb 3f                	jmp    c000c130 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000c0f1:	83 ec 08             	sub    esp,0x8
c000c0f4:	57                   	push   edi
c000c0f5:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c000c0fb:	e8 be ff ff ff       	call   c000c0be <VAS::getPageTableEntry(unsigned long)>
c000c100:	83 c4 10             	add    esp,0x10
c000c103:	8b 00                	mov    eax,DWORD PTR [eax]
c000c105:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c109:	f6 c4 04             	test   ah,0x4
c000c10c:	75 5f                	jne    c000c16d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000c10e:	80 fa 04             	cmp    dl,0x4
c000c111:	74 78                	je     c000c18b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000c113:	80 fa 02             	cmp    dl,0x2
c000c116:	0f 84 88 00 00 00    	je     c000c1a4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000c11c:	80 fa 03             	cmp    dl,0x3
c000c11f:	0f 84 ad 00 00 00    	je     c000c1d2 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000c125:	fe ca                	dec    dl
c000c127:	0f 84 92 00 00 00    	je     c000c1bf <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c12d:	43                   	inc    ebx
c000c12e:	31 f6                	xor    esi,esi
c000c130:	53                   	push   ebx
c000c131:	89 df                	mov    edi,ebx
c000c133:	e8 51 fc ff ff       	call   c000bd89 <Virt::getPageState(unsigned long)>
c000c138:	c1 e7 0c             	shl    edi,0xc
c000c13b:	59                   	pop    ecx
c000c13c:	84 c0                	test   al,al
c000c13e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c142:	75 ad                	jne    c000c0f1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c144:	83 ec 0c             	sub    esp,0xc
c000c147:	68 da 4f 02 c0       	push   0xc0024fda
c000c14c:	e8 64 90 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000c151:	58                   	pop    eax
c000c152:	5a                   	pop    edx
c000c153:	57                   	push   edi
c000c154:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c000c15a:	e8 5f ff ff ff       	call   c000c0be <VAS::getPageTableEntry(unsigned long)>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	8b 00                	mov    eax,DWORD PTR [eax]
c000c164:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c168:	f6 c4 04             	test   ah,0x4
c000c16b:	74 c0                	je     c000c12d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c16d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c171:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c176:	83 ec 0c             	sub    esp,0xc
c000c179:	50                   	push   eax
c000c17a:	e8 9c e2 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c17f:	83 c4 10             	add    esp,0x10
c000c182:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c186:	80 fa 04             	cmp    dl,0x4
c000c189:	75 88                	jne    c000c113 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c18b:	89 f0                	mov    eax,esi
c000c18d:	84 c0                	test   al,al
c000c18f:	75 47                	jne    c000c1d8 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c191:	c7 44 24 20 38 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024e38
c000c199:	83 c4 10             	add    esp,0x10
c000c19c:	5b                   	pop    ebx
c000c19d:	5e                   	pop    esi
c000c19e:	5f                   	pop    edi
c000c19f:	e9 11 90 00 00       	jmp    c00151b5 <Krnl::panic(char const*)>
c000c1a4:	89 f0                	mov    eax,esi
c000c1a6:	84 c0                	test   al,al
c000c1a8:	75 15                	jne    c000c1bf <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c1aa:	83 ec 0c             	sub    esp,0xc
c000c1ad:	68 f6 4f 02 c0       	push   0xc0024ff6
c000c1b2:	e8 fe 8f 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000c1b7:	83 c4 10             	add    esp,0x10
c000c1ba:	e9 6e ff ff ff       	jmp    c000c12d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c1bf:	83 ec 08             	sub    esp,0x8
c000c1c2:	6a 00                	push   0x0
c000c1c4:	53                   	push   ebx
c000c1c5:	e8 8a fb ff ff       	call   c000bd54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c1ca:	83 c4 10             	add    esp,0x10
c000c1cd:	e9 5b ff ff ff       	jmp    c000c12d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c1d2:	89 f0                	mov    eax,esi
c000c1d4:	84 c0                	test   al,al
c000c1d6:	75 15                	jne    c000c1ed <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c1d8:	83 ec 08             	sub    esp,0x8
c000c1db:	6a 00                	push   0x0
c000c1dd:	53                   	push   ebx
c000c1de:	e8 71 fb ff ff       	call   c000bd54 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c1e3:	83 c4 10             	add    esp,0x10
c000c1e6:	83 c4 10             	add    esp,0x10
c000c1e9:	5b                   	pop    ebx
c000c1ea:	5e                   	pop    esi
c000c1eb:	5f                   	pop    edi
c000c1ec:	c3                   	ret    
c000c1ed:	c7 44 24 20 12 50 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025012
c000c1f5:	83 c4 10             	add    esp,0x10
c000c1f8:	5b                   	pop    ebx
c000c1f9:	5e                   	pop    esi
c000c1fa:	5f                   	pop    edi
c000c1fb:	e9 b5 8f 00 00       	jmp    c00151b5 <Krnl::panic(char const*)>

c000c200 <VAS::freeAllocatedPages(unsigned long)>:
c000c200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c204:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c208:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c20c:	74 09                	je     c000c217 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c20e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c212:	e9 c6 fe ff ff       	jmp    c000c0dd <Virt::freeKernelVirtualPages(unsigned long)>
c000c217:	c7 44 24 04 5c 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024e5c
c000c21f:	e9 af 0e 00 00       	jmp    c000d0d3 <Dbg::kprintf(char const*, ...)>

c000c224 <VAS::virtualToPhysical(unsigned long)>:
c000c224:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c228:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c22c:	e8 8d fe ff ff       	call   c000c0be <VAS::getPageTableEntry(unsigned long)>
c000c231:	5a                   	pop    edx
c000c232:	8b 00                	mov    eax,DWORD PTR [eax]
c000c234:	59                   	pop    ecx
c000c235:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c23a:	c3                   	ret    
c000c23b:	90                   	nop

c000c23c <VAS::reflagRange(unsigned long, int, int, int)>:
c000c23c:	55                   	push   ebp
c000c23d:	57                   	push   edi
c000c23e:	56                   	push   esi
c000c23f:	53                   	push   ebx
c000c240:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c244:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c248:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c24c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c250:	85 db                	test   ebx,ebx
c000c252:	7e 22                	jle    c000c276 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c254:	c1 e3 0c             	shl    ebx,0xc
c000c257:	01 f3                	add    ebx,esi
c000c259:	56                   	push   esi
c000c25a:	81 c6 00 10 00 00    	add    esi,0x1000
c000c260:	55                   	push   ebp
c000c261:	e8 58 fe ff ff       	call   c000c0be <VAS::getPageTableEntry(unsigned long)>
c000c266:	5a                   	pop    edx
c000c267:	59                   	pop    ecx
c000c268:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c26a:	21 f9                	and    ecx,edi
c000c26c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c270:	39 f3                	cmp    ebx,esi
c000c272:	89 08                	mov    DWORD PTR [eax],ecx
c000c274:	75 e3                	jne    c000c259 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c276:	5b                   	pop    ebx
c000c277:	5e                   	pop    esi
c000c278:	5f                   	pop    edi
c000c279:	5d                   	pop    ebp
c000c27a:	c3                   	ret    
c000c27b:	90                   	nop

c000c27c <VAS::setToWriteCombining(unsigned long, int)>:
c000c27c:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000c281:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c287:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c28e:	75 01                	jne    c000c291 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c290:	c3                   	ret    
c000c291:	68 80 00 00 00       	push   0x80
c000c296:	6a ff                	push   0xffffffff
c000c298:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c29c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2a4:	e8 93 ff ff ff       	call   c000c23c <VAS::reflagRange(unsigned long, int, int, int)>
c000c2a9:	83 c4 14             	add    esp,0x14
c000c2ac:	c3                   	ret    
c000c2ad:	90                   	nop

c000c2ae <VAS::mapOtherVASIn(bool, VAS*)>:
c000c2ae:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c2b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c2b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c2ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2be:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c2c1:	19 c0                	sbb    eax,eax
c000c2c3:	83 ca 03             	or     edx,0x3
c000c2c6:	83 e0 fc             	and    eax,0xfffffffc
c000c2c9:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c2d0:	0f 20 d8             	mov    eax,cr3
c000c2d3:	0f 22 d8             	mov    cr3,eax
c000c2d6:	c3                   	ret    
c000c2d7:	90                   	nop

c000c2d8 <VAS::~VAS()>:
c000c2d8:	83 ec 2c             	sub    esp,0x2c
c000c2db:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c2e3:	fa                   	cli    
c000c2e4:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000c2e9:	40                   	inc    eax
c000c2ea:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000c2ef:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c2f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c2f9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c2ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c303:	6a 01                	push   0x1
c000c305:	50                   	push   eax
c000c306:	e8 a3 ff ff ff       	call   c000c2ae <VAS::mapOtherVASIn(bool, VAS*)>
c000c30b:	83 c4 0c             	add    esp,0xc
c000c30e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c316:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c31e:	0f 8f d4 00 00 00    	jg     c000c3f8 <VAS::~VAS()+0x120>
c000c324:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c328:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c32b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c32f:	c1 e2 02             	shl    edx,0x2
c000c332:	01 d0                	add    eax,edx
c000c334:	8b 00                	mov    eax,DWORD PTR [eax]
c000c336:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c33e:	83 e0 01             	and    eax,0x1
c000c341:	0f 84 a8 00 00 00    	je     c000c3ef <VAS::~VAS()+0x117>
c000c347:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c34f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c357:	7f 72                	jg     c000c3cb <VAS::~VAS()+0xf3>
c000c359:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c35d:	c1 e0 0a             	shl    eax,0xa
c000c360:	89 c2                	mov    edx,eax
c000c362:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c366:	01 d0                	add    eax,edx
c000c368:	c1 e0 0c             	shl    eax,0xc
c000c36b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c36f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c374:	8b 00                	mov    eax,DWORD PTR [eax]
c000c376:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c379:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c37f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c383:	6a 01                	push   0x1
c000c385:	50                   	push   eax
c000c386:	e8 07 fd ff ff       	call   c000c092 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c38b:	83 c4 0c             	add    esp,0xc
c000c38e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c392:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c396:	8b 00                	mov    eax,DWORD PTR [eax]
c000c398:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c39c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c3a0:	25 01 04 00 00       	and    eax,0x401
c000c3a5:	3d 01 04 00 00       	cmp    eax,0x401
c000c3aa:	75 19                	jne    c000c3c5 <VAS::~VAS()+0xed>
c000c3ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c3b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3b5:	83 ec 0c             	sub    esp,0xc
c000c3b8:	50                   	push   eax
c000c3b9:	e8 5d e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c3be:	83 c4 10             	add    esp,0x10
c000c3c1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c3c5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c3c9:	eb 84                	jmp    c000c34f <VAS::~VAS()+0x77>
c000c3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3cf:	25 00 04 00 00       	and    eax,0x400
c000c3d4:	74 19                	je     c000c3ef <VAS::~VAS()+0x117>
c000c3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3da:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3df:	83 ec 0c             	sub    esp,0xc
c000c3e2:	50                   	push   eax
c000c3e3:	e8 33 e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c3e8:	83 c4 10             	add    esp,0x10
c000c3eb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c3ef:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c3f3:	e9 1e ff ff ff       	jmp    c000c316 <VAS::~VAS()+0x3e>
c000c3f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3ff:	83 ec 0c             	sub    esp,0xc
c000c402:	50                   	push   eax
c000c403:	e8 d5 fc ff ff       	call   c000c0dd <Virt::freeKernelVirtualPages(unsigned long)>
c000c408:	83 c4 10             	add    esp,0x10
c000c40b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c40f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c412:	83 ec 0c             	sub    esp,0xc
c000c415:	50                   	push   eax
c000c416:	e8 00 e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c41b:	83 c4 10             	add    esp,0x10
c000c41e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c422:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c426:	c1 e0 02             	shl    eax,0x2
c000c429:	83 ec 08             	sub    esp,0x8
c000c42c:	50                   	push   eax
c000c42d:	68 80 4e 02 c0       	push   0xc0024e80
c000c432:	e8 9c 0c 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000c437:	83 c4 10             	add    esp,0x10
c000c43a:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000c43f:	48                   	dec    eax
c000c440:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000c445:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000c44a:	85 c0                	test   eax,eax
c000c44c:	75 01                	jne    c000c44f <VAS::~VAS()+0x177>
c000c44e:	fb                   	sti    
c000c44f:	90                   	nop
c000c450:	83 c4 2c             	add    esp,0x2c
c000c453:	c3                   	ret    

c000c454 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c454:	55                   	push   ebp
c000c455:	57                   	push   edi
c000c456:	56                   	push   esi
c000c457:	53                   	push   ebx
c000c458:	83 ec 1c             	sub    esp,0x1c
c000c45b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c45f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c463:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c469:	77 08                	ja     c000c473 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c46b:	0f 20 d8             	mov    eax,cr3
c000c46e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c471:	75 47                	jne    c000c4ba <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c473:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c477:	09 d8                	or     eax,ebx
c000c479:	a9 ff 0f 00 00       	test   eax,0xfff
c000c47e:	75 57                	jne    c000c4d7 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c480:	89 de                	mov    esi,ebx
c000c482:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c485:	c1 ee 16             	shr    esi,0x16
c000c488:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c48f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c493:	74 54                	je     c000c4e9 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c495:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c499:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c49f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c4a3:	c1 e6 0c             	shl    esi,0xc
c000c4a6:	c1 eb 0a             	shr    ebx,0xa
c000c4a9:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c4af:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c4b2:	83 c4 1c             	add    esp,0x1c
c000c4b5:	5b                   	pop    ebx
c000c4b6:	5e                   	pop    esi
c000c4b7:	5f                   	pop    edi
c000c4b8:	5d                   	pop    ebp
c000c4b9:	c3                   	ret    
c000c4ba:	83 ec 0c             	sub    esp,0xc
c000c4bd:	68 a0 4e 02 c0       	push   0xc0024ea0
c000c4c2:	e8 0c 0c 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000c4c7:	83 c4 10             	add    esp,0x10
c000c4ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c4ce:	09 d8                	or     eax,ebx
c000c4d0:	a9 ff 0f 00 00       	test   eax,0xfff
c000c4d5:	74 a9                	je     c000c480 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c4d7:	83 ec 0c             	sub    esp,0xc
c000c4da:	68 08 4f 02 c0       	push   0xc0024f08
c000c4df:	e8 d1 8c 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000c4e4:	83 c4 10             	add    esp,0x10
c000c4e7:	eb 97                	jmp    c000c480 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c4e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4ed:	e8 ac df ff ff       	call   c000a49e <Phys::allocatePage()>
c000c4f2:	83 ec 0c             	sub    esp,0xc
c000c4f5:	89 c5                	mov    ebp,eax
c000c4f7:	8b 0d f0 8c 02 c0    	mov    ecx,DWORD PTR ds:0xc0028cf0
c000c4fd:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c501:	6a 01                	push   0x1
c000c503:	e8 a5 f8 ff ff       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c000c508:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c50f:	6a 01                	push   0x1
c000c511:	50                   	push   eax
c000c512:	55                   	push   ebp
c000c513:	81 cd 07 04 00 00    	or     ebp,0x407
c000c519:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c51d:	51                   	push   ecx
c000c51e:	e8 27 02 00 00       	call   c000c74a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c523:	83 c4 1c             	add    esp,0x1c
c000c526:	68 00 10 00 00       	push   0x1000
c000c52b:	6a 00                	push   0x0
c000c52d:	50                   	push   eax
c000c52e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c532:	e8 5d 41 ff ff       	call   c0000694 <memset>
c000c537:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c53b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c53e:	e8 9a fb ff ff       	call   c000c0dd <Virt::freeKernelVirtualPages(unsigned long)>
c000c543:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c547:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c550:	e9 40 ff ff ff       	jmp    c000c495 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c555:	90                   	nop

c000c556 <VAS::allocatePages(int, int)>:
c000c556:	55                   	push   ebp
c000c557:	57                   	push   edi
c000c558:	56                   	push   esi
c000c559:	53                   	push   ebx
c000c55a:	83 ec 1c             	sub    esp,0x1c
c000c55d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c561:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000c566:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c56c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c572:	83 e0 01             	and    eax,0x1
c000c575:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c579:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c57d:	0f 85 cc 00 00 00    	jne    c000c64f <VAS::allocatePages(int, int)+0xf9>
c000c583:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c586:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c58a:	85 c0                	test   eax,eax
c000c58c:	0f 84 a1 00 00 00    	je     c000c633 <VAS::allocatePages(int, int)+0xdd>
c000c592:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c596:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c59a:	c1 e6 0c             	shl    esi,0xc
c000c59d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c5a1:	85 c0                	test   eax,eax
c000c5a3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c5a6:	7e 33                	jle    c000c5db <VAS::allocatePages(int, int)+0x85>
c000c5a8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c5ac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c5b0:	81 cd 00 04 00 00    	or     ebp,0x400
c000c5b6:	e8 e3 de ff ff       	call   c000a49e <Phys::allocatePage()>
c000c5bb:	55                   	push   ebp
c000c5bc:	53                   	push   ebx
c000c5bd:	50                   	push   eax
c000c5be:	57                   	push   edi
c000c5bf:	e8 90 fe ff ff       	call   c000c454 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c5c4:	83 c4 10             	add    esp,0x10
c000c5c7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c5cc:	74 03                	je     c000c5d1 <VAS::allocatePages(int, int)+0x7b>
c000c5ce:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c5d1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c5d7:	39 de                	cmp    esi,ebx
c000c5d9:	75 db                	jne    c000c5b6 <VAS::allocatePages(int, int)+0x60>
c000c5db:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c5e0:	75 12                	jne    c000c5f4 <VAS::allocatePages(int, int)+0x9e>
c000c5e2:	0f 20 d8             	mov    eax,cr3
c000c5e5:	0f 22 d8             	mov    cr3,eax
c000c5e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5ec:	83 c4 1c             	add    esp,0x1c
c000c5ef:	5b                   	pop    ebx
c000c5f0:	5e                   	pop    esi
c000c5f1:	5f                   	pop    edi
c000c5f2:	5d                   	pop    ebp
c000c5f3:	c3                   	ret    
c000c5f4:	c1 ee 0a             	shr    esi,0xa
c000c5f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c5fb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c601:	c1 eb 0a             	shr    ebx,0xa
c000c604:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c60a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c610:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c616:	39 c3                	cmp    ebx,eax
c000c618:	77 ce                	ja     c000c5e8 <VAS::allocatePages(int, int)+0x92>
c000c61a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c61d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c623:	39 d8                	cmp    eax,ebx
c000c625:	73 f3                	jae    c000c61a <VAS::allocatePages(int, int)+0xc4>
c000c627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c62b:	83 c4 1c             	add    esp,0x1c
c000c62e:	5b                   	pop    ebx
c000c62f:	5e                   	pop    esi
c000c630:	5f                   	pop    edi
c000c631:	5d                   	pop    ebp
c000c632:	c3                   	ret    
c000c633:	83 ec 0c             	sub    esp,0xc
c000c636:	68 2c 4f 02 c0       	push   0xc0024f2c
c000c63b:	e8 75 8b 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000c640:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c643:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c647:	83 c4 10             	add    esp,0x10
c000c64a:	e9 43 ff ff ff       	jmp    c000c592 <VAS::allocatePages(int, int)+0x3c>
c000c64f:	83 ec 0c             	sub    esp,0xc
c000c652:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c656:	e8 52 f7 ff ff       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c000c65b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c65f:	83 c4 10             	add    esp,0x10
c000c662:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c667:	0f 87 9b 00 00 00    	ja     c000c708 <VAS::allocatePages(int, int)+0x1b2>
c000c66d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c671:	85 d2                	test   edx,edx
c000c673:	7e 3c                	jle    c000c6b1 <VAS::allocatePages(int, int)+0x15b>
c000c675:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c679:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c67d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c681:	c1 e5 0c             	shl    ebp,0xc
c000c684:	81 ce 00 04 00 00    	or     esi,0x400
c000c68a:	01 dd                	add    ebp,ebx
c000c68c:	e8 0d de ff ff       	call   c000a49e <Phys::allocatePage()>
c000c691:	56                   	push   esi
c000c692:	53                   	push   ebx
c000c693:	50                   	push   eax
c000c694:	57                   	push   edi
c000c695:	e8 ba fd ff ff       	call   c000c454 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c69a:	83 c4 10             	add    esp,0x10
c000c69d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c6a2:	74 03                	je     c000c6a7 <VAS::allocatePages(int, int)+0x151>
c000c6a4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c6a7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c6ad:	39 dd                	cmp    ebp,ebx
c000c6af:	75 db                	jne    c000c68c <VAS::allocatePages(int, int)+0x136>
c000c6b1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c6b6:	0f 84 26 ff ff ff    	je     c000c5e2 <VAS::allocatePages(int, int)+0x8c>
c000c6bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c6c4:	89 d3                	mov    ebx,edx
c000c6c6:	c1 e0 0c             	shl    eax,0xc
c000c6c9:	c1 eb 0a             	shr    ebx,0xa
c000c6cc:	01 d0                	add    eax,edx
c000c6ce:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c6d4:	c1 e8 0a             	shr    eax,0xa
c000c6d7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c6dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6e2:	2d 00 00 40 00       	sub    eax,0x400000
c000c6e7:	39 c3                	cmp    ebx,eax
c000c6e9:	0f 87 f9 fe ff ff    	ja     c000c5e8 <VAS::allocatePages(int, int)+0x92>
c000c6ef:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c6f2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c6f8:	39 d8                	cmp    eax,ebx
c000c6fa:	73 f3                	jae    c000c6ef <VAS::allocatePages(int, int)+0x199>
c000c6fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c700:	83 c4 1c             	add    esp,0x1c
c000c703:	5b                   	pop    ebx
c000c704:	5e                   	pop    esi
c000c705:	5f                   	pop    edi
c000c706:	5d                   	pop    ebp
c000c707:	c3                   	ret    
c000c708:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000c70d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c713:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c71a:	0f 84 4d ff ff ff    	je     c000c66d <VAS::allocatePages(int, int)+0x117>
c000c720:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c728:	e9 40 ff ff ff       	jmp    c000c66d <VAS::allocatePages(int, int)+0x117>
c000c72d:	90                   	nop

c000c72e <VAS::setCPUSpecific(unsigned long)>:
c000c72e:	83 ec 0c             	sub    esp,0xc
c000c731:	6a 05                	push   0x5
c000c733:	68 00 00 40 c2       	push   0xc2400000
c000c738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c740:	e8 0f fd ff ff       	call   c000c454 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c745:	83 c4 1c             	add    esp,0x1c
c000c748:	c3                   	ret    
c000c749:	90                   	nop

c000c74a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c74a:	55                   	push   ebp
c000c74b:	57                   	push   edi
c000c74c:	56                   	push   esi
c000c74d:	53                   	push   ebx
c000c74e:	83 ec 1c             	sub    esp,0x1c
c000c751:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000c756:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c75a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c760:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c764:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c76a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c76e:	83 e0 01             	and    eax,0x1
c000c771:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c775:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c779:	85 c0                	test   eax,eax
c000c77b:	7e 39                	jle    c000c7b6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c77d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c781:	89 f3                	mov    ebx,esi
c000c783:	c1 e0 0c             	shl    eax,0xc
c000c786:	01 f0                	add    eax,esi
c000c788:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c78c:	55                   	push   ebp
c000c78d:	53                   	push   ebx
c000c78e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c792:	29 f0                	sub    eax,esi
c000c794:	01 d8                	add    eax,ebx
c000c796:	50                   	push   eax
c000c797:	57                   	push   edi
c000c798:	e8 b7 fc ff ff       	call   c000c454 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c79d:	83 c4 10             	add    esp,0x10
c000c7a0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c7a5:	74 03                	je     c000c7aa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c7a7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c7aa:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c7b0:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c7b4:	75 d6                	jne    c000c78c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c7b6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c7bb:	75 10                	jne    c000c7cd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c7bd:	0f 20 d8             	mov    eax,cr3
c000c7c0:	0f 22 d8             	mov    cr3,eax
c000c7c3:	83 c4 1c             	add    esp,0x1c
c000c7c6:	89 f0                	mov    eax,esi
c000c7c8:	5b                   	pop    ebx
c000c7c9:	5e                   	pop    esi
c000c7ca:	5f                   	pop    edi
c000c7cb:	5d                   	pop    ebp
c000c7cc:	c3                   	ret    
c000c7cd:	89 f3                	mov    ebx,esi
c000c7cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c7d3:	c1 eb 0a             	shr    ebx,0xa
c000c7d6:	c1 e0 0c             	shl    eax,0xc
c000c7d9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c7df:	01 f0                	add    eax,esi
c000c7e1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c7e7:	c1 e8 0a             	shr    eax,0xa
c000c7ea:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c7ef:	2d 00 00 40 00       	sub    eax,0x400000
c000c7f4:	39 c3                	cmp    ebx,eax
c000c7f6:	77 cb                	ja     c000c7c3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c7f8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c7fb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c801:	39 d8                	cmp    eax,ebx
c000c803:	73 f3                	jae    c000c7f8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c805:	83 c4 1c             	add    esp,0x1c
c000c808:	89 f0                	mov    eax,esi
c000c80a:	5b                   	pop    ebx
c000c80b:	5e                   	pop    esi
c000c80c:	5f                   	pop    edi
c000c80d:	5d                   	pop    ebp
c000c80e:	c3                   	ret    
c000c80f:	90                   	nop

c000c810 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c810:	55                   	push   ebp
c000c811:	57                   	push   edi
c000c812:	56                   	push   esi
c000c813:	53                   	push   ebx
c000c814:	83 ec 1c             	sub    esp,0x1c
c000c817:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c81b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c81f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c823:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c827:	a9 ff 0f 00 00       	test   eax,0xfff
c000c82c:	75 4a                	jne    c000c878 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c82e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c832:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c835:	c1 eb 16             	shr    ebx,0x16
c000c838:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c83f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c843:	74 4d                	je     c000c892 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c845:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c849:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c84d:	c1 e8 0a             	shr    eax,0xa
c000c850:	80 fa 01             	cmp    dl,0x1
c000c853:	19 d2                	sbb    edx,edx
c000c855:	c1 e3 0c             	shl    ebx,0xc
c000c858:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c85c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c862:	25 fc 0f 00 00       	and    eax,0xffc
c000c867:	01 d8                	add    eax,ebx
c000c869:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c870:	83 c4 1c             	add    esp,0x1c
c000c873:	5b                   	pop    ebx
c000c874:	5e                   	pop    esi
c000c875:	5f                   	pop    edi
c000c876:	5d                   	pop    ebp
c000c877:	c3                   	ret    
c000c878:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c87c:	83 ec 0c             	sub    esp,0xc
c000c87f:	68 58 4f 02 c0       	push   0xc0024f58
c000c884:	e8 2c 89 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000c889:	83 c4 10             	add    esp,0x10
c000c88c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c890:	eb 9c                	jmp    c000c82e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c892:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c896:	e8 03 dc ff ff       	call   c000a49e <Phys::allocatePage()>
c000c89b:	83 ec 0c             	sub    esp,0xc
c000c89e:	89 c5                	mov    ebp,eax
c000c8a0:	8b 0d f0 8c 02 c0    	mov    ecx,DWORD PTR ds:0xc0028cf0
c000c8a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c8aa:	6a 01                	push   0x1
c000c8ac:	e8 fc f4 ff ff       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c000c8b1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c8b8:	6a 01                	push   0x1
c000c8ba:	50                   	push   eax
c000c8bb:	55                   	push   ebp
c000c8bc:	81 cd 07 04 00 00    	or     ebp,0x407
c000c8c2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c8c6:	51                   	push   ecx
c000c8c7:	e8 7e fe ff ff       	call   c000c74a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8cc:	83 c4 1c             	add    esp,0x1c
c000c8cf:	68 00 10 00 00       	push   0x1000
c000c8d4:	6a 00                	push   0x0
c000c8d6:	50                   	push   eax
c000c8d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8db:	e8 b4 3d ff ff       	call   c0000694 <memset>
c000c8e0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c8e4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c8e7:	e8 f1 f7 ff ff       	call   c000c0dd <Virt::freeKernelVirtualPages(unsigned long)>
c000c8ec:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c8ef:	83 c4 10             	add    esp,0x10
c000c8f2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c8f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8f9:	e9 47 ff ff ff       	jmp    c000c845 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c8fe <VAS::VAS(bool)>:
c000c8fe:	53                   	push   ebx
c000c8ff:	83 ec 28             	sub    esp,0x28
c000c902:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c906:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c90a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c90e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c915:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c919:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c920:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c924:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c928:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c92b:	e8 6e db ff ff       	call   c000a49e <Phys::allocatePage()>
c000c930:	89 c2                	mov    edx,eax
c000c932:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c936:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c939:	8b 1d f0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf0
c000c93f:	83 ec 0c             	sub    esp,0xc
c000c942:	6a 01                	push   0x1
c000c944:	e8 64 f4 ff ff       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c000c949:	83 c4 10             	add    esp,0x10
c000c94c:	89 c2                	mov    edx,eax
c000c94e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c952:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c955:	83 ec 0c             	sub    esp,0xc
c000c958:	6a 03                	push   0x3
c000c95a:	6a 01                	push   0x1
c000c95c:	52                   	push   edx
c000c95d:	50                   	push   eax
c000c95e:	53                   	push   ebx
c000c95f:	e8 e6 fd ff ff       	call   c000c74a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c964:	83 c4 20             	add    esp,0x20
c000c967:	89 c2                	mov    edx,eax
c000c969:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c96d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c970:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c978:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c980:	7f 1c                	jg     c000c99e <VAS::VAS(bool)+0xa0>
c000c982:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c986:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c989:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c98d:	c1 e2 02             	shl    edx,0x2
c000c990:	01 d0                	add    eax,edx
c000c992:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c998:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c99c:	eb da                	jmp    c000c978 <VAS::VAS(bool)+0x7a>
c000c99e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c9a6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c9ae:	7f 7a                	jg     c000ca2a <VAS::VAS(bool)+0x12c>
c000c9b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c9b4:	2d 00 02 00 00       	sub    eax,0x200
c000c9b9:	c1 e0 0c             	shl    eax,0xc
c000c9bc:	83 c8 03             	or     eax,0x3
c000c9bf:	89 c2                	mov    edx,eax
c000c9c1:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000c9c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9cc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c9d2:	83 e0 10             	and    eax,0x10
c000c9d5:	84 c0                	test   al,al
c000c9d7:	74 07                	je     c000c9e0 <VAS::VAS(bool)+0xe2>
c000c9d9:	b8 00 01 00 00       	mov    eax,0x100
c000c9de:	eb 05                	jmp    c000c9e5 <VAS::VAS(bool)+0xe7>
c000c9e0:	b8 00 00 00 00       	mov    eax,0x0
c000c9e5:	09 d0                	or     eax,edx
c000c9e7:	89 c1                	mov    ecx,eax
c000c9e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c9f4:	c1 e2 02             	shl    edx,0x2
c000c9f7:	01 d0                	add    eax,edx
c000c9f9:	89 ca                	mov    edx,ecx
c000c9fb:	89 10                	mov    DWORD PTR [eax],edx
c000c9fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ca01:	2d 40 03 00 00       	sub    eax,0x340
c000ca06:	83 f8 7f             	cmp    eax,0x7f
c000ca09:	77 16                	ja     c000ca21 <VAS::VAS(bool)+0x123>
c000ca0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca0f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca12:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca16:	c1 e2 02             	shl    edx,0x2
c000ca19:	01 d0                	add    eax,edx
c000ca1b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ca21:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ca25:	e9 7c ff ff ff       	jmp    c000c9a6 <VAS::VAS(bool)+0xa8>
c000ca2a:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000ca2f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca35:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca3b:	83 e0 10             	and    eax,0x10
c000ca3e:	84 c0                	test   al,al
c000ca40:	74 07                	je     c000ca49 <VAS::VAS(bool)+0x14b>
c000ca42:	b8 03 41 00 00       	mov    eax,0x4103
c000ca47:	eb 05                	jmp    c000ca4e <VAS::VAS(bool)+0x150>
c000ca49:	b8 03 40 00 00       	mov    eax,0x4003
c000ca4e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ca52:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ca55:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ca5b:	89 02                	mov    DWORD PTR [edx],eax
c000ca5d:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000ca62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca68:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ca6e:	83 ec 08             	sub    esp,0x8
c000ca71:	50                   	push   eax
c000ca72:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca76:	e8 b3 fc ff ff       	call   c000c72e <VAS::setCPUSpecific(unsigned long)>
c000ca7b:	83 c4 10             	add    esp,0x10
c000ca7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca82:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000ca85:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000ca8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca90:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca96:	83 e0 10             	and    eax,0x10
c000ca99:	84 c0                	test   al,al
c000ca9b:	74 07                	je     c000caa4 <VAS::VAS(bool)+0x1a6>
c000ca9d:	b8 00 01 00 00       	mov    eax,0x100
c000caa2:	eb 05                	jmp    c000caa9 <VAS::VAS(bool)+0x1ab>
c000caa4:	b8 00 00 00 00       	mov    eax,0x0
c000caa9:	09 c2                	or     edx,eax
c000caab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000caaf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cab2:	05 fc 0f 00 00       	add    eax,0xffc
c000cab7:	83 ca 03             	or     edx,0x3
c000caba:	89 10                	mov    DWORD PTR [eax],edx
c000cabc:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000cac1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cac7:	83 ec 0c             	sub    esp,0xc
c000caca:	50                   	push   eax
c000cacb:	e8 76 1e 00 00       	call   c000e946 <Device::getName()>
c000cad0:	83 c4 10             	add    esp,0x10
c000cad3:	83 ec 08             	sub    esp,0x8
c000cad6:	68 2c 50 02 c0       	push   0xc002502c
c000cadb:	50                   	push   eax
c000cadc:	e8 fb 3c ff ff       	call   c00007dc <strcmp>
c000cae1:	83 c4 10             	add    esp,0x10
c000cae4:	85 c0                	test   eax,eax
c000cae6:	0f 94 c0             	sete   al
c000cae9:	84 c0                	test   al,al
c000caeb:	0f 84 87 00 00 00    	je     c000cb78 <VAS::VAS(bool)+0x27a>
c000caf1:	fa                   	cli    
c000caf2:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000caf7:	40                   	inc    eax
c000caf8:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000cafd:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000cb02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cb08:	05 7c 09 00 00       	add    eax,0x97c
c000cb0d:	83 ec 0c             	sub    esp,0xc
c000cb10:	50                   	push   eax
c000cb11:	e8 c0 cd ff ff       	call   c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000cb16:	83 c4 10             	add    esp,0x10
c000cb19:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cb1e:	89 c3                	mov    ebx,eax
c000cb20:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000cb25:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cb2b:	05 7c 09 00 00       	add    eax,0x97c
c000cb30:	83 ec 0c             	sub    esp,0xc
c000cb33:	50                   	push   eax
c000cb34:	e8 9d cd ff ff       	call   c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000cb39:	83 c4 10             	add    esp,0x10
c000cb3c:	83 ec 08             	sub    esp,0x8
c000cb3f:	50                   	push   eax
c000cb40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb44:	e8 75 f5 ff ff       	call   c000c0be <VAS::getPageTableEntry(unsigned long)>
c000cb49:	83 c4 10             	add    esp,0x10
c000cb4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb4e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cb53:	6a 11                	push   0x11
c000cb55:	53                   	push   ebx
c000cb56:	50                   	push   eax
c000cb57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb5b:	e8 f4 f8 ff ff       	call   c000c454 <VAS::mapPage(unsigned long, unsigned long, int)>
c000cb60:	83 c4 10             	add    esp,0x10
c000cb63:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000cb68:	48                   	dec    eax
c000cb69:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000cb6e:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000cb73:	85 c0                	test   eax,eax
c000cb75:	75 01                	jne    c000cb78 <VAS::VAS(bool)+0x27a>
c000cb77:	fb                   	sti    
c000cb78:	90                   	nop
c000cb79:	83 c4 28             	add    esp,0x28
c000cb7c:	5b                   	pop    ebx
c000cb7d:	c3                   	ret    

c000cb7e <VAS::evict(unsigned long)>:
c000cb7e:	55                   	push   ebp
c000cb7f:	57                   	push   edi
c000cb80:	56                   	push   esi
c000cb81:	53                   	push   ebx
c000cb82:	83 ec 1c             	sub    esp,0x1c
c000cb85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb89:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cb8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb91:	e8 58 f3 ff ff       	call   c000beee <Virt::allocateSwapfilePage()>
c000cb96:	89 c7                	mov    edi,eax
c000cb98:	a1 0c 80 02 c0       	mov    eax,ds:0xc002800c
c000cb9d:	85 c0                	test   eax,eax
c000cb9f:	7e 3d                	jle    c000cbde <VAS::evict(unsigned long)+0x60>
c000cba1:	89 ee                	mov    esi,ebp
c000cba3:	31 db                	xor    ebx,ebx
c000cba5:	83 ec 0c             	sub    esp,0xc
c000cba8:	57                   	push   edi
c000cba9:	e8 2e f3 ff ff       	call   c000bedc <Virt::swapIDToSector(unsigned long)>
c000cbae:	89 34 24             	mov    DWORD PTR [esp],esi
c000cbb1:	01 d8                	add    eax,ebx
c000cbb3:	6a 01                	push   0x1
c000cbb5:	31 d2                	xor    edx,edx
c000cbb7:	43                   	inc    ebx
c000cbb8:	52                   	push   edx
c000cbb9:	81 c6 00 02 00 00    	add    esi,0x200
c000cbbf:	50                   	push   eax
c000cbc0:	0f be 05 18 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028018
c000cbc7:	ff 34 85 7c 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f84]
c000cbce:	e8 ef 3e 00 00       	call   c0010ac2 <LogicalDisk::write(unsigned long long, int, void*)>
c000cbd3:	83 c4 20             	add    esp,0x20
c000cbd6:	39 1d 0c 80 02 c0    	cmp    DWORD PTR ds:0xc002800c,ebx
c000cbdc:	7f c7                	jg     c000cba5 <VAS::evict(unsigned long)+0x27>
c000cbde:	83 ec 08             	sub    esp,0x8
c000cbe1:	c1 e7 0b             	shl    edi,0xb
c000cbe4:	55                   	push   ebp
c000cbe5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbe9:	e8 d0 f4 ff ff       	call   c000c0be <VAS::getPageTableEntry(unsigned long)>
c000cbee:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbf0:	89 d3                	mov    ebx,edx
c000cbf2:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cbf8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cbfe:	09 d7                	or     edi,edx
c000cc00:	89 38                	mov    DWORD PTR [eax],edi
c000cc02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cc05:	ff 05 e8 8c 02 c0    	inc    DWORD PTR ds:0xc0028ce8
c000cc0b:	e8 0b d8 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000cc10:	0f 20 d8             	mov    eax,cr3
c000cc13:	0f 22 d8             	mov    cr3,eax
c000cc16:	ff 35 e8 8c 02 c0    	push   DWORD PTR ds:0xc0028ce8
c000cc1c:	55                   	push   ebp
c000cc1d:	53                   	push   ebx
c000cc1e:	68 7c 4f 02 c0       	push   0xc0024f7c
c000cc23:	e8 ab 04 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cc28:	a1 e4 8c 02 c0       	mov    eax,ds:0xc0028ce4
c000cc2d:	c7 44 24 50 3a 50 02 c0 	mov    DWORD PTR [esp+0x50],0xc002503a
c000cc35:	8d 50 01             	lea    edx,[eax+0x1]
c000cc38:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cc3c:	89 15 e4 8c 02 c0    	mov    DWORD PTR ds:0xc0028ce4,edx
c000cc42:	83 c4 3c             	add    esp,0x3c
c000cc45:	5b                   	pop    ebx
c000cc46:	5e                   	pop    esi
c000cc47:	5f                   	pop    edi
c000cc48:	5d                   	pop    ebp
c000cc49:	e9 85 04 00 00       	jmp    c000d0d3 <Dbg::kprintf(char const*, ...)>

c000cc4e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cc4e:	55                   	push   ebp
c000cc4f:	57                   	push   edi
c000cc50:	56                   	push   esi
c000cc51:	53                   	push   ebx
c000cc52:	83 ec 14             	sub    esp,0x14
c000cc55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc59:	68 4b 50 02 c0       	push   0xc002504b
c000cc5e:	e8 70 04 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cc63:	83 c4 10             	add    esp,0x10
c000cc66:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cc6a:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cc70:	74 20                	je     c000cc92 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cc72:	83 ec 08             	sub    esp,0x8
c000cc75:	55                   	push   ebp
c000cc76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc7a:	e8 3f f4 ff ff       	call   c000c0be <VAS::getPageTableEntry(unsigned long)>
c000cc7f:	83 c4 10             	add    esp,0x10
c000cc82:	89 c3                	mov    ebx,eax
c000cc84:	85 c0                	test   eax,eax
c000cc86:	74 0a                	je     c000cc92 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cc88:	8b 38                	mov    edi,DWORD PTR [eax]
c000cc8a:	f7 c7 01 00 00 00    	test   edi,0x1
c000cc90:	74 0a                	je     c000cc9c <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cc92:	31 c0                	xor    eax,eax
c000cc94:	83 c4 0c             	add    esp,0xc
c000cc97:	5b                   	pop    ebx
c000cc98:	5e                   	pop    esi
c000cc99:	5f                   	pop    edi
c000cc9a:	5d                   	pop    ebp
c000cc9b:	c3                   	ret    
c000cc9c:	e8 fd d7 ff ff       	call   c000a49e <Phys::allocatePage()>
c000cca1:	c1 ef 0b             	shr    edi,0xb
c000cca4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cca6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000ccac:	09 c2                	or     edx,eax
c000ccae:	81 ca 01 08 00 00    	or     edx,0x801
c000ccb4:	89 13                	mov    DWORD PTR [ebx],edx
c000ccb6:	8b 0d 0c 80 02 c0    	mov    ecx,DWORD PTR ds:0xc002800c
c000ccbc:	85 c9                	test   ecx,ecx
c000ccbe:	7e 3d                	jle    c000ccfd <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000ccc0:	89 ee                	mov    esi,ebp
c000ccc2:	31 db                	xor    ebx,ebx
c000ccc4:	83 ec 0c             	sub    esp,0xc
c000ccc7:	57                   	push   edi
c000ccc8:	e8 0f f2 ff ff       	call   c000bedc <Virt::swapIDToSector(unsigned long)>
c000cccd:	89 34 24             	mov    DWORD PTR [esp],esi
c000ccd0:	01 d8                	add    eax,ebx
c000ccd2:	6a 01                	push   0x1
c000ccd4:	31 d2                	xor    edx,edx
c000ccd6:	43                   	inc    ebx
c000ccd7:	52                   	push   edx
c000ccd8:	81 c6 00 02 00 00    	add    esi,0x200
c000ccde:	50                   	push   eax
c000ccdf:	0f be 05 18 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028018
c000cce6:	ff 34 85 7c 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f84]
c000cced:	e8 64 3d 00 00       	call   c0010a56 <LogicalDisk::read(unsigned long long, int, void*)>
c000ccf2:	83 c4 20             	add    esp,0x20
c000ccf5:	39 1d 0c 80 02 c0    	cmp    DWORD PTR ds:0xc002800c,ebx
c000ccfb:	7f c7                	jg     c000ccc4 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000ccfd:	a1 e8 8c 02 c0       	mov    eax,ds:0xc0028ce8
c000cd02:	48                   	dec    eax
c000cd03:	52                   	push   edx
c000cd04:	a3 e8 8c 02 c0       	mov    ds:0xc0028ce8,eax
c000cd09:	50                   	push   eax
c000cd0a:	55                   	push   ebp
c000cd0b:	68 5e 50 02 c0       	push   0xc002505e
c000cd10:	e8 be 03 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cd15:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd18:	e8 a1 f1 ff ff       	call   c000bebe <Virt::freeSwapfilePage(unsigned long)>
c000cd1d:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000cd22:	83 c4 10             	add    esp,0x10
c000cd25:	48                   	dec    eax
c000cd26:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000cd2b:	85 c0                	test   eax,eax
c000cd2d:	74 1d                	je     c000cd4c <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cd2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cd33:	25 ff 0f 00 00       	and    eax,0xfff
c000cd38:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cd3d:	77 10                	ja     c000cd4f <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000cd3f:	0f 20 d8             	mov    eax,cr3
c000cd42:	0f 22 d8             	mov    cr3,eax
c000cd45:	b0 01                	mov    al,0x1
c000cd47:	e9 48 ff ff ff       	jmp    c000cc94 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000cd4c:	fb                   	sti    
c000cd4d:	eb e0                	jmp    c000cd2f <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000cd4f:	83 ec 0c             	sub    esp,0xc
c000cd52:	68 73 50 02 c0       	push   0xc0025073
c000cd57:	e8 77 03 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cd5c:	83 c4 10             	add    esp,0x10
c000cd5f:	eb de                	jmp    c000cd3f <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cd61:	90                   	nop

c000cd62 <VAS::scanForEviction()>:
c000cd62:	57                   	push   edi
c000cd63:	31 ff                	xor    edi,edi
c000cd65:	56                   	push   esi
c000cd66:	53                   	push   ebx
c000cd67:	83 ec 10             	sub    esp,0x10
c000cd6a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd6e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cd71:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cd77:	75 0e                	jne    c000cd87 <VAS::scanForEviction()+0x25>
c000cd79:	89 da                	mov    edx,ebx
c000cd7b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cd7e:	c1 ea 16             	shr    edx,0x16
c000cd81:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cd85:	74 4e                	je     c000cdd5 <VAS::scanForEviction()+0x73>
c000cd87:	53                   	push   ebx
c000cd88:	56                   	push   esi
c000cd89:	e8 30 f3 ff ff       	call   c000c0be <VAS::getPageTableEntry(unsigned long)>
c000cd8e:	5a                   	pop    edx
c000cd8f:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd91:	59                   	pop    ecx
c000cd92:	89 d1                	mov    ecx,edx
c000cd94:	81 e1 01 08 00 00    	and    ecx,0x801
c000cd9a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cda0:	74 3e                	je     c000cde0 <VAS::scanForEviction()+0x7e>
c000cda2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cda8:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cdae:	76 2b                	jbe    c000cddb <VAS::scanForEviction()+0x79>
c000cdb0:	47                   	inc    edi
c000cdb1:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000cdb8:	83 ff 03             	cmp    edi,0x3
c000cdbb:	74 32                	je     c000cdef <VAS::scanForEviction()+0x8d>
c000cdbd:	31 db                	xor    ebx,ebx
c000cdbf:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cdc5:	75 c0                	jne    c000cd87 <VAS::scanForEviction()+0x25>
c000cdc7:	89 da                	mov    edx,ebx
c000cdc9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cdcc:	c1 ea 16             	shr    edx,0x16
c000cdcf:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cdd3:	75 b2                	jne    c000cd87 <VAS::scanForEviction()+0x25>
c000cdd5:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cddb:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000cdde:	eb 91                	jmp    c000cd71 <VAS::scanForEviction()+0xf>
c000cde0:	f6 c2 20             	test   dl,0x20
c000cde3:	74 13                	je     c000cdf8 <VAS::scanForEviction()+0x96>
c000cde5:	83 e2 df             	and    edx,0xffffffdf
c000cde8:	89 10                	mov    DWORD PTR [eax],edx
c000cdea:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cded:	eb b3                	jmp    c000cda2 <VAS::scanForEviction()+0x40>
c000cdef:	83 c4 10             	add    esp,0x10
c000cdf2:	31 c0                	xor    eax,eax
c000cdf4:	5b                   	pop    ebx
c000cdf5:	5e                   	pop    esi
c000cdf6:	5f                   	pop    edi
c000cdf7:	c3                   	ret    
c000cdf8:	83 ec 08             	sub    esp,0x8
c000cdfb:	89 d0                	mov    eax,edx
c000cdfd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ce02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ce06:	53                   	push   ebx
c000ce07:	68 83 50 02 c0       	push   0xc0025083
c000ce0c:	e8 c2 02 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000ce11:	58                   	pop    eax
c000ce12:	5a                   	pop    edx
c000ce13:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ce16:	56                   	push   esi
c000ce17:	e8 62 fd ff ff       	call   c000cb7e <VAS::evict(unsigned long)>
c000ce1c:	59                   	pop    ecx
c000ce1d:	5b                   	pop    ebx
c000ce1e:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ce21:	68 97 50 02 c0       	push   0xc0025097
c000ce26:	e8 a8 02 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000ce2b:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ce32:	83 c4 10             	add    esp,0x10
c000ce35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce39:	83 c4 10             	add    esp,0x10
c000ce3c:	5b                   	pop    ebx
c000ce3d:	5e                   	pop    esi
c000ce3e:	5f                   	pop    edi
c000ce3f:	c3                   	ret    

c000ce40 <mapVASFirstTime>:
c000ce40:	55                   	push   ebp
c000ce41:	57                   	push   edi
c000ce42:	56                   	push   esi
c000ce43:	53                   	push   ebx
c000ce44:	83 ec 0c             	sub    esp,0xc
c000ce47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ce4c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ce4f:	4a                   	dec    edx
c000ce50:	0f 84 fe 00 00 00    	je     c000cf54 <mapVASFirstTime+0x114>
c000ce56:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ce59:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ce5c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ce61:	c1 e5 15             	shl    ebp,0x15
c000ce64:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ce69:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ce6f:	29 eb                	sub    ebx,ebp
c000ce71:	29 ef                	sub    edi,ebp
c000ce73:	83 ec 08             	sub    esp,0x8
c000ce76:	53                   	push   ebx
c000ce77:	68 c3 50 02 c0       	push   0xc00250c3
c000ce7c:	e8 52 02 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000ce81:	e8 18 d6 ff ff       	call   c000a49e <Phys::allocatePage()>
c000ce86:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000ce8d:	6a 01                	push   0x1
c000ce8f:	53                   	push   ebx
c000ce90:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce96:	50                   	push   eax
c000ce97:	56                   	push   esi
c000ce98:	e8 ad f8 ff ff       	call   c000c74a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce9d:	83 c4 20             	add    esp,0x20
c000cea0:	39 fb                	cmp    ebx,edi
c000cea2:	75 cf                	jne    c000ce73 <mapVASFirstTime+0x33>
c000cea4:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cea9:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ceae:	29 eb                	sub    ebx,ebp
c000ceb0:	29 ef                	sub    edi,ebp
c000ceb2:	83 ec 08             	sub    esp,0x8
c000ceb5:	53                   	push   ebx
c000ceb6:	68 df 50 02 c0       	push   0xc00250df
c000cebb:	e8 13 02 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cec0:	58                   	pop    eax
c000cec1:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cec5:	5a                   	pop    edx
c000cec6:	19 c0                	sbb    eax,eax
c000cec8:	83 e0 04             	and    eax,0x4
c000cecb:	05 03 04 00 00       	add    eax,0x403
c000ced0:	50                   	push   eax
c000ced1:	68 f3 50 02 c0       	push   0xc00250f3
c000ced6:	e8 f8 01 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cedb:	e8 be d5 ff ff       	call   c000a49e <Phys::allocatePage()>
c000cee0:	59                   	pop    ecx
c000cee1:	89 c5                	mov    ebp,eax
c000cee3:	58                   	pop    eax
c000cee4:	55                   	push   ebp
c000cee5:	68 01 51 02 c0       	push   0xc0025101
c000ceea:	e8 e4 01 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000ceef:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cef3:	19 d2                	sbb    edx,edx
c000cef5:	83 e2 04             	and    edx,0x4
c000cef8:	81 c2 03 04 00 00    	add    edx,0x403
c000cefe:	89 14 24             	mov    DWORD PTR [esp],edx
c000cf01:	6a 01                	push   0x1
c000cf03:	53                   	push   ebx
c000cf04:	55                   	push   ebp
c000cf05:	56                   	push   esi
c000cf06:	e8 3f f8 ff ff       	call   c000c74a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cf0b:	83 c4 18             	add    esp,0x18
c000cf0e:	53                   	push   ebx
c000cf0f:	56                   	push   esi
c000cf10:	e8 a9 f1 ff ff       	call   c000c0be <VAS::getPageTableEntry(unsigned long)>
c000cf15:	5a                   	pop    edx
c000cf16:	59                   	pop    ecx
c000cf17:	ff 30                	push   DWORD PTR [eax]
c000cf19:	68 1d 51 02 c0       	push   0xc002511d
c000cf1e:	e8 b0 01 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cf23:	0f 20 d8             	mov    eax,cr3
c000cf26:	83 c4 0c             	add    esp,0xc
c000cf29:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cf2f:	56                   	push   esi
c000cf30:	50                   	push   eax
c000cf31:	68 28 51 02 c0       	push   0xc0025128
c000cf36:	e8 98 01 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cf3b:	83 c4 10             	add    esp,0x10
c000cf3e:	39 df                	cmp    edi,ebx
c000cf40:	0f 85 6c ff ff ff    	jne    c000ceb2 <mapVASFirstTime+0x72>
c000cf46:	0f 20 d8             	mov    eax,cr3
c000cf49:	0f 22 d8             	mov    cr3,eax
c000cf4c:	83 c4 0c             	add    esp,0xc
c000cf4f:	5b                   	pop    ebx
c000cf50:	5e                   	pop    esi
c000cf51:	5f                   	pop    edi
c000cf52:	5d                   	pop    ebp
c000cf53:	c3                   	ret    
c000cf54:	83 ec 0c             	sub    esp,0xc
c000cf57:	68 aa 50 02 c0       	push   0xc00250aa
c000cf5c:	e8 72 01 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	83 c4 0c             	add    esp,0xc
c000cf67:	5b                   	pop    ebx
c000cf68:	5e                   	pop    esi
c000cf69:	5f                   	pop    edi
c000cf6a:	5d                   	pop    ebp
c000cf6b:	c3                   	ret    

c000cf6c <__cxa_atexit>:
c000cf6c:	31 c0                	xor    eax,eax
c000cf6e:	c3                   	ret    

c000cf6f <__cxa_finalize>:
c000cf6f:	c3                   	ret    

c000cf70 <__stack_chk_fail>:
c000cf70:	55                   	push   ebp
c000cf71:	89 e5                	mov    ebp,esp
c000cf73:	83 ec 14             	sub    esp,0x14
c000cf76:	68 40 51 02 c0       	push   0xc0025140
c000cf7b:	e8 53 01 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cf80:	58                   	pop    eax
c000cf81:	5a                   	pop    edx
c000cf82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cf85:	68 90 51 02 c0       	push   0xc0025190
c000cf8a:	e8 44 01 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cf8f:	59                   	pop    ecx
c000cf90:	58                   	pop    eax
c000cf91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf94:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf97:	68 90 51 02 c0       	push   0xc0025190
c000cf9c:	e8 32 01 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cfa1:	5a                   	pop    edx
c000cfa2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cfa5:	59                   	pop    ecx
c000cfa6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfa8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cfab:	68 90 51 02 c0       	push   0xc0025190
c000cfb0:	e8 1e 01 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cfb5:	5a                   	pop    edx
c000cfb6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cfb9:	59                   	pop    ecx
c000cfba:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfbc:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfbe:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cfc1:	68 90 51 02 c0       	push   0xc0025190
c000cfc6:	e8 08 01 00 00       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000cfcb:	c7 04 24 98 51 02 c0 	mov    DWORD PTR [esp],0xc0025198
c000cfd2:	e8 de 81 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000cfd7:	83 c4 10             	add    esp,0x10
c000cfda:	c9                   	leave  
c000cfdb:	c3                   	ret    

c000cfdc <__cxa_pure_virtual>:
c000cfdc:	83 ec 18             	sub    esp,0x18
c000cfdf:	68 b0 51 02 c0       	push   0xc00251b0
c000cfe4:	e8 cc 81 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000cfe9:	83 c4 1c             	add    esp,0x1c
c000cfec:	c3                   	ret    

c000cfed <operator new[](unsigned long)>:
c000cfed:	e9 f5 cd ff ff       	jmp    c0009de7 <malloc>

c000cff2 <operator delete(void*, unsigned long)>:
c000cff2:	e9 10 ce ff ff       	jmp    c0009e07 <rfree>

c000cff7 <operator delete[](void*)>:
c000cff7:	e9 0b ce ff ff       	jmp    c0009e07 <rfree>

c000cffc <operator delete[](void*, unsigned long)>:
c000cffc:	e9 06 ce ff ff       	jmp    c0009e07 <rfree>

c000d001 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000d001:	55                   	push   ebp
c000d002:	b9 11 00 00 00       	mov    ecx,0x11
c000d007:	57                   	push   edi
c000d008:	56                   	push   esi
c000d009:	be 96 4c 02 c0       	mov    esi,0xc0024c96
c000d00e:	53                   	push   ebx
c000d00f:	83 ec 20             	sub    esp,0x20
c000d012:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d016:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d01a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d01e:	fc                   	cld    
c000d01f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d021:	89 ee                	mov    esi,ebp
c000d023:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d027:	eb 02                	jmp    c000d02b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000d029:	89 c6                	mov    esi,eax
c000d02b:	31 d2                	xor    edx,edx
c000d02d:	41                   	inc    ecx
c000d02e:	89 f0                	mov    eax,esi
c000d030:	f7 f3                	div    ebx
c000d032:	39 de                	cmp    esi,ebx
c000d034:	73 f3                	jae    c000d029 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000d036:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d039:	eb 02                	jmp    c000d03d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000d03b:	89 c5                	mov    ebp,eax
c000d03d:	31 d2                	xor    edx,edx
c000d03f:	49                   	dec    ecx
c000d040:	89 e8                	mov    eax,ebp
c000d042:	f7 f3                	div    ebx
c000d044:	39 dd                	cmp    ebp,ebx
c000d046:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000d04a:	88 11                	mov    BYTE PTR [ecx],dl
c000d04c:	73 ed                	jae    c000d03b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000d04e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d052:	83 c4 20             	add    esp,0x20
c000d055:	5b                   	pop    ebx
c000d056:	5e                   	pop    esi
c000d057:	5f                   	pop    edi
c000d058:	5d                   	pop    ebp
c000d059:	c3                   	ret    

c000d05a <Dbg::logc(char)>:
c000d05a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d05e:	f6 05 e0 8b 02 c0 10 	test   BYTE PTR ds:0xc0028be0,0x10
c000d065:	75 12                	jne    c000d079 <Dbg::logc(char)+0x1f>
c000d067:	ba fd 03 00 00       	mov    edx,0x3fd
c000d06c:	ec                   	in     al,dx
c000d06d:	a8 20                	test   al,0x20
c000d06f:	74 fb                	je     c000d06c <Dbg::logc(char)+0x12>
c000d071:	ba f8 03 00 00       	mov    edx,0x3f8
c000d076:	88 c8                	mov    al,cl
c000d078:	ee                   	out    dx,al
c000d079:	c3                   	ret    

c000d07a <Dbg::logs(char*)>:
c000d07a:	53                   	push   ebx
c000d07b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000d07f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d082:	84 c0                	test   al,al
c000d084:	74 0f                	je     c000d095 <Dbg::logs(char*)+0x1b>
c000d086:	50                   	push   eax
c000d087:	43                   	inc    ebx
c000d088:	e8 cd ff ff ff       	call   c000d05a <Dbg::logc(char)>
c000d08d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d090:	5a                   	pop    edx
c000d091:	84 c0                	test   al,al
c000d093:	75 f1                	jne    c000d086 <Dbg::logs(char*)+0xc>
c000d095:	5b                   	pop    ebx
c000d096:	c3                   	ret    

c000d097 <Dbg::logWriteInt(unsigned int)>:
c000d097:	83 ec 10             	sub    esp,0x10
c000d09a:	6a 0a                	push   0xa
c000d09c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d0a0:	50                   	push   eax
c000d0a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0a5:	e8 57 ff ff ff       	call   c000d001 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d0aa:	50                   	push   eax
c000d0ab:	e8 ca ff ff ff       	call   c000d07a <Dbg::logs(char*)>
c000d0b0:	83 c4 20             	add    esp,0x20
c000d0b3:	c3                   	ret    

c000d0b4 <Dbg::logWriteIntBase(unsigned int, int)>:
c000d0b4:	83 ec 10             	sub    esp,0x10
c000d0b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d0bb:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d0bf:	50                   	push   eax
c000d0c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0c4:	e8 38 ff ff ff       	call   c000d001 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d0c9:	50                   	push   eax
c000d0ca:	e8 ab ff ff ff       	call   c000d07a <Dbg::logs(char*)>
c000d0cf:	83 c4 20             	add    esp,0x20
c000d0d2:	c3                   	ret    

c000d0d3 <Dbg::kprintf(char const*, ...)>:
c000d0d3:	55                   	push   ebp
c000d0d4:	57                   	push   edi
c000d0d5:	56                   	push   esi
c000d0d6:	53                   	push   ebx
c000d0d7:	83 ec 0c             	sub    esp,0xc
c000d0da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d0de:	f6 05 e0 8b 02 c0 10 	test   BYTE PTR ds:0xc0028be0,0x10
c000d0e5:	74 08                	je     c000d0ef <Dbg::kprintf(char const*, ...)+0x1c>
c000d0e7:	83 c4 0c             	add    esp,0xc
c000d0ea:	5b                   	pop    ebx
c000d0eb:	5e                   	pop    esi
c000d0ec:	5f                   	pop    edi
c000d0ed:	5d                   	pop    ebp
c000d0ee:	c3                   	ret    
c000d0ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d0f3:	31 db                	xor    ebx,ebx
c000d0f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0f9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d0fc:	84 c0                	test   al,al
c000d0fe:	74 e7                	je     c000d0e7 <Dbg::kprintf(char const*, ...)+0x14>
c000d100:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d103:	3c 25                	cmp    al,0x25
c000d105:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d108:	75 44                	jne    c000d14e <Dbg::kprintf(char const*, ...)+0x7b>
c000d10a:	83 c3 02             	add    ebx,0x2
c000d10d:	8a 07                	mov    al,BYTE PTR [edi]
c000d10f:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d112:	83 e8 25             	sub    eax,0x25
c000d115:	3c 53                	cmp    al,0x53
c000d117:	0f 87 c9 00 00 00    	ja     c000d1e6 <Dbg::kprintf(char const*, ...)+0x113>
c000d11d:	0f b6 c0             	movzx  eax,al
c000d120:	ff 24 85 c4 51 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdae3c]
c000d127:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d12b:	89 c8                	mov    eax,ecx
c000d12d:	83 c1 04             	add    ecx,0x4
c000d130:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d134:	ff 30                	push   DWORD PTR [eax]
c000d136:	e8 5c ff ff ff       	call   c000d097 <Dbg::logWriteInt(unsigned int)>
c000d13b:	5f                   	pop    edi
c000d13c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d140:	84 c0                	test   al,al
c000d142:	74 a3                	je     c000d0e7 <Dbg::kprintf(char const*, ...)+0x14>
c000d144:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d147:	3c 25                	cmp    al,0x25
c000d149:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d14c:	74 bc                	je     c000d10a <Dbg::kprintf(char const*, ...)+0x37>
c000d14e:	50                   	push   eax
c000d14f:	89 eb                	mov    ebx,ebp
c000d151:	e8 04 ff ff ff       	call   c000d05a <Dbg::logc(char)>
c000d156:	89 fd                	mov    ebp,edi
c000d158:	58                   	pop    eax
c000d159:	eb e1                	jmp    c000d13c <Dbg::kprintf(char const*, ...)+0x69>
c000d15b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d15f:	89 c8                	mov    eax,ecx
c000d161:	83 c1 04             	add    ecx,0x4
c000d164:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d168:	ff 30                	push   DWORD PTR [eax]
c000d16a:	e8 0b ff ff ff       	call   c000d07a <Dbg::logs(char*)>
c000d16f:	58                   	pop    eax
c000d170:	eb ca                	jmp    c000d13c <Dbg::kprintf(char const*, ...)+0x69>
c000d172:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d176:	89 d0                	mov    eax,edx
c000d178:	83 c2 04             	add    edx,0x4
c000d17b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d17f:	ff 30                	push   DWORD PTR [eax]
c000d181:	e8 11 ff ff ff       	call   c000d097 <Dbg::logWriteInt(unsigned int)>
c000d186:	58                   	pop    eax
c000d187:	eb b3                	jmp    c000d13c <Dbg::kprintf(char const*, ...)+0x69>
c000d189:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d18d:	89 d0                	mov    eax,edx
c000d18f:	83 c2 04             	add    edx,0x4
c000d192:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d195:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d199:	50                   	push   eax
c000d19a:	e8 bb fe ff ff       	call   c000d05a <Dbg::logc(char)>
c000d19f:	58                   	pop    eax
c000d1a0:	eb 9a                	jmp    c000d13c <Dbg::kprintf(char const*, ...)+0x69>
c000d1a2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d1a6:	89 c8                	mov    eax,ecx
c000d1a8:	83 c1 04             	add    ecx,0x4
c000d1ab:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d1af:	6a 10                	push   0x10
c000d1b1:	ff 30                	push   DWORD PTR [eax]
c000d1b3:	e8 fc fe ff ff       	call   c000d0b4 <Dbg::logWriteIntBase(unsigned int, int)>
c000d1b8:	59                   	pop    ecx
c000d1b9:	5f                   	pop    edi
c000d1ba:	eb 80                	jmp    c000d13c <Dbg::kprintf(char const*, ...)+0x69>
c000d1bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1c0:	89 d0                	mov    eax,edx
c000d1c2:	83 c2 08             	add    edx,0x8
c000d1c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1c9:	6a 10                	push   0x10
c000d1cb:	ff 30                	push   DWORD PTR [eax]
c000d1cd:	e8 e2 fe ff ff       	call   c000d0b4 <Dbg::logWriteIntBase(unsigned int, int)>
c000d1d2:	58                   	pop    eax
c000d1d3:	5a                   	pop    edx
c000d1d4:	e9 63 ff ff ff       	jmp    c000d13c <Dbg::kprintf(char const*, ...)+0x69>
c000d1d9:	6a 25                	push   0x25
c000d1db:	e8 7a fe ff ff       	call   c000d05a <Dbg::logc(char)>
c000d1e0:	58                   	pop    eax
c000d1e1:	e9 56 ff ff ff       	jmp    c000d13c <Dbg::kprintf(char const*, ...)+0x69>
c000d1e6:	6a 25                	push   0x25
c000d1e8:	e8 6d fe ff ff       	call   c000d05a <Dbg::logc(char)>
c000d1ed:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d1f0:	50                   	push   eax
c000d1f1:	e8 64 fe ff ff       	call   c000d05a <Dbg::logc(char)>
c000d1f6:	5a                   	pop    edx
c000d1f7:	59                   	pop    ecx
c000d1f8:	e9 3f ff ff ff       	jmp    c000d13c <Dbg::kprintf(char const*, ...)+0x69>
c000d1fd:	90                   	nop

c000d1fe <File::read(unsigned long long, void*, int*)>:
c000d1fe:	53                   	push   ebx
c000d1ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d203:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d207:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d20e:	3c 19                	cmp    al,0x19
c000d210:	77 35                	ja     c000d247 <File::read(unsigned long long, void*, int*)+0x49>
c000d212:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000d219:	85 c0                	test   eax,eax
c000d21b:	74 2a                	je     c000d247 <File::read(unsigned long long, void*, int*)+0x49>
c000d21d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d223:	85 c0                	test   eax,eax
c000d225:	74 20                	je     c000d247 <File::read(unsigned long long, void*, int*)+0x49>
c000d227:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d22b:	74 21                	je     c000d24e <File::read(unsigned long long, void*, int*)+0x50>
c000d22d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d22f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d233:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d239:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d23d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d241:	5b                   	pop    ebx
c000d242:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d245:	ff e0                	jmp    eax
c000d247:	b8 0b 00 00 00       	mov    eax,0xb
c000d24c:	eb 05                	jmp    c000d253 <File::read(unsigned long long, void*, int*)+0x55>
c000d24e:	b8 05 00 00 00       	mov    eax,0x5
c000d253:	5b                   	pop    ebx
c000d254:	c3                   	ret    
c000d255:	90                   	nop

c000d256 <File::write(unsigned long long, void*, int*)>:
c000d256:	53                   	push   ebx
c000d257:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d25b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d25f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d266:	3c 19                	cmp    al,0x19
c000d268:	77 35                	ja     c000d29f <File::write(unsigned long long, void*, int*)+0x49>
c000d26a:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000d271:	85 c0                	test   eax,eax
c000d273:	74 2a                	je     c000d29f <File::write(unsigned long long, void*, int*)+0x49>
c000d275:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d27b:	85 c0                	test   eax,eax
c000d27d:	74 20                	je     c000d29f <File::write(unsigned long long, void*, int*)+0x49>
c000d27f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d283:	74 21                	je     c000d2a6 <File::write(unsigned long long, void*, int*)+0x50>
c000d285:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d287:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d28b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d291:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d295:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d299:	5b                   	pop    ebx
c000d29a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d29d:	ff e0                	jmp    eax
c000d29f:	b8 0b 00 00 00       	mov    eax,0xb
c000d2a4:	eb 05                	jmp    c000d2ab <File::write(unsigned long long, void*, int*)+0x55>
c000d2a6:	b8 05 00 00 00       	mov    eax,0x5
c000d2ab:	5b                   	pop    ebx
c000d2ac:	c3                   	ret    
c000d2ad:	90                   	nop

c000d2ae <Directory::read(unsigned long long, void*, int*)>:
c000d2ae:	53                   	push   ebx
c000d2af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d2b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d2b7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d2be:	3c 19                	cmp    al,0x19
c000d2c0:	77 35                	ja     c000d2f7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d2c2:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000d2c9:	85 c0                	test   eax,eax
c000d2cb:	74 2a                	je     c000d2f7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d2cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2d3:	85 c0                	test   eax,eax
c000d2d5:	74 20                	je     c000d2f7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d2d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2db:	74 21                	je     c000d2fe <Directory::read(unsigned long long, void*, int*)+0x50>
c000d2dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d2df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d2e3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d2e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2f1:	5b                   	pop    ebx
c000d2f2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d2f5:	ff e0                	jmp    eax
c000d2f7:	b8 0b 00 00 00       	mov    eax,0xb
c000d2fc:	eb 05                	jmp    c000d303 <Directory::read(unsigned long long, void*, int*)+0x55>
c000d2fe:	b8 05 00 00 00       	mov    eax,0x5
c000d303:	5b                   	pop    ebx
c000d304:	c3                   	ret    
c000d305:	90                   	nop

c000d306 <Directory::write(unsigned long long, void*, int*)>:
c000d306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d30a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d311:	b8 0b 00 00 00       	mov    eax,0xb
c000d316:	80 fa 19             	cmp    dl,0x19
c000d319:	77 18                	ja     c000d333 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d31b:	8b 14 95 80 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e80]
c000d322:	85 d2                	test   edx,edx
c000d324:	74 0d                	je     c000d333 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d326:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d32d:	19 c0                	sbb    eax,eax
c000d32f:	83 e0 0a             	and    eax,0xa
c000d332:	40                   	inc    eax
c000d333:	c3                   	ret    

c000d334 <File::isAtty()>:
c000d334:	31 c0                	xor    eax,eax
c000d336:	c3                   	ret    
c000d337:	90                   	nop

c000d338 <Directory::isAtty()>:
c000d338:	31 c0                	xor    eax,eax
c000d33a:	c3                   	ret    
c000d33b:	90                   	nop

c000d33c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d33c:	b8 0a 00 00 00       	mov    eax,0xa
c000d341:	c3                   	ret    

c000d342 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d342:	b8 0a 00 00 00       	mov    eax,0xa
c000d347:	c3                   	ret    

c000d348 <Filesystem::allocateSwapfile(char const*, int)>:
c000d348:	31 c0                	xor    eax,eax
c000d34a:	31 d2                	xor    edx,edx
c000d34c:	c3                   	ret    
c000d34d:	90                   	nop

c000d34e <File::~File()>:
c000d34e:	83 ec 0c             	sub    esp,0xc
c000d351:	ba 00 54 02 c0       	mov    edx,0xc0025400
c000d356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35a:	89 10                	mov    DWORD PTR [eax],edx
c000d35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d360:	83 ec 0c             	sub    esp,0xc
c000d363:	50                   	push   eax
c000d364:	e8 e3 e7 ff ff       	call   c000bb4c <UnixFile::~UnixFile()>
c000d369:	83 c4 10             	add    esp,0x10
c000d36c:	90                   	nop
c000d36d:	83 c4 0c             	add    esp,0xc
c000d370:	c3                   	ret    
c000d371:	90                   	nop

c000d372 <File::~File()>:
c000d372:	83 ec 0c             	sub    esp,0xc
c000d375:	83 ec 0c             	sub    esp,0xc
c000d378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37c:	e8 cd ff ff ff       	call   c000d34e <File::~File()>
c000d381:	83 c4 10             	add    esp,0x10
c000d384:	83 ec 08             	sub    esp,0x8
c000d387:	68 14 01 00 00       	push   0x114
c000d38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d390:	e8 5d fc ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c000d395:	83 c4 10             	add    esp,0x10
c000d398:	83 c4 0c             	add    esp,0xc
c000d39b:	c3                   	ret    

c000d39c <Directory::~Directory()>:
c000d39c:	83 ec 0c             	sub    esp,0xc
c000d39f:	ba 1c 54 02 c0       	mov    edx,0xc002541c
c000d3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a8:	89 10                	mov    DWORD PTR [eax],edx
c000d3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ae:	83 ec 0c             	sub    esp,0xc
c000d3b1:	50                   	push   eax
c000d3b2:	e8 95 e7 ff ff       	call   c000bb4c <UnixFile::~UnixFile()>
c000d3b7:	83 c4 10             	add    esp,0x10
c000d3ba:	90                   	nop
c000d3bb:	83 c4 0c             	add    esp,0xc
c000d3be:	c3                   	ret    
c000d3bf:	90                   	nop

c000d3c0 <Directory::~Directory()>:
c000d3c0:	83 ec 0c             	sub    esp,0xc
c000d3c3:	83 ec 0c             	sub    esp,0xc
c000d3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ca:	e8 cd ff ff ff       	call   c000d39c <Directory::~Directory()>
c000d3cf:	83 c4 10             	add    esp,0x10
c000d3d2:	83 ec 08             	sub    esp,0x8
c000d3d5:	68 14 01 00 00       	push   0x114
c000d3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3de:	e8 0f fc ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c000d3e3:	83 c4 10             	add    esp,0x10
c000d3e6:	83 c4 0c             	add    esp,0xc
c000d3e9:	c3                   	ret    

c000d3ea <Filesystem::Filesystem()>:
c000d3ea:	ba 98 53 02 c0       	mov    edx,0xc0025398
c000d3ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3f3:	89 10                	mov    DWORD PTR [eax],edx
c000d3f5:	8b 15 f4 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028cf4
c000d3fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d406:	a3 f4 8c 02 c0       	mov    ds:0xc0028cf4,eax
c000d40b:	90                   	nop
c000d40c:	c3                   	ret    
c000d40d:	90                   	nop

c000d40e <Filesystem::~Filesystem()>:
c000d40e:	ba 98 53 02 c0       	mov    edx,0xc0025398
c000d413:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d417:	89 10                	mov    DWORD PTR [eax],edx
c000d419:	90                   	nop
c000d41a:	c3                   	ret    
c000d41b:	90                   	nop

c000d41c <Filesystem::~Filesystem()>:
c000d41c:	83 ec 0c             	sub    esp,0xc
c000d41f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d423:	e8 e6 ff ff ff       	call   c000d40e <Filesystem::~Filesystem()>
c000d428:	83 c4 04             	add    esp,0x4
c000d42b:	83 ec 08             	sub    esp,0x8
c000d42e:	6a 08                	push   0x8
c000d430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d434:	e8 b9 fb ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c000d439:	83 c4 10             	add    esp,0x10
c000d43c:	83 c4 0c             	add    esp,0xc
c000d43f:	c3                   	ret    

c000d440 <Fs::getcwd(Process*, char*, int)>:
c000d440:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d444:	31 c0                	xor    eax,eax
c000d446:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d449:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d44d:	7d 15                	jge    c000d464 <Fs::getcwd(Process*, char*, int)+0x24>
c000d44f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d453:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d45a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d45d:	84 c9                	test   cl,cl
c000d45f:	74 06                	je     c000d467 <Fs::getcwd(Process*, char*, int)+0x27>
c000d461:	40                   	inc    eax
c000d462:	eb e2                	jmp    c000d446 <Fs::getcwd(Process*, char*, int)+0x6>
c000d464:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d467:	31 c0                	xor    eax,eax
c000d469:	c3                   	ret    

c000d46a <Fs::initVFS()>:
c000d46a:	83 ec 18             	sub    esp,0x18
c000d46d:	6a 08                	push   0x8
c000d46f:	e8 73 c9 ff ff       	call   c0009de7 <malloc>
c000d474:	89 04 24             	mov    DWORD PTR [esp],eax
c000d477:	e8 bc ed 00 00       	call   c001c238 <FAT::FAT()>
c000d47c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d483:	e8 5f c9 ff ff       	call   c0009de7 <malloc>
c000d488:	89 04 24             	mov    DWORD PTR [esp],eax
c000d48b:	e8 38 00 01 00       	call   c001d4c8 <ISO9660::ISO9660()>
c000d490:	83 c4 1c             	add    esp,0x1c
c000d493:	c3                   	ret    

c000d494 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d494:	55                   	push   ebp
c000d495:	57                   	push   edi
c000d496:	56                   	push   esi
c000d497:	53                   	push   ebx
c000d498:	81 ec 10 04 00 00    	sub    esp,0x410
c000d49e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d4a5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d4ac:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d4b3:	68 00 04 00 00       	push   0x400
c000d4b8:	6a 00                	push   0x0
c000d4ba:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d4be:	56                   	push   esi
c000d4bf:	e8 d0 31 ff ff       	call   c0000694 <memset>
c000d4c4:	83 c4 10             	add    esp,0x10
c000d4c7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d4cb:	75 0b                	jne    c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d4cd:	50                   	push   eax
c000d4ce:	50                   	push   eax
c000d4cf:	57                   	push   edi
c000d4d0:	56                   	push   esi
c000d4d1:	e8 7a 32 ff ff       	call   c0000750 <strcpy>
c000d4d6:	eb 41                	jmp    c000d519 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d4d8:	8a 07                	mov    al,BYTE PTR [edi]
c000d4da:	3c 5c                	cmp    al,0x5c
c000d4dc:	74 04                	je     c000d4e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d4de:	3c 2f                	cmp    al,0x2f
c000d4e0:	75 18                	jne    c000d4fa <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d4e2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d4e5:	3c 60                	cmp    al,0x60
c000d4e7:	7e 03                	jle    c000d4ec <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d4e9:	83 e8 20             	sub    eax,0x20
c000d4ec:	88 04 24             	mov    BYTE PTR [esp],al
c000d4ef:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d4f6:	50                   	push   eax
c000d4f7:	50                   	push   eax
c000d4f8:	eb 18                	jmp    c000d512 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d4fa:	50                   	push   eax
c000d4fb:	50                   	push   eax
c000d4fc:	55                   	push   ebp
c000d4fd:	56                   	push   esi
c000d4fe:	e8 4d 32 ff ff       	call   c0000750 <strcpy>
c000d503:	5a                   	pop    edx
c000d504:	59                   	pop    ecx
c000d505:	68 ca 6c 02 c0       	push   0xc0026cca
c000d50a:	56                   	push   esi
c000d50b:	e8 80 33 ff ff       	call   c0000890 <strcat>
c000d510:	5d                   	pop    ebp
c000d511:	58                   	pop    eax
c000d512:	57                   	push   edi
c000d513:	56                   	push   esi
c000d514:	e8 77 33 ff ff       	call   c0000890 <strcat>
c000d519:	83 c4 10             	add    esp,0x10
c000d51c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d51f:	3c 60                	cmp    al,0x60
c000d521:	7e 03                	jle    c000d526 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d523:	83 e8 20             	sub    eax,0x20
c000d526:	88 04 24             	mov    BYTE PTR [esp],al
c000d529:	88 03                	mov    BYTE PTR [ebx],al
c000d52b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d532:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d538:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d53c:	bf 03 00 00 00       	mov    edi,0x3
c000d541:	b8 03 00 00 00       	mov    eax,0x3
c000d546:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d549:	84 d2                	test   dl,dl
c000d54b:	0f 84 91 00 00 00    	je     c000d5e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d551:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d554:	80 fa 5c             	cmp    dl,0x5c
c000d557:	74 05                	je     c000d55e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d559:	80 fa 2f             	cmp    dl,0x2f
c000d55c:	75 12                	jne    c000d570 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d55e:	89 c5                	mov    ebp,eax
c000d560:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d565:	74 09                	je     c000d570 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d567:	40                   	inc    eax
c000d568:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d56c:	89 cf                	mov    edi,ecx
c000d56e:	eb d6                	jmp    c000d546 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d570:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d575:	75 5b                	jne    c000d5d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d577:	80 fa 2e             	cmp    dl,0x2e
c000d57a:	75 56                	jne    c000d5d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d57c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d580:	74 19                	je     c000d59b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d582:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d587:	74 53                	je     c000d5dc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d589:	89 f9                	mov    ecx,edi
c000d58b:	41                   	inc    ecx
c000d58c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d58f:	80 fa 2f             	cmp    dl,0x2f
c000d592:	74 f7                	je     c000d58b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d594:	80 fa 5c             	cmp    dl,0x5c
c000d597:	74 f2                	je     c000d58b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d599:	eb d1                	jmp    c000d56c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d59b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d5a0:	74 3a                	je     c000d5dc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d5a2:	83 f8 03             	cmp    eax,0x3
c000d5a5:	74 c5                	je     c000d56c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5a7:	41                   	inc    ecx
c000d5a8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d5ab:	80 fa 2f             	cmp    dl,0x2f
c000d5ae:	74 f7                	je     c000d5a7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d5b0:	80 fa 5c             	cmp    dl,0x5c
c000d5b3:	74 f2                	je     c000d5a7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d5b5:	48                   	dec    eax
c000d5b6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d5ba:	75 06                	jne    c000d5c2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d5bc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d5c0:	eb f3                	jmp    c000d5b5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d5c2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d5c6:	74 07                	je     c000d5cf <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d5c8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d5cc:	48                   	dec    eax
c000d5cd:	eb f3                	jmp    c000d5c2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d5cf:	40                   	inc    eax
c000d5d0:	eb 9a                	jmp    c000d56c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5d2:	80 fa 2f             	cmp    dl,0x2f
c000d5d5:	74 95                	je     c000d56c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5d7:	80 fa 5c             	cmp    dl,0x5c
c000d5da:	74 90                	je     c000d56c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5dc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d5df:	40                   	inc    eax
c000d5e0:	eb 8a                	jmp    c000d56c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5e2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d5e6:	83 ec 0c             	sub    esp,0xc
c000d5e9:	53                   	push   ebx
c000d5ea:	e8 c1 30 ff ff       	call   c00006b0 <strlen>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d5f7:	75 26                	jne    c000d61f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d5f9:	83 ec 0c             	sub    esp,0xc
c000d5fc:	53                   	push   ebx
c000d5fd:	e8 ae 30 ff ff       	call   c00006b0 <strlen>
c000d602:	83 c4 10             	add    esp,0x10
c000d605:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d60a:	74 26                	je     c000d632 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d60c:	83 ec 0c             	sub    esp,0xc
c000d60f:	53                   	push   ebx
c000d610:	e8 9b 30 ff ff       	call   c00006b0 <strlen>
c000d615:	83 c4 10             	add    esp,0x10
c000d618:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d61d:	eb c7                	jmp    c000d5e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d61f:	83 ec 0c             	sub    esp,0xc
c000d622:	53                   	push   ebx
c000d623:	e8 88 30 ff ff       	call   c00006b0 <strlen>
c000d628:	83 c4 10             	add    esp,0x10
c000d62b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d630:	74 c7                	je     c000d5f9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d632:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d638:	5b                   	pop    ebx
c000d639:	5e                   	pop    esi
c000d63a:	5f                   	pop    edi
c000d63b:	5d                   	pop    ebp
c000d63c:	c3                   	ret    
c000d63d:	90                   	nop

c000d63e <File::File(char const*, Process*)>:
c000d63e:	83 ec 0c             	sub    esp,0xc
c000d641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d645:	83 ec 08             	sub    esp,0x8
c000d648:	6a 00                	push   0x0
c000d64a:	50                   	push   eax
c000d64b:	e8 1a e3 ff ff       	call   c000b96a <UnixFile::UnixFile(int)>
c000d650:	83 c4 10             	add    esp,0x10
c000d653:	ba 00 54 02 c0       	mov    edx,0xc0025400
c000d658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d65c:	89 10                	mov    DWORD PTR [eax],edx
c000d65e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d662:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d66c:	83 c0 0d             	add    eax,0xd
c000d66f:	83 ec 04             	sub    esp,0x4
c000d672:	52                   	push   edx
c000d673:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d677:	50                   	push   eax
c000d678:	e8 17 fe ff ff       	call   c000d494 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d67d:	83 c4 10             	add    esp,0x10
c000d680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d684:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d687:	8d 50 bf             	lea    edx,[eax-0x41]
c000d68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d698:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d6a6:	0f b6 c0             	movzx  eax,al
c000d6a9:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000d6b0:	85 c0                	test   eax,eax
c000d6b2:	74 5e                	je     c000d712 <File::File(char const*, Process*)+0xd4>
c000d6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d6be:	0f b6 c0             	movzx  eax,al
c000d6c1:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000d6c8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d6ce:	85 c0                	test   eax,eax
c000d6d0:	75 40                	jne    c000d712 <File::File(char const*, Process*)+0xd4>
c000d6d2:	83 ec 0c             	sub    esp,0xc
c000d6d5:	68 3c 53 02 c0       	push   0xc002533c
c000d6da:	e8 f4 f9 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000d6df:	83 c4 10             	add    esp,0x10
c000d6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d6ec:	0f b6 c0             	movzx  eax,al
c000d6ef:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000d6f6:	83 ec 0c             	sub    esp,0xc
c000d6f9:	50                   	push   eax
c000d6fa:	e8 55 32 00 00       	call   c0010954 <LogicalDisk::mount()>
c000d6ff:	83 c4 10             	add    esp,0x10
c000d702:	83 ec 0c             	sub    esp,0xc
c000d705:	68 fb 76 02 c0       	push   0xc00276fb
c000d70a:	e8 c4 f9 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	90                   	nop
c000d713:	83 c4 0c             	add    esp,0xc
c000d716:	c3                   	ret    
c000d717:	90                   	nop

c000d718 <File::open(FileOpenMode)>:
c000d718:	53                   	push   ebx
c000d719:	b8 0b 00 00 00       	mov    eax,0xb
c000d71e:	83 ec 08             	sub    esp,0x8
c000d721:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d725:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d72c:	80 fa 19             	cmp    dl,0x19
c000d72f:	77 40                	ja     c000d771 <File::open(FileOpenMode)+0x59>
c000d731:	8b 14 95 80 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e80]
c000d738:	85 d2                	test   edx,edx
c000d73a:	74 35                	je     c000d771 <File::open(FileOpenMode)+0x59>
c000d73c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d742:	85 d2                	test   edx,edx
c000d744:	74 2b                	je     c000d771 <File::open(FileOpenMode)+0x59>
c000d746:	b8 06 00 00 00       	mov    eax,0x6
c000d74b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d74f:	75 20                	jne    c000d771 <File::open(FileOpenMode)+0x59>
c000d751:	8b 02                	mov    eax,DWORD PTR [edx]
c000d753:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d759:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75d:	51                   	push   ecx
c000d75e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d761:	51                   	push   ecx
c000d762:	52                   	push   edx
c000d763:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d766:	83 c4 10             	add    esp,0x10
c000d769:	85 c0                	test   eax,eax
c000d76b:	75 04                	jne    c000d771 <File::open(FileOpenMode)+0x59>
c000d76d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d771:	83 c4 08             	add    esp,0x8
c000d774:	5b                   	pop    ebx
c000d775:	c3                   	ret    

c000d776 <File::close()>:
c000d776:	53                   	push   ebx
c000d777:	b8 0b 00 00 00       	mov    eax,0xb
c000d77c:	83 ec 08             	sub    esp,0x8
c000d77f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d783:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d78a:	80 fa 19             	cmp    dl,0x19
c000d78d:	77 41                	ja     c000d7d0 <File::close()+0x5a>
c000d78f:	8b 1c 95 80 91 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6e80]
c000d796:	85 db                	test   ebx,ebx
c000d798:	74 36                	je     c000d7d0 <File::close()+0x5a>
c000d79a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d7a1:	74 2d                	je     c000d7d0 <File::close()+0x5a>
c000d7a3:	b8 05 00 00 00       	mov    eax,0x5
c000d7a8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7ac:	74 22                	je     c000d7d0 <File::close()+0x5a>
c000d7ae:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d7b2:	8b 04 95 80 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e80]
c000d7b9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d7bf:	53                   	push   ebx
c000d7c0:	53                   	push   ebx
c000d7c1:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7c3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d7c9:	50                   	push   eax
c000d7ca:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d7cd:	83 c4 10             	add    esp,0x10
c000d7d0:	83 c4 08             	add    esp,0x8
c000d7d3:	5b                   	pop    ebx
c000d7d4:	c3                   	ret    
c000d7d5:	90                   	nop

c000d7d6 <File::seek(unsigned long long)>:
c000d7d6:	56                   	push   esi
c000d7d7:	53                   	push   ebx
c000d7d8:	b8 0b 00 00 00       	mov    eax,0xb
c000d7dd:	51                   	push   ecx
c000d7de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d7e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d7e6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d7ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d7f1:	80 fa 19             	cmp    dl,0x19
c000d7f4:	77 31                	ja     c000d827 <File::seek(unsigned long long)+0x51>
c000d7f6:	8b 14 95 80 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e80]
c000d7fd:	85 d2                	test   edx,edx
c000d7ff:	74 26                	je     c000d827 <File::seek(unsigned long long)+0x51>
c000d801:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d807:	85 d2                	test   edx,edx
c000d809:	74 1c                	je     c000d827 <File::seek(unsigned long long)+0x51>
c000d80b:	b8 05 00 00 00       	mov    eax,0x5
c000d810:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d814:	74 11                	je     c000d827 <File::seek(unsigned long long)+0x51>
c000d816:	8b 02                	mov    eax,DWORD PTR [edx]
c000d818:	53                   	push   ebx
c000d819:	51                   	push   ecx
c000d81a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d820:	52                   	push   edx
c000d821:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d824:	83 c4 10             	add    esp,0x10
c000d827:	5a                   	pop    edx
c000d828:	5b                   	pop    ebx
c000d829:	5e                   	pop    esi
c000d82a:	c3                   	ret    
c000d82b:	90                   	nop

c000d82c <File::tell(unsigned long long*)>:
c000d82c:	83 ec 0c             	sub    esp,0xc
c000d82f:	b8 0b 00 00 00       	mov    eax,0xb
c000d834:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d838:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d83f:	80 fa 19             	cmp    dl,0x19
c000d842:	77 34                	ja     c000d878 <File::tell(unsigned long long*)+0x4c>
c000d844:	8b 14 95 80 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e80]
c000d84b:	85 d2                	test   edx,edx
c000d84d:	74 29                	je     c000d878 <File::tell(unsigned long long*)+0x4c>
c000d84f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d855:	85 d2                	test   edx,edx
c000d857:	74 1f                	je     c000d878 <File::tell(unsigned long long*)+0x4c>
c000d859:	b8 05 00 00 00       	mov    eax,0x5
c000d85e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d862:	74 14                	je     c000d878 <File::tell(unsigned long long*)+0x4c>
c000d864:	50                   	push   eax
c000d865:	8b 02                	mov    eax,DWORD PTR [edx]
c000d867:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d86b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d871:	52                   	push   edx
c000d872:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d875:	83 c4 10             	add    esp,0x10
c000d878:	83 c4 0c             	add    esp,0xc
c000d87b:	c3                   	ret    

c000d87c <File::rewind()>:
c000d87c:	83 ec 10             	sub    esp,0x10
c000d87f:	6a 00                	push   0x0
c000d881:	6a 00                	push   0x0
c000d883:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d887:	e8 4a ff ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c000d88c:	83 c4 1c             	add    esp,0x1c
c000d88f:	c3                   	ret    

c000d890 <File::unlink()>:
c000d890:	83 ec 0c             	sub    esp,0xc
c000d893:	b8 0b 00 00 00       	mov    eax,0xb
c000d898:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d89c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8a3:	80 f9 19             	cmp    cl,0x19
c000d8a6:	77 2f                	ja     c000d8d7 <File::unlink()+0x47>
c000d8a8:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000d8af:	85 c9                	test   ecx,ecx
c000d8b1:	74 24                	je     c000d8d7 <File::unlink()+0x47>
c000d8b3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8b9:	85 c9                	test   ecx,ecx
c000d8bb:	74 1a                	je     c000d8d7 <File::unlink()+0x47>
c000d8bd:	b8 06 00 00 00       	mov    eax,0x6
c000d8c2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8c6:	75 0f                	jne    c000d8d7 <File::unlink()+0x47>
c000d8c8:	83 c2 0d             	add    edx,0xd
c000d8cb:	50                   	push   eax
c000d8cc:	50                   	push   eax
c000d8cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8cf:	52                   	push   edx
c000d8d0:	51                   	push   ecx
c000d8d1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d8d4:	83 c4 10             	add    esp,0x10
c000d8d7:	83 c4 0c             	add    esp,0xc
c000d8da:	c3                   	ret    
c000d8db:	90                   	nop

c000d8dc <File::rename(char const*)>:
c000d8dc:	83 ec 0c             	sub    esp,0xc
c000d8df:	b8 0b 00 00 00       	mov    eax,0xb
c000d8e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8ef:	80 f9 19             	cmp    cl,0x19
c000d8f2:	77 32                	ja     c000d926 <File::rename(char const*)+0x4a>
c000d8f4:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000d8fb:	85 c9                	test   ecx,ecx
c000d8fd:	74 27                	je     c000d926 <File::rename(char const*)+0x4a>
c000d8ff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d905:	85 c9                	test   ecx,ecx
c000d907:	74 1d                	je     c000d926 <File::rename(char const*)+0x4a>
c000d909:	b8 06 00 00 00       	mov    eax,0x6
c000d90e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d912:	75 12                	jne    c000d926 <File::rename(char const*)+0x4a>
c000d914:	83 c2 0d             	add    edx,0xd
c000d917:	50                   	push   eax
c000d918:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d91a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d91e:	52                   	push   edx
c000d91f:	51                   	push   ecx
c000d920:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d923:	83 c4 10             	add    esp,0x10
c000d926:	83 c4 0c             	add    esp,0xc
c000d929:	c3                   	ret    

c000d92a <File::chfatattr(unsigned char, unsigned char)>:
c000d92a:	57                   	push   edi
c000d92b:	b8 0b 00 00 00       	mov    eax,0xb
c000d930:	56                   	push   esi
c000d931:	53                   	push   ebx
c000d932:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d936:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d93a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d941:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d945:	80 f9 19             	cmp    cl,0x19
c000d948:	77 37                	ja     c000d981 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d94a:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000d951:	85 c9                	test   ecx,ecx
c000d953:	74 2c                	je     c000d981 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d955:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d95b:	85 c9                	test   ecx,ecx
c000d95d:	74 22                	je     c000d981 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d95f:	b8 06 00 00 00       	mov    eax,0x6
c000d964:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d968:	75 17                	jne    c000d981 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d96a:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d96c:	89 f0                	mov    eax,esi
c000d96e:	83 c2 0d             	add    edx,0xd
c000d971:	0f b6 f0             	movzx  esi,al
c000d974:	0f b6 db             	movzx  ebx,bl
c000d977:	56                   	push   esi
c000d978:	53                   	push   ebx
c000d979:	52                   	push   edx
c000d97a:	51                   	push   ecx
c000d97b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d97e:	83 c4 10             	add    esp,0x10
c000d981:	5b                   	pop    ebx
c000d982:	5e                   	pop    esi
c000d983:	5f                   	pop    edi
c000d984:	c3                   	ret    
c000d985:	90                   	nop

c000d986 <File::exists()>:
c000d986:	83 ec 0c             	sub    esp,0xc
c000d989:	31 c0                	xor    eax,eax
c000d98b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d98f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d996:	80 f9 19             	cmp    cl,0x19
c000d999:	77 24                	ja     c000d9bf <File::exists()+0x39>
c000d99b:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000d9a2:	85 c9                	test   ecx,ecx
c000d9a4:	74 19                	je     c000d9bf <File::exists()+0x39>
c000d9a6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9ac:	85 c9                	test   ecx,ecx
c000d9ae:	74 0f                	je     c000d9bf <File::exists()+0x39>
c000d9b0:	83 c2 0d             	add    edx,0xd
c000d9b3:	50                   	push   eax
c000d9b4:	50                   	push   eax
c000d9b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9b7:	52                   	push   edx
c000d9b8:	51                   	push   ecx
c000d9b9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d9bc:	83 c4 10             	add    esp,0x10
c000d9bf:	83 c4 0c             	add    esp,0xc
c000d9c2:	c3                   	ret    
c000d9c3:	90                   	nop

c000d9c4 <File::stat(unsigned long long*, bool*)>:
c000d9c4:	56                   	push   esi
c000d9c5:	53                   	push   ebx
c000d9c6:	50                   	push   eax
c000d9c7:	b8 0b 00 00 00       	mov    eax,0xb
c000d9cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9d0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d9d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9df:	80 f9 19             	cmp    cl,0x19
c000d9e2:	77 3d                	ja     c000da21 <File::stat(unsigned long long*, bool*)+0x5d>
c000d9e4:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000d9eb:	85 c9                	test   ecx,ecx
c000d9ed:	74 32                	je     c000da21 <File::stat(unsigned long long*, bool*)+0x5d>
c000d9ef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9f5:	85 c9                	test   ecx,ecx
c000d9f7:	74 28                	je     c000da21 <File::stat(unsigned long long*, bool*)+0x5d>
c000d9f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9fb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d9ff:	74 13                	je     c000da14 <File::stat(unsigned long long*, bool*)+0x50>
c000da01:	83 ec 04             	sub    esp,0x4
c000da04:	56                   	push   esi
c000da05:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000da0b:	51                   	push   ecx
c000da0c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000da0f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000da12:	eb 0a                	jmp    c000da1e <File::stat(unsigned long long*, bool*)+0x5a>
c000da14:	53                   	push   ebx
c000da15:	83 c2 0d             	add    edx,0xd
c000da18:	56                   	push   esi
c000da19:	52                   	push   edx
c000da1a:	51                   	push   ecx
c000da1b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000da1e:	83 c4 10             	add    esp,0x10
c000da21:	5a                   	pop    edx
c000da22:	5b                   	pop    ebx
c000da23:	5e                   	pop    esi
c000da24:	c3                   	ret    

c000da25 <Fs::setcwd(Process*, char*)>:
c000da25:	55                   	push   ebp
c000da26:	57                   	push   edi
c000da27:	56                   	push   esi
c000da28:	53                   	push   ebx
c000da29:	81 ec 20 02 00 00    	sub    esp,0x220
c000da2f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000da36:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000da3c:	57                   	push   edi
c000da3d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000da44:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000da48:	56                   	push   esi
c000da49:	e8 46 fa ff ff       	call   c000d494 <Fs::standardiseFiles(char*, char const*, char const*)>
c000da4e:	89 34 24             	mov    DWORD PTR [esp],esi
c000da51:	e8 5a 2c ff ff       	call   c00006b0 <strlen>
c000da56:	83 c4 10             	add    esp,0x10
c000da59:	83 f8 02             	cmp    eax,0x2
c000da5c:	77 15                	ja     c000da73 <Fs::setcwd(Process*, char*)+0x4e>
c000da5e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000da63:	83 eb 41             	sub    ebx,0x41
c000da66:	8b 04 9d 80 91 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6e80]
c000da6d:	85 c0                	test   eax,eax
c000da6f:	75 1c                	jne    c000da8d <Fs::setcwd(Process*, char*)+0x68>
c000da71:	eb 4c                	jmp    c000dabf <Fs::setcwd(Process*, char*)+0x9a>
c000da73:	83 ec 0c             	sub    esp,0xc
c000da76:	56                   	push   esi
c000da77:	e8 34 2c ff ff       	call   c00006b0 <strlen>
c000da7c:	83 c4 10             	add    esp,0x10
c000da7f:	83 f8 03             	cmp    eax,0x3
c000da82:	75 74                	jne    c000daf8 <Fs::setcwd(Process*, char*)+0xd3>
c000da84:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000da89:	75 6d                	jne    c000daf8 <Fs::setcwd(Process*, char*)+0xd3>
c000da8b:	eb d1                	jmp    c000da5e <Fs::setcwd(Process*, char*)+0x39>
c000da8d:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000da94:	75 29                	jne    c000dabf <Fs::setcwd(Process*, char*)+0x9a>
c000da96:	83 ec 0c             	sub    esp,0xc
c000da99:	68 14 53 02 c0       	push   0xc0025314
c000da9e:	e8 30 f6 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000daa3:	5a                   	pop    edx
c000daa4:	ff 34 9d 80 91 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6e80]
c000daab:	e8 a4 2e 00 00       	call   c0010954 <LogicalDisk::mount()>
c000dab0:	c7 04 24 fb 76 02 c0 	mov    DWORD PTR [esp],0xc00276fb
c000dab7:	e8 17 f6 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000dabc:	83 c4 10             	add    esp,0x10
c000dabf:	b8 03 00 00 00       	mov    eax,0x3
c000dac4:	83 fb 19             	cmp    ebx,0x19
c000dac7:	0f 87 c6 00 00 00    	ja     c000db93 <Fs::setcwd(Process*, char*)+0x16e>
c000dacd:	8b 14 9d 80 91 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6e80]
c000dad4:	b8 05 00 00 00       	mov    eax,0x5
c000dad9:	85 d2                	test   edx,edx
c000dadb:	0f 84 b2 00 00 00    	je     c000db93 <Fs::setcwd(Process*, char*)+0x16e>
c000dae1:	b8 06 00 00 00       	mov    eax,0x6
c000dae6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000daed:	0f 85 92 00 00 00    	jne    c000db85 <Fs::setcwd(Process*, char*)+0x160>
c000daf3:	e9 9b 00 00 00       	jmp    c000db93 <Fs::setcwd(Process*, char*)+0x16e>
c000daf8:	83 ec 0c             	sub    esp,0xc
c000dafb:	68 14 01 00 00       	push   0x114
c000db00:	e8 e2 c2 ff ff       	call   c0009de7 <malloc>
c000db05:	83 c4 0c             	add    esp,0xc
c000db08:	89 c3                	mov    ebx,eax
c000db0a:	55                   	push   ebp
c000db0b:	56                   	push   esi
c000db0c:	50                   	push   eax
c000db0d:	e8 2c fb ff ff       	call   c000d63e <File::File(char const*, Process*)>
c000db12:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000db17:	83 c4 0c             	add    esp,0xc
c000db1a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000db1e:	50                   	push   eax
c000db1f:	8d 44 24 10          	lea    eax,[esp+0x10]
c000db23:	50                   	push   eax
c000db24:	53                   	push   ebx
c000db25:	e8 9a fe ff ff       	call   c000d9c4 <File::stat(unsigned long long*, bool*)>
c000db2a:	83 c4 10             	add    esp,0x10
c000db2d:	83 f8 02             	cmp    eax,0x2
c000db30:	74 04                	je     c000db36 <Fs::setcwd(Process*, char*)+0x111>
c000db32:	85 c0                	test   eax,eax
c000db34:	74 1c                	je     c000db52 <Fs::setcwd(Process*, char*)+0x12d>
c000db36:	b8 01 00 00 00       	mov    eax,0x1
c000db3b:	85 db                	test   ebx,ebx
c000db3d:	74 54                	je     c000db93 <Fs::setcwd(Process*, char*)+0x16e>
c000db3f:	83 ec 0c             	sub    esp,0xc
c000db42:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db44:	53                   	push   ebx
c000db45:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000db48:	83 c4 10             	add    esp,0x10
c000db4b:	b8 01 00 00 00       	mov    eax,0x1
c000db50:	eb 41                	jmp    c000db93 <Fs::setcwd(Process*, char*)+0x16e>
c000db52:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000db57:	75 1c                	jne    c000db75 <Fs::setcwd(Process*, char*)+0x150>
c000db59:	b8 02 00 00 00       	mov    eax,0x2
c000db5e:	85 db                	test   ebx,ebx
c000db60:	74 31                	je     c000db93 <Fs::setcwd(Process*, char*)+0x16e>
c000db62:	83 ec 0c             	sub    esp,0xc
c000db65:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db67:	53                   	push   ebx
c000db68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000db6b:	83 c4 10             	add    esp,0x10
c000db6e:	b8 02 00 00 00       	mov    eax,0x2
c000db73:	eb 1e                	jmp    c000db93 <Fs::setcwd(Process*, char*)+0x16e>
c000db75:	85 db                	test   ebx,ebx
c000db77:	74 0c                	je     c000db85 <Fs::setcwd(Process*, char*)+0x160>
c000db79:	83 ec 0c             	sub    esp,0xc
c000db7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db7e:	53                   	push   ebx
c000db7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	50                   	push   eax
c000db86:	50                   	push   eax
c000db87:	56                   	push   esi
c000db88:	57                   	push   edi
c000db89:	e8 c2 2b ff ff       	call   c0000750 <strcpy>
c000db8e:	83 c4 10             	add    esp,0x10
c000db91:	31 c0                	xor    eax,eax
c000db93:	81 c4 1c 02 00 00    	add    esp,0x21c
c000db99:	5b                   	pop    ebx
c000db9a:	5e                   	pop    esi
c000db9b:	5f                   	pop    edi
c000db9c:	5d                   	pop    ebp
c000db9d:	c3                   	ret    

c000db9e <Directory::Directory(char const*, Process*)>:
c000db9e:	83 ec 0c             	sub    esp,0xc
c000dba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba5:	83 ec 08             	sub    esp,0x8
c000dba8:	6a 00                	push   0x0
c000dbaa:	50                   	push   eax
c000dbab:	e8 ba dd ff ff       	call   c000b96a <UnixFile::UnixFile(int)>
c000dbb0:	83 c4 10             	add    esp,0x10
c000dbb3:	ba 1c 54 02 c0       	mov    edx,0xc002541c
c000dbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbbc:	89 10                	mov    DWORD PTR [eax],edx
c000dbbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dbc2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000dbc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbcc:	83 c0 0d             	add    eax,0xd
c000dbcf:	83 ec 04             	sub    esp,0x4
c000dbd2:	52                   	push   edx
c000dbd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd7:	50                   	push   eax
c000dbd8:	e8 b7 f8 ff ff       	call   c000d494 <Fs::standardiseFiles(char*, char const*, char const*)>
c000dbdd:	83 c4 10             	add    esp,0x10
c000dbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000dbe7:	8d 50 bf             	lea    edx,[eax-0x41]
c000dbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbee:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000dbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000dbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc00:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc06:	0f b6 c0             	movzx  eax,al
c000dc09:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000dc10:	85 c0                	test   eax,eax
c000dc12:	74 5e                	je     c000dc72 <Directory::Directory(char const*, Process*)+0xd4>
c000dc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc18:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc1e:	0f b6 c0             	movzx  eax,al
c000dc21:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000dc28:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc2e:	85 c0                	test   eax,eax
c000dc30:	75 40                	jne    c000dc72 <Directory::Directory(char const*, Process*)+0xd4>
c000dc32:	83 ec 0c             	sub    esp,0xc
c000dc35:	68 64 53 02 c0       	push   0xc0025364
c000dc3a:	e8 94 f4 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000dc3f:	83 c4 10             	add    esp,0x10
c000dc42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc46:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc4c:	0f b6 c0             	movzx  eax,al
c000dc4f:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000dc56:	83 ec 0c             	sub    esp,0xc
c000dc59:	50                   	push   eax
c000dc5a:	e8 f5 2c 00 00       	call   c0010954 <LogicalDisk::mount()>
c000dc5f:	83 c4 10             	add    esp,0x10
c000dc62:	83 ec 0c             	sub    esp,0xc
c000dc65:	68 fb 76 02 c0       	push   0xc00276fb
c000dc6a:	e8 64 f4 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000dc6f:	83 c4 10             	add    esp,0x10
c000dc72:	90                   	nop
c000dc73:	83 c4 0c             	add    esp,0xc
c000dc76:	c3                   	ret    
c000dc77:	90                   	nop

c000dc78 <Directory::open()>:
c000dc78:	53                   	push   ebx
c000dc79:	b8 0b 00 00 00       	mov    eax,0xb
c000dc7e:	83 ec 08             	sub    esp,0x8
c000dc81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc85:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dc8c:	80 fa 19             	cmp    dl,0x19
c000dc8f:	77 3d                	ja     c000dcce <Directory::open()+0x56>
c000dc91:	8b 14 95 80 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e80]
c000dc98:	85 d2                	test   edx,edx
c000dc9a:	74 32                	je     c000dcce <Directory::open()+0x56>
c000dc9c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dca2:	85 d2                	test   edx,edx
c000dca4:	74 28                	je     c000dcce <Directory::open()+0x56>
c000dca6:	b8 06 00 00 00       	mov    eax,0x6
c000dcab:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dcaf:	75 1d                	jne    c000dcce <Directory::open()+0x56>
c000dcb1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dcb7:	50                   	push   eax
c000dcb8:	8b 02                	mov    eax,DWORD PTR [edx]
c000dcba:	51                   	push   ecx
c000dcbb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dcbe:	51                   	push   ecx
c000dcbf:	52                   	push   edx
c000dcc0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dcc3:	83 c4 10             	add    esp,0x10
c000dcc6:	85 c0                	test   eax,eax
c000dcc8:	75 04                	jne    c000dcce <Directory::open()+0x56>
c000dcca:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dcce:	83 c4 08             	add    esp,0x8
c000dcd1:	5b                   	pop    ebx
c000dcd2:	c3                   	ret    
c000dcd3:	90                   	nop

c000dcd4 <Directory::close()>:
c000dcd4:	53                   	push   ebx
c000dcd5:	b8 0b 00 00 00       	mov    eax,0xb
c000dcda:	83 ec 08             	sub    esp,0x8
c000dcdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dce1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dce8:	80 fa 19             	cmp    dl,0x19
c000dceb:	77 41                	ja     c000dd2e <Directory::close()+0x5a>
c000dced:	8b 1c 95 80 91 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6e80]
c000dcf4:	85 db                	test   ebx,ebx
c000dcf6:	74 36                	je     c000dd2e <Directory::close()+0x5a>
c000dcf8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dcff:	74 2d                	je     c000dd2e <Directory::close()+0x5a>
c000dd01:	b8 05 00 00 00       	mov    eax,0x5
c000dd06:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dd0a:	74 22                	je     c000dd2e <Directory::close()+0x5a>
c000dd0c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dd10:	8b 04 95 80 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e80]
c000dd17:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dd1d:	53                   	push   ebx
c000dd1e:	53                   	push   ebx
c000dd1f:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd21:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dd27:	50                   	push   eax
c000dd28:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dd2b:	83 c4 10             	add    esp,0x10
c000dd2e:	83 c4 08             	add    esp,0x8
c000dd31:	5b                   	pop    ebx
c000dd32:	c3                   	ret    
c000dd33:	90                   	nop

c000dd34 <Directory::unlink()>:
c000dd34:	83 ec 0c             	sub    esp,0xc
c000dd37:	b8 0b 00 00 00       	mov    eax,0xb
c000dd3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd40:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd47:	80 f9 19             	cmp    cl,0x19
c000dd4a:	77 2f                	ja     c000dd7b <Directory::unlink()+0x47>
c000dd4c:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000dd53:	85 c9                	test   ecx,ecx
c000dd55:	74 24                	je     c000dd7b <Directory::unlink()+0x47>
c000dd57:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd5d:	85 c9                	test   ecx,ecx
c000dd5f:	74 1a                	je     c000dd7b <Directory::unlink()+0x47>
c000dd61:	b8 06 00 00 00       	mov    eax,0x6
c000dd66:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd6a:	75 0f                	jne    c000dd7b <Directory::unlink()+0x47>
c000dd6c:	83 c2 0d             	add    edx,0xd
c000dd6f:	50                   	push   eax
c000dd70:	50                   	push   eax
c000dd71:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd73:	52                   	push   edx
c000dd74:	51                   	push   ecx
c000dd75:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dd78:	83 c4 10             	add    esp,0x10
c000dd7b:	83 c4 0c             	add    esp,0xc
c000dd7e:	c3                   	ret    
c000dd7f:	90                   	nop

c000dd80 <Directory::rename(char const*)>:
c000dd80:	83 ec 0c             	sub    esp,0xc
c000dd83:	b8 0b 00 00 00       	mov    eax,0xb
c000dd88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd8c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd93:	80 f9 19             	cmp    cl,0x19
c000dd96:	77 32                	ja     c000ddca <Directory::rename(char const*)+0x4a>
c000dd98:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000dd9f:	85 c9                	test   ecx,ecx
c000dda1:	74 27                	je     c000ddca <Directory::rename(char const*)+0x4a>
c000dda3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dda9:	85 c9                	test   ecx,ecx
c000ddab:	74 1d                	je     c000ddca <Directory::rename(char const*)+0x4a>
c000ddad:	b8 06 00 00 00       	mov    eax,0x6
c000ddb2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ddb6:	75 12                	jne    c000ddca <Directory::rename(char const*)+0x4a>
c000ddb8:	83 c2 0d             	add    edx,0xd
c000ddbb:	50                   	push   eax
c000ddbc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddc2:	52                   	push   edx
c000ddc3:	51                   	push   ecx
c000ddc4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ddc7:	83 c4 10             	add    esp,0x10
c000ddca:	83 c4 0c             	add    esp,0xc
c000ddcd:	c3                   	ret    

c000ddce <Directory::exists()>:
c000ddce:	83 ec 0c             	sub    esp,0xc
c000ddd1:	31 c0                	xor    eax,eax
c000ddd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddd7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ddde:	80 f9 19             	cmp    cl,0x19
c000dde1:	77 24                	ja     c000de07 <Directory::exists()+0x39>
c000dde3:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000ddea:	85 c9                	test   ecx,ecx
c000ddec:	74 19                	je     c000de07 <Directory::exists()+0x39>
c000ddee:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ddf4:	85 c9                	test   ecx,ecx
c000ddf6:	74 0f                	je     c000de07 <Directory::exists()+0x39>
c000ddf8:	83 c2 0d             	add    edx,0xd
c000ddfb:	50                   	push   eax
c000ddfc:	50                   	push   eax
c000ddfd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddff:	52                   	push   edx
c000de00:	51                   	push   ecx
c000de01:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000de04:	83 c4 10             	add    esp,0x10
c000de07:	83 c4 0c             	add    esp,0xc
c000de0a:	c3                   	ret    
c000de0b:	90                   	nop

c000de0c <Directory::read(dirent*)>:
c000de0c:	83 ec 1c             	sub    esp,0x1c
c000de0f:	b8 0b 00 00 00       	mov    eax,0xb
c000de14:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000de18:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000de1f:	80 fa 19             	cmp    dl,0x19
c000de22:	77 30                	ja     c000de54 <Directory::read(dirent*)+0x48>
c000de24:	8b 14 95 80 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e80]
c000de2b:	85 d2                	test   edx,edx
c000de2d:	74 25                	je     c000de54 <Directory::read(dirent*)+0x48>
c000de2f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000de36:	74 1c                	je     c000de54 <Directory::read(dirent*)+0x48>
c000de38:	83 ec 0c             	sub    esp,0xc
c000de3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de3d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000de41:	52                   	push   edx
c000de42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000de46:	6a 00                	push   0x0
c000de48:	68 10 01 00 00       	push   0x110
c000de4d:	51                   	push   ecx
c000de4e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000de51:	83 c4 20             	add    esp,0x20
c000de54:	83 c4 1c             	add    esp,0x1c
c000de57:	c3                   	ret    

c000de58 <Directory::create()>:
c000de58:	83 ec 0c             	sub    esp,0xc
c000de5b:	b8 0b 00 00 00       	mov    eax,0xb
c000de60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de64:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000de6b:	80 f9 19             	cmp    cl,0x19
c000de6e:	77 2f                	ja     c000de9f <Directory::create()+0x47>
c000de70:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000de77:	85 c9                	test   ecx,ecx
c000de79:	74 24                	je     c000de9f <Directory::create()+0x47>
c000de7b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000de81:	85 c9                	test   ecx,ecx
c000de83:	74 1a                	je     c000de9f <Directory::create()+0x47>
c000de85:	b8 06 00 00 00       	mov    eax,0x6
c000de8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000de8e:	75 0f                	jne    c000de9f <Directory::create()+0x47>
c000de90:	83 c2 0d             	add    edx,0xd
c000de93:	50                   	push   eax
c000de94:	50                   	push   eax
c000de95:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de97:	52                   	push   edx
c000de98:	51                   	push   ecx
c000de99:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000de9c:	83 c4 10             	add    esp,0x10
c000de9f:	83 c4 0c             	add    esp,0xc
c000dea2:	c3                   	ret    
c000dea3:	90                   	nop

c000dea4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000dea4:	b8 0a 00 00 00       	mov    eax,0xa
c000dea9:	c3                   	ret    
c000deaa:	66 90                	xchg   ax,ax

c000deac <Bus::Bus(char const*)>:
c000deac:	83 ec 0c             	sub    esp,0xc
c000deaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb3:	83 ec 08             	sub    esp,0x8
c000deb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deba:	50                   	push   eax
c000debb:	e8 8a 09 00 00       	call   c000e84a <Device::Device(char const*)>
c000dec0:	83 c4 10             	add    esp,0x10
c000dec3:	ba 38 54 02 c0       	mov    edx,0xc0025438
c000dec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000decc:	89 10                	mov    DWORD PTR [eax],edx
c000dece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dedc:	90                   	nop
c000dedd:	83 c4 0c             	add    esp,0xc
c000dee0:	c3                   	ret    
c000dee1:	90                   	nop
c000dee2:	66 90                	xchg   ax,ax

c000dee4 <Bus::~Bus()>:
c000dee4:	83 ec 0c             	sub    esp,0xc
c000dee7:	ba 38 54 02 c0       	mov    edx,0xc0025438
c000deec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def0:	89 10                	mov    DWORD PTR [eax],edx
c000def2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def6:	83 ec 0c             	sub    esp,0xc
c000def9:	50                   	push   eax
c000defa:	e8 15 06 00 00       	call   c000e514 <Device::~Device()>
c000deff:	83 c4 10             	add    esp,0x10
c000df02:	90                   	nop
c000df03:	83 c4 0c             	add    esp,0xc
c000df06:	c3                   	ret    
c000df07:	90                   	nop

c000df08 <Bus::~Bus()>:
c000df08:	83 ec 0c             	sub    esp,0xc
c000df0b:	83 ec 0c             	sub    esp,0xc
c000df0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df12:	e8 cd ff ff ff       	call   c000dee4 <Bus::~Bus()>
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	83 ec 08             	sub    esp,0x8
c000df1d:	68 58 01 00 00       	push   0x158
c000df22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df26:	e8 c7 f0 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c000df2b:	83 c4 10             	add    esp,0x10
c000df2e:	83 c4 0c             	add    esp,0xc
c000df31:	c3                   	ret    
c000df32:	66 90                	xchg   ax,ax

c000df34 <Buzzer::Buzzer(char const*)>:
c000df34:	83 ec 0c             	sub    esp,0xc
c000df37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df3b:	83 ec 08             	sub    esp,0x8
c000df3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df42:	50                   	push   eax
c000df43:	e8 02 09 00 00       	call   c000e84a <Device::Device(char const*)>
c000df48:	83 c4 10             	add    esp,0x10
c000df4b:	ba 64 54 02 c0       	mov    edx,0xc0025464
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	89 10                	mov    DWORD PTR [eax],edx
c000df56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000df64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df68:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000df72:	90                   	nop
c000df73:	83 c4 0c             	add    esp,0xc
c000df76:	c3                   	ret    
c000df77:	90                   	nop

c000df78 <Buzzer::~Buzzer()>:
c000df78:	83 ec 0c             	sub    esp,0xc
c000df7b:	ba 64 54 02 c0       	mov    edx,0xc0025464
c000df80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df84:	89 10                	mov    DWORD PTR [eax],edx
c000df86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8a:	83 ec 0c             	sub    esp,0xc
c000df8d:	50                   	push   eax
c000df8e:	e8 81 05 00 00       	call   c000e514 <Device::~Device()>
c000df93:	83 c4 10             	add    esp,0x10
c000df96:	90                   	nop
c000df97:	83 c4 0c             	add    esp,0xc
c000df9a:	c3                   	ret    
c000df9b:	90                   	nop

c000df9c <Buzzer::~Buzzer()>:
c000df9c:	83 ec 0c             	sub    esp,0xc
c000df9f:	83 ec 0c             	sub    esp,0xc
c000dfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa6:	e8 cd ff ff ff       	call   c000df78 <Buzzer::~Buzzer()>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	83 ec 08             	sub    esp,0x8
c000dfb1:	68 5c 01 00 00       	push   0x15c
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 33 f0 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c000dfbf:	83 c4 10             	add    esp,0x10
c000dfc2:	83 c4 0c             	add    esp,0xc
c000dfc5:	c3                   	ret    

c000dfc6 <Buzzer::stop()>:
c000dfc6:	83 ec 14             	sub    esp,0x14
c000dfc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000dfcf:	6a 00                	push   0x0
c000dfd1:	50                   	push   eax
c000dfd2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dfd5:	83 c4 1c             	add    esp,0x1c
c000dfd8:	c3                   	ret    

c000dfd9 <beepThread(void*)>:
c000dfd9:	53                   	push   ebx
c000dfda:	83 ec 08             	sub    esp,0x8
c000dfdd:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000dfe2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfe6:	48                   	dec    eax
c000dfe7:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000dfec:	75 02                	jne    c000dff0 <beepThread(void*)+0x17>
c000dfee:	fb                   	sti    
c000dfef:	90                   	nop
c000dff0:	83 ec 0c             	sub    esp,0xc
c000dff3:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000dffa:	50                   	push   eax
c000dffb:	e8 f4 b1 00 00       	call   c00191f4 <milliTenthSleep(unsigned int)>
c000e000:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e003:	e8 be ff ff ff       	call   c000dfc6 <Buzzer::stop()>
c000e008:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000e010:	83 c4 18             	add    esp,0x18
c000e013:	5b                   	pop    ebx
c000e014:	e9 db b0 00 00       	jmp    c00190f4 <blockTask(TaskState)>
c000e019:	90                   	nop

c000e01a <Buzzer::beep(int, int, bool)>:
c000e01a:	57                   	push   edi
c000e01b:	56                   	push   esi
c000e01c:	53                   	push   ebx
c000e01d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e021:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e025:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e029:	50                   	push   eax
c000e02a:	50                   	push   eax
c000e02b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e02d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e031:	53                   	push   ebx
c000e032:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 f8                	mov    eax,edi
c000e03a:	84 c0                	test   al,al
c000e03c:	74 1e                	je     c000e05c <Buzzer::beep(int, int, bool)+0x42>
c000e03e:	83 ec 0c             	sub    esp,0xc
c000e041:	6b f6 0a             	imul   esi,esi,0xa
c000e044:	56                   	push   esi
c000e045:	e8 aa b1 00 00       	call   c00191f4 <milliTenthSleep(unsigned int)>
c000e04a:	83 c4 10             	add    esp,0x10
c000e04d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e051:	5b                   	pop    ebx
c000e052:	5e                   	pop    esi
c000e053:	5f                   	pop    edi
c000e054:	e9 6d ff ff ff       	jmp    c000dfc6 <Buzzer::stop()>
c000e059:	8d 76 00             	lea    esi,[esi+0x0]
c000e05c:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e062:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000e067:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000e06f:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000e073:	c7 44 24 14 d9 df 00 c0 	mov    DWORD PTR [esp+0x14],0xc000dfd9
c000e07b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e07f:	5b                   	pop    ebx
c000e080:	5e                   	pop    esi
c000e081:	5f                   	pop    edi
c000e082:	e9 59 ac 00 00       	jmp    c0018ce0 <Process::createThread(void (*)(void*), void*, int)>
c000e087:	90                   	nop

c000e088 <User::loadClockSettings(int)>:
c000e088:	53                   	push   ebx
c000e089:	83 ec 14             	sub    esp,0x14
c000e08c:	68 14 01 00 00       	push   0x114
c000e091:	e8 51 bd ff ff       	call   c0009de7 <malloc>
c000e096:	83 c4 0c             	add    esp,0xc
c000e099:	89 c3                	mov    ebx,eax
c000e09b:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c000e0a1:	68 8c 54 02 c0       	push   0xc002548c
c000e0a6:	50                   	push   eax
c000e0a7:	e8 92 f5 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c000e0ac:	58                   	pop    eax
c000e0ad:	5a                   	pop    edx
c000e0ae:	6a 01                	push   0x1
c000e0b0:	53                   	push   ebx
c000e0b1:	e8 62 f6 ff ff       	call   c000d718 <File::open(FileOpenMode)>
c000e0b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0b9:	e8 b8 f6 ff ff       	call   c000d776 <File::close()>
c000e0be:	83 c4 10             	add    esp,0x10
c000e0c1:	85 db                	test   ebx,ebx
c000e0c3:	74 0f                	je     c000e0d4 <User::loadClockSettings(int)+0x4c>
c000e0c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e0cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e0ce:	83 c4 08             	add    esp,0x8
c000e0d1:	5b                   	pop    ebx
c000e0d2:	ff e0                	jmp    eax
c000e0d4:	83 c4 08             	add    esp,0x8
c000e0d7:	5b                   	pop    ebx
c000e0d8:	c3                   	ret    
c000e0d9:	90                   	nop

c000e0da <Clock::Clock(char const*)>:
c000e0da:	83 ec 0c             	sub    esp,0xc
c000e0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0e1:	83 ec 08             	sub    esp,0x8
c000e0e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0e8:	50                   	push   eax
c000e0e9:	e8 5c 07 00 00       	call   c000e84a <Device::Device(char const*)>
c000e0ee:	83 c4 10             	add    esp,0x10
c000e0f1:	ba b4 54 02 c0       	mov    edx,0xc00254b4
c000e0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0fa:	89 10                	mov    DWORD PTR [eax],edx
c000e0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e100:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000e10a:	90                   	nop
c000e10b:	83 c4 0c             	add    esp,0xc
c000e10e:	c3                   	ret    
c000e10f:	90                   	nop

c000e110 <Clock::~Clock()>:
c000e110:	83 ec 0c             	sub    esp,0xc
c000e113:	ba b4 54 02 c0       	mov    edx,0xc00254b4
c000e118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e11c:	89 10                	mov    DWORD PTR [eax],edx
c000e11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e122:	83 ec 0c             	sub    esp,0xc
c000e125:	50                   	push   eax
c000e126:	e8 e9 03 00 00       	call   c000e514 <Device::~Device()>
c000e12b:	83 c4 10             	add    esp,0x10
c000e12e:	90                   	nop
c000e12f:	83 c4 0c             	add    esp,0xc
c000e132:	c3                   	ret    
c000e133:	90                   	nop

c000e134 <Clock::~Clock()>:
c000e134:	83 ec 0c             	sub    esp,0xc
c000e137:	83 ec 0c             	sub    esp,0xc
c000e13a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e13e:	e8 cd ff ff ff       	call   c000e110 <Clock::~Clock()>
c000e143:	83 c4 10             	add    esp,0x10
c000e146:	83 ec 08             	sub    esp,0x8
c000e149:	68 58 01 00 00       	push   0x158
c000e14e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e152:	e8 9b ee ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c000e157:	83 c4 10             	add    esp,0x10
c000e15a:	83 c4 0c             	add    esp,0xc
c000e15d:	c3                   	ret    

c000e15e <Clock::timeInSecondsLocal()>:
c000e15e:	53                   	push   ebx
c000e15f:	83 ec 14             	sub    esp,0x14
c000e162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e166:	8b 10                	mov    edx,DWORD PTR [eax]
c000e168:	50                   	push   eax
c000e169:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e16c:	0f b6 0d fc 8c 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028cfc
c000e173:	03 0d 00 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028d00
c000e179:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e17f:	89 cb                	mov    ebx,ecx
c000e181:	c1 fb 1f             	sar    ebx,0x1f
c000e184:	01 c8                	add    eax,ecx
c000e186:	11 da                	adc    edx,ebx
c000e188:	83 c4 10             	add    esp,0x10
c000e18b:	31 c9                	xor    ecx,ecx
c000e18d:	80 3d fd 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028cfd,0x0
c000e194:	74 05                	je     c000e19b <Clock::timeInSecondsLocal()+0x3d>
c000e196:	b9 08 07 00 00       	mov    ecx,0x708
c000e19b:	31 db                	xor    ebx,ebx
c000e19d:	01 c8                	add    eax,ecx
c000e19f:	11 da                	adc    edx,ebx
c000e1a1:	83 c4 08             	add    esp,0x8
c000e1a4:	5b                   	pop    ebx
c000e1a5:	c3                   	ret    

c000e1a6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e1a6:	57                   	push   edi
c000e1a7:	56                   	push   esi
c000e1a8:	53                   	push   ebx
c000e1a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e1ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e1b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e1b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1b7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e1ba:	0f b6 05 fc 8c 02 c0 	movzx  eax,BYTE PTR ds:0xc0028cfc
c000e1c1:	03 05 00 8d 02 c0    	add    eax,DWORD PTR ds:0xc0028d00
c000e1c7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e1cd:	99                   	cdq    
c000e1ce:	29 c6                	sub    esi,eax
c000e1d0:	19 d7                	sbb    edi,edx
c000e1d2:	89 f0                	mov    eax,esi
c000e1d4:	89 fa                	mov    edx,edi
c000e1d6:	31 f6                	xor    esi,esi
c000e1d8:	80 3d fd 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028cfd,0x0
c000e1df:	74 05                	je     c000e1e6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e1e1:	be 08 07 00 00       	mov    esi,0x708
c000e1e6:	31 ff                	xor    edi,edi
c000e1e8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e1ec:	29 f0                	sub    eax,esi
c000e1ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e1f2:	19 fa                	sbb    edx,edi
c000e1f4:	89 d8                	mov    eax,ebx
c000e1f6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e1fa:	5b                   	pop    ebx
c000e1fb:	5e                   	pop    esi
c000e1fc:	5f                   	pop    edi
c000e1fd:	ff e0                	jmp    eax

c000e1ff <datetimeToSeconds(datetime_t)>:
c000e1ff:	55                   	push   ebp
c000e200:	57                   	push   edi
c000e201:	56                   	push   esi
c000e202:	53                   	push   ebx
c000e203:	83 ec 14             	sub    esp,0x14
c000e206:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e20a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e20e:	89 d3                	mov    ebx,edx
c000e210:	0f b6 c6             	movzx  eax,dh
c000e213:	c1 eb 10             	shr    ebx,0x10
c000e216:	48                   	dec    eax
c000e217:	66 81 eb 6c 07       	sub    bx,0x76c
c000e21c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e220:	0f b6 f5             	movzx  esi,ch
c000e223:	89 cf                	mov    edi,ecx
c000e225:	6b f6 3c             	imul   esi,esi,0x3c
c000e228:	c1 ef 10             	shr    edi,0x10
c000e22b:	0f b6 c9             	movzx  ecx,cl
c000e22e:	89 f8                	mov    eax,edi
c000e230:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e236:	0f b6 f8             	movzx  edi,al
c000e239:	0f b6 d2             	movzx  edx,dl
c000e23c:	01 fe                	add    esi,edi
c000e23e:	01 f1                	add    ecx,esi
c000e240:	0f b7 f3             	movzx  esi,bx
c000e243:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e247:	c1 f9 1f             	sar    ecx,0x1f
c000e24a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e24f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e253:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e258:	8b 0c 8d 00 55 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdab00]
c000e25f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e263:	76 29                	jbe    c000e28e <datetimeToSeconds(datetime_t)+0x8f>
c000e265:	f6 c3 03             	test   bl,0x3
c000e268:	75 24                	jne    c000e28e <datetimeToSeconds(datetime_t)+0x8f>
c000e26a:	31 d2                	xor    edx,edx
c000e26c:	bf 64 00 00 00       	mov    edi,0x64
c000e271:	89 d8                	mov    eax,ebx
c000e273:	66 f7 f7             	div    di
c000e276:	66 85 d2             	test   dx,dx
c000e279:	75 12                	jne    c000e28d <datetimeToSeconds(datetime_t)+0x8e>
c000e27b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e281:	bf 90 01 00 00       	mov    edi,0x190
c000e286:	99                   	cdq    
c000e287:	f7 ff                	idiv   edi
c000e289:	85 d2                	test   edx,edx
c000e28b:	75 01                	jne    c000e28e <datetimeToSeconds(datetime_t)+0x8f>
c000e28d:	41                   	inc    ecx
c000e28e:	66 83 fb 46          	cmp    bx,0x46
c000e292:	76 45                	jbe    c000e2d9 <datetimeToSeconds(datetime_t)+0xda>
c000e294:	bb 46 00 00 00       	mov    ebx,0x46
c000e299:	bf 64 00 00 00       	mov    edi,0x64
c000e29e:	bd 90 01 00 00       	mov    ebp,0x190
c000e2a3:	b8 6d 01 00 00       	mov    eax,0x16d
c000e2a8:	f6 c3 03             	test   bl,0x3
c000e2ab:	75 23                	jne    c000e2d0 <datetimeToSeconds(datetime_t)+0xd1>
c000e2ad:	89 d8                	mov    eax,ebx
c000e2af:	99                   	cdq    
c000e2b0:	f7 ff                	idiv   edi
c000e2b2:	b8 6e 01 00 00       	mov    eax,0x16e
c000e2b7:	85 d2                	test   edx,edx
c000e2b9:	75 15                	jne    c000e2d0 <datetimeToSeconds(datetime_t)+0xd1>
c000e2bb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e2c1:	99                   	cdq    
c000e2c2:	f7 fd                	idiv   ebp
c000e2c4:	83 fa 01             	cmp    edx,0x1
c000e2c7:	19 c0                	sbb    eax,eax
c000e2c9:	f7 d0                	not    eax
c000e2cb:	05 6e 01 00 00       	add    eax,0x16e
c000e2d0:	01 c1                	add    ecx,eax
c000e2d2:	43                   	inc    ebx
c000e2d3:	39 f3                	cmp    ebx,esi
c000e2d5:	7c cc                	jl     c000e2a3 <datetimeToSeconds(datetime_t)+0xa4>
c000e2d7:	eb 35                	jmp    c000e30e <datetimeToSeconds(datetime_t)+0x10f>
c000e2d9:	74 33                	je     c000e30e <datetimeToSeconds(datetime_t)+0x10f>
c000e2db:	b8 45 00 00 00       	mov    eax,0x45
c000e2e0:	89 c2                	mov    edx,eax
c000e2e2:	83 e2 03             	and    edx,0x3
c000e2e5:	39 f0                	cmp    eax,esi
c000e2e7:	7e 0f                	jle    c000e2f8 <datetimeToSeconds(datetime_t)+0xf9>
c000e2e9:	83 fa 01             	cmp    edx,0x1
c000e2ec:	19 d2                	sbb    edx,edx
c000e2ee:	48                   	dec    eax
c000e2ef:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e2f6:	eb e8                	jmp    c000e2e0 <datetimeToSeconds(datetime_t)+0xe1>
c000e2f8:	b8 6d 01 00 00       	mov    eax,0x16d
c000e2fd:	85 d2                	test   edx,edx
c000e2ff:	75 0b                	jne    c000e30c <datetimeToSeconds(datetime_t)+0x10d>
c000e301:	66 83 fb 01          	cmp    bx,0x1
c000e305:	19 c0                	sbb    eax,eax
c000e307:	05 6e 01 00 00       	add    eax,0x16e
c000e30c:	29 c1                	sub    ecx,eax
c000e30e:	b8 80 51 01 00       	mov    eax,0x15180
c000e313:	f7 e9                	imul   ecx
c000e315:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e319:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e31d:	83 c4 14             	add    esp,0x14
c000e320:	5b                   	pop    ebx
c000e321:	5e                   	pop    esi
c000e322:	5f                   	pop    edi
c000e323:	5d                   	pop    ebp
c000e324:	c3                   	ret    
c000e325:	90                   	nop

c000e326 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e326:	57                   	push   edi
c000e327:	56                   	push   esi
c000e328:	53                   	push   ebx
c000e329:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e32d:	8b 06                	mov    eax,DWORD PTR [esi]
c000e32f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e33a:	e8 c0 fe ff ff       	call   c000e1ff <datetimeToSeconds(datetime_t)>
c000e33f:	59                   	pop    ecx
c000e340:	0f b6 0d fc 8c 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028cfc
c000e347:	5b                   	pop    ebx
c000e348:	03 0d 00 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028d00
c000e34e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e354:	89 cb                	mov    ebx,ecx
c000e356:	c1 fb 1f             	sar    ebx,0x1f
c000e359:	29 c8                	sub    eax,ecx
c000e35b:	19 da                	sbb    edx,ebx
c000e35d:	31 c9                	xor    ecx,ecx
c000e35f:	80 3d fd 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028cfd,0x0
c000e366:	74 05                	je     c000e36d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e368:	b9 08 07 00 00       	mov    ecx,0x708
c000e36d:	31 db                	xor    ebx,ebx
c000e36f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e373:	29 c8                	sub    eax,ecx
c000e375:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e379:	19 da                	sbb    edx,ebx
c000e37b:	89 f8                	mov    eax,edi
c000e37d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e381:	5b                   	pop    ebx
c000e382:	5e                   	pop    esi
c000e383:	5f                   	pop    edi
c000e384:	ff e0                	jmp    eax

c000e386 <secondsToDatetime(unsigned long long)>:
c000e386:	55                   	push   ebp
c000e387:	57                   	push   edi
c000e388:	56                   	push   esi
c000e389:	53                   	push   ebx
c000e38a:	83 ec 1c             	sub    esp,0x1c
c000e38d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e391:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e395:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e399:	6a 00                	push   0x0
c000e39b:	68 80 51 01 00       	push   0x15180
c000e3a0:	55                   	push   ebp
c000e3a1:	57                   	push   edi
c000e3a2:	e8 e9 4b 01 00       	call   c0022f90 <__udivdi3>
c000e3a7:	83 c4 10             	add    esp,0x10
c000e3aa:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e3b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3b4:	6a 00                	push   0x0
c000e3b6:	68 80 51 01 00       	push   0x15180
c000e3bb:	55                   	push   ebp
c000e3bc:	57                   	push   edi
c000e3bd:	bf 10 0e 00 00       	mov    edi,0xe10
c000e3c2:	e8 c9 4c 01 00       	call   c0023090 <__umoddi3>
c000e3c7:	83 c4 10             	add    esp,0x10
c000e3ca:	99                   	cdq    
c000e3cb:	f7 ff                	idiv   edi
c000e3cd:	bf 3c 00 00 00       	mov    edi,0x3c
c000e3d2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e3d5:	89 d0                	mov    eax,edx
c000e3d7:	99                   	cdq    
c000e3d8:	f7 ff                	idiv   edi
c000e3da:	85 db                	test   ebx,ebx
c000e3dc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e3df:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e3e2:	79 11                	jns    c000e3f5 <secondsToDatetime(unsigned long long)+0x6f>
c000e3e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e3e8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e3ee:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e3f3:	eb 07                	jmp    c000e3fc <secondsToDatetime(unsigned long long)+0x76>
c000e3f5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e3fa:	89 d8                	mov    eax,ebx
c000e3fc:	bf b4 05 00 00       	mov    edi,0x5b4
c000e401:	99                   	cdq    
c000e402:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e407:	f7 f9                	idiv   ecx
c000e409:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e40e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e412:	31 d2                	xor    edx,edx
c000e414:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e41c:	01 c3                	add    ebx,eax
c000e41e:	89 d8                	mov    eax,ebx
c000e420:	f7 f1                	div    ecx
c000e422:	31 d2                	xor    edx,edx
c000e424:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e427:	89 d8                	mov    eax,ebx
c000e429:	f7 f7                	div    edi
c000e42b:	31 d2                	xor    edx,edx
c000e42d:	29 c1                	sub    ecx,eax
c000e42f:	89 d8                	mov    eax,ebx
c000e431:	f7 f5                	div    ebp
c000e433:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e438:	29 c1                	sub    ecx,eax
c000e43a:	31 d2                	xor    edx,edx
c000e43c:	89 c8                	mov    eax,ecx
c000e43e:	f7 f5                	div    ebp
c000e440:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e445:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e449:	31 d2                	xor    edx,edx
c000e44b:	89 c8                	mov    eax,ecx
c000e44d:	f7 f5                	div    ebp
c000e44f:	31 d2                	xor    edx,edx
c000e451:	01 c3                	add    ebx,eax
c000e453:	89 c8                	mov    eax,ecx
c000e455:	f7 f7                	div    edi
c000e457:	bf 99 00 00 00       	mov    edi,0x99
c000e45c:	29 c3                	sub    ebx,eax
c000e45e:	31 d2                	xor    edx,edx
c000e460:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e468:	29 c3                	sub    ebx,eax
c000e46a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e46d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e470:	bb 05 00 00 00       	mov    ebx,0x5
c000e475:	83 c1 02             	add    ecx,0x2
c000e478:	89 c8                	mov    eax,ecx
c000e47a:	f7 f7                	div    edi
c000e47c:	31 d2                	xor    edx,edx
c000e47e:	89 c7                	mov    edi,eax
c000e480:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e486:	83 c0 02             	add    eax,0x2
c000e489:	f7 f3                	div    ebx
c000e48b:	89 eb                	mov    ebx,ebp
c000e48d:	29 c3                	sub    ebx,eax
c000e48f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e495:	88 1e                	mov    BYTE PTR [esi],bl
c000e497:	19 c0                	sbb    eax,eax
c000e499:	31 d2                	xor    edx,edx
c000e49b:	83 e0 0c             	and    eax,0xc
c000e49e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e4a2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e4aa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e4ae:	83 f9 01             	cmp    ecx,0x1
c000e4b1:	0f 96 c2             	setbe  dl
c000e4b4:	41                   	inc    ecx
c000e4b5:	01 d0                	add    eax,edx
c000e4b7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e4ba:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e4be:	83 c4 1c             	add    esp,0x1c
c000e4c1:	89 f0                	mov    eax,esi
c000e4c3:	5b                   	pop    ebx
c000e4c4:	5e                   	pop    esi
c000e4c5:	5f                   	pop    edi
c000e4c6:	5d                   	pop    ebp
c000e4c7:	c2 04 00             	ret    0x4

c000e4ca <Clock::timeInDatetimeLocal()>:
c000e4ca:	53                   	push   ebx
c000e4cb:	83 ec 14             	sub    esp,0x14
c000e4ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e4d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e4d6:	e8 83 fc ff ff       	call   c000e15e <Clock::timeInSecondsLocal()>
c000e4db:	83 c4 0c             	add    esp,0xc
c000e4de:	52                   	push   edx
c000e4df:	50                   	push   eax
c000e4e0:	53                   	push   ebx
c000e4e1:	e8 a0 fe ff ff       	call   c000e386 <secondsToDatetime(unsigned long long)>
c000e4e6:	89 d8                	mov    eax,ebx
c000e4e8:	83 c4 14             	add    esp,0x14
c000e4eb:	5b                   	pop    ebx
c000e4ec:	c2 04 00             	ret    0x4
c000e4ef:	90                   	nop

c000e4f0 <Device::hibernate()>:
c000e4f0:	c3                   	ret    
c000e4f1:	90                   	nop

c000e4f2 <Device::wake()>:
c000e4f2:	c3                   	ret    
c000e4f3:	90                   	nop

c000e4f4 <Device::detect()>:
c000e4f4:	c3                   	ret    
c000e4f5:	90                   	nop

c000e4f6 <Device::disableLegacy()>:
c000e4f6:	c3                   	ret    
c000e4f7:	90                   	nop

c000e4f8 <Device::powerSaving(PowerSavingLevel)>:
c000e4f8:	c3                   	ret    
c000e4f9:	90                   	nop

c000e4fa <DriverlessDevice::close(int, int, void*)>:
c000e4fa:	31 c0                	xor    eax,eax
c000e4fc:	c3                   	ret    
c000e4fd:	90                   	nop

c000e4fe <DriverlessDevice::detect()>:
c000e4fe:	c3                   	ret    
c000e4ff:	90                   	nop

c000e500 <DriverlessDevice::open(int, int, void*)>:
c000e500:	83 ec 18             	sub    esp,0x18
c000e503:	68 30 55 02 c0       	push   0xc0025530
c000e508:	e8 a8 6c 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000e50d:	83 c8 ff             	or     eax,0xffffffff
c000e510:	83 c4 1c             	add    esp,0x1c
c000e513:	c3                   	ret    

c000e514 <Device::~Device()>:
c000e514:	ba 90 55 02 c0       	mov    edx,0xc0025590
c000e519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e51d:	89 10                	mov    DWORD PTR [eax],edx
c000e51f:	90                   	nop
c000e520:	c3                   	ret    
c000e521:	90                   	nop

c000e522 <Device::~Device()>:
c000e522:	83 ec 0c             	sub    esp,0xc
c000e525:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e529:	e8 e6 ff ff ff       	call   c000e514 <Device::~Device()>
c000e52e:	83 c4 04             	add    esp,0x4
c000e531:	83 ec 08             	sub    esp,0x8
c000e534:	68 58 01 00 00       	push   0x158
c000e539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e53d:	e8 b0 ea ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c000e542:	83 c4 10             	add    esp,0x10
c000e545:	83 c4 0c             	add    esp,0xc
c000e548:	c3                   	ret    
c000e549:	90                   	nop

c000e54a <Device::findAndLoadDriver()>:
c000e54a:	c7 44 24 04 4e 55 02 c0 	mov    DWORD PTR [esp+0x4],0xc002554e
c000e552:	e9 7c eb ff ff       	jmp    c000d0d3 <Dbg::kprintf(char const*, ...)>
c000e557:	90                   	nop

c000e558 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e558:	57                   	push   edi
c000e559:	b9 09 00 00 00       	mov    ecx,0x9
c000e55e:	56                   	push   esi
c000e55f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e563:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e567:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e571:	81 c7 18 01 00 00    	add    edi,0x118
c000e577:	fc                   	cld    
c000e578:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e57a:	5e                   	pop    esi
c000e57b:	5f                   	pop    edi
c000e57c:	c3                   	ret    
c000e57d:	90                   	nop

c000e57e <Device::preOpenACPI(void*, char*, char*)>:
c000e57e:	57                   	push   edi
c000e57f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e584:	56                   	push   esi
c000e585:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e589:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e58d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e597:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e59d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e5a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e5a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5a9:	b9 0e 00 00 00       	mov    ecx,0xe
c000e5ae:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e5b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5ba:	5e                   	pop    esi
c000e5bb:	5f                   	pop    edi
c000e5bc:	c3                   	ret    
c000e5bd:	90                   	nop

c000e5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e5be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5c2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e5c7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e5ce:	75 0b                	jne    c000e5db <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e5d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5d2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5d6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e5d9:	eb 1e                	jmp    c000e5f9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e5db:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000e5e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e5e6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e5ec:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e5ee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5f6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e5f9:	ff e0                	jmp    eax
c000e5fb:	90                   	nop

c000e5fc <Device::getParent()>:
c000e5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e600:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e606:	c3                   	ret    
c000e607:	90                   	nop

c000e608 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e60c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e611:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e618:	75 0b                	jne    c000e625 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e61a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e61c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e620:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e623:	eb 1e                	jmp    c000e643 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e625:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000e62a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e630:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e636:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e638:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e63c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e640:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e643:	ff e0                	jmp    eax
c000e645:	90                   	nop

c000e646 <Device::addChild(Device*)>:
c000e646:	53                   	push   ebx
c000e647:	83 ec 08             	sub    esp,0x8
c000e64a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e64e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e652:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e658:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e65e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e660:	85 d2                	test   edx,edx
c000e662:	74 04                	je     c000e668 <Device::addChild(Device*)+0x22>
c000e664:	89 d3                	mov    ebx,edx
c000e666:	eb f6                	jmp    c000e65e <Device::addChild(Device*)+0x18>
c000e668:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e66b:	83 ec 0c             	sub    esp,0xc
c000e66e:	6a 08                	push   0x8
c000e670:	e8 72 b7 ff ff       	call   c0009de7 <malloc>
c000e675:	89 03                	mov    DWORD PTR [ebx],eax
c000e677:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e67d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e684:	83 c4 18             	add    esp,0x18
c000e687:	5b                   	pop    ebx
c000e688:	c3                   	ret    
c000e689:	90                   	nop

c000e68a <Device::removeAllChildren()>:
c000e68a:	56                   	push   esi
c000e68b:	53                   	push   ebx
c000e68c:	52                   	push   edx
c000e68d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e691:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e697:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e69a:	74 17                	je     c000e6b3 <Device::removeAllChildren()+0x29>
c000e69c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e69f:	85 c0                	test   eax,eax
c000e6a1:	74 0c                	je     c000e6af <Device::removeAllChildren()+0x25>
c000e6a3:	83 ec 0c             	sub    esp,0xc
c000e6a6:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6a8:	50                   	push   eax
c000e6a9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e6ac:	83 c4 10             	add    esp,0x10
c000e6af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6b1:	eb e4                	jmp    c000e697 <Device::removeAllChildren()+0xd>
c000e6b3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e6b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6bf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e6c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6cc:	58                   	pop    eax
c000e6cd:	5b                   	pop    ebx
c000e6ce:	5e                   	pop    esi
c000e6cf:	c3                   	ret    

c000e6d0 <Device::hibernateAll()>:
c000e6d0:	53                   	push   ebx
c000e6d1:	83 ec 14             	sub    esp,0x14
c000e6d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6da:	53                   	push   ebx
c000e6db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e6de:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6e4:	83 c4 10             	add    esp,0x10
c000e6e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6ea:	74 0f                	je     c000e6fb <Device::hibernateAll()+0x2b>
c000e6ec:	83 ec 0c             	sub    esp,0xc
c000e6ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6f2:	e8 d9 ff ff ff       	call   c000e6d0 <Device::hibernateAll()>
c000e6f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6f9:	eb e9                	jmp    c000e6e4 <Device::hibernateAll()+0x14>
c000e6fb:	83 c4 08             	add    esp,0x8
c000e6fe:	5b                   	pop    ebx
c000e6ff:	c3                   	ret    

c000e700 <Device::wakeAll()>:
c000e700:	53                   	push   ebx
c000e701:	83 ec 14             	sub    esp,0x14
c000e704:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e708:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e70a:	53                   	push   ebx
c000e70b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e70e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e714:	83 c4 10             	add    esp,0x10
c000e717:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e71a:	74 0f                	je     c000e72b <Device::wakeAll()+0x2b>
c000e71c:	83 ec 0c             	sub    esp,0xc
c000e71f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e722:	e8 d9 ff ff ff       	call   c000e700 <Device::wakeAll()>
c000e727:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e729:	eb e9                	jmp    c000e714 <Device::wakeAll()+0x14>
c000e72b:	83 c4 08             	add    esp,0x8
c000e72e:	5b                   	pop    ebx
c000e72f:	c3                   	ret    

c000e730 <Device::detectAll()>:
c000e730:	53                   	push   ebx
c000e731:	83 ec 14             	sub    esp,0x14
c000e734:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e738:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e73a:	53                   	push   ebx
c000e73b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e73e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e744:	83 c4 10             	add    esp,0x10
c000e747:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e74a:	74 0f                	je     c000e75b <Device::detectAll()+0x2b>
c000e74c:	83 ec 0c             	sub    esp,0xc
c000e74f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e752:	e8 d9 ff ff ff       	call   c000e730 <Device::detectAll()>
c000e757:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e759:	eb e9                	jmp    c000e744 <Device::detectAll()+0x14>
c000e75b:	83 c4 08             	add    esp,0x8
c000e75e:	5b                   	pop    ebx
c000e75f:	c3                   	ret    

c000e760 <Device::disableLegacyAll()>:
c000e760:	53                   	push   ebx
c000e761:	83 ec 14             	sub    esp,0x14
c000e764:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e768:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e76a:	53                   	push   ebx
c000e76b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e76e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e774:	83 c4 10             	add    esp,0x10
c000e777:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e77a:	74 0f                	je     c000e78b <Device::disableLegacyAll()+0x2b>
c000e77c:	83 ec 0c             	sub    esp,0xc
c000e77f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e782:	e8 d9 ff ff ff       	call   c000e760 <Device::disableLegacyAll()>
c000e787:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e789:	eb e9                	jmp    c000e774 <Device::disableLegacyAll()+0x14>
c000e78b:	83 c4 08             	add    esp,0x8
c000e78e:	5b                   	pop    ebx
c000e78f:	c3                   	ret    

c000e790 <Device::loadDriversForAll()>:
c000e790:	53                   	push   ebx
c000e791:	83 ec 08             	sub    esp,0x8
c000e794:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e798:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e79f:	75 0c                	jne    c000e7ad <Device::loadDriversForAll()+0x1d>
c000e7a1:	83 ec 0c             	sub    esp,0xc
c000e7a4:	53                   	push   ebx
c000e7a5:	e8 a0 fd ff ff       	call   c000e54a <Device::findAndLoadDriver()>
c000e7aa:	83 c4 10             	add    esp,0x10
c000e7ad:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7b6:	74 12                	je     c000e7ca <Device::loadDriversForAll()+0x3a>
c000e7b8:	83 ec 0c             	sub    esp,0xc
c000e7bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7be:	e8 cd ff ff ff       	call   c000e790 <Device::loadDriversForAll()>
c000e7c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7c5:	83 c4 10             	add    esp,0x10
c000e7c8:	eb e9                	jmp    c000e7b3 <Device::loadDriversForAll()+0x23>
c000e7ca:	83 c4 08             	add    esp,0x8
c000e7cd:	5b                   	pop    ebx
c000e7ce:	c3                   	ret    
c000e7cf:	90                   	nop

c000e7d0 <Device::closeAll()>:
c000e7d0:	53                   	push   ebx
c000e7d1:	83 ec 08             	sub    esp,0x8
c000e7d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e7da:	6a 00                	push   0x0
c000e7dc:	6a 00                	push   0x0
c000e7de:	6a 00                	push   0x0
c000e7e0:	53                   	push   ebx
c000e7e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e7e4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7ea:	83 c4 10             	add    esp,0x10
c000e7ed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7f0:	74 0f                	je     c000e801 <Device::closeAll()+0x31>
c000e7f2:	83 ec 0c             	sub    esp,0xc
c000e7f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7f8:	e8 d3 ff ff ff       	call   c000e7d0 <Device::closeAll()>
c000e7fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7ff:	eb e9                	jmp    c000e7ea <Device::closeAll()+0x1a>
c000e801:	83 c4 08             	add    esp,0x8
c000e804:	5b                   	pop    ebx
c000e805:	c3                   	ret    

c000e806 <Device::powerSavingAll(PowerSavingLevel)>:
c000e806:	56                   	push   esi
c000e807:	53                   	push   ebx
c000e808:	83 ec 0c             	sub    esp,0xc
c000e80b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e80f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e813:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e815:	56                   	push   esi
c000e816:	53                   	push   ebx
c000e817:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e81a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e820:	83 c4 10             	add    esp,0x10
c000e823:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e826:	74 0f                	je     c000e837 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e828:	52                   	push   edx
c000e829:	52                   	push   edx
c000e82a:	56                   	push   esi
c000e82b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e82e:	e8 d3 ff ff ff       	call   c000e806 <Device::powerSavingAll(PowerSavingLevel)>
c000e833:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e835:	eb e9                	jmp    c000e820 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e837:	58                   	pop    eax
c000e838:	5b                   	pop    ebx
c000e839:	5e                   	pop    esi
c000e83a:	c3                   	ret    
c000e83b:	90                   	nop

c000e83c <Device::setName(char const*)>:
c000e83c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e844:	e9 07 1f ff ff       	jmp    c0000750 <strcpy>
c000e849:	90                   	nop

c000e84a <Device::Device(char const*)>:
c000e84a:	83 ec 1c             	sub    esp,0x1c
c000e84d:	ba 90 55 02 c0       	mov    edx,0xc0025590
c000e852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e856:	89 10                	mov    DWORD PTR [eax],edx
c000e858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e85c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e86a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e874:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e878:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e886:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e890:	83 ec 08             	sub    esp,0x8
c000e893:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e897:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e89b:	e8 9c ff ff ff       	call   c000e83c <Device::setName(char const*)>
c000e8a0:	83 c4 10             	add    esp,0x10
c000e8a3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e8ab:	83 ec 0c             	sub    esp,0xc
c000e8ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8b2:	e8 30 b5 ff ff       	call   c0009de7 <malloc>
c000e8b7:	83 c4 10             	add    esp,0x10
c000e8ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e8c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e8c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e8cb:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e8d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8d5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e8db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e8e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8e5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e8eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e8f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8f6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e8fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e901:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e90c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e91a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e928:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e936:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e940:	90                   	nop
c000e941:	83 c4 1c             	add    esp,0x1c
c000e944:	c3                   	ret    
c000e945:	90                   	nop

c000e946 <Device::getName()>:
c000e946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e94a:	05 d0 00 00 00       	add    eax,0xd0
c000e94f:	c3                   	ret    

c000e950 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e950:	83 ec 0c             	sub    esp,0xc
c000e953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e957:	83 ec 08             	sub    esp,0x8
c000e95a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e95e:	50                   	push   eax
c000e95f:	e8 e6 fe ff ff       	call   c000e84a <Device::Device(char const*)>
c000e964:	83 c4 10             	add    esp,0x10
c000e967:	ba bc 55 02 c0       	mov    edx,0xc00255bc
c000e96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e970:	89 10                	mov    DWORD PTR [eax],edx
c000e972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e976:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e980:	90                   	nop
c000e981:	83 c4 0c             	add    esp,0xc
c000e984:	c3                   	ret    
c000e985:	90                   	nop

c000e986 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e986:	57                   	push   edi
c000e987:	56                   	push   esi
c000e988:	53                   	push   ebx
c000e989:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e98d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e991:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e995:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e99b:	75 0c                	jne    c000e9a9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e99d:	52                   	push   edx
c000e99e:	52                   	push   edx
c000e99f:	53                   	push   ebx
c000e9a0:	56                   	push   esi
c000e9a1:	e8 9c 4a 01 00       	call   c0023442 <LinkedList<Device>::addElement(Device*)>
c000e9a6:	83 c4 10             	add    esp,0x10
c000e9a9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e9af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e9b2:	74 12                	je     c000e9c6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e9b4:	50                   	push   eax
c000e9b5:	57                   	push   edi
c000e9b6:	56                   	push   esi
c000e9b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e9ba:	e8 c7 ff ff ff       	call   c000e986 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e9bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e9c1:	83 c4 10             	add    esp,0x10
c000e9c4:	eb e9                	jmp    c000e9af <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e9c6:	5b                   	pop    ebx
c000e9c7:	5e                   	pop    esi
c000e9c8:	5f                   	pop    edi
c000e9c9:	c3                   	ret    

c000e9ca <getDevicesOfType(DeviceType)>:
c000e9ca:	53                   	push   ebx
c000e9cb:	83 ec 14             	sub    esp,0x14
c000e9ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e9d2:	53                   	push   ebx
c000e9d3:	e8 46 4b 01 00       	call   c002351e <LinkedList<Device>::LinkedList()>
c000e9d8:	83 c4 0c             	add    esp,0xc
c000e9db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9df:	53                   	push   ebx
c000e9e0:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c000e9e6:	e8 9b ff ff ff       	call   c000e986 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e9eb:	89 d8                	mov    eax,ebx
c000e9ed:	83 c4 18             	add    esp,0x18
c000e9f0:	5b                   	pop    ebx
c000e9f1:	c2 04 00             	ret    0x4

c000e9f4 <HardDiskController::HardDiskController(char const*)>:
c000e9f4:	83 ec 0c             	sub    esp,0xc
c000e9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9fb:	83 ec 08             	sub    esp,0x8
c000e9fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea02:	50                   	push   eax
c000ea03:	e8 42 fe ff ff       	call   c000e84a <Device::Device(char const*)>
c000ea08:	83 c4 10             	add    esp,0x10
c000ea0b:	ba e8 55 02 c0       	mov    edx,0xc00255e8
c000ea10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea14:	89 10                	mov    DWORD PTR [eax],edx
c000ea16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ea24:	90                   	nop
c000ea25:	83 c4 0c             	add    esp,0xc
c000ea28:	c3                   	ret    
c000ea29:	90                   	nop
c000ea2a:	66 90                	xchg   ax,ax

c000ea2c <HardDiskController::~HardDiskController()>:
c000ea2c:	83 ec 0c             	sub    esp,0xc
c000ea2f:	ba e8 55 02 c0       	mov    edx,0xc00255e8
c000ea34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea38:	89 10                	mov    DWORD PTR [eax],edx
c000ea3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3e:	83 ec 0c             	sub    esp,0xc
c000ea41:	50                   	push   eax
c000ea42:	e8 cd fa ff ff       	call   c000e514 <Device::~Device()>
c000ea47:	83 c4 10             	add    esp,0x10
c000ea4a:	90                   	nop
c000ea4b:	83 c4 0c             	add    esp,0xc
c000ea4e:	c3                   	ret    
c000ea4f:	90                   	nop

c000ea50 <HardDiskController::~HardDiskController()>:
c000ea50:	83 ec 0c             	sub    esp,0xc
c000ea53:	83 ec 0c             	sub    esp,0xc
c000ea56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea5a:	e8 cd ff ff ff       	call   c000ea2c <HardDiskController::~HardDiskController()>
c000ea5f:	83 c4 10             	add    esp,0x10
c000ea62:	83 ec 08             	sub    esp,0x8
c000ea65:	68 58 01 00 00       	push   0x158
c000ea6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea6e:	e8 7f e5 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c000ea73:	83 c4 10             	add    esp,0x10
c000ea76:	83 c4 0c             	add    esp,0xc
c000ea79:	c3                   	ret    

c000ea7a <PhysicalDisk::eject()>:
c000ea7a:	83 c8 ff             	or     eax,0xffffffff
c000ea7d:	c3                   	ret    

c000ea7e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ea7e:	83 ec 0c             	sub    esp,0xc
c000ea81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea85:	83 ec 08             	sub    esp,0x8
c000ea88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea8c:	50                   	push   eax
c000ea8d:	e8 b8 fd ff ff       	call   c000e84a <Device::Device(char const*)>
c000ea92:	83 c4 10             	add    esp,0x10
c000ea95:	ba 14 56 02 c0       	mov    edx,0xc0025614
c000ea9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9e:	89 10                	mov    DWORD PTR [eax],edx
c000eaa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaa4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000eab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaba:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000eac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eacc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ead2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000eae0:	90                   	nop
c000eae1:	83 c4 0c             	add    esp,0xc
c000eae4:	c3                   	ret    
c000eae5:	90                   	nop

c000eae6 <PhysicalDisk::startCache()>:
c000eae6:	56                   	push   esi
c000eae7:	53                   	push   ebx
c000eae8:	83 ec 10             	sub    esp,0x10
c000eaeb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaef:	6a 44                	push   0x44
c000eaf1:	e8 f1 b2 ff ff       	call   c0009de7 <malloc>
c000eaf6:	89 c6                	mov    esi,eax
c000eaf8:	58                   	pop    eax
c000eaf9:	5a                   	pop    edx
c000eafa:	53                   	push   ebx
c000eafb:	56                   	push   esi
c000eafc:	e8 6b 27 00 00       	call   c001126c <VCache::VCache(PhysicalDisk*)>
c000eb01:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000eb07:	83 c4 14             	add    esp,0x14
c000eb0a:	5b                   	pop    ebx
c000eb0b:	5e                   	pop    esi
c000eb0c:	c3                   	ret    
c000eb0d:	90                   	nop

c000eb0e <PhysicalDisk::~PhysicalDisk()>:
c000eb0e:	83 ec 0c             	sub    esp,0xc
c000eb11:	ba 14 56 02 c0       	mov    edx,0xc0025614
c000eb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1a:	89 10                	mov    DWORD PTR [eax],edx
c000eb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb20:	83 ec 0c             	sub    esp,0xc
c000eb23:	50                   	push   eax
c000eb24:	e8 eb f9 ff ff       	call   c000e514 <Device::~Device()>
c000eb29:	83 c4 10             	add    esp,0x10
c000eb2c:	90                   	nop
c000eb2d:	83 c4 0c             	add    esp,0xc
c000eb30:	c3                   	ret    
c000eb31:	90                   	nop

c000eb32 <PhysicalDisk::~PhysicalDisk()>:
c000eb32:	83 ec 0c             	sub    esp,0xc
c000eb35:	83 ec 0c             	sub    esp,0xc
c000eb38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb3c:	e8 cd ff ff ff       	call   c000eb0e <PhysicalDisk::~PhysicalDisk()>
c000eb41:	83 c4 10             	add    esp,0x10
c000eb44:	83 ec 08             	sub    esp,0x8
c000eb47:	68 6c 01 00 00       	push   0x16c
c000eb4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb50:	e8 9d e4 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c000eb55:	83 c4 10             	add    esp,0x10
c000eb58:	83 c4 0c             	add    esp,0xc
c000eb5b:	c3                   	ret    

c000eb5c <FPU::FPU(char const*)>:
c000eb5c:	83 ec 0c             	sub    esp,0xc
c000eb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb63:	83 ec 08             	sub    esp,0x8
c000eb66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb6a:	50                   	push   eax
c000eb6b:	e8 da fc ff ff       	call   c000e84a <Device::Device(char const*)>
c000eb70:	83 c4 10             	add    esp,0x10
c000eb73:	ba 74 56 02 c0       	mov    edx,0xc0025674
c000eb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb7c:	89 10                	mov    DWORD PTR [eax],edx
c000eb7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb82:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000eb8c:	90                   	nop
c000eb8d:	83 c4 0c             	add    esp,0xc
c000eb90:	c3                   	ret    
c000eb91:	90                   	nop
c000eb92:	66 90                	xchg   ax,ax

c000eb94 <FPU::~FPU()>:
c000eb94:	83 ec 0c             	sub    esp,0xc
c000eb97:	ba 74 56 02 c0       	mov    edx,0xc0025674
c000eb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba0:	89 10                	mov    DWORD PTR [eax],edx
c000eba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba6:	83 ec 0c             	sub    esp,0xc
c000eba9:	50                   	push   eax
c000ebaa:	e8 65 f9 ff ff       	call   c000e514 <Device::~Device()>
c000ebaf:	83 c4 10             	add    esp,0x10
c000ebb2:	90                   	nop
c000ebb3:	83 c4 0c             	add    esp,0xc
c000ebb6:	c3                   	ret    
c000ebb7:	90                   	nop

c000ebb8 <FPU::~FPU()>:
c000ebb8:	83 ec 0c             	sub    esp,0xc
c000ebbb:	83 ec 0c             	sub    esp,0xc
c000ebbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebc2:	e8 cd ff ff ff       	call   c000eb94 <FPU::~FPU()>
c000ebc7:	83 c4 10             	add    esp,0x10
c000ebca:	83 ec 08             	sub    esp,0x8
c000ebcd:	68 58 01 00 00       	push   0x158
c000ebd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebd6:	e8 17 e4 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c000ebdb:	83 c4 10             	add    esp,0x10
c000ebde:	83 c4 0c             	add    esp,0xc
c000ebe1:	c3                   	ret    

c000ebe2 <setupFPU()>:
c000ebe2:	53                   	push   ebx
c000ebe3:	83 ec 14             	sub    esp,0x14
c000ebe6:	68 44 56 02 c0       	push   0xc0025644
c000ebeb:	e8 e3 e4 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000ebf0:	8b 15 c8 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028bc8
c000ebf6:	83 c4 10             	add    esp,0x10
c000ebf9:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000ec00:	74 1a                	je     c000ec1c <setupFPU()+0x3a>
c000ec02:	83 ec 0c             	sub    esp,0xc
c000ec05:	68 58 01 00 00       	push   0x158
c000ec0a:	e8 d8 b1 ff ff       	call   c0009de7 <malloc>
c000ec0f:	89 c3                	mov    ebx,eax
c000ec11:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec14:	e8 a3 2e 01 00       	call   c0021abc <AVX::AVX()>
c000ec19:	eb 6d                	jmp    c000ec88 <setupFPU()+0xa6>
c000ec1b:	90                   	nop
c000ec1c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000ec22:	84 c0                	test   al,al
c000ec24:	79 1a                	jns    c000ec40 <setupFPU()+0x5e>
c000ec26:	83 ec 0c             	sub    esp,0xc
c000ec29:	68 58 01 00 00       	push   0x158
c000ec2e:	e8 b4 b1 ff ff       	call   c0009de7 <malloc>
c000ec33:	89 c3                	mov    ebx,eax
c000ec35:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec38:	e8 af 2f 01 00       	call   c0021bec <SSE::SSE()>
c000ec3d:	eb 49                	jmp    c000ec88 <setupFPU()+0xa6>
c000ec3f:	90                   	nop
c000ec40:	a8 20                	test   al,0x20
c000ec42:	74 1c                	je     c000ec60 <setupFPU()+0x7e>
c000ec44:	83 ec 0c             	sub    esp,0xc
c000ec47:	68 58 01 00 00       	push   0x158
c000ec4c:	e8 96 b1 ff ff       	call   c0009de7 <malloc>
c000ec51:	89 c3                	mov    ebx,eax
c000ec53:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec56:	e8 f5 2e 01 00       	call   c0021b50 <MMX::MMX()>
c000ec5b:	eb 2b                	jmp    c000ec88 <setupFPU()+0xa6>
c000ec5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec60:	a8 10                	test   al,0x10
c000ec62:	74 2c                	je     c000ec90 <setupFPU()+0xae>
c000ec64:	83 ec 0c             	sub    esp,0xc
c000ec67:	68 57 56 02 c0       	push   0xc0025657
c000ec6c:	e8 62 e4 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000ec71:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c000ec78:	e8 6a b1 ff ff       	call   c0009de7 <malloc>
c000ec7d:	89 c3                	mov    ebx,eax
c000ec7f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec82:	e8 f3 2f 01 00       	call   c0021c7a <x87::x87()>
c000ec87:	90                   	nop
c000ec88:	83 c4 10             	add    esp,0x10
c000ec8b:	eb 27                	jmp    c000ecb4 <setupFPU()+0xd2>
c000ec8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec90:	83 e0 ef             	and    eax,0xffffffef
c000ec93:	83 ec 0c             	sub    esp,0xc
c000ec96:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000ec9c:	68 61 56 02 c0       	push   0xc0025661
c000eca1:	e8 2d e4 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000eca6:	0f 20 c0             	mov    eax,cr0
c000eca9:	83 c8 04             	or     eax,0x4
c000ecac:	0f 22 c0             	mov    cr0,eax
c000ecaf:	31 db                	xor    ebx,ebx
c000ecb1:	83 c4 10             	add    esp,0x10
c000ecb4:	89 d8                	mov    eax,ebx
c000ecb6:	83 c4 08             	add    esp,0x8
c000ecb9:	5b                   	pop    ebx
c000ecba:	c3                   	ret    
c000ecbb:	90                   	nop

c000ecbc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ecbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ecc4:	c1 e0 04             	shl    eax,0x4
c000ecc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000eccb:	8d 50 10             	lea    edx,[eax+0x10]
c000ecce:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000ecd4:	74 08                	je     c000ecde <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000ecd6:	83 c0 04             	add    eax,0x4
c000ecd9:	39 d0                	cmp    eax,edx
c000ecdb:	75 f1                	jne    c000ecce <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000ecdd:	c3                   	ret    
c000ecde:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ece8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ecf2:	eb e2                	jmp    c000ecd6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ecf4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ecf4:	57                   	push   edi
c000ecf5:	31 c0                	xor    eax,eax
c000ecf7:	56                   	push   esi
c000ecf8:	53                   	push   ebx
c000ecf9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ecfd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed01:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ed05:	89 da                	mov    edx,ebx
c000ed07:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ed0b:	c1 e2 04             	shl    edx,0x4
c000ed0e:	01 ca                	add    edx,ecx
c000ed10:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000ed18:	74 16                	je     c000ed30 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000ed1a:	40                   	inc    eax
c000ed1b:	83 f8 04             	cmp    eax,0x4
c000ed1e:	75 f0                	jne    c000ed10 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ed20:	c7 44 24 10 a4 56 02 c0 	mov    DWORD PTR [esp+0x10],0xc00256a4
c000ed28:	5b                   	pop    ebx
c000ed29:	5e                   	pop    esi
c000ed2a:	5f                   	pop    edi
c000ed2b:	e9 85 64 00 00       	jmp    c00151b5 <Krnl::panic(char const*)>
c000ed30:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ed33:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ed36:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ed3c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ed42:	5b                   	pop    ebx
c000ed43:	5e                   	pop    esi
c000ed44:	5f                   	pop    edi
c000ed45:	c3                   	ret    

c000ed46 <doubleFault(regs*, void*)>:
c000ed46:	55                   	push   ebp
c000ed47:	89 e5                	mov    ebp,esp
c000ed49:	83 ec 08             	sub    esp,0x8
c000ed4c:	83 ec 0c             	sub    esp,0xc
c000ed4f:	68 b1 56 02 c0       	push   0xc00256b1
c000ed54:	e8 5c 64 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000ed59:	83 c4 10             	add    esp,0x10
c000ed5c:	90                   	nop
c000ed5d:	c9                   	leave  
c000ed5e:	c3                   	ret    
c000ed5f:	90                   	nop

c000ed60 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ed60:	56                   	push   esi
c000ed61:	53                   	push   ebx
c000ed62:	50                   	push   eax
c000ed63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ed67:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed6b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ed70:	75 35                	jne    c000eda7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ed72:	8d 43 20             	lea    eax,[ebx+0x20]
c000ed75:	31 d2                	xor    edx,edx
c000ed77:	89 c1                	mov    ecx,eax
c000ed79:	c1 e1 04             	shl    ecx,0x4
c000ed7c:	01 f1                	add    ecx,esi
c000ed7e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000ed86:	74 3e                	je     c000edc6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000ed88:	42                   	inc    edx
c000ed89:	83 fa 04             	cmp    edx,0x4
c000ed8c:	75 f0                	jne    c000ed7e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ed8e:	83 ec 0c             	sub    esp,0xc
c000ed91:	68 cb 56 02 c0       	push   0xc00256cb
c000ed96:	e8 1a 64 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000ed9b:	83 c4 10             	add    esp,0x10
c000ed9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eda3:	5a                   	pop    edx
c000eda4:	5b                   	pop    ebx
c000eda5:	5e                   	pop    esi
c000eda6:	c3                   	ret    
c000eda7:	83 ec 0c             	sub    esp,0xc
c000edaa:	56                   	push   esi
c000edab:	e8 96 fb ff ff       	call   c000e946 <Device::getName()>
c000edb0:	83 c4 10             	add    esp,0x10
c000edb3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000edb6:	75 ba                	jne    c000ed72 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000edb8:	83 fb 0f             	cmp    ebx,0xf
c000edbb:	7f 29                	jg     c000ede6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000edbd:	0f b6 9b c0 82 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd7d40]
c000edc4:	eb ac                	jmp    c000ed72 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000edc6:	8d 04 82             	lea    eax,[edx+eax*4]
c000edc9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edcd:	8d 04 86             	lea    eax,[esi+eax*4]
c000edd0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000edd6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000edda:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000ede0:	89 d8                	mov    eax,ebx
c000ede2:	5a                   	pop    edx
c000ede3:	5b                   	pop    ebx
c000ede4:	5e                   	pop    esi
c000ede5:	c3                   	ret    
c000ede6:	83 ec 0c             	sub    esp,0xc
c000ede9:	68 be 56 02 c0       	push   0xc00256be
c000edee:	e8 c2 63 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000edf3:	83 c4 10             	add    esp,0x10
c000edf6:	e9 77 ff ff ff       	jmp    c000ed72 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000edfb:	90                   	nop

c000edfc <InterruptController::clearAllHandlers(int, bool)>:
c000edfc:	56                   	push   esi
c000edfd:	53                   	push   ebx
c000edfe:	52                   	push   edx
c000edff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ee07:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ee0c:	75 61                	jne    c000ee6f <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ee0e:	8d 46 20             	lea    eax,[esi+0x20]
c000ee11:	c1 e6 04             	shl    esi,0x4
c000ee14:	c1 e0 04             	shl    eax,0x4
c000ee17:	01 de                	add    esi,ebx
c000ee19:	01 d8                	add    eax,ebx
c000ee1b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ee25:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ee2f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ee39:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ee43:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ee4d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ee57:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ee61:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ee6b:	58                   	pop    eax
c000ee6c:	5b                   	pop    ebx
c000ee6d:	5e                   	pop    esi
c000ee6e:	c3                   	ret    
c000ee6f:	83 ec 0c             	sub    esp,0xc
c000ee72:	53                   	push   ebx
c000ee73:	e8 ce fa ff ff       	call   c000e946 <Device::getName()>
c000ee78:	83 c4 10             	add    esp,0x10
c000ee7b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ee7e:	75 8e                	jne    c000ee0e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ee80:	83 fe 0f             	cmp    esi,0xf
c000ee83:	7f 09                	jg     c000ee8e <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ee85:	0f b6 b6 c0 82 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd7d40]
c000ee8c:	eb 80                	jmp    c000ee0e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ee8e:	83 ec 0c             	sub    esp,0xc
c000ee91:	68 d8 56 02 c0       	push   0xc00256d8
c000ee96:	e8 1a 63 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000ee9b:	83 c4 10             	add    esp,0x10
c000ee9e:	e9 6b ff ff ff       	jmp    c000ee0e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eea3:	90                   	nop

c000eea4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000eea4:	56                   	push   esi
c000eea5:	53                   	push   ebx
c000eea6:	52                   	push   edx
c000eea7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eeab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eeaf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000eeb4:	75 3a                	jne    c000eef0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000eeb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eeba:	8d 50 20             	lea    edx,[eax+0x20]
c000eebd:	c1 e2 04             	shl    edx,0x4
c000eec0:	8d 04 16             	lea    eax,[esi+edx*1]
c000eec3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000eec7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000eecd:	74 0b                	je     c000eeda <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000eecf:	83 c0 04             	add    eax,0x4
c000eed2:	39 d0                	cmp    eax,edx
c000eed4:	75 f1                	jne    c000eec7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000eed6:	58                   	pop    eax
c000eed7:	5b                   	pop    ebx
c000eed8:	5e                   	pop    esi
c000eed9:	c3                   	ret    
c000eeda:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000eee4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000eeee:	eb df                	jmp    c000eecf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000eef0:	83 ec 0c             	sub    esp,0xc
c000eef3:	56                   	push   esi
c000eef4:	e8 4d fa ff ff       	call   c000e946 <Device::getName()>
c000eef9:	83 c4 10             	add    esp,0x10
c000eefc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eeff:	75 b5                	jne    c000eeb6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ef01:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ef06:	7f 11                	jg     c000ef19 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ef08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef0c:	0f b6 80 c0 82 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7d40]
c000ef13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ef17:	eb 9d                	jmp    c000eeb6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ef19:	83 ec 0c             	sub    esp,0xc
c000ef1c:	68 e5 56 02 c0       	push   0xc00256e5
c000ef21:	e8 8f 62 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000ef26:	83 c4 10             	add    esp,0x10
c000ef29:	eb 8b                	jmp    c000eeb6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ef2b <nmiHandler(regs*, void*)>:
c000ef2b:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000ef30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef34:	e9 03 a6 ff ff       	jmp    c000953c <Computer::handleNMI()>

c000ef39 <int_handler>:
c000ef39:	55                   	push   ebp
c000ef3a:	57                   	push   edi
c000ef3b:	56                   	push   esi
c000ef3c:	53                   	push   ebx
c000ef3d:	83 ec 0c             	sub    esp,0xc
c000ef40:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ef44:	80 3d a4 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296a4,0x0
c000ef4b:	74 0b                	je     c000ef58 <int_handler+0x1f>
c000ef4d:	fa                   	cli    
c000ef4e:	f4                   	hlt    
c000ef4f:	80 3d a4 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296a4,0x0
c000ef56:	75 f5                	jne    c000ef4d <int_handler+0x14>
c000ef58:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000ef5d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ef60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ef66:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ef6c:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ef6f:	83 f8 17             	cmp    eax,0x17
c000ef72:	77 13                	ja     c000ef87 <int_handler+0x4e>
c000ef74:	83 ec 08             	sub    esp,0x8
c000ef77:	8b 17                	mov    edx,DWORD PTR [edi]
c000ef79:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ef7c:	0f b6 c0             	movzx  eax,al
c000ef7f:	50                   	push   eax
c000ef80:	57                   	push   edi
c000ef81:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000ef84:	83 c4 10             	add    esp,0x10
c000ef87:	83 c3 15             	add    ebx,0x15
c000ef8a:	c1 e3 04             	shl    ebx,0x4
c000ef8d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000ef91:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000ef98:	31 db                	xor    ebx,ebx
c000ef9a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ef9e:	85 c0                	test   eax,eax
c000efa0:	74 13                	je     c000efb5 <int_handler+0x7c>
c000efa2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000efa5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000efa9:	74 1c                	je     c000efc7 <int_handler+0x8e>
c000efab:	83 ec 08             	sub    esp,0x8
c000efae:	52                   	push   edx
c000efaf:	56                   	push   esi
c000efb0:	ff d0                	call   eax
c000efb2:	83 c4 10             	add    esp,0x10
c000efb5:	43                   	inc    ebx
c000efb6:	83 fb 04             	cmp    ebx,0x4
c000efb9:	75 df                	jne    c000ef9a <int_handler+0x61>
c000efbb:	83 c4 0c             	add    esp,0xc
c000efbe:	31 c0                	xor    eax,eax
c000efc0:	5b                   	pop    ebx
c000efc1:	31 d2                	xor    edx,edx
c000efc3:	5e                   	pop    esi
c000efc4:	5f                   	pop    edi
c000efc5:	5d                   	pop    ebp
c000efc6:	c3                   	ret    
c000efc7:	83 ec 08             	sub    esp,0x8
c000efca:	52                   	push   edx
c000efcb:	56                   	push   esi
c000efcc:	ff d0                	call   eax
c000efce:	83 c4 10             	add    esp,0x10
c000efd1:	83 c4 0c             	add    esp,0xc
c000efd4:	5b                   	pop    ebx
c000efd5:	5e                   	pop    esi
c000efd6:	5f                   	pop    edi
c000efd7:	5d                   	pop    ebp
c000efd8:	c3                   	ret    
c000efd9:	90                   	nop

c000efda <InterruptController::InterruptController(char const*)>:
c000efda:	83 ec 1c             	sub    esp,0x1c
c000efdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efe1:	83 ec 08             	sub    esp,0x8
c000efe4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efe8:	50                   	push   eax
c000efe9:	e8 5c f8 ff ff       	call   c000e84a <Device::Device(char const*)>
c000efee:	83 c4 10             	add    esp,0x10
c000eff1:	ba 1c 5a 02 c0       	mov    edx,0xc0025a1c
c000eff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000effa:	89 10                	mov    DWORD PTR [eax],edx
c000effc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f000:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000f00a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f012:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000f01a:	7f 5e                	jg     c000f07a <InterruptController::InterruptController(char const*)+0xa0>
c000f01c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f024:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000f029:	7f 49                	jg     c000f074 <InterruptController::InterruptController(char const*)+0x9a>
c000f02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f02f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f033:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000f03a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f03e:	01 ca                	add    edx,ecx
c000f040:	83 c2 54             	add    edx,0x54
c000f043:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000f04b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f04f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f053:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000f05a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f05e:	01 ca                	add    edx,ecx
c000f060:	81 c2 54 04 00 00    	add    edx,0x454
c000f066:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000f06e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000f072:	eb b0                	jmp    c000f024 <InterruptController::InterruptController(char const*)+0x4a>
c000f074:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000f078:	eb 98                	jmp    c000f012 <InterruptController::InterruptController(char const*)+0x38>
c000f07a:	90                   	nop
c000f07b:	83 c4 1c             	add    esp,0x1c
c000f07e:	c3                   	ret    
c000f07f:	90                   	nop

c000f080 <InterruptController::~InterruptController()>:
c000f080:	83 ec 0c             	sub    esp,0xc
c000f083:	ba 1c 5a 02 c0       	mov    edx,0xc0025a1c
c000f088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f08c:	89 10                	mov    DWORD PTR [eax],edx
c000f08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f092:	83 ec 0c             	sub    esp,0xc
c000f095:	50                   	push   eax
c000f096:	e8 79 f4 ff ff       	call   c000e514 <Device::~Device()>
c000f09b:	83 c4 10             	add    esp,0x10
c000f09e:	90                   	nop
c000f09f:	83 c4 0c             	add    esp,0xc
c000f0a2:	c3                   	ret    
c000f0a3:	90                   	nop

c000f0a4 <InterruptController::~InterruptController()>:
c000f0a4:	83 ec 0c             	sub    esp,0xc
c000f0a7:	83 ec 0c             	sub    esp,0xc
c000f0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0ae:	e8 cd ff ff ff       	call   c000f080 <InterruptController::~InterruptController()>
c000f0b3:	83 c4 10             	add    esp,0x10
c000f0b6:	83 ec 08             	sub    esp,0x8
c000f0b9:	68 58 21 00 00       	push   0x2158
c000f0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0c2:	e8 2b df ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c000f0c7:	83 c4 10             	add    esp,0x10
c000f0ca:	83 c4 0c             	add    esp,0xc
c000f0cd:	c3                   	ret    

c000f0ce <displayDebugInfo(regs*)>:
c000f0ce:	55                   	push   ebp
c000f0cf:	57                   	push   edi
c000f0d0:	56                   	push   esi
c000f0d1:	53                   	push   ebx
c000f0d2:	83 ec 24             	sub    esp,0x24
c000f0d5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f0d9:	0f 20 c2             	mov    edx,cr0
c000f0dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f0e0:	0f 20 d7             	mov    edi,cr2
c000f0e3:	0f 20 de             	mov    esi,cr3
c000f0e6:	0f 20 e5             	mov    ebp,cr4
c000f0e9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000f0ec:	68 f2 56 02 c0       	push   0xc00256f2
c000f0f1:	e8 dd df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f0f6:	59                   	pop    ecx
c000f0f7:	58                   	pop    eax
c000f0f8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f0fb:	68 fd 56 02 c0       	push   0xc00256fd
c000f100:	e8 ce df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f105:	58                   	pop    eax
c000f106:	5a                   	pop    edx
c000f107:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f10a:	68 08 57 02 c0       	push   0xc0025708
c000f10f:	e8 bf df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f114:	59                   	pop    ecx
c000f115:	58                   	pop    eax
c000f116:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f119:	68 13 57 02 c0       	push   0xc0025713
c000f11e:	e8 b0 df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f123:	58                   	pop    eax
c000f124:	5a                   	pop    edx
c000f125:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000f128:	68 1e 57 02 c0       	push   0xc002571e
c000f12d:	e8 a1 df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f132:	59                   	pop    ecx
c000f133:	58                   	pop    eax
c000f134:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000f137:	68 29 57 02 c0       	push   0xc0025729
c000f13c:	e8 92 df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f141:	58                   	pop    eax
c000f142:	5a                   	pop    edx
c000f143:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f146:	68 34 57 02 c0       	push   0xc0025734
c000f14b:	e8 83 df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f150:	59                   	pop    ecx
c000f151:	58                   	pop    eax
c000f152:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000f155:	68 3f 57 02 c0       	push   0xc002573f
c000f15a:	e8 74 df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f15f:	58                   	pop    eax
c000f160:	5a                   	pop    edx
c000f161:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f164:	68 4a 57 02 c0       	push   0xc002574a
c000f169:	e8 65 df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f16e:	59                   	pop    ecx
c000f16f:	58                   	pop    eax
c000f170:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f173:	68 59 57 02 c0       	push   0xc0025759
c000f178:	e8 56 df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f17d:	58                   	pop    eax
c000f17e:	5a                   	pop    edx
c000f17f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f182:	68 64 57 02 c0       	push   0xc0025764
c000f187:	e8 47 df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f18c:	59                   	pop    ecx
c000f18d:	58                   	pop    eax
c000f18e:	57                   	push   edi
c000f18f:	68 6f 57 02 c0       	push   0xc002576f
c000f194:	e8 3a df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f199:	58                   	pop    eax
c000f19a:	5a                   	pop    edx
c000f19b:	56                   	push   esi
c000f19c:	68 7a 57 02 c0       	push   0xc002577a
c000f1a1:	e8 2d df ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f1a6:	59                   	pop    ecx
c000f1a7:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f1ac:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1b2:	e8 2a bd ff ff       	call   c000aee1 <setActiveTerminal(VgaText*)>
c000f1b7:	58                   	pop    eax
c000f1b8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f1bb:	5a                   	pop    edx
c000f1bc:	c1 e0 05             	shl    eax,0x5
c000f1bf:	05 20 80 02 c0       	add    eax,0xc0028020
c000f1c4:	50                   	push   eax
c000f1c5:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f1ca:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1d0:	e8 19 c2 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f1d5:	59                   	pop    ecx
c000f1d6:	58                   	pop    eax
c000f1d7:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f1dc:	68 85 57 02 c0       	push   0xc0025785
c000f1e1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1e7:	e8 02 c2 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f1ec:	58                   	pop    eax
c000f1ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f1f2:	5a                   	pop    edx
c000f1f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1f6:	83 c0 0c             	add    eax,0xc
c000f1f9:	50                   	push   eax
c000f1fa:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f1ff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f205:	e8 e4 c1 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f20a:	59                   	pop    ecx
c000f20b:	58                   	pop    eax
c000f20c:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f211:	68 8e 57 02 c0       	push   0xc002578e
c000f216:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f21c:	e8 cd c1 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f221:	58                   	pop    eax
c000f222:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f227:	5a                   	pop    edx
c000f228:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f22b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f231:	e8 72 c1 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f236:	59                   	pop    ecx
c000f237:	58                   	pop    eax
c000f238:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f23d:	68 96 57 02 c0       	push   0xc0025796
c000f242:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f248:	e8 a1 c1 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f24d:	58                   	pop    eax
c000f24e:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f253:	5a                   	pop    edx
c000f254:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f257:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f25d:	e8 46 c1 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f262:	59                   	pop    ecx
c000f263:	58                   	pop    eax
c000f264:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f269:	68 9e 57 02 c0       	push   0xc002579e
c000f26e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f274:	e8 75 c1 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f279:	58                   	pop    eax
c000f27a:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f27f:	5a                   	pop    edx
c000f280:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f283:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f289:	e8 1a c1 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f28e:	59                   	pop    ecx
c000f28f:	58                   	pop    eax
c000f290:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f295:	68 a6 57 02 c0       	push   0xc00257a6
c000f29a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2a0:	e8 49 c1 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f2a5:	58                   	pop    eax
c000f2a6:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f2ab:	5a                   	pop    edx
c000f2ac:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000f2af:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2b5:	e8 ee c0 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f2ba:	59                   	pop    ecx
c000f2bb:	58                   	pop    eax
c000f2bc:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f2c1:	68 ae 57 02 c0       	push   0xc00257ae
c000f2c6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2cc:	e8 1d c1 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f2d1:	58                   	pop    eax
c000f2d2:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f2d7:	5a                   	pop    edx
c000f2d8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f2db:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2e1:	e8 c2 c0 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f2e6:	59                   	pop    ecx
c000f2e7:	58                   	pop    eax
c000f2e8:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f2ed:	68 b6 57 02 c0       	push   0xc00257b6
c000f2f2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2f8:	e8 f1 c0 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f2fd:	58                   	pop    eax
c000f2fe:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f303:	5a                   	pop    edx
c000f304:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f307:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f30d:	e8 96 c0 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f312:	59                   	pop    ecx
c000f313:	58                   	pop    eax
c000f314:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f319:	68 be 57 02 c0       	push   0xc00257be
c000f31e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f324:	e8 c5 c0 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f329:	58                   	pop    eax
c000f32a:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f32f:	5a                   	pop    edx
c000f330:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f334:	52                   	push   edx
c000f335:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f33b:	e8 68 c0 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f340:	59                   	pop    ecx
c000f341:	58                   	pop    eax
c000f342:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f347:	68 c7 57 02 c0       	push   0xc00257c7
c000f34c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f352:	e8 97 c0 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f357:	58                   	pop    eax
c000f358:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f35d:	5a                   	pop    edx
c000f35e:	57                   	push   edi
c000f35f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f365:	e8 3e c0 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f36a:	59                   	pop    ecx
c000f36b:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f370:	5f                   	pop    edi
c000f371:	68 cf 57 02 c0       	push   0xc00257cf
c000f376:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f37c:	e8 6d c0 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f381:	58                   	pop    eax
c000f382:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f387:	5a                   	pop    edx
c000f388:	56                   	push   esi
c000f389:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f38f:	e8 14 c0 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f394:	59                   	pop    ecx
c000f395:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f39a:	5e                   	pop    esi
c000f39b:	68 d7 57 02 c0       	push   0xc00257d7
c000f3a0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3a6:	e8 43 c0 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f3ab:	5f                   	pop    edi
c000f3ac:	58                   	pop    eax
c000f3ad:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f3b2:	55                   	push   ebp
c000f3b3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3b9:	e8 ea bf ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f3be:	58                   	pop    eax
c000f3bf:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f3c4:	5a                   	pop    edx
c000f3c5:	68 df 57 02 c0       	push   0xc00257df
c000f3ca:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3d0:	e8 19 c0 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f3d5:	0f 21 c0             	mov    eax,db0
c000f3d8:	59                   	pop    ecx
c000f3d9:	5e                   	pop    esi
c000f3da:	50                   	push   eax
c000f3db:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f3e0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3e6:	e8 bd bf ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f3eb:	5f                   	pop    edi
c000f3ec:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f3f1:	5d                   	pop    ebp
c000f3f2:	68 e8 57 02 c0       	push   0xc00257e8
c000f3f7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3fd:	e8 ec bf ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f402:	0f 21 c8             	mov    eax,db1
c000f405:	5a                   	pop    edx
c000f406:	59                   	pop    ecx
c000f407:	50                   	push   eax
c000f408:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f40d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f413:	e8 90 bf ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f418:	5e                   	pop    esi
c000f419:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f41e:	5f                   	pop    edi
c000f41f:	68 f0 57 02 c0       	push   0xc00257f0
c000f424:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f42a:	e8 bf bf ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f42f:	0f 21 d0             	mov    eax,db2
c000f432:	5d                   	pop    ebp
c000f433:	5a                   	pop    edx
c000f434:	50                   	push   eax
c000f435:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f43a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f440:	e8 63 bf ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f445:	59                   	pop    ecx
c000f446:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f44b:	5e                   	pop    esi
c000f44c:	68 f8 57 02 c0       	push   0xc00257f8
c000f451:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f457:	e8 92 bf ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f45c:	0f 21 d8             	mov    eax,db3
c000f45f:	5f                   	pop    edi
c000f460:	5d                   	pop    ebp
c000f461:	50                   	push   eax
c000f462:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f467:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f46d:	e8 36 bf ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f472:	58                   	pop    eax
c000f473:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f478:	5a                   	pop    edx
c000f479:	68 00 58 02 c0       	push   0xc0025800
c000f47e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f484:	e8 65 bf ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f489:	0f 21 f0             	mov    eax,db6
c000f48c:	59                   	pop    ecx
c000f48d:	5e                   	pop    esi
c000f48e:	50                   	push   eax
c000f48f:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f494:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f49a:	e8 09 bf ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f49f:	5f                   	pop    edi
c000f4a0:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f4a5:	5d                   	pop    ebp
c000f4a6:	68 08 58 02 c0       	push   0xc0025808
c000f4ab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4b1:	e8 38 bf ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f4b6:	0f 21 f8             	mov    eax,db7
c000f4b9:	5a                   	pop    edx
c000f4ba:	59                   	pop    ecx
c000f4bb:	50                   	push   eax
c000f4bc:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f4c1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4c7:	e8 dc be ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f4cc:	5e                   	pop    esi
c000f4cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f4d0:	e8 f0 8f 00 00       	call   c00184c5 <Thr::getDriverNameFromAddress(unsigned long)>
c000f4d5:	83 c4 10             	add    esp,0x10
c000f4d8:	85 c0                	test   eax,eax
c000f4da:	74 7d                	je     c000f559 <displayDebugInfo(regs*)+0x48b>
c000f4dc:	89 c6                	mov    esi,eax
c000f4de:	50                   	push   eax
c000f4df:	50                   	push   eax
c000f4e0:	56                   	push   esi
c000f4e1:	68 10 58 02 c0       	push   0xc0025810
c000f4e6:	e8 e8 db ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f4eb:	5a                   	pop    edx
c000f4ec:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f4f1:	59                   	pop    ecx
c000f4f2:	68 1e 58 02 c0       	push   0xc002581e
c000f4f7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4fd:	e8 ec be ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f502:	5f                   	pop    edi
c000f503:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f508:	5d                   	pop    ebp
c000f509:	56                   	push   esi
c000f50a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f510:	e8 d9 be ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f515:	58                   	pop    eax
c000f516:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f51b:	5a                   	pop    edx
c000f51c:	68 2a 58 02 c0       	push   0xc002582a
c000f521:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f527:	e8 c2 be ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c000f52c:	59                   	pop    ecx
c000f52d:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f532:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f538:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f53b:	e8 bc 8f 00 00       	call   c00184fc <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f540:	5b                   	pop    ebx
c000f541:	5d                   	pop    ebp
c000f542:	50                   	push   eax
c000f543:	57                   	push   edi
c000f544:	e8 5f be ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c000f549:	58                   	pop    eax
c000f54a:	5a                   	pop    edx
c000f54b:	56                   	push   esi
c000f54c:	68 36 58 02 c0       	push   0xc0025836
c000f551:	e8 7d db ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f556:	83 c4 10             	add    esp,0x10
c000f559:	fa                   	cli    
c000f55a:	f4                   	hlt    
c000f55b:	eb fe                	jmp    c000f55b <displayDebugInfo(regs*)+0x48d>

c000f55d <x87EmulHandler(regs*, void*)>:
c000f55d:	53                   	push   ebx
c000f55e:	83 ec 14             	sub    esp,0x14
c000f561:	68 46 58 02 c0       	push   0xc0025846
c000f566:	e8 68 db ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f56b:	0f 20 c2             	mov    edx,cr0
c000f56e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f573:	83 c4 10             	add    esp,0x10
c000f576:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f57a:	0f 85 0f 01 00 00    	jne    c000f68f <x87EmulHandler(regs*, void*)+0x132>
c000f580:	f6 05 e1 8b 02 c0 40 	test   BYTE PTR ds:0xc0028be1,0x40
c000f587:	75 30                	jne    c000f5b9 <x87EmulHandler(regs*, void*)+0x5c>
c000f589:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000f58e:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f594:	85 c0                	test   eax,eax
c000f596:	74 05                	je     c000f59d <x87EmulHandler(regs*, void*)+0x40>
c000f598:	83 e2 08             	and    edx,0x8
c000f59b:	75 23                	jne    c000f5c0 <x87EmulHandler(regs*, void*)+0x63>
c000f59d:	83 ec 0c             	sub    esp,0xc
c000f5a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a4:	e8 81 b4 00 00       	call   c001aa2a <Vm::x87Handler(regs*)>
c000f5a9:	83 c4 10             	add    esp,0x10
c000f5ac:	84 c0                	test   al,al
c000f5ae:	0f 84 db 00 00 00    	je     c000f68f <x87EmulHandler(regs*, void*)+0x132>
c000f5b4:	83 c4 08             	add    esp,0x8
c000f5b7:	5b                   	pop    ebx
c000f5b8:	c3                   	ret    
c000f5b9:	0f 06                	clts   
c000f5bb:	83 c4 08             	add    esp,0x8
c000f5be:	5b                   	pop    ebx
c000f5bf:	c3                   	ret    
c000f5c0:	83 ec 0c             	sub    esp,0xc
c000f5c3:	68 76 58 02 c0       	push   0xc0025876
c000f5c8:	e8 06 db ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f5cd:	0f 06                	clts   
c000f5cf:	a1 08 8d 02 c0       	mov    eax,ds:0xc0028d08
c000f5d4:	83 c4 10             	add    esp,0x10
c000f5d7:	85 c0                	test   eax,eax
c000f5d9:	74 33                	je     c000f60e <x87EmulHandler(regs*, void*)+0xb1>
c000f5db:	83 ec 0c             	sub    esp,0xc
c000f5de:	68 83 58 02 c0       	push   0xc0025883
c000f5e3:	e8 eb da ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f5e8:	59                   	pop    ecx
c000f5e9:	a1 08 8d 02 c0       	mov    eax,ds:0xc0028d08
c000f5ee:	5b                   	pop    ebx
c000f5ef:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f5f2:	8b 15 c8 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028bc8
c000f5f8:	83 c0 3f             	add    eax,0x3f
c000f5fb:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f601:	83 e0 c0             	and    eax,0xffffffc0
c000f604:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f606:	50                   	push   eax
c000f607:	52                   	push   edx
c000f608:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000f60b:	83 c4 10             	add    esp,0x10
c000f60e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f613:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f616:	85 c0                	test   eax,eax
c000f618:	74 4e                	je     c000f668 <x87EmulHandler(regs*, void*)+0x10b>
c000f61a:	83 ec 0c             	sub    esp,0xc
c000f61d:	68 af 58 02 c0       	push   0xc00258af
c000f622:	e8 ac da ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f627:	59                   	pop    ecx
c000f628:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f62d:	5b                   	pop    ebx
c000f62e:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f631:	8b 15 c8 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028bc8
c000f637:	83 c0 3f             	add    eax,0x3f
c000f63a:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f640:	83 e0 c0             	and    eax,0xffffffc0
c000f643:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f645:	50                   	push   eax
c000f646:	52                   	push   edx
c000f647:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000f64a:	c7 04 24 c5 58 02 c0 	mov    DWORD PTR [esp],0xc00258c5
c000f651:	e8 7d da ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f656:	83 c4 10             	add    esp,0x10
c000f659:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f65e:	a3 08 8d 02 c0       	mov    ds:0xc0028d08,eax
c000f663:	83 c4 08             	add    esp,0x8
c000f666:	5b                   	pop    ebx
c000f667:	c3                   	ret    
c000f668:	83 ec 0c             	sub    esp,0xc
c000f66b:	68 96 58 02 c0       	push   0xc0025896
c000f670:	e8 5e da ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f675:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c000f67b:	c7 04 24 40 02 00 00 	mov    DWORD PTR [esp],0x240
c000f682:	e8 60 a7 ff ff       	call   c0009de7 <malloc>
c000f687:	83 c4 10             	add    esp,0x10
c000f68a:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c000f68d:	eb ca                	jmp    c000f659 <x87EmulHandler(regs*, void*)+0xfc>
c000f68f:	83 ec 0c             	sub    esp,0xc
c000f692:	68 60 58 02 c0       	push   0xc0025860
c000f697:	e8 37 da ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f69c:	58                   	pop    eax
c000f69d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6a1:	e8 28 fa ff ff       	call   c000f0ce <displayDebugInfo(regs*)>

c000f6a6 <gpFault(regs*, void*)>:
c000f6a6:	53                   	push   ebx
c000f6a7:	83 ec 14             	sub    esp,0x14
c000f6aa:	c7 05 04 8d 02 c0 e7 9e 01 c0 	mov    DWORD PTR ds:0xc0028d04,0xc0019ee7
c000f6b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f6b8:	53                   	push   ebx
c000f6b9:	e8 29 a8 00 00       	call   c0019ee7 <Vm::faultHandler(regs*)>
c000f6be:	83 c4 10             	add    esp,0x10
c000f6c1:	84 c0                	test   al,al
c000f6c3:	74 05                	je     c000f6ca <gpFault(regs*, void*)+0x24>
c000f6c5:	83 c4 08             	add    esp,0x8
c000f6c8:	5b                   	pop    ebx
c000f6c9:	c3                   	ret    
c000f6ca:	83 ec 0c             	sub    esp,0xc
c000f6cd:	68 da 58 02 c0       	push   0xc00258da
c000f6d2:	e8 fc d9 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f6d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6da:	e8 ef f9 ff ff       	call   c000f0ce <displayDebugInfo(regs*)>

c000f6df <pgFault(regs*, void*)>:
c000f6df:	53                   	push   ebx
c000f6e0:	83 ec 10             	sub    esp,0x10
c000f6e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f6e7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f6ea:	68 f5 58 02 c0       	push   0xc00258f5
c000f6ef:	e8 df d9 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f6f4:	0f 20 d0             	mov    eax,cr2
c000f6f7:	5a                   	pop    edx
c000f6f8:	59                   	pop    ecx
c000f6f9:	50                   	push   eax
c000f6fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f702:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f708:	e8 41 d5 ff ff       	call   c000cc4e <VAS::tryLoadBackOffDisk(unsigned long)>
c000f70d:	83 c4 10             	add    esp,0x10
c000f710:	84 c0                	test   al,al
c000f712:	74 05                	je     c000f719 <pgFault(regs*, void*)+0x3a>
c000f714:	83 c4 08             	add    esp,0x8
c000f717:	5b                   	pop    ebx
c000f718:	c3                   	ret    
c000f719:	83 ec 0c             	sub    esp,0xc
c000f71c:	68 0a 59 02 c0       	push   0xc002590a
c000f721:	e8 ad d9 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f726:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f729:	e8 a0 f9 ff ff       	call   c000f0ce <displayDebugInfo(regs*)>

c000f72e <otherISRHandler(regs*, void*)>:
c000f72e:	53                   	push   ebx
c000f72f:	83 ec 0c             	sub    esp,0xc
c000f732:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f736:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f739:	50                   	push   eax
c000f73a:	50                   	push   eax
c000f73b:	68 17 59 02 c0       	push   0xc0025917
c000f740:	e8 8e d9 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f745:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f748:	e8 81 f9 ff ff       	call   c000f0ce <displayDebugInfo(regs*)>

c000f74d <opcodeFault(regs*, void*)>:
c000f74d:	55                   	push   ebp
c000f74e:	89 e5                	mov    ebp,esp
c000f750:	56                   	push   esi
c000f751:	53                   	push   ebx
c000f752:	83 ec 30             	sub    esp,0x30
c000f755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f758:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f75b:	83 ec 08             	sub    esp,0x8
c000f75e:	50                   	push   eax
c000f75f:	68 34 59 02 c0       	push   0xc0025934
c000f764:	e8 6a d9 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f769:	83 c4 10             	add    esp,0x10
c000f76c:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000f771:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f777:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f77d:	84 c0                	test   al,al
c000f77f:	74 24                	je     c000f7a5 <opcodeFault(regs*, void*)+0x58>
c000f781:	83 ec 0c             	sub    esp,0xc
c000f784:	68 44 59 02 c0       	push   0xc0025944
c000f789:	e8 45 d9 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000f78e:	83 c4 10             	add    esp,0x10
c000f791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f794:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f797:	8d 50 19             	lea    edx,[eax+0x19]
c000f79a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f79d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7a0:	e9 7b 03 00 00       	jmp    c000fb20 <opcodeFault(regs*, void*)+0x3d3>
c000f7a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f7ae:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f7b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7b5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7b8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f7bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7be:	8a 00                	mov    al,BYTE PTR [eax]
c000f7c0:	3c f0                	cmp    al,0xf0
c000f7c2:	75 17                	jne    c000f7db <opcodeFault(regs*, void*)+0x8e>
c000f7c4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f7c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7cd:	8d 50 01             	lea    edx,[eax+0x1]
c000f7d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7d3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7d6:	e9 d6 00 00 00       	jmp    c000f8b1 <opcodeFault(regs*, void*)+0x164>
c000f7db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7de:	8a 00                	mov    al,BYTE PTR [eax]
c000f7e0:	3c f2                	cmp    al,0xf2
c000f7e2:	74 09                	je     c000f7ed <opcodeFault(regs*, void*)+0xa0>
c000f7e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7e7:	8a 00                	mov    al,BYTE PTR [eax]
c000f7e9:	3c f3                	cmp    al,0xf3
c000f7eb:	75 1b                	jne    c000f808 <opcodeFault(regs*, void*)+0xbb>
c000f7ed:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f7f1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f7f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7fa:	8d 50 01             	lea    edx,[eax+0x1]
c000f7fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f800:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f803:	e9 a9 00 00 00       	jmp    c000f8b1 <opcodeFault(regs*, void*)+0x164>
c000f808:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f80b:	8a 00                	mov    al,BYTE PTR [eax]
c000f80d:	3c 66                	cmp    al,0x66
c000f80f:	75 1b                	jne    c000f82c <opcodeFault(regs*, void*)+0xdf>
c000f811:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f815:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f81b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f81e:	8d 50 01             	lea    edx,[eax+0x1]
c000f821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f824:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f827:	e9 85 00 00 00       	jmp    c000f8b1 <opcodeFault(regs*, void*)+0x164>
c000f82c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f82f:	8a 00                	mov    al,BYTE PTR [eax]
c000f831:	3c 67                	cmp    al,0x67
c000f833:	75 18                	jne    c000f84d <opcodeFault(regs*, void*)+0x100>
c000f835:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f839:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f83c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f83f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f842:	8d 50 01             	lea    edx,[eax+0x1]
c000f845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f848:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f84b:	eb 64                	jmp    c000f8b1 <opcodeFault(regs*, void*)+0x164>
c000f84d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f850:	8a 00                	mov    al,BYTE PTR [eax]
c000f852:	3c 2e                	cmp    al,0x2e
c000f854:	74 09                	je     c000f85f <opcodeFault(regs*, void*)+0x112>
c000f856:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f859:	8a 00                	mov    al,BYTE PTR [eax]
c000f85b:	3c 3e                	cmp    al,0x3e
c000f85d:	75 18                	jne    c000f877 <opcodeFault(regs*, void*)+0x12a>
c000f85f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f863:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f869:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f86c:	8d 50 01             	lea    edx,[eax+0x1]
c000f86f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f872:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f875:	eb 3a                	jmp    c000f8b1 <opcodeFault(regs*, void*)+0x164>
c000f877:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f87a:	8a 00                	mov    al,BYTE PTR [eax]
c000f87c:	3c 36                	cmp    al,0x36
c000f87e:	74 1b                	je     c000f89b <opcodeFault(regs*, void*)+0x14e>
c000f880:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f883:	8a 00                	mov    al,BYTE PTR [eax]
c000f885:	3c 26                	cmp    al,0x26
c000f887:	74 12                	je     c000f89b <opcodeFault(regs*, void*)+0x14e>
c000f889:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f88c:	8a 00                	mov    al,BYTE PTR [eax]
c000f88e:	3c 64                	cmp    al,0x64
c000f890:	74 09                	je     c000f89b <opcodeFault(regs*, void*)+0x14e>
c000f892:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f895:	8a 00                	mov    al,BYTE PTR [eax]
c000f897:	3c 65                	cmp    al,0x65
c000f899:	75 16                	jne    c000f8b1 <opcodeFault(regs*, void*)+0x164>
c000f89b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f89f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f8a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f8a8:	8d 50 01             	lea    edx,[eax+0x1]
c000f8ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f8b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8b4:	8a 00                	mov    al,BYTE PTR [eax]
c000f8b6:	3c 0f                	cmp    al,0xf
c000f8b8:	0f 85 8d 01 00 00    	jne    c000fa4b <opcodeFault(regs*, void*)+0x2fe>
c000f8be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8c1:	40                   	inc    eax
c000f8c2:	8a 00                	mov    al,BYTE PTR [eax]
c000f8c4:	3c c7                	cmp    al,0xc7
c000f8c6:	0f 85 7f 01 00 00    	jne    c000fa4b <opcodeFault(regs*, void*)+0x2fe>
c000f8cc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f8cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f8d5:	8d 50 01             	lea    edx,[eax+0x1]
c000f8d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8db:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f8de:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f8e1:	50                   	push   eax
c000f8e2:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f8e5:	50                   	push   eax
c000f8e6:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f8e9:	50                   	push   eax
c000f8ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f8ed:	e8 dc 4f 00 00       	call   c00148ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f8f2:	83 c4 10             	add    esp,0x10
c000f8f5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f8f8:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f8fb:	83 f0 01             	xor    eax,0x1
c000f8fe:	84 c0                	test   al,al
c000f900:	0f 84 45 01 00 00    	je     c000fa4b <opcodeFault(regs*, void*)+0x2fe>
c000f906:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f909:	3c 01                	cmp    al,0x1
c000f90b:	0f 85 3a 01 00 00    	jne    c000fa4b <opcodeFault(regs*, void*)+0x2fe>
c000f911:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f914:	83 f0 01             	xor    eax,0x1
c000f917:	84 c0                	test   al,al
c000f919:	0f 84 2c 01 00 00    	je     c000fa4b <opcodeFault(regs*, void*)+0x2fe>
c000f91f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f922:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f925:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f928:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f92f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f932:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f935:	89 c2                	mov    edx,eax
c000f937:	b8 00 00 00 00       	mov    eax,0x0
c000f93c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f93f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f945:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f948:	ba 00 00 00 00       	mov    edx,0x0
c000f94d:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f950:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f956:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f959:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f95c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f963:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f966:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f969:	89 c2                	mov    edx,eax
c000f96b:	b8 00 00 00 00       	mov    eax,0x0
c000f970:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f973:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f979:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f97c:	ba 00 00 00 00       	mov    edx,0x0
c000f981:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f984:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f987:	fa                   	cli    
c000f988:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000f98d:	40                   	inc    eax
c000f98e:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000f993:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f996:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f999:	8b 00                	mov    eax,DWORD PTR [eax]
c000f99b:	89 c1                	mov    ecx,eax
c000f99d:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f9a0:	89 cb                	mov    ebx,ecx
c000f9a2:	89 d0                	mov    eax,edx
c000f9a4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f9a7:	89 c6                	mov    esi,eax
c000f9a9:	89 f0                	mov    eax,esi
c000f9ab:	09 d8                	or     eax,ebx
c000f9ad:	85 c0                	test   eax,eax
c000f9af:	75 21                	jne    c000f9d2 <opcodeFault(regs*, void*)+0x285>
c000f9b1:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f9b4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f9b7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f9ba:	89 01                	mov    DWORD PTR [ecx],eax
c000f9bc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f9bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9c5:	83 c8 40             	or     eax,0x40
c000f9c8:	89 c2                	mov    edx,eax
c000f9ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9cd:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f9d0:	eb 3e                	jmp    c000fa10 <opcodeFault(regs*, void*)+0x2c3>
c000f9d2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f9d5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f9d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9da:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f9dd:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f9e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f9e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f9e9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f9ec:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f9ef:	89 d0                	mov    eax,edx
c000f9f1:	31 d2                	xor    edx,edx
c000f9f3:	89 c3                	mov    ebx,eax
c000f9f5:	89 d6                	mov    esi,edx
c000f9f7:	89 da                	mov    edx,ebx
c000f9f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9fc:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f9ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa02:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa05:	83 e0 bf             	and    eax,0xffffffbf
c000fa08:	89 c2                	mov    edx,eax
c000fa0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa0d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fa10:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000fa15:	48                   	dec    eax
c000fa16:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000fa1b:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000fa20:	85 c0                	test   eax,eax
c000fa22:	75 01                	jne    c000fa25 <opcodeFault(regs*, void*)+0x2d8>
c000fa24:	fb                   	sti    
c000fa25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa28:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa2b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000fa2e:	01 c2                	add    edx,eax
c000fa30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa33:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000fa36:	83 ec 0c             	sub    esp,0xc
c000fa39:	68 67 59 02 c0       	push   0xc0025967
c000fa3e:	e8 90 d6 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000fa43:	83 c4 10             	add    esp,0x10
c000fa46:	e9 d5 00 00 00       	jmp    c000fb20 <opcodeFault(regs*, void*)+0x3d3>
c000fa4b:	83 ec 0c             	sub    esp,0xc
c000fa4e:	68 7a 59 02 c0       	push   0xc002597a
c000fa53:	e8 7b d6 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000fa58:	83 c4 10             	add    esp,0x10
c000fa5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa5e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fa61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa64:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa67:	c1 e0 04             	shl    eax,0x4
c000fa6a:	01 d0                	add    eax,edx
c000fa6c:	83 c0 03             	add    eax,0x3
c000fa6f:	8a 00                	mov    al,BYTE PTR [eax]
c000fa71:	0f b6 d8             	movzx  ebx,al
c000fa74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa77:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fa7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa7d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa80:	c1 e0 04             	shl    eax,0x4
c000fa83:	01 d0                	add    eax,edx
c000fa85:	83 c0 02             	add    eax,0x2
c000fa88:	8a 00                	mov    al,BYTE PTR [eax]
c000fa8a:	0f b6 c8             	movzx  ecx,al
c000fa8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa90:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fa93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa99:	c1 e0 04             	shl    eax,0x4
c000fa9c:	01 d0                	add    eax,edx
c000fa9e:	40                   	inc    eax
c000fa9f:	8a 00                	mov    al,BYTE PTR [eax]
c000faa1:	0f b6 d0             	movzx  edx,al
c000faa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faa7:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000faaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fab0:	c1 e0 04             	shl    eax,0x4
c000fab3:	01 f0                	add    eax,esi
c000fab5:	8a 00                	mov    al,BYTE PTR [eax]
c000fab7:	0f b6 c0             	movzx  eax,al
c000faba:	83 ec 0c             	sub    esp,0xc
c000fabd:	53                   	push   ebx
c000fabe:	51                   	push   ecx
c000fabf:	52                   	push   edx
c000fac0:	50                   	push   eax
c000fac1:	68 8c 59 02 c0       	push   0xc002598c
c000fac6:	e8 08 d6 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000facb:	83 c4 20             	add    esp,0x20
c000face:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fad1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fad4:	83 c0 03             	add    eax,0x3
c000fad7:	8a 00                	mov    al,BYTE PTR [eax]
c000fad9:	0f b6 d8             	movzx  ebx,al
c000fadc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fadf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fae2:	83 c0 02             	add    eax,0x2
c000fae5:	8a 00                	mov    al,BYTE PTR [eax]
c000fae7:	0f b6 c8             	movzx  ecx,al
c000faea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000faf0:	40                   	inc    eax
c000faf1:	8a 00                	mov    al,BYTE PTR [eax]
c000faf3:	0f b6 d0             	movzx  edx,al
c000faf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faf9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fafc:	8a 00                	mov    al,BYTE PTR [eax]
c000fafe:	0f b6 c0             	movzx  eax,al
c000fb01:	83 ec 0c             	sub    esp,0xc
c000fb04:	53                   	push   ebx
c000fb05:	51                   	push   ecx
c000fb06:	52                   	push   edx
c000fb07:	50                   	push   eax
c000fb08:	68 b4 59 02 c0       	push   0xc00259b4
c000fb0d:	e8 c1 d5 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c000fb12:	83 c4 20             	add    esp,0x20
c000fb15:	83 ec 0c             	sub    esp,0xc
c000fb18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fb1b:	e8 ae f5 ff ff       	call   c000f0ce <displayDebugInfo(regs*)>
c000fb20:	8d 65 f8             	lea    esp,[ebp-0x8]
c000fb23:	5b                   	pop    ebx
c000fb24:	5e                   	pop    esi
c000fb25:	5d                   	pop    ebp
c000fb26:	c3                   	ret    

c000fb27 <displayProgramFault(char const*)>:
c000fb27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fb2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000fb35:	85 c0                	test   eax,eax
c000fb37:	74 15                	je     c000fb4e <displayProgramFault(char const*)+0x27>
c000fb39:	83 ec 0c             	sub    esp,0xc
c000fb3c:	6a 04                	push   0x4
c000fb3e:	6a 0f                	push   0xf
c000fb40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb44:	50                   	push   eax
c000fb45:	e8 a0 b5 ff ff       	call   c000b0ea <VgaText::puts(char const*, VgaColour, VgaColour)>
c000fb4a:	83 c4 1c             	add    esp,0x1c
c000fb4d:	c3                   	ret    
c000fb4e:	c3                   	ret    

c000fb4f <setupInterruptController()>:
c000fb4f:	55                   	push   ebp
c000fb50:	89 e5                	mov    ebp,esp
c000fb52:	53                   	push   ebx
c000fb53:	83 ec 24             	sub    esp,0x24
c000fb56:	b8 00 00 00 00       	mov    eax,0x0
c000fb5b:	85 c0                	test   eax,eax
c000fb5d:	0f 95 c0             	setne  al
c000fb60:	84 c0                	test   al,al
c000fb62:	74 5b                	je     c000fbbf <setupInterruptController()+0x70>
c000fb64:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000fb6b:	83 ec 0c             	sub    esp,0xc
c000fb6e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fb71:	e8 71 a2 ff ff       	call   c0009de7 <malloc>
c000fb76:	83 c4 10             	add    esp,0x10
c000fb79:	89 c3                	mov    ebx,eax
c000fb7b:	83 ec 0c             	sub    esp,0xc
c000fb7e:	53                   	push   ebx
c000fb7f:	e8 34 23 01 00       	call   c0021eb8 <APIC::APIC()>
c000fb84:	83 c4 10             	add    esp,0x10
c000fb87:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fb8a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000fb8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fb90:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb92:	83 c0 08             	add    eax,0x8
c000fb95:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb97:	6a 00                	push   0x0
c000fb99:	6a 00                	push   0x0
c000fb9b:	6a 00                	push   0x0
c000fb9d:	52                   	push   edx
c000fb9e:	ff d0                	call   eax
c000fba0:	83 c4 10             	add    esp,0x10
c000fba3:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000fba8:	83 ec 08             	sub    esp,0x8
c000fbab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbae:	50                   	push   eax
c000fbaf:	e8 92 ea ff ff       	call   c000e646 <Device::addChild(Device*)>
c000fbb4:	83 c4 10             	add    esp,0x10
c000fbb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fbba:	e9 79 03 00 00       	jmp    c000ff38 <setupInterruptController()+0x3e9>
c000fbbf:	a0 e0 94 02 c0       	mov    al,ds:0xc00294e0
c000fbc4:	84 c0                	test   al,al
c000fbc6:	75 14                	jne    c000fbdc <setupInterruptController()+0x8d>
c000fbc8:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000fbcd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000fbd3:	83 e2 fe             	and    edx,0xfffffffe
c000fbd6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000fbdc:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000fbe1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fbe7:	83 e0 01             	and    eax,0x1
c000fbea:	84 c0                	test   al,al
c000fbec:	0f 95 c0             	setne  al
c000fbef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000fbf2:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000fbf9:	83 ec 0c             	sub    esp,0xc
c000fbfc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000fbff:	e8 e3 a1 ff ff       	call   c0009de7 <malloc>
c000fc04:	83 c4 10             	add    esp,0x10
c000fc07:	89 c3                	mov    ebx,eax
c000fc09:	83 ec 0c             	sub    esp,0xc
c000fc0c:	53                   	push   ebx
c000fc0d:	e8 fe 27 01 00       	call   c0022410 <PIC::PIC()>
c000fc12:	83 c4 10             	add    esp,0x10
c000fc15:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fc18:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fc1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc20:	83 c0 08             	add    eax,0x8
c000fc23:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc25:	6a 00                	push   0x0
c000fc27:	6a 00                	push   0x0
c000fc29:	6a 00                	push   0x0
c000fc2b:	52                   	push   edx
c000fc2c:	ff d0                	call   eax
c000fc2e:	83 c4 10             	add    esp,0x10
c000fc31:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000fc35:	74 73                	je     c000fcaa <setupInterruptController()+0x15b>
c000fc37:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fc3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc3d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc3f:	83 c0 0c             	add    eax,0xc
c000fc42:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc44:	6a 00                	push   0x0
c000fc46:	6a 00                	push   0x0
c000fc48:	6a 00                	push   0x0
c000fc4a:	52                   	push   edx
c000fc4b:	ff d0                	call   eax
c000fc4d:	83 c4 10             	add    esp,0x10
c000fc50:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fc54:	74 15                	je     c000fc6b <setupInterruptController()+0x11c>
c000fc56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc59:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc5b:	83 c0 04             	add    eax,0x4
c000fc5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc60:	83 ec 0c             	sub    esp,0xc
c000fc63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc66:	ff d0                	call   eax
c000fc68:	83 c4 10             	add    esp,0x10
c000fc6b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000fc72:	83 ec 0c             	sub    esp,0xc
c000fc75:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fc78:	e8 6a a1 ff ff       	call   c0009de7 <malloc>
c000fc7d:	83 c4 10             	add    esp,0x10
c000fc80:	89 c3                	mov    ebx,eax
c000fc82:	83 ec 0c             	sub    esp,0xc
c000fc85:	53                   	push   ebx
c000fc86:	e8 2d 22 01 00       	call   c0021eb8 <APIC::APIC()>
c000fc8b:	83 c4 10             	add    esp,0x10
c000fc8e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fc91:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fc94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc97:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc99:	83 c0 08             	add    eax,0x8
c000fc9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc9e:	6a 00                	push   0x0
c000fca0:	6a 00                	push   0x0
c000fca2:	6a 00                	push   0x0
c000fca4:	52                   	push   edx
c000fca5:	ff d0                	call   eax
c000fca7:	83 c4 10             	add    esp,0x10
c000fcaa:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000fcaf:	83 ec 08             	sub    esp,0x8
c000fcb2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcb5:	50                   	push   eax
c000fcb6:	e8 8b e9 ff ff       	call   c000e646 <Device::addChild(Device*)>
c000fcbb:	83 c4 10             	add    esp,0x10
c000fcbe:	c7 05 08 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d08,0x0
c000fcc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fccb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fccd:	83 c0 24             	add    eax,0x24
c000fcd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd2:	6a 00                	push   0x0
c000fcd4:	68 2e f7 00 c0       	push   0xc000f72e
c000fcd9:	6a 00                	push   0x0
c000fcdb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcde:	ff d0                	call   eax
c000fce0:	83 c4 10             	add    esp,0x10
c000fce3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fce6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fce8:	83 c0 24             	add    eax,0x24
c000fceb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fced:	6a 00                	push   0x0
c000fcef:	68 2e f7 00 c0       	push   0xc000f72e
c000fcf4:	6a 01                	push   0x1
c000fcf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcf9:	ff d0                	call   eax
c000fcfb:	83 c4 10             	add    esp,0x10
c000fcfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd01:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd03:	83 c0 24             	add    eax,0x24
c000fd06:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd08:	6a 00                	push   0x0
c000fd0a:	68 2b ef 00 c0       	push   0xc000ef2b
c000fd0f:	6a 02                	push   0x2
c000fd11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd14:	ff d0                	call   eax
c000fd16:	83 c4 10             	add    esp,0x10
c000fd19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd1e:	83 c0 24             	add    eax,0x24
c000fd21:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd23:	6a 00                	push   0x0
c000fd25:	68 2e f7 00 c0       	push   0xc000f72e
c000fd2a:	6a 03                	push   0x3
c000fd2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd2f:	ff d0                	call   eax
c000fd31:	83 c4 10             	add    esp,0x10
c000fd34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd37:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd39:	83 c0 24             	add    eax,0x24
c000fd3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd3e:	6a 00                	push   0x0
c000fd40:	68 2e f7 00 c0       	push   0xc000f72e
c000fd45:	6a 04                	push   0x4
c000fd47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd4a:	ff d0                	call   eax
c000fd4c:	83 c4 10             	add    esp,0x10
c000fd4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd52:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd54:	83 c0 24             	add    eax,0x24
c000fd57:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd59:	6a 00                	push   0x0
c000fd5b:	68 2e f7 00 c0       	push   0xc000f72e
c000fd60:	6a 05                	push   0x5
c000fd62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd65:	ff d0                	call   eax
c000fd67:	83 c4 10             	add    esp,0x10
c000fd6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd6f:	83 c0 24             	add    eax,0x24
c000fd72:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd74:	6a 00                	push   0x0
c000fd76:	68 4d f7 00 c0       	push   0xc000f74d
c000fd7b:	6a 06                	push   0x6
c000fd7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd80:	ff d0                	call   eax
c000fd82:	83 c4 10             	add    esp,0x10
c000fd85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd8a:	83 c0 24             	add    eax,0x24
c000fd8d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd8f:	6a 00                	push   0x0
c000fd91:	68 5d f5 00 c0       	push   0xc000f55d
c000fd96:	6a 07                	push   0x7
c000fd98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd9b:	ff d0                	call   eax
c000fd9d:	83 c4 10             	add    esp,0x10
c000fda0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fda3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fda5:	83 c0 24             	add    eax,0x24
c000fda8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdaa:	6a 00                	push   0x0
c000fdac:	68 46 ed 00 c0       	push   0xc000ed46
c000fdb1:	6a 08                	push   0x8
c000fdb3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdb6:	ff d0                	call   eax
c000fdb8:	83 c4 10             	add    esp,0x10
c000fdbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdc0:	83 c0 24             	add    eax,0x24
c000fdc3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdc5:	6a 00                	push   0x0
c000fdc7:	68 2e f7 00 c0       	push   0xc000f72e
c000fdcc:	6a 09                	push   0x9
c000fdce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdd1:	ff d0                	call   eax
c000fdd3:	83 c4 10             	add    esp,0x10
c000fdd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fddb:	83 c0 24             	add    eax,0x24
c000fdde:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde0:	6a 00                	push   0x0
c000fde2:	68 2e f7 00 c0       	push   0xc000f72e
c000fde7:	6a 0a                	push   0xa
c000fde9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdec:	ff d0                	call   eax
c000fdee:	83 c4 10             	add    esp,0x10
c000fdf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdf4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdf6:	83 c0 24             	add    eax,0x24
c000fdf9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdfb:	6a 00                	push   0x0
c000fdfd:	68 2e f7 00 c0       	push   0xc000f72e
c000fe02:	6a 0b                	push   0xb
c000fe04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe07:	ff d0                	call   eax
c000fe09:	83 c4 10             	add    esp,0x10
c000fe0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe11:	83 c0 24             	add    eax,0x24
c000fe14:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe16:	6a 00                	push   0x0
c000fe18:	68 2e f7 00 c0       	push   0xc000f72e
c000fe1d:	6a 0c                	push   0xc
c000fe1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe22:	ff d0                	call   eax
c000fe24:	83 c4 10             	add    esp,0x10
c000fe27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe2c:	83 c0 24             	add    eax,0x24
c000fe2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe31:	6a 00                	push   0x0
c000fe33:	68 a6 f6 00 c0       	push   0xc000f6a6
c000fe38:	6a 0d                	push   0xd
c000fe3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe3d:	ff d0                	call   eax
c000fe3f:	83 c4 10             	add    esp,0x10
c000fe42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe45:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe47:	83 c0 24             	add    eax,0x24
c000fe4a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe4c:	6a 00                	push   0x0
c000fe4e:	68 df f6 00 c0       	push   0xc000f6df
c000fe53:	6a 0e                	push   0xe
c000fe55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe58:	ff d0                	call   eax
c000fe5a:	83 c4 10             	add    esp,0x10
c000fe5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe60:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe62:	83 c0 24             	add    eax,0x24
c000fe65:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe67:	6a 00                	push   0x0
c000fe69:	68 2e f7 00 c0       	push   0xc000f72e
c000fe6e:	6a 0f                	push   0xf
c000fe70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe73:	ff d0                	call   eax
c000fe75:	83 c4 10             	add    esp,0x10
c000fe78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe7d:	83 c0 24             	add    eax,0x24
c000fe80:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe82:	6a 00                	push   0x0
c000fe84:	68 2e f7 00 c0       	push   0xc000f72e
c000fe89:	6a 10                	push   0x10
c000fe8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe8e:	ff d0                	call   eax
c000fe90:	83 c4 10             	add    esp,0x10
c000fe93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe96:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe98:	83 c0 24             	add    eax,0x24
c000fe9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe9d:	6a 00                	push   0x0
c000fe9f:	68 2e f7 00 c0       	push   0xc000f72e
c000fea4:	6a 11                	push   0x11
c000fea6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fea9:	ff d0                	call   eax
c000feab:	83 c4 10             	add    esp,0x10
c000feae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000feb1:	8b 00                	mov    eax,DWORD PTR [eax]
c000feb3:	83 c0 24             	add    eax,0x24
c000feb6:	8b 00                	mov    eax,DWORD PTR [eax]
c000feb8:	6a 00                	push   0x0
c000feba:	68 2e f7 00 c0       	push   0xc000f72e
c000febf:	6a 12                	push   0x12
c000fec1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fec4:	ff d0                	call   eax
c000fec6:	83 c4 10             	add    esp,0x10
c000fec9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fecc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fece:	83 c0 24             	add    eax,0x24
c000fed1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fed3:	6a 00                	push   0x0
c000fed5:	68 2e f7 00 c0       	push   0xc000f72e
c000feda:	6a 13                	push   0x13
c000fedc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fedf:	ff d0                	call   eax
c000fee1:	83 c4 10             	add    esp,0x10
c000fee4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fee7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fee9:	83 c0 24             	add    eax,0x24
c000feec:	8b 00                	mov    eax,DWORD PTR [eax]
c000feee:	6a 00                	push   0x0
c000fef0:	68 2e f7 00 c0       	push   0xc000f72e
c000fef5:	6a 14                	push   0x14
c000fef7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fefa:	ff d0                	call   eax
c000fefc:	83 c4 10             	add    esp,0x10
c000feff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff02:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff04:	83 c0 24             	add    eax,0x24
c000ff07:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff09:	6a 00                	push   0x0
c000ff0b:	68 2e f7 00 c0       	push   0xc000f72e
c000ff10:	6a 1e                	push   0x1e
c000ff12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff15:	ff d0                	call   eax
c000ff17:	83 c4 10             	add    esp,0x10
c000ff1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff1f:	83 c0 24             	add    eax,0x24
c000ff22:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff24:	6a 00                	push   0x0
c000ff26:	68 3b 75 01 c0       	push   0xc001753b
c000ff2b:	6a 60                	push   0x60
c000ff2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff30:	ff d0                	call   eax
c000ff32:	83 c4 10             	add    esp,0x10
c000ff35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff38:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ff3b:	c9                   	leave  
c000ff3c:	c3                   	ret    
c000ff3d:	90                   	nop

c000ff3e <InterruptController::convertLegacyIRQNumber(int)>:
c000ff3e:	55                   	push   ebp
c000ff3f:	89 e5                	mov    ebp,esp
c000ff41:	83 ec 08             	sub    esp,0x8
c000ff44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	50                   	push   eax
c000ff4b:	e8 f6 e9 ff ff       	call   c000e946 <Device::getName()>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8a 00                	mov    al,BYTE PTR [eax]
c000ff55:	3c 41                	cmp    al,0x41
c000ff57:	0f 94 c0             	sete   al
c000ff5a:	84 c0                	test   al,al
c000ff5c:	74 28                	je     c000ff86 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000ff5e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000ff62:	7f 12                	jg     c000ff76 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000ff64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ff67:	05 c0 82 02 c0       	add    eax,0xc00282c0
c000ff6c:	8a 00                	mov    al,BYTE PTR [eax]
c000ff6e:	0f b6 c0             	movzx  eax,al
c000ff71:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000ff74:	eb 10                	jmp    c000ff86 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000ff76:	83 ec 0c             	sub    esp,0xc
c000ff79:	68 dc 59 02 c0       	push   0xc00259dc
c000ff7e:	e8 32 52 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c000ff83:	83 c4 10             	add    esp,0x10
c000ff86:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ff89:	c9                   	leave  
c000ff8a:	c3                   	ret    
c000ff8b:	90                   	nop

c000ff8c <startGUI(void*)>:
c000ff8c:	55                   	push   ebp
c000ff8d:	89 e5                	mov    ebp,esp
c000ff8f:	53                   	push   ebx
c000ff90:	83 ec 04             	sub    esp,0x4
c000ff93:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000ff98:	48                   	dec    eax
c000ff99:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000ff9e:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000ffa3:	85 c0                	test   eax,eax
c000ffa5:	75 01                	jne    c000ffa8 <startGUI(void*)+0x1c>
c000ffa7:	fb                   	sti    
c000ffa8:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c000ffae:	83 ec 08             	sub    esp,0x8
c000ffb1:	6a 01                	push   0x1
c000ffb3:	68 5c 5a 02 c0       	push   0xc0025a5c
c000ffb8:	e8 59 85 00 00       	call   c0018516 <Thr::loadDLL(char const*, bool)>
c000ffbd:	83 c4 10             	add    esp,0x10
c000ffc0:	83 ec 08             	sub    esp,0x8
c000ffc3:	53                   	push   ebx
c000ffc4:	50                   	push   eax
c000ffc5:	e8 7d 87 00 00       	call   c0018747 <Thr::executeDLL(unsigned long, void*)>
c000ffca:	83 c4 10             	add    esp,0x10
c000ffcd:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c000ffd3:	83 ec 08             	sub    esp,0x8
c000ffd6:	6a 01                	push   0x1
c000ffd8:	68 76 5a 02 c0       	push   0xc0025a76
c000ffdd:	e8 34 85 00 00       	call   c0018516 <Thr::loadDLL(char const*, bool)>
c000ffe2:	83 c4 10             	add    esp,0x10
c000ffe5:	83 ec 08             	sub    esp,0x8
c000ffe8:	53                   	push   ebx
c000ffe9:	50                   	push   eax
c000ffea:	e8 58 87 00 00       	call   c0018747 <Thr::executeDLL(unsigned long, void*)>
c000ffef:	83 c4 10             	add    esp,0x10
c000fff2:	90                   	nop
c000fff3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fff6:	c9                   	leave  
c000fff7:	c3                   	ret    

c000fff8 <startGUIVESA(void*)>:
c000fff8:	55                   	push   ebp
c000fff9:	89 e5                	mov    ebp,esp
c000fffb:	53                   	push   ebx
c000fffc:	83 ec 04             	sub    esp,0x4
c000ffff:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0010004:	48                   	dec    eax
c0010005:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001000a:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001000f:	85 c0                	test   eax,eax
c0010011:	75 01                	jne    c0010014 <startGUIVESA(void*)+0x1c>
c0010013:	fb                   	sti    
c0010014:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c001001a:	83 ec 08             	sub    esp,0x8
c001001d:	6a 01                	push   0x1
c001001f:	68 94 5a 02 c0       	push   0xc0025a94
c0010024:	e8 ed 84 00 00       	call   c0018516 <Thr::loadDLL(char const*, bool)>
c0010029:	83 c4 10             	add    esp,0x10
c001002c:	83 ec 08             	sub    esp,0x8
c001002f:	53                   	push   ebx
c0010030:	50                   	push   eax
c0010031:	e8 11 87 00 00       	call   c0018747 <Thr::executeDLL(unsigned long, void*)>
c0010036:	83 c4 10             	add    esp,0x10
c0010039:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c001003f:	83 ec 08             	sub    esp,0x8
c0010042:	6a 01                	push   0x1
c0010044:	68 76 5a 02 c0       	push   0xc0025a76
c0010049:	e8 c8 84 00 00       	call   c0018516 <Thr::loadDLL(char const*, bool)>
c001004e:	83 c4 10             	add    esp,0x10
c0010051:	83 ec 08             	sub    esp,0x8
c0010054:	53                   	push   ebx
c0010055:	50                   	push   eax
c0010056:	e8 ec 86 00 00       	call   c0018747 <Thr::executeDLL(unsigned long, void*)>
c001005b:	83 c4 10             	add    esp,0x10
c001005e:	90                   	nop
c001005f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010062:	c9                   	leave  
c0010063:	c3                   	ret    

c0010064 <sendKeyToTerminal(unsigned char)>:
c0010064:	55                   	push   ebp
c0010065:	89 e5                	mov    ebp,esp
c0010067:	83 ec 28             	sub    esp,0x28
c001006a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001006d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0010070:	a1 44 8c 02 c0       	mov    eax,ds:0xc0028c44
c0010075:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0010079:	83 ec 08             	sub    esp,0x8
c001007c:	52                   	push   edx
c001007d:	50                   	push   eax
c001007e:	e8 0d b5 ff ff       	call   c000b590 <VgaText::receiveKey(unsigned char)>
c0010083:	83 c4 10             	add    esp,0x10
c0010086:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001008a:	0f 85 8f 00 00 00    	jne    c001011f <sendKeyToTerminal(unsigned char)+0xbb>
c0010090:	fa                   	cli    
c0010091:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0010096:	40                   	inc    eax
c0010097:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001009c:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00100a1:	40                   	inc    eax
c00100a2:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c00100a7:	a1 20 8d 02 c0       	mov    eax,ds:0xc0028d20
c00100ac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00100af:	c7 05 20 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d20,0x0
c00100b9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00100bd:	74 1f                	je     c00100de <sendKeyToTerminal(unsigned char)+0x7a>
c00100bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00100c2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00100c5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00100c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00100cb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00100ce:	83 ec 0c             	sub    esp,0xc
c00100d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00100d4:	e8 df 92 00 00       	call   c00193b8 <unblockTask(ThreadControlBlock*)>
c00100d9:	83 c4 10             	add    esp,0x10
c00100dc:	eb db                	jmp    c00100b9 <sendKeyToTerminal(unsigned char)+0x55>
c00100de:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00100e3:	48                   	dec    eax
c00100e4:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c00100e9:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00100ee:	85 c0                	test   eax,eax
c00100f0:	75 18                	jne    c001010a <sendKeyToTerminal(unsigned char)+0xa6>
c00100f2:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c00100f7:	85 c0                	test   eax,eax
c00100f9:	74 0f                	je     c001010a <sendKeyToTerminal(unsigned char)+0xa6>
c00100fb:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c0010105:	e8 f2 8d 00 00       	call   c0018efc <schedule()>
c001010a:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001010f:	48                   	dec    eax
c0010110:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0010115:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001011a:	85 c0                	test   eax,eax
c001011c:	75 01                	jne    c001011f <sendKeyToTerminal(unsigned char)+0xbb>
c001011e:	fb                   	sti    
c001011f:	90                   	nop
c0010120:	c9                   	leave  
c0010121:	c3                   	ret    

c0010122 <sendKeyboardToken(KeyboardToken)>:
c0010122:	55                   	push   ebp
c0010123:	89 e5                	mov    ebp,esp
c0010125:	83 ec 18             	sub    esp,0x18
c0010128:	e8 61 53 00 00       	call   c001548e <Krnl::userIOReceived()>
c001012d:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0010130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010133:	0f b7 c0             	movzx  eax,ax
c0010136:	83 f2 01             	xor    edx,0x1
c0010139:	88 90 40 8d 02 c0    	mov    BYTE PTR [eax-0x3ffd72c0],dl
c001013f:	a1 28 8d 02 c0       	mov    eax,ds:0xc0028d28
c0010144:	85 c0                	test   eax,eax
c0010146:	74 24                	je     c001016c <sendKeyboardToken(KeyboardToken)+0x4a>
c0010148:	8b 0d 28 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d28
c001014e:	83 ec 04             	sub    esp,0x4
c0010151:	68 40 8d 02 c0       	push   0xc0028d40
c0010156:	83 ec 08             	sub    esp,0x8
c0010159:	89 e2                	mov    edx,esp
c001015b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001015e:	89 02                	mov    DWORD PTR [edx],eax
c0010160:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010163:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0010167:	ff d1                	call   ecx
c0010169:	83 c4 10             	add    esp,0x10
c001016c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0010170:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0010173:	a0 48 91 02 c0       	mov    al,ds:0xc0029148
c0010178:	38 c2                	cmp    dl,al
c001017a:	74 1c                	je     c0010198 <sendKeyboardToken(KeyboardToken)+0x76>
c001017c:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001017f:	a2 48 91 02 c0       	mov    ds:0xc0029148,al
c0010184:	a0 48 91 02 c0       	mov    al,ds:0xc0029148
c0010189:	0f b6 c0             	movzx  eax,al
c001018c:	83 ec 0c             	sub    esp,0xc
c001018f:	50                   	push   eax
c0010190:	e8 3d aa ff ff       	call   c000abd2 <setTerminalScrollLock(bool)>
c0010195:	83 c4 10             	add    esp,0x10
c0010198:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001019b:	84 c0                	test   al,al
c001019d:	0f 84 ae 00 00 00    	je     c0010251 <sendKeyboardToken(KeyboardToken)+0x12f>
c00101a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101a6:	66 3d 10 03          	cmp    ax,0x310
c00101aa:	75 06                	jne    c00101b2 <sendKeyboardToken(KeyboardToken)+0x90>
c00101ac:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00101b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101b5:	66 3d 11 03          	cmp    ax,0x311
c00101b9:	75 06                	jne    c00101c1 <sendKeyboardToken(KeyboardToken)+0x9f>
c00101bb:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00101c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101c4:	66 3d 12 03          	cmp    ax,0x312
c00101c8:	75 06                	jne    c00101d0 <sendKeyboardToken(KeyboardToken)+0xae>
c00101ca:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00101d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101d3:	66 3d 13 03          	cmp    ax,0x313
c00101d7:	75 06                	jne    c00101df <sendKeyboardToken(KeyboardToken)+0xbd>
c00101d9:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00101df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101e2:	66 3d 14 03          	cmp    ax,0x314
c00101e6:	75 06                	jne    c00101ee <sendKeyboardToken(KeyboardToken)+0xcc>
c00101e8:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00101ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101f1:	66 3d 15 03          	cmp    ax,0x315
c00101f5:	75 06                	jne    c00101fd <sendKeyboardToken(KeyboardToken)+0xdb>
c00101f7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00101fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010200:	66 3d 16 03          	cmp    ax,0x316
c0010204:	75 06                	jne    c001020c <sendKeyboardToken(KeyboardToken)+0xea>
c0010206:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001020c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001020f:	66 3d 17 03          	cmp    ax,0x317
c0010213:	75 06                	jne    c001021b <sendKeyboardToken(KeyboardToken)+0xf9>
c0010215:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001021b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001021e:	66 3d 18 03          	cmp    ax,0x318
c0010222:	75 06                	jne    c001022a <sendKeyboardToken(KeyboardToken)+0x108>
c0010224:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001022a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001022d:	66 3d 19 03          	cmp    ax,0x319
c0010231:	75 06                	jne    c0010239 <sendKeyboardToken(KeyboardToken)+0x117>
c0010233:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0010239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001023c:	66 3d 1a 03          	cmp    ax,0x31a
c0010240:	0f 85 c9 00 00 00    	jne    c001030f <sendKeyboardToken(KeyboardToken)+0x1ed>
c0010246:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001024c:	e9 be 00 00 00       	jmp    c001030f <sendKeyboardToken(KeyboardToken)+0x1ed>
c0010251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010254:	66 3d 10 03          	cmp    ax,0x310
c0010258:	75 0a                	jne    c0010264 <sendKeyboardToken(KeyboardToken)+0x142>
c001025a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0010260:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010267:	66 3d 11 03          	cmp    ax,0x311
c001026b:	75 0a                	jne    c0010277 <sendKeyboardToken(KeyboardToken)+0x155>
c001026d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0010273:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001027a:	66 3d 12 03          	cmp    ax,0x312
c001027e:	75 0a                	jne    c001028a <sendKeyboardToken(KeyboardToken)+0x168>
c0010280:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0010286:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001028a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001028d:	66 3d 13 03          	cmp    ax,0x313
c0010291:	75 0a                	jne    c001029d <sendKeyboardToken(KeyboardToken)+0x17b>
c0010293:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0010299:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001029d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102a0:	66 3d 14 03          	cmp    ax,0x314
c00102a4:	75 0a                	jne    c00102b0 <sendKeyboardToken(KeyboardToken)+0x18e>
c00102a6:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00102ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102b3:	66 3d 15 03          	cmp    ax,0x315
c00102b7:	75 0a                	jne    c00102c3 <sendKeyboardToken(KeyboardToken)+0x1a1>
c00102b9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00102bf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102c6:	66 3d 16 03          	cmp    ax,0x316
c00102ca:	75 0a                	jne    c00102d6 <sendKeyboardToken(KeyboardToken)+0x1b4>
c00102cc:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00102d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102d9:	66 3d 17 03          	cmp    ax,0x317
c00102dd:	75 0a                	jne    c00102e9 <sendKeyboardToken(KeyboardToken)+0x1c7>
c00102df:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00102e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102ec:	66 3d 18 03          	cmp    ax,0x318
c00102f0:	75 0a                	jne    c00102fc <sendKeyboardToken(KeyboardToken)+0x1da>
c00102f2:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00102f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102ff:	66 3d 19 03          	cmp    ax,0x319
c0010303:	75 0a                	jne    c001030f <sendKeyboardToken(KeyboardToken)+0x1ed>
c0010305:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001030b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001030f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010312:	66 3d 00 02          	cmp    ax,0x200
c0010316:	75 2c                	jne    c0010344 <sendKeyboardToken(KeyboardToken)+0x222>
c0010318:	a0 40 91 02 c0       	mov    al,ds:0xc0029140
c001031d:	83 f0 01             	xor    eax,0x1
c0010320:	84 c0                	test   al,al
c0010322:	74 20                	je     c0010344 <sendKeyboardToken(KeyboardToken)+0x222>
c0010324:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c0010329:	6a 01                	push   0x1
c001032b:	6a 00                	push   0x0
c001032d:	68 8c ff 00 c0       	push   0xc000ff8c
c0010332:	50                   	push   eax
c0010333:	e8 a8 89 00 00       	call   c0018ce0 <Process::createThread(void (*)(void*), void*, int)>
c0010338:	83 c4 10             	add    esp,0x10
c001033b:	c6 05 40 91 02 c0 01 	mov    BYTE PTR ds:0xc0029140,0x1
c0010342:	eb 33                	jmp    c0010377 <sendKeyboardToken(KeyboardToken)+0x255>
c0010344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010347:	66 3d 01 02          	cmp    ax,0x201
c001034b:	75 2a                	jne    c0010377 <sendKeyboardToken(KeyboardToken)+0x255>
c001034d:	a0 40 91 02 c0       	mov    al,ds:0xc0029140
c0010352:	83 f0 01             	xor    eax,0x1
c0010355:	84 c0                	test   al,al
c0010357:	74 1e                	je     c0010377 <sendKeyboardToken(KeyboardToken)+0x255>
c0010359:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c001035e:	6a 01                	push   0x1
c0010360:	6a 00                	push   0x0
c0010362:	68 f8 ff 00 c0       	push   0xc000fff8
c0010367:	50                   	push   eax
c0010368:	e8 73 89 00 00       	call   c0018ce0 <Process::createThread(void (*)(void*), void*, int)>
c001036d:	83 c4 10             	add    esp,0x10
c0010370:	c6 05 40 91 02 c0 01 	mov    BYTE PTR ds:0xc0029140,0x1
c0010377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001037a:	66 3d 1d 03          	cmp    ax,0x31d
c001037e:	75 06                	jne    c0010386 <sendKeyboardToken(KeyboardToken)+0x264>
c0010380:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0010386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010389:	66 3d 1c 03          	cmp    ax,0x31c
c001038d:	75 06                	jne    c0010395 <sendKeyboardToken(KeyboardToken)+0x273>
c001038f:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0010395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010398:	66 3d 1b 03          	cmp    ax,0x31b
c001039c:	75 06                	jne    c00103a4 <sendKeyboardToken(KeyboardToken)+0x282>
c001039e:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00103a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103a7:	66 3d 1e 03          	cmp    ax,0x31e
c00103ab:	75 06                	jne    c00103b3 <sendKeyboardToken(KeyboardToken)+0x291>
c00103ad:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00103b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103b6:	66 3d 1f 03          	cmp    ax,0x31f
c00103ba:	75 06                	jne    c00103c2 <sendKeyboardToken(KeyboardToken)+0x2a0>
c00103bc:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00103c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103c5:	66 3d 1a 03          	cmp    ax,0x31a
c00103c9:	75 06                	jne    c00103d1 <sendKeyboardToken(KeyboardToken)+0x2af>
c00103cb:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00103d1:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00103d5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00103d8:	83 f0 01             	xor    eax,0x1
c00103db:	84 c0                	test   al,al
c00103dd:	74 77                	je     c0010456 <sendKeyboardToken(KeyboardToken)+0x334>
c00103df:	a0 41 8e 02 c0       	mov    al,ds:0xc0028e41
c00103e4:	84 c0                	test   al,al
c00103e6:	74 41                	je     c0010429 <sendKeyboardToken(KeyboardToken)+0x307>
c00103e8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00103ec:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00103f0:	74 2b                	je     c001041d <sendKeyboardToken(KeyboardToken)+0x2fb>
c00103f2:	8b 15 44 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029144
c00103f8:	89 d0                	mov    eax,edx
c00103fa:	c1 e0 02             	shl    eax,0x2
c00103fd:	01 d0                	add    eax,edx
c00103ff:	01 c0                	add    eax,eax
c0010401:	a3 44 91 02 c0       	mov    ds:0xc0029144,eax
c0010406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010409:	0f b7 c0             	movzx  eax,ax
c001040c:	8d 50 d0             	lea    edx,[eax-0x30]
c001040f:	a1 44 91 02 c0       	mov    eax,ds:0xc0029144
c0010414:	01 d0                	add    eax,edx
c0010416:	a3 44 91 02 c0       	mov    ds:0xc0029144,eax
c001041b:	eb 6d                	jmp    c001048a <sendKeyboardToken(KeyboardToken)+0x368>
c001041d:	c7 05 44 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029144,0x0
c0010427:	eb 61                	jmp    c001048a <sendKeyboardToken(KeyboardToken)+0x368>
c0010429:	a1 44 91 02 c0       	mov    eax,ds:0xc0029144
c001042e:	85 c0                	test   eax,eax
c0010430:	74 18                	je     c001044a <sendKeyboardToken(KeyboardToken)+0x328>
c0010432:	a1 44 91 02 c0       	mov    eax,ds:0xc0029144
c0010437:	0f b6 c0             	movzx  eax,al
c001043a:	83 ec 0c             	sub    esp,0xc
c001043d:	50                   	push   eax
c001043e:	e8 21 fc ff ff       	call   c0010064 <sendKeyToTerminal(unsigned char)>
c0010443:	83 c4 10             	add    esp,0x10
c0010446:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001044a:	c7 05 44 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029144,0x0
c0010454:	eb 34                	jmp    c001048a <sendKeyboardToken(KeyboardToken)+0x368>
c0010456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010459:	66 3d 01 01          	cmp    ax,0x101
c001045d:	75 2b                	jne    c001048a <sendKeyboardToken(KeyboardToken)+0x368>
c001045f:	a1 44 91 02 c0       	mov    eax,ds:0xc0029144
c0010464:	85 c0                	test   eax,eax
c0010466:	74 18                	je     c0010480 <sendKeyboardToken(KeyboardToken)+0x35e>
c0010468:	a1 44 91 02 c0       	mov    eax,ds:0xc0029144
c001046d:	0f b6 c0             	movzx  eax,al
c0010470:	83 ec 0c             	sub    esp,0xc
c0010473:	50                   	push   eax
c0010474:	e8 eb fb ff ff       	call   c0010064 <sendKeyToTerminal(unsigned char)>
c0010479:	83 c4 10             	add    esp,0x10
c001047c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010480:	c7 05 44 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029144,0x0
c001048a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001048d:	83 f0 01             	xor    eax,0x1
c0010490:	84 c0                	test   al,al
c0010492:	74 4c                	je     c00104e0 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010494:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010497:	83 f0 01             	xor    eax,0x1
c001049a:	84 c0                	test   al,al
c001049c:	74 42                	je     c00104e0 <sendKeyboardToken(KeyboardToken)+0x3be>
c001049e:	a0 40 8e 02 c0       	mov    al,ds:0xc0028e40
c00104a3:	83 f0 01             	xor    eax,0x1
c00104a6:	84 c0                	test   al,al
c00104a8:	74 36                	je     c00104e0 <sendKeyboardToken(KeyboardToken)+0x3be>
c00104aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104ad:	66 83 f8 1f          	cmp    ax,0x1f
c00104b1:	76 09                	jbe    c00104bc <sendKeyboardToken(KeyboardToken)+0x39a>
c00104b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104b6:	66 83 f8 7e          	cmp    ax,0x7e
c00104ba:	76 12                	jbe    c00104ce <sendKeyboardToken(KeyboardToken)+0x3ac>
c00104bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104bf:	66 83 f8 0a          	cmp    ax,0xa
c00104c3:	74 09                	je     c00104ce <sendKeyboardToken(KeyboardToken)+0x3ac>
c00104c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104c8:	66 83 f8 08          	cmp    ax,0x8
c00104cc:	75 12                	jne    c00104e0 <sendKeyboardToken(KeyboardToken)+0x3be>
c00104ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104d1:	0f b6 c0             	movzx  eax,al
c00104d4:	83 ec 0c             	sub    esp,0xc
c00104d7:	50                   	push   eax
c00104d8:	e8 87 fb ff ff       	call   c0010064 <sendKeyToTerminal(unsigned char)>
c00104dd:	83 c4 10             	add    esp,0x10
c00104e0:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00104e3:	83 f0 01             	xor    eax,0x1
c00104e6:	84 c0                	test   al,al
c00104e8:	74 4f                	je     c0010539 <sendKeyboardToken(KeyboardToken)+0x417>
c00104ea:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00104ed:	83 f0 01             	xor    eax,0x1
c00104f0:	84 c0                	test   al,al
c00104f2:	74 45                	je     c0010539 <sendKeyboardToken(KeyboardToken)+0x417>
c00104f4:	a0 40 8e 02 c0       	mov    al,ds:0xc0028e40
c00104f9:	84 c0                	test   al,al
c00104fb:	74 3c                	je     c0010539 <sendKeyboardToken(KeyboardToken)+0x417>
c00104fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010500:	66 83 f8 3f          	cmp    ax,0x3f
c0010504:	76 33                	jbe    c0010539 <sendKeyboardToken(KeyboardToken)+0x417>
c0010506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010509:	66 83 f8 7f          	cmp    ax,0x7f
c001050d:	77 2a                	ja     c0010539 <sendKeyboardToken(KeyboardToken)+0x417>
c001050f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010512:	88 c2                	mov    dl,al
c0010514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010517:	66 83 f8 5f          	cmp    ax,0x5f
c001051b:	76 04                	jbe    c0010521 <sendKeyboardToken(KeyboardToken)+0x3ff>
c001051d:	b0 20                	mov    al,0x20
c001051f:	eb 02                	jmp    c0010523 <sendKeyboardToken(KeyboardToken)+0x401>
c0010521:	b0 00                	mov    al,0x0
c0010523:	29 c2                	sub    edx,eax
c0010525:	88 d0                	mov    al,dl
c0010527:	83 e8 40             	sub    eax,0x40
c001052a:	0f b6 c0             	movzx  eax,al
c001052d:	83 ec 0c             	sub    esp,0xc
c0010530:	50                   	push   eax
c0010531:	e8 2e fb ff ff       	call   c0010064 <sendKeyToTerminal(unsigned char)>
c0010536:	83 c4 10             	add    esp,0x10
c0010539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001053c:	66 3d 00 03          	cmp    ax,0x300
c0010540:	75 0f                	jne    c0010551 <sendKeyboardToken(KeyboardToken)+0x42f>
c0010542:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010545:	83 f0 01             	xor    eax,0x1
c0010548:	84 c0                	test   al,al
c001054a:	74 05                	je     c0010551 <sendKeyboardToken(KeyboardToken)+0x42f>
c001054c:	e8 f2 a9 ff ff       	call   c000af43 <doTerminalCycle()>
c0010551:	90                   	nop
c0010552:	c9                   	leave  
c0010553:	c3                   	ret    

c0010554 <clearInternalKeybuffer(VgaText*)>:
c0010554:	55                   	push   ebp
c0010555:	89 e5                	mov    ebp,esp
c0010557:	83 ec 08             	sub    esp,0x8
c001055a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001055d:	05 32 01 00 00       	add    eax,0x132
c0010562:	83 ec 0c             	sub    esp,0xc
c0010565:	50                   	push   eax
c0010566:	e8 45 01 ff ff       	call   c00006b0 <strlen>
c001056b:	83 c4 10             	add    esp,0x10
c001056e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010571:	81 c2 32 01 00 00    	add    edx,0x132
c0010577:	83 ec 04             	sub    esp,0x4
c001057a:	50                   	push   eax
c001057b:	6a 00                	push   0x0
c001057d:	52                   	push   edx
c001057e:	e8 11 01 ff ff       	call   c0000694 <memset>
c0010583:	83 c4 10             	add    esp,0x10
c0010586:	90                   	nop
c0010587:	c9                   	leave  
c0010588:	c3                   	ret    

c0010589 <readKeyboard(VgaText*, char*, unsigned long)>:
c0010589:	55                   	push   ebp
c001058a:	89 e5                	mov    ebp,esp
c001058c:	83 ec 18             	sub    esp,0x18
c001058f:	a1 28 8d 02 c0       	mov    eax,ds:0xc0028d28
c0010594:	85 c0                	test   eax,eax
c0010596:	74 2a                	je     c00105c2 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0010598:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001059e:	8b 0d 28 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d28
c00105a4:	83 ec 04             	sub    esp,0x4
c00105a7:	68 40 8d 02 c0       	push   0xc0028d40
c00105ac:	83 ec 08             	sub    esp,0x8
c00105af:	89 e2                	mov    edx,esp
c00105b1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00105b4:	89 02                	mov    DWORD PTR [edx],eax
c00105b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00105b9:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00105bd:	ff d1                	call   ecx
c00105bf:	83 c4 10             	add    esp,0x10
c00105c2:	fb                   	sti    
c00105c3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00105ca:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00105ce:	0f 84 a1 00 00 00    	je     c0010675 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c00105d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00105d7:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c00105dd:	84 c0                	test   al,al
c00105df:	75 28                	jne    c0010609 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c00105e1:	fa                   	cli    
c00105e2:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00105e7:	40                   	inc    eax
c00105e8:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00105ed:	e8 0a 89 00 00       	call   c0018efc <schedule()>
c00105f2:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00105f7:	48                   	dec    eax
c00105f8:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00105fd:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0010602:	85 c0                	test   eax,eax
c0010604:	75 ce                	jne    c00105d4 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010606:	fb                   	sti    
c0010607:	eb cb                	jmp    c00105d4 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010609:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001060c:	8d 50 01             	lea    edx,[eax+0x1]
c001060f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010612:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010615:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c001061b:	88 10                	mov    BYTE PTR [eax],dl
c001061d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010620:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010626:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0010629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001062c:	05 32 01 00 00       	add    eax,0x132
c0010631:	83 ec 0c             	sub    esp,0xc
c0010634:	50                   	push   eax
c0010635:	e8 76 00 ff ff       	call   c00006b0 <strlen>
c001063a:	83 c4 10             	add    esp,0x10
c001063d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010640:	81 c2 32 01 00 00    	add    edx,0x132
c0010646:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010649:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001064c:	81 c2 32 01 00 00    	add    edx,0x132
c0010652:	83 ec 04             	sub    esp,0x4
c0010655:	50                   	push   eax
c0010656:	51                   	push   ecx
c0010657:	52                   	push   edx
c0010658:	e8 6f ff fe ff       	call   c00005cc <memmove>
c001065d:	83 c4 10             	add    esp,0x10
c0010660:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0010663:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0010666:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001066a:	0f 85 5a ff ff ff    	jne    c00105ca <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0010670:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010673:	eb 03                	jmp    c0010678 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0010675:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010678:	c9                   	leave  
c0010679:	c3                   	ret    

c001067a <Keyboard::Keyboard(char const*)>:
c001067a:	83 ec 0c             	sub    esp,0xc
c001067d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010681:	83 ec 08             	sub    esp,0x8
c0010684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010688:	50                   	push   eax
c0010689:	e8 bc e1 ff ff       	call   c000e84a <Device::Device(char const*)>
c001068e:	83 c4 10             	add    esp,0x10
c0010691:	ba b8 5a 02 c0       	mov    edx,0xc0025ab8
c0010696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069a:	89 10                	mov    DWORD PTR [eax],edx
c001069c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00106aa:	c6 05 24 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028d24,0x1
c00106b1:	90                   	nop
c00106b2:	83 c4 0c             	add    esp,0xc
c00106b5:	c3                   	ret    

c00106b6 <Keyboard::~Keyboard()>:
c00106b6:	83 ec 0c             	sub    esp,0xc
c00106b9:	ba b8 5a 02 c0       	mov    edx,0xc0025ab8
c00106be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c2:	89 10                	mov    DWORD PTR [eax],edx
c00106c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c8:	83 ec 0c             	sub    esp,0xc
c00106cb:	50                   	push   eax
c00106cc:	e8 43 de ff ff       	call   c000e514 <Device::~Device()>
c00106d1:	83 c4 10             	add    esp,0x10
c00106d4:	90                   	nop
c00106d5:	83 c4 0c             	add    esp,0xc
c00106d8:	c3                   	ret    
c00106d9:	90                   	nop

c00106da <Keyboard::~Keyboard()>:
c00106da:	83 ec 0c             	sub    esp,0xc
c00106dd:	83 ec 0c             	sub    esp,0xc
c00106e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106e4:	e8 cd ff ff ff       	call   c00106b6 <Keyboard::~Keyboard()>
c00106e9:	83 c4 10             	add    esp,0x10
c00106ec:	83 ec 08             	sub    esp,0x8
c00106ef:	68 5c 01 00 00       	push   0x15c
c00106f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106f8:	e8 f5 c8 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c00106fd:	83 c4 10             	add    esp,0x10
c0010700:	83 c4 0c             	add    esp,0xc
c0010703:	c3                   	ret    

c0010704 <LogicalDisk::close(int, int, void*)>:
c0010704:	83 c8 ff             	or     eax,0xffffffff
c0010707:	c3                   	ret    

c0010708 <LogicalDisk::~LogicalDisk()>:
c0010708:	83 ec 0c             	sub    esp,0xc
c001070b:	ba 88 5b 02 c0       	mov    edx,0xc0025b88
c0010710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010714:	89 10                	mov    DWORD PTR [eax],edx
c0010716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001071a:	83 ec 0c             	sub    esp,0xc
c001071d:	50                   	push   eax
c001071e:	e8 f1 dd ff ff       	call   c000e514 <Device::~Device()>
c0010723:	83 c4 10             	add    esp,0x10
c0010726:	90                   	nop
c0010727:	83 c4 0c             	add    esp,0xc
c001072a:	c3                   	ret    
c001072b:	90                   	nop

c001072c <LogicalDisk::~LogicalDisk()>:
c001072c:	83 ec 0c             	sub    esp,0xc
c001072f:	83 ec 0c             	sub    esp,0xc
c0010732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010736:	e8 cd ff ff ff       	call   c0010708 <LogicalDisk::~LogicalDisk()>
c001073b:	83 c4 10             	add    esp,0x10
c001073e:	83 ec 08             	sub    esp,0x8
c0010741:	68 74 01 00 00       	push   0x174
c0010746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001074a:	e8 a3 c8 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c001074f:	83 c4 10             	add    esp,0x10
c0010752:	83 c4 0c             	add    esp,0xc
c0010755:	c3                   	ret    

c0010756 <LogicalDisk::open(int, int, void*)>:
c0010756:	83 ec 18             	sub    esp,0x18
c0010759:	68 e4 5a 02 c0       	push   0xc0025ae4
c001075e:	e8 52 4a 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c0010763:	83 c8 ff             	or     eax,0xffffffff
c0010766:	83 c4 1c             	add    esp,0x1c
c0010769:	c3                   	ret    

c001076a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001076a:	53                   	push   ebx
c001076b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001076f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010773:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010777:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001077d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0010783:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0010789:	77 10                	ja     c001079b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001078b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0010791:	89 d3                	mov    ebx,edx
c0010793:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0010799:	72 05                	jb     c00107a0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001079b:	83 c8 ff             	or     eax,0xffffffff
c001079e:	89 c2                	mov    edx,eax
c00107a0:	5b                   	pop    ebx
c00107a1:	c3                   	ret    

c00107a2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00107a2:	56                   	push   esi
c00107a3:	83 c8 ff             	or     eax,0xffffffff
c00107a6:	53                   	push   ebx
c00107a7:	89 c2                	mov    edx,eax
c00107a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00107ad:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00107b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107b5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00107bb:	77 27                	ja     c00107e4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00107bd:	89 d8                	mov    eax,ebx
c00107bf:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00107c5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00107cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107d0:	89 c2                	mov    edx,eax
c00107d2:	73 10                	jae    c00107e4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00107d4:	89 c8                	mov    eax,ecx
c00107d6:	89 da                	mov    edx,ebx
c00107d8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00107de:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00107e4:	5b                   	pop    ebx
c00107e5:	5e                   	pop    esi
c00107e6:	c3                   	ret    
c00107e7:	90                   	nop

c00107e8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00107e8:	83 ec 1c             	sub    esp,0x1c
c00107eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00107ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0010802:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010806:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001080a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001080e:	83 ec 08             	sub    esp,0x8
c0010811:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010815:	50                   	push   eax
c0010816:	e8 2f e0 ff ff       	call   c000e84a <Device::Device(char const*)>
c001081b:	83 c4 10             	add    esp,0x10
c001081e:	ba 88 5b 02 c0       	mov    edx,0xc0025b88
c0010823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010827:	89 10                	mov    DWORD PTR [eax],edx
c0010829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001082d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010834:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010838:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001083f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010843:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001084d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010855:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010859:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001085f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0010865:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010869:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001086c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010870:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0010876:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001087c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010880:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010884:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001088a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001088e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010898:	90                   	nop
c0010899:	83 c4 1c             	add    esp,0x1c
c001089c:	c3                   	ret    
c001089d:	90                   	nop

c001089e <LogicalDisk::assignDriveLetter()>:
c001089e:	55                   	push   ebp
c001089f:	57                   	push   edi
c00108a0:	56                   	push   esi
c00108a1:	53                   	push   ebx
c00108a2:	83 ec 14             	sub    esp,0x14
c00108a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00108a9:	8b 3d 60 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029160
c00108af:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00108b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00108b9:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00108bf:	8b 3d 64 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029164
c00108c5:	3c 01                	cmp    al,0x1
c00108c7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00108cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00108cf:	19 c0                	sbb    eax,eax
c00108d1:	83 e0 02             	and    eax,0x2
c00108d4:	83 c0 41             	add    eax,0x41
c00108d7:	0f be e8             	movsx  ebp,al
c00108da:	3c 43                	cmp    al,0x43
c00108dc:	75 10                	jne    c00108ee <LogicalDisk::assignDriveLetter()+0x50>
c00108de:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00108e5:	75 5d                	jne    c0010944 <LogicalDisk::assignDriveLetter()+0xa6>
c00108e7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00108ec:	75 56                	jne    c0010944 <LogicalDisk::assignDriveLetter()+0xa6>
c00108ee:	8d 75 bf             	lea    esi,[ebp-0x41]
c00108f1:	ba 01 00 00 00       	mov    edx,0x1
c00108f6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00108fa:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00108fe:	d3 e2                	shl    edx,cl
c0010900:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010904:	89 d7                	mov    edi,edx
c0010906:	89 d6                	mov    esi,edx
c0010908:	c1 ff 1f             	sar    edi,0x1f
c001090b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001090f:	21 f9                	and    ecx,edi
c0010911:	09 d1                	or     ecx,edx
c0010913:	75 2f                	jne    c0010944 <LogicalDisk::assignDriveLetter()+0xa6>
c0010915:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010919:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001091d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010923:	09 f2                	or     edx,esi
c0010925:	89 15 60 91 02 c0    	mov    DWORD PTR ds:0xc0029160,edx
c001092b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001092f:	09 fa                	or     edx,edi
c0010931:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010935:	89 15 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,edx
c001093b:	89 1c bd 80 91 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6e80],ebx
c0010942:	eb 08                	jmp    c001094c <LogicalDisk::assignDriveLetter()+0xae>
c0010944:	45                   	inc    ebp
c0010945:	40                   	inc    eax
c0010946:	3c 5b                	cmp    al,0x5b
c0010948:	75 90                	jne    c00108da <LogicalDisk::assignDriveLetter()+0x3c>
c001094a:	31 c0                	xor    eax,eax
c001094c:	83 c4 14             	add    esp,0x14
c001094f:	5b                   	pop    ebx
c0010950:	5e                   	pop    esi
c0010951:	5f                   	pop    edi
c0010952:	5d                   	pop    ebp
c0010953:	c3                   	ret    

c0010954 <LogicalDisk::mount()>:
c0010954:	56                   	push   esi
c0010955:	53                   	push   ebx
c0010956:	83 ec 1c             	sub    esp,0x1c
c0010959:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001095d:	8b 1d f4 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf4
c0010963:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001096a:	50                   	push   eax
c001096b:	68 08 5b 02 c0       	push   0xc0025b08
c0010970:	e8 5e c7 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0010975:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001097f:	83 c4 10             	add    esp,0x10
c0010982:	85 db                	test   ebx,ebx
c0010984:	74 4e                	je     c00109d4 <LogicalDisk::mount()+0x80>
c0010986:	83 ec 0c             	sub    esp,0xc
c0010989:	68 29 5b 02 c0       	push   0xc0025b29
c001098e:	e8 40 c7 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0010993:	83 c4 0c             	add    esp,0xc
c0010996:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001099d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001099f:	83 e8 41             	sub    eax,0x41
c00109a2:	50                   	push   eax
c00109a3:	56                   	push   esi
c00109a4:	53                   	push   ebx
c00109a5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00109a8:	83 c4 10             	add    esp,0x10
c00109ab:	84 c0                	test   al,al
c00109ad:	74 20                	je     c00109cf <LogicalDisk::mount()+0x7b>
c00109af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00109b3:	83 ec 0c             	sub    esp,0xc
c00109b6:	68 45 5b 02 c0       	push   0xc0025b45
c00109bb:	e8 13 c7 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00109c0:	83 c4 10             	add    esp,0x10
c00109c3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00109c9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00109cd:	eb 07                	jmp    c00109d6 <LogicalDisk::mount()+0x82>
c00109cf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00109d2:	eb ae                	jmp    c0010982 <LogicalDisk::mount()+0x2e>
c00109d4:	31 c0                	xor    eax,eax
c00109d6:	83 c4 14             	add    esp,0x14
c00109d9:	5b                   	pop    ebx
c00109da:	5e                   	pop    esi
c00109db:	c3                   	ret    

c00109dc <LogicalDisk::unmount()>:
c00109dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109e0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00109ea:	c3                   	ret    
c00109eb:	90                   	nop

c00109ec <LogicalDisk::eject()>:
c00109ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109f0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00109f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00109f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00109fc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00109ff:	90                   	nop

c0010a00 <LogicalDisk::unassignDriveLetter()>:
c0010a00:	57                   	push   edi
c0010a01:	56                   	push   esi
c0010a02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a06:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010a0d:	84 c9                	test   cl,cl
c0010a0f:	75 0f                	jne    c0010a20 <LogicalDisk::unassignDriveLetter()+0x20>
c0010a11:	c7 44 24 0c 5e 5b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025b5e
c0010a19:	5e                   	pop    esi
c0010a1a:	5f                   	pop    edi
c0010a1b:	e9 95 47 00 00       	jmp    c00151b5 <Krnl::panic(char const*)>
c0010a20:	83 e9 41             	sub    ecx,0x41
c0010a23:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010a2a:	b8 01 00 00 00       	mov    eax,0x1
c0010a2f:	c7 04 8d 80 91 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6e80],0x0
c0010a3a:	d3 e0                	shl    eax,cl
c0010a3c:	89 c7                	mov    edi,eax
c0010a3e:	f7 d0                	not    eax
c0010a40:	c1 ff 1f             	sar    edi,0x1f
c0010a43:	21 05 60 91 02 c0    	and    DWORD PTR ds:0xc0029160,eax
c0010a49:	89 fe                	mov    esi,edi
c0010a4b:	f7 d6                	not    esi
c0010a4d:	21 35 64 91 02 c0    	and    DWORD PTR ds:0xc0029164,esi
c0010a53:	5e                   	pop    esi
c0010a54:	5f                   	pop    edi
c0010a55:	c3                   	ret    

c0010a56 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010a56:	57                   	push   edi
c0010a57:	56                   	push   esi
c0010a58:	53                   	push   ebx
c0010a59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010a5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010a65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a69:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010a6f:	77 41                	ja     c0010ab2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010a71:	99                   	cdq    
c0010a72:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010a78:	01 c8                	add    eax,ecx
c0010a7a:	11 da                	adc    edx,ebx
c0010a7c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010a82:	19 d7                	sbb    edi,edx
c0010a84:	72 33                	jb     c0010ab9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010a86:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010a8c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010a92:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010a96:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010a9a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010aa0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010aa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010aaa:	5b                   	pop    ebx
c0010aab:	5e                   	pop    esi
c0010aac:	5f                   	pop    edi
c0010aad:	e9 f4 0a 00 00       	jmp    c00115a6 <VCache::read(unsigned long long, int, void*)>
c0010ab2:	b8 05 00 00 00       	mov    eax,0x5
c0010ab7:	eb 05                	jmp    c0010abe <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010ab9:	b8 07 00 00 00       	mov    eax,0x7
c0010abe:	5b                   	pop    ebx
c0010abf:	5e                   	pop    esi
c0010ac0:	5f                   	pop    edi
c0010ac1:	c3                   	ret    

c0010ac2 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010ac2:	57                   	push   edi
c0010ac3:	56                   	push   esi
c0010ac4:	53                   	push   ebx
c0010ac5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ac9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010acd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010ad1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ad5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010adb:	77 41                	ja     c0010b1e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010add:	99                   	cdq    
c0010ade:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010ae4:	01 c8                	add    eax,ecx
c0010ae6:	11 da                	adc    edx,ebx
c0010ae8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010aee:	19 d7                	sbb    edi,edx
c0010af0:	72 33                	jb     c0010b25 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010af2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010af8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010afe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010b02:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010b06:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010b0c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010b12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b16:	5b                   	pop    ebx
c0010b17:	5e                   	pop    esi
c0010b18:	5f                   	pop    edi
c0010b19:	e9 8e 09 00 00       	jmp    c00114ac <VCache::write(unsigned long long, int, void*)>
c0010b1e:	b8 05 00 00 00       	mov    eax,0x5
c0010b23:	eb 05                	jmp    c0010b2a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010b25:	b8 07 00 00 00       	mov    eax,0x7
c0010b2a:	5b                   	pop    ebx
c0010b2b:	5e                   	pop    esi
c0010b2c:	5f                   	pop    edi
c0010b2d:	c3                   	ret    
c0010b2e:	66 90                	xchg   ax,ax

c0010b30 <Mouse::Mouse(char const*)>:
c0010b30:	83 ec 0c             	sub    esp,0xc
c0010b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b37:	83 ec 08             	sub    esp,0x8
c0010b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b3e:	50                   	push   eax
c0010b3f:	e8 06 dd ff ff       	call   c000e84a <Device::Device(char const*)>
c0010b44:	83 c4 10             	add    esp,0x10
c0010b47:	ba b4 5b 02 c0       	mov    edx,0xc0025bb4
c0010b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b50:	89 10                	mov    DWORD PTR [eax],edx
c0010b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b56:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010b60:	90                   	nop
c0010b61:	83 c4 0c             	add    esp,0xc
c0010b64:	c3                   	ret    
c0010b65:	90                   	nop
c0010b66:	66 90                	xchg   ax,ax

c0010b68 <Mouse::~Mouse()>:
c0010b68:	83 ec 0c             	sub    esp,0xc
c0010b6b:	ba b4 5b 02 c0       	mov    edx,0xc0025bb4
c0010b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b74:	89 10                	mov    DWORD PTR [eax],edx
c0010b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7a:	83 ec 0c             	sub    esp,0xc
c0010b7d:	50                   	push   eax
c0010b7e:	e8 91 d9 ff ff       	call   c000e514 <Device::~Device()>
c0010b83:	83 c4 10             	add    esp,0x10
c0010b86:	90                   	nop
c0010b87:	83 c4 0c             	add    esp,0xc
c0010b8a:	c3                   	ret    
c0010b8b:	90                   	nop

c0010b8c <Mouse::~Mouse()>:
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	83 ec 0c             	sub    esp,0xc
c0010b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b96:	e8 cd ff ff ff       	call   c0010b68 <Mouse::~Mouse()>
c0010b9b:	83 c4 10             	add    esp,0x10
c0010b9e:	83 ec 08             	sub    esp,0x8
c0010ba1:	68 58 01 00 00       	push   0x158
c0010ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010baa:	e8 43 c4 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0010baf:	83 c4 10             	add    esp,0x10
c0010bb2:	83 c4 0c             	add    esp,0xc
c0010bb5:	c3                   	ret    

c0010bb6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010bb6:	55                   	push   ebp
c0010bb7:	57                   	push   edi
c0010bb8:	56                   	push   esi
c0010bb9:	53                   	push   ebx
c0010bba:	81 ec 28 01 00 00    	sub    esp,0x128
c0010bc0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010bc7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010bce:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010bd5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010bdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010be0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010be4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010beb:	e8 56 dd ff ff       	call   c000e946 <Device::getName()>
c0010bf0:	5a                   	pop    edx
c0010bf1:	59                   	pop    ecx
c0010bf2:	50                   	push   eax
c0010bf3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010bf7:	55                   	push   ebp
c0010bf8:	e8 53 fb fe ff       	call   c0000750 <strcpy>
c0010bfd:	5b                   	pop    ebx
c0010bfe:	58                   	pop    eax
c0010bff:	68 d8 5b 02 c0       	push   0xc0025bd8
c0010c04:	55                   	push   ebp
c0010c05:	e8 86 fc fe ff       	call   c0000890 <strcat>
c0010c0a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010c11:	e8 d1 91 ff ff       	call   c0009de7 <malloc>
c0010c16:	83 c4 0c             	add    esp,0xc
c0010c19:	89 c3                	mov    ebx,eax
c0010c1b:	57                   	push   edi
c0010c1c:	56                   	push   esi
c0010c1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c25:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010c2c:	55                   	push   ebp
c0010c2d:	50                   	push   eax
c0010c2e:	e8 b5 fb ff ff       	call   c00107e8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010c33:	83 c4 14             	add    esp,0x14
c0010c36:	53                   	push   ebx
c0010c37:	e8 62 fc ff ff       	call   c001089e <LogicalDisk::assignDriveLetter()>
c0010c3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c3f:	e8 10 fd ff ff       	call   c0010954 <LogicalDisk::mount()>
c0010c44:	58                   	pop    eax
c0010c45:	5a                   	pop    edx
c0010c46:	53                   	push   ebx
c0010c47:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010c4e:	e8 f3 d9 ff ff       	call   c000e646 <Device::addChild(Device*)>
c0010c53:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010c59:	5b                   	pop    ebx
c0010c5a:	5e                   	pop    esi
c0010c5b:	5f                   	pop    edi
c0010c5c:	5d                   	pop    ebp
c0010c5d:	c3                   	ret    

c0010c5e <createPartitionsForDisk(PhysicalDisk*)>:
c0010c5e:	55                   	push   ebp
c0010c5f:	57                   	push   edi
c0010c60:	56                   	push   esi
c0010c61:	53                   	push   ebx
c0010c62:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010c68:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010c6f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010c75:	3d 00 02 00 00       	cmp    eax,0x200
c0010c7a:	74 27                	je     c0010ca3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010c7c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010c82:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010c88:	83 ec 10             	sub    esp,0x10
c0010c8b:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010c8f:	99                   	cdq    
c0010c90:	c1 e6 0a             	shl    esi,0xa
c0010c93:	52                   	push   edx
c0010c94:	89 fd                	mov    ebp,edi
c0010c96:	50                   	push   eax
c0010c97:	55                   	push   ebp
c0010c98:	56                   	push   esi
c0010c99:	e8 f2 22 01 00       	call   c0022f90 <__udivdi3>
c0010c9e:	e9 b1 00 00 00       	jmp    c0010d54 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010ca3:	83 ec 0c             	sub    esp,0xc
c0010ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ca8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010cac:	56                   	push   esi
c0010cad:	6a 01                	push   0x1
c0010caf:	6a 00                	push   0x0
c0010cb1:	6a 00                	push   0x0
c0010cb3:	53                   	push   ebx
c0010cb4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010cb7:	83 c4 20             	add    esp,0x20
c0010cba:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010cc2:	75 0a                	jne    c0010cce <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010cc4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010ccc:	74 2c                	je     c0010cfa <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010cce:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010cd4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010cda:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010ce0:	83 ec 10             	sub    esp,0x10
c0010ce3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010ce7:	89 f7                	mov    edi,esi
c0010ce9:	c1 e0 0a             	shl    eax,0xa
c0010cec:	c1 ff 1f             	sar    edi,0x1f
c0010cef:	57                   	push   edi
c0010cf0:	56                   	push   esi
c0010cf1:	52                   	push   edx
c0010cf2:	50                   	push   eax
c0010cf3:	e8 98 22 01 00       	call   c0022f90 <__udivdi3>
c0010cf8:	eb 5a                	jmp    c0010d54 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010cfa:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010d01:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010d08:	83 e1 7f             	and    ecx,0x7f
c0010d0b:	83 e0 7f             	and    eax,0x7f
c0010d0e:	01 c1                	add    ecx,eax
c0010d10:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010d17:	83 e0 7f             	and    eax,0x7f
c0010d1a:	01 c1                	add    ecx,eax
c0010d1c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010d23:	83 e0 7f             	and    eax,0x7f
c0010d26:	00 c1                	add    cl,al
c0010d28:	74 41                	je     c0010d6b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010d2a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010d30:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010d36:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010d3c:	83 ec 10             	sub    esp,0x10
c0010d3f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010d43:	89 f7                	mov    edi,esi
c0010d45:	c1 e0 0a             	shl    eax,0xa
c0010d48:	c1 ff 1f             	sar    edi,0x1f
c0010d4b:	57                   	push   edi
c0010d4c:	56                   	push   esi
c0010d4d:	52                   	push   edx
c0010d4e:	50                   	push   eax
c0010d4f:	e8 3c 22 01 00       	call   c0022f90 <__udivdi3>
c0010d54:	83 c4 14             	add    esp,0x14
c0010d57:	52                   	push   edx
c0010d58:	50                   	push   eax
c0010d59:	6a 00                	push   0x0
c0010d5b:	6a 00                	push   0x0
c0010d5d:	53                   	push   ebx
c0010d5e:	e8 53 fe ff ff       	call   c0010bb6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010d63:	83 c4 20             	add    esp,0x20
c0010d66:	e9 79 01 00 00       	jmp    c0010ee4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010d6b:	89 f0                	mov    eax,esi
c0010d6d:	31 f6                	xor    esi,esi
c0010d6f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010d76:	75 02                	jne    c0010d7a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010d78:	89 f1                	mov    ecx,esi
c0010d7a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010d81:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010d88:	c1 e2 08             	shl    edx,0x8
c0010d8b:	c1 e7 10             	shl    edi,0x10
c0010d8e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010d96:	09 fa                	or     edx,edi
c0010d98:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010da0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010da7:	83 c0 10             	add    eax,0x10
c0010daa:	09 fa                	or     edx,edi
c0010dac:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010db3:	c1 e7 18             	shl    edi,0x18
c0010db6:	09 fa                	or     edx,edi
c0010db8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010dbf:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010dc3:	c1 e7 10             	shl    edi,0x10
c0010dc6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010dcd:	c1 e2 08             	shl    edx,0x8
c0010dd0:	09 fa                	or     edx,edi
c0010dd2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010dd9:	09 fa                	or     edx,edi
c0010ddb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010de2:	c1 e7 18             	shl    edi,0x18
c0010de5:	09 fa                	or     edx,edi
c0010de7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010deb:	46                   	inc    esi
c0010dec:	83 fe 04             	cmp    esi,0x4
c0010def:	0f 85 7a ff ff ff    	jne    c0010d6f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df9:	83 f0 01             	xor    eax,0x1
c0010dfc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010e00:	75 57                	jne    c0010e59 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010e02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e06:	83 f0 01             	xor    eax,0x1
c0010e09:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010e0d:	75 4a                	jne    c0010e59 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010e0f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010e13:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010e1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e23:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010e29:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010e2f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010e35:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010e39:	89 f7                	mov    edi,esi
c0010e3b:	c1 e0 0a             	shl    eax,0xa
c0010e3e:	c1 ff 1f             	sar    edi,0x1f
c0010e41:	57                   	push   edi
c0010e42:	56                   	push   esi
c0010e43:	52                   	push   edx
c0010e44:	50                   	push   eax
c0010e45:	e8 46 21 01 00       	call   c0022f90 <__udivdi3>
c0010e4a:	83 c4 10             	add    esp,0x10
c0010e4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010e51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010e55:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010e59:	84 c9                	test   cl,cl
c0010e5b:	74 53                	je     c0010eb0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010e5d:	0f b6 c9             	movzx  ecx,cl
c0010e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e68:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e6c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010e70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010e78:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010e7c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010e80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010e84:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010e88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010e90:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010e94:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010e98:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010e9c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010ea0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010ea4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010ea8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010eac:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010eb0:	31 ed                	xor    ebp,ebp
c0010eb2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010eb6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010eba:	89 f8                	mov    eax,edi
c0010ebc:	09 f0                	or     eax,esi
c0010ebe:	74 1e                	je     c0010ede <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010ec0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010ec4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010ec8:	89 d1                	mov    ecx,edx
c0010eca:	09 c1                	or     ecx,eax
c0010ecc:	74 10                	je     c0010ede <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010ece:	83 ec 0c             	sub    esp,0xc
c0010ed1:	57                   	push   edi
c0010ed2:	56                   	push   esi
c0010ed3:	52                   	push   edx
c0010ed4:	50                   	push   eax
c0010ed5:	53                   	push   ebx
c0010ed6:	e8 db fc ff ff       	call   c0010bb6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010edb:	83 c4 20             	add    esp,0x20
c0010ede:	45                   	inc    ebp
c0010edf:	83 fd 04             	cmp    ebp,0x4
c0010ee2:	75 ce                	jne    c0010eb2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010ee4:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010eea:	5b                   	pop    ebx
c0010eeb:	5e                   	pop    esi
c0010eec:	5f                   	pop    edi
c0010eed:	5d                   	pop    ebp
c0010eee:	c3                   	ret    
c0010eef:	90                   	nop

c0010ef0 <Serial::Serial(char const*)>:
c0010ef0:	83 ec 0c             	sub    esp,0xc
c0010ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ef7:	83 ec 08             	sub    esp,0x8
c0010efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010efe:	50                   	push   eax
c0010eff:	e8 46 d9 ff ff       	call   c000e84a <Device::Device(char const*)>
c0010f04:	83 c4 10             	add    esp,0x10
c0010f07:	ba ec 5b 02 c0       	mov    edx,0xc0025bec
c0010f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f10:	89 10                	mov    DWORD PTR [eax],edx
c0010f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f16:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010f20:	90                   	nop
c0010f21:	83 c4 0c             	add    esp,0xc
c0010f24:	c3                   	ret    
c0010f25:	90                   	nop
c0010f26:	66 90                	xchg   ax,ax

c0010f28 <Serial::~Serial()>:
c0010f28:	83 ec 0c             	sub    esp,0xc
c0010f2b:	ba ec 5b 02 c0       	mov    edx,0xc0025bec
c0010f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f34:	89 10                	mov    DWORD PTR [eax],edx
c0010f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	50                   	push   eax
c0010f3e:	e8 d1 d5 ff ff       	call   c000e514 <Device::~Device()>
c0010f43:	83 c4 10             	add    esp,0x10
c0010f46:	90                   	nop
c0010f47:	83 c4 0c             	add    esp,0xc
c0010f4a:	c3                   	ret    
c0010f4b:	90                   	nop

c0010f4c <Serial::~Serial()>:
c0010f4c:	83 ec 0c             	sub    esp,0xc
c0010f4f:	83 ec 0c             	sub    esp,0xc
c0010f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f56:	e8 cd ff ff ff       	call   c0010f28 <Serial::~Serial()>
c0010f5b:	83 c4 10             	add    esp,0x10
c0010f5e:	83 ec 08             	sub    esp,0x8
c0010f61:	68 58 01 00 00       	push   0x158
c0010f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f6a:	e8 83 c0 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0010f6f:	83 c4 10             	add    esp,0x10
c0010f72:	83 c4 0c             	add    esp,0xc
c0010f75:	c3                   	ret    
c0010f76:	66 90                	xchg   ax,ax

c0010f78 <Timer::Timer(char const*)>:
c0010f78:	83 ec 0c             	sub    esp,0xc
c0010f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f7f:	83 ec 08             	sub    esp,0x8
c0010f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f86:	50                   	push   eax
c0010f87:	e8 be d8 ff ff       	call   c000e84a <Device::Device(char const*)>
c0010f8c:	83 c4 10             	add    esp,0x10
c0010f8f:	ba 30 5c 02 c0       	mov    edx,0xc0025c30
c0010f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f98:	89 10                	mov    DWORD PTR [eax],edx
c0010f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010fa8:	90                   	nop
c0010fa9:	83 c4 0c             	add    esp,0xc
c0010fac:	c3                   	ret    
c0010fad:	90                   	nop
c0010fae:	66 90                	xchg   ax,ax

c0010fb0 <Timer::~Timer()>:
c0010fb0:	83 ec 0c             	sub    esp,0xc
c0010fb3:	ba 30 5c 02 c0       	mov    edx,0xc0025c30
c0010fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fbc:	89 10                	mov    DWORD PTR [eax],edx
c0010fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc2:	83 ec 0c             	sub    esp,0xc
c0010fc5:	50                   	push   eax
c0010fc6:	e8 49 d5 ff ff       	call   c000e514 <Device::~Device()>
c0010fcb:	83 c4 10             	add    esp,0x10
c0010fce:	90                   	nop
c0010fcf:	83 c4 0c             	add    esp,0xc
c0010fd2:	c3                   	ret    
c0010fd3:	90                   	nop

c0010fd4 <Timer::~Timer()>:
c0010fd4:	83 ec 0c             	sub    esp,0xc
c0010fd7:	83 ec 0c             	sub    esp,0xc
c0010fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fde:	e8 cd ff ff ff       	call   c0010fb0 <Timer::~Timer()>
c0010fe3:	83 c4 10             	add    esp,0x10
c0010fe6:	83 ec 08             	sub    esp,0x8
c0010fe9:	68 5c 01 00 00       	push   0x15c
c0010fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ff2:	e8 fb bf ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0010ff7:	83 c4 10             	add    esp,0x10
c0010ffa:	83 c4 0c             	add    esp,0xc
c0010ffd:	c3                   	ret    

c0010ffe <Timer::read()>:
c0010ffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011002:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011008:	c3                   	ret    

c0011009 <timerHandler(unsigned int)>:
c0011009:	56                   	push   esi
c001100a:	53                   	push   ebx
c001100b:	51                   	push   ecx
c001100c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011010:	01 05 ec 91 02 c0    	add    DWORD PTR ds:0xc00291ec,eax
c0011016:	80 3d cd 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028bcd,0x0
c001101d:	0f 84 49 01 00 00    	je     c001116c <timerHandler(unsigned int)+0x163>
c0011023:	fa                   	cli    
c0011024:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c001102a:	83 ec 0c             	sub    esp,0xc
c001102d:	ff 05 e4 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e4
c0011033:	68 f8 a0 02 c0       	push   0xc002a0f8
c0011038:	e8 23 25 01 00       	call   c0023560 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001103d:	83 c4 10             	add    esp,0x10
c0011040:	84 c0                	test   al,al
c0011042:	0f 85 a0 00 00 00    	jne    c00110e8 <timerHandler(unsigned int)+0xdf>
c0011048:	83 ec 0c             	sub    esp,0xc
c001104b:	68 f8 a0 02 c0       	push   0xc002a0f8
c0011050:	e8 27 25 01 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	89 c6                	mov    esi,eax
c001105a:	66 90                	xchg   ax,ax
c001105c:	83 ec 0c             	sub    esp,0xc
c001105f:	68 f8 a0 02 c0       	push   0xc002a0f8
c0011064:	e8 13 25 01 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011069:	c7 04 24 f8 a0 02 c0 	mov    DWORD PTR [esp],0xc002a0f8
c0011070:	89 c3                	mov    ebx,eax
c0011072:	e8 0d 25 01 00       	call   c0023584 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0011077:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001107a:	83 c4 10             	add    esp,0x10
c001107d:	3b 05 ec 91 02 c0    	cmp    eax,DWORD PTR ds:0xc00291ec
c0011083:	77 23                	ja     c00110a8 <timerHandler(unsigned int)+0x9f>
c0011085:	83 ec 0c             	sub    esp,0xc
c0011088:	53                   	push   ebx
c0011089:	e8 2a 83 00 00       	call   c00193b8 <unblockTask(ThreadControlBlock*)>
c001108e:	83 c4 10             	add    esp,0x10
c0011091:	39 de                	cmp    esi,ebx
c0011093:	75 27                	jne    c00110bc <timerHandler(unsigned int)+0xb3>
c0011095:	83 ec 0c             	sub    esp,0xc
c0011098:	68 f8 a0 02 c0       	push   0xc002a0f8
c001109d:	e8 da 24 01 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00110a2:	89 c6                	mov    esi,eax
c00110a4:	eb 12                	jmp    c00110b8 <timerHandler(unsigned int)+0xaf>
c00110a6:	66 90                	xchg   ax,ax
c00110a8:	52                   	push   edx
c00110a9:	52                   	push   edx
c00110aa:	53                   	push   ebx
c00110ab:	68 f8 a0 02 c0       	push   0xc002a0f8
c00110b0:	e8 87 25 01 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00110b5:	8d 76 00             	lea    esi,[esi+0x0]
c00110b8:	83 c4 10             	add    esp,0x10
c00110bb:	90                   	nop
c00110bc:	83 ec 0c             	sub    esp,0xc
c00110bf:	68 f8 a0 02 c0       	push   0xc002a0f8
c00110c4:	e8 97 24 01 00       	call   c0023560 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00110c9:	83 c4 10             	add    esp,0x10
c00110cc:	84 c0                	test   al,al
c00110ce:	75 18                	jne    c00110e8 <timerHandler(unsigned int)+0xdf>
c00110d0:	83 ec 0c             	sub    esp,0xc
c00110d3:	68 f8 a0 02 c0       	push   0xc002a0f8
c00110d8:	e8 9f 24 01 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00110dd:	83 c4 10             	add    esp,0x10
c00110e0:	39 f0                	cmp    eax,esi
c00110e2:	0f 85 74 ff ff ff    	jne    c001105c <timerHandler(unsigned int)+0x53>
c00110e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110ed:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c00110f1:	74 41                	je     c0011134 <timerHandler(unsigned int)+0x12b>
c00110f3:	80 3d cc 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028bcc,0x0
c00110fa:	74 38                	je     c0011134 <timerHandler(unsigned int)+0x12b>
c00110fc:	fa                   	cli    
c00110fd:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0011103:	a1 ec 91 02 c0       	mov    eax,ds:0xc00291ec
c0011108:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001110e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0011111:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011117:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c001111a:	72 08                	jb     c0011124 <timerHandler(unsigned int)+0x11b>
c001111c:	e8 db 7d 00 00       	call   c0018efc <schedule()>
c0011121:	8d 76 00             	lea    esi,[esi+0x0]
c0011124:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0011129:	48                   	dec    eax
c001112a:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001112f:	75 03                	jne    c0011134 <timerHandler(unsigned int)+0x12b>
c0011131:	fb                   	sti    
c0011132:	66 90                	xchg   ax,ax
c0011134:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c0011139:	48                   	dec    eax
c001113a:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c001113f:	75 1b                	jne    c001115c <timerHandler(unsigned int)+0x153>
c0011141:	83 3d e0 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a0e0,0x0
c0011148:	74 12                	je     c001115c <timerHandler(unsigned int)+0x153>
c001114a:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c0011154:	e8 a3 7d 00 00       	call   c0018efc <schedule()>
c0011159:	8d 76 00             	lea    esi,[esi+0x0]
c001115c:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0011161:	48                   	dec    eax
c0011162:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0011167:	75 03                	jne    c001116c <timerHandler(unsigned int)+0x163>
c0011169:	fb                   	sti    
c001116a:	66 90                	xchg   ax,ax
c001116c:	58                   	pop    eax
c001116d:	5b                   	pop    ebx
c001116e:	5e                   	pop    esi
c001116f:	c3                   	ret    

c0011170 <setupTimer(int)>:
c0011170:	57                   	push   edi
c0011171:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0011176:	56                   	push   esi
c0011177:	53                   	push   ebx
c0011178:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001117c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011182:	83 ec 0c             	sub    esp,0xc
c0011185:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001118b:	e8 b6 d7 ff ff       	call   c000e946 <Device::getName()>
c0011190:	83 c4 10             	add    esp,0x10
c0011193:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0011196:	0f 85 94 00 00 00    	jne    c0011230 <setupTimer(int)+0xc0>
c001119c:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00111a1:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00111a8:	0f 84 82 00 00 00    	je     c0011230 <setupTimer(int)+0xc0>
c00111ae:	83 ec 0c             	sub    esp,0xc
c00111b1:	68 5c 01 00 00       	push   0x15c
c00111b6:	e8 2c 8c ff ff       	call   c0009de7 <malloc>
c00111bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00111be:	89 c3                	mov    ebx,eax
c00111c0:	e8 33 19 01 00       	call   c0022af8 <PIT::PIT()>
c00111c5:	59                   	pop    ecx
c00111c6:	5f                   	pop    edi
c00111c7:	53                   	push   ebx
c00111c8:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c00111ce:	e8 73 d4 ff ff       	call   c000e646 <Device::addChild(Device*)>
c00111d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111d5:	6a 00                	push   0x0
c00111d7:	6a 00                	push   0x0
c00111d9:	56                   	push   esi
c00111da:	53                   	push   ebx
c00111db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00111de:	83 c4 14             	add    esp,0x14
c00111e1:	68 60 01 00 00       	push   0x160
c00111e6:	e8 fc 8b ff ff       	call   c0009de7 <malloc>
c00111eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00111ee:	89 c7                	mov    edi,eax
c00111f0:	e8 b7 17 01 00       	call   c00229ac <APICTimer::APICTimer()>
c00111f5:	6a 00                	push   0x0
c00111f7:	6a 00                	push   0x0
c00111f9:	56                   	push   esi
c00111fa:	57                   	push   edi
c00111fb:	e8 ac 16 01 00       	call   c00228ac <APICTimer::open(int, int, void*)>
c0011200:	83 c4 20             	add    esp,0x20
c0011203:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011205:	6a 00                	push   0x0
c0011207:	6a 00                	push   0x0
c0011209:	6a 00                	push   0x0
c001120b:	53                   	push   ebx
c001120c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001120f:	58                   	pop    eax
c0011210:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0011215:	5a                   	pop    edx
c0011216:	57                   	push   edi
c0011217:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001121d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0011223:	e8 1e d4 ff ff       	call   c000e646 <Device::addChild(Device*)>
c0011228:	83 c4 10             	add    esp,0x10
c001122b:	eb 37                	jmp    c0011264 <setupTimer(int)+0xf4>
c001122d:	8d 76 00             	lea    esi,[esi+0x0]
c0011230:	83 ec 0c             	sub    esp,0xc
c0011233:	68 5c 01 00 00       	push   0x15c
c0011238:	e8 aa 8b ff ff       	call   c0009de7 <malloc>
c001123d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011240:	89 c3                	mov    ebx,eax
c0011242:	e8 b1 18 01 00       	call   c0022af8 <PIT::PIT()>
c0011247:	58                   	pop    eax
c0011248:	5a                   	pop    edx
c0011249:	53                   	push   ebx
c001124a:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c0011250:	e8 f1 d3 ff ff       	call   c000e646 <Device::addChild(Device*)>
c0011255:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011257:	6a 00                	push   0x0
c0011259:	6a 00                	push   0x0
c001125b:	56                   	push   esi
c001125c:	53                   	push   ebx
c001125d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011260:	83 c4 20             	add    esp,0x20
c0011263:	90                   	nop
c0011264:	89 d8                	mov    eax,ebx
c0011266:	5b                   	pop    ebx
c0011267:	5e                   	pop    esi
c0011268:	5f                   	pop    edi
c0011269:	c3                   	ret    
c001126a:	66 90                	xchg   ax,ax

c001126c <VCache::VCache(PhysicalDisk*)>:
c001126c:	53                   	push   ebx
c001126d:	83 ec 18             	sub    esp,0x18
c0011270:	ba 60 5c 02 c0       	mov    edx,0xc0025c60
c0011275:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011279:	89 10                	mov    DWORD PTR [eax],edx
c001127b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001127f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0011286:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001128a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0011291:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011295:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001129c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00112a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112a7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00112ae:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00112b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112b9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00112c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112c4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00112c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112cc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00112d3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00112da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112de:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00112e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112e6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00112ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112ee:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00112f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112f6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00112fd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0011305:	83 ec 0c             	sub    esp,0xc
c0011308:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001130c:	e8 d6 8a ff ff       	call   c0009de7 <malloc>
c0011311:	83 c4 10             	add    esp,0x10
c0011314:	89 c3                	mov    ebx,eax
c0011316:	83 ec 0c             	sub    esp,0xc
c0011319:	53                   	push   ebx
c001131a:	e8 ad 79 00 00       	call   c0018ccc <Mutex::Mutex()>
c001131f:	83 c4 10             	add    esp,0x10
c0011322:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011326:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0011329:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001132d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011331:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011338:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001133f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011343:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0011349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001134d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011350:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011354:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001135a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011360:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011364:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0011367:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001136a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001136e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0011372:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011376:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001137c:	05 00 01 00 00       	add    eax,0x100
c0011381:	c1 e0 04             	shl    eax,0x4
c0011384:	83 ec 0c             	sub    esp,0xc
c0011387:	50                   	push   eax
c0011388:	e8 5a 8a ff ff       	call   c0009de7 <malloc>
c001138d:	83 c4 10             	add    esp,0x10
c0011390:	89 c2                	mov    edx,eax
c0011392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011396:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001139d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00113a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113a8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00113ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00113b0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00113b6:	c1 e0 06             	shl    eax,0x6
c00113b9:	83 ec 0c             	sub    esp,0xc
c00113bc:	50                   	push   eax
c00113bd:	e8 25 8a ff ff       	call   c0009de7 <malloc>
c00113c2:	83 c4 10             	add    esp,0x10
c00113c5:	89 c2                	mov    edx,eax
c00113c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113cb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00113ce:	90                   	nop
c00113cf:	83 c4 18             	add    esp,0x18
c00113d2:	5b                   	pop    ebx
c00113d3:	c3                   	ret    

c00113d4 <VCache::invalidateReadBuffer()>:
c00113d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113d8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00113de:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00113e2:	c3                   	ret    
c00113e3:	90                   	nop

c00113e4 <VCache::writeWriteBuffer()>:
c00113e4:	53                   	push   ebx
c00113e5:	83 ec 08             	sub    esp,0x8
c00113e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113ec:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00113f0:	74 1e                	je     c0011410 <VCache::writeWriteBuffer()+0x2c>
c00113f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00113f5:	83 ec 0c             	sub    esp,0xc
c00113f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00113fa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00113fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011400:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011403:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011406:	50                   	push   eax
c0011407:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001140a:	83 c4 20             	add    esp,0x20
c001140d:	8d 76 00             	lea    esi,[esi+0x0]
c0011410:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0011417:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001141e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0011422:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0011429:	83 c4 08             	add    esp,0x8
c001142c:	5b                   	pop    ebx
c001142d:	c3                   	ret    
c001142e:	66 90                	xchg   ax,ax

c0011430 <VCache::~VCache()>:
c0011430:	83 ec 0c             	sub    esp,0xc
c0011433:	ba 60 5c 02 c0       	mov    edx,0xc0025c60
c0011438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001143c:	89 10                	mov    DWORD PTR [eax],edx
c001143e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011442:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0011445:	84 c0                	test   al,al
c0011447:	74 0f                	je     c0011458 <VCache::~VCache()+0x28>
c0011449:	83 ec 0c             	sub    esp,0xc
c001144c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011450:	e8 8f ff ff ff       	call   c00113e4 <VCache::writeWriteBuffer()>
c0011455:	83 c4 10             	add    esp,0x10
c0011458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001145c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001145f:	83 ec 0c             	sub    esp,0xc
c0011462:	50                   	push   eax
c0011463:	e8 8f 89 ff ff       	call   c0009df7 <free>
c0011468:	83 c4 10             	add    esp,0x10
c001146b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001146f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011472:	83 ec 0c             	sub    esp,0xc
c0011475:	50                   	push   eax
c0011476:	e8 7c 89 ff ff       	call   c0009df7 <free>
c001147b:	83 c4 10             	add    esp,0x10
c001147e:	90                   	nop
c001147f:	83 c4 0c             	add    esp,0xc
c0011482:	c3                   	ret    
c0011483:	90                   	nop

c0011484 <VCache::~VCache()>:
c0011484:	83 ec 0c             	sub    esp,0xc
c0011487:	83 ec 0c             	sub    esp,0xc
c001148a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001148e:	e8 9d ff ff ff       	call   c0011430 <VCache::~VCache()>
c0011493:	83 c4 10             	add    esp,0x10
c0011496:	83 ec 08             	sub    esp,0x8
c0011499:	6a 44                	push   0x44
c001149b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001149f:	e8 4e bb ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c00114a4:	83 c4 10             	add    esp,0x10
c00114a7:	83 c4 0c             	add    esp,0xc
c00114aa:	c3                   	ret    
c00114ab:	90                   	nop

c00114ac <VCache::write(unsigned long long, int, void*)>:
c00114ac:	55                   	push   ebp
c00114ad:	31 c0                	xor    eax,eax
c00114af:	57                   	push   edi
c00114b0:	56                   	push   esi
c00114b1:	53                   	push   ebx
c00114b2:	83 ec 0c             	sub    esp,0xc
c00114b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114b9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00114bd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00114c1:	8d 76 00             	lea    esi,[esi+0x0]
c00114c4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00114c8:	7d 1a                	jge    c00114e4 <VCache::write(unsigned long long, int, void*)+0x38>
c00114ca:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00114cd:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00114d3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114d7:	0f af c8             	imul   ecx,eax
c00114da:	01 ca                	add    edx,ecx
c00114dc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00114de:	40                   	inc    eax
c00114df:	eb e3                	jmp    c00114c4 <VCache::write(unsigned long long, int, void*)+0x18>
c00114e1:	8d 76 00             	lea    esi,[esi+0x0]
c00114e4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00114e8:	74 0a                	je     c00114f4 <VCache::write(unsigned long long, int, void*)+0x48>
c00114ea:	53                   	push   ebx
c00114eb:	e8 e4 fe ff ff       	call   c00113d4 <VCache::invalidateReadBuffer()>
c00114f0:	58                   	pop    eax
c00114f1:	8d 76 00             	lea    esi,[esi+0x0]
c00114f4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00114f8:	74 5e                	je     c0011558 <VCache::write(unsigned long long, int, void*)+0xac>
c00114fa:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00114fd:	89 e8                	mov    eax,ebp
c00114ff:	99                   	cdq    
c0011500:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0011503:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0011506:	89 c1                	mov    ecx,eax
c0011508:	89 d0                	mov    eax,edx
c001150a:	31 f1                	xor    ecx,esi
c001150c:	31 f8                	xor    eax,edi
c001150e:	09 c1                	or     ecx,eax
c0011510:	75 3a                	jne    c001154c <VCache::write(unsigned long long, int, void*)+0xa0>
c0011512:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0011517:	75 33                	jne    c001154c <VCache::write(unsigned long long, int, void*)+0xa0>
c0011519:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001151c:	89 ef                	mov    edi,ebp
c001151e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011524:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011528:	0f af f9             	imul   edi,ecx
c001152b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001152e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011530:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011533:	40                   	inc    eax
c0011534:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0011537:	83 f8 40             	cmp    eax,0x40
c001153a:	75 60                	jne    c001159c <VCache::write(unsigned long long, int, void*)+0xf0>
c001153c:	83 ec 0c             	sub    esp,0xc
c001153f:	53                   	push   ebx
c0011540:	e8 9f fe ff ff       	call   c00113e4 <VCache::writeWriteBuffer()>
c0011545:	83 c4 10             	add    esp,0x10
c0011548:	eb 52                	jmp    c001159c <VCache::write(unsigned long long, int, void*)+0xf0>
c001154a:	66 90                	xchg   ax,ax
c001154c:	83 ec 0c             	sub    esp,0xc
c001154f:	53                   	push   ebx
c0011550:	e8 8f fe ff ff       	call   c00113e4 <VCache::writeWriteBuffer()>
c0011555:	83 c4 10             	add    esp,0x10
c0011558:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001155b:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0011560:	7f 22                	jg     c0011584 <VCache::write(unsigned long long, int, void*)+0xd8>
c0011562:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0011565:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0011568:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001156c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0011570:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0011573:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0011576:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001157c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011580:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011582:	eb 18                	jmp    c001159c <VCache::write(unsigned long long, int, void*)+0xf0>
c0011584:	83 ec 0c             	sub    esp,0xc
c0011587:	8b 10                	mov    edx,DWORD PTR [eax]
c0011589:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001158d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011591:	57                   	push   edi
c0011592:	56                   	push   esi
c0011593:	50                   	push   eax
c0011594:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0011597:	83 c4 20             	add    esp,0x20
c001159a:	66 90                	xchg   ax,ax
c001159c:	83 c4 0c             	add    esp,0xc
c001159f:	31 c0                	xor    eax,eax
c00115a1:	5b                   	pop    ebx
c00115a2:	5e                   	pop    esi
c00115a3:	5f                   	pop    edi
c00115a4:	5d                   	pop    ebp
c00115a5:	c3                   	ret    

c00115a6 <VCache::read(unsigned long long, int, void*)>:
c00115a6:	55                   	push   ebp
c00115a7:	31 c0                	xor    eax,eax
c00115a9:	57                   	push   edi
c00115aa:	56                   	push   esi
c00115ab:	53                   	push   ebx
c00115ac:	83 ec 1c             	sub    esp,0x1c
c00115af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00115b3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00115b7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00115bb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00115bf:	90                   	nop
c00115c0:	39 e8                	cmp    eax,ebp
c00115c2:	7d 18                	jge    c00115dc <VCache::read(unsigned long long, int, void*)+0x36>
c00115c4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00115c7:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00115cd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00115d1:	0f af c8             	imul   ecx,eax
c00115d4:	01 ca                	add    edx,ecx
c00115d6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00115d8:	40                   	inc    eax
c00115d9:	eb e5                	jmp    c00115c0 <VCache::read(unsigned long long, int, void*)+0x1a>
c00115db:	90                   	nop
c00115dc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00115e0:	74 0e                	je     c00115f0 <VCache::read(unsigned long long, int, void*)+0x4a>
c00115e2:	83 ec 0c             	sub    esp,0xc
c00115e5:	53                   	push   ebx
c00115e6:	e8 f9 fd ff ff       	call   c00113e4 <VCache::writeWriteBuffer()>
c00115eb:	83 c4 10             	add    esp,0x10
c00115ee:	66 90                	xchg   ax,ax
c00115f0:	83 fd 01             	cmp    ebp,0x1
c00115f3:	0f 85 87 00 00 00    	jne    c0011680 <VCache::read(unsigned long long, int, void*)+0xda>
c00115f9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00115fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011600:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0011607:	75 77                	jne    c0011680 <VCache::read(unsigned long long, int, void*)+0xda>
c0011609:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001160c:	89 e9                	mov    ecx,ebp
c001160e:	f7 d9                	neg    ecx
c0011610:	89 c8                	mov    eax,ecx
c0011612:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011616:	c1 f8 1f             	sar    eax,0x1f
c0011619:	21 f1                	and    ecx,esi
c001161b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001161f:	89 c8                	mov    eax,ecx
c0011621:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011625:	21 f9                	and    ecx,edi
c0011627:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001162b:	89 ca                	mov    edx,ecx
c001162d:	74 0d                	je     c001163c <VCache::read(unsigned long long, int, void*)+0x96>
c001162f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0011632:	75 08                	jne    c001163c <VCache::read(unsigned long long, int, void*)+0x96>
c0011634:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0011637:	74 27                	je     c0011660 <VCache::read(unsigned long long, int, void*)+0xba>
c0011639:	8d 76 00             	lea    esi,[esi+0x0]
c001163c:	83 ec 0c             	sub    esp,0xc
c001163f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0011643:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011647:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001164a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001164d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001164f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011652:	55                   	push   ebp
c0011653:	52                   	push   edx
c0011654:	50                   	push   eax
c0011655:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011659:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001165c:	83 c4 20             	add    esp,0x20
c001165f:	90                   	nop
c0011660:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011663:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011667:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001166d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0011670:	48                   	dec    eax
c0011671:	21 c6                	and    esi,eax
c0011673:	0f af f1             	imul   esi,ecx
c0011676:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0011679:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001167b:	eb 23                	jmp    c00116a0 <VCache::read(unsigned long long, int, void*)+0xfa>
c001167d:	8d 76 00             	lea    esi,[esi+0x0]
c0011680:	83 ec 0c             	sub    esp,0xc
c0011683:	53                   	push   ebx
c0011684:	e8 4b fd ff ff       	call   c00113d4 <VCache::invalidateReadBuffer()>
c0011689:	5a                   	pop    edx
c001168a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001168d:	8b 10                	mov    edx,DWORD PTR [eax]
c001168f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011693:	55                   	push   ebp
c0011694:	57                   	push   edi
c0011695:	56                   	push   esi
c0011696:	50                   	push   eax
c0011697:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001169a:	83 c4 20             	add    esp,0x20
c001169d:	8d 76 00             	lea    esi,[esi+0x0]
c00116a0:	83 c4 1c             	add    esp,0x1c
c00116a3:	31 c0                	xor    eax,eax
c00116a5:	5b                   	pop    ebx
c00116a6:	5e                   	pop    esi
c00116a7:	5f                   	pop    edi
c00116a8:	5d                   	pop    ebp
c00116a9:	c3                   	ret    

c00116aa <Video::putrect(int, int, int, int, unsigned int)>:
c00116aa:	55                   	push   ebp
c00116ab:	57                   	push   edi
c00116ac:	56                   	push   esi
c00116ad:	53                   	push   ebx
c00116ae:	83 ec 1c             	sub    esp,0x1c
c00116b1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00116b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116b9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00116bd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00116c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116c9:	01 df                	add    edi,ebx
c00116cb:	39 fb                	cmp    ebx,edi
c00116cd:	7d 1f                	jge    c00116ee <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00116cf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00116d3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00116d7:	7d 12                	jge    c00116eb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00116d9:	8b 16                	mov    edx,DWORD PTR [esi]
c00116db:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00116df:	53                   	push   ebx
c00116e0:	55                   	push   ebp
c00116e1:	45                   	inc    ebp
c00116e2:	56                   	push   esi
c00116e3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00116e6:	83 c4 10             	add    esp,0x10
c00116e9:	eb e8                	jmp    c00116d3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00116eb:	43                   	inc    ebx
c00116ec:	eb dd                	jmp    c00116cb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00116ee:	83 c4 1c             	add    esp,0x1c
c00116f1:	5b                   	pop    ebx
c00116f2:	5e                   	pop    esi
c00116f3:	5f                   	pop    edi
c00116f4:	5d                   	pop    ebp
c00116f5:	c3                   	ret    

c00116f6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00116f6:	55                   	push   ebp
c00116f7:	57                   	push   edi
c00116f8:	31 ff                	xor    edi,edi
c00116fa:	56                   	push   esi
c00116fb:	53                   	push   ebx
c00116fc:	83 ec 1c             	sub    esp,0x1c
c00116ff:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0011703:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011707:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001170e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0011713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011717:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001171b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001171f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011722:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011726:	01 f9                	add    ecx,edi
c0011728:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001172c:	7d 2f                	jge    c001175d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001172e:	31 f6                	xor    esi,esi
c0011730:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011734:	01 f2                	add    edx,esi
c0011736:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001173a:	7d 1a                	jge    c0011756 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001173c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001173f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0011742:	46                   	inc    esi
c0011743:	51                   	push   ecx
c0011744:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011748:	52                   	push   edx
c0011749:	55                   	push   ebp
c001174a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001174d:	83 c4 10             	add    esp,0x10
c0011750:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011754:	eb da                	jmp    c0011730 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0011756:	47                   	inc    edi
c0011757:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001175b:	eb c5                	jmp    c0011722 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001175d:	83 c4 1c             	add    esp,0x1c
c0011760:	5b                   	pop    ebx
c0011761:	5e                   	pop    esi
c0011762:	5f                   	pop    edi
c0011763:	5d                   	pop    ebp
c0011764:	c3                   	ret    
c0011765:	90                   	nop

c0011766 <Video::blit(unsigned int*, int, int, int, int)>:
c0011766:	55                   	push   ebp
c0011767:	57                   	push   edi
c0011768:	56                   	push   esi
c0011769:	53                   	push   ebx
c001176a:	83 ec 1c             	sub    esp,0x1c
c001176d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011771:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011775:	85 c0                	test   eax,eax
c0011777:	79 02                	jns    c001177b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0011779:	31 c0                	xor    eax,eax
c001177b:	c1 e0 02             	shl    eax,0x2
c001177e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0011782:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011786:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001178a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001178e:	39 d8                	cmp    eax,ebx
c0011790:	7e 49                	jle    c00117db <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011792:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011798:	7c 41                	jl     c00117db <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001179a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001179e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00117a2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00117a6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00117aa:	39 f9                	cmp    ecx,edi
c00117ac:	7e 22                	jle    c00117d0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00117ae:	83 c5 04             	add    ebp,0x4
c00117b1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00117b7:	7c 14                	jl     c00117cd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00117b9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00117bb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00117be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00117c2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00117c6:	56                   	push   esi
c00117c7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00117ca:	83 c4 10             	add    esp,0x10
c00117cd:	47                   	inc    edi
c00117ce:	eb d2                	jmp    c00117a2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00117d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117d4:	43                   	inc    ebx
c00117d5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00117d9:	eb ab                	jmp    c0011786 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00117db:	83 c4 1c             	add    esp,0x1c
c00117de:	5b                   	pop    ebx
c00117df:	5e                   	pop    esi
c00117e0:	5f                   	pop    edi
c00117e1:	5d                   	pop    ebp
c00117e2:	c3                   	ret    
c00117e3:	90                   	nop

c00117e4 <Video::clearScreen(unsigned int)>:
c00117e4:	57                   	push   edi
c00117e5:	56                   	push   esi
c00117e6:	53                   	push   ebx
c00117e7:	31 db                	xor    ebx,ebx
c00117e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00117ed:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00117f3:	7e 1f                	jle    c0011814 <Video::clearScreen(unsigned int)+0x30>
c00117f5:	31 ff                	xor    edi,edi
c00117f7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00117fd:	7e 12                	jle    c0011811 <Video::clearScreen(unsigned int)+0x2d>
c00117ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0011801:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011805:	53                   	push   ebx
c0011806:	57                   	push   edi
c0011807:	47                   	inc    edi
c0011808:	56                   	push   esi
c0011809:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001180c:	83 c4 10             	add    esp,0x10
c001180f:	eb e6                	jmp    c00117f7 <Video::clearScreen(unsigned int)+0x13>
c0011811:	43                   	inc    ebx
c0011812:	eb d9                	jmp    c00117ed <Video::clearScreen(unsigned int)+0x9>
c0011814:	5b                   	pop    ebx
c0011815:	5e                   	pop    esi
c0011816:	5f                   	pop    edi
c0011817:	c3                   	ret    

c0011818 <Video::putpixel(int, int, unsigned int)>:
c0011818:	c7 44 24 04 68 5c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025c68
c0011820:	e9 90 39 00 00       	jmp    c00151b5 <Krnl::panic(char const*)>
c0011825:	90                   	nop

c0011826 <Video::Video(char const*)>:
c0011826:	83 ec 0c             	sub    esp,0xc
c0011829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001182d:	83 ec 08             	sub    esp,0x8
c0011830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011834:	50                   	push   eax
c0011835:	e8 10 d0 ff ff       	call   c000e84a <Device::Device(char const*)>
c001183a:	83 c4 10             	add    esp,0x10
c001183d:	ba d8 5c 02 c0       	mov    edx,0xc0025cd8
c0011842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011846:	89 10                	mov    DWORD PTR [eax],edx
c0011848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001184c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011856:	90                   	nop
c0011857:	83 c4 0c             	add    esp,0xc
c001185a:	c3                   	ret    
c001185b:	90                   	nop

c001185c <Video::~Video()>:
c001185c:	83 ec 0c             	sub    esp,0xc
c001185f:	ba d8 5c 02 c0       	mov    edx,0xc0025cd8
c0011864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011868:	89 10                	mov    DWORD PTR [eax],edx
c001186a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186e:	83 ec 0c             	sub    esp,0xc
c0011871:	50                   	push   eax
c0011872:	e8 9d cc ff ff       	call   c000e514 <Device::~Device()>
c0011877:	83 c4 10             	add    esp,0x10
c001187a:	90                   	nop
c001187b:	83 c4 0c             	add    esp,0xc
c001187e:	c3                   	ret    
c001187f:	90                   	nop

c0011880 <Video::~Video()>:
c0011880:	83 ec 0c             	sub    esp,0xc
c0011883:	83 ec 0c             	sub    esp,0xc
c0011886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001188a:	e8 cd ff ff ff       	call   c001185c <Video::~Video()>
c001188f:	83 c4 10             	add    esp,0x10
c0011892:	83 ec 08             	sub    esp,0x8
c0011895:	68 64 01 00 00       	push   0x164
c001189a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001189e:	e8 4f b7 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c00118a3:	83 c4 10             	add    esp,0x10
c00118a6:	83 c4 0c             	add    esp,0xc
c00118a9:	c3                   	ret    

c00118aa <Video::isMonochrome()>:
c00118aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ae:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00118b4:	c3                   	ret    
c00118b5:	90                   	nop

c00118b6 <Video::getWidth()>:
c00118b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00118c0:	c3                   	ret    
c00118c1:	90                   	nop

c00118c2 <Video::getHeight()>:
c00118c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00118cc:	c3                   	ret    
c00118cd:	90                   	nop

c00118ce <Video::drawCursor(int, int, unsigned char*, int)>:
c00118ce:	55                   	push   ebp
c00118cf:	57                   	push   edi
c00118d0:	56                   	push   esi
c00118d1:	53                   	push   ebx
c00118d2:	83 ec 2c             	sub    esp,0x2c
c00118d5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00118d9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00118dd:	83 f8 01             	cmp    eax,0x1
c00118e0:	19 c9                	sbb    ecx,ecx
c00118e2:	31 db                	xor    ebx,ebx
c00118e4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00118e8:	89 cd                	mov    ebp,ecx
c00118ea:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00118f2:	f7 d5                	not    ebp
c00118f4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00118fa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00118fe:	01 d8                	add    eax,ebx
c0011900:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011904:	56                   	push   esi
c0011905:	e8 b8 ff ff ff       	call   c00118c2 <Video::getHeight()>
c001190a:	59                   	pop    ecx
c001190b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001190f:	7e 70                	jle    c0011981 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011911:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011915:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011919:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001191c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011920:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011924:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001192b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001192f:	89 f8                	mov    eax,edi
c0011931:	83 c0 20             	add    eax,0x20
c0011934:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011938:	56                   	push   esi
c0011939:	e8 78 ff ff ff       	call   c00118b6 <Video::getWidth()>
c001193e:	5a                   	pop    edx
c001193f:	39 c7                	cmp    edi,eax
c0011941:	7d 34                	jge    c0011977 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011943:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011948:	74 05                	je     c001194f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001194a:	8b 06                	mov    eax,DWORD PTR [esi]
c001194c:	55                   	push   ebp
c001194d:	eb 0d                	jmp    c001195c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001194f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011954:	74 12                	je     c0011968 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011956:	8b 06                	mov    eax,DWORD PTR [esi]
c0011958:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001195c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011960:	57                   	push   edi
c0011961:	56                   	push   esi
c0011962:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011965:	83 c4 10             	add    esp,0x10
c0011968:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001196c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011970:	47                   	inc    edi
c0011971:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011975:	75 c1                	jne    c0011938 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011977:	43                   	inc    ebx
c0011978:	83 fb 20             	cmp    ebx,0x20
c001197b:	0f 85 79 ff ff ff    	jne    c00118fa <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011981:	83 c4 2c             	add    esp,0x2c
c0011984:	5b                   	pop    ebx
c0011985:	5e                   	pop    esi
c0011986:	5f                   	pop    edi
c0011987:	5d                   	pop    ebp
c0011988:	c3                   	ret    
c0011989:	90                   	nop

c001198a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001198a:	55                   	push   ebp
c001198b:	57                   	push   edi
c001198c:	56                   	push   esi
c001198d:	53                   	push   ebx
c001198e:	83 ec 28             	sub    esp,0x28
c0011991:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011995:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011999:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c001199d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00119a1:	c1 e6 08             	shl    esi,0x8
c00119a4:	01 c6                	add    esi,eax
c00119a6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00119aa:	c1 e0 08             	shl    eax,0x8
c00119ad:	01 d0                	add    eax,edx
c00119af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119b7:	0f af c6             	imul   eax,esi
c00119ba:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00119c1:	50                   	push   eax
c00119c2:	e8 20 84 ff ff       	call   c0009de7 <malloc>
c00119c7:	83 c4 10             	add    esp,0x10
c00119ca:	89 c7                	mov    edi,eax
c00119cc:	85 c0                	test   eax,eax
c00119ce:	75 10                	jne    c00119e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00119d0:	83 ec 0c             	sub    esp,0xc
c00119d3:	68 89 5c 02 c0       	push   0xc0025c89
c00119d8:	e8 d8 37 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00119e3:	ba 12 00 00 00       	mov    edx,0x12
c00119e8:	84 c0                	test   al,al
c00119ea:	74 11                	je     c00119fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00119ec:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00119f0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00119f4:	c1 fa 03             	sar    edx,0x3
c00119f7:	0f af d1             	imul   edx,ecx
c00119fa:	83 c2 12             	add    edx,0x12
c00119fd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011a01:	74 04                	je     c0011a07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011a03:	85 f6                	test   esi,esi
c0011a05:	75 12                	jne    c0011a19 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011a07:	83 ec 0c             	sub    esp,0xc
c0011a0a:	68 99 5c 02 c0       	push   0xc0025c99
c0011a0f:	e8 bf b6 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0011a14:	e9 b8 00 00 00       	jmp    c0011ad1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011a19:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011a1d:	80 f9 02             	cmp    cl,0x2
c0011a20:	0f 85 96 00 00 00    	jne    c0011abc <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011a26:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011a2b:	75 0e                	jne    c0011a3b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011a2d:	84 c0                	test   al,al
c0011a2f:	75 0a                	jne    c0011a3b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011a31:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011a34:	83 e8 18             	sub    eax,0x18
c0011a37:	a8 f7                	test   al,0xf7
c0011a39:	74 0a                	je     c0011a45 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011a3b:	83 ec 0c             	sub    esp,0xc
c0011a3e:	68 ae 5c 02 c0       	push   0xc0025cae
c0011a43:	eb 7f                	jmp    c0011ac4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011a45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011a4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011a55:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011a59:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011a61:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011a65:	75 0c                	jne    c0011a73 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011a67:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011a6c:	c1 e0 18             	shl    eax,0x18
c0011a6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a73:	45                   	inc    ebp
c0011a74:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011a79:	c1 e1 10             	shl    ecx,0x10
c0011a7c:	89 c8                	mov    eax,ecx
c0011a7e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011a83:	c1 e1 08             	shl    ecx,0x8
c0011a86:	09 c1                	or     ecx,eax
c0011a88:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011a8c:	09 c1                	or     ecx,eax
c0011a8e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011a92:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011a96:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011a9a:	c1 f8 03             	sar    eax,0x3
c0011a9d:	01 c2                	add    edx,eax
c0011a9f:	89 e8                	mov    eax,ebp
c0011aa1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011aa5:	39 c6                	cmp    esi,eax
c0011aa7:	7f b0                	jg     c0011a59 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011aa9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011aad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011ab1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011ab4:	7e 22                	jle    c0011ad8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011ab6:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011aba:	eb 99                	jmp    c0011a55 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011abc:	50                   	push   eax
c0011abd:	50                   	push   eax
c0011abe:	51                   	push   ecx
c0011abf:	68 bc 5c 02 c0       	push   0xc0025cbc
c0011ac4:	e8 0a b6 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0011ac9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011acc:	e8 26 83 ff ff       	call   c0009df7 <free>
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	31 ff                	xor    edi,edi
c0011ad6:	eb 0f                	jmp    c0011ae7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011ad8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011adc:	89 30                	mov    DWORD PTR [eax],esi
c0011ade:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ae2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011ae5:	89 30                	mov    DWORD PTR [eax],esi
c0011ae7:	83 c4 1c             	add    esp,0x1c
c0011aea:	89 f8                	mov    eax,edi
c0011aec:	5b                   	pop    ebx
c0011aed:	5e                   	pop    esi
c0011aee:	5f                   	pop    edi
c0011aef:	5d                   	pop    ebp
c0011af0:	c3                   	ret    
c0011af1:	90                   	nop

c0011af2 <Video::putTGA(int, int, unsigned char*, int)>:
c0011af2:	55                   	push   ebp
c0011af3:	57                   	push   edi
c0011af4:	56                   	push   esi
c0011af5:	53                   	push   ebx
c0011af6:	83 ec 28             	sub    esp,0x28
c0011af9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011afd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011b01:	50                   	push   eax
c0011b02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011b06:	50                   	push   eax
c0011b07:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011b0b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011b0f:	56                   	push   esi
c0011b10:	e8 75 fe ff ff       	call   c001198a <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011b15:	83 c4 20             	add    esp,0x20
c0011b18:	85 c0                	test   eax,eax
c0011b1a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011b1e:	74 35                	je     c0011b55 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011b20:	89 c7                	mov    edi,eax
c0011b22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011b26:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011b2a:	39 d8                	cmp    eax,ebx
c0011b2c:	7e 27                	jle    c0011b55 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011b2e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b36:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011b3a:	39 e8                	cmp    eax,ebp
c0011b3c:	7e 14                	jle    c0011b52 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011b3e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b40:	83 c7 04             	add    edi,0x4
c0011b43:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011b46:	53                   	push   ebx
c0011b47:	55                   	push   ebp
c0011b48:	45                   	inc    ebp
c0011b49:	56                   	push   esi
c0011b4a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011b4d:	83 c4 10             	add    esp,0x10
c0011b50:	eb e0                	jmp    c0011b32 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011b52:	43                   	inc    ebx
c0011b53:	eb cd                	jmp    c0011b22 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011b55:	83 c4 1c             	add    esp,0x1c
c0011b58:	5b                   	pop    ebx
c0011b59:	5e                   	pop    esi
c0011b5a:	5f                   	pop    edi
c0011b5b:	5d                   	pop    ebp
c0011b5c:	c3                   	ret    
c0011b5d:	66 90                	xchg   ax,ax
c0011b5f:	90                   	nop

c0011b60 <ACPI::close(int, int, void*)>:
c0011b60:	83 ec 1c             	sub    esp,0x1c
c0011b63:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011b6b:	74 0b                	je     c0011b78 <ACPI::close(int, int, void*)+0x18>
c0011b6d:	b8 00 00 00 00       	mov    eax,0x0
c0011b72:	e9 99 00 00 00       	jmp    c0011c10 <ACPI::close(int, int, void*)+0xb0>
c0011b77:	90                   	nop
c0011b78:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011b7d:	75 29                	jne    c0011ba8 <ACPI::close(int, int, void*)+0x48>
c0011b7f:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c0011b84:	85 c0                	test   eax,eax
c0011b86:	74 08                	je     c0011b90 <ACPI::close(int, int, void*)+0x30>
c0011b88:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c0011b8d:	ff d0                	call   eax
c0011b8f:	90                   	nop
c0011b90:	83 ec 0c             	sub    esp,0xc
c0011b93:	68 18 5d 02 c0       	push   0xc0025d18
c0011b98:	e8 18 36 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c0011b9d:	83 c4 10             	add    esp,0x10
c0011ba0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ba5:	eb 69                	jmp    c0011c10 <ACPI::close(int, int, void*)+0xb0>
c0011ba7:	90                   	nop
c0011ba8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011bad:	75 59                	jne    c0011c08 <ACPI::close(int, int, void*)+0xa8>
c0011baf:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c0011bb4:	85 c0                	test   eax,eax
c0011bb6:	74 08                	je     c0011bc0 <ACPI::close(int, int, void*)+0x60>
c0011bb8:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c0011bbd:	ff d0                	call   eax
c0011bbf:	90                   	nop
c0011bc0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0011bc8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011bcd:	83 e0 02             	and    eax,0x2
c0011bd0:	74 1e                	je     c0011bf0 <ACPI::close(int, int, void*)+0x90>
c0011bd2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011bd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bdd:	89 c2                	mov    edx,eax
c0011bdf:	ec                   	in     al,dx
c0011be0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011be4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011be8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011bec:	eb da                	jmp    c0011bc8 <ACPI::close(int, int, void*)+0x68>
c0011bee:	66 90                	xchg   ax,ax
c0011bf0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011bf7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011bfc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011c00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c04:	ee                   	out    dx,al
c0011c05:	8d 76 00             	lea    esi,[esi+0x0]
c0011c08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c10:	83 c4 1c             	add    esp,0x1c
c0011c13:	c3                   	ret    

c0011c14 <findRSDP()>:
c0011c14:	83 ec 1c             	sub    esp,0x1c
c0011c17:	83 ec 0c             	sub    esp,0xc
c0011c1a:	68 3b 5e 02 c0       	push   0xc0025e3b
c0011c1f:	e8 1d 82 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011c24:	83 c4 10             	add    esp,0x10
c0011c27:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0011c2c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c32:	83 e0 04             	and    eax,0x4
c0011c35:	84 c0                	test   al,al
c0011c37:	75 0b                	jne    c0011c44 <findRSDP()+0x30>
c0011c39:	b8 00 00 00 00       	mov    eax,0x0
c0011c3e:	e9 a1 00 00 00       	jmp    c0011ce4 <findRSDP()+0xd0>
c0011c43:	90                   	nop
c0011c44:	a1 f8 8b 02 c0       	mov    eax,ds:0xc0028bf8
c0011c49:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011c4e:	7f 1c                	jg     c0011c6c <findRSDP()+0x58>
c0011c50:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0011c55:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c5b:	83 e2 fb             	and    edx,0xfffffffb
c0011c5e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c64:	b8 00 00 00 00       	mov    eax,0x0
c0011c69:	eb 79                	jmp    c0011ce4 <findRSDP()+0xd0>
c0011c6b:	90                   	nop
c0011c6c:	83 ec 0c             	sub    esp,0xc
c0011c6f:	68 4b 5e 02 c0       	push   0xc0025e4b
c0011c74:	e8 c8 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011c79:	83 c4 10             	add    esp,0x10
c0011c7c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011c84:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011c8c:	77 3e                	ja     c0011ccc <findRSDP()+0xb8>
c0011c8e:	83 ec 04             	sub    esp,0x4
c0011c91:	6a 08                	push   0x8
c0011c93:	68 64 5e 02 c0       	push   0xc0025e64
c0011c98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c9c:	e8 ef e8 fe ff       	call   c0000590 <memcmp>
c0011ca1:	83 c4 10             	add    esp,0x10
c0011ca4:	85 c0                	test   eax,eax
c0011ca6:	0f 94 c0             	sete   al
c0011ca9:	84 c0                	test   al,al
c0011cab:	74 17                	je     c0011cc4 <findRSDP()+0xb0>
c0011cad:	83 ec 0c             	sub    esp,0xc
c0011cb0:	68 6d 5e 02 c0       	push   0xc0025e6d
c0011cb5:	e8 87 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011cba:	83 c4 10             	add    esp,0x10
c0011cbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cc1:	eb 21                	jmp    c0011ce4 <findRSDP()+0xd0>
c0011cc3:	90                   	nop
c0011cc4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011cc9:	eb b9                	jmp    c0011c84 <findRSDP()+0x70>
c0011ccb:	90                   	nop
c0011ccc:	83 ec 0c             	sub    esp,0xc
c0011ccf:	68 7b 5e 02 c0       	push   0xc0025e7b
c0011cd4:	e8 68 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011cd9:	83 c4 10             	add    esp,0x10
c0011cdc:	b8 00 00 00 00       	mov    eax,0x0
c0011ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0011ce4:	83 c4 1c             	add    esp,0x1c
c0011ce7:	c3                   	ret    

c0011ce8 <loadACPITables(unsigned char*)>:
c0011ce8:	57                   	push   edi
c0011ce9:	56                   	push   esi
c0011cea:	53                   	push   ebx
c0011ceb:	83 ec 60             	sub    esp,0x60
c0011cee:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0011cf3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011cf9:	83 e0 04             	and    eax,0x4
c0011cfc:	84 c0                	test   al,al
c0011cfe:	0f 84 3c 02 00 00    	je     c0011f40 <loadACPITables(unsigned char*)+0x258>
c0011d04:	a0 20 94 02 c0       	mov    al,ds:0xc0029420
c0011d09:	84 c0                	test   al,al
c0011d0b:	74 77                	je     c0011d84 <loadACPITables(unsigned char*)+0x9c>
c0011d0d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011d15:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011d19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d1c:	83 e8 24             	sub    eax,0x24
c0011d1f:	c1 e8 03             	shr    eax,0x3
c0011d22:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011d26:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011d2e:	66 90                	xchg   ax,ax
c0011d30:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011d34:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011d38:	0f 8d b6 00 00 00    	jge    c0011df4 <loadACPITables(unsigned char*)+0x10c>
c0011d3e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d42:	83 c0 24             	add    eax,0x24
c0011d45:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011d49:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011d4d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011d51:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011d55:	c1 e0 03             	shl    eax,0x3
c0011d58:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011d5c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011d60:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011d63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d65:	89 c1                	mov    ecx,eax
c0011d67:	a1 0c 92 02 c0       	mov    eax,ds:0xc002920c
c0011d6c:	8d 50 01             	lea    edx,[eax+0x1]
c0011d6f:	89 15 0c 92 02 c0    	mov    DWORD PTR ds:0xc002920c,edx
c0011d75:	89 ca                	mov    edx,ecx
c0011d77:	89 14 c5 24 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6ddc],edx
c0011d7e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011d82:	eb ac                	jmp    c0011d30 <loadACPITables(unsigned char*)+0x48>
c0011d84:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d88:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011d8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d93:	83 e8 24             	sub    eax,0x24
c0011d96:	c1 e8 02             	shr    eax,0x2
c0011d99:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011d9d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011da5:	8d 76 00             	lea    esi,[esi+0x0]
c0011da8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011dac:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011db0:	7d 42                	jge    c0011df4 <loadACPITables(unsigned char*)+0x10c>
c0011db2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011db6:	83 c0 24             	add    eax,0x24
c0011db9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011dbd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011dc1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011dc5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011dc9:	c1 e0 02             	shl    eax,0x2
c0011dcc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011dd0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dd4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011dd6:	a1 0c 92 02 c0       	mov    eax,ds:0xc002920c
c0011ddb:	8d 50 01             	lea    edx,[eax+0x1]
c0011dde:	89 15 0c 92 02 c0    	mov    DWORD PTR ds:0xc002920c,edx
c0011de4:	89 ca                	mov    edx,ecx
c0011de6:	89 14 c5 24 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6ddc],edx
c0011ded:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011df1:	eb b5                	jmp    c0011da8 <loadACPITables(unsigned char*)+0xc0>
c0011df3:	90                   	nop
c0011df4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011dfc:	a1 0c 92 02 c0       	mov    eax,ds:0xc002920c
c0011e01:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011e05:	0f 8d 39 01 00 00    	jge    c0011f44 <loadACPITables(unsigned char*)+0x25c>
c0011e0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011e0f:	8b 04 c5 24 92 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6ddc]
c0011e16:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011e1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e1e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011e22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e26:	25 ff 0f 00 00       	and    eax,0xfff
c0011e2b:	89 c6                	mov    esi,eax
c0011e2d:	8b 1d f0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf0
c0011e33:	83 ec 0c             	sub    esp,0xc
c0011e36:	6a 01                	push   0x1
c0011e38:	e8 70 9f ff ff       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c0011e3d:	83 c4 10             	add    esp,0x10
c0011e40:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011e44:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011e4a:	83 ec 0c             	sub    esp,0xc
c0011e4d:	6a 01                	push   0x1
c0011e4f:	6a 01                	push   0x1
c0011e51:	50                   	push   eax
c0011e52:	52                   	push   edx
c0011e53:	53                   	push   ebx
c0011e54:	e8 f1 a8 ff ff       	call   c000c74a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e59:	83 c4 20             	add    esp,0x20
c0011e5c:	09 f0                	or     eax,esi
c0011e5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011e62:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011e66:	c1 e0 03             	shl    eax,0x3
c0011e69:	05 20 92 02 c0       	add    eax,0xc0029220
c0011e6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011e72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e7a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011e82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011e96:	89 c6                	mov    esi,eax
c0011e98:	89 d7                	mov    edi,edx
c0011e9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e9c:	89 c8                	mov    eax,ecx
c0011e9e:	89 fa                	mov    edx,edi
c0011ea0:	89 f3                	mov    ebx,esi
c0011ea2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011ea6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011eaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011eae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011eb5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011eb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ebd:	05 00 10 00 00       	add    eax,0x1000
c0011ec2:	c1 e8 0c             	shr    eax,0xc
c0011ec5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011ec9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ecd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011ed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed5:	25 ff 0f 00 00       	and    eax,0xfff
c0011eda:	89 c6                	mov    esi,eax
c0011edc:	8b 1d f0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf0
c0011ee2:	83 ec 0c             	sub    esp,0xc
c0011ee5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011ee9:	e8 bf 9e ff ff       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c0011eee:	83 c4 10             	add    esp,0x10
c0011ef1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011ef5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011efb:	83 ec 0c             	sub    esp,0xc
c0011efe:	6a 01                	push   0x1
c0011f00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011f04:	50                   	push   eax
c0011f05:	52                   	push   edx
c0011f06:	53                   	push   ebx
c0011f07:	e8 3e a8 ff ff       	call   c000c74a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f0c:	83 c4 20             	add    esp,0x20
c0011f0f:	09 f0                	or     eax,esi
c0011f11:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f19:	83 ec 0c             	sub    esp,0xc
c0011f1c:	50                   	push   eax
c0011f1d:	e8 bb a1 ff ff       	call   c000c0dd <Virt::freeKernelVirtualPages(unsigned long)>
c0011f22:	83 c4 10             	add    esp,0x10
c0011f25:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011f29:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f2d:	89 14 c5 24 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6ddc],edx
c0011f34:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011f38:	e9 bf fe ff ff       	jmp    c0011dfc <loadACPITables(unsigned char*)+0x114>
c0011f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011f40:	90                   	nop
c0011f41:	8d 76 00             	lea    esi,[esi+0x0]
c0011f44:	83 c4 60             	add    esp,0x60
c0011f47:	5b                   	pop    ebx
c0011f48:	5e                   	pop    esi
c0011f49:	5f                   	pop    edi
c0011f4a:	c3                   	ret    
c0011f4b:	90                   	nop

c0011f4c <findRSDT(unsigned char*)>:
c0011f4c:	57                   	push   edi
c0011f4d:	56                   	push   esi
c0011f4e:	53                   	push   ebx
c0011f4f:	83 ec 50             	sub    esp,0x50
c0011f52:	83 ec 0c             	sub    esp,0xc
c0011f55:	68 8f 5e 02 c0       	push   0xc0025e8f
c0011f5a:	e8 e2 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011f5f:	83 c4 10             	add    esp,0x10
c0011f62:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0011f67:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011f6d:	83 e0 04             	and    eax,0x4
c0011f70:	84 c0                	test   al,al
c0011f72:	75 0c                	jne    c0011f80 <findRSDT(unsigned char*)+0x34>
c0011f74:	b8 00 00 00 00       	mov    eax,0x0
c0011f79:	e9 86 01 00 00       	jmp    c0012104 <findRSDT(unsigned char*)+0x1b8>
c0011f7e:	66 90                	xchg   ax,ax
c0011f80:	83 ec 0c             	sub    esp,0xc
c0011f83:	68 a1 5e 02 c0       	push   0xc0025ea1
c0011f88:	e8 b4 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011f8d:	83 c4 10             	add    esp,0x10
c0011f90:	89 e0                	mov    eax,esp
c0011f92:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011f96:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011f9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011f9e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011fa6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011faa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011fb2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011fb6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011fba:	89 c6                	mov    esi,eax
c0011fbc:	89 d7                	mov    edi,edx
c0011fbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011fc0:	89 c8                	mov    eax,ecx
c0011fc2:	89 fa                	mov    edx,edi
c0011fc4:	89 f3                	mov    ebx,esi
c0011fc6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011fca:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011fce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011fd2:	83 ec 0c             	sub    esp,0xc
c0011fd5:	68 b3 5e 02 c0       	push   0xc0025eb3
c0011fda:	e8 62 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011fdf:	83 c4 10             	add    esp,0x10
c0011fe2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011fe6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011fea:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011ff2:	83 ec 0c             	sub    esp,0xc
c0011ff5:	68 c5 5e 02 c0       	push   0xc0025ec5
c0011ffa:	e8 42 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011fff:	83 c4 10             	add    esp,0x10
c0012002:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012006:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001200a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001200e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012012:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0012016:	83 ec 04             	sub    esp,0x4
c0012019:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001201d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012021:	68 3c 5d 02 c0       	push   0xc0025d3c
c0012026:	e8 a8 b0 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001202b:	83 c4 10             	add    esp,0x10
c001202e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0012032:	25 ff 0f 00 00       	and    eax,0xfff
c0012037:	89 c6                	mov    esi,eax
c0012039:	8b 1d f0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf0
c001203f:	83 ec 0c             	sub    esp,0xc
c0012042:	6a 02                	push   0x2
c0012044:	e8 64 9d ff ff       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c0012049:	83 c4 10             	add    esp,0x10
c001204c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012050:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012056:	83 ec 0c             	sub    esp,0xc
c0012059:	6a 01                	push   0x1
c001205b:	6a 02                	push   0x2
c001205d:	50                   	push   eax
c001205e:	52                   	push   edx
c001205f:	53                   	push   ebx
c0012060:	e8 e5 a6 ff ff       	call   c000c74a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012065:	83 c4 20             	add    esp,0x20
c0012068:	09 f0                	or     eax,esi
c001206a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001206e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012072:	25 ff 0f 00 00       	and    eax,0xfff
c0012077:	89 c6                	mov    esi,eax
c0012079:	8b 1d f0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf0
c001207f:	83 ec 0c             	sub    esp,0xc
c0012082:	6a 02                	push   0x2
c0012084:	e8 24 9d ff ff       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c0012089:	83 c4 10             	add    esp,0x10
c001208c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0012090:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012096:	83 ec 0c             	sub    esp,0xc
c0012099:	6a 01                	push   0x1
c001209b:	6a 02                	push   0x2
c001209d:	50                   	push   eax
c001209e:	52                   	push   edx
c001209f:	53                   	push   ebx
c00120a0:	e8 a5 a6 ff ff       	call   c000c74a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120a5:	83 c4 20             	add    esp,0x20
c00120a8:	09 f0                	or     eax,esi
c00120aa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00120ae:	83 ec 04             	sub    esp,0x4
c00120b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00120b5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00120b9:	68 5c 5d 02 c0       	push   0xc0025d5c
c00120be:	e8 10 b0 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00120cb:	75 13                	jne    c00120e0 <findRSDT(unsigned char*)+0x194>
c00120cd:	c6 05 20 94 02 c0 00 	mov    BYTE PTR ds:0xc0029420,0x0
c00120d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00120dc:	eb 22                	jmp    c0012100 <findRSDT(unsigned char*)+0x1b4>
c00120de:	66 90                	xchg   ax,ax
c00120e0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00120e5:	75 11                	jne    c00120f8 <findRSDT(unsigned char*)+0x1ac>
c00120e7:	c6 05 20 94 02 c0 01 	mov    BYTE PTR ds:0xc0029420,0x1
c00120ee:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00120f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00120f6:	eb 08                	jmp    c0012100 <findRSDT(unsigned char*)+0x1b4>
c00120f8:	b8 00 00 00 00       	mov    eax,0x0
c00120fd:	eb 05                	jmp    c0012104 <findRSDT(unsigned char*)+0x1b8>
c00120ff:	90                   	nop
c0012100:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012104:	83 c4 50             	add    esp,0x50
c0012107:	5b                   	pop    ebx
c0012108:	5e                   	pop    esi
c0012109:	5f                   	pop    edi
c001210a:	c3                   	ret    
c001210b:	90                   	nop

c001210c <findDataTable(unsigned char*, char*)>:
c001210c:	83 ec 1c             	sub    esp,0x1c
c001210f:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0012114:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001211a:	83 e0 04             	and    eax,0x4
c001211d:	84 c0                	test   al,al
c001211f:	75 07                	jne    c0012128 <findDataTable(unsigned char*, char*)+0x1c>
c0012121:	b8 00 00 00 00       	mov    eax,0x0
c0012126:	eb 58                	jmp    c0012180 <findDataTable(unsigned char*, char*)+0x74>
c0012128:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012130:	a1 0c 92 02 c0       	mov    eax,ds:0xc002920c
c0012135:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0012139:	7d 3d                	jge    c0012178 <findDataTable(unsigned char*, char*)+0x6c>
c001213b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001213f:	c1 e0 03             	shl    eax,0x3
c0012142:	05 20 92 02 c0       	add    eax,0xc0029220
c0012147:	83 ec 04             	sub    esp,0x4
c001214a:	6a 04                	push   0x4
c001214c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012150:	50                   	push   eax
c0012151:	e8 3a e4 fe ff       	call   c0000590 <memcmp>
c0012156:	83 c4 10             	add    esp,0x10
c0012159:	85 c0                	test   eax,eax
c001215b:	0f 94 c0             	sete   al
c001215e:	84 c0                	test   al,al
c0012160:	74 0e                	je     c0012170 <findDataTable(unsigned char*, char*)+0x64>
c0012162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012166:	8b 04 c5 24 92 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6ddc]
c001216d:	eb 11                	jmp    c0012180 <findDataTable(unsigned char*, char*)+0x74>
c001216f:	90                   	nop
c0012170:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0012174:	eb ba                	jmp    c0012130 <findDataTable(unsigned char*, char*)+0x24>
c0012176:	66 90                	xchg   ax,ax
c0012178:	b8 00 00 00 00       	mov    eax,0x0
c001217d:	8d 76 00             	lea    esi,[esi+0x0]
c0012180:	83 c4 1c             	add    esp,0x1c
c0012183:	c3                   	ret    

c0012184 <scanMADT()>:
c0012184:	53                   	push   ebx
c0012185:	83 ec 38             	sub    esp,0x38
c0012188:	83 ec 0c             	sub    esp,0xc
c001218b:	68 d7 5e 02 c0       	push   0xc0025ed7
c0012190:	e8 ac 7c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012195:	83 c4 10             	add    esp,0x10
c0012198:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c001219d:	25 00 04 00 00       	and    eax,0x400
c00121a2:	74 14                	je     c00121b8 <scanMADT()+0x34>
c00121a4:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00121a9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00121af:	83 e2 fb             	and    edx,0xfffffffb
c00121b2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00121b8:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00121bd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00121c3:	83 e0 04             	and    eax,0x4
c00121c6:	84 c0                	test   al,al
c00121c8:	0f 84 82 04 00 00    	je     c0012650 <scanMADT()+0x4cc>
c00121ce:	83 ec 0c             	sub    esp,0xc
c00121d1:	68 e4 5e 02 c0       	push   0xc0025ee4
c00121d6:	e8 66 7c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00121db:	83 c4 10             	add    esp,0x10
c00121de:	e8 31 fa ff ff       	call   c0011c14 <findRSDP()>
c00121e3:	a3 2c 94 02 c0       	mov    ds:0xc002942c,eax
c00121e8:	a1 2c 94 02 c0       	mov    eax,ds:0xc002942c
c00121ed:	85 c0                	test   eax,eax
c00121ef:	75 1b                	jne    c001220c <scanMADT()+0x88>
c00121f1:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00121f6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00121fc:	83 e2 fb             	and    edx,0xfffffffb
c00121ff:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012205:	e9 4e 04 00 00       	jmp    c0012658 <scanMADT()+0x4d4>
c001220a:	66 90                	xchg   ax,ax
c001220c:	83 ec 0c             	sub    esp,0xc
c001220f:	68 f6 5e 02 c0       	push   0xc0025ef6
c0012214:	e8 28 7c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	a1 2c 94 02 c0       	mov    eax,ds:0xc002942c
c0012221:	83 ec 0c             	sub    esp,0xc
c0012224:	50                   	push   eax
c0012225:	e8 22 fd ff ff       	call   c0011f4c <findRSDT(unsigned char*)>
c001222a:	83 c4 10             	add    esp,0x10
c001222d:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0012232:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0012237:	85 c0                	test   eax,eax
c0012239:	75 19                	jne    c0012254 <scanMADT()+0xd0>
c001223b:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0012240:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012246:	83 e2 fb             	and    edx,0xfffffffb
c0012249:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001224f:	e9 04 04 00 00       	jmp    c0012658 <scanMADT()+0x4d4>
c0012254:	83 ec 0c             	sub    esp,0xc
c0012257:	68 06 5f 02 c0       	push   0xc0025f06
c001225c:	e8 e0 7b ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012261:	83 c4 10             	add    esp,0x10
c0012264:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0012269:	83 ec 0c             	sub    esp,0xc
c001226c:	50                   	push   eax
c001226d:	e8 76 fa ff ff       	call   c0011ce8 <loadACPITables(unsigned char*)>
c0012272:	83 c4 10             	add    esp,0x10
c0012275:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001227a:	83 ec 08             	sub    esp,0x8
c001227d:	68 1e 5f 02 c0       	push   0xc0025f1e
c0012282:	50                   	push   eax
c0012283:	e8 84 fe ff ff       	call   c001210c <findDataTable(unsigned char*, char*)>
c0012288:	83 c4 10             	add    esp,0x10
c001228b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001228f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012294:	75 1a                	jne    c00122b0 <scanMADT()+0x12c>
c0012296:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001229b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00122a1:	83 e2 fe             	and    edx,0xfffffffe
c00122a4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00122aa:	e9 a9 03 00 00       	jmp    c0012658 <scanMADT()+0x4d4>
c00122af:	90                   	nop
c00122b0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00122b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00122bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122bf:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00122c3:	0f 87 8f 03 00 00    	ja     c0012658 <scanMADT()+0x4d4>
c00122c9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00122d1:	0f 87 81 03 00 00    	ja     c0012658 <scanMADT()+0x4d4>
c00122d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00122df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122e3:	8d 50 01             	lea    edx,[eax+0x1]
c00122e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00122ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00122ee:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00122f2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00122f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122fa:	8d 50 01             	lea    edx,[eax+0x1]
c00122fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012301:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012305:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012309:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001230d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0012312:	0f 86 3c 03 00 00    	jbe    c0012654 <scanMADT()+0x4d0>
c0012318:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001231d:	75 59                	jne    c0012378 <scanMADT()+0x1f4>
c001231f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012323:	8d 50 01             	lea    edx,[eax+0x1]
c0012326:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001232a:	8a 15 20 96 02 c0    	mov    dl,BYTE PTR ds:0xc0029620
c0012330:	0f b6 d2             	movzx  edx,dl
c0012333:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012337:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001233b:	88 82 60 96 02 c0    	mov    BYTE PTR [edx-0x3ffd69a0],al
c0012341:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012345:	8d 50 01             	lea    edx,[eax+0x1]
c0012348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001234c:	8a 15 20 96 02 c0    	mov    dl,BYTE PTR ds:0xc0029620
c0012352:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012355:	88 0d 20 96 02 c0    	mov    BYTE PTR ds:0xc0029620,cl
c001235b:	0f b6 d2             	movzx  edx,dl
c001235e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012362:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012366:	88 82 40 96 02 c0    	mov    BYTE PTR [edx-0x3ffd69c0],al
c001236c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012371:	e9 c6 02 00 00       	jmp    c001263c <scanMADT()+0x4b8>
c0012376:	66 90                	xchg   ax,ax
c0012378:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001237d:	0f 85 15 01 00 00    	jne    c0012498 <scanMADT()+0x314>
c0012383:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012387:	8d 50 01             	lea    edx,[eax+0x1]
c001238a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001238e:	8a 15 e0 94 02 c0    	mov    dl,BYTE PTR ds:0xc00294e0
c0012394:	0f b6 d2             	movzx  edx,dl
c0012397:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001239b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001239f:	88 82 00 95 02 c0    	mov    BYTE PTR [edx-0x3ffd6b00],al
c00123a5:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00123a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123b1:	01 d0                	add    eax,edx
c00123b3:	83 c0 2c             	add    eax,0x2c
c00123b6:	8a 00                	mov    al,BYTE PTR [eax]
c00123b8:	0f b6 d0             	movzx  edx,al
c00123bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00123c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123c6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00123ca:	0f b6 c0             	movzx  eax,al
c00123cd:	c1 e0 08             	shl    eax,0x8
c00123d0:	89 d1                	mov    ecx,edx
c00123d2:	09 c1                	or     ecx,eax
c00123d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123d8:	8d 50 02             	lea    edx,[eax+0x2]
c00123db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123df:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00123e3:	0f b6 c0             	movzx  eax,al
c00123e6:	c1 e0 10             	shl    eax,0x10
c00123e9:	09 c1                	or     ecx,eax
c00123eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123ef:	8d 50 03             	lea    edx,[eax+0x3]
c00123f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00123fa:	0f b6 c0             	movzx  eax,al
c00123fd:	c1 e0 18             	shl    eax,0x18
c0012400:	09 c1                	or     ecx,eax
c0012402:	89 ca                	mov    edx,ecx
c0012404:	a0 e0 94 02 c0       	mov    al,ds:0xc00294e0
c0012409:	0f b6 c0             	movzx  eax,al
c001240c:	89 14 85 20 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ae0],edx
c0012413:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012418:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001241c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012420:	01 d0                	add    eax,edx
c0012422:	83 c0 2c             	add    eax,0x2c
c0012425:	8a 00                	mov    al,BYTE PTR [eax]
c0012427:	0f b6 d0             	movzx  edx,al
c001242a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001242e:	8d 48 01             	lea    ecx,[eax+0x1]
c0012431:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012435:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012439:	0f b6 c0             	movzx  eax,al
c001243c:	c1 e0 08             	shl    eax,0x8
c001243f:	89 d1                	mov    ecx,edx
c0012441:	09 c1                	or     ecx,eax
c0012443:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012447:	8d 50 02             	lea    edx,[eax+0x2]
c001244a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001244e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012452:	0f b6 c0             	movzx  eax,al
c0012455:	c1 e0 10             	shl    eax,0x10
c0012458:	09 c1                	or     ecx,eax
c001245a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001245e:	8d 50 03             	lea    edx,[eax+0x3]
c0012461:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012465:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012469:	0f b6 c0             	movzx  eax,al
c001246c:	c1 e0 18             	shl    eax,0x18
c001246f:	09 c1                	or     ecx,eax
c0012471:	89 ca                	mov    edx,ecx
c0012473:	a0 e0 94 02 c0       	mov    al,ds:0xc00294e0
c0012478:	0f b6 c0             	movzx  eax,al
c001247b:	89 14 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],edx
c0012482:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012487:	a0 e0 94 02 c0       	mov    al,ds:0xc00294e0
c001248c:	40                   	inc    eax
c001248d:	a2 e0 94 02 c0       	mov    ds:0xc00294e0,al
c0012492:	e9 a5 01 00 00       	jmp    c001263c <scanMADT()+0x4b8>
c0012497:	90                   	nop
c0012498:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001249d:	0f 85 e9 00 00 00    	jne    c001258c <scanMADT()+0x408>
c00124a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124a7:	8d 50 01             	lea    edx,[eax+0x1]
c00124aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00124ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124b2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00124b6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00124ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124be:	8d 50 01             	lea    edx,[eax+0x1]
c00124c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00124c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00124cd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00124d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124d9:	01 d0                	add    eax,edx
c00124db:	83 c0 2c             	add    eax,0x2c
c00124de:	8a 00                	mov    al,BYTE PTR [eax]
c00124e0:	0f b6 d0             	movzx  edx,al
c00124e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124e7:	8d 48 01             	lea    ecx,[eax+0x1]
c00124ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124ee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00124f2:	0f b6 c0             	movzx  eax,al
c00124f5:	c1 e0 08             	shl    eax,0x8
c00124f8:	89 d1                	mov    ecx,edx
c00124fa:	09 c1                	or     ecx,eax
c00124fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012500:	8d 50 02             	lea    edx,[eax+0x2]
c0012503:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012507:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001250b:	0f b6 c0             	movzx  eax,al
c001250e:	c1 e0 10             	shl    eax,0x10
c0012511:	09 c1                	or     ecx,eax
c0012513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012517:	8d 50 03             	lea    edx,[eax+0x3]
c001251a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001251e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012522:	0f b6 c0             	movzx  eax,al
c0012525:	c1 e0 18             	shl    eax,0x18
c0012528:	09 c8                	or     eax,ecx
c001252a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001252e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012533:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012537:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001253b:	01 d0                	add    eax,edx
c001253d:	83 c0 2c             	add    eax,0x2c
c0012540:	8a 00                	mov    al,BYTE PTR [eax]
c0012542:	0f b6 c0             	movzx  eax,al
c0012545:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012549:	8d 4a 01             	lea    ecx,[edx+0x1]
c001254c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012550:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0012554:	0f b6 d2             	movzx  edx,dl
c0012557:	c1 e2 08             	shl    edx,0x8
c001255a:	09 d0                	or     eax,edx
c001255c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0012561:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012566:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001256b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001256f:	88 90 c0 82 02 c0    	mov    BYTE PTR [eax-0x3ffd7d40],dl
c0012575:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001257a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001257f:	66 89 84 12 c0 94 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6b40],ax
c0012587:	e9 b0 00 00 00       	jmp    c001263c <scanMADT()+0x4b8>
c001258c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0012591:	0f 85 99 00 00 00    	jne    c0012630 <scanMADT()+0x4ac>
c0012597:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001259b:	8d 50 01             	lea    edx,[eax+0x1]
c001259e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00125a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125a6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00125aa:	0f b6 c0             	movzx  eax,al
c00125ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00125b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125b9:	01 d0                	add    eax,edx
c00125bb:	83 c0 2c             	add    eax,0x2c
c00125be:	8a 00                	mov    al,BYTE PTR [eax]
c00125c0:	0f b6 d0             	movzx  edx,al
c00125c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00125ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125ce:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00125d2:	0f b6 c0             	movzx  eax,al
c00125d5:	c1 e0 08             	shl    eax,0x8
c00125d8:	09 d0                	or     eax,edx
c00125da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00125de:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00125e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125e7:	8d 50 01             	lea    edx,[eax+0x1]
c00125ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00125ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125f2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00125f6:	0f b6 c0             	movzx  eax,al
c00125f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012601:	c1 e0 08             	shl    eax,0x8
c0012604:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012608:	89 c1                	mov    ecx,eax
c001260a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001260e:	c1 e0 18             	shl    eax,0x18
c0012611:	89 c3                	mov    ebx,eax
c0012613:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0012618:	8d 50 01             	lea    edx,[eax+0x1]
c001261b:	89 15 30 94 02 c0    	mov    DWORD PTR ds:0xc0029430,edx
c0012621:	09 d9                	or     ecx,ebx
c0012623:	89 ca                	mov    edx,ecx
c0012625:	89 14 85 40 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6bc0],edx
c001262c:	eb 0e                	jmp    c001263c <scanMADT()+0x4b8>
c001262e:	66 90                	xchg   ax,ax
c0012630:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012635:	75 05                	jne    c001263c <scanMADT()+0x4b8>
c0012637:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001263c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0012641:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012645:	01 d0                	add    eax,edx
c0012647:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001264b:	e9 68 fc ff ff       	jmp    c00122b8 <scanMADT()+0x134>
c0012650:	90                   	nop
c0012651:	eb 05                	jmp    c0012658 <scanMADT()+0x4d4>
c0012653:	90                   	nop
c0012654:	90                   	nop
c0012655:	8d 76 00             	lea    esi,[esi+0x0]
c0012658:	83 c4 38             	add    esp,0x38
c001265b:	5b                   	pop    ebx
c001265c:	c3                   	ret    
c001265d:	90                   	nop
c001265e:	66 90                	xchg   ax,ax

c0012660 <ACPI::ACPI()>:
c0012660:	83 ec 0c             	sub    esp,0xc
c0012663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012667:	83 ec 08             	sub    esp,0x8
c001266a:	68 23 5f 02 c0       	push   0xc0025f23
c001266f:	50                   	push   eax
c0012670:	e8 d5 c1 ff ff       	call   c000e84a <Device::Device(char const*)>
c0012675:	83 c4 10             	add    esp,0x10
c0012678:	ba e4 60 02 c0       	mov    edx,0xc00260e4
c001267d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012681:	89 10                	mov    DWORD PTR [eax],edx
c0012683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012687:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001268e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012692:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001269c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126a0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00126aa:	83 ec 0c             	sub    esp,0xc
c00126ad:	68 28 5f 02 c0       	push   0xc0025f28
c00126b2:	e8 8a 77 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00126b7:	83 c4 10             	add    esp,0x10
c00126ba:	e8 c5 fa ff ff       	call   c0012184 <scanMADT()>
c00126bf:	90                   	nop
c00126c0:	83 c4 0c             	add    esp,0xc
c00126c3:	c3                   	ret    

c00126c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00126c4:	83 ec 2c             	sub    esp,0x2c
c00126c7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00126cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126cf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00126d3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00126d7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00126dc:	88 d0                	mov    al,dl
c00126de:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00126e2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00126e7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00126ef:	90                   	nop
c00126f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126f4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00126fa:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00126fe:	0f 8d 9c 00 00 00    	jge    c00127a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0012704:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012708:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001270c:	83 c2 2a             	add    edx,0x2a
c001270f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0012713:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012718:	75 7a                	jne    c0012794 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001271a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001271e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012722:	83 c2 2a             	add    edx,0x2a
c0012725:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012729:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001272d:	75 65                	jne    c0012794 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001272f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012734:	74 3a                	je     c0012770 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0012736:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001273a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001273e:	83 c2 2a             	add    edx,0x2a
c0012741:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012745:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012749:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001274c:	39 c2                	cmp    edx,eax
c001274e:	74 10                	je     c0012760 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012750:	83 ec 0c             	sub    esp,0xc
c0012753:	68 7c 5d 02 c0       	push   0xc0025d7c
c0012758:	e8 58 2a 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c001275d:	83 c4 10             	add    esp,0x10
c0012760:	83 ec 0c             	sub    esp,0xc
c0012763:	68 36 5f 02 c0       	push   0xc0025f36
c0012768:	e8 48 2a 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c001276d:	83 c4 10             	add    esp,0x10
c0012770:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012774:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012778:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001277c:	83 c2 2a             	add    edx,0x2a
c001277f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0012783:	8b 02                	mov    eax,DWORD PTR [edx]
c0012785:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012788:	89 01                	mov    DWORD PTR [ecx],eax
c001278a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001278d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012792:	66 90                	xchg   ax,ax
c0012794:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012798:	e9 53 ff ff ff       	jmp    c00126f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001279d:	8d 76 00             	lea    esi,[esi+0x0]
c00127a0:	90                   	nop
c00127a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127a5:	83 c4 2c             	add    esp,0x2c
c00127a8:	c2 04 00             	ret    0x4
c00127ab:	90                   	nop

c00127ac <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00127ac:	83 ec 1c             	sub    esp,0x1c
c00127af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127b3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00127b7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127bb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00127c0:	88 c8                	mov    al,cl
c00127c2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00127c6:	88 d0                	mov    al,dl
c00127c8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00127cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127d0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00127d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127da:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00127dd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00127e1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00127e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127e9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00127ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00127f3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00127f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127fa:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00127ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012803:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012809:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001280d:	8d 48 01             	lea    ecx,[eax+0x1]
c0012810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012814:	83 c2 2a             	add    edx,0x2a
c0012817:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001281b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001281f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012829:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001282c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012830:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012834:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012838:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001283e:	8d 50 01             	lea    edx,[eax+0x1]
c0012841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012845:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001284b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001284f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012855:	3d 00 02 00 00       	cmp    eax,0x200
c001285a:	75 10                	jne    c001286c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001285c:	83 ec 0c             	sub    esp,0xc
c001285f:	68 45 5f 02 c0       	push   0xc0025f45
c0012864:	e8 4c 29 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c0012869:	83 c4 10             	add    esp,0x10
c001286c:	90                   	nop
c001286d:	83 c4 1c             	add    esp,0x1c
c0012870:	c3                   	ret    
c0012871:	90                   	nop
c0012872:	66 90                	xchg   ax,ax

c0012874 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012874:	b8 00 00 00 00       	mov    eax,0x0
c0012879:	c3                   	ret    
c001287a:	66 90                	xchg   ax,ax

c001287c <ACPI::detectPCI()>:
c001287c:	53                   	push   ebx
c001287d:	83 ec 68             	sub    esp,0x68
c0012880:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0012885:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c001288a:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001288f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012895:	83 e0 04             	and    eax,0x4
c0012898:	84 c0                	test   al,al
c001289a:	74 2c                	je     c00128c8 <ACPI::detectPCI()+0x4c>
c001289c:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00128a1:	83 ec 08             	sub    esp,0x8
c00128a4:	68 62 5f 02 c0       	push   0xc0025f62
c00128a9:	50                   	push   eax
c00128aa:	e8 5d f8 ff ff       	call   c001210c <findDataTable(unsigned char*, char*)>
c00128af:	83 c4 10             	add    esp,0x10
c00128b2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00128b6:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00128bb:	74 0b                	je     c00128c8 <ACPI::detectPCI()+0x4c>
c00128bd:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00128c2:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00128c7:	90                   	nop
c00128c8:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00128d0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00128d4:	8a 00                	mov    al,BYTE PTR [eax]
c00128d6:	3c 01                	cmp    al,0x1
c00128d8:	75 0e                	jne    c00128e8 <ACPI::detectPCI()+0x6c>
c00128da:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00128df:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00128e4:	eb 2a                	jmp    c0012910 <ACPI::detectPCI()+0x94>
c00128e6:	66 90                	xchg   ax,ax
c00128e8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00128ec:	8a 00                	mov    al,BYTE PTR [eax]
c00128ee:	3c 02                	cmp    al,0x2
c00128f0:	75 1e                	jne    c0012910 <ACPI::detectPCI()+0x94>
c00128f2:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00128f7:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00128fc:	74 12                	je     c0012910 <ACPI::detectPCI()+0x94>
c00128fe:	83 ec 0c             	sub    esp,0xc
c0012901:	68 ac 5d 02 c0       	push   0xc0025dac
c0012906:	e8 aa 28 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c001290b:	83 c4 10             	add    esp,0x10
c001290e:	66 90                	xchg   ax,ax
c0012910:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012914:	83 f0 01             	xor    eax,0x1
c0012917:	84 c0                	test   al,al
c0012919:	74 41                	je     c001295c <ACPI::detectPCI()+0xe0>
c001291b:	e8 30 d8 fe ff       	call   c0000150 <manualPCIProbe>
c0012920:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012924:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012929:	75 0d                	jne    c0012938 <ACPI::detectPCI()+0xbc>
c001292b:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012930:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012935:	eb 25                	jmp    c001295c <ACPI::detectPCI()+0xe0>
c0012937:	90                   	nop
c0012938:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c001293d:	75 1d                	jne    c001295c <ACPI::detectPCI()+0xe0>
c001293f:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012944:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012949:	74 11                	je     c001295c <ACPI::detectPCI()+0xe0>
c001294b:	83 ec 0c             	sub    esp,0xc
c001294e:	68 ac 5d 02 c0       	push   0xc0025dac
c0012953:	e8 5d 28 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c0012958:	83 c4 10             	add    esp,0x10
c001295b:	90                   	nop
c001295c:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012961:	0f 84 49 03 00 00    	je     c0012cb0 <ACPI::detectPCI()+0x434>
c0012967:	83 ec 0c             	sub    esp,0xc
c001296a:	68 67 5f 02 c0       	push   0xc0025f67
c001296f:	e8 cd 74 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c001297c:	0f 84 8e 00 00 00    	je     c0012a10 <ACPI::detectPCI()+0x194>
c0012982:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012987:	25 00 08 00 00       	and    eax,0x800
c001298c:	0f 84 16 01 00 00    	je     c0012aa8 <ACPI::detectPCI()+0x22c>
c0012992:	83 ec 0c             	sub    esp,0xc
c0012995:	68 d4 5d 02 c0       	push   0xc0025dd4
c001299a:	e8 a2 74 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001299f:	83 c4 10             	add    esp,0x10
c00129a2:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c00129a7:	25 80 00 00 00       	and    eax,0x80
c00129ac:	0f 85 f6 00 00 00    	jne    c0012aa8 <ACPI::detectPCI()+0x22c>
c00129b2:	66 90                	xchg   ax,ax
c00129b4:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00129bb:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00129c0:	89 c2                	mov    edx,eax
c00129c2:	ec                   	in     al,dx
c00129c3:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00129c7:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00129cb:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00129cf:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00129d4:	74 0a                	je     c00129e0 <ACPI::detectPCI()+0x164>
c00129d6:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c00129db:	74 03                	je     c00129e0 <ACPI::detectPCI()+0x164>
c00129dd:	eb d5                	jmp    c00129b4 <ACPI::detectPCI()+0x138>
c00129df:	90                   	nop
c00129e0:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00129e7:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00129ec:	89 c2                	mov    edx,eax
c00129ee:	ec                   	in     al,dx
c00129ef:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c00129f3:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c00129f7:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c00129fb:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0012a00:	74 de                	je     c00129e0 <ACPI::detectPCI()+0x164>
c0012a02:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0012a07:	0f 85 93 00 00 00    	jne    c0012aa0 <ACPI::detectPCI()+0x224>
c0012a0d:	eb d1                	jmp    c00129e0 <ACPI::detectPCI()+0x164>
c0012a0f:	90                   	nop
c0012a10:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012a14:	83 f0 01             	xor    eax,0x1
c0012a17:	84 c0                	test   al,al
c0012a19:	0f 84 89 00 00 00    	je     c0012aa8 <ACPI::detectPCI()+0x22c>
c0012a1f:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012a24:	25 00 08 00 00       	and    eax,0x800
c0012a29:	74 7d                	je     c0012aa8 <ACPI::detectPCI()+0x22c>
c0012a2b:	83 ec 0c             	sub    esp,0xc
c0012a2e:	68 f8 5d 02 c0       	push   0xc0025df8
c0012a33:	e8 09 74 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012a38:	83 c4 10             	add    esp,0x10
c0012a3b:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012a40:	25 80 00 00 00       	and    eax,0x80
c0012a45:	75 61                	jne    c0012aa8 <ACPI::detectPCI()+0x22c>
c0012a47:	90                   	nop
c0012a48:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0012a4f:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012a54:	89 c2                	mov    edx,eax
c0012a56:	ec                   	in     al,dx
c0012a57:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012a5b:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0012a5f:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0012a63:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012a68:	74 0a                	je     c0012a74 <ACPI::detectPCI()+0x1f8>
c0012a6a:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0012a6f:	74 03                	je     c0012a74 <ACPI::detectPCI()+0x1f8>
c0012a71:	eb d5                	jmp    c0012a48 <ACPI::detectPCI()+0x1cc>
c0012a73:	90                   	nop
c0012a74:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012a7b:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012a80:	89 c2                	mov    edx,eax
c0012a82:	ec                   	in     al,dx
c0012a83:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0012a87:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012a8b:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0012a8f:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012a94:	74 de                	je     c0012a74 <ACPI::detectPCI()+0x1f8>
c0012a96:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012a9b:	75 07                	jne    c0012aa4 <ACPI::detectPCI()+0x228>
c0012a9d:	eb d5                	jmp    c0012a74 <ACPI::detectPCI()+0x1f8>
c0012a9f:	90                   	nop
c0012aa0:	90                   	nop
c0012aa1:	eb 05                	jmp    c0012aa8 <ACPI::detectPCI()+0x22c>
c0012aa3:	90                   	nop
c0012aa4:	90                   	nop
c0012aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0012aa8:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012ab0:	83 ec 0c             	sub    esp,0xc
c0012ab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012ab7:	e8 2b 73 ff ff       	call   c0009de7 <malloc>
c0012abc:	83 c4 10             	add    esp,0x10
c0012abf:	89 c3                	mov    ebx,eax
c0012ac1:	83 ec 0c             	sub    esp,0xc
c0012ac4:	53                   	push   ebx
c0012ac5:	e8 d8 b0 00 00       	call   c001dba2 <PCI::PCI()>
c0012aca:	83 c4 10             	add    esp,0x10
c0012acd:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012ad1:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012ad6:	25 00 08 00 00       	and    eax,0x800
c0012adb:	74 7b                	je     c0012b58 <ACPI::detectPCI()+0x2dc>
c0012add:	83 ec 0c             	sub    esp,0xc
c0012ae0:	68 7f 5f 02 c0       	push   0xc0025f7f
c0012ae5:	e8 57 73 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012aea:	83 c4 10             	add    esp,0x10
c0012aed:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012af2:	25 80 00 00 00       	and    eax,0x80
c0012af7:	75 5f                	jne    c0012b58 <ACPI::detectPCI()+0x2dc>
c0012af9:	8d 76 00             	lea    esi,[esi+0x0]
c0012afc:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0012b03:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012b08:	89 c2                	mov    edx,eax
c0012b0a:	ec                   	in     al,dx
c0012b0b:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0012b0f:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012b13:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012b17:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012b1c:	74 0a                	je     c0012b28 <ACPI::detectPCI()+0x2ac>
c0012b1e:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012b23:	74 03                	je     c0012b28 <ACPI::detectPCI()+0x2ac>
c0012b25:	eb d5                	jmp    c0012afc <ACPI::detectPCI()+0x280>
c0012b27:	90                   	nop
c0012b28:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012b2f:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012b34:	89 c2                	mov    edx,eax
c0012b36:	ec                   	in     al,dx
c0012b37:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012b3b:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0012b3f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012b43:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012b48:	74 de                	je     c0012b28 <ACPI::detectPCI()+0x2ac>
c0012b4a:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012b4f:	75 03                	jne    c0012b54 <ACPI::detectPCI()+0x2d8>
c0012b51:	eb d5                	jmp    c0012b28 <ACPI::detectPCI()+0x2ac>
c0012b53:	90                   	nop
c0012b54:	90                   	nop
c0012b55:	8d 76 00             	lea    esi,[esi+0x0]
c0012b58:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012b5c:	83 ec 08             	sub    esp,0x8
c0012b5f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012b63:	50                   	push   eax
c0012b64:	e8 dd ba ff ff       	call   c000e646 <Device::addChild(Device*)>
c0012b69:	83 c4 10             	add    esp,0x10
c0012b6c:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012b71:	25 00 08 00 00       	and    eax,0x800
c0012b76:	74 78                	je     c0012bf0 <ACPI::detectPCI()+0x374>
c0012b78:	83 ec 0c             	sub    esp,0xc
c0012b7b:	68 85 5f 02 c0       	push   0xc0025f85
c0012b80:	e8 bc 72 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012b85:	83 c4 10             	add    esp,0x10
c0012b88:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012b8d:	25 80 00 00 00       	and    eax,0x80
c0012b92:	75 5c                	jne    c0012bf0 <ACPI::detectPCI()+0x374>
c0012b94:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012b9b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012ba0:	89 c2                	mov    edx,eax
c0012ba2:	ec                   	in     al,dx
c0012ba3:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012ba7:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012bab:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012baf:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012bb4:	74 0a                	je     c0012bc0 <ACPI::detectPCI()+0x344>
c0012bb6:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012bbb:	74 03                	je     c0012bc0 <ACPI::detectPCI()+0x344>
c0012bbd:	eb d5                	jmp    c0012b94 <ACPI::detectPCI()+0x318>
c0012bbf:	90                   	nop
c0012bc0:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012bc7:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012bcc:	89 c2                	mov    edx,eax
c0012bce:	ec                   	in     al,dx
c0012bcf:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012bd3:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012bd7:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012bdb:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012be0:	74 de                	je     c0012bc0 <ACPI::detectPCI()+0x344>
c0012be2:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012be7:	75 03                	jne    c0012bec <ACPI::detectPCI()+0x370>
c0012be9:	eb d5                	jmp    c0012bc0 <ACPI::detectPCI()+0x344>
c0012beb:	90                   	nop
c0012bec:	90                   	nop
c0012bed:	8d 76 00             	lea    esi,[esi+0x0]
c0012bf0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bf6:	83 c0 08             	add    eax,0x8
c0012bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bfb:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012c00:	74 0a                	je     c0012c0c <ACPI::detectPCI()+0x390>
c0012c02:	ba 01 00 00 00       	mov    edx,0x1
c0012c07:	eb 0b                	jmp    c0012c14 <ACPI::detectPCI()+0x398>
c0012c09:	8d 76 00             	lea    esi,[esi+0x0]
c0012c0c:	ba 02 00 00 00       	mov    edx,0x2
c0012c11:	8d 76 00             	lea    esi,[esi+0x0]
c0012c14:	6a 00                	push   0x0
c0012c16:	6a 00                	push   0x0
c0012c18:	52                   	push   edx
c0012c19:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012c1d:	ff d0                	call   eax
c0012c1f:	83 c4 10             	add    esp,0x10
c0012c22:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012c27:	25 00 08 00 00       	and    eax,0x800
c0012c2c:	0f 84 26 01 00 00    	je     c0012d58 <ACPI::detectPCI()+0x4dc>
c0012c32:	83 ec 0c             	sub    esp,0xc
c0012c35:	68 8b 5f 02 c0       	push   0xc0025f8b
c0012c3a:	e8 02 72 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012c3f:	83 c4 10             	add    esp,0x10
c0012c42:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012c47:	25 80 00 00 00       	and    eax,0x80
c0012c4c:	0f 85 06 01 00 00    	jne    c0012d58 <ACPI::detectPCI()+0x4dc>
c0012c52:	66 90                	xchg   ax,ax
c0012c54:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012c5b:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012c60:	89 c2                	mov    edx,eax
c0012c62:	ec                   	in     al,dx
c0012c63:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012c67:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012c6b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012c6f:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012c74:	74 0a                	je     c0012c80 <ACPI::detectPCI()+0x404>
c0012c76:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012c7b:	74 03                	je     c0012c80 <ACPI::detectPCI()+0x404>
c0012c7d:	eb d5                	jmp    c0012c54 <ACPI::detectPCI()+0x3d8>
c0012c7f:	90                   	nop
c0012c80:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012c87:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012c8c:	89 c2                	mov    edx,eax
c0012c8e:	ec                   	in     al,dx
c0012c8f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012c93:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012c97:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012c9b:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012ca0:	74 de                	je     c0012c80 <ACPI::detectPCI()+0x404>
c0012ca2:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012ca7:	0f 85 a7 00 00 00    	jne    c0012d54 <ACPI::detectPCI()+0x4d8>
c0012cad:	eb d1                	jmp    c0012c80 <ACPI::detectPCI()+0x404>
c0012caf:	90                   	nop
c0012cb0:	83 ec 0c             	sub    esp,0xc
c0012cb3:	68 91 5f 02 c0       	push   0xc0025f91
c0012cb8:	e8 16 a4 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0012cbd:	83 c4 10             	add    esp,0x10
c0012cc0:	83 ec 0c             	sub    esp,0xc
c0012cc3:	68 9c 5f 02 c0       	push   0xc0025f9c
c0012cc8:	e8 74 71 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012ccd:	83 c4 10             	add    esp,0x10
c0012cd0:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012cd8:	83 ec 0c             	sub    esp,0xc
c0012cdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cdf:	e8 03 71 ff ff       	call   c0009de7 <malloc>
c0012ce4:	83 c4 10             	add    esp,0x10
c0012ce7:	89 c3                	mov    ebx,eax
c0012ce9:	83 ec 0c             	sub    esp,0xc
c0012cec:	53                   	push   ebx
c0012ced:	e8 1a c0 00 00       	call   c001ed0c <IDE::IDE()>
c0012cf2:	83 c4 10             	add    esp,0x10
c0012cf5:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012cf9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012cfd:	83 ec 08             	sub    esp,0x8
c0012d00:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012d04:	50                   	push   eax
c0012d05:	e8 3c b9 ff ff       	call   c000e646 <Device::addChild(Device*)>
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d11:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012d1b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d1f:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012d28:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d2c:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012d35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d39:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d3b:	83 c0 08             	add    eax,0x8
c0012d3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d40:	6a 00                	push   0x0
c0012d42:	6a 00                	push   0x0
c0012d44:	6a 00                	push   0x0
c0012d46:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012d4a:	ff d0                	call   eax
c0012d4c:	83 c4 10             	add    esp,0x10
c0012d4f:	eb 07                	jmp    c0012d58 <ACPI::detectPCI()+0x4dc>
c0012d51:	8d 76 00             	lea    esi,[esi+0x0]
c0012d54:	90                   	nop
c0012d55:	8d 76 00             	lea    esi,[esi+0x0]
c0012d58:	90                   	nop
c0012d59:	83 c4 68             	add    esp,0x68
c0012d5c:	5b                   	pop    ebx
c0012d5d:	c3                   	ret    
c0012d5e:	66 90                	xchg   ax,ax

c0012d60 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012d60:	83 ec 1c             	sub    esp,0x1c
c0012d63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d67:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012d6a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012d6e:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0012d73:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012d78:	83 ec 08             	sub    esp,0x8
c0012d7b:	52                   	push   edx
c0012d7c:	50                   	push   eax
c0012d7d:	e8 b0 65 ff ff       	call   c0009332 <Computer::readCMOS(unsigned char)>
c0012d82:	83 c4 10             	add    esp,0x10
c0012d85:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012d89:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0012d8e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012d93:	83 ec 04             	sub    esp,0x4
c0012d96:	6a 01                	push   0x1
c0012d98:	52                   	push   edx
c0012d99:	50                   	push   eax
c0012d9a:	e8 7f 67 ff ff       	call   c000951e <Computer::writeCMOS(unsigned char, unsigned char)>
c0012d9f:	83 c4 10             	add    esp,0x10
c0012da2:	90                   	nop
c0012da3:	83 c4 1c             	add    esp,0x1c
c0012da6:	c3                   	ret    
c0012da7:	90                   	nop

c0012da8 <ACPI::sleep()>:
c0012da8:	83 ec 0c             	sub    esp,0xc
c0012dab:	83 ec 0c             	sub    esp,0xc
c0012dae:	68 b1 5f 02 c0       	push   0xc0025fb1
c0012db3:	e8 1b a3 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0012db8:	83 c4 10             	add    esp,0x10
c0012dbb:	a1 00 92 02 c0       	mov    eax,ds:0xc0029200
c0012dc0:	85 c0                	test   eax,eax
c0012dc2:	74 18                	je     c0012ddc <ACPI::sleep()+0x34>
c0012dc4:	83 ec 0c             	sub    esp,0xc
c0012dc7:	68 be 5f 02 c0       	push   0xc0025fbe
c0012dcc:	e8 02 a3 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0012dd1:	83 c4 10             	add    esp,0x10
c0012dd4:	a1 00 92 02 c0       	mov    eax,ds:0xc0029200
c0012dd9:	ff d0                	call   eax
c0012ddb:	90                   	nop
c0012ddc:	90                   	nop
c0012ddd:	83 c4 0c             	add    esp,0xc
c0012de0:	c3                   	ret    
c0012de1:	90                   	nop
c0012de2:	66 90                	xchg   ax,ax

c0012de4 <ACPI::open(int, int, void*)>:
c0012de4:	57                   	push   edi
c0012de5:	56                   	push   esi
c0012de6:	53                   	push   ebx
c0012de7:	81 ec 70 01 00 00    	sub    esp,0x170
c0012ded:	83 ec 0c             	sub    esp,0xc
c0012df0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012df7:	e8 80 fa ff ff       	call   c001287c <ACPI::detectPCI()>
c0012dfc:	83 c4 10             	add    esp,0x10
c0012dff:	83 ec 0c             	sub    esp,0xc
c0012e02:	68 1c 5e 02 c0       	push   0xc0025e1c
c0012e07:	e8 35 70 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012e0c:	83 c4 10             	add    esp,0x10
c0012e0f:	83 ec 0c             	sub    esp,0xc
c0012e12:	68 d8 5f 02 c0       	push   0xc0025fd8
c0012e17:	e8 83 4c 00 00       	call   c0017a9f <Thr::loadKernelSymbolTable(char const*)>
c0012e1c:	83 c4 10             	add    esp,0x10
c0012e1f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012e27:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012e32:	83 ec 0c             	sub    esp,0xc
c0012e35:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012e3c:	e8 a6 6f ff ff       	call   c0009de7 <malloc>
c0012e41:	83 c4 10             	add    esp,0x10
c0012e44:	89 c3                	mov    ebx,eax
c0012e46:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c0012e4b:	83 ec 04             	sub    esp,0x4
c0012e4e:	50                   	push   eax
c0012e4f:	68 f6 5f 02 c0       	push   0xc0025ff6
c0012e54:	53                   	push   ebx
c0012e55:	e8 e4 a7 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0012e5a:	83 c4 10             	add    esp,0x10
c0012e5d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012e64:	83 ec 08             	sub    esp,0x8
c0012e67:	6a 01                	push   0x1
c0012e69:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012e70:	e8 a3 a8 ff ff       	call   c000d718 <File::open(FileOpenMode)>
c0012e75:	83 c4 10             	add    esp,0x10
c0012e78:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012e7f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012e87:	75 17                	jne    c0012ea0 <ACPI::open(int, int, void*)+0xbc>
c0012e89:	83 ec 0c             	sub    esp,0xc
c0012e8c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012e93:	e8 de a8 ff ff       	call   c000d776 <File::close()>
c0012e98:	83 c4 10             	add    esp,0x10
c0012e9b:	eb 0b                	jmp    c0012ea8 <ACPI::open(int, int, void*)+0xc4>
c0012e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0012ea0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012ea8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012eb0:	74 1e                	je     c0012ed0 <ACPI::open(int, int, void*)+0xec>
c0012eb2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012eb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ebb:	83 c0 08             	add    eax,0x8
c0012ebe:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ec0:	83 ec 0c             	sub    esp,0xc
c0012ec3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012eca:	ff d0                	call   eax
c0012ecc:	83 c4 10             	add    esp,0x10
c0012ecf:	90                   	nop
c0012ed0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012ed7:	83 f0 01             	xor    eax,0x1
c0012eda:	84 c0                	test   al,al
c0012edc:	74 42                	je     c0012f20 <ACPI::open(int, int, void*)+0x13c>
c0012ede:	83 ec 0c             	sub    esp,0xc
c0012ee1:	68 14 60 02 c0       	push   0xc0026014
c0012ee6:	e8 56 6f ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012eeb:	83 c4 10             	add    esp,0x10
c0012eee:	83 ec 04             	sub    esp,0x4
c0012ef1:	6a 0c                	push   0xc
c0012ef3:	68 2f 60 02 c0       	push   0xc002602f
c0012ef8:	68 40 60 02 c0       	push   0xc0026040
c0012efd:	e8 07 32 00 00       	call   c0016109 <Reg::readIntWithDefault(char*, char*, int)>
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012f0c:	83 ec 0c             	sub    esp,0xc
c0012f0f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012f16:	e8 9c 90 ff ff       	call   c000bfb7 <Virt::setupPageSwapping(int)>
c0012f1b:	83 c4 10             	add    esp,0x10
c0012f1e:	66 90                	xchg   ax,ax
c0012f20:	83 ec 0c             	sub    esp,0xc
c0012f23:	68 86 45 02 c0       	push   0xc0024586
c0012f28:	e8 14 6f ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012f2d:	83 c4 10             	add    esp,0x10
c0012f30:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c0012f36:	83 ec 08             	sub    esp,0x8
c0012f39:	6a 01                	push   0x1
c0012f3b:	68 47 60 02 c0       	push   0xc0026047
c0012f40:	e8 d1 55 00 00       	call   c0018516 <Thr::loadDLL(char const*, bool)>
c0012f45:	83 c4 10             	add    esp,0x10
c0012f48:	83 ec 08             	sub    esp,0x8
c0012f4b:	53                   	push   ebx
c0012f4c:	50                   	push   eax
c0012f4d:	e8 f5 57 00 00       	call   c0018747 <Thr::executeDLL(unsigned long, void*)>
c0012f52:	83 c4 10             	add    esp,0x10
c0012f55:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012f5c:	83 ec 08             	sub    esp,0x8
c0012f5f:	6a 12                	push   0x12
c0012f61:	50                   	push   eax
c0012f62:	e8 63 ba ff ff       	call   c000e9ca <getDevicesOfType(DeviceType)>
c0012f67:	83 c4 0c             	add    esp,0xc
c0012f6a:	66 90                	xchg   ax,ax
c0012f6c:	83 ec 0c             	sub    esp,0xc
c0012f6f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f76:	50                   	push   eax
c0012f77:	e8 f0 07 01 00       	call   c002376c <LinkedList<Device>::isEmpty()>
c0012f7c:	83 c4 10             	add    esp,0x10
c0012f7f:	83 f0 01             	xor    eax,0x1
c0012f82:	84 c0                	test   al,al
c0012f84:	0f 84 46 01 00 00    	je     c00130d0 <ACPI::open(int, int, void*)+0x2ec>
c0012f8a:	83 ec 0c             	sub    esp,0xc
c0012f8d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f94:	50                   	push   eax
c0012f95:	e8 ee 07 01 00       	call   c0023788 <LinkedList<Device>::getFirstElement()>
c0012f9a:	83 c4 10             	add    esp,0x10
c0012f9d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012fa4:	83 ec 0c             	sub    esp,0xc
c0012fa7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012fae:	50                   	push   eax
c0012faf:	e8 dc 07 01 00       	call   c0023790 <LinkedList<Device>::removeFirst()>
c0012fb4:	83 c4 10             	add    esp,0x10
c0012fb7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012fbe:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012fc5:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012fcc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012fd0:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012fd6:	ba 09 00 00 00       	mov    edx,0x9
c0012fdb:	fc                   	cld    
c0012fdc:	89 c7                	mov    edi,eax
c0012fde:	89 de                	mov    esi,ebx
c0012fe0:	89 d1                	mov    ecx,edx
c0012fe2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012fe4:	83 ec 08             	sub    esp,0x8
c0012fe7:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012feb:	50                   	push   eax
c0012fec:	83 ec 24             	sub    esp,0x24
c0012fef:	89 e0                	mov    eax,esp
c0012ff1:	89 c3                	mov    ebx,eax
c0012ff3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012ff7:	ba 09 00 00 00       	mov    edx,0x9
c0012ffc:	89 df                	mov    edi,ebx
c0012ffe:	89 c6                	mov    esi,eax
c0013000:	89 d1                	mov    ecx,edx
c0013002:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013004:	e8 77 b0 00 00       	call   c001e080 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0013009:	83 c4 30             	add    esp,0x30
c001300c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0013013:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001301b:	0f 84 4b ff ff ff    	je     c0012f6c <ACPI::open(int, int, void*)+0x188>
c0013021:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001302c:	83 ec 0c             	sub    esp,0xc
c001302f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013036:	e8 ac 6d ff ff       	call   c0009de7 <malloc>
c001303b:	83 c4 10             	add    esp,0x10
c001303e:	89 c3                	mov    ebx,eax
c0013040:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c0013045:	83 ec 04             	sub    esp,0x4
c0013048:	50                   	push   eax
c0013049:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0013050:	53                   	push   ebx
c0013051:	e8 e8 a5 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0013056:	83 c4 10             	add    esp,0x10
c0013059:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0013060:	83 ec 0c             	sub    esp,0xc
c0013063:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001306a:	e8 17 a9 ff ff       	call   c000d986 <File::exists()>
c001306f:	83 c4 10             	add    esp,0x10
c0013072:	84 c0                	test   al,al
c0013074:	74 2a                	je     c00130a0 <ACPI::open(int, int, void*)+0x2bc>
c0013076:	83 ec 08             	sub    esp,0x8
c0013079:	6a 01                	push   0x1
c001307b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0013082:	e8 8f 54 00 00       	call   c0018516 <Thr::loadDLL(char const*, bool)>
c0013087:	83 c4 10             	add    esp,0x10
c001308a:	83 ec 08             	sub    esp,0x8
c001308d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0013094:	50                   	push   eax
c0013095:	e8 ad 56 00 00       	call   c0018747 <Thr::executeDLL(unsigned long, void*)>
c001309a:	83 c4 10             	add    esp,0x10
c001309d:	8d 76 00             	lea    esi,[esi+0x0]
c00130a0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00130a8:	0f 84 be fe ff ff    	je     c0012f6c <ACPI::open(int, int, void*)+0x188>
c00130ae:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00130b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00130b7:	83 c0 08             	add    eax,0x8
c00130ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00130bc:	83 ec 0c             	sub    esp,0xc
c00130bf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00130c6:	ff d0                	call   eax
c00130c8:	83 c4 10             	add    esp,0x10
c00130cb:	e9 9c fe ff ff       	jmp    c0012f6c <ACPI::open(int, int, void*)+0x188>
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00130da:	50                   	push   eax
c00130db:	e8 88 06 01 00       	call   c0023768 <LinkedList<Device>::~LinkedList()>
c00130e0:	83 c4 10             	add    esp,0x10
c00130e3:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c00130e9:	83 ec 08             	sub    esp,0x8
c00130ec:	6a 01                	push   0x1
c00130ee:	68 62 60 02 c0       	push   0xc0026062
c00130f3:	e8 1e 54 00 00       	call   c0018516 <Thr::loadDLL(char const*, bool)>
c00130f8:	83 c4 10             	add    esp,0x10
c00130fb:	83 ec 08             	sub    esp,0x8
c00130fe:	53                   	push   ebx
c00130ff:	50                   	push   eax
c0013100:	e8 42 56 00 00       	call   c0018747 <Thr::executeDLL(unsigned long, void*)>
c0013105:	83 c4 10             	add    esp,0x10
c0013108:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c001310e:	83 ec 08             	sub    esp,0x8
c0013111:	6a 01                	push   0x1
c0013113:	68 7f 60 02 c0       	push   0xc002607f
c0013118:	e8 f9 53 00 00       	call   c0018516 <Thr::loadDLL(char const*, bool)>
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	83 ec 08             	sub    esp,0x8
c0013123:	53                   	push   ebx
c0013124:	50                   	push   eax
c0013125:	e8 1d 56 00 00       	call   c0018747 <Thr::executeDLL(unsigned long, void*)>
c001312a:	83 c4 10             	add    esp,0x10
c001312d:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0013132:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013138:	83 e0 04             	and    eax,0x4
c001313b:	84 c0                	test   al,al
c001313d:	0f 84 15 01 00 00    	je     c0013258 <ACPI::open(int, int, void*)+0x474>
c0013143:	83 ec 0c             	sub    esp,0xc
c0013146:	68 9c 60 02 c0       	push   0xc002609c
c001314b:	e8 f1 6c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0013150:	83 c4 10             	add    esp,0x10
c0013153:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001315e:	83 ec 0c             	sub    esp,0xc
c0013161:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0013168:	e8 7a 6c ff ff       	call   c0009de7 <malloc>
c001316d:	83 c4 10             	add    esp,0x10
c0013170:	89 c3                	mov    ebx,eax
c0013172:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c0013177:	83 ec 04             	sub    esp,0x4
c001317a:	50                   	push   eax
c001317b:	68 b9 60 02 c0       	push   0xc00260b9
c0013180:	53                   	push   ebx
c0013181:	e8 b8 a4 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0013186:	83 c4 10             	add    esp,0x10
c0013189:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0013190:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013198:	74 1a                	je     c00131b4 <ACPI::open(int, int, void*)+0x3d0>
c001319a:	83 ec 0c             	sub    esp,0xc
c001319d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00131a4:	e8 dd a7 ff ff       	call   c000d986 <File::exists()>
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	84 c0                	test   al,al
c00131ae:	74 04                	je     c00131b4 <ACPI::open(int, int, void*)+0x3d0>
c00131b0:	b0 01                	mov    al,0x1
c00131b2:	eb 04                	jmp    c00131b8 <ACPI::open(int, int, void*)+0x3d4>
c00131b4:	b0 00                	mov    al,0x0
c00131b6:	66 90                	xchg   ax,ax
c00131b8:	84 c0                	test   al,al
c00131ba:	74 28                	je     c00131e4 <ACPI::open(int, int, void*)+0x400>
c00131bc:	83 ec 08             	sub    esp,0x8
c00131bf:	6a 01                	push   0x1
c00131c1:	68 b9 60 02 c0       	push   0xc00260b9
c00131c6:	e8 4b 53 00 00       	call   c0018516 <Thr::loadDLL(char const*, bool)>
c00131cb:	83 c4 10             	add    esp,0x10
c00131ce:	83 ec 08             	sub    esp,0x8
c00131d1:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c00131d8:	50                   	push   eax
c00131d9:	e8 69 55 00 00       	call   c0018747 <Thr::executeDLL(unsigned long, void*)>
c00131de:	83 c4 10             	add    esp,0x10
c00131e1:	8d 76 00             	lea    esi,[esi+0x0]
c00131e4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00131ec:	74 2a                	je     c0013218 <ACPI::open(int, int, void*)+0x434>
c00131ee:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00131f6:	74 20                	je     c0013218 <ACPI::open(int, int, void*)+0x434>
c00131f8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00131ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0013201:	83 c0 08             	add    eax,0x8
c0013204:	8b 00                	mov    eax,DWORD PTR [eax]
c0013206:	83 ec 0c             	sub    esp,0xc
c0013209:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013210:	ff d0                	call   eax
c0013212:	83 c4 10             	add    esp,0x10
c0013215:	8d 76 00             	lea    esi,[esi+0x0]
c0013218:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001321d:	83 ec 08             	sub    esp,0x8
c0013220:	68 d6 60 02 c0       	push   0xc00260d6
c0013225:	50                   	push   eax
c0013226:	e8 e1 ee ff ff       	call   c001210c <findDataTable(unsigned char*, char*)>
c001322b:	83 c4 10             	add    esp,0x10
c001322e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0013235:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001323d:	74 19                	je     c0013258 <ACPI::open(int, int, void*)+0x474>
c001323f:	83 ec 08             	sub    esp,0x8
c0013242:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0013249:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0013250:	e8 0b fb ff ff       	call   c0012d60 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013255:	83 c4 10             	add    esp,0x10
c0013258:	b8 00 00 00 00       	mov    eax,0x0
c001325d:	81 c4 70 01 00 00    	add    esp,0x170
c0013263:	5b                   	pop    ebx
c0013264:	5e                   	pop    esi
c0013265:	5f                   	pop    edi
c0013266:	c3                   	ret    
c0013267:	90                   	nop

c0013268 <CPU::close(int, int, void*)>:
c0013268:	31 c0                	xor    eax,eax
c001326a:	c3                   	ret    
c001326b:	90                   	nop

c001326c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001326c:	55                   	push   ebp
c001326d:	57                   	push   edi
c001326e:	56                   	push   esi
c001326f:	53                   	push   ebx
c0013270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013274:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013278:	89 ce                	mov    esi,ecx
c001327a:	89 d5                	mov    ebp,edx
c001327c:	80 f9 04             	cmp    cl,0x4
c001327f:	75 28                	jne    c00132a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0013281:	8d 42 f9             	lea    eax,[edx-0x7]
c0013284:	3c 03                	cmp    al,0x3
c0013286:	0f 86 63 01 00 00    	jbe    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001328c:	80 fa 03             	cmp    dl,0x3
c001328f:	0f 84 5a 01 00 00    	je     c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0013295:	8d 7a f2             	lea    edi,[edx-0xe]
c0013298:	b8 90 84 02 c0       	mov    eax,0xc0028490
c001329d:	89 fb                	mov    ebx,edi
c001329f:	80 fb 01             	cmp    bl,0x1
c00132a2:	77 4e                	ja     c00132f2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00132a4:	e9 52 01 00 00       	jmp    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132a9:	80 f9 05             	cmp    cl,0x5
c00132ac:	75 4d                	jne    c00132fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00132ae:	b8 a0 84 02 c0       	mov    eax,0xc00284a0
c00132b3:	80 fa 03             	cmp    dl,0x3
c00132b6:	0f 86 3f 01 00 00    	jbe    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132bc:	8d 7a fa             	lea    edi,[edx-0x6]
c00132bf:	b8 b0 84 02 c0       	mov    eax,0xc00284b0
c00132c4:	89 fb                	mov    ebx,edi
c00132c6:	80 fb 01             	cmp    bl,0x1
c00132c9:	0f 86 2c 01 00 00    	jbe    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132cf:	b8 c0 84 02 c0       	mov    eax,0xc00284c0
c00132d4:	80 fa 08             	cmp    dl,0x8
c00132d7:	0f 84 1e 01 00 00    	je     c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132dd:	89 d7                	mov    edi,edx
c00132df:	b8 d0 84 02 c0       	mov    eax,0xc00284d0
c00132e4:	83 e7 fb             	and    edi,0xfffffffb
c00132e7:	89 fb                	mov    ebx,edi
c00132e9:	80 fb 09             	cmp    bl,0x9
c00132ec:	0f 84 09 01 00 00    	je     c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132f2:	31 c0                	xor    eax,eax
c00132f4:	89 eb                	mov    ebx,ebp
c00132f6:	0f b6 fb             	movzx  edi,bl
c00132f9:	eb 30                	jmp    c001332b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00132fb:	31 c0                	xor    eax,eax
c00132fd:	80 f9 06             	cmp    cl,0x6
c0013300:	75 f2                	jne    c00132f4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013302:	80 fa 0a             	cmp    dl,0xa
c0013305:	77 ed                	ja     c00132f4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013307:	bf de 05 00 00       	mov    edi,0x5de
c001330c:	0f a3 d7             	bt     edi,edx
c001330f:	73 e3                	jae    c00132f4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013311:	b8 e0 84 02 c0       	mov    eax,0xc00284e0
c0013316:	e9 e0 00 00 00       	jmp    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001331b:	39 c7                	cmp    edi,eax
c001331d:	0f 84 d3 00 00 00    	je     c00133f6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0013323:	40                   	inc    eax
c0013324:	3d d0 00 00 00       	cmp    eax,0xd0
c0013329:	74 09                	je     c0013334 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001332b:	89 f3                	mov    ebx,esi
c001332d:	80 fb 0f             	cmp    bl,0xf
c0013330:	75 f1                	jne    c0013323 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0013332:	eb e7                	jmp    c001331b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0013334:	80 f9 10             	cmp    cl,0x10
c0013337:	75 14                	jne    c001334d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0013339:	8d 42 fc             	lea    eax,[edx-0x4]
c001333c:	83 e0 fb             	and    eax,0xfffffffb
c001333f:	3c 02                	cmp    al,0x2
c0013341:	76 34                	jbe    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0013343:	b8 11 64 02 c0       	mov    eax,0xc0026411
c0013348:	80 fa 02             	cmp    dl,0x2
c001334b:	eb 24                	jmp    c0013371 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001334d:	80 f9 11             	cmp    cl,0x11
c0013350:	75 13                	jne    c0013365 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0013352:	b8 11 64 02 c0       	mov    eax,0xc0026411
c0013357:	80 fa 03             	cmp    dl,0x3
c001335a:	0f 85 9b 00 00 00    	jne    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013360:	e9 91 00 00 00       	jmp    c00133f6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0013365:	80 f9 12             	cmp    cl,0x12
c0013368:	75 14                	jne    c001337e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001336a:	b8 11 64 02 c0       	mov    eax,0xc0026411
c001336f:	fe ca                	dec    dl
c0013371:	0f 85 84 00 00 00    	jne    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013377:	b8 00 85 02 c0       	mov    eax,0xc0028500
c001337c:	eb 7d                	jmp    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001337e:	80 f9 14             	cmp    cl,0x14
c0013381:	75 12                	jne    c0013395 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0013383:	4a                   	dec    edx
c0013384:	b8 11 64 02 c0       	mov    eax,0xc0026411
c0013389:	80 fa 01             	cmp    dl,0x1
c001338c:	77 6d                	ja     c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001338e:	b8 10 85 02 c0       	mov    eax,0xc0028510
c0013393:	eb 66                	jmp    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013395:	80 f9 15             	cmp    cl,0x15
c0013398:	75 31                	jne    c00133cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001339a:	b8 20 85 02 c0       	mov    eax,0xc0028520
c001339f:	80 fa 01             	cmp    dl,0x1
c00133a2:	74 57                	je     c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133a4:	b8 11 64 02 c0       	mov    eax,0xc0026411
c00133a9:	80 fa 13             	cmp    dl,0x13
c00133ac:	76 0c                	jbe    c00133ba <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00133ae:	80 fa 30             	cmp    dl,0x30
c00133b1:	75 48                	jne    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133b3:	b8 40 85 02 c0       	mov    eax,0xc0028540
c00133b8:	eb 41                	jmp    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133ba:	b9 04 00 09 00       	mov    ecx,0x90004
c00133bf:	0f a3 d1             	bt     ecx,edx
c00133c2:	73 37                	jae    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133c4:	b8 30 85 02 c0       	mov    eax,0xc0028530
c00133c9:	eb 30                	jmp    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133cb:	b8 11 64 02 c0       	mov    eax,0xc0026411
c00133d0:	80 f9 16             	cmp    cl,0x16
c00133d3:	75 26                	jne    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133d5:	b8 50 85 02 c0       	mov    eax,0xc0028550
c00133da:	84 d2                	test   dl,dl
c00133dc:	74 1d                	je     c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133de:	b8 11 64 02 c0       	mov    eax,0xc0026411
c00133e3:	80 fa 30             	cmp    dl,0x30
c00133e6:	75 13                	jne    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133e8:	b8 60 85 02 c0       	mov    eax,0xc0028560
c00133ed:	eb 0c                	jmp    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133ef:	b8 80 84 02 c0       	mov    eax,0xc0028480
c00133f4:	eb 05                	jmp    c00133fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133f6:	b8 f0 84 02 c0       	mov    eax,0xc00284f0
c00133fb:	5b                   	pop    ebx
c00133fc:	5e                   	pop    esi
c00133fd:	5f                   	pop    edi
c00133fe:	5d                   	pop    ebp
c00133ff:	c3                   	ret    

c0013400 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0013400:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013404:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013408:	80 f9 04             	cmp    cl,0x4
c001340b:	75 6b                	jne    c0013478 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001340d:	b8 e0 82 02 c0       	mov    eax,0xc00282e0
c0013412:	80 fa 01             	cmp    dl,0x1
c0013415:	0f 86 92 02 00 00    	jbe    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001341b:	b8 f0 82 02 c0       	mov    eax,0xc00282f0
c0013420:	80 fa 02             	cmp    dl,0x2
c0013423:	0f 84 84 02 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013429:	b8 00 83 02 c0       	mov    eax,0xc0028300
c001342e:	80 fa 03             	cmp    dl,0x3
c0013431:	0f 84 76 02 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013437:	b8 10 83 02 c0       	mov    eax,0xc0028310
c001343c:	80 fa 04             	cmp    dl,0x4
c001343f:	0f 84 68 02 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013445:	b8 20 83 02 c0       	mov    eax,0xc0028320
c001344a:	80 fa 05             	cmp    dl,0x5
c001344d:	0f 84 5a 02 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013453:	b8 00 83 02 c0       	mov    eax,0xc0028300
c0013458:	80 fa 07             	cmp    dl,0x7
c001345b:	0f 84 4c 02 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013461:	83 ea 08             	sub    edx,0x8
c0013464:	b8 11 64 02 c0       	mov    eax,0xc0026411
c0013469:	80 fa 01             	cmp    dl,0x1
c001346c:	0f 87 3b 02 00 00    	ja     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013472:	b8 30 83 02 c0       	mov    eax,0xc0028330
c0013477:	c3                   	ret    
c0013478:	80 f9 05             	cmp    cl,0x5
c001347b:	75 45                	jne    c00134c2 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001347d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013480:	b8 40 83 02 c0       	mov    eax,0xc0028340
c0013485:	80 f9 02             	cmp    cl,0x2
c0013488:	0f 86 1f 02 00 00    	jbe    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001348e:	80 fa 04             	cmp    dl,0x4
c0013491:	0f 84 f3 01 00 00    	je     c001368a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0013497:	80 fa 07             	cmp    dl,0x7
c001349a:	0f 84 0d 02 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134a0:	b8 50 83 02 c0       	mov    eax,0xc0028350
c00134a5:	80 fa 08             	cmp    dl,0x8
c00134a8:	0f 84 ff 01 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134ae:	b8 11 64 02 c0       	mov    eax,0xc0026411
c00134b3:	80 fa 09             	cmp    dl,0x9
c00134b6:	0f 85 f1 01 00 00    	jne    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134bc:	b8 60 83 02 c0       	mov    eax,0xc0028360
c00134c1:	c3                   	ret    
c00134c2:	80 f9 06             	cmp    cl,0x6
c00134c5:	0f 85 85 01 00 00    	jne    c0013650 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00134cb:	b8 70 83 02 c0       	mov    eax,0xc0028370
c00134d0:	80 fa 01             	cmp    dl,0x1
c00134d3:	0f 84 d4 01 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134d9:	8d 42 fb             	lea    eax,[edx-0x5]
c00134dc:	3c 01                	cmp    al,0x1
c00134de:	0f 86 ac 01 00 00    	jbe    c0013690 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00134e4:	80 fa 03             	cmp    dl,0x3
c00134e7:	0f 84 a3 01 00 00    	je     c0013690 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00134ed:	8d 4a f9             	lea    ecx,[edx-0x7]
c00134f0:	b8 90 83 02 c0       	mov    eax,0xc0028390
c00134f5:	80 f9 01             	cmp    cl,0x1
c00134f8:	0f 86 af 01 00 00    	jbe    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134fe:	80 fa 09             	cmp    dl,0x9
c0013501:	0f 84 8f 01 00 00    	je     c0013696 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0013507:	8d 4a f6             	lea    ecx,[edx-0xa]
c001350a:	80 f9 01             	cmp    cl,0x1
c001350d:	0f 86 9a 01 00 00    	jbe    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013513:	b8 a0 83 02 c0       	mov    eax,0xc00283a0
c0013518:	80 fa 0d             	cmp    dl,0xd
c001351b:	0f 84 8c 01 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013521:	b8 b0 83 02 c0       	mov    eax,0xc00283b0
c0013526:	80 fa 0e             	cmp    dl,0xe
c0013529:	0f 84 7e 01 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001352f:	b8 c0 83 02 c0       	mov    eax,0xc00283c0
c0013534:	80 fa 0f             	cmp    dl,0xf
c0013537:	0f 84 70 01 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001353d:	b8 a0 83 02 c0       	mov    eax,0xc00283a0
c0013542:	80 fa 15             	cmp    dl,0x15
c0013545:	0f 84 62 01 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001354b:	8d 4a ea             	lea    ecx,[edx-0x16]
c001354e:	b8 c0 83 02 c0       	mov    eax,0xc00283c0
c0013553:	80 f9 01             	cmp    cl,0x1
c0013556:	0f 86 51 01 00 00    	jbe    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001355c:	80 fa 1a             	cmp    dl,0x1a
c001355f:	0f 84 37 01 00 00    	je     c001369c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0013565:	80 fa 1c             	cmp    dl,0x1c
c0013568:	0f 84 34 01 00 00    	je     c00136a2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001356e:	80 fa 1d             	cmp    dl,0x1d
c0013571:	0f 84 36 01 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013577:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c001357c:	80 fa 25             	cmp    dl,0x25
c001357f:	0f 84 28 01 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013585:	8d 4a da             	lea    ecx,[edx-0x26]
c0013588:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c001358d:	80 f9 01             	cmp    cl,0x1
c0013590:	0f 86 17 01 00 00    	jbe    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013596:	b8 00 84 02 c0       	mov    eax,0xc0028400
c001359b:	80 fa 2a             	cmp    dl,0x2a
c001359e:	0f 84 09 01 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135a4:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c00135a9:	80 fa 2c             	cmp    dl,0x2c
c00135ac:	0f 84 fb 00 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135b2:	b8 00 84 02 c0       	mov    eax,0xc0028400
c00135b7:	80 fa 2d             	cmp    dl,0x2d
c00135ba:	0f 84 ed 00 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135c0:	b8 d0 83 02 c0       	mov    eax,0xc00283d0
c00135c5:	80 fa 2e             	cmp    dl,0x2e
c00135c8:	0f 84 df 00 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135ce:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c00135d3:	80 fa 2f             	cmp    dl,0x2f
c00135d6:	0f 84 d1 00 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135dc:	8d 4a cb             	lea    ecx,[edx-0x35]
c00135df:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c00135e4:	80 f9 01             	cmp    cl,0x1
c00135e7:	0f 86 c0 00 00 00    	jbe    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135ed:	b8 10 84 02 c0       	mov    eax,0xc0028410
c00135f2:	80 fa 37             	cmp    dl,0x37
c00135f5:	0f 84 b2 00 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135fb:	b8 20 84 02 c0       	mov    eax,0xc0028420
c0013600:	80 fa 3a             	cmp    dl,0x3a
c0013603:	0f 84 a4 00 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013609:	b8 30 84 02 c0       	mov    eax,0xc0028430
c001360e:	80 fa 3c             	cmp    dl,0x3c
c0013611:	0f 84 96 00 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013617:	b8 40 84 02 c0       	mov    eax,0xc0028440
c001361c:	80 fa 3d             	cmp    dl,0x3d
c001361f:	0f 84 88 00 00 00    	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013625:	b8 20 84 02 c0       	mov    eax,0xc0028420
c001362a:	80 fa 3e             	cmp    dl,0x3e
c001362d:	74 7e                	je     c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001362f:	8d 42 bb             	lea    eax,[edx-0x45]
c0013632:	3c 01                	cmp    al,0x1
c0013634:	76 72                	jbe    c00136a8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013636:	80 fa 3f             	cmp    dl,0x3f
c0013639:	74 6d                	je     c00136a8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001363b:	80 fa 4a             	cmp    dl,0x4a
c001363e:	74 0a                	je     c001364a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0013640:	b8 11 64 02 c0       	mov    eax,0xc0026411
c0013645:	80 fa 4d             	cmp    dl,0x4d
c0013648:	75 63                	jne    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001364a:	b8 10 84 02 c0       	mov    eax,0xc0028410
c001364f:	c3                   	ret    
c0013650:	b8 11 64 02 c0       	mov    eax,0xc0026411
c0013655:	80 f9 0b             	cmp    cl,0xb
c0013658:	75 0a                	jne    c0013664 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001365a:	fe ca                	dec    dl
c001365c:	75 4f                	jne    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001365e:	b8 50 84 02 c0       	mov    eax,0xc0028450
c0013663:	c3                   	ret    
c0013664:	80 f9 0f             	cmp    cl,0xf
c0013667:	75 44                	jne    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013669:	b8 60 84 02 c0       	mov    eax,0xc0028460
c001366e:	80 fa 02             	cmp    dl,0x2
c0013671:	76 3a                	jbe    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013673:	8d 42 fd             	lea    eax,[edx-0x3]
c0013676:	3c 01                	cmp    al,0x1
c0013678:	76 0a                	jbe    c0013684 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001367a:	b8 11 64 02 c0       	mov    eax,0xc0026411
c001367f:	80 fa 06             	cmp    dl,0x6
c0013682:	75 29                	jne    c00136ad <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013684:	b8 70 84 02 c0       	mov    eax,0xc0028470
c0013689:	c3                   	ret    
c001368a:	b8 50 83 02 c0       	mov    eax,0xc0028350
c001368f:	c3                   	ret    
c0013690:	b8 80 83 02 c0       	mov    eax,0xc0028380
c0013695:	c3                   	ret    
c0013696:	b8 a0 83 02 c0       	mov    eax,0xc00283a0
c001369b:	c3                   	ret    
c001369c:	b8 d0 83 02 c0       	mov    eax,0xc00283d0
c00136a1:	c3                   	ret    
c00136a2:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c00136a7:	c3                   	ret    
c00136a8:	b8 30 84 02 c0       	mov    eax,0xc0028430
c00136ad:	c3                   	ret    

c00136ae <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00136ae:	60                   	pusha  
c00136af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00136b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136bb:	9c                   	pushf  
c00136bc:	fa                   	cli    
c00136bd:	0f 09                	wbinvd 
c00136bf:	0f 30                	wrmsr  
c00136c1:	9d                   	popf   
c00136c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136c6:	89 02                	mov    DWORD PTR [edx],eax
c00136c8:	61                   	popa   
c00136c9:	c3                   	ret    

c00136ca <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00136ca:	60                   	pusha  
c00136cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00136cf:	9c                   	pushf  
c00136d0:	fa                   	cli    
c00136d1:	0f 09                	wbinvd 
c00136d3:	31 c0                	xor    eax,eax
c00136d5:	31 d2                	xor    edx,edx
c00136d7:	0f 32                	rdmsr  
c00136d9:	9d                   	popf   
c00136da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00136de:	89 02                	mov    DWORD PTR [edx],eax
c00136e0:	61                   	popa   
c00136e1:	c3                   	ret    

c00136e2 <CPU::AMD_K6_writeback(int, int, int)>:
c00136e2:	56                   	push   esi
c00136e3:	53                   	push   ebx
c00136e4:	83 ec 10             	sub    esp,0x10
c00136e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136eb:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00136f0:	75 5d                	jne    c001374f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00136f2:	83 f8 08             	cmp    eax,0x8
c00136f5:	75 09                	jne    c0013700 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00136f7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00136fc:	7e 13                	jle    c0013711 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00136fe:	eb 30                	jmp    c0013730 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013700:	83 f8 06             	cmp    eax,0x6
c0013703:	7c 4a                	jl     c001374f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013705:	83 f8 07             	cmp    eax,0x7
c0013708:	7e 07                	jle    c0013711 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001370a:	83 f8 09             	cmp    eax,0x9
c001370d:	74 21                	je     c0013730 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001370f:	eb 3e                	jmp    c001374f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013711:	89 e6                	mov    esi,esp
c0013713:	8b 1d ec 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bec
c0013719:	56                   	push   esi
c001371a:	c1 eb 15             	shr    ebx,0x15
c001371d:	68 82 00 00 c0       	push   0xc0000082
c0013722:	83 e3 7e             	and    ebx,0x7e
c0013725:	e8 a0 ff ff ff       	call   c00136ca <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001372a:	56                   	push   esi
c001372b:	6a 00                	push   0x0
c001372d:	53                   	push   ebx
c001372e:	eb 12                	jmp    c0013742 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013730:	89 e3                	mov    ebx,esp
c0013732:	53                   	push   ebx
c0013733:	68 82 00 00 c0       	push   0xc0000082
c0013738:	e8 8d ff ff ff       	call   c00136ca <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001373d:	53                   	push   ebx
c001373e:	6a 00                	push   0x0
c0013740:	6a 00                	push   0x0
c0013742:	68 82 00 00 c0       	push   0xc0000082
c0013747:	e8 62 ff ff ff       	call   c00136ae <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001374c:	83 c4 18             	add    esp,0x18
c001374f:	83 c4 10             	add    esp,0x10
c0013752:	5b                   	pop    ebx
c0013753:	5e                   	pop    esi
c0013754:	c3                   	ret    
c0013755:	90                   	nop

c0013756 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013756:	55                   	push   ebp
c0013757:	57                   	push   edi
c0013758:	56                   	push   esi
c0013759:	53                   	push   ebx
c001375a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001375e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013762:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013766:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001376a:	39 05 80 85 02 c0    	cmp    DWORD PTR ds:0xc0028580,eax
c0013770:	75 23                	jne    c0013795 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013772:	a1 8c 96 02 c0       	mov    eax,ds:0xc002968c
c0013777:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001377b:	89 06                	mov    DWORD PTR [esi],eax
c001377d:	a1 88 96 02 c0       	mov    eax,ds:0xc0029688
c0013782:	89 07                	mov    DWORD PTR [edi],eax
c0013784:	a1 84 96 02 c0       	mov    eax,ds:0xc0029684
c0013789:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001378c:	a1 80 96 02 c0       	mov    eax,ds:0xc0029680
c0013791:	89 02                	mov    DWORD PTR [edx],eax
c0013793:	eb 3f                	jmp    c00137d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013795:	31 c9                	xor    ecx,ecx
c0013797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001379b:	0f a2                	cpuid  
c001379d:	89 06                	mov    DWORD PTR [esi],eax
c001379f:	89 1f                	mov    DWORD PTR [edi],ebx
c00137a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00137a5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00137a8:	89 10                	mov    DWORD PTR [eax],edx
c00137aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137ae:	a3 80 85 02 c0       	mov    ds:0xc0028580,eax
c00137b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00137b5:	a3 8c 96 02 c0       	mov    ds:0xc002968c,eax
c00137ba:	8b 07                	mov    eax,DWORD PTR [edi]
c00137bc:	a3 88 96 02 c0       	mov    ds:0xc0029688,eax
c00137c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00137c4:	a3 84 96 02 c0       	mov    ds:0xc0029684,eax
c00137c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00137cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00137cf:	a3 80 96 02 c0       	mov    ds:0xc0029680,eax
c00137d4:	5b                   	pop    ebx
c00137d5:	5e                   	pop    esi
c00137d6:	5f                   	pop    edi
c00137d7:	5d                   	pop    ebp
c00137d8:	c3                   	ret    
c00137d9:	90                   	nop

c00137da <CPU::cpuidCheckEDX(unsigned int)>:
c00137da:	83 ec 10             	sub    esp,0x10
c00137dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137e1:	50                   	push   eax
c00137e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137e6:	50                   	push   eax
c00137e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137eb:	50                   	push   eax
c00137ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137f0:	50                   	push   eax
c00137f1:	6a 01                	push   0x1
c00137f3:	e8 5e ff ff ff       	call   c0013756 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00137f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137fc:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013800:	0f 95 c0             	setne  al
c0013803:	83 c4 24             	add    esp,0x24
c0013806:	c3                   	ret    
c0013807:	90                   	nop

c0013808 <CPU::cpuidCheckECX(unsigned int)>:
c0013808:	83 ec 10             	sub    esp,0x10
c001380b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001380f:	50                   	push   eax
c0013810:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013814:	50                   	push   eax
c0013815:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013819:	50                   	push   eax
c001381a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001381e:	50                   	push   eax
c001381f:	6a 01                	push   0x1
c0013821:	e8 30 ff ff ff       	call   c0013756 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013826:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001382a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001382e:	0f 95 c0             	setne  al
c0013831:	83 c4 24             	add    esp,0x24
c0013834:	c3                   	ret    
c0013835:	90                   	nop

c0013836 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0013836:	83 ec 10             	sub    esp,0x10
c0013839:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001383d:	50                   	push   eax
c001383e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013842:	50                   	push   eax
c0013843:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013847:	50                   	push   eax
c0013848:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001384c:	50                   	push   eax
c001384d:	6a 07                	push   0x7
c001384f:	e8 02 ff ff ff       	call   c0013756 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013854:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013858:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001385c:	0f 95 c0             	setne  al
c001385f:	83 c4 24             	add    esp,0x24
c0013862:	c3                   	ret    
c0013863:	90                   	nop

c0013864 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0013864:	83 ec 10             	sub    esp,0x10
c0013867:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001386b:	50                   	push   eax
c001386c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013870:	50                   	push   eax
c0013871:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013875:	50                   	push   eax
c0013876:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001387a:	50                   	push   eax
c001387b:	6a 07                	push   0x7
c001387d:	e8 d4 fe ff ff       	call   c0013756 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013882:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013886:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001388a:	0f 95 c0             	setne  al
c001388d:	83 c4 24             	add    esp,0x24
c0013890:	c3                   	ret    
c0013891:	90                   	nop

c0013892 <CPU::CPU()>:
c0013892:	83 ec 0c             	sub    esp,0xc
c0013895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013899:	83 ec 08             	sub    esp,0x8
c001389c:	68 11 64 02 c0       	push   0xc0026411
c00138a1:	50                   	push   eax
c00138a2:	e8 a3 af ff ff       	call   c000e84a <Device::Device(char const*)>
c00138a7:	83 c4 10             	add    esp,0x10
c00138aa:	ba 74 66 02 c0       	mov    edx,0xc0026674
c00138af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b3:	89 10                	mov    DWORD PTR [eax],edx
c00138b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00138c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c7:	05 78 01 00 00       	add    eax,0x178
c00138cc:	83 ec 0c             	sub    esp,0xc
c00138cf:	50                   	push   eax
c00138d0:	e8 33 5d ff ff       	call   c0009608 <GDT::GDT()>
c00138d5:	83 c4 10             	add    esp,0x10
c00138d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138dc:	05 7c 09 00 00       	add    eax,0x97c
c00138e1:	83 ec 0c             	sub    esp,0xc
c00138e4:	50                   	push   eax
c00138e5:	e8 ea 5f ff ff       	call   c00098d4 <IDT::IDT()>
c00138ea:	83 c4 10             	add    esp,0x10
c00138ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f1:	05 7c 11 00 00       	add    eax,0x117c
c00138f6:	83 ec 0c             	sub    esp,0xc
c00138f9:	50                   	push   eax
c00138fa:	e8 f1 7d ff ff       	call   c000b6f0 <TSS::TSS()>
c00138ff:	83 c4 10             	add    esp,0x10
c0013902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013906:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001390d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013911:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001391b:	90                   	nop
c001391c:	83 c4 0c             	add    esp,0xc
c001391f:	c3                   	ret    

c0013920 <CPU::displayFeatures()>:
c0013920:	53                   	push   ebx
c0013921:	83 ec 10             	sub    esp,0x10
c0013924:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013928:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001392e:	68 08 61 02 c0       	push   0xc0026108
c0013933:	e8 9b 97 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013938:	58                   	pop    eax
c0013939:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001393f:	5a                   	pop    edx
c0013940:	50                   	push   eax
c0013941:	68 19 61 02 c0       	push   0xc0026119
c0013946:	e8 88 97 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001394b:	59                   	pop    ecx
c001394c:	58                   	pop    eax
c001394d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013953:	c1 e8 0e             	shr    eax,0xe
c0013956:	0f b6 c0             	movzx  eax,al
c0013959:	50                   	push   eax
c001395a:	68 2a 61 02 c0       	push   0xc002612a
c001395f:	e8 6f 97 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013964:	58                   	pop    eax
c0013965:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001396b:	5a                   	pop    edx
c001396c:	66 c1 e8 06          	shr    ax,0x6
c0013970:	0f b6 c0             	movzx  eax,al
c0013973:	50                   	push   eax
c0013974:	68 3b 61 02 c0       	push   0xc002613b
c0013979:	e8 55 97 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001397e:	c7 04 24 3b 67 02 c0 	mov    DWORD PTR [esp],0xc002673b
c0013985:	e8 49 97 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001398a:	83 c4 10             	add    esp,0x10
c001398d:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013992:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0013999:	74 05                	je     c00139a0 <CPU::displayFeatures()+0x80>
c001399b:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00139a0:	51                   	push   ecx
c00139a1:	51                   	push   ecx
c00139a2:	50                   	push   eax
c00139a3:	68 4c 61 02 c0       	push   0xc002614c
c00139a8:	e8 26 97 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00139b5:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00139bc:	78 05                	js     c00139c3 <CPU::displayFeatures()+0xa3>
c00139be:	b8 05 46 02 c0       	mov    eax,0xc0024605
c00139c3:	52                   	push   edx
c00139c4:	52                   	push   edx
c00139c5:	50                   	push   eax
c00139c6:	68 63 61 02 c0       	push   0xc0026163
c00139cb:	e8 03 97 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00139d0:	83 c4 10             	add    esp,0x10
c00139d3:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00139d8:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00139df:	75 05                	jne    c00139e6 <CPU::displayFeatures()+0xc6>
c00139e1:	b8 05 46 02 c0       	mov    eax,0xc0024605
c00139e6:	51                   	push   ecx
c00139e7:	51                   	push   ecx
c00139e8:	50                   	push   eax
c00139e9:	68 7a 61 02 c0       	push   0xc002617a
c00139ee:	e8 e0 96 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00139f3:	83 c4 10             	add    esp,0x10
c00139f6:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00139fb:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0013a02:	75 05                	jne    c0013a09 <CPU::displayFeatures()+0xe9>
c0013a04:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013a09:	52                   	push   edx
c0013a0a:	52                   	push   edx
c0013a0b:	50                   	push   eax
c0013a0c:	68 91 61 02 c0       	push   0xc0026191
c0013a11:	e8 bd 96 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013a16:	83 c4 10             	add    esp,0x10
c0013a19:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013a1e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013a25:	75 05                	jne    c0013a2c <CPU::displayFeatures()+0x10c>
c0013a27:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013a2c:	51                   	push   ecx
c0013a2d:	51                   	push   ecx
c0013a2e:	50                   	push   eax
c0013a2f:	68 a8 61 02 c0       	push   0xc00261a8
c0013a34:	e8 9a 96 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013a39:	83 c4 10             	add    esp,0x10
c0013a3c:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013a41:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013a48:	75 05                	jne    c0013a4f <CPU::displayFeatures()+0x12f>
c0013a4a:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013a4f:	52                   	push   edx
c0013a50:	52                   	push   edx
c0013a51:	50                   	push   eax
c0013a52:	68 bf 61 02 c0       	push   0xc00261bf
c0013a57:	e8 77 96 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013a5c:	83 c4 10             	add    esp,0x10
c0013a5f:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013a64:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013a6b:	75 05                	jne    c0013a72 <CPU::displayFeatures()+0x152>
c0013a6d:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013a72:	51                   	push   ecx
c0013a73:	51                   	push   ecx
c0013a74:	50                   	push   eax
c0013a75:	68 d6 61 02 c0       	push   0xc00261d6
c0013a7a:	e8 54 96 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013a7f:	83 c4 10             	add    esp,0x10
c0013a82:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013a87:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0013a8e:	75 05                	jne    c0013a95 <CPU::displayFeatures()+0x175>
c0013a90:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013a95:	52                   	push   edx
c0013a96:	52                   	push   edx
c0013a97:	50                   	push   eax
c0013a98:	68 ed 61 02 c0       	push   0xc00261ed
c0013a9d:	e8 31 96 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013aa2:	83 c4 10             	add    esp,0x10
c0013aa5:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013aaa:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0013ab1:	75 05                	jne    c0013ab8 <CPU::displayFeatures()+0x198>
c0013ab3:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013ab8:	51                   	push   ecx
c0013ab9:	51                   	push   ecx
c0013aba:	50                   	push   eax
c0013abb:	68 04 62 02 c0       	push   0xc0026204
c0013ac0:	e8 0e 96 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013ac5:	83 c4 10             	add    esp,0x10
c0013ac8:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013acd:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013ad4:	75 05                	jne    c0013adb <CPU::displayFeatures()+0x1bb>
c0013ad6:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013adb:	52                   	push   edx
c0013adc:	52                   	push   edx
c0013add:	50                   	push   eax
c0013ade:	68 1b 62 02 c0       	push   0xc002621b
c0013ae3:	e8 eb 95 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013ae8:	83 c4 10             	add    esp,0x10
c0013aeb:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013af0:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013af7:	75 05                	jne    c0013afe <CPU::displayFeatures()+0x1de>
c0013af9:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013afe:	51                   	push   ecx
c0013aff:	51                   	push   ecx
c0013b00:	50                   	push   eax
c0013b01:	68 32 62 02 c0       	push   0xc0026232
c0013b06:	e8 c8 95 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013b0b:	83 c4 10             	add    esp,0x10
c0013b0e:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013b13:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0013b1a:	75 05                	jne    c0013b21 <CPU::displayFeatures()+0x201>
c0013b1c:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013b21:	52                   	push   edx
c0013b22:	52                   	push   edx
c0013b23:	50                   	push   eax
c0013b24:	68 49 62 02 c0       	push   0xc0026249
c0013b29:	e8 a5 95 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013b2e:	83 c4 10             	add    esp,0x10
c0013b31:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013b36:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0013b3d:	75 05                	jne    c0013b44 <CPU::displayFeatures()+0x224>
c0013b3f:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013b44:	51                   	push   ecx
c0013b45:	51                   	push   ecx
c0013b46:	50                   	push   eax
c0013b47:	68 60 62 02 c0       	push   0xc0026260
c0013b4c:	e8 82 95 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013b51:	83 c4 10             	add    esp,0x10
c0013b54:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013b59:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0013b60:	78 05                	js     c0013b67 <CPU::displayFeatures()+0x247>
c0013b62:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013b67:	52                   	push   edx
c0013b68:	52                   	push   edx
c0013b69:	50                   	push   eax
c0013b6a:	68 77 62 02 c0       	push   0xc0026277
c0013b6f:	e8 5f 95 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013b74:	83 c4 10             	add    esp,0x10
c0013b77:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013b7c:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0013b83:	75 05                	jne    c0013b8a <CPU::displayFeatures()+0x26a>
c0013b85:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013b8a:	51                   	push   ecx
c0013b8b:	51                   	push   ecx
c0013b8c:	50                   	push   eax
c0013b8d:	68 8e 62 02 c0       	push   0xc002628e
c0013b92:	e8 3c 95 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013b97:	83 c4 10             	add    esp,0x10
c0013b9a:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013b9f:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0013ba6:	75 05                	jne    c0013bad <CPU::displayFeatures()+0x28d>
c0013ba8:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013bad:	52                   	push   edx
c0013bae:	52                   	push   edx
c0013baf:	50                   	push   eax
c0013bb0:	68 a5 62 02 c0       	push   0xc00262a5
c0013bb5:	e8 19 95 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0013bba:	83 c4 18             	add    esp,0x18
c0013bbd:	5b                   	pop    ebx
c0013bbe:	c3                   	ret    
c0013bbf:	90                   	nop

c0013bc0 <CPU::detectFeatures()>:
c0013bc0:	55                   	push   ebp
c0013bc1:	57                   	push   edi
c0013bc2:	56                   	push   esi
c0013bc3:	53                   	push   ebx
c0013bc4:	83 ec 50             	sub    esp,0x50
c0013bc7:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013bcb:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013bd5:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013bdc:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013be2:	6a 0d                	push   0xd
c0013be4:	6a 00                	push   0x0
c0013be6:	55                   	push   ebp
c0013be7:	e8 a8 ca fe ff       	call   c0000694 <memset>
c0013bec:	83 c4 10             	add    esp,0x10
c0013bef:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0013bf4:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013bfb:	0f 84 22 09 00 00    	je     c0014523 <CPU::detectFeatures()+0x963>
c0013c01:	83 ec 0c             	sub    esp,0xc
c0013c04:	89 ef                	mov    edi,ebp
c0013c06:	6a 10                	push   0x10
c0013c08:	e8 cd fb ff ff       	call   c00137da <CPU::cpuidCheckEDX(unsigned int)>
c0013c0d:	83 e0 01             	and    eax,0x1
c0013c10:	8d 14 00             	lea    edx,[eax+eax*1]
c0013c13:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c19:	83 e0 fd             	and    eax,0xfffffffd
c0013c1c:	09 d0                	or     eax,edx
c0013c1e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c24:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013c2b:	e8 aa fb ff ff       	call   c00137da <CPU::cpuidCheckEDX(unsigned int)>
c0013c30:	83 e0 01             	and    eax,0x1
c0013c33:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013c3a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c40:	83 e0 fb             	and    eax,0xfffffffb
c0013c43:	09 d0                	or     eax,edx
c0013c45:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c4b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013c52:	e8 83 fb ff ff       	call   c00137da <CPU::cpuidCheckEDX(unsigned int)>
c0013c57:	83 e0 01             	and    eax,0x1
c0013c5a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013c61:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c67:	83 e0 f7             	and    eax,0xfffffff7
c0013c6a:	09 d0                	or     eax,edx
c0013c6c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c72:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013c79:	e8 5c fb ff ff       	call   c00137da <CPU::cpuidCheckEDX(unsigned int)>
c0013c7e:	83 e0 01             	and    eax,0x1
c0013c81:	c1 e0 04             	shl    eax,0x4
c0013c84:	88 c2                	mov    dl,al
c0013c86:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c8c:	83 e0 ef             	and    eax,0xffffffef
c0013c8f:	09 d0                	or     eax,edx
c0013c91:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c97:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013c9e:	e8 37 fb ff ff       	call   c00137da <CPU::cpuidCheckEDX(unsigned int)>
c0013ca3:	83 e0 01             	and    eax,0x1
c0013ca6:	c1 e0 05             	shl    eax,0x5
c0013ca9:	88 c2                	mov    dl,al
c0013cab:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013cb1:	83 e0 df             	and    eax,0xffffffdf
c0013cb4:	09 d0                	or     eax,edx
c0013cb6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013cbc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013cc3:	e8 12 fb ff ff       	call   c00137da <CPU::cpuidCheckEDX(unsigned int)>
c0013cc8:	83 e0 01             	and    eax,0x1
c0013ccb:	8d 14 00             	lea    edx,[eax+eax*1]
c0013cce:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013cd4:	83 e0 fd             	and    eax,0xfffffffd
c0013cd7:	09 d0                	or     eax,edx
c0013cd9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013cdf:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013ce6:	e8 ef fa ff ff       	call   c00137da <CPU::cpuidCheckEDX(unsigned int)>
c0013ceb:	83 e0 01             	and    eax,0x1
c0013cee:	c1 e0 06             	shl    eax,0x6
c0013cf1:	88 c2                	mov    dl,al
c0013cf3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013cf9:	83 e0 bf             	and    eax,0xffffffbf
c0013cfc:	09 d0                	or     eax,edx
c0013cfe:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013d04:	58                   	pop    eax
c0013d05:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d09:	50                   	push   eax
c0013d0a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d0e:	50                   	push   eax
c0013d0f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013d13:	56                   	push   esi
c0013d14:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d18:	50                   	push   eax
c0013d19:	6a 00                	push   0x0
c0013d1b:	e8 36 fa ff ff       	call   c0013756 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d20:	b8 04 00 00 00       	mov    eax,0x4
c0013d25:	89 c1                	mov    ecx,eax
c0013d27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d29:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013d2f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013d33:	89 c1                	mov    ecx,eax
c0013d35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d37:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013d3d:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013d41:	89 c1                	mov    ecx,eax
c0013d43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d45:	83 c4 18             	add    esp,0x18
c0013d48:	68 bc 62 02 c0       	push   0xc00262bc
c0013d4d:	55                   	push   ebp
c0013d4e:	e8 89 ca fe ff       	call   c00007dc <strcmp>
c0013d53:	83 c4 10             	add    esp,0x10
c0013d56:	85 c0                	test   eax,eax
c0013d58:	75 0f                	jne    c0013d69 <CPU::detectFeatures()+0x1a9>
c0013d5a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013d64:	e9 22 02 00 00       	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013d69:	50                   	push   eax
c0013d6a:	50                   	push   eax
c0013d6b:	68 c9 62 02 c0       	push   0xc00262c9
c0013d70:	55                   	push   ebp
c0013d71:	e8 66 ca fe ff       	call   c00007dc <strcmp>
c0013d76:	83 c4 10             	add    esp,0x10
c0013d79:	85 c0                	test   eax,eax
c0013d7b:	74 dd                	je     c0013d5a <CPU::detectFeatures()+0x19a>
c0013d7d:	50                   	push   eax
c0013d7e:	50                   	push   eax
c0013d7f:	68 d6 62 02 c0       	push   0xc00262d6
c0013d84:	55                   	push   ebp
c0013d85:	e8 52 ca fe ff       	call   c00007dc <strcmp>
c0013d8a:	83 c4 10             	add    esp,0x10
c0013d8d:	85 c0                	test   eax,eax
c0013d8f:	74 2a                	je     c0013dbb <CPU::detectFeatures()+0x1fb>
c0013d91:	50                   	push   eax
c0013d92:	50                   	push   eax
c0013d93:	68 e3 62 02 c0       	push   0xc00262e3
c0013d98:	55                   	push   ebp
c0013d99:	e8 3e ca fe ff       	call   c00007dc <strcmp>
c0013d9e:	83 c4 10             	add    esp,0x10
c0013da1:	85 c0                	test   eax,eax
c0013da3:	74 16                	je     c0013dbb <CPU::detectFeatures()+0x1fb>
c0013da5:	50                   	push   eax
c0013da6:	50                   	push   eax
c0013da7:	68 f0 62 02 c0       	push   0xc00262f0
c0013dac:	55                   	push   ebp
c0013dad:	e8 2a ca fe ff       	call   c00007dc <strcmp>
c0013db2:	83 c4 10             	add    esp,0x10
c0013db5:	85 c0                	test   eax,eax
c0013db7:	74 48                	je     c0013e01 <CPU::detectFeatures()+0x241>
c0013db9:	eb 0f                	jmp    c0013dca <CPU::detectFeatures()+0x20a>
c0013dbb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013dc5:	e9 c1 01 00 00       	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013dca:	50                   	push   eax
c0013dcb:	50                   	push   eax
c0013dcc:	68 fd 62 02 c0       	push   0xc00262fd
c0013dd1:	55                   	push   ebp
c0013dd2:	e8 05 ca fe ff       	call   c00007dc <strcmp>
c0013dd7:	83 c4 10             	add    esp,0x10
c0013dda:	85 c0                	test   eax,eax
c0013ddc:	74 23                	je     c0013e01 <CPU::detectFeatures()+0x241>
c0013dde:	57                   	push   edi
c0013ddf:	57                   	push   edi
c0013de0:	68 0a 63 02 c0       	push   0xc002630a
c0013de5:	55                   	push   ebp
c0013de6:	e8 f1 c9 fe ff       	call   c00007dc <strcmp>
c0013deb:	83 c4 10             	add    esp,0x10
c0013dee:	85 c0                	test   eax,eax
c0013df0:	75 1e                	jne    c0013e10 <CPU::detectFeatures()+0x250>
c0013df2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013dfc:	e9 8a 01 00 00       	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013e01:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013e0b:	e9 7b 01 00 00       	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013e10:	56                   	push   esi
c0013e11:	56                   	push   esi
c0013e12:	68 17 63 02 c0       	push   0xc0026317
c0013e17:	55                   	push   ebp
c0013e18:	e8 bf c9 fe ff       	call   c00007dc <strcmp>
c0013e1d:	83 c4 10             	add    esp,0x10
c0013e20:	85 c0                	test   eax,eax
c0013e22:	75 0f                	jne    c0013e33 <CPU::detectFeatures()+0x273>
c0013e24:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013e2e:	e9 58 01 00 00       	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013e33:	51                   	push   ecx
c0013e34:	51                   	push   ecx
c0013e35:	68 d6 62 02 c0       	push   0xc00262d6
c0013e3a:	55                   	push   ebp
c0013e3b:	e8 9c c9 fe ff       	call   c00007dc <strcmp>
c0013e40:	83 c4 10             	add    esp,0x10
c0013e43:	85 c0                	test   eax,eax
c0013e45:	75 0f                	jne    c0013e56 <CPU::detectFeatures()+0x296>
c0013e47:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013e51:	e9 35 01 00 00       	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013e56:	52                   	push   edx
c0013e57:	52                   	push   edx
c0013e58:	68 24 63 02 c0       	push   0xc0026324
c0013e5d:	55                   	push   ebp
c0013e5e:	e8 79 c9 fe ff       	call   c00007dc <strcmp>
c0013e63:	83 c4 10             	add    esp,0x10
c0013e66:	85 c0                	test   eax,eax
c0013e68:	75 0f                	jne    c0013e79 <CPU::detectFeatures()+0x2b9>
c0013e6a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013e74:	e9 12 01 00 00       	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013e79:	50                   	push   eax
c0013e7a:	50                   	push   eax
c0013e7b:	68 31 63 02 c0       	push   0xc0026331
c0013e80:	55                   	push   ebp
c0013e81:	e8 56 c9 fe ff       	call   c00007dc <strcmp>
c0013e86:	83 c4 10             	add    esp,0x10
c0013e89:	85 c0                	test   eax,eax
c0013e8b:	75 0f                	jne    c0013e9c <CPU::detectFeatures()+0x2dc>
c0013e8d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013e97:	e9 ef 00 00 00       	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013e9c:	50                   	push   eax
c0013e9d:	50                   	push   eax
c0013e9e:	68 3e 63 02 c0       	push   0xc002633e
c0013ea3:	55                   	push   ebp
c0013ea4:	e8 33 c9 fe ff       	call   c00007dc <strcmp>
c0013ea9:	83 c4 10             	add    esp,0x10
c0013eac:	85 c0                	test   eax,eax
c0013eae:	75 0f                	jne    c0013ebf <CPU::detectFeatures()+0x2ff>
c0013eb0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013eba:	e9 cc 00 00 00       	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013ebf:	50                   	push   eax
c0013ec0:	50                   	push   eax
c0013ec1:	68 4b 63 02 c0       	push   0xc002634b
c0013ec6:	55                   	push   ebp
c0013ec7:	e8 10 c9 fe ff       	call   c00007dc <strcmp>
c0013ecc:	83 c4 10             	add    esp,0x10
c0013ecf:	85 c0                	test   eax,eax
c0013ed1:	75 0f                	jne    c0013ee2 <CPU::detectFeatures()+0x322>
c0013ed3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013edd:	e9 a9 00 00 00       	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013ee2:	50                   	push   eax
c0013ee3:	50                   	push   eax
c0013ee4:	68 58 63 02 c0       	push   0xc0026358
c0013ee9:	55                   	push   ebp
c0013eea:	e8 ed c8 fe ff       	call   c00007dc <strcmp>
c0013eef:	83 c4 10             	add    esp,0x10
c0013ef2:	85 c0                	test   eax,eax
c0013ef4:	75 0f                	jne    c0013f05 <CPU::detectFeatures()+0x345>
c0013ef6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013f00:	e9 86 00 00 00       	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013f05:	50                   	push   eax
c0013f06:	50                   	push   eax
c0013f07:	68 65 63 02 c0       	push   0xc0026365
c0013f0c:	55                   	push   ebp
c0013f0d:	e8 ca c8 fe ff       	call   c00007dc <strcmp>
c0013f12:	83 c4 10             	add    esp,0x10
c0013f15:	85 c0                	test   eax,eax
c0013f17:	75 0c                	jne    c0013f25 <CPU::detectFeatures()+0x365>
c0013f19:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013f23:	eb 66                	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013f25:	50                   	push   eax
c0013f26:	50                   	push   eax
c0013f27:	68 72 63 02 c0       	push   0xc0026372
c0013f2c:	55                   	push   ebp
c0013f2d:	e8 aa c8 fe ff       	call   c00007dc <strcmp>
c0013f32:	83 c4 10             	add    esp,0x10
c0013f35:	85 c0                	test   eax,eax
c0013f37:	75 0c                	jne    c0013f45 <CPU::detectFeatures()+0x385>
c0013f39:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013f43:	eb 46                	jmp    c0013f8b <CPU::detectFeatures()+0x3cb>
c0013f45:	57                   	push   edi
c0013f46:	57                   	push   edi
c0013f47:	68 7f 63 02 c0       	push   0xc002637f
c0013f4c:	55                   	push   ebp
c0013f4d:	e8 8a c8 fe ff       	call   c00007dc <strcmp>
c0013f52:	83 c4 10             	add    esp,0x10
c0013f55:	85 c0                	test   eax,eax
c0013f57:	74 e0                	je     c0013f39 <CPU::detectFeatures()+0x379>
c0013f59:	56                   	push   esi
c0013f5a:	56                   	push   esi
c0013f5b:	68 8c 63 02 c0       	push   0xc002638c
c0013f60:	55                   	push   ebp
c0013f61:	e8 76 c8 fe ff       	call   c00007dc <strcmp>
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	85 c0                	test   eax,eax
c0013f6b:	74 cc                	je     c0013f39 <CPU::detectFeatures()+0x379>
c0013f6d:	51                   	push   ecx
c0013f6e:	51                   	push   ecx
c0013f6f:	68 99 63 02 c0       	push   0xc0026399
c0013f74:	55                   	push   ebp
c0013f75:	e8 62 c8 fe ff       	call   c00007dc <strcmp>
c0013f7a:	83 c4 10             	add    esp,0x10
c0013f7d:	85 c0                	test   eax,eax
c0013f7f:	74 b8                	je     c0013f39 <CPU::detectFeatures()+0x379>
c0013f81:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013f8b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013f90:	0f 86 be 00 00 00    	jbe    c0014054 <CPU::detectFeatures()+0x494>
c0013f96:	83 ec 0c             	sub    esp,0xc
c0013f99:	68 80 00 00 00       	push   0x80
c0013f9e:	e8 93 f8 ff ff       	call   c0013836 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013fa3:	83 e0 01             	and    eax,0x1
c0013fa6:	c1 e0 06             	shl    eax,0x6
c0013fa9:	88 c2                	mov    dl,al
c0013fab:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013fb1:	83 e0 bf             	and    eax,0xffffffbf
c0013fb4:	09 d0                	or     eax,edx
c0013fb6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013fbc:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013fc3:	e8 6e f8 ff ff       	call   c0013836 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013fc8:	83 e0 01             	and    eax,0x1
c0013fcb:	c1 e0 04             	shl    eax,0x4
c0013fce:	88 c2                	mov    dl,al
c0013fd0:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013fd6:	83 e0 ef             	and    eax,0xffffffef
c0013fd9:	09 d0                	or     eax,edx
c0013fdb:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013fe1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013fe8:	e8 49 f8 ff ff       	call   c0013836 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013fed:	c1 e0 07             	shl    eax,0x7
c0013ff0:	88 c2                	mov    dl,al
c0013ff2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013ff8:	83 e0 7f             	and    eax,0x7f
c0013ffb:	09 d0                	or     eax,edx
c0013ffd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014003:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001400a:	e8 55 f8 ff ff       	call   c0013864 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001400f:	83 e0 01             	and    eax,0x1
c0014012:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014019:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001401f:	83 e0 f7             	and    eax,0xfffffff7
c0014022:	09 d0                	or     eax,edx
c0014024:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001402a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014031:	e8 2e f8 ff ff       	call   c0013864 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0014036:	83 c4 10             	add    esp,0x10
c0014039:	83 e0 01             	and    eax,0x1
c001403c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014043:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014049:	83 e0 fb             	and    eax,0xfffffffb
c001404c:	09 d0                	or     eax,edx
c001404e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014054:	83 ec 0c             	sub    esp,0xc
c0014057:	8d 44 24 28          	lea    eax,[esp+0x28]
c001405b:	50                   	push   eax
c001405c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014060:	50                   	push   eax
c0014061:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014065:	56                   	push   esi
c0014066:	8d 44 24 28          	lea    eax,[esp+0x28]
c001406a:	50                   	push   eax
c001406b:	6a 01                	push   0x1
c001406d:	e8 e4 f6 ff ff       	call   c0013756 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014072:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014076:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001407c:	88 ca                	mov    dl,cl
c001407e:	83 e0 f0             	and    eax,0xfffffff0
c0014081:	83 e2 0f             	and    edx,0xf
c0014084:	09 d0                	or     eax,edx
c0014086:	88 ca                	mov    dl,cl
c0014088:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001408e:	c0 ea 04             	shr    dl,0x4
c0014091:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0014095:	0f b6 c2             	movzx  eax,dl
c0014098:	83 c4 20             	add    esp,0x20
c001409b:	c1 e0 06             	shl    eax,0x6
c001409e:	89 c7                	mov    edi,eax
c00140a0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00140a6:	66 25 3f c0          	and    ax,0xc03f
c00140aa:	09 f8                	or     eax,edi
c00140ac:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00140b3:	89 c8                	mov    eax,ecx
c00140b5:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00140bc:	c1 e8 08             	shr    eax,0x8
c00140bf:	83 e5 3f             	and    ebp,0x3f
c00140c2:	83 e0 0f             	and    eax,0xf
c00140c5:	89 c7                	mov    edi,eax
c00140c7:	c1 e7 06             	shl    edi,0x6
c00140ca:	09 ef                	or     edi,ebp
c00140cc:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00140d3:	89 fa                	mov    edx,edi
c00140d5:	83 e5 c0             	and    ebp,0xffffffc0
c00140d8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00140de:	88 c2                	mov    dl,al
c00140e0:	c0 ea 02             	shr    dl,0x2
c00140e3:	89 d7                	mov    edi,edx
c00140e5:	09 ef                	or     edi,ebp
c00140e7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00140ed:	89 fa                	mov    edx,edi
c00140ef:	83 e5 cf             	and    ebp,0xffffffcf
c00140f2:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00140f8:	89 cf                	mov    edi,ecx
c00140fa:	c1 ef 0c             	shr    edi,0xc
c00140fd:	83 e7 03             	and    edi,0x3
c0014100:	c1 e7 04             	shl    edi,0x4
c0014103:	09 ef                	or     edi,ebp
c0014105:	3c 06                	cmp    al,0x6
c0014107:	89 fa                	mov    edx,edi
c0014109:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001410f:	74 04                	je     c0014115 <CPU::detectFeatures()+0x555>
c0014111:	3c 0f                	cmp    al,0xf
c0014113:	75 5c                	jne    c0014171 <CPU::detectFeatures()+0x5b1>
c0014115:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014119:	89 cf                	mov    edi,ecx
c001411b:	c1 ef 10             	shr    edi,0x10
c001411e:	c1 e7 04             	shl    edi,0x4
c0014121:	09 fa                	or     edx,edi
c0014123:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0014129:	0f b6 d2             	movzx  edx,dl
c001412c:	66 81 e7 3f c0       	and    di,0xc03f
c0014131:	c1 e2 06             	shl    edx,0x6
c0014134:	09 fa                	or     edx,edi
c0014136:	3c 0f                	cmp    al,0xf
c0014138:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001413f:	75 30                	jne    c0014171 <CPU::detectFeatures()+0x5b1>
c0014141:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0014147:	c1 e9 14             	shr    ecx,0x14
c001414a:	83 e0 3f             	and    eax,0x3f
c001414d:	83 c1 0f             	add    ecx,0xf
c0014150:	88 ca                	mov    dl,cl
c0014152:	c0 e9 02             	shr    cl,0x2
c0014155:	c1 e2 06             	shl    edx,0x6
c0014158:	09 d0                	or     eax,edx
c001415a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0014160:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0014166:	83 e0 c0             	and    eax,0xffffffc0
c0014169:	09 c1                	or     ecx,eax
c001416b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014171:	83 ec 0c             	sub    esp,0xc
c0014174:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001417b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001417f:	50                   	push   eax
c0014180:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014184:	55                   	push   ebp
c0014185:	56                   	push   esi
c0014186:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001418a:	57                   	push   edi
c001418b:	68 00 00 00 80       	push   0x80000000
c0014190:	e8 c1 f5 ff ff       	call   c0013756 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014195:	83 c4 20             	add    esp,0x20
c0014198:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00141a0:	76 22                	jbe    c00141c4 <CPU::detectFeatures()+0x604>
c00141a2:	83 ec 0c             	sub    esp,0xc
c00141a5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141a9:	50                   	push   eax
c00141aa:	55                   	push   ebp
c00141ab:	56                   	push   esi
c00141ac:	57                   	push   edi
c00141ad:	68 01 00 00 80       	push   0x80000001
c00141b2:	e8 9f f5 ff ff       	call   c0013756 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00141b7:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00141c1:	83 c4 20             	add    esp,0x20
c00141c4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00141ca:	83 f8 01             	cmp    eax,0x1
c00141cd:	75 6f                	jne    c001423e <CPU::detectFeatures()+0x67e>
c00141cf:	51                   	push   ecx
c00141d0:	51                   	push   ecx
c00141d1:	68 a5 63 02 c0       	push   0xc00263a5
c00141d6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00141da:	56                   	push   esi
c00141db:	e8 70 c5 fe ff       	call   c0000750 <strcpy>
c00141e0:	5f                   	pop    edi
c00141e1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141e7:	5d                   	pop    ebp
c00141e8:	66 c1 e8 06          	shr    ax,0x6
c00141ec:	0f b6 c0             	movzx  eax,al
c00141ef:	50                   	push   eax
c00141f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141f6:	c1 e8 0e             	shr    eax,0xe
c00141f9:	0f b6 c0             	movzx  eax,al
c00141fc:	50                   	push   eax
c00141fd:	e8 fe f1 ff ff       	call   c0013400 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0014202:	5a                   	pop    edx
c0014203:	59                   	pop    ecx
c0014204:	50                   	push   eax
c0014205:	56                   	push   esi
c0014206:	e8 85 c6 fe ff       	call   c0000890 <strcat>
c001420b:	5f                   	pop    edi
c001420c:	5d                   	pop    ebp
c001420d:	56                   	push   esi
c001420e:	53                   	push   ebx
c001420f:	e8 28 a6 ff ff       	call   c000e83c <Device::setName(char const*)>
c0014214:	58                   	pop    eax
c0014215:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001421b:	5a                   	pop    edx
c001421c:	68 ac 63 02 c0       	push   0xc00263ac
c0014221:	50                   	push   eax
c0014222:	e8 b5 c5 fe ff       	call   c00007dc <strcmp>
c0014227:	83 c4 10             	add    esp,0x10
c001422a:	85 c0                	test   eax,eax
c001422c:	0f 85 71 03 00 00    	jne    c00145a3 <CPU::detectFeatures()+0x9e3>
c0014232:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014239:	e9 65 03 00 00       	jmp    c00145a3 <CPU::detectFeatures()+0x9e3>
c001423e:	83 f8 02             	cmp    eax,0x2
c0014241:	0f 85 b5 00 00 00    	jne    c00142fc <CPU::detectFeatures()+0x73c>
c0014247:	57                   	push   edi
c0014248:	57                   	push   edi
c0014249:	68 be 63 02 c0       	push   0xc00263be
c001424e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014252:	56                   	push   esi
c0014253:	e8 f8 c4 fe ff       	call   c0000750 <strcpy>
c0014258:	5d                   	pop    ebp
c0014259:	58                   	pop    eax
c001425a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014260:	66 c1 e8 06          	shr    ax,0x6
c0014264:	0f b6 c0             	movzx  eax,al
c0014267:	50                   	push   eax
c0014268:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001426e:	c1 e8 0e             	shr    eax,0xe
c0014271:	0f b6 c0             	movzx  eax,al
c0014274:	50                   	push   eax
c0014275:	e8 f2 ef ff ff       	call   c001326c <CPU::lookupAMDName(unsigned char, unsigned char)>
c001427a:	5a                   	pop    edx
c001427b:	59                   	pop    ecx
c001427c:	50                   	push   eax
c001427d:	56                   	push   esi
c001427e:	e8 0d c6 fe ff       	call   c0000890 <strcat>
c0014283:	5f                   	pop    edi
c0014284:	5d                   	pop    ebp
c0014285:	56                   	push   esi
c0014286:	53                   	push   ebx
c0014287:	e8 b0 a5 ff ff       	call   c000e83c <Device::setName(char const*)>
c001428c:	58                   	pop    eax
c001428d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014293:	5a                   	pop    edx
c0014294:	68 c3 63 02 c0       	push   0xc00263c3
c0014299:	50                   	push   eax
c001429a:	e8 3d c5 fe ff       	call   c00007dc <strcmp>
c001429f:	83 c4 10             	add    esp,0x10
c00142a2:	85 c0                	test   eax,eax
c00142a4:	75 20                	jne    c00142c6 <CPU::detectFeatures()+0x706>
c00142a6:	8b 15 c8 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028bc8
c00142ac:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142b2:	a8 01                	test   al,0x1
c00142b4:	74 10                	je     c00142c6 <CPU::detectFeatures()+0x706>
c00142b6:	83 e0 fe             	and    eax,0xfffffffe
c00142b9:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00142bf:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00142c6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00142cc:	c1 e8 0e             	shr    eax,0xe
c00142cf:	3c 05                	cmp    al,0x5
c00142d1:	0f 85 cc 02 00 00    	jne    c00145a3 <CPU::detectFeatures()+0x9e3>
c00142d7:	56                   	push   esi
c00142d8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00142de:	83 e0 0f             	and    eax,0xf
c00142e1:	50                   	push   eax
c00142e2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00142e8:	66 c1 e8 06          	shr    ax,0x6
c00142ec:	0f b6 c0             	movzx  eax,al
c00142ef:	50                   	push   eax
c00142f0:	6a 05                	push   0x5
c00142f2:	e8 eb f3 ff ff       	call   c00136e2 <CPU::AMD_K6_writeback(int, int, int)>
c00142f7:	e9 1f 02 00 00       	jmp    c001451b <CPU::detectFeatures()+0x95b>
c00142fc:	8d 50 fd             	lea    edx,[eax-0x3]
c00142ff:	83 fa 01             	cmp    edx,0x1
c0014302:	76 09                	jbe    c001430d <CPU::detectFeatures()+0x74d>
c0014304:	83 f8 06             	cmp    eax,0x6
c0014307:	0f 85 91 01 00 00    	jne    c001449e <CPU::detectFeatures()+0x8de>
c001430d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014313:	c1 ea 0e             	shr    edx,0xe
c0014316:	80 fa 05             	cmp    dl,0x5
c0014319:	75 7b                	jne    c0014396 <CPU::detectFeatures()+0x7d6>
c001431b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014321:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014326:	66 81 fa 00 01       	cmp    dx,0x100
c001432b:	75 0c                	jne    c0014339 <CPU::detectFeatures()+0x779>
c001432d:	51                   	push   ecx
c001432e:	51                   	push   ecx
c001432f:	68 ca 63 02 c0       	push   0xc00263ca
c0014334:	e9 dc 01 00 00       	jmp    c0014515 <CPU::detectFeatures()+0x955>
c0014339:	66 81 fa 00 02       	cmp    dx,0x200
c001433e:	75 0c                	jne    c001434c <CPU::detectFeatures()+0x78c>
c0014340:	52                   	push   edx
c0014341:	52                   	push   edx
c0014342:	68 dd 63 02 c0       	push   0xc00263dd
c0014347:	e9 c9 01 00 00       	jmp    c0014515 <CPU::detectFeatures()+0x955>
c001434c:	66 81 fa 40 02       	cmp    dx,0x240
c0014351:	75 0c                	jne    c001435f <CPU::detectFeatures()+0x79f>
c0014353:	50                   	push   eax
c0014354:	50                   	push   eax
c0014355:	68 ef 63 02 c0       	push   0xc00263ef
c001435a:	e9 b6 01 00 00       	jmp    c0014515 <CPU::detectFeatures()+0x955>
c001435f:	83 f8 06             	cmp    eax,0x6
c0014362:	75 0c                	jne    c0014370 <CPU::detectFeatures()+0x7b0>
c0014364:	50                   	push   eax
c0014365:	50                   	push   eax
c0014366:	68 01 64 02 c0       	push   0xc0026401
c001436b:	e9 a5 01 00 00       	jmp    c0014515 <CPU::detectFeatures()+0x955>
c0014370:	83 f8 04             	cmp    eax,0x4
c0014373:	75 0c                	jne    c0014381 <CPU::detectFeatures()+0x7c1>
c0014375:	50                   	push   eax
c0014376:	50                   	push   eax
c0014377:	68 0d 64 02 c0       	push   0xc002640d
c001437c:	e9 94 01 00 00       	jmp    c0014515 <CPU::detectFeatures()+0x955>
c0014381:	83 f8 03             	cmp    eax,0x3
c0014384:	0f 85 19 02 00 00    	jne    c00145a3 <CPU::detectFeatures()+0x9e3>
c001438a:	50                   	push   eax
c001438b:	50                   	push   eax
c001438c:	68 15 64 02 c0       	push   0xc0026415
c0014391:	e9 7f 01 00 00       	jmp    c0014515 <CPU::detectFeatures()+0x955>
c0014396:	80 fa 06             	cmp    dl,0x6
c0014399:	0f 85 db 00 00 00    	jne    c001447a <CPU::detectFeatures()+0x8ba>
c001439f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00143a5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00143aa:	66 81 fa 80 01       	cmp    dx,0x180
c00143af:	75 0c                	jne    c00143bd <CPU::detectFeatures()+0x7fd>
c00143b1:	50                   	push   eax
c00143b2:	50                   	push   eax
c00143b3:	68 20 64 02 c0       	push   0xc0026420
c00143b8:	e9 58 01 00 00       	jmp    c0014515 <CPU::detectFeatures()+0x955>
c00143bd:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00143c3:	66 f7 c1 80 ff       	test   cx,0xff80
c00143c8:	75 0c                	jne    c00143d6 <CPU::detectFeatures()+0x816>
c00143ca:	50                   	push   eax
c00143cb:	50                   	push   eax
c00143cc:	68 30 64 02 c0       	push   0xc0026430
c00143d1:	e9 3f 01 00 00       	jmp    c0014515 <CPU::detectFeatures()+0x955>
c00143d6:	66 81 fa 40 02       	cmp    dx,0x240
c00143db:	75 0c                	jne    c00143e9 <CPU::detectFeatures()+0x829>
c00143dd:	55                   	push   ebp
c00143de:	55                   	push   ebp
c00143df:	68 37 64 02 c0       	push   0xc0026437
c00143e4:	e9 2c 01 00 00       	jmp    c0014515 <CPU::detectFeatures()+0x955>
c00143e9:	66 81 fa 80 02       	cmp    dx,0x280
c00143ee:	75 0c                	jne    c00143fc <CPU::detectFeatures()+0x83c>
c00143f0:	57                   	push   edi
c00143f1:	57                   	push   edi
c00143f2:	68 40 64 02 c0       	push   0xc0026440
c00143f7:	e9 19 01 00 00       	jmp    c0014515 <CPU::detectFeatures()+0x955>
c00143fc:	66 81 fa 40 03       	cmp    dx,0x340
c0014401:	74 ed                	je     c00143f0 <CPU::detectFeatures()+0x830>
c0014403:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014408:	75 0c                	jne    c0014416 <CPU::detectFeatures()+0x856>
c001440a:	56                   	push   esi
c001440b:	56                   	push   esi
c001440c:	68 47 64 02 c0       	push   0xc0026447
c0014411:	e9 ff 00 00 00       	jmp    c0014515 <CPU::detectFeatures()+0x955>
c0014416:	83 f8 06             	cmp    eax,0x6
c0014419:	0f 84 45 ff ff ff    	je     c0014364 <CPU::detectFeatures()+0x7a4>
c001441f:	83 f8 04             	cmp    eax,0x4
c0014422:	0f 84 4d ff ff ff    	je     c0014375 <CPU::detectFeatures()+0x7b5>
c0014428:	83 f8 03             	cmp    eax,0x3
c001442b:	0f 85 72 01 00 00    	jne    c00145a3 <CPU::detectFeatures()+0x9e3>
c0014431:	51                   	push   ecx
c0014432:	51                   	push   ecx
c0014433:	68 50 64 02 c0       	push   0xc0026450
c0014438:	53                   	push   ebx
c0014439:	e8 fe a3 ff ff       	call   c000e83c <Device::setName(char const*)>
c001443e:	b1 c1                	mov    cl,0xc1
c0014440:	88 c8                	mov    al,cl
c0014442:	e6 22                	out    0x22,al
c0014444:	e4 23                	in     al,0x23
c0014446:	88 c2                	mov    dl,al
c0014448:	88 c8                	mov    al,cl
c001444a:	e6 22                	out    0x22,al
c001444c:	88 d0                	mov    al,dl
c001444e:	83 c8 10             	or     eax,0x10
c0014451:	e6 23                	out    0x23,al
c0014453:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001445a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001445d:	89 d0                	mov    eax,edx
c001445f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014465:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014469:	40                   	inc    eax
c001446a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014470:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014475:	e9 a1 00 00 00       	jmp    c001451b <CPU::detectFeatures()+0x95b>
c001447a:	83 f8 06             	cmp    eax,0x6
c001447d:	0f 84 e1 fe ff ff    	je     c0014364 <CPU::detectFeatures()+0x7a4>
c0014483:	83 f8 04             	cmp    eax,0x4
c0014486:	0f 84 e9 fe ff ff    	je     c0014375 <CPU::detectFeatures()+0x7b5>
c001448c:	83 f8 03             	cmp    eax,0x3
c001448f:	0f 85 0e 01 00 00    	jne    c00145a3 <CPU::detectFeatures()+0x9e3>
c0014495:	52                   	push   edx
c0014496:	52                   	push   edx
c0014497:	68 5b 64 02 c0       	push   0xc002645b
c001449c:	eb 77                	jmp    c0014515 <CPU::detectFeatures()+0x955>
c001449e:	83 f8 07             	cmp    eax,0x7
c00144a1:	75 09                	jne    c00144ac <CPU::detectFeatures()+0x8ec>
c00144a3:	50                   	push   eax
c00144a4:	50                   	push   eax
c00144a5:	68 65 64 02 c0       	push   0xc0026465
c00144aa:	eb 69                	jmp    c0014515 <CPU::detectFeatures()+0x955>
c00144ac:	83 f8 0a             	cmp    eax,0xa
c00144af:	75 09                	jne    c00144ba <CPU::detectFeatures()+0x8fa>
c00144b1:	50                   	push   eax
c00144b2:	50                   	push   eax
c00144b3:	68 70 64 02 c0       	push   0xc0026470
c00144b8:	eb 5b                	jmp    c0014515 <CPU::detectFeatures()+0x955>
c00144ba:	83 f8 0b             	cmp    eax,0xb
c00144bd:	75 09                	jne    c00144c8 <CPU::detectFeatures()+0x908>
c00144bf:	50                   	push   eax
c00144c0:	50                   	push   eax
c00144c1:	68 78 64 02 c0       	push   0xc0026478
c00144c6:	eb 4d                	jmp    c0014515 <CPU::detectFeatures()+0x955>
c00144c8:	83 f8 08             	cmp    eax,0x8
c00144cb:	75 09                	jne    c00144d6 <CPU::detectFeatures()+0x916>
c00144cd:	50                   	push   eax
c00144ce:	50                   	push   eax
c00144cf:	68 81 64 02 c0       	push   0xc0026481
c00144d4:	eb 3f                	jmp    c0014515 <CPU::detectFeatures()+0x955>
c00144d6:	83 f8 09             	cmp    eax,0x9
c00144d9:	75 09                	jne    c00144e4 <CPU::detectFeatures()+0x924>
c00144db:	50                   	push   eax
c00144dc:	50                   	push   eax
c00144dd:	68 89 64 02 c0       	push   0xc0026489
c00144e2:	eb 31                	jmp    c0014515 <CPU::detectFeatures()+0x955>
c00144e4:	83 f8 05             	cmp    eax,0x5
c00144e7:	75 09                	jne    c00144f2 <CPU::detectFeatures()+0x932>
c00144e9:	50                   	push   eax
c00144ea:	50                   	push   eax
c00144eb:	68 91 64 02 c0       	push   0xc0026491
c00144f0:	eb 23                	jmp    c0014515 <CPU::detectFeatures()+0x955>
c00144f2:	83 f8 0c             	cmp    eax,0xc
c00144f5:	75 09                	jne    c0014500 <CPU::detectFeatures()+0x940>
c00144f7:	55                   	push   ebp
c00144f8:	55                   	push   ebp
c00144f9:	68 9f 64 02 c0       	push   0xc002649f
c00144fe:	eb 15                	jmp    c0014515 <CPU::detectFeatures()+0x955>
c0014500:	83 f8 0d             	cmp    eax,0xd
c0014503:	75 09                	jne    c001450e <CPU::detectFeatures()+0x94e>
c0014505:	57                   	push   edi
c0014506:	57                   	push   edi
c0014507:	68 aa 64 02 c0       	push   0xc00264aa
c001450c:	eb 07                	jmp    c0014515 <CPU::detectFeatures()+0x955>
c001450e:	56                   	push   esi
c001450f:	56                   	push   esi
c0014510:	68 be 64 02 c0       	push   0xc00264be
c0014515:	53                   	push   ebx
c0014516:	e8 21 a3 ff ff       	call   c000e83c <Device::setName(char const*)>
c001451b:	83 c4 10             	add    esp,0x10
c001451e:	e9 80 00 00 00       	jmp    c00145a3 <CPU::detectFeatures()+0x9e3>
c0014523:	51                   	push   ecx
c0014524:	51                   	push   ecx
c0014525:	68 0a 63 02 c0       	push   0xc002630a
c001452a:	55                   	push   ebp
c001452b:	e8 20 c2 fe ff       	call   c0000750 <strcpy>
c0014530:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001453a:	e8 a4 bc fe ff       	call   c00001e3 <is486>
c001453f:	83 c4 10             	add    esp,0x10
c0014542:	85 c0                	test   eax,eax
c0014544:	74 2b                	je     c0014571 <CPU::detectFeatures()+0x9b1>
c0014546:	52                   	push   edx
c0014547:	52                   	push   edx
c0014548:	68 ca 64 02 c0       	push   0xc00264ca
c001454d:	53                   	push   ebx
c001454e:	e8 e9 a2 ff ff       	call   c000e83c <Device::setName(char const*)>
c0014553:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001455a:	0f 20 c0             	mov    eax,cr0
c001455d:	83 e0 14             	and    eax,0x14
c0014560:	83 c4 10             	add    esp,0x10
c0014563:	83 f8 04             	cmp    eax,0x4
c0014566:	75 1f                	jne    c0014587 <CPU::detectFeatures()+0x9c7>
c0014568:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001456f:	eb 32                	jmp    c00145a3 <CPU::detectFeatures()+0x9e3>
c0014571:	50                   	push   eax
c0014572:	50                   	push   eax
c0014573:	68 d5 64 02 c0       	push   0xc00264d5
c0014578:	53                   	push   ebx
c0014579:	e8 be a2 ff ff       	call   c000e83c <Device::setName(char const*)>
c001457e:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0014585:	eb d3                	jmp    c001455a <CPU::detectFeatures()+0x99a>
c0014587:	e8 32 bc fe ff       	call   c00001be <hasLegacyFPU>
c001458c:	83 e0 01             	and    eax,0x1
c001458f:	8d 14 00             	lea    edx,[eax+eax*1]
c0014592:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014598:	83 e0 fd             	and    eax,0xfffffffd
c001459b:	09 d0                	or     eax,edx
c001459d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00145a3:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c00145aa:	74 0e                	je     c00145ba <CPU::detectFeatures()+0x9fa>
c00145ac:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00145b1:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c00145b8:	eb 20                	jmp    c00145da <CPU::detectFeatures()+0xa1a>
c00145ba:	e8 ff bb fe ff       	call   c00001be <hasLegacyFPU>
c00145bf:	83 e0 01             	and    eax,0x1
c00145c2:	8d 14 00             	lea    edx,[eax+eax*1]
c00145c5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00145cb:	83 e0 fd             	and    eax,0xfffffffd
c00145ce:	09 d0                	or     eax,edx
c00145d0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00145d6:	a8 02                	test   al,0x2
c00145d8:	75 d2                	jne    c00145ac <CPU::detectFeatures()+0x9ec>
c00145da:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00145e1:	83 c4 4c             	add    esp,0x4c
c00145e4:	5b                   	pop    ebx
c00145e5:	5e                   	pop    esi
c00145e6:	5f                   	pop    edi
c00145e7:	5d                   	pop    ebp
c00145e8:	c3                   	ret    
c00145e9:	90                   	nop

c00145ea <CPU::setupSMEP()>:
c00145ea:	0f 20 e0             	mov    eax,cr4
c00145ed:	0d 00 00 10 00       	or     eax,0x100000
c00145f2:	0f 22 e0             	mov    cr4,eax
c00145f5:	c3                   	ret    

c00145f6 <CPU::setupUMIP()>:
c00145f6:	0f 20 e0             	mov    eax,cr4
c00145f9:	80 cc 08             	or     ah,0x8
c00145fc:	0f 22 e0             	mov    cr4,eax
c00145ff:	c3                   	ret    

c0014600 <CPU::setupTSC()>:
c0014600:	0f 20 e0             	mov    eax,cr4
c0014603:	83 c8 04             	or     eax,0x4
c0014606:	0f 22 e0             	mov    cr4,eax
c0014609:	c3                   	ret    

c001460a <CPU::setupLargePages()>:
c001460a:	0f 20 e0             	mov    eax,cr4
c001460d:	83 c8 10             	or     eax,0x10
c0014610:	0f 22 e0             	mov    cr4,eax
c0014613:	c3                   	ret    

c0014614 <CPU::setupPAT()>:
c0014614:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0014619:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014620:	74 2c                	je     c001464e <CPU::setupPAT()+0x3a>
c0014622:	53                   	push   ebx
c0014623:	83 ec 10             	sub    esp,0x10
c0014626:	68 77 02 00 00       	push   0x277
c001462b:	50                   	push   eax
c001462c:	e8 4d 4c ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0014631:	83 e2 f8             	and    edx,0xfffffff8
c0014634:	83 ca 01             	or     edx,0x1
c0014637:	52                   	push   edx
c0014638:	50                   	push   eax
c0014639:	68 77 02 00 00       	push   0x277
c001463e:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c0014644:	e8 61 4c ff ff       	call   c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>
c0014649:	83 c4 28             	add    esp,0x28
c001464c:	5b                   	pop    ebx
c001464d:	c3                   	ret    
c001464e:	c3                   	ret    
c001464f:	90                   	nop

c0014650 <CPU::setupMTRR()>:
c0014650:	c3                   	ret    
c0014651:	90                   	nop

c0014652 <CPU::setupGlobalPages()>:
c0014652:	0f 20 e0             	mov    eax,cr4
c0014655:	0c 80                	or     al,0x80
c0014657:	0f 22 e0             	mov    cr4,eax
c001465a:	c3                   	ret    
c001465b:	90                   	nop

c001465c <CPU::allowUsermodeDataAccess()>:
c001465c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014660:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014667:	74 03                	je     c001466c <CPU::allowUsermodeDataAccess()+0x10>
c0014669:	0f 01 cb             	stac   
c001466c:	c3                   	ret    
c001466d:	90                   	nop

c001466e <CPU::prohibitUsermodeDataAccess()>:
c001466e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014672:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014679:	74 03                	je     c001467e <CPU::prohibitUsermodeDataAccess()+0x10>
c001467b:	0f 01 ca             	clac   
c001467e:	c3                   	ret    
c001467f:	90                   	nop

c0014680 <CPU::setupSMAP()>:
c0014680:	0f 20 e0             	mov    eax,cr4
c0014683:	0d 00 00 20 00       	or     eax,0x200000
c0014688:	0f 22 e0             	mov    cr4,eax
c001468b:	eb e1                	jmp    c001466e <CPU::prohibitUsermodeDataAccess()>
c001468d:	90                   	nop

c001468e <CPU::setupFeatures()>:
c001468e:	53                   	push   ebx
c001468f:	83 ec 08             	sub    esp,0x8
c0014692:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014696:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001469d:	74 18                	je     c00146b7 <CPU::setupFeatures()+0x29>
c001469f:	83 ec 0c             	sub    esp,0xc
c00146a2:	68 e0 64 02 c0       	push   0xc00264e0
c00146a7:	e8 27 8a ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00146ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146af:	e8 42 ff ff ff       	call   c00145f6 <CPU::setupUMIP()>
c00146b4:	83 c4 10             	add    esp,0x10
c00146b7:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00146be:	74 18                	je     c00146d8 <CPU::setupFeatures()+0x4a>
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	68 ea 64 02 c0       	push   0xc00264ea
c00146c8:	e8 06 8a ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00146cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146d0:	e8 2b ff ff ff       	call   c0014600 <CPU::setupTSC()>
c00146d5:	83 c4 10             	add    esp,0x10
c00146d8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00146df:	74 18                	je     c00146f9 <CPU::setupFeatures()+0x6b>
c00146e1:	83 ec 0c             	sub    esp,0xc
c00146e4:	68 f3 64 02 c0       	push   0xc00264f3
c00146e9:	e8 e5 89 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00146ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146f1:	e8 14 ff ff ff       	call   c001460a <CPU::setupLargePages()>
c00146f6:	83 c4 10             	add    esp,0x10
c00146f9:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014700:	74 18                	je     c001471a <CPU::setupFeatures()+0x8c>
c0014702:	83 ec 0c             	sub    esp,0xc
c0014705:	68 fc 64 02 c0       	push   0xc00264fc
c001470a:	e8 c4 89 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001470f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014712:	e8 3b ff ff ff       	call   c0014652 <CPU::setupGlobalPages()>
c0014717:	83 c4 10             	add    esp,0x10
c001471a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014721:	74 18                	je     c001473b <CPU::setupFeatures()+0xad>
c0014723:	83 ec 0c             	sub    esp,0xc
c0014726:	68 0e 65 02 c0       	push   0xc002650e
c001472b:	e8 a3 89 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0014730:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014733:	e8 dc fe ff ff       	call   c0014614 <CPU::setupPAT()>
c0014738:	83 c4 10             	add    esp,0x10
c001473b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014742:	74 11                	je     c0014755 <CPU::setupFeatures()+0xc7>
c0014744:	c7 44 24 10 17 65 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026517
c001474c:	83 c4 08             	add    esp,0x8
c001474f:	5b                   	pop    ebx
c0014750:	e9 7e 89 ff ff       	jmp    c000d0d3 <Dbg::kprintf(char const*, ...)>
c0014755:	83 c4 08             	add    esp,0x8
c0014758:	5b                   	pop    ebx
c0014759:	c3                   	ret    

c001475a <CPU::open(int, int, void*)>:
c001475a:	57                   	push   edi
c001475b:	56                   	push   esi
c001475c:	53                   	push   ebx
c001475d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014761:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014765:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001476b:	83 ec 0c             	sub    esp,0xc
c001476e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014774:	68 21 65 02 c0       	push   0xc0026521
c0014779:	e8 c3 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001477e:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014784:	89 04 24             	mov    DWORD PTR [esp],eax
c0014787:	e8 de 4e ff ff       	call   c000966a <GDT::setup()>
c001478c:	c7 04 24 33 65 02 c0 	mov    DWORD PTR [esp],0xc0026533
c0014793:	e8 a9 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014798:	83 c4 0c             	add    esp,0xc
c001479b:	6a 00                	push   0x0
c001479d:	68 ef be ad de       	push   0xdeadbeef
c00147a2:	57                   	push   edi
c00147a3:	e8 8c 6f ff ff       	call   c000b734 <TSS::setup(unsigned long, unsigned long)>
c00147a8:	c7 04 24 45 65 02 c0 	mov    DWORD PTR [esp],0xc0026545
c00147af:	e8 8d 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147b7:	e8 58 6f ff ff       	call   c000b714 <TSS::flush()>
c00147bc:	c7 04 24 59 65 02 c0 	mov    DWORD PTR [esp],0xc0026559
c00147c3:	e8 79 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147c8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00147ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00147d1:	e8 74 51 ff ff       	call   c000994a <IDT::setup()>
c00147d6:	c7 04 24 6b 65 02 c0 	mov    DWORD PTR [esp],0xc002656b
c00147dd:	e8 5f 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147e2:	b8 00 04 00 00       	mov    eax,0x400
c00147e7:	0f 23 f8             	mov    db7,eax
c00147ea:	c7 04 24 89 65 02 c0 	mov    DWORD PTR [esp],0xc0026589
c00147f1:	e8 4b 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147f6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014800:	e8 99 5c ff ff       	call   c000a49e <Phys::allocatePage()>
c0014805:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001480b:	89 30                	mov    DWORD PTR [eax],esi
c001480d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014813:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014816:	c7 04 24 ab 65 02 c0 	mov    DWORD PTR [esp],0xc00265ab
c001481d:	e8 1f 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014822:	58                   	pop    eax
c0014823:	5a                   	pop    edx
c0014824:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001482a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001482e:	e8 fb 7e ff ff       	call   c000c72e <VAS::setCPUSpecific(unsigned long)>
c0014833:	c7 04 24 d3 65 02 c0 	mov    DWORD PTR [esp],0xc00265d3
c001483a:	e8 02 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001483f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014842:	e8 79 f3 ff ff       	call   c0013bc0 <CPU::detectFeatures()>
c0014847:	c7 04 24 f6 65 02 c0 	mov    DWORD PTR [esp],0xc00265f6
c001484e:	e8 ee 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014853:	e8 f7 b2 ff ff       	call   c000fb4f <setupInterruptController()>
c0014858:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001485e:	c7 04 24 1a 66 02 c0 	mov    DWORD PTR [esp],0xc002661a
c0014865:	e8 d7 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001486a:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c001486f:	83 e0 10             	and    eax,0x10
c0014872:	83 f8 01             	cmp    eax,0x1
c0014875:	19 c0                	sbb    eax,eax
c0014877:	83 e0 46             	and    eax,0x46
c001487a:	83 c0 1e             	add    eax,0x1e
c001487d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014880:	e8 eb c8 ff ff       	call   c0011170 <setupTimer(int)>
c0014885:	83 c4 10             	add    esp,0x10
c0014888:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001488e:	f6 05 e0 8b 02 c0 20 	test   BYTE PTR ds:0xc0028be0,0x20
c0014895:	74 18                	je     c00148af <CPU::open(int, int, void*)+0x155>
c0014897:	83 ec 0c             	sub    esp,0xc
c001489a:	68 35 66 02 c0       	push   0xc0026635
c001489f:	e8 9d 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00148a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148a7:	e8 e2 fd ff ff       	call   c001468e <CPU::setupFeatures()>
c00148ac:	83 c4 10             	add    esp,0x10
c00148af:	83 ec 0c             	sub    esp,0xc
c00148b2:	68 50 66 02 c0       	push   0xc0026650
c00148b7:	e8 85 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00148bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148bf:	e8 5c f0 ff ff       	call   c0013920 <CPU::displayFeatures()>
c00148c4:	83 c4 10             	add    esp,0x10
c00148c7:	31 c0                	xor    eax,eax
c00148c9:	5b                   	pop    ebx
c00148ca:	5e                   	pop    esi
c00148cb:	5f                   	pop    edi
c00148cc:	c3                   	ret    
c00148cd:	90                   	nop

c00148ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00148ce:	57                   	push   edi
c00148cf:	56                   	push   esi
c00148d0:	53                   	push   ebx
c00148d1:	51                   	push   ecx
c00148d2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00148d6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00148d9:	0f 02 c0             	lar    eax,ax
c00148dc:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00148df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00148e3:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00148e6:	88 ca                	mov    dl,cl
c00148e8:	c0 ea 06             	shr    dl,0x6
c00148eb:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00148ef:	89 ca                	mov    edx,ecx
c00148f1:	66 c1 ea 03          	shr    dx,0x3
c00148f5:	83 e2 07             	and    edx,0x7
c00148f8:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00148fd:	88 17                	mov    BYTE PTR [edi],dl
c00148ff:	0f 84 a6 01 00 00    	je     c0014aab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014905:	83 e1 07             	and    ecx,0x7
c0014908:	80 f9 04             	cmp    cl,0x4
c001490b:	0f 84 98 00 00 00    	je     c00149a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014911:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014916:	0f 95 c0             	setne  al
c0014919:	80 f9 05             	cmp    cl,0x5
c001491c:	0f 95 c2             	setne  dl
c001491f:	08 c2                	or     dl,al
c0014921:	74 79                	je     c001499c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014923:	84 c9                	test   cl,cl
c0014925:	75 05                	jne    c001492c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014927:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001492a:	eb 3c                	jmp    c0014968 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001492c:	80 f9 01             	cmp    cl,0x1
c001492f:	75 05                	jne    c0014936 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0014931:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014934:	eb 32                	jmp    c0014968 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014936:	80 f9 02             	cmp    cl,0x2
c0014939:	75 05                	jne    c0014940 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001493b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001493e:	eb 28                	jmp    c0014968 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014940:	31 c0                	xor    eax,eax
c0014942:	80 f9 03             	cmp    cl,0x3
c0014945:	75 05                	jne    c001494c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014947:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001494a:	eb 1c                	jmp    c0014968 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001494c:	80 f9 05             	cmp    cl,0x5
c001494f:	75 05                	jne    c0014956 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0014951:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014954:	eb 12                	jmp    c0014968 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014956:	80 f9 06             	cmp    cl,0x6
c0014959:	75 05                	jne    c0014960 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001495b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001495e:	eb 08                	jmp    c0014968 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014960:	80 f9 07             	cmp    cl,0x7
c0014963:	75 03                	jne    c0014968 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014965:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014968:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001496d:	75 10                	jne    c001497f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001496f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0014973:	b9 03 00 00 00       	mov    ecx,0x3
c0014978:	01 d0                	add    eax,edx
c001497a:	e9 37 01 00 00       	jmp    c0014ab6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001497f:	b9 02 00 00 00       	mov    ecx,0x2
c0014984:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0014989:	0f 85 27 01 00 00    	jne    c0014ab6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001498f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0014992:	b9 06 00 00 00       	mov    ecx,0x6
c0014997:	e9 1a 01 00 00       	jmp    c0014ab6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001499c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001499f:	b9 06 00 00 00       	mov    ecx,0x6
c00149a4:	e9 0f 01 00 00       	jmp    c0014ab8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00149a9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00149ac:	88 ca                	mov    dl,cl
c00149ae:	c0 ea 06             	shr    dl,0x6
c00149b1:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00149b5:	89 ca                	mov    edx,ecx
c00149b7:	66 c1 ea 03          	shr    dx,0x3
c00149bb:	83 e2 07             	and    edx,0x7
c00149be:	80 e1 07             	and    cl,0x7
c00149c1:	75 05                	jne    c00149c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00149c3:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00149c6:	eb 4c                	jmp    c0014a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149c8:	80 f9 01             	cmp    cl,0x1
c00149cb:	75 05                	jne    c00149d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00149cd:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00149d0:	eb 42                	jmp    c0014a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149d2:	80 f9 02             	cmp    cl,0x2
c00149d5:	75 05                	jne    c00149dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00149d7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00149da:	eb 38                	jmp    c0014a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149dc:	80 f9 03             	cmp    cl,0x3
c00149df:	75 05                	jne    c00149e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00149e1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00149e4:	eb 2e                	jmp    c0014a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149e6:	80 f9 04             	cmp    cl,0x4
c00149e9:	75 12                	jne    c00149fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00149eb:	f6 c4 60             	test   ah,0x60
c00149ee:	75 08                	jne    c00149f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00149f0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00149f3:	8d 78 14             	lea    edi,[eax+0x14]
c00149f6:	eb 1c                	jmp    c0014a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149f8:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00149fb:	eb 17                	jmp    c0014a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149fd:	80 f9 05             	cmp    cl,0x5
c0014a00:	75 05                	jne    c0014a07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0014a02:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014a05:	eb 0d                	jmp    c0014a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a07:	80 f9 06             	cmp    cl,0x6
c0014a0a:	75 05                	jne    c0014a11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014a0c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014a0f:	eb 03                	jmp    c0014a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a11:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014a14:	84 d2                	test   dl,dl
c0014a16:	75 05                	jne    c0014a1d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014a18:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014a1b:	eb 3c                	jmp    c0014a59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a1d:	80 fa 01             	cmp    dl,0x1
c0014a20:	75 05                	jne    c0014a27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014a22:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014a25:	eb 32                	jmp    c0014a59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a27:	80 fa 02             	cmp    dl,0x2
c0014a2a:	75 05                	jne    c0014a31 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0014a2c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014a2f:	eb 28                	jmp    c0014a59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a31:	80 fa 03             	cmp    dl,0x3
c0014a34:	75 05                	jne    c0014a3b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014a36:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014a39:	eb 1e                	jmp    c0014a59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a3b:	31 c0                	xor    eax,eax
c0014a3d:	80 fa 04             	cmp    dl,0x4
c0014a40:	74 17                	je     c0014a59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a42:	80 fa 05             	cmp    dl,0x5
c0014a45:	75 05                	jne    c0014a4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014a47:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014a4a:	eb 0d                	jmp    c0014a59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a4c:	80 fa 06             	cmp    dl,0x6
c0014a4f:	75 05                	jne    c0014a56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0014a51:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014a54:	eb 03                	jmp    c0014a59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a56:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014a59:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014a5e:	0f 94 c2             	sete   dl
c0014a61:	80 f9 05             	cmp    cl,0x5
c0014a64:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014a68:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0014a6d:	d3 e0                	shl    eax,cl
c0014a6f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0014a73:	74 0a                	je     c0014a7f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0014a75:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014a78:	b9 07 00 00 00       	mov    ecx,0x7
c0014a7d:	eb 37                	jmp    c0014ab6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014a7f:	01 f8                	add    eax,edi
c0014a81:	b9 03 00 00 00       	mov    ecx,0x3
c0014a86:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014a8b:	74 2b                	je     c0014ab8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a8d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014a92:	75 0d                	jne    c0014aa1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0014a94:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014a98:	01 c8                	add    eax,ecx
c0014a9a:	b9 04 00 00 00       	mov    ecx,0x4
c0014a9f:	eb 17                	jmp    c0014ab8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014aa1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014aa4:	b9 07 00 00 00       	mov    ecx,0x7
c0014aa9:	eb 0d                	jmp    c0014ab8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014aab:	b9 02 00 00 00       	mov    ecx,0x2
c0014ab0:	b2 01                	mov    dl,0x1
c0014ab2:	31 c0                	xor    eax,eax
c0014ab4:	eb 02                	jmp    c0014ab8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014ab6:	31 d2                	xor    edx,edx
c0014ab8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014abc:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014abe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014ac2:	88 11                	mov    BYTE PTR [ecx],dl
c0014ac4:	5a                   	pop    edx
c0014ac5:	5b                   	pop    ebx
c0014ac6:	5e                   	pop    esi
c0014ac7:	5f                   	pop    edi
c0014ac8:	c3                   	ret    

c0014ac9 <Krnl::smpEntry()>:
c0014ac9:	eb fe                	jmp    c0014ac9 <Krnl::smpEntry()>

c0014acb <Krnl::startCPU(int)>:
c0014acb:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0014ad0:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014ad7:	0f 84 36 01 00 00    	je     c0014c13 <Krnl::startCPU(int)+0x148>
c0014add:	53                   	push   ebx
c0014ade:	83 ec 10             	sub    esp,0x10
c0014ae1:	fa                   	cli    
c0014ae2:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0014ae8:	6a 1b                	push   0x1b
c0014aea:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c0014af0:	e8 89 47 ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0014af5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014afa:	89 c3                	mov    ebx,eax
c0014afc:	58                   	pop    eax
c0014afd:	5a                   	pop    edx
c0014afe:	53                   	push   ebx
c0014aff:	68 98 66 02 c0       	push   0xc0026698
c0014b04:	e8 ca 85 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0014b09:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b17:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b21:	c1 e0 18             	shl    eax,0x18
c0014b24:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014b2a:	83 c4 10             	add    esp,0x10
c0014b2d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014b33:	09 c2                	or     edx,eax
c0014b35:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014b3b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014b41:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014b47:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014b4d:	80 cd c5             	or     ch,0xc5
c0014b50:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014b56:	f3 90                	pause  
c0014b58:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014b5a:	0f ba e1 0c          	bt     ecx,0xc
c0014b5e:	72 f6                	jb     c0014b56 <Krnl::startCPU(int)+0x8b>
c0014b60:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014b66:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014b6c:	09 c1                	or     ecx,eax
c0014b6e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014b74:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014b7a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014b80:	80 cd 85             	or     ch,0x85
c0014b83:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014b89:	f3 90                	pause  
c0014b8b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014b8d:	0f ba e1 0c          	bt     ecx,0xc
c0014b91:	72 f6                	jb     c0014b89 <Krnl::startCPU(int)+0xbe>
c0014b93:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b9d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014ba3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014ba9:	09 c1                	or     ecx,eax
c0014bab:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014bb1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014bb7:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014bbd:	81 c9 02 06 00 00    	or     ecx,0x602
c0014bc3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014bc9:	f3 90                	pause  
c0014bcb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014bcd:	0f ba e1 0c          	bt     ecx,0xc
c0014bd1:	72 f6                	jb     c0014bc9 <Krnl::startCPU(int)+0xfe>
c0014bd3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014bdd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014be3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014be9:	09 c8                	or     eax,ecx
c0014beb:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014bf1:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014bf7:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014bfc:	0d 02 06 00 00       	or     eax,0x602
c0014c01:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014c07:	f3 90                	pause  
c0014c09:	8b 02                	mov    eax,DWORD PTR [edx]
c0014c0b:	0f ba e0 0c          	bt     eax,0xc
c0014c0f:	72 f6                	jb     c0014c07 <Krnl::startCPU(int)+0x13c>
c0014c11:	eb fe                	jmp    c0014c11 <Krnl::startCPU(int)+0x146>
c0014c13:	c3                   	ret    

c0014c14 <Krnl::startCPUs()>:
c0014c14:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0014c19:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014c1f:	88 c2                	mov    dl,al
c0014c21:	83 e2 0a             	and    edx,0xa
c0014c24:	80 fa 0a             	cmp    dl,0xa
c0014c27:	75 09                	jne    c0014c32 <Krnl::startCPUs()+0x1e>
c0014c29:	a8 01                	test   al,0x1
c0014c2b:	74 05                	je     c0014c32 <Krnl::startCPUs()+0x1e>
c0014c2d:	e9 69 b5 fe ff       	jmp    c000019b <prepareTramp>
c0014c32:	c3                   	ret    
c0014c33:	90                   	nop

c0014c34 <EnvVarContainer::getEnv(char const*)>:
c0014c34:	57                   	push   edi
c0014c35:	56                   	push   esi
c0014c36:	53                   	push   ebx
c0014c37:	31 db                	xor    ebx,ebx
c0014c39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c3d:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014c3f:	7e 2b                	jle    c0014c6c <EnvVarContainer::getEnv(char const*)+0x38>
c0014c41:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014c48:	50                   	push   eax
c0014c49:	50                   	push   eax
c0014c4a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c4d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014c50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c54:	e8 83 bb fe ff       	call   c00007dc <strcmp>
c0014c59:	83 c4 10             	add    esp,0x10
c0014c5c:	85 c0                	test   eax,eax
c0014c5e:	75 09                	jne    c0014c69 <EnvVarContainer::getEnv(char const*)+0x35>
c0014c60:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c63:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014c67:	eb 05                	jmp    c0014c6e <EnvVarContainer::getEnv(char const*)+0x3a>
c0014c69:	43                   	inc    ebx
c0014c6a:	eb d1                	jmp    c0014c3d <EnvVarContainer::getEnv(char const*)+0x9>
c0014c6c:	31 c0                	xor    eax,eax
c0014c6e:	5b                   	pop    ebx
c0014c6f:	5e                   	pop    esi
c0014c70:	5f                   	pop    edi
c0014c71:	c3                   	ret    

c0014c72 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014c72:	55                   	push   ebp
c0014c73:	57                   	push   edi
c0014c74:	56                   	push   esi
c0014c75:	53                   	push   ebx
c0014c76:	83 ec 28             	sub    esp,0x28
c0014c79:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014c7d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014c81:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014c85:	56                   	push   esi
c0014c86:	e8 25 ba fe ff       	call   c00006b0 <strlen>
c0014c8b:	40                   	inc    eax
c0014c8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c8f:	e8 53 51 ff ff       	call   c0009de7 <malloc>
c0014c94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c9b:	e8 10 ba fe ff       	call   c00006b0 <strlen>
c0014ca0:	40                   	inc    eax
c0014ca1:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ca4:	e8 3e 51 ff ff       	call   c0009de7 <malloc>
c0014ca9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014cb0:	e8 fb b9 fe ff       	call   c00006b0 <strlen>
c0014cb5:	83 c4 0c             	add    esp,0xc
c0014cb8:	40                   	inc    eax
c0014cb9:	50                   	push   eax
c0014cba:	6a 00                	push   0x0
c0014cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014cc0:	e8 cf b9 fe ff       	call   c0000694 <memset>
c0014cc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cc8:	e8 e3 b9 fe ff       	call   c00006b0 <strlen>
c0014ccd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014cd1:	8d 48 01             	lea    ecx,[eax+0x1]
c0014cd4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014cd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cd9:	89 de                	mov    esi,ebx
c0014cdb:	e8 d0 b9 fe ff       	call   c00006b0 <strlen>
c0014ce0:	83 c4 0c             	add    esp,0xc
c0014ce3:	40                   	inc    eax
c0014ce4:	50                   	push   eax
c0014ce5:	6a 00                	push   0x0
c0014ce7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ceb:	e8 a4 b9 fe ff       	call   c0000694 <memset>
c0014cf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cf3:	e8 b8 b9 fe ff       	call   c00006b0 <strlen>
c0014cf8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014cfc:	8d 48 01             	lea    ecx,[eax+0x1]
c0014cff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d01:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014d04:	40                   	inc    eax
c0014d05:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014d08:	c1 e0 03             	shl    eax,0x3
c0014d0b:	5a                   	pop    edx
c0014d0c:	59                   	pop    ecx
c0014d0d:	50                   	push   eax
c0014d0e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014d11:	e8 bd 50 ff ff       	call   c0009dd3 <realloc>
c0014d16:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014d1a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014d1d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014d20:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014d24:	b9 08 00 00 00       	mov    ecx,0x8
c0014d29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d2b:	83 c4 2c             	add    esp,0x2c
c0014d2e:	5b                   	pop    ebx
c0014d2f:	5e                   	pop    esi
c0014d30:	5f                   	pop    edi
c0014d31:	5d                   	pop    ebp
c0014d32:	c3                   	ret    
c0014d33:	90                   	nop

c0014d34 <EnvVarContainer::deleteEnv(char const*)>:
c0014d34:	c3                   	ret    
c0014d35:	90                   	nop

c0014d36 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014d36:	55                   	push   ebp
c0014d37:	57                   	push   edi
c0014d38:	56                   	push   esi
c0014d39:	53                   	push   ebx
c0014d3a:	81 ec 38 01 00 00    	sub    esp,0x138
c0014d40:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014d47:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014d4e:	68 14 01 00 00       	push   0x114
c0014d53:	e8 8f 50 ff ff       	call   c0009de7 <malloc>
c0014d58:	83 c4 0c             	add    esp,0xc
c0014d5b:	89 c3                	mov    ebx,eax
c0014d5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d60:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014d67:	50                   	push   eax
c0014d68:	e8 d1 88 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0014d6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d70:	e8 11 8c ff ff       	call   c000d986 <File::exists()>
c0014d75:	83 c4 10             	add    esp,0x10
c0014d78:	84 c0                	test   al,al
c0014d7a:	75 31                	jne    c0014dad <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014d7c:	50                   	push   eax
c0014d7d:	50                   	push   eax
c0014d7e:	6a 12                	push   0x12
c0014d80:	53                   	push   ebx
c0014d81:	e8 92 89 ff ff       	call   c000d718 <File::open(FileOpenMode)>
c0014d86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d88:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014d8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d8e:	e8 1d b9 fe ff       	call   c00006b0 <strlen>
c0014d93:	5a                   	pop    edx
c0014d94:	31 d2                	xor    edx,edx
c0014d96:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014d9a:	51                   	push   ecx
c0014d9b:	56                   	push   esi
c0014d9c:	52                   	push   edx
c0014d9d:	50                   	push   eax
c0014d9e:	53                   	push   ebx
c0014d9f:	ff d7                	call   edi
c0014da1:	83 c4 14             	add    esp,0x14
c0014da4:	53                   	push   ebx
c0014da5:	e8 cc 89 ff ff       	call   c000d776 <File::close()>
c0014daa:	83 c4 10             	add    esp,0x10
c0014dad:	56                   	push   esi
c0014dae:	31 f6                	xor    esi,esi
c0014db0:	68 00 01 00 00       	push   0x100
c0014db5:	6a 00                	push   0x0
c0014db7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014dbb:	50                   	push   eax
c0014dbc:	e8 d3 b8 fe ff       	call   c0000694 <memset>
c0014dc1:	5f                   	pop    edi
c0014dc2:	58                   	pop    eax
c0014dc3:	6a 01                	push   0x1
c0014dc5:	53                   	push   ebx
c0014dc6:	e8 4d 89 ff ff       	call   c000d718 <File::open(FileOpenMode)>
c0014dcb:	83 c4 10             	add    esp,0x10
c0014dce:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014dd6:	83 ec 0c             	sub    esp,0xc
c0014dd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ddb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014ddf:	51                   	push   ecx
c0014de0:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014de4:	52                   	push   edx
c0014de5:	6a 00                	push   0x0
c0014de7:	6a 01                	push   0x1
c0014de9:	53                   	push   ebx
c0014dea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ded:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014df1:	83 c4 20             	add    esp,0x20
c0014df4:	3c 0d                	cmp    al,0xd
c0014df6:	0f 84 09 01 00 00    	je     c0014f05 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014dfc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014e01:	0f 84 ef 00 00 00    	je     c0014ef6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014e07:	3c 0a                	cmp    al,0xa
c0014e09:	74 13                	je     c0014e1e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014e0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e10:	74 0c                	je     c0014e1e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014e12:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014e18:	0f 8e d8 00 00 00    	jle    c0014ef6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014e1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e22:	83 ec 0c             	sub    esp,0xc
c0014e25:	8d 78 01             	lea    edi,[eax+0x1]
c0014e28:	57                   	push   edi
c0014e29:	e8 b9 4f ff ff       	call   c0009de7 <malloc>
c0014e2e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014e32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014e36:	8d 56 04             	lea    edx,[esi+0x4]
c0014e39:	89 14 24             	mov    DWORD PTR [esp],edx
c0014e3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014e40:	e8 a2 4f ff ff       	call   c0009de7 <malloc>
c0014e45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e49:	83 c4 0c             	add    esp,0xc
c0014e4c:	57                   	push   edi
c0014e4d:	6a 00                	push   0x0
c0014e4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014e53:	e8 3c b8 fe ff       	call   c0000694 <memset>
c0014e58:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014e5c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014e60:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014e64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e66:	83 c4 0c             	add    esp,0xc
c0014e69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e6d:	52                   	push   edx
c0014e6e:	6a 00                	push   0x0
c0014e70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014e74:	e8 1b b8 fe ff       	call   c0000694 <memset>
c0014e79:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014e7d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014e81:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e84:	e8 27 b8 fe ff       	call   c00006b0 <strlen>
c0014e89:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014e8d:	89 c1                	mov    ecx,eax
c0014e8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e94:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014e97:	40                   	inc    eax
c0014e98:	83 c4 10             	add    esp,0x10
c0014e9b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014e9e:	85 d2                	test   edx,edx
c0014ea0:	75 0c                	jne    c0014eae <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014ea2:	83 ec 0c             	sub    esp,0xc
c0014ea5:	6a 08                	push   0x8
c0014ea7:	e8 3b 4f ff ff       	call   c0009de7 <malloc>
c0014eac:	eb 0c                	jmp    c0014eba <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014eae:	c1 e0 03             	shl    eax,0x3
c0014eb1:	51                   	push   ecx
c0014eb2:	51                   	push   ecx
c0014eb3:	50                   	push   eax
c0014eb4:	52                   	push   edx
c0014eb5:	e8 19 4f ff ff       	call   c0009dd3 <realloc>
c0014eba:	83 c4 10             	add    esp,0x10
c0014ebd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014ec0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014ec3:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014ec6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014eca:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014ece:	b9 08 00 00 00       	mov    ecx,0x8
c0014ed3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ed5:	31 f6                	xor    esi,esi
c0014ed7:	50                   	push   eax
c0014ed8:	68 00 01 00 00       	push   0x100
c0014edd:	6a 00                	push   0x0
c0014edf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014ee3:	50                   	push   eax
c0014ee4:	e8 ab b7 fe ff       	call   c0000694 <memset>
c0014ee9:	83 c4 10             	add    esp,0x10
c0014eec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ef4:	eb 0f                	jmp    c0014f05 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014ef6:	3c 3d                	cmp    al,0x3d
c0014ef8:	74 07                	je     c0014f01 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014efa:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014efe:	46                   	inc    esi
c0014eff:	eb 04                	jmp    c0014f05 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014f01:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014f05:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014f0a:	0f 85 c6 fe ff ff    	jne    c0014dd6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014f10:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014f16:	5b                   	pop    ebx
c0014f17:	5e                   	pop    esi
c0014f18:	5f                   	pop    edi
c0014f19:	5d                   	pop    ebp
c0014f1a:	c3                   	ret    
c0014f1b:	90                   	nop

c0014f1c <EnvVarContainer::__loadSystem()>:
c0014f1c:	83 ec 10             	sub    esp,0x10
c0014f1f:	68 a0 85 02 c0       	push   0xc00285a0
c0014f24:	68 a9 66 02 c0       	push   0xc00266a9
c0014f29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f2d:	e8 04 fe ff ff       	call   c0014d36 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014f32:	83 c4 1c             	add    esp,0x1c
c0014f35:	c3                   	ret    

c0014f36 <EnvVarContainer::__loadUser()>:
c0014f36:	c3                   	ret    
c0014f37:	90                   	nop

c0014f38 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014f42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014f4a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014f4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014f58:	90                   	nop
c0014f59:	c3                   	ret    

c0014f5a <EnvVarContainer::~EnvVarContainer()>:
c0014f5a:	83 ec 0c             	sub    esp,0xc
c0014f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f64:	85 c0                	test   eax,eax
c0014f66:	74 1d                	je     c0014f85 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f6e:	85 c0                	test   eax,eax
c0014f70:	74 13                	je     c0014f85 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f79:	83 ec 0c             	sub    esp,0xc
c0014f7c:	50                   	push   eax
c0014f7d:	e8 75 4e ff ff       	call   c0009df7 <free>
c0014f82:	83 c4 10             	add    esp,0x10
c0014f85:	90                   	nop
c0014f86:	83 c4 0c             	add    esp,0xc
c0014f89:	c3                   	ret    

c0014f8a <Krnl::getEnv(Process*, char const*)>:
c0014f8a:	53                   	push   ebx
c0014f8b:	83 ec 08             	sub    esp,0x8
c0014f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f92:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014f96:	39 05 10 a1 02 c0    	cmp    DWORD PTR ds:0xc002a110,eax
c0014f9c:	74 04                	je     c0014fa2 <Krnl::getEnv(Process*, char const*)+0x18>
c0014f9e:	85 c0                	test   eax,eax
c0014fa0:	75 0b                	jne    c0014fad <Krnl::getEnv(Process*, char const*)+0x23>
c0014fa2:	a1 94 96 02 c0       	mov    eax,ds:0xc0029694
c0014fa7:	85 c0                	test   eax,eax
c0014fa9:	75 19                	jne    c0014fc4 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014fab:	eb 27                	jmp    c0014fd4 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014fad:	52                   	push   edx
c0014fae:	52                   	push   edx
c0014faf:	53                   	push   ebx
c0014fb0:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014fb6:	e8 79 fc ff ff       	call   c0014c34 <EnvVarContainer::getEnv(char const*)>
c0014fbb:	83 c4 10             	add    esp,0x10
c0014fbe:	85 c0                	test   eax,eax
c0014fc0:	75 28                	jne    c0014fea <Krnl::getEnv(Process*, char const*)+0x60>
c0014fc2:	eb de                	jmp    c0014fa2 <Krnl::getEnv(Process*, char const*)+0x18>
c0014fc4:	52                   	push   edx
c0014fc5:	52                   	push   edx
c0014fc6:	53                   	push   ebx
c0014fc7:	50                   	push   eax
c0014fc8:	e8 67 fc ff ff       	call   c0014c34 <EnvVarContainer::getEnv(char const*)>
c0014fcd:	83 c4 10             	add    esp,0x10
c0014fd0:	85 c0                	test   eax,eax
c0014fd2:	75 16                	jne    c0014fea <Krnl::getEnv(Process*, char const*)+0x60>
c0014fd4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014fd8:	a1 98 96 02 c0       	mov    eax,ds:0xc0029698
c0014fdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fe1:	83 c4 08             	add    esp,0x8
c0014fe4:	5b                   	pop    ebx
c0014fe5:	e9 4a fc ff ff       	jmp    c0014c34 <EnvVarContainer::getEnv(char const*)>
c0014fea:	83 c4 08             	add    esp,0x8
c0014fed:	5b                   	pop    ebx
c0014fee:	c3                   	ret    

c0014fef <Krnl::setEnvSystem(char const*, char const*)>:
c0014fef:	83 ec 10             	sub    esp,0x10
c0014ff2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ffa:	ff 35 98 96 02 c0    	push   DWORD PTR ds:0xc0029698
c0015000:	e8 6d fc ff ff       	call   c0014c72 <EnvVarContainer::setEnv(char const*, char const*)>
c0015005:	83 c4 1c             	add    esp,0x1c
c0015008:	c3                   	ret    

c0015009 <Krnl::setEnvUser(char const*, char const*)>:
c0015009:	a1 94 96 02 c0       	mov    eax,ds:0xc0029694
c001500e:	85 c0                	test   eax,eax
c0015010:	74 15                	je     c0015027 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0015012:	83 ec 10             	sub    esp,0x10
c0015015:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015019:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001501d:	50                   	push   eax
c001501e:	e8 4f fc ff ff       	call   c0014c72 <EnvVarContainer::setEnv(char const*, char const*)>
c0015023:	83 c4 1c             	add    esp,0x1c
c0015026:	c3                   	ret    
c0015027:	c3                   	ret    

c0015028 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0015028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001502c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0015032:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015036:	e9 37 fc ff ff       	jmp    c0014c72 <EnvVarContainer::setEnv(char const*, char const*)>

c001503b <Krnl::deleteEnvSystem(char const*)>:
c001503b:	c3                   	ret    

c001503c <Krnl::deleteEnvUser(char const*)>:
c001503c:	c3                   	ret    

c001503d <Krnl::deleteEnvProcess(Process*, char const*)>:
c001503d:	c3                   	ret    

c001503e <Krnl::newProcessEnv(Process*)>:
c001503e:	83 ec 28             	sub    esp,0x28
c0015041:	6a 0c                	push   0xc
c0015043:	e8 9f 4d ff ff       	call   c0009de7 <malloc>
c0015048:	5a                   	pop    edx
c0015049:	59                   	pop    ecx
c001504a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001504e:	50                   	push   eax
c001504f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015053:	e8 e0 fe ff ff       	call   c0014f38 <EnvVarContainer::EnvVarContainer(Process*)>
c0015058:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001505c:	83 c4 2c             	add    esp,0x2c
c001505f:	c3                   	ret    

c0015060 <Krnl::copyProcessEnv(Process*, Process*)>:
c0015060:	57                   	push   edi
c0015061:	56                   	push   esi
c0015062:	53                   	push   ebx
c0015063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015067:	83 ec 0c             	sub    esp,0xc
c001506a:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0015070:	6a 0c                	push   0xc
c0015072:	e8 70 4d ff ff       	call   c0009de7 <malloc>
c0015077:	89 c3                	mov    ebx,eax
c0015079:	58                   	pop    eax
c001507a:	5a                   	pop    edx
c001507b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001507f:	53                   	push   ebx
c0015080:	e8 b3 fe ff ff       	call   c0014f38 <EnvVarContainer::EnvVarContainer(Process*)>
c0015085:	8b 07                	mov    eax,DWORD PTR [edi]
c0015087:	89 03                	mov    DWORD PTR [ebx],eax
c0015089:	c1 e0 03             	shl    eax,0x3
c001508c:	89 04 24             	mov    DWORD PTR [esp],eax
c001508f:	e8 53 4d ff ff       	call   c0009de7 <malloc>
c0015094:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0015097:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0015099:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001509c:	c1 e1 03             	shl    ecx,0x3
c001509f:	89 c7                	mov    edi,eax
c00150a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00150a3:	83 c4 10             	add    esp,0x10
c00150a6:	89 d8                	mov    eax,ebx
c00150a8:	5b                   	pop    ebx
c00150a9:	5e                   	pop    esi
c00150aa:	5f                   	pop    edi
c00150ab:	c3                   	ret    

c00150ac <Krnl::loadSystemEnv()>:
c00150ac:	53                   	push   ebx
c00150ad:	83 ec 14             	sub    esp,0x14
c00150b0:	6a 0c                	push   0xc
c00150b2:	e8 30 4d ff ff       	call   c0009de7 <malloc>
c00150b7:	89 c3                	mov    ebx,eax
c00150b9:	58                   	pop    eax
c00150ba:	5a                   	pop    edx
c00150bb:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c00150c1:	53                   	push   ebx
c00150c2:	e8 71 fe ff ff       	call   c0014f38 <EnvVarContainer::EnvVarContainer(Process*)>
c00150c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150ca:	89 1d 98 96 02 c0    	mov    DWORD PTR ds:0xc0029698,ebx
c00150d0:	e8 47 fe ff ff       	call   c0014f1c <EnvVarContainer::__loadSystem()>
c00150d5:	83 c4 18             	add    esp,0x18
c00150d8:	5b                   	pop    ebx
c00150d9:	c3                   	ret    

c00150da <Krnl::loadUserEnv()>:
c00150da:	53                   	push   ebx
c00150db:	83 ec 14             	sub    esp,0x14
c00150de:	6a 0c                	push   0xc
c00150e0:	e8 02 4d ff ff       	call   c0009de7 <malloc>
c00150e5:	89 c3                	mov    ebx,eax
c00150e7:	58                   	pop    eax
c00150e8:	5a                   	pop    edx
c00150e9:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c00150ef:	53                   	push   ebx
c00150f0:	e8 43 fe ff ff       	call   c0014f38 <EnvVarContainer::EnvVarContainer(Process*)>
c00150f5:	89 1d 94 96 02 c0    	mov    DWORD PTR ds:0xc0029694,ebx
c00150fb:	83 c4 18             	add    esp,0x18
c00150fe:	5b                   	pop    ebx
c00150ff:	c3                   	ret    

c0015100 <Krnl::flushEnv()>:
c0015100:	c3                   	ret    

c0015101 <Krnl::getProcessTotalEnvCount(Process*)>:
c0015101:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015105:	8b 15 94 96 02 c0    	mov    edx,DWORD PTR ds:0xc0029694
c001510b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0015111:	a1 98 96 02 c0       	mov    eax,ds:0xc0029698
c0015116:	8b 00                	mov    eax,DWORD PTR [eax]
c0015118:	03 01                	add    eax,DWORD PTR [ecx]
c001511a:	85 d2                	test   edx,edx
c001511c:	74 02                	je     c0015120 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001511e:	03 02                	add    eax,DWORD PTR [edx]
c0015120:	c3                   	ret    

c0015121 <Krnl::getProcessEnvPair(Process*, int)>:
c0015121:	57                   	push   edi
c0015122:	56                   	push   esi
c0015123:	8b 35 94 96 02 c0    	mov    esi,DWORD PTR ds:0xc0029694
c0015129:	53                   	push   ebx
c001512a:	85 f6                	test   esi,esi
c001512c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015130:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015134:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001513a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001513e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015140:	75 16                	jne    c0015158 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0015142:	39 c2                	cmp    edx,eax
c0015144:	7c 16                	jl     c001515c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0015146:	8b 0d 98 96 02 c0    	mov    ecx,DWORD PTR ds:0xc0029698
c001514c:	8b 31                	mov    esi,DWORD PTR [ecx]
c001514e:	01 c6                	add    esi,eax
c0015150:	39 d6                	cmp    esi,edx
c0015152:	7e 3c                	jle    c0015190 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0015154:	29 c2                	sub    edx,eax
c0015156:	eb 04                	jmp    c001515c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0015158:	39 c2                	cmp    edx,eax
c001515a:	7d 05                	jge    c0015161 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001515c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001515f:	eb 20                	jmp    c0015181 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0015161:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015163:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0015166:	39 d1                	cmp    ecx,edx
c0015168:	7e 04                	jle    c001516e <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001516a:	29 c2                	sub    edx,eax
c001516c:	eb 10                	jmp    c001517e <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001516e:	8b 35 98 96 02 c0    	mov    esi,DWORD PTR ds:0xc0029698
c0015174:	03 0e                	add    ecx,DWORD PTR [esi]
c0015176:	39 d1                	cmp    ecx,edx
c0015178:	7e 16                	jle    c0015190 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001517a:	29 c2                	sub    edx,eax
c001517c:	29 fa                	sub    edx,edi
c001517e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015181:	8d 14 d0             	lea    edx,[eax+edx*8]
c0015184:	8b 02                	mov    eax,DWORD PTR [edx]
c0015186:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015189:	89 03                	mov    DWORD PTR [ebx],eax
c001518b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001518e:	eb 1d                	jmp    c00151ad <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0015190:	83 ec 0c             	sub    esp,0xc
c0015193:	68 cb 66 02 c0       	push   0xc00266cb
c0015198:	e8 18 00 00 00       	call   c00151b5 <Krnl::panic(char const*)>
c001519d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00151a3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00151aa:	83 c4 10             	add    esp,0x10
c00151ad:	89 d8                	mov    eax,ebx
c00151af:	5b                   	pop    ebx
c00151b0:	5e                   	pop    esi
c00151b1:	5f                   	pop    edi
c00151b2:	c2 04 00             	ret    0x4

c00151b5 <Krnl::panic(char const*)>:
c00151b5:	53                   	push   ebx
c00151b6:	83 ec 10             	sub    esp,0x10
c00151b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00151bd:	fa                   	cli    
c00151be:	c6 05 a4 96 02 c0 01 	mov    BYTE PTR ds:0xc00296a4,0x1
c00151c5:	53                   	push   ebx
c00151c6:	68 e5 66 02 c0       	push   0xc00266e5
c00151cb:	e8 03 7f ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00151d0:	83 c4 0c             	add    esp,0xc
c00151d3:	6a 01                	push   0x1
c00151d5:	6a 0f                	push   0xf
c00151d7:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00151dd:	e8 5e 5b ff ff       	call   c000ad40 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151e2:	59                   	pop    ecx
c00151e3:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00151e9:	e8 74 60 ff ff       	call   c000b262 <VgaText::clearScreen()>
c00151ee:	58                   	pop    eax
c00151ef:	5a                   	pop    edx
c00151f0:	68 3c 67 02 c0       	push   0xc002673c
c00151f5:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00151fb:	e8 80 5b ff ff       	call   c000ad80 <VgaText::setTitle(char*)>
c0015200:	83 c4 0c             	add    esp,0xc
c0015203:	6a 01                	push   0x1
c0015205:	6a 0f                	push   0xf
c0015207:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c001520d:	e8 2e 5b ff ff       	call   c000ad40 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015212:	59                   	pop    ecx
c0015213:	58                   	pop    eax
c0015214:	68 fe 66 02 c0       	push   0xc00266fe
c0015219:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c001521f:	e8 ca 61 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c0015224:	58                   	pop    eax
c0015225:	5a                   	pop    edx
c0015226:	68 88 67 02 c0       	push   0xc0026788
c001522b:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015231:	e8 b8 61 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c0015236:	59                   	pop    ecx
c0015237:	58                   	pop    eax
c0015238:	68 1a 67 02 c0       	push   0xc002671a
c001523d:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015243:	e8 a6 61 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c0015248:	58                   	pop    eax
c0015249:	5a                   	pop    edx
c001524a:	53                   	push   ebx
c001524b:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015251:	e8 98 61 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c0015256:	59                   	pop    ecx
c0015257:	5b                   	pop    ebx
c0015258:	68 3a 67 02 c0       	push   0xc002673a
c001525d:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015263:	e8 86 61 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c0015268:	58                   	pop    eax
c0015269:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001526d:	e8 53 32 00 00       	call   c00184c5 <Thr::getDriverNameFromAddress(unsigned long)>
c0015272:	83 c4 10             	add    esp,0x10
c0015275:	85 c0                	test   eax,eax
c0015277:	0f 84 36 01 00 00    	je     c00153b3 <Krnl::panic(char const*)+0x1fe>
c001527d:	83 ec 08             	sub    esp,0x8
c0015280:	89 c3                	mov    ebx,eax
c0015282:	68 c4 67 02 c0       	push   0xc00267c4
c0015287:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c001528d:	e8 5c 61 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c0015292:	59                   	pop    ecx
c0015293:	58                   	pop    eax
c0015294:	68 1a 67 02 c0       	push   0xc002671a
c0015299:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c001529f:	e8 4a 61 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c00152a4:	58                   	pop    eax
c00152a5:	5a                   	pop    edx
c00152a6:	53                   	push   ebx
c00152a7:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00152ad:	e8 3c 61 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c00152b2:	83 c4 10             	add    esp,0x10
c00152b5:	83 ec 08             	sub    esp,0x8
c00152b8:	68 39 67 02 c0       	push   0xc0026739
c00152bd:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00152c3:	e8 26 61 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c00152c8:	58                   	pop    eax
c00152c9:	5a                   	pop    edx
c00152ca:	68 1c 68 02 c0       	push   0xc002681c
c00152cf:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00152d5:	e8 14 61 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c00152da:	59                   	pop    ecx
c00152db:	5b                   	pop    ebx
c00152dc:	68 5c 68 02 c0       	push   0xc002685c
c00152e1:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00152e7:	e8 02 61 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c00152ec:	58                   	pop    eax
c00152ed:	5a                   	pop    edx
c00152ee:	68 25 67 02 c0       	push   0xc0026725
c00152f3:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00152f9:	e8 f0 60 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c00152fe:	59                   	pop    ecx
c00152ff:	5b                   	pop    ebx
c0015300:	68 a0 68 02 c0       	push   0xc00268a0
c0015305:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c001530b:	e8 de 60 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c0015310:	58                   	pop    eax
c0015311:	5a                   	pop    edx
c0015312:	68 3d 67 02 c0       	push   0xc002673d
c0015317:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c001531d:	e8 cc 60 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c0015322:	0f 20 c0             	mov    eax,cr0
c0015325:	59                   	pop    ecx
c0015326:	5b                   	pop    ebx
c0015327:	50                   	push   eax
c0015328:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c001532e:	e8 75 60 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c0015333:	58                   	pop    eax
c0015334:	5a                   	pop    edx
c0015335:	68 47 67 02 c0       	push   0xc0026747
c001533a:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015340:	e8 a9 60 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c0015345:	0f 20 d0             	mov    eax,cr2
c0015348:	59                   	pop    ecx
c0015349:	5b                   	pop    ebx
c001534a:	50                   	push   eax
c001534b:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015351:	e8 52 60 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c0015356:	58                   	pop    eax
c0015357:	5a                   	pop    edx
c0015358:	68 51 67 02 c0       	push   0xc0026751
c001535d:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015363:	e8 86 60 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c0015368:	0f 20 d8             	mov    eax,cr3
c001536b:	59                   	pop    ecx
c001536c:	5b                   	pop    ebx
c001536d:	50                   	push   eax
c001536e:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015374:	e8 2f 60 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c0015379:	58                   	pop    eax
c001537a:	5a                   	pop    edx
c001537b:	68 64 67 02 c0       	push   0xc0026764
c0015380:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015386:	e8 63 60 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c001538b:	0f 20 e0             	mov    eax,cr4
c001538e:	59                   	pop    ecx
c001538f:	5b                   	pop    ebx
c0015390:	50                   	push   eax
c0015391:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015397:	e8 0c 60 ff ff       	call   c000b3a8 <VgaText::putx(unsigned int)>
c001539c:	58                   	pop    eax
c001539d:	5a                   	pop    edx
c001539e:	68 6e 67 02 c0       	push   0xc002676e
c00153a3:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00153a9:	e8 40 60 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c00153ae:	83 c4 10             	add    esp,0x10
c00153b1:	eb fe                	jmp    c00153b1 <Krnl::panic(char const*)+0x1fc>
c00153b3:	51                   	push   ecx
c00153b4:	51                   	push   ecx
c00153b5:	68 f0 67 02 c0       	push   0xc00267f0
c00153ba:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00153c0:	e8 29 60 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c00153c5:	5b                   	pop    ebx
c00153c6:	58                   	pop    eax
c00153c7:	68 1a 67 02 c0       	push   0xc002671a
c00153cc:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00153d2:	e8 17 60 ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c00153d7:	58                   	pop    eax
c00153d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153dd:	5a                   	pop    edx
c00153de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153e1:	83 c0 0c             	add    eax,0xc
c00153e4:	50                   	push   eax
c00153e5:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00153eb:	e8 fe 5f ff ff       	call   c000b3ee <VgaText::puts(char const*)>
c00153f0:	83 c4 10             	add    esp,0x10
c00153f3:	e9 bd fe ff ff       	jmp    c00152b5 <Krnl::panic(char const*)+0x100>

c00153f8 <Krnl::powerThread(void*)>:
c00153f8:	53                   	push   ebx
c00153f9:	83 ec 08             	sub    esp,0x8
c00153fc:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0015401:	48                   	dec    eax
c0015402:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0015407:	75 01                	jne    c001540a <Krnl::powerThread(void*)+0x12>
c0015409:	fb                   	sti    
c001540a:	52                   	push   edx
c001540b:	52                   	push   edx
c001540c:	ff 35 04 97 02 c0    	push   DWORD PTR ds:0xc0029704
c0015412:	68 c6 68 02 c0       	push   0xc00268c6
c0015417:	e8 b7 7c ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001541c:	59                   	pop    ecx
c001541d:	8b 1d f4 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f4
c0015423:	58                   	pop    eax
c0015424:	c6 05 c0 96 02 c0 00 	mov    BYTE PTR ds:0xc00296c0,0x0
c001542b:	53                   	push   ebx
c001542c:	68 d0 68 02 c0       	push   0xc00268d0
c0015431:	e8 9d 7c ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0015436:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001543d:	e8 c2 3d 00 00       	call   c0019204 <sleep(unsigned int)>
c0015442:	a1 04 97 02 c0       	mov    eax,ds:0xc0029704
c0015447:	83 c4 10             	add    esp,0x10
c001544a:	83 c0 0a             	add    eax,0xa
c001544d:	85 db                	test   ebx,ebx
c001544f:	a3 04 97 02 c0       	mov    ds:0xc0029704,eax
c0015454:	74 b4                	je     c001540a <Krnl::powerThread(void*)+0x12>
c0015456:	39 d8                	cmp    eax,ebx
c0015458:	7e b0                	jle    c001540a <Krnl::powerThread(void*)+0x12>
c001545a:	83 ec 0c             	sub    esp,0xc
c001545d:	68 e8 68 02 c0       	push   0xc00268e8
c0015462:	e8 6c 7c ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0015467:	58                   	pop    eax
c0015468:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c001546e:	e8 9f 3e ff ff       	call   c0009312 <Computer::sleep()>
c0015473:	83 c4 10             	add    esp,0x10
c0015476:	eb 92                	jmp    c001540a <Krnl::powerThread(void*)+0x12>

c0015478 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0015478:	57                   	push   edi
c0015479:	b9 09 00 00 00       	mov    ecx,0x9
c001547e:	56                   	push   esi
c001547f:	bf e0 96 02 c0       	mov    edi,0xc00296e0
c0015484:	fc                   	cld    
c0015485:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015489:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001548b:	5e                   	pop    esi
c001548c:	5f                   	pop    edi
c001548d:	c3                   	ret    

c001548e <Krnl::userIOReceived()>:
c001548e:	c7 05 04 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029704,0x0
c0015498:	c3                   	ret    

c0015499 <Krnl::handlePowerButton()>:
c0015499:	83 ec 0c             	sub    esp,0xc
c001549c:	a1 e0 96 02 c0       	mov    eax,ds:0xc00296e0
c00154a1:	83 f8 02             	cmp    eax,0x2
c00154a4:	75 10                	jne    c00154b6 <Krnl::handlePowerButton()+0x1d>
c00154a6:	83 ec 0c             	sub    esp,0xc
c00154a9:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c00154af:	e8 2e 3e ff ff       	call   c00092e2 <Computer::shutdown()>
c00154b4:	eb 11                	jmp    c00154c7 <Krnl::handlePowerButton()+0x2e>
c00154b6:	48                   	dec    eax
c00154b7:	75 11                	jne    c00154ca <Krnl::handlePowerButton()+0x31>
c00154b9:	83 ec 0c             	sub    esp,0xc
c00154bc:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c00154c2:	e8 4b 3e ff ff       	call   c0009312 <Computer::sleep()>
c00154c7:	83 c4 10             	add    esp,0x10
c00154ca:	83 c4 0c             	add    esp,0xc
c00154cd:	c3                   	ret    

c00154ce <Krnl::handleSleepButton()>:
c00154ce:	83 ec 0c             	sub    esp,0xc
c00154d1:	a1 e4 96 02 c0       	mov    eax,ds:0xc00296e4
c00154d6:	83 f8 02             	cmp    eax,0x2
c00154d9:	75 10                	jne    c00154eb <Krnl::handleSleepButton()+0x1d>
c00154db:	83 ec 0c             	sub    esp,0xc
c00154de:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c00154e4:	e8 f9 3d ff ff       	call   c00092e2 <Computer::shutdown()>
c00154e9:	eb 11                	jmp    c00154fc <Krnl::handleSleepButton()+0x2e>
c00154eb:	48                   	dec    eax
c00154ec:	75 11                	jne    c00154ff <Krnl::handleSleepButton()+0x31>
c00154ee:	83 ec 0c             	sub    esp,0xc
c00154f1:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c00154f7:	e8 16 3e ff ff       	call   c0009312 <Computer::sleep()>
c00154fc:	83 c4 10             	add    esp,0x10
c00154ff:	83 c4 0c             	add    esp,0xc
c0015502:	c3                   	ret    

c0015503 <Krnl::setupPowerManager()>:
c0015503:	83 ec 0c             	sub    esp,0xc
c0015506:	c7 05 04 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029704,0x0
c0015510:	68 f0 00 00 00       	push   0xf0
c0015515:	c6 05 c0 96 02 c0 00 	mov    BYTE PTR ds:0xc00296c0,0x0
c001551c:	6a 00                	push   0x0
c001551e:	68 f8 53 01 c0       	push   0xc00153f8
c0015523:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0015529:	e8 b2 37 00 00       	call   c0018ce0 <Process::createThread(void (*)(void*), void*, int)>
c001552e:	c7 05 e0 96 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00296e0,0x2
c0015538:	c7 05 e4 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296e4,0x1
c0015542:	c7 05 e8 96 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00296e8,0x3
c001554c:	c7 05 ec 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296ec,0x0
c0015556:	c7 05 f8 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296f8,0x0
c0015560:	c7 05 f0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296f0,0x0
c001556a:	c7 05 fc 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296fc,0x0
c0015574:	c7 05 f4 96 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00296f4,0x3c
c001557e:	c7 05 00 97 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029700,0x3c
c0015588:	83 c4 1c             	add    esp,0x1c
c001558b:	c3                   	ret    

c001558c <Krnl::initRNG()>:
c001558c:	56                   	push   esi
c001558d:	53                   	push   ebx
c001558e:	52                   	push   edx
c001558f:	80 3d 10 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029710,0x0
c0015596:	74 15                	je     c00155ad <Krnl::initRNG()+0x21>
c0015598:	83 ec 0c             	sub    esp,0xc
c001559b:	68 f5 68 02 c0       	push   0xc00268f5
c00155a0:	e8 10 fc ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00155a5:	83 c4 10             	add    esp,0x10
c00155a8:	e9 b4 00 00 00       	jmp    c0015661 <Krnl::initRNG()+0xd5>
c00155ad:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00155b2:	c7 05 08 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029708,0x0
c00155bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00155c2:	c7 05 0c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002970c,0x0
c00155cc:	f6 80 90 11 00 00 01 	test   BYTE PTR [eax+0x1190],0x1
c00155d3:	74 1f                	je     c00155f4 <Krnl::initRNG()+0x68>
c00155d5:	e8 3f ac fe ff       	call   c0000219 <getRDRAND>
c00155da:	c7 05 08 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029708,0x0
c00155e4:	a3 0c 97 02 c0       	mov    ds:0xc002970c,eax
c00155e9:	e8 2b ac fe ff       	call   c0000219 <getRDRAND>
c00155ee:	09 05 08 97 02 c0    	or     DWORD PTR ds:0xc0029708,eax
c00155f4:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00155f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00155ff:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0015606:	74 10                	je     c0015618 <Krnl::initRNG()+0x8c>
c0015608:	0f 31                	rdtsc  
c001560a:	89 c1                	mov    ecx,eax
c001560c:	31 15 0c 97 02 c0    	xor    DWORD PTR ds:0xc002970c,edx
c0015612:	31 0d 08 97 02 c0    	xor    DWORD PTR ds:0xc0029708,ecx
c0015618:	8b 0d 08 97 02 c0    	mov    ecx,DWORD PTR ds:0xc0029708
c001561e:	8b 1d 0c 97 02 c0    	mov    ebx,DWORD PTR ds:0xc002970c
c0015624:	89 c8                	mov    eax,ecx
c0015626:	8b 35 ec 91 02 c0    	mov    esi,DWORD PTR ds:0xc00291ec
c001562c:	0f a4 d9 11          	shld   ecx,ebx,0x11
c0015630:	c6 05 10 97 02 c0 01 	mov    BYTE PTR ds:0xc0029710,0x1
c0015637:	31 ce                	xor    esi,ecx
c0015639:	0f a4 c3 11          	shld   ebx,eax,0x11
c001563d:	89 f0                	mov    eax,esi
c001563f:	89 da                	mov    edx,ebx
c0015641:	0f ac d0 1b          	shrd   eax,edx,0x1b
c0015645:	0f ac f2 1b          	shrd   edx,esi,0x1b
c0015649:	35 f6 5d 72 45       	xor    eax,0x45725df6
c001564e:	89 d1                	mov    ecx,edx
c0015650:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c0015655:	89 c8                	mov    eax,ecx
c0015657:	35 89 c3 8d 30       	xor    eax,0x308dc389
c001565c:	a3 0c 97 02 c0       	mov    ds:0xc002970c,eax
c0015661:	58                   	pop    eax
c0015662:	5b                   	pop    ebx
c0015663:	5e                   	pop    esi
c0015664:	c3                   	ret    

c0015665 <Krnl::rand()>:
c0015665:	53                   	push   ebx
c0015666:	83 ec 08             	sub    esp,0x8
c0015669:	80 3d 10 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029710,0x0
c0015670:	75 10                	jne    c0015682 <Krnl::rand()+0x1d>
c0015672:	83 ec 0c             	sub    esp,0xc
c0015675:	68 0c 69 02 c0       	push   0xc002690c
c001567a:	e8 36 fb ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001567f:	83 c4 10             	add    esp,0x10
c0015682:	69 05 08 97 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0029708,0x2875
c001568c:	69 0d 0c 97 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002970c,0xa2e7b175
c0015696:	01 c1                	add    ecx,eax
c0015698:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001569d:	f7 25 08 97 02 c0    	mul    DWORD PTR ds:0xc0029708
c00156a3:	01 ca                	add    edx,ecx
c00156a5:	05 ef 04 b5 00       	add    eax,0xb504ef
c00156aa:	83 d2 00             	adc    edx,0x0
c00156ad:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c00156b2:	0f b7 da             	movzx  ebx,dx
c00156b5:	89 1d 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,ebx
c00156bb:	89 da                	mov    edx,ebx
c00156bd:	83 c4 08             	add    esp,0x8
c00156c0:	0f ac d0 10          	shrd   eax,edx,0x10
c00156c4:	5b                   	pop    ebx
c00156c5:	c3                   	ret    
c00156c6:	66 90                	xchg   ax,ax

c00156c8 <Net::switchEndian16(unsigned short)>:
c00156c8:	83 ec 04             	sub    esp,0x4
c00156cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156cf:	66 89 04 24          	mov    WORD PTR [esp],ax
c00156d3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00156d7:	c1 f8 08             	sar    eax,0x8
c00156da:	89 c2                	mov    edx,eax
c00156dc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00156e0:	c1 e0 08             	shl    eax,0x8
c00156e3:	09 d0                	or     eax,edx
c00156e5:	83 c4 04             	add    esp,0x4
c00156e8:	c3                   	ret    
c00156e9:	8d 76 00             	lea    esi,[esi+0x0]

c00156ec <Net::switchEndian32(unsigned int)>:
c00156ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156f0:	c1 e8 18             	shr    eax,0x18
c00156f3:	89 c2                	mov    edx,eax
c00156f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156f9:	c1 e0 08             	shl    eax,0x8
c00156fc:	25 00 00 ff 00       	and    eax,0xff0000
c0015701:	09 c2                	or     edx,eax
c0015703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015707:	c1 e8 08             	shr    eax,0x8
c001570a:	25 00 ff 00 00       	and    eax,0xff00
c001570f:	09 c2                	or     edx,eax
c0015711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015715:	c1 e0 18             	shl    eax,0x18
c0015718:	09 d0                	or     eax,edx
c001571a:	c3                   	ret    
c001571b:	90                   	nop

c001571c <Net::crc32Calc(unsigned char*, int)>:
c001571c:	83 ec 10             	sub    esp,0x10
c001571f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0015724:	75 0a                	jne    c0015730 <Net::crc32Calc(unsigned char*, int)+0x14>
c0015726:	b8 00 00 00 00       	mov    eax,0x0
c001572b:	e9 8c 00 00 00       	jmp    c00157bc <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015730:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015735:	7f 09                	jg     c0015740 <Net::crc32Calc(unsigned char*, int)+0x24>
c0015737:	b8 00 00 00 00       	mov    eax,0x0
c001573c:	eb 7e                	jmp    c00157bc <Net::crc32Calc(unsigned char*, int)+0xa0>
c001573e:	66 90                	xchg   ax,ax
c0015740:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0015748:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015750:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015754:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0015758:	7d 5a                	jge    c00157b4 <Net::crc32Calc(unsigned char*, int)+0x98>
c001575a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001575e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015762:	01 d0                	add    eax,edx
c0015764:	8a 00                	mov    al,BYTE PTR [eax]
c0015766:	0f b6 c0             	movzx  eax,al
c0015769:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001576d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015775:	8d 76 00             	lea    esi,[esi+0x0]
c0015778:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001577d:	7f 2d                	jg     c00157ac <Net::crc32Calc(unsigned char*, int)+0x90>
c001577f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015783:	83 e0 01             	and    eax,0x1
c0015786:	74 10                	je     c0015798 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0015788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001578c:	d1 e8                	shr    eax,1
c001578e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0015793:	eb 0b                	jmp    c00157a0 <Net::crc32Calc(unsigned char*, int)+0x84>
c0015795:	8d 76 00             	lea    esi,[esi+0x0]
c0015798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001579c:	d1 e8                	shr    eax,1
c001579e:	66 90                	xchg   ax,ax
c00157a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157a4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00157a8:	eb ce                	jmp    c0015778 <Net::crc32Calc(unsigned char*, int)+0x5c>
c00157aa:	66 90                	xchg   ax,ax
c00157ac:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00157b0:	eb 9e                	jmp    c0015750 <Net::crc32Calc(unsigned char*, int)+0x34>
c00157b2:	66 90                	xchg   ax,ax
c00157b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157b8:	f7 d0                	not    eax
c00157ba:	66 90                	xchg   ax,ax
c00157bc:	83 c4 10             	add    esp,0x10
c00157bf:	c3                   	ret    

c00157c0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00157c0:	57                   	push   edi
c00157c1:	56                   	push   esi
c00157c2:	53                   	push   ebx
c00157c3:	83 ec 60             	sub    esp,0x60
c00157c6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00157cd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00157d1:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00157d9:	8d 76 00             	lea    esi,[esi+0x0]
c00157dc:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00157e1:	7f 1d                	jg     c0015800 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00157e3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00157ea:	8d 50 01             	lea    edx,[eax+0x1]
c00157ed:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00157f4:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c00157f7:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00157fb:	eb df                	jmp    c00157dc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c00157fd:	8d 76 00             	lea    esi,[esi+0x0]
c0015800:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015807:	8d 50 01             	lea    edx,[eax+0x1]
c001580a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015811:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0015814:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001581b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001581f:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0015823:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015827:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001582f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015833:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015837:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001583b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001583f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015843:	89 c6                	mov    esi,eax
c0015845:	89 d7                	mov    edi,edx
c0015847:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015849:	89 c8                	mov    eax,ecx
c001584b:	89 fa                	mov    edx,edi
c001584d:	89 f3                	mov    ebx,esi
c001584f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015853:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015857:	89 04 24             	mov    DWORD PTR [esp],eax
c001585a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015862:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015869:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001586d:	8d 44 24 78          	lea    eax,[esp+0x78]
c0015871:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015875:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001587d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015881:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015885:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015889:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001588d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015891:	89 c6                	mov    esi,eax
c0015893:	89 d7                	mov    edi,edx
c0015895:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015897:	89 c8                	mov    eax,ecx
c0015899:	89 fa                	mov    edx,edi
c001589b:	89 f3                	mov    ebx,esi
c001589d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00158a1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00158a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00158a9:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00158b1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158b8:	0f b7 c0             	movzx  eax,ax
c00158bb:	c1 f8 08             	sar    eax,0x8
c00158be:	89 c1                	mov    ecx,eax
c00158c0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00158c7:	8d 50 01             	lea    edx,[eax+0x1]
c00158ca:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00158d1:	88 ca                	mov    dl,cl
c00158d3:	88 10                	mov    BYTE PTR [eax],dl
c00158d5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00158dc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00158e3:	8d 48 01             	lea    ecx,[eax+0x1]
c00158e6:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00158ed:	88 10                	mov    BYTE PTR [eax],dl
c00158ef:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00158f3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00158f7:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00158fe:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0015902:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0015906:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001590a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001590e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015912:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015916:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001591a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001591e:	89 c6                	mov    esi,eax
c0015920:	89 d7                	mov    edi,edx
c0015922:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015924:	89 c8                	mov    eax,ecx
c0015926:	89 fa                	mov    edx,edi
c0015928:	89 f3                	mov    ebx,esi
c001592a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001592e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015932:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015936:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001593a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015941:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015948:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001594c:	50                   	push   eax
c001594d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015951:	e8 c6 fd ff ff       	call   c001571c <Net::crc32Calc(unsigned char*, int)>
c0015956:	83 c4 08             	add    esp,0x8
c0015959:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001595d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015961:	c1 e8 18             	shr    eax,0x18
c0015964:	89 c1                	mov    ecx,eax
c0015966:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001596d:	8d 50 01             	lea    edx,[eax+0x1]
c0015970:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015977:	88 ca                	mov    dl,cl
c0015979:	88 10                	mov    BYTE PTR [eax],dl
c001597b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001597f:	c1 e8 10             	shr    eax,0x10
c0015982:	89 c1                	mov    ecx,eax
c0015984:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001598b:	8d 50 01             	lea    edx,[eax+0x1]
c001598e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015995:	88 ca                	mov    dl,cl
c0015997:	88 10                	mov    BYTE PTR [eax],dl
c0015999:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001599d:	c1 e8 08             	shr    eax,0x8
c00159a0:	89 c1                	mov    ecx,eax
c00159a2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159a9:	8d 50 01             	lea    edx,[eax+0x1]
c00159ac:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00159b3:	88 ca                	mov    dl,cl
c00159b5:	88 10                	mov    BYTE PTR [eax],dl
c00159b7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159be:	8d 50 01             	lea    edx,[eax+0x1]
c00159c1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00159c8:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00159cc:	88 10                	mov    BYTE PTR [eax],dl
c00159ce:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00159d2:	83 c4 60             	add    esp,0x60
c00159d5:	5b                   	pop    ebx
c00159d6:	5e                   	pop    esi
c00159d7:	5f                   	pop    edi
c00159d8:	c3                   	ret    
c00159d9:	8d 76 00             	lea    esi,[esi+0x0]

c00159dc <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00159dc:	57                   	push   edi
c00159dd:	56                   	push   esi
c00159de:	53                   	push   ebx
c00159df:	83 ec 70             	sub    esp,0x70
c00159e2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00159e9:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00159ed:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00159f5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00159fc:	83 c0 0e             	add    eax,0xe
c00159ff:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015a03:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015a0e:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015a16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015a1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a22:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015a26:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015a2a:	89 c6                	mov    esi,eax
c0015a2c:	89 d7                	mov    edi,edx
c0015a2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015a30:	89 c8                	mov    eax,ecx
c0015a32:	89 fa                	mov    edx,edi
c0015a34:	89 f3                	mov    ebx,esi
c0015a36:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015a3a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015a3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015a42:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015a4a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015a51:	83 c0 08             	add    eax,0x8
c0015a54:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015a58:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015a63:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0015a6b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015a6f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015a73:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a77:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015a7b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015a7f:	89 c6                	mov    esi,eax
c0015a81:	89 d7                	mov    edi,edx
c0015a83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015a85:	89 c8                	mov    eax,ecx
c0015a87:	89 fa                	mov    edx,edi
c0015a89:	89 f3                	mov    ebx,esi
c0015a8b:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015a8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015a93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015a97:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015a9f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015aa6:	8d 50 01             	lea    edx,[eax+0x1]
c0015aa9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015ab0:	8a 00                	mov    al,BYTE PTR [eax]
c0015ab2:	0f b6 c0             	movzx  eax,al
c0015ab5:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0015aba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015ac1:	8d 50 01             	lea    edx,[eax+0x1]
c0015ac4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015acb:	8a 00                	mov    al,BYTE PTR [eax]
c0015acd:	0f b6 c0             	movzx  eax,al
c0015ad0:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0015ad5:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0015ada:	c1 e0 08             	shl    eax,0x8
c0015add:	89 c2                	mov    edx,eax
c0015adf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015ae3:	09 d0                	or     eax,edx
c0015ae5:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015aec:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015af0:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0015af8:	75 46                	jne    c0015b40 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015afa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b01:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015b04:	66 3d dc 05          	cmp    ax,0x5dc
c0015b08:	77 16                	ja     c0015b20 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0015b0a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b11:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015b14:	0f b7 c0             	movzx  eax,ax
c0015b17:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015b1e:	eb 20                	jmp    c0015b40 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015b20:	83 ec 0c             	sub    esp,0xc
c0015b23:	68 28 69 02 c0       	push   0xc0026928
c0015b28:	e8 a6 75 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0015b2d:	83 c4 10             	add    esp,0x10
c0015b30:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b37:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0015b3b:	e9 18 01 00 00       	jmp    c0015c58 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015b40:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015b47:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015b4e:	8b 12                	mov    edx,DWORD PTR [edx]
c0015b50:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015b5b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015b5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015b63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015b6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015b73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b77:	89 c6                	mov    esi,eax
c0015b79:	89 d7                	mov    edi,edx
c0015b7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015b7d:	89 c8                	mov    eax,ecx
c0015b7f:	89 fa                	mov    edx,edi
c0015b81:	89 f3                	mov    ebx,esi
c0015b83:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015b87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b8e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015b95:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0015b9c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015ba3:	8d 50 01             	lea    edx,[eax+0x1]
c0015ba6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015bad:	8a 00                	mov    al,BYTE PTR [eax]
c0015baf:	0f b6 c0             	movzx  eax,al
c0015bb2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0015bb6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015bbd:	8d 50 01             	lea    edx,[eax+0x1]
c0015bc0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015bc7:	8a 00                	mov    al,BYTE PTR [eax]
c0015bc9:	0f b6 c0             	movzx  eax,al
c0015bcc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015bd0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015bd7:	8d 50 01             	lea    edx,[eax+0x1]
c0015bda:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015be1:	8a 00                	mov    al,BYTE PTR [eax]
c0015be3:	0f b6 c0             	movzx  eax,al
c0015be6:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0015bea:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015bf1:	8d 50 01             	lea    edx,[eax+0x1]
c0015bf4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015bfb:	8a 00                	mov    al,BYTE PTR [eax]
c0015bfd:	0f b6 c0             	movzx  eax,al
c0015c00:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015c04:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015c08:	c1 e0 18             	shl    eax,0x18
c0015c0b:	89 c2                	mov    edx,eax
c0015c0d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015c11:	c1 e0 10             	shl    eax,0x10
c0015c14:	09 c2                	or     edx,eax
c0015c16:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0015c1a:	c1 e0 08             	shl    eax,0x8
c0015c1d:	09 d0                	or     eax,edx
c0015c1f:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015c23:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015c27:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c2e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015c32:	83 e8 04             	sub    eax,0x4
c0015c35:	83 ec 08             	sub    esp,0x8
c0015c38:	50                   	push   eax
c0015c39:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015c3d:	e8 da fa ff ff       	call   c001571c <Net::crc32Calc(unsigned char*, int)>
c0015c42:	83 c4 10             	add    esp,0x10
c0015c45:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015c49:	0f 94 c2             	sete   dl
c0015c4c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015c53:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015c56:	90                   	nop
c0015c57:	90                   	nop
c0015c58:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015c5f:	83 c4 70             	add    esp,0x70
c0015c62:	5b                   	pop    ebx
c0015c63:	5e                   	pop    esi
c0015c64:	5f                   	pop    edi
c0015c65:	c2 04 00             	ret    0x4

c0015c68 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015c68:	55                   	push   ebp
c0015c69:	57                   	push   edi
c0015c6a:	56                   	push   esi
c0015c6b:	53                   	push   ebx
c0015c6c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015c72:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015c79:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015c7b:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015c7e:	80 fb 40             	cmp    bl,0x40
c0015c81:	75 1b                	jne    c0015c9e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015c83:	8a 16                	mov    dl,BYTE PTR [esi]
c0015c85:	84 d2                	test   dl,dl
c0015c87:	0f 84 f1 00 00 00    	je     c0015d7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015c8d:	8d 46 01             	lea    eax,[esi+0x1]
c0015c90:	80 fa 3a             	cmp    dl,0x3a
c0015c93:	74 04                	je     c0015c99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015c95:	89 c6                	mov    esi,eax
c0015c97:	eb ea                	jmp    c0015c83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015c99:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015c9c:	89 c6                	mov    esi,eax
c0015c9e:	50                   	push   eax
c0015c9f:	6a 40                	push   0x40
c0015ca1:	6a 00                	push   0x0
c0015ca3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015ca7:	50                   	push   eax
c0015ca8:	e8 e7 a9 fe ff       	call   c0000694 <memset>
c0015cad:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015cb4:	31 c0                	xor    eax,eax
c0015cb6:	83 c4 10             	add    esp,0x10
c0015cb9:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015cbb:	84 c9                	test   cl,cl
c0015cbd:	0f 84 bb 00 00 00    	je     c0015d7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015cc3:	3d c7 00 00 00       	cmp    eax,0xc7
c0015cc8:	0f 8f b0 00 00 00    	jg     c0015d7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015cce:	80 f9 0a             	cmp    cl,0xa
c0015cd1:	0f 85 98 00 00 00    	jne    c0015d6f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015cd7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015cdc:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015ce0:	a8 df                	test   al,0xdf
c0015ce2:	0f 94 c1             	sete   cl
c0015ce5:	3c 23                	cmp    al,0x23
c0015ce7:	0f 94 c2             	sete   dl
c0015cea:	08 d1                	or     cl,dl
c0015cec:	75 4a                	jne    c0015d38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015cee:	8d 50 f7             	lea    edx,[eax-0x9]
c0015cf1:	80 fa 01             	cmp    dl,0x1
c0015cf4:	76 42                	jbe    c0015d38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015cf6:	3c 5b                	cmp    al,0x5b
c0015cf8:	75 42                	jne    c0015d3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015cfa:	80 fb 40             	cmp    bl,0x40
c0015cfd:	75 39                	jne    c0015d38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015cff:	83 ec 0c             	sub    esp,0xc
c0015d02:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015d06:	52                   	push   edx
c0015d07:	e8 a4 a9 fe ff       	call   c00006b0 <strlen>
c0015d0c:	83 c4 10             	add    esp,0x10
c0015d0f:	83 f8 3f             	cmp    eax,0x3f
c0015d12:	77 6a                	ja     c0015d7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d14:	50                   	push   eax
c0015d15:	50                   	push   eax
c0015d16:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015d1a:	52                   	push   edx
c0015d1b:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015d1f:	52                   	push   edx
c0015d20:	e8 2b aa fe ff       	call   c0000750 <strcpy>
c0015d25:	58                   	pop    eax
c0015d26:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015d2a:	52                   	push   edx
c0015d2b:	e8 80 a9 fe ff       	call   c00006b0 <strlen>
c0015d30:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015d35:	83 c4 10             	add    esp,0x10
c0015d38:	31 d2                	xor    edx,edx
c0015d3a:	eb 3a                	jmp    c0015d76 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015d3c:	80 fb 40             	cmp    bl,0x40
c0015d3f:	74 06                	je     c0015d47 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015d41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015d45:	eb 20                	jmp    c0015d67 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015d47:	50                   	push   eax
c0015d48:	50                   	push   eax
c0015d49:	55                   	push   ebp
c0015d4a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d4e:	50                   	push   eax
c0015d4f:	e8 88 aa fe ff       	call   c00007dc <strcmp>
c0015d54:	83 c4 10             	add    esp,0x10
c0015d57:	85 c0                	test   eax,eax
c0015d59:	75 dd                	jne    c0015d38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d5b:	eb e4                	jmp    c0015d41 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015d5d:	8d 50 01             	lea    edx,[eax+0x1]
c0015d60:	80 f9 3d             	cmp    cl,0x3d
c0015d63:	74 1d                	je     c0015d82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015d65:	89 d0                	mov    eax,edx
c0015d67:	8a 08                	mov    cl,BYTE PTR [eax]
c0015d69:	84 c9                	test   cl,cl
c0015d6b:	75 f0                	jne    c0015d5d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015d6d:	eb 0f                	jmp    c0015d7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d6f:	8d 50 01             	lea    edx,[eax+0x1]
c0015d72:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015d76:	47                   	inc    edi
c0015d77:	89 d0                	mov    eax,edx
c0015d79:	e9 3b ff ff ff       	jmp    c0015cb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015d7e:	31 c0                	xor    eax,eax
c0015d80:	eb 33                	jmp    c0015db5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015d82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015d86:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015d89:	50                   	push   eax
c0015d8a:	50                   	push   eax
c0015d8b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015d8f:	50                   	push   eax
c0015d90:	56                   	push   esi
c0015d91:	e8 46 aa fe ff       	call   c00007dc <strcmp>
c0015d96:	83 c4 10             	add    esp,0x10
c0015d99:	85 c0                	test   eax,eax
c0015d9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d9f:	75 97                	jne    c0015d38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015da1:	51                   	push   ecx
c0015da2:	51                   	push   ecx
c0015da3:	52                   	push   edx
c0015da4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015dab:	e8 a0 a9 fe ff       	call   c0000750 <strcpy>
c0015db0:	83 c4 10             	add    esp,0x10
c0015db3:	b0 01                	mov    al,0x1
c0015db5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015dbb:	5b                   	pop    ebx
c0015dbc:	5e                   	pop    esi
c0015dbd:	5f                   	pop    edi
c0015dbe:	5d                   	pop    ebp
c0015dbf:	c3                   	ret    

c0015dc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015dc0:	57                   	push   edi
c0015dc1:	56                   	push   esi
c0015dc2:	53                   	push   ebx
c0015dc3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015dc9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015dd0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015dd7:	53                   	push   ebx
c0015dd8:	e8 d3 a8 fe ff       	call   c00006b0 <strlen>
c0015ddd:	89 34 24             	mov    DWORD PTR [esp],esi
c0015de0:	89 c7                	mov    edi,eax
c0015de2:	e8 c9 a8 fe ff       	call   c00006b0 <strlen>
c0015de7:	83 c4 10             	add    esp,0x10
c0015dea:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015dee:	3d ff 00 00 00       	cmp    eax,0xff
c0015df3:	0f 87 d3 00 00 00    	ja     c0015ecc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015df9:	57                   	push   edi
c0015dfa:	57                   	push   edi
c0015dfb:	56                   	push   esi
c0015dfc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015e00:	56                   	push   esi
c0015e01:	e8 4a a9 fe ff       	call   c0000750 <strcpy>
c0015e06:	58                   	pop    eax
c0015e07:	5a                   	pop    edx
c0015e08:	68 ca 6c 02 c0       	push   0xc0026cca
c0015e0d:	56                   	push   esi
c0015e0e:	e8 7d aa fe ff       	call   c0000890 <strcat>
c0015e13:	59                   	pop    ecx
c0015e14:	5f                   	pop    edi
c0015e15:	53                   	push   ebx
c0015e16:	56                   	push   esi
c0015e17:	e8 74 aa fe ff       	call   c0000890 <strcat>
c0015e1c:	58                   	pop    eax
c0015e1d:	5a                   	pop    edx
c0015e1e:	68 74 69 02 c0       	push   0xc0026974
c0015e23:	56                   	push   esi
c0015e24:	e8 67 aa fe ff       	call   c0000890 <strcat>
c0015e29:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015e30:	e8 b2 3f ff ff       	call   c0009de7 <malloc>
c0015e35:	83 c4 0c             	add    esp,0xc
c0015e38:	89 c3                	mov    ebx,eax
c0015e3a:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0015e40:	56                   	push   esi
c0015e41:	50                   	push   eax
c0015e42:	e8 f7 77 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0015e47:	83 c4 10             	add    esp,0x10
c0015e4a:	85 db                	test   ebx,ebx
c0015e4c:	74 7e                	je     c0015ecc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015e4e:	51                   	push   ecx
c0015e4f:	51                   	push   ecx
c0015e50:	6a 01                	push   0x1
c0015e52:	53                   	push   ebx
c0015e53:	e8 c0 78 ff ff       	call   c000d718 <File::open(FileOpenMode)>
c0015e58:	83 c4 10             	add    esp,0x10
c0015e5b:	85 c0                	test   eax,eax
c0015e5d:	74 08                	je     c0015e67 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015e5f:	83 ec 0c             	sub    esp,0xc
c0015e62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e64:	53                   	push   ebx
c0015e65:	eb 5f                	jmp    c0015ec6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015e67:	52                   	push   edx
c0015e68:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015e6c:	50                   	push   eax
c0015e6d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015e71:	50                   	push   eax
c0015e72:	53                   	push   ebx
c0015e73:	e8 4c 7b ff ff       	call   c000d9c4 <File::stat(unsigned long long*, bool*)>
c0015e78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e7c:	83 c4 10             	add    esp,0x10
c0015e7f:	89 c1                	mov    ecx,eax
c0015e81:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015e85:	74 31                	je     c0015eb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015e87:	83 ec 0c             	sub    esp,0xc
c0015e8a:	50                   	push   eax
c0015e8b:	e8 57 3f ff ff       	call   c0009de7 <malloc>
c0015e90:	89 c6                	mov    esi,eax
c0015e92:	58                   	pop    eax
c0015e93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e95:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015e99:	52                   	push   edx
c0015e9a:	56                   	push   esi
c0015e9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ea3:	53                   	push   ebx
c0015ea4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ea7:	83 c4 20             	add    esp,0x20
c0015eaa:	85 c0                	test   eax,eax
c0015eac:	75 0a                	jne    c0015eb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015eae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015eb2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015eb6:	74 18                	je     c0015ed0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015eb8:	83 ec 0c             	sub    esp,0xc
c0015ebb:	53                   	push   ebx
c0015ebc:	e8 b5 78 ff ff       	call   c000d776 <File::close()>
c0015ec1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ec3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ec6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ec9:	83 c4 10             	add    esp,0x10
c0015ecc:	31 c0                	xor    eax,eax
c0015ece:	eb 3b                	jmp    c0015f0b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015ed0:	83 ec 0c             	sub    esp,0xc
c0015ed3:	53                   	push   ebx
c0015ed4:	e8 9d 78 ff ff       	call   c000d776 <File::close()>
c0015ed9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015edb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ede:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ee1:	83 c4 0c             	add    esp,0xc
c0015ee4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015eeb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015ef2:	56                   	push   esi
c0015ef3:	e8 70 fd ff ff       	call   c0015c68 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015ef8:	89 34 24             	mov    DWORD PTR [esp],esi
c0015efb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015eff:	e8 f3 3e ff ff       	call   c0009df7 <free>
c0015f04:	83 c4 10             	add    esp,0x10
c0015f07:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015f0b:	81 c4 20 01 00 00    	add    esp,0x120
c0015f11:	5b                   	pop    ebx
c0015f12:	5e                   	pop    esi
c0015f13:	5f                   	pop    edi
c0015f14:	c3                   	ret    

c0015f15 <Reg::getLine(char*, char*, char*)>:
c0015f15:	57                   	push   edi
c0015f16:	56                   	push   esi
c0015f17:	53                   	push   ebx
c0015f18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f1c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015f20:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f24:	57                   	push   edi
c0015f25:	56                   	push   esi
c0015f26:	53                   	push   ebx
c0015f27:	68 79 69 02 c0       	push   0xc0026979
c0015f2c:	e8 8f fe ff ff       	call   c0015dc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f31:	83 c4 10             	add    esp,0x10
c0015f34:	84 c0                	test   al,al
c0015f36:	75 10                	jne    c0015f48 <Reg::getLine(char*, char*, char*)+0x33>
c0015f38:	57                   	push   edi
c0015f39:	56                   	push   esi
c0015f3a:	53                   	push   ebx
c0015f3b:	68 9e 69 02 c0       	push   0xc002699e
c0015f40:	e8 7b fe ff ff       	call   c0015dc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f45:	83 c4 10             	add    esp,0x10
c0015f48:	5b                   	pop    ebx
c0015f49:	5e                   	pop    esi
c0015f4a:	5f                   	pop    edi
c0015f4b:	c3                   	ret    

c0015f4c <Reg::readInt(char*, char*, int*)>:
c0015f4c:	55                   	push   ebp
c0015f4d:	57                   	push   edi
c0015f4e:	56                   	push   esi
c0015f4f:	53                   	push   ebx
c0015f50:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015f56:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015f5a:	57                   	push   edi
c0015f5b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015f62:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015f69:	e8 a7 ff ff ff       	call   c0015f15 <Reg::getLine(char*, char*, char*)>
c0015f6e:	83 c4 10             	add    esp,0x10
c0015f71:	84 c0                	test   al,al
c0015f73:	0f 84 b3 00 00 00    	je     c001602c <Reg::readInt(char*, char*, int*)+0xe0>
c0015f79:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015f7d:	80 fa 2b             	cmp    dl,0x2b
c0015f80:	74 0c                	je     c0015f8e <Reg::readInt(char*, char*, int*)+0x42>
c0015f82:	80 fa 2d             	cmp    dl,0x2d
c0015f85:	75 0e                	jne    c0015f95 <Reg::readInt(char*, char*, int*)+0x49>
c0015f87:	ba 01 00 00 00       	mov    edx,0x1
c0015f8c:	eb 0b                	jmp    c0015f99 <Reg::readInt(char*, char*, int*)+0x4d>
c0015f8e:	ba 01 00 00 00       	mov    edx,0x1
c0015f93:	eb 02                	jmp    c0015f97 <Reg::readInt(char*, char*, int*)+0x4b>
c0015f95:	31 d2                	xor    edx,edx
c0015f97:	31 c0                	xor    eax,eax
c0015f99:	be 0a 00 00 00       	mov    esi,0xa
c0015f9e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015fa3:	75 20                	jne    c0015fc5 <Reg::readInt(char*, char*, int*)+0x79>
c0015fa5:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015fa9:	80 f9 78             	cmp    cl,0x78
c0015fac:	75 0a                	jne    c0015fb8 <Reg::readInt(char*, char*, int*)+0x6c>
c0015fae:	83 c2 02             	add    edx,0x2
c0015fb1:	be 10 00 00 00       	mov    esi,0x10
c0015fb6:	eb 0d                	jmp    c0015fc5 <Reg::readInt(char*, char*, int*)+0x79>
c0015fb8:	80 f9 62             	cmp    cl,0x62
c0015fbb:	75 08                	jne    c0015fc5 <Reg::readInt(char*, char*, int*)+0x79>
c0015fbd:	83 c2 02             	add    edx,0x2
c0015fc0:	be 02 00 00 00       	mov    esi,0x2
c0015fc5:	01 d7                	add    edi,edx
c0015fc7:	31 d2                	xor    edx,edx
c0015fc9:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015fcb:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015fcf:	80 fb 0d             	cmp    bl,0xd
c0015fd2:	0f 94 c3             	sete   bl
c0015fd5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015fda:	0f 94 c1             	sete   cl
c0015fdd:	08 cb                	or     bl,cl
c0015fdf:	75 3a                	jne    c001601b <Reg::readInt(char*, char*, int*)+0xcf>
c0015fe1:	0f af d6             	imul   edx,esi
c0015fe4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015fe9:	83 fe 10             	cmp    esi,0x10
c0015fec:	75 26                	jne    c0016014 <Reg::readInt(char*, char*, int*)+0xc8>
c0015fee:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015ff2:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015ff5:	89 e9                	mov    ecx,ebp
c0015ff7:	80 f9 05             	cmp    cl,0x5
c0015ffa:	77 06                	ja     c0016002 <Reg::readInt(char*, char*, int*)+0xb6>
c0015ffc:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016000:	eb 16                	jmp    c0016018 <Reg::readInt(char*, char*, int*)+0xcc>
c0016002:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016006:	83 e9 61             	sub    ecx,0x61
c0016009:	80 f9 05             	cmp    cl,0x5
c001600c:	77 06                	ja     c0016014 <Reg::readInt(char*, char*, int*)+0xc8>
c001600e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0016012:	eb 04                	jmp    c0016018 <Reg::readInt(char*, char*, int*)+0xcc>
c0016014:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0016018:	47                   	inc    edi
c0016019:	eb ae                	jmp    c0015fc9 <Reg::readInt(char*, char*, int*)+0x7d>
c001601b:	84 c0                	test   al,al
c001601d:	74 02                	je     c0016021 <Reg::readInt(char*, char*, int*)+0xd5>
c001601f:	f7 da                	neg    edx
c0016021:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0016028:	89 10                	mov    DWORD PTR [eax],edx
c001602a:	88 d8                	mov    al,bl
c001602c:	81 c4 ec 00 00 00    	add    esp,0xec
c0016032:	5b                   	pop    ebx
c0016033:	5e                   	pop    esi
c0016034:	5f                   	pop    edi
c0016035:	5d                   	pop    ebp
c0016036:	c3                   	ret    

c0016037 <Reg::readString(char*, char*, char*, int)>:
c0016037:	57                   	push   edi
c0016038:	56                   	push   esi
c0016039:	53                   	push   ebx
c001603a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016040:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0016047:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001604b:	57                   	push   edi
c001604c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016053:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001605a:	e8 b6 fe ff ff       	call   c0015f15 <Reg::getLine(char*, char*, char*)>
c001605f:	83 c4 10             	add    esp,0x10
c0016062:	89 c6                	mov    esi,eax
c0016064:	84 c0                	test   al,al
c0016066:	74 44                	je     c00160ac <Reg::readString(char*, char*, char*, int)+0x75>
c0016068:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001606f:	31 c0                	xor    eax,eax
c0016071:	4a                   	dec    edx
c0016072:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0016075:	84 c9                	test   cl,cl
c0016077:	74 0f                	je     c0016088 <Reg::readString(char*, char*, char*, int)+0x51>
c0016079:	39 c2                	cmp    edx,eax
c001607b:	7e 0b                	jle    c0016088 <Reg::readString(char*, char*, char*, int)+0x51>
c001607d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0016080:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0016085:	40                   	inc    eax
c0016086:	eb ea                	jmp    c0016072 <Reg::readString(char*, char*, char*, int)+0x3b>
c0016088:	83 ec 0c             	sub    esp,0xc
c001608b:	53                   	push   ebx
c001608c:	e8 1f a6 fe ff       	call   c00006b0 <strlen>
c0016091:	83 c4 10             	add    esp,0x10
c0016094:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0016099:	75 11                	jne    c00160ac <Reg::readString(char*, char*, char*, int)+0x75>
c001609b:	83 ec 0c             	sub    esp,0xc
c001609e:	53                   	push   ebx
c001609f:	e8 0c a6 fe ff       	call   c00006b0 <strlen>
c00160a4:	83 c4 10             	add    esp,0x10
c00160a7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00160ac:	81 c4 d0 00 00 00    	add    esp,0xd0
c00160b2:	89 f0                	mov    eax,esi
c00160b4:	5b                   	pop    ebx
c00160b5:	5e                   	pop    esi
c00160b6:	5f                   	pop    edi
c00160b7:	c3                   	ret    

c00160b8 <Reg::readBool(char*, char*, bool*)>:
c00160b8:	83 ec 20             	sub    esp,0x20
c00160bb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00160bf:	50                   	push   eax
c00160c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160c8:	e8 7f fe ff ff       	call   c0015f4c <Reg::readInt(char*, char*, int*)>
c00160cd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00160d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00160d6:	0f 95 02             	setne  BYTE PTR [edx]
c00160d9:	83 c4 2c             	add    esp,0x2c
c00160dc:	c3                   	ret    

c00160dd <Reg::readBoolWithDefault(char*, char*, bool)>:
c00160dd:	53                   	push   ebx
c00160de:	83 ec 1c             	sub    esp,0x1c
c00160e1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00160e5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00160e9:	50                   	push   eax
c00160ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160f2:	e8 c1 ff ff ff       	call   c00160b8 <Reg::readBool(char*, char*, bool*)>
c00160f7:	83 c4 10             	add    esp,0x10
c00160fa:	84 c0                	test   al,al
c00160fc:	74 04                	je     c0016102 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00160fe:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0016102:	88 d8                	mov    al,bl
c0016104:	83 c4 18             	add    esp,0x18
c0016107:	5b                   	pop    ebx
c0016108:	c3                   	ret    

c0016109 <Reg::readIntWithDefault(char*, char*, int)>:
c0016109:	53                   	push   ebx
c001610a:	83 ec 1c             	sub    esp,0x1c
c001610d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016111:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016115:	50                   	push   eax
c0016116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001611a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001611e:	e8 29 fe ff ff       	call   c0015f4c <Reg::readInt(char*, char*, int*)>
c0016123:	83 c4 10             	add    esp,0x10
c0016126:	84 c0                	test   al,al
c0016128:	74 04                	je     c001612e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001612a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001612e:	89 d8                	mov    eax,ebx
c0016130:	83 c4 18             	add    esp,0x18
c0016133:	5b                   	pop    ebx
c0016134:	c3                   	ret    

c0016135 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0016135:	57                   	push   edi
c0016136:	56                   	push   esi
c0016137:	56                   	push   esi
c0016138:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001613c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0016140:	56                   	push   esi
c0016141:	57                   	push   edi
c0016142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001614a:	e8 e8 fe ff ff       	call   c0016037 <Reg::readString(char*, char*, char*, int)>
c001614f:	83 c4 10             	add    esp,0x10
c0016152:	84 c0                	test   al,al
c0016154:	75 1a                	jne    c0016170 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0016156:	51                   	push   ecx
c0016157:	56                   	push   esi
c0016158:	6a 00                	push   0x0
c001615a:	57                   	push   edi
c001615b:	e8 34 a5 fe ff       	call   c0000694 <memset>
c0016160:	8d 4e ff             	lea    ecx,[esi-0x1]
c0016163:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016167:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016169:	83 c4 10             	add    esp,0x10
c001616c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0016170:	89 f8                	mov    eax,edi
c0016172:	5a                   	pop    edx
c0016173:	5e                   	pop    esi
c0016174:	5f                   	pop    edi
c0016175:	c3                   	ret    

c0016176 <Sys::eject(regs*)>:
c0016176:	83 ec 0c             	sub    esp,0xc
c0016179:	83 ca ff             	or     edx,0xffffffff
c001617c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016180:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016183:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016188:	83 e9 41             	sub    ecx,0x41
c001618b:	83 f9 19             	cmp    ecx,0x19
c001618e:	77 18                	ja     c00161a8 <Sys::eject(regs*)+0x32>
c0016190:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c0016197:	85 c9                	test   ecx,ecx
c0016199:	74 0d                	je     c00161a8 <Sys::eject(regs*)+0x32>
c001619b:	83 ec 0c             	sub    esp,0xc
c001619e:	51                   	push   ecx
c001619f:	e8 48 a8 ff ff       	call   c00109ec <LogicalDisk::eject()>
c00161a4:	83 c4 10             	add    esp,0x10
c00161a7:	99                   	cdq    
c00161a8:	83 c4 0c             	add    esp,0xc
c00161ab:	c3                   	ret    

c00161ac <Sys::exit(regs*)>:
c00161ac:	83 ec 18             	sub    esp,0x18
c00161af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161b3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00161b6:	e8 59 36 00 00       	call   c0019814 <terminateTask(int)>
c00161bb:	83 c8 ff             	or     eax,0xffffffff
c00161be:	83 c4 1c             	add    esp,0x1c
c00161c1:	89 c2                	mov    edx,eax
c00161c3:	c3                   	ret    

c00161c4 <Sys::getCwd(regs*)>:
c00161c4:	83 ec 10             	sub    esp,0x10
c00161c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00161cb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00161ce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00161d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161d6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00161d9:	e8 62 72 ff ff       	call   c000d440 <Fs::getcwd(Process*, char*, int)>
c00161de:	83 c4 1c             	add    esp,0x1c
c00161e1:	99                   	cdq    
c00161e2:	c3                   	ret    

c00161e3 <Sys::getPID(regs*)>:
c00161e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00161eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00161ed:	99                   	cdq    
c00161ee:	c3                   	ret    

c00161ef <Sys::getRAMData(regs*)>:
c00161ef:	8b 0d f8 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028bf8
c00161f5:	69 05 f4 8b 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028bf4,0xc8
c00161ff:	99                   	cdq    
c0016200:	f7 f9                	idiv   ecx
c0016202:	c1 e0 18             	shl    eax,0x18
c0016205:	09 c8                	or     eax,ecx
c0016207:	99                   	cdq    
c0016208:	c3                   	ret    

c0016209 <Sys::getVGAPtr(regs*)>:
c0016209:	55                   	push   ebp
c001620a:	57                   	push   edi
c001620b:	56                   	push   esi
c001620c:	53                   	push   ebx
c001620d:	83 ec 18             	sub    esp,0x18
c0016210:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0016214:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0016217:	e8 fc 30 00 00       	call   c0019318 <Thr::processFromPID(int)>
c001621c:	83 c4 10             	add    esp,0x10
c001621f:	89 c1                	mov    ecx,eax
c0016221:	b8 01 00 00 00       	mov    eax,0x1
c0016226:	85 c9                	test   ecx,ecx
c0016228:	74 59                	je     c0016283 <Sys::getVGAPtr(regs*)+0x7a>
c001622a:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0016230:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0016234:	74 0c                	je     c0016242 <Sys::getVGAPtr(regs*)+0x39>
c0016236:	83 ec 0c             	sub    esp,0xc
c0016239:	53                   	push   ebx
c001623a:	e8 a2 4c ff ff       	call   c000aee1 <setActiveTerminal(VgaText*)>
c001623f:	83 c4 10             	add    esp,0x10
c0016242:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016245:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0016248:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001624d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001624f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0016252:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016255:	81 c3 82 00 00 00    	add    ebx,0x82
c001625b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0016261:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016264:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0016267:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001626d:	50                   	push   eax
c001626e:	50                   	push   eax
c001626f:	53                   	push   ebx
c0016270:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016273:	05 a8 0f 00 00       	add    eax,0xfa8
c0016278:	50                   	push   eax
c0016279:	e8 d2 a4 fe ff       	call   c0000750 <strcpy>
c001627e:	83 c4 10             	add    esp,0x10
c0016281:	31 c0                	xor    eax,eax
c0016283:	83 c4 0c             	add    esp,0xc
c0016286:	31 d2                	xor    edx,edx
c0016288:	5b                   	pop    ebx
c0016289:	5e                   	pop    esi
c001628a:	5f                   	pop    edi
c001628b:	5d                   	pop    ebp
c001628c:	c3                   	ret    

c001628d <Sys::loadDLL(regs*)>:
c001628d:	56                   	push   esi
c001628e:	53                   	push   ebx
c001628f:	31 d2                	xor    edx,edx
c0016291:	51                   	push   ecx
c0016292:	b8 01 00 00 00       	mov    eax,0x1
c0016297:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001629b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001629f:	0f 84 8c 00 00 00    	je     c0016331 <Sys::loadDLL(regs*)+0xa4>
c00162a5:	83 ec 0c             	sub    esp,0xc
c00162a8:	68 14 01 00 00       	push   0x114
c00162ad:	e8 35 3b ff ff       	call   c0009de7 <malloc>
c00162b2:	83 c4 0c             	add    esp,0xc
c00162b5:	89 c3                	mov    ebx,eax
c00162b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162bc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00162bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00162c2:	53                   	push   ebx
c00162c3:	e8 76 73 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c00162c8:	83 c4 10             	add    esp,0x10
c00162cb:	31 d2                	xor    edx,edx
c00162cd:	b8 02 00 00 00       	mov    eax,0x2
c00162d2:	85 db                	test   ebx,ebx
c00162d4:	74 5b                	je     c0016331 <Sys::loadDLL(regs*)+0xa4>
c00162d6:	83 ec 0c             	sub    esp,0xc
c00162d9:	53                   	push   ebx
c00162da:	e8 a7 76 ff ff       	call   c000d986 <File::exists()>
c00162df:	83 c4 10             	add    esp,0x10
c00162e2:	84 c0                	test   al,al
c00162e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162e6:	75 11                	jne    c00162f9 <Sys::loadDLL(regs*)+0x6c>
c00162e8:	83 ec 0c             	sub    esp,0xc
c00162eb:	53                   	push   ebx
c00162ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162ef:	83 c4 10             	add    esp,0x10
c00162f2:	b8 03 00 00 00       	mov    eax,0x3
c00162f7:	eb 36                	jmp    c001632f <Sys::loadDLL(regs*)+0xa2>
c00162f9:	83 ec 0c             	sub    esp,0xc
c00162fc:	53                   	push   ebx
c00162fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016300:	58                   	pop    eax
c0016301:	5a                   	pop    edx
c0016302:	6a 00                	push   0x0
c0016304:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016307:	e8 0a 22 00 00       	call   c0018516 <Thr::loadDLL(char const*, bool)>
c001630c:	83 c4 10             	add    esp,0x10
c001630f:	89 c1                	mov    ecx,eax
c0016311:	31 d2                	xor    edx,edx
c0016313:	b8 04 00 00 00       	mov    eax,0x4
c0016318:	85 c9                	test   ecx,ecx
c001631a:	74 15                	je     c0016331 <Sys::loadDLL(regs*)+0xa4>
c001631c:	53                   	push   ebx
c001631d:	53                   	push   ebx
c001631e:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c0016324:	51                   	push   ecx
c0016325:	e8 1d 24 00 00       	call   c0018747 <Thr::executeDLL(unsigned long, void*)>
c001632a:	83 c4 10             	add    esp,0x10
c001632d:	31 c0                	xor    eax,eax
c001632f:	31 d2                	xor    edx,edx
c0016331:	59                   	pop    ecx
c0016332:	5b                   	pop    ebx
c0016333:	5e                   	pop    esi
c0016334:	c3                   	ret    

c0016335 <Sys::read(regs*)>:
c0016335:	57                   	push   edi
c0016336:	56                   	push   esi
c0016337:	53                   	push   ebx
c0016338:	83 ec 10             	sub    esp,0x10
c001633b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001633f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016342:	83 f8 02             	cmp    eax,0x2
c0016345:	77 10                	ja     c0016357 <Sys::read(regs*)+0x22>
c0016347:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001634c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001634f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016355:	eb 0e                	jmp    c0016365 <Sys::read(regs*)+0x30>
c0016357:	83 ec 0c             	sub    esp,0xc
c001635a:	50                   	push   eax
c001635b:	e8 f7 58 ff ff       	call   c000bc57 <getFromFileDescriptor(int)>
c0016360:	83 c4 10             	add    esp,0x10
c0016363:	89 c1                	mov    ecx,eax
c0016365:	83 c8 ff             	or     eax,0xffffffff
c0016368:	85 c9                	test   ecx,ecx
c001636a:	89 c2                	mov    edx,eax
c001636c:	74 28                	je     c0016396 <Sys::read(regs*)+0x61>
c001636e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016376:	31 ff                	xor    edi,edi
c0016378:	83 ec 0c             	sub    esp,0xc
c001637b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001637d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016381:	52                   	push   edx
c0016382:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016385:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016388:	57                   	push   edi
c0016389:	56                   	push   esi
c001638a:	51                   	push   ecx
c001638b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001638e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016392:	83 c4 20             	add    esp,0x20
c0016395:	99                   	cdq    
c0016396:	83 c4 10             	add    esp,0x10
c0016399:	5b                   	pop    ebx
c001639a:	5e                   	pop    esi
c001639b:	5f                   	pop    edi
c001639c:	c3                   	ret    

c001639d <Sys::sbrk(regs*)>:
c001639d:	56                   	push   esi
c001639e:	53                   	push   ebx
c001639f:	50                   	push   eax
c00163a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00163ac:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00163af:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00163b5:	85 db                	test   ebx,ebx
c00163b7:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00163ba:	74 02                	je     c00163be <Sys::sbrk(regs*)+0x21>
c00163bc:	79 06                	jns    c00163c4 <Sys::sbrk(regs*)+0x27>
c00163be:	89 f0                	mov    eax,esi
c00163c0:	31 d2                	xor    edx,edx
c00163c2:	eb 2a                	jmp    c00163ee <Sys::sbrk(regs*)+0x51>
c00163c4:	83 c8 ff             	or     eax,0xffffffff
c00163c7:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00163cd:	89 c2                	mov    edx,eax
c00163cf:	77 1d                	ja     c00163ee <Sys::sbrk(regs*)+0x51>
c00163d1:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00163d7:	50                   	push   eax
c00163d8:	c1 ea 0c             	shr    edx,0xc
c00163db:	68 07 0c 00 00       	push   0xc07
c00163e0:	52                   	push   edx
c00163e1:	51                   	push   ecx
c00163e2:	e8 6f 61 ff ff       	call   c000c556 <VAS::allocatePages(int, int)>
c00163e7:	89 f0                	mov    eax,esi
c00163e9:	31 d2                	xor    edx,edx
c00163eb:	83 c4 10             	add    esp,0x10
c00163ee:	59                   	pop    ecx
c00163ef:	5b                   	pop    ebx
c00163f0:	5e                   	pop    esi
c00163f1:	c3                   	ret    

c00163f2 <Sys::setCwd(regs*)>:
c00163f2:	83 ec 14             	sub    esp,0x14
c00163f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163f9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00163fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016401:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016404:	e8 1c 76 ff ff       	call   c000da25 <Fs::setcwd(Process*, char*)>
c0016409:	83 c4 1c             	add    esp,0x1c
c001640c:	99                   	cdq    
c001640d:	c3                   	ret    

c001640e <Sys::setTime(regs*)>:
c001640e:	55                   	push   ebp
c001640f:	31 c9                	xor    ecx,ecx
c0016411:	57                   	push   edi
c0016412:	bd 0c 00 00 00       	mov    ebp,0xc
c0016417:	56                   	push   esi
c0016418:	53                   	push   ebx
c0016419:	31 db                	xor    ebx,ebx
c001641b:	83 ec 10             	sub    esp,0x10
c001641e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016422:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0016425:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0016428:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001642b:	89 c2                	mov    edx,eax
c001642d:	66 81 ef 6c 07       	sub    di,0x76c
c0016432:	83 e2 1f             	and    edx,0x1f
c0016435:	c1 e7 10             	shl    edi,0x10
c0016438:	42                   	inc    edx
c0016439:	c1 e8 05             	shr    eax,0x5
c001643c:	88 d1                	mov    cl,dl
c001643e:	31 d2                	xor    edx,edx
c0016440:	f7 f5                	div    ebp
c0016442:	89 dd                	mov    ebp,ebx
c0016444:	88 d5                	mov    ch,dl
c0016446:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001644c:	0f b7 c1             	movzx  eax,cx
c001644f:	31 d2                	xor    edx,edx
c0016451:	09 f8                	or     eax,edi
c0016453:	bf 3c 00 00 00       	mov    edi,0x3c
c0016458:	89 c1                	mov    ecx,eax
c001645a:	89 f0                	mov    eax,esi
c001645c:	f7 f7                	div    edi
c001645e:	c1 e2 10             	shl    edx,0x10
c0016461:	09 d5                	or     ebp,edx
c0016463:	31 d2                	xor    edx,edx
c0016465:	89 eb                	mov    ebx,ebp
c0016467:	f7 f7                	div    edi
c0016469:	bf 10 0e 00 00       	mov    edi,0xe10
c001646e:	88 d7                	mov    bh,dl
c0016470:	89 f0                	mov    eax,esi
c0016472:	31 d2                	xor    edx,edx
c0016474:	f7 f7                	div    edi
c0016476:	bf 18 00 00 00       	mov    edi,0x18
c001647b:	31 d2                	xor    edx,edx
c001647d:	f7 f7                	div    edi
c001647f:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0016484:	88 d3                	mov    bl,dl
c0016486:	53                   	push   ebx
c0016487:	51                   	push   ecx
c0016488:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001648e:	e8 93 7e ff ff       	call   c000e326 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0016493:	83 c4 1c             	add    esp,0x1c
c0016496:	83 f0 01             	xor    eax,0x1
c0016499:	5b                   	pop    ebx
c001649a:	0f b6 c0             	movzx  eax,al
c001649d:	5e                   	pop    esi
c001649e:	31 d2                	xor    edx,edx
c00164a0:	5f                   	pop    edi
c00164a1:	5d                   	pop    ebp
c00164a2:	c3                   	ret    

c00164a3 <Sys::timezone(regs*)>:
c00164a3:	53                   	push   ebx
c00164a4:	83 ec 08             	sub    esp,0x8
c00164a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164ab:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00164af:	75 17                	jne    c00164c8 <Sys::timezone(regs*)+0x25>
c00164b1:	83 ec 0c             	sub    esp,0xc
c00164b4:	68 b9 69 02 c0       	push   0xc00269b9
c00164b9:	e8 15 6c ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00164be:	83 c8 ff             	or     eax,0xffffffff
c00164c1:	83 c4 10             	add    esp,0x10
c00164c4:	89 c2                	mov    edx,eax
c00164c6:	eb 20                	jmp    c00164e8 <Sys::timezone(regs*)+0x45>
c00164c8:	83 ec 0c             	sub    esp,0xc
c00164cb:	68 ce 69 02 c0       	push   0xc00269ce
c00164d0:	e8 fe 6b ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00164d5:	58                   	pop    eax
c00164d6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00164d9:	e8 aa 7b ff ff       	call   c000e088 <User::loadClockSettings(int)>
c00164de:	83 c4 10             	add    esp,0x10
c00164e1:	b8 01 00 00 00       	mov    eax,0x1
c00164e6:	31 d2                	xor    edx,edx
c00164e8:	83 c4 08             	add    esp,0x8
c00164eb:	5b                   	pop    ebx
c00164ec:	c3                   	ret    

c00164ed <Sys::write(regs*)>:
c00164ed:	57                   	push   edi
c00164ee:	56                   	push   esi
c00164ef:	53                   	push   ebx
c00164f0:	83 ec 10             	sub    esp,0x10
c00164f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00164f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00164fa:	83 f8 02             	cmp    eax,0x2
c00164fd:	77 10                	ja     c001650f <Sys::write(regs*)+0x22>
c00164ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016504:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016507:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001650d:	eb 0e                	jmp    c001651d <Sys::write(regs*)+0x30>
c001650f:	83 ec 0c             	sub    esp,0xc
c0016512:	50                   	push   eax
c0016513:	e8 3f 57 ff ff       	call   c000bc57 <getFromFileDescriptor(int)>
c0016518:	83 c4 10             	add    esp,0x10
c001651b:	89 c1                	mov    ecx,eax
c001651d:	83 c8 ff             	or     eax,0xffffffff
c0016520:	85 c9                	test   ecx,ecx
c0016522:	89 c2                	mov    edx,eax
c0016524:	74 28                	je     c001654e <Sys::write(regs*)+0x61>
c0016526:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001652e:	31 ff                	xor    edi,edi
c0016530:	83 ec 0c             	sub    esp,0xc
c0016533:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016535:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016539:	52                   	push   edx
c001653a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001653d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016540:	57                   	push   edi
c0016541:	56                   	push   esi
c0016542:	51                   	push   ecx
c0016543:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016546:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001654a:	83 c4 20             	add    esp,0x20
c001654d:	99                   	cdq    
c001654e:	83 c4 10             	add    esp,0x10
c0016551:	5b                   	pop    ebx
c0016552:	5e                   	pop    esi
c0016553:	5f                   	pop    edi
c0016554:	c3                   	ret    

c0016555 <Sys::wsbe(regs*)>:
c0016555:	57                   	push   edi
c0016556:	b9 0b 00 00 00       	mov    ecx,0xb
c001655b:	56                   	push   esi
c001655c:	be 0d 6a 02 c0       	mov    esi,0xc0026a0d
c0016561:	53                   	push   ebx
c0016562:	83 ec 30             	sub    esp,0x30
c0016565:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0016569:	fc                   	cld    
c001656a:	83 ec 0c             	sub    esp,0xc
c001656d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001656f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0016573:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016578:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001657b:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0016581:	8b 06                	mov    eax,DWORD PTR [esi]
c0016583:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0016586:	57                   	push   edi
c0016587:	e8 24 a1 fe ff       	call   c00006b0 <strlen>
c001658c:	5a                   	pop    edx
c001658d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0016591:	52                   	push   edx
c0016592:	31 d2                	xor    edx,edx
c0016594:	57                   	push   edi
c0016595:	52                   	push   edx
c0016596:	50                   	push   eax
c0016597:	56                   	push   esi
c0016598:	ff d3                	call   ebx
c001659a:	83 c4 14             	add    esp,0x14
c001659d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00165a1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00165a4:	e8 6b 32 00 00       	call   c0019814 <terminateTask(int)>
c00165a9:	83 c4 40             	add    esp,0x40
c00165ac:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00165b1:	5b                   	pop    ebx
c00165b2:	31 d2                	xor    edx,edx
c00165b4:	5e                   	pop    esi
c00165b5:	5f                   	pop    edi
c00165b6:	c3                   	ret    

c00165b7 <Sys::yield(regs*)>:
c00165b7:	83 ec 0c             	sub    esp,0xc
c00165ba:	fa                   	cli    
c00165bb:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00165c1:	e8 36 29 00 00       	call   c0018efc <schedule()>
c00165c6:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00165cb:	48                   	dec    eax
c00165cc:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00165d1:	75 01                	jne    c00165d4 <Sys::yield(regs*)+0x1d>
c00165d3:	fb                   	sti    
c00165d4:	8b 15 ec 91 02 c0    	mov    edx,DWORD PTR ds:0xc00291ec
c00165da:	83 c4 0c             	add    esp,0xc
c00165dd:	89 d0                	mov    eax,edx
c00165df:	c1 ea 11             	shr    edx,0x11
c00165e2:	c1 e0 07             	shl    eax,0x7
c00165e5:	25 80 30 0f 00       	and    eax,0xf3080
c00165ea:	31 d0                	xor    eax,edx
c00165ec:	31 d2                	xor    edx,edx
c00165ee:	c3                   	ret    

c00165ef <sysCallSeekDir(regs*)>:
c00165ef:	31 c0                	xor    eax,eax
c00165f1:	31 d2                	xor    edx,edx
c00165f3:	c3                   	ret    

c00165f4 <sysCallTellDir(regs*)>:
c00165f4:	31 c0                	xor    eax,eax
c00165f6:	31 d2                	xor    edx,edx
c00165f8:	c3                   	ret    

c00165f9 <sysCallVerify(regs*)>:
c00165f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165fd:	31 d2                	xor    edx,edx
c00165ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016602:	c3                   	ret    

c0016603 <sysCallGetArgc(regs*)>:
c0016603:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016608:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001660b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0016611:	99                   	cdq    
c0016612:	c3                   	ret    

c0016613 <sysFormatDisk(regs*)>:
c0016613:	56                   	push   esi
c0016614:	53                   	push   ebx
c0016615:	53                   	push   ebx
c0016616:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001661a:	8b 1d f4 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf4
c0016620:	eb 25                	jmp    c0016647 <sysFormatDisk(regs*)+0x34>
c0016622:	83 ec 0c             	sub    esp,0xc
c0016625:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016628:	8b 13                	mov    edx,DWORD PTR [ebx]
c001662a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001662d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016630:	50                   	push   eax
c0016631:	ff 34 85 80 91 02 c0 	push   DWORD PTR [eax*4-0x3ffd6e80]
c0016638:	53                   	push   ebx
c0016639:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001663c:	83 c4 20             	add    esp,0x20
c001663f:	83 f8 08             	cmp    eax,0x8
c0016642:	75 12                	jne    c0016656 <sysFormatDisk(regs*)+0x43>
c0016644:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016647:	85 db                	test   ebx,ebx
c0016649:	75 d7                	jne    c0016622 <sysFormatDisk(regs*)+0xf>
c001664b:	59                   	pop    ecx
c001664c:	b8 03 00 00 00       	mov    eax,0x3
c0016651:	31 d2                	xor    edx,edx
c0016653:	5b                   	pop    ebx
c0016654:	5e                   	pop    esi
c0016655:	c3                   	ret    
c0016656:	85 c0                	test   eax,eax
c0016658:	74 1b                	je     c0016675 <sysFormatDisk(regs*)+0x62>
c001665a:	83 f8 09             	cmp    eax,0x9
c001665d:	74 0b                	je     c001666a <sysFormatDisk(regs*)+0x57>
c001665f:	59                   	pop    ecx
c0016660:	b8 02 00 00 00       	mov    eax,0x2
c0016665:	31 d2                	xor    edx,edx
c0016667:	5b                   	pop    ebx
c0016668:	5e                   	pop    esi
c0016669:	c3                   	ret    
c001666a:	59                   	pop    ecx
c001666b:	b8 01 00 00 00       	mov    eax,0x1
c0016670:	31 d2                	xor    edx,edx
c0016672:	5b                   	pop    ebx
c0016673:	5e                   	pop    esi
c0016674:	c3                   	ret    
c0016675:	59                   	pop    ecx
c0016676:	31 c0                	xor    eax,eax
c0016678:	31 d2                	xor    edx,edx
c001667a:	5b                   	pop    ebx
c001667b:	5e                   	pop    esi
c001667c:	c3                   	ret    

c001667d <sysSetDiskVolumeLabel(regs*)>:
c001667d:	56                   	push   esi
c001667e:	53                   	push   ebx
c001667f:	53                   	push   ebx
c0016680:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016684:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016687:	83 f8 19             	cmp    eax,0x19
c001668a:	77 2d                	ja     c00166b9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001668c:	8b 0c 85 80 91 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6e80]
c0016693:	85 c9                	test   ecx,ecx
c0016695:	74 22                	je     c00166b9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016697:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001669a:	85 db                	test   ebx,ebx
c001669c:	74 1b                	je     c00166b9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001669e:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00166a4:	85 d2                	test   edx,edx
c00166a6:	74 11                	je     c00166b9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00166a8:	8b 32                	mov    esi,DWORD PTR [edx]
c00166aa:	53                   	push   ebx
c00166ab:	50                   	push   eax
c00166ac:	51                   	push   ecx
c00166ad:	52                   	push   edx
c00166ae:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00166b1:	83 c4 10             	add    esp,0x10
c00166b4:	99                   	cdq    
c00166b5:	59                   	pop    ecx
c00166b6:	5b                   	pop    ebx
c00166b7:	5e                   	pop    esi
c00166b8:	c3                   	ret    
c00166b9:	59                   	pop    ecx
c00166ba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00166bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00166c4:	5b                   	pop    ebx
c00166c5:	5e                   	pop    esi
c00166c6:	c3                   	ret    

c00166c7 <sysGetDiskVolumeLabel(regs*)>:
c00166c7:	57                   	push   edi
c00166c8:	56                   	push   esi
c00166c9:	53                   	push   ebx
c00166ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00166d1:	83 fa 19             	cmp    edx,0x19
c00166d4:	77 38                	ja     c001670e <sysGetDiskVolumeLabel(regs*)+0x47>
c00166d6:	8b 0c 95 80 91 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6e80]
c00166dd:	85 c9                	test   ecx,ecx
c00166df:	74 2d                	je     c001670e <sysGetDiskVolumeLabel(regs*)+0x47>
c00166e1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00166e4:	85 db                	test   ebx,ebx
c00166e6:	74 26                	je     c001670e <sysGetDiskVolumeLabel(regs*)+0x47>
c00166e8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00166eb:	85 f6                	test   esi,esi
c00166ed:	74 1f                	je     c001670e <sysGetDiskVolumeLabel(regs*)+0x47>
c00166ef:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00166f5:	85 c0                	test   eax,eax
c00166f7:	74 15                	je     c001670e <sysGetDiskVolumeLabel(regs*)+0x47>
c00166f9:	83 ec 0c             	sub    esp,0xc
c00166fc:	8b 38                	mov    edi,DWORD PTR [eax]
c00166fe:	56                   	push   esi
c00166ff:	53                   	push   ebx
c0016700:	52                   	push   edx
c0016701:	51                   	push   ecx
c0016702:	50                   	push   eax
c0016703:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0016706:	83 c4 20             	add    esp,0x20
c0016709:	99                   	cdq    
c001670a:	5b                   	pop    ebx
c001670b:	5e                   	pop    esi
c001670c:	5f                   	pop    edi
c001670d:	c3                   	ret    
c001670e:	5b                   	pop    ebx
c001670f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016714:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016719:	5e                   	pop    esi
c001671a:	5f                   	pop    edi
c001671b:	c3                   	ret    

c001671c <sysShutdown(regs*)>:
c001671c:	83 ec 0c             	sub    esp,0xc
c001671f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016723:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016726:	85 c0                	test   eax,eax
c0016728:	74 18                	je     c0016742 <sysShutdown(regs*)+0x26>
c001672a:	83 f8 01             	cmp    eax,0x1
c001672d:	74 38                	je     c0016767 <sysShutdown(regs*)+0x4b>
c001672f:	83 f8 02             	cmp    eax,0x2
c0016732:	74 24                	je     c0016758 <sysShutdown(regs*)+0x3c>
c0016734:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016739:	ba ff ff ff ff       	mov    edx,0xffffffff
c001673e:	83 c4 0c             	add    esp,0xc
c0016741:	c3                   	ret    
c0016742:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0016747:	8b 10                	mov    edx,DWORD PTR [eax]
c0016749:	6a 00                	push   0x0
c001674b:	6a 00                	push   0x0
c001674d:	6a 00                	push   0x0
c001674f:	50                   	push   eax
c0016750:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016753:	83 c4 10             	add    esp,0x10
c0016756:	eb dc                	jmp    c0016734 <sysShutdown(regs*)+0x18>
c0016758:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001675d:	8b 10                	mov    edx,DWORD PTR [eax]
c001675f:	6a 00                	push   0x0
c0016761:	6a 00                	push   0x0
c0016763:	6a 01                	push   0x1
c0016765:	eb e8                	jmp    c001674f <sysShutdown(regs*)+0x33>
c0016767:	a1 00 92 02 c0       	mov    eax,ds:0xc0029200
c001676c:	85 c0                	test   eax,eax
c001676e:	74 02                	je     c0016772 <sysShutdown(regs*)+0x56>
c0016770:	ff d0                	call   eax
c0016772:	31 c0                	xor    eax,eax
c0016774:	31 d2                	xor    edx,edx
c0016776:	83 c4 0c             	add    esp,0xc
c0016779:	c3                   	ret    

c001677a <sysCallRealpath(regs*)>:
c001677a:	83 ec 0c             	sub    esp,0xc
c001677d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016781:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016784:	85 d2                	test   edx,edx
c0016786:	74 07                	je     c001678f <sysCallRealpath(regs*)+0x15>
c0016788:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001678b:	85 c0                	test   eax,eax
c001678d:	75 0b                	jne    c001679a <sysCallRealpath(regs*)+0x20>
c001678f:	b8 01 00 00 00       	mov    eax,0x1
c0016794:	31 d2                	xor    edx,edx
c0016796:	83 c4 0c             	add    esp,0xc
c0016799:	c3                   	ret    
c001679a:	51                   	push   ecx
c001679b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00167a1:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00167a4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00167aa:	51                   	push   ecx
c00167ab:	52                   	push   edx
c00167ac:	50                   	push   eax
c00167ad:	e8 e2 6c ff ff       	call   c000d494 <Fs::standardiseFiles(char*, char const*, char const*)>
c00167b2:	83 c4 10             	add    esp,0x10
c00167b5:	31 c0                	xor    eax,eax
c00167b7:	31 d2                	xor    edx,edx
c00167b9:	83 c4 0c             	add    esp,0xc
c00167bc:	c3                   	ret    

c00167bd <sysCallReadDir(regs*)>:
c00167bd:	53                   	push   ebx
c00167be:	83 ec 18             	sub    esp,0x18
c00167c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00167c5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00167c8:	83 f8 02             	cmp    eax,0x2
c00167cb:	76 60                	jbe    c001682d <sysCallReadDir(regs*)+0x70>
c00167cd:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00167d4:	77 48                	ja     c001681e <sysCallReadDir(regs*)+0x61>
c00167d6:	83 ec 0c             	sub    esp,0xc
c00167d9:	50                   	push   eax
c00167da:	e8 78 54 ff ff       	call   c000bc57 <getFromFileDescriptor(int)>
c00167df:	83 c4 10             	add    esp,0x10
c00167e2:	85 c0                	test   eax,eax
c00167e4:	74 38                	je     c001681e <sysCallReadDir(regs*)+0x61>
c00167e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00167ee:	83 ec 0c             	sub    esp,0xc
c00167f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00167f3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00167f7:	51                   	push   ecx
c00167f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00167fb:	6a 00                	push   0x0
c00167fd:	68 10 01 00 00       	push   0x110
c0016802:	50                   	push   eax
c0016803:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016806:	83 c4 20             	add    esp,0x20
c0016809:	85 c0                	test   eax,eax
c001680b:	74 29                	je     c0016836 <sysCallReadDir(regs*)+0x79>
c001680d:	83 f8 07             	cmp    eax,0x7
c0016810:	74 1b                	je     c001682d <sysCallReadDir(regs*)+0x70>
c0016812:	b8 02 00 00 00       	mov    eax,0x2
c0016817:	31 d2                	xor    edx,edx
c0016819:	83 c4 18             	add    esp,0x18
c001681c:	5b                   	pop    ebx
c001681d:	c3                   	ret    
c001681e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016823:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016828:	83 c4 18             	add    esp,0x18
c001682b:	5b                   	pop    ebx
c001682c:	c3                   	ret    
c001682d:	b8 01 00 00 00       	mov    eax,0x1
c0016832:	31 d2                	xor    edx,edx
c0016834:	eb e3                	jmp    c0016819 <sysCallReadDir(regs*)+0x5c>
c0016836:	31 c0                	xor    eax,eax
c0016838:	31 d2                	xor    edx,edx
c001683a:	eb dd                	jmp    c0016819 <sysCallReadDir(regs*)+0x5c>

c001683c <sysCallIsATTY(regs*)>:
c001683c:	83 ec 0c             	sub    esp,0xc
c001683f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016843:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016846:	83 f8 02             	cmp    eax,0x2
c0016849:	76 07                	jbe    c0016852 <sysCallIsATTY(regs*)+0x16>
c001684b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016850:	75 26                	jne    c0016878 <sysCallIsATTY(regs*)+0x3c>
c0016852:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016857:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001685a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016860:	85 c0                	test   eax,eax
c0016862:	74 24                	je     c0016888 <sysCallIsATTY(regs*)+0x4c>
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	8b 10                	mov    edx,DWORD PTR [eax]
c0016869:	50                   	push   eax
c001686a:	ff 12                	call   DWORD PTR [edx]
c001686c:	31 d2                	xor    edx,edx
c001686e:	0f b6 c0             	movzx  eax,al
c0016871:	83 c4 10             	add    esp,0x10
c0016874:	83 c4 0c             	add    esp,0xc
c0016877:	c3                   	ret    
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	50                   	push   eax
c001687c:	e8 d6 53 ff ff       	call   c000bc57 <getFromFileDescriptor(int)>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	85 c0                	test   eax,eax
c0016886:	75 dc                	jne    c0016864 <sysCallIsATTY(regs*)+0x28>
c0016888:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001688d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016892:	83 c4 0c             	add    esp,0xc
c0016895:	c3                   	ret    

c0016896 <sysCallSeek(regs*)>:
c0016896:	53                   	push   ebx
c0016897:	83 ec 08             	sub    esp,0x8
c001689a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001689e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168a1:	8d 50 fd             	lea    edx,[eax-0x3]
c00168a4:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00168aa:	77 32                	ja     c00168de <sysCallSeek(regs*)+0x48>
c00168ac:	83 ec 0c             	sub    esp,0xc
c00168af:	50                   	push   eax
c00168b0:	e8 a2 53 ff ff       	call   c000bc57 <getFromFileDescriptor(int)>
c00168b5:	83 c4 0c             	add    esp,0xc
c00168b8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00168bb:	31 db                	xor    ebx,ebx
c00168bd:	53                   	push   ebx
c00168be:	51                   	push   ecx
c00168bf:	50                   	push   eax
c00168c0:	e8 11 6f ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c00168c5:	83 c4 10             	add    esp,0x10
c00168c8:	85 c0                	test   eax,eax
c00168ca:	0f 95 c0             	setne  al
c00168cd:	31 d2                	xor    edx,edx
c00168cf:	0f b6 c0             	movzx  eax,al
c00168d2:	f7 d8                	neg    eax
c00168d4:	83 d2 00             	adc    edx,0x0
c00168d7:	83 c4 08             	add    esp,0x8
c00168da:	f7 da                	neg    edx
c00168dc:	5b                   	pop    ebx
c00168dd:	c3                   	ret    
c00168de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168e8:	83 c4 08             	add    esp,0x8
c00168eb:	5b                   	pop    ebx
c00168ec:	c3                   	ret    

c00168ed <sysCallTell(regs*)>:
c00168ed:	53                   	push   ebx
c00168ee:	83 ec 08             	sub    esp,0x8
c00168f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168f8:	83 f8 02             	cmp    eax,0x2
c00168fb:	76 4d                	jbe    c001694a <sysCallTell(regs*)+0x5d>
c00168fd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016902:	76 19                	jbe    c001691d <sysCallTell(regs*)+0x30>
c0016904:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016907:	31 d2                	xor    edx,edx
c0016909:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001690f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016916:	31 c0                	xor    eax,eax
c0016918:	83 c4 08             	add    esp,0x8
c001691b:	5b                   	pop    ebx
c001691c:	c3                   	ret    
c001691d:	83 ec 0c             	sub    esp,0xc
c0016920:	50                   	push   eax
c0016921:	e8 31 53 ff ff       	call   c000bc57 <getFromFileDescriptor(int)>
c0016926:	5a                   	pop    edx
c0016927:	59                   	pop    ecx
c0016928:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001692b:	50                   	push   eax
c001692c:	e8 fb 6e ff ff       	call   c000d82c <File::tell(unsigned long long*)>
c0016931:	83 c4 10             	add    esp,0x10
c0016934:	85 c0                	test   eax,eax
c0016936:	0f 95 c0             	setne  al
c0016939:	31 d2                	xor    edx,edx
c001693b:	0f b6 c0             	movzx  eax,al
c001693e:	f7 d8                	neg    eax
c0016940:	83 d2 00             	adc    edx,0x0
c0016943:	83 c4 08             	add    esp,0x8
c0016946:	f7 da                	neg    edx
c0016948:	5b                   	pop    ebx
c0016949:	c3                   	ret    
c001694a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001694f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016954:	83 c4 08             	add    esp,0x8
c0016957:	5b                   	pop    ebx
c0016958:	c3                   	ret    

c0016959 <sysCallSize(regs*)>:
c0016959:	53                   	push   ebx
c001695a:	83 ec 18             	sub    esp,0x18
c001695d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016961:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016964:	83 f8 02             	cmp    eax,0x2
c0016967:	76 53                	jbe    c00169bc <sysCallSize(regs*)+0x63>
c0016969:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001696e:	76 19                	jbe    c0016989 <sysCallSize(regs*)+0x30>
c0016970:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016973:	31 d2                	xor    edx,edx
c0016975:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001697b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016982:	31 c0                	xor    eax,eax
c0016984:	83 c4 18             	add    esp,0x18
c0016987:	5b                   	pop    ebx
c0016988:	c3                   	ret    
c0016989:	83 ec 0c             	sub    esp,0xc
c001698c:	50                   	push   eax
c001698d:	e8 c5 52 ff ff       	call   c000bc57 <getFromFileDescriptor(int)>
c0016992:	83 c4 0c             	add    esp,0xc
c0016995:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016999:	52                   	push   edx
c001699a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001699d:	50                   	push   eax
c001699e:	e8 21 70 ff ff       	call   c000d9c4 <File::stat(unsigned long long*, bool*)>
c00169a3:	83 c4 10             	add    esp,0x10
c00169a6:	85 c0                	test   eax,eax
c00169a8:	0f 95 c0             	setne  al
c00169ab:	31 d2                	xor    edx,edx
c00169ad:	0f b6 c0             	movzx  eax,al
c00169b0:	f7 d8                	neg    eax
c00169b2:	83 d2 00             	adc    edx,0x0
c00169b5:	83 c4 18             	add    esp,0x18
c00169b8:	f7 da                	neg    edx
c00169ba:	5b                   	pop    ebx
c00169bb:	c3                   	ret    
c00169bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00169c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00169c6:	83 c4 18             	add    esp,0x18
c00169c9:	5b                   	pop    ebx
c00169ca:	c3                   	ret    

c00169cb <sysCallSizeFromFilename(regs*)>:
c00169cb:	57                   	push   edi
c00169cc:	56                   	push   esi
c00169cd:	53                   	push   ebx
c00169ce:	83 ec 20             	sub    esp,0x20
c00169d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169d5:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00169d8:	83 fb 02             	cmp    ebx,0x2
c00169db:	0f 86 88 00 00 00    	jbe    c0016a69 <sysCallSizeFromFilename(regs*)+0x9e>
c00169e1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00169e7:	76 1b                	jbe    c0016a04 <sysCallSizeFromFilename(regs*)+0x39>
c00169e9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00169ec:	31 d2                	xor    edx,edx
c00169ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169fb:	83 c4 20             	add    esp,0x20
c00169fe:	31 c0                	xor    eax,eax
c0016a00:	5b                   	pop    ebx
c0016a01:	5e                   	pop    esi
c0016a02:	5f                   	pop    edi
c0016a03:	c3                   	ret    
c0016a04:	83 ec 0c             	sub    esp,0xc
c0016a07:	68 14 01 00 00       	push   0x114
c0016a0c:	e8 d6 33 ff ff       	call   c0009de7 <malloc>
c0016a11:	83 c4 0c             	add    esp,0xc
c0016a14:	89 c7                	mov    edi,eax
c0016a16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a1b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016a1e:	53                   	push   ebx
c0016a1f:	57                   	push   edi
c0016a20:	e8 19 6c ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0016a25:	83 c4 0c             	add    esp,0xc
c0016a28:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016a2c:	50                   	push   eax
c0016a2d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016a30:	57                   	push   edi
c0016a31:	e8 8e 6f ff ff       	call   c000d9c4 <File::stat(unsigned long long*, bool*)>
c0016a36:	83 c4 10             	add    esp,0x10
c0016a39:	85 ff                	test   edi,edi
c0016a3b:	74 14                	je     c0016a51 <sysCallSizeFromFilename(regs*)+0x86>
c0016a3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a41:	8b 17                	mov    edx,DWORD PTR [edi]
c0016a43:	83 ec 0c             	sub    esp,0xc
c0016a46:	57                   	push   edi
c0016a47:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016a4a:	83 c4 10             	add    esp,0x10
c0016a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a51:	85 c0                	test   eax,eax
c0016a53:	0f 95 c0             	setne  al
c0016a56:	31 d2                	xor    edx,edx
c0016a58:	0f b6 c0             	movzx  eax,al
c0016a5b:	f7 d8                	neg    eax
c0016a5d:	83 d2 00             	adc    edx,0x0
c0016a60:	83 c4 20             	add    esp,0x20
c0016a63:	f7 da                	neg    edx
c0016a65:	5b                   	pop    ebx
c0016a66:	5e                   	pop    esi
c0016a67:	5f                   	pop    edi
c0016a68:	c3                   	ret    
c0016a69:	83 c4 20             	add    esp,0x20
c0016a6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016a71:	5b                   	pop    ebx
c0016a72:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016a77:	5e                   	pop    esi
c0016a78:	5f                   	pop    edi
c0016a79:	c3                   	ret    

c0016a7a <sysCallClose(regs*)>:
c0016a7a:	53                   	push   ebx
c0016a7b:	83 ec 08             	sub    esp,0x8
c0016a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a82:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a85:	83 f8 02             	cmp    eax,0x2
c0016a88:	76 41                	jbe    c0016acb <sysCallClose(regs*)+0x51>
c0016a8a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0016a90:	83 fa 01             	cmp    edx,0x1
c0016a93:	76 2d                	jbe    c0016ac2 <sysCallClose(regs*)+0x48>
c0016a95:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a9a:	77 2f                	ja     c0016acb <sysCallClose(regs*)+0x51>
c0016a9c:	83 ec 0c             	sub    esp,0xc
c0016a9f:	50                   	push   eax
c0016aa0:	e8 b2 51 ff ff       	call   c000bc57 <getFromFileDescriptor(int)>
c0016aa5:	89 c3                	mov    ebx,eax
c0016aa7:	89 04 24             	mov    DWORD PTR [esp],eax
c0016aaa:	e8 c7 6c ff ff       	call   c000d776 <File::close()>
c0016aaf:	83 c4 10             	add    esp,0x10
c0016ab2:	85 db                	test   ebx,ebx
c0016ab4:	74 0c                	je     c0016ac2 <sysCallClose(regs*)+0x48>
c0016ab6:	83 ec 0c             	sub    esp,0xc
c0016ab9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016abb:	53                   	push   ebx
c0016abc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016abf:	83 c4 10             	add    esp,0x10
c0016ac2:	31 c0                	xor    eax,eax
c0016ac4:	31 d2                	xor    edx,edx
c0016ac6:	83 c4 08             	add    esp,0x8
c0016ac9:	5b                   	pop    ebx
c0016aca:	c3                   	ret    
c0016acb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016ad0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016ad5:	83 c4 08             	add    esp,0x8
c0016ad8:	5b                   	pop    ebx
c0016ad9:	c3                   	ret    

c0016ada <sysCallOpenDir(regs*)>:
c0016ada:	56                   	push   esi
c0016adb:	53                   	push   ebx
c0016adc:	53                   	push   ebx
c0016add:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ae1:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016ae4:	85 f6                	test   esi,esi
c0016ae6:	74 59                	je     c0016b41 <sysCallOpenDir(regs*)+0x67>
c0016ae8:	83 ec 0c             	sub    esp,0xc
c0016aeb:	68 14 01 00 00       	push   0x114
c0016af0:	e8 f2 32 ff ff       	call   c0009de7 <malloc>
c0016af5:	83 c4 0c             	add    esp,0xc
c0016af8:	89 c6                	mov    esi,eax
c0016afa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aff:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016b02:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b05:	56                   	push   esi
c0016b06:	e8 93 70 ff ff       	call   c000db9e <Directory::Directory(char const*, Process*)>
c0016b0b:	83 c4 10             	add    esp,0x10
c0016b0e:	85 f6                	test   esi,esi
c0016b10:	74 2f                	je     c0016b41 <sysCallOpenDir(regs*)+0x67>
c0016b12:	83 ec 0c             	sub    esp,0xc
c0016b15:	56                   	push   esi
c0016b16:	e8 5d 71 ff ff       	call   c000dc78 <Directory::open()>
c0016b1b:	83 c4 10             	add    esp,0x10
c0016b1e:	85 c0                	test   eax,eax
c0016b20:	75 1f                	jne    c0016b41 <sysCallOpenDir(regs*)+0x67>
c0016b22:	83 ec 0c             	sub    esp,0xc
c0016b25:	56                   	push   esi
c0016b26:	e8 37 4e ff ff       	call   c000b962 <UnixFile::getFileDescriptor()>
c0016b2b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016b2e:	83 c4 10             	add    esp,0x10
c0016b31:	89 02                	mov    DWORD PTR [edx],eax
c0016b33:	c1 f8 1f             	sar    eax,0x1f
c0016b36:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b39:	31 c0                	xor    eax,eax
c0016b3b:	59                   	pop    ecx
c0016b3c:	31 d2                	xor    edx,edx
c0016b3e:	5b                   	pop    ebx
c0016b3f:	5e                   	pop    esi
c0016b40:	c3                   	ret    
c0016b41:	59                   	pop    ecx
c0016b42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b4c:	5b                   	pop    ebx
c0016b4d:	5e                   	pop    esi
c0016b4e:	c3                   	ret    

c0016b4f <sysCallCloseDir(regs*)>:
c0016b4f:	53                   	push   ebx
c0016b50:	83 ec 08             	sub    esp,0x8
c0016b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b57:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b5a:	8d 50 fd             	lea    edx,[eax-0x3]
c0016b5d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016b63:	77 2f                	ja     c0016b94 <sysCallCloseDir(regs*)+0x45>
c0016b65:	83 ec 0c             	sub    esp,0xc
c0016b68:	50                   	push   eax
c0016b69:	e8 e9 50 ff ff       	call   c000bc57 <getFromFileDescriptor(int)>
c0016b6e:	89 c3                	mov    ebx,eax
c0016b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b73:	e8 5c 71 ff ff       	call   c000dcd4 <Directory::close()>
c0016b78:	83 c4 10             	add    esp,0x10
c0016b7b:	85 db                	test   ebx,ebx
c0016b7d:	74 0c                	je     c0016b8b <sysCallCloseDir(regs*)+0x3c>
c0016b7f:	83 ec 0c             	sub    esp,0xc
c0016b82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b84:	53                   	push   ebx
c0016b85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b88:	83 c4 10             	add    esp,0x10
c0016b8b:	31 c0                	xor    eax,eax
c0016b8d:	31 d2                	xor    edx,edx
c0016b8f:	83 c4 08             	add    esp,0x8
c0016b92:	5b                   	pop    ebx
c0016b93:	c3                   	ret    
c0016b94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b99:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b9e:	83 c4 08             	add    esp,0x8
c0016ba1:	5b                   	pop    ebx
c0016ba2:	c3                   	ret    

c0016ba3 <sysCallMakeDir(regs*)>:
c0016ba3:	56                   	push   esi
c0016ba4:	53                   	push   ebx
c0016ba5:	83 ec 10             	sub    esp,0x10
c0016ba8:	68 14 01 00 00       	push   0x114
c0016bad:	e8 35 32 ff ff       	call   c0009de7 <malloc>
c0016bb2:	83 c4 0c             	add    esp,0xc
c0016bb5:	89 c3                	mov    ebx,eax
c0016bb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bbc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016bc3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016bc6:	53                   	push   ebx
c0016bc7:	e8 d2 6f ff ff       	call   c000db9e <Directory::Directory(char const*, Process*)>
c0016bcc:	83 c4 10             	add    esp,0x10
c0016bcf:	85 db                	test   ebx,ebx
c0016bd1:	74 32                	je     c0016c05 <sysCallMakeDir(regs*)+0x62>
c0016bd3:	83 ec 0c             	sub    esp,0xc
c0016bd6:	53                   	push   ebx
c0016bd7:	e8 7c 72 ff ff       	call   c000de58 <Directory::create()>
c0016bdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bdf:	89 c6                	mov    esi,eax
c0016be1:	e8 ee 70 ff ff       	call   c000dcd4 <Directory::close()>
c0016be6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016be8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016beb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016bee:	83 c4 10             	add    esp,0x10
c0016bf1:	31 c0                	xor    eax,eax
c0016bf3:	59                   	pop    ecx
c0016bf4:	85 f6                	test   esi,esi
c0016bf6:	5b                   	pop    ebx
c0016bf7:	0f 95 c0             	setne  al
c0016bfa:	5e                   	pop    esi
c0016bfb:	31 d2                	xor    edx,edx
c0016bfd:	f7 d8                	neg    eax
c0016bff:	83 d2 00             	adc    edx,0x0
c0016c02:	f7 da                	neg    edx
c0016c04:	c3                   	ret    
c0016c05:	59                   	pop    ecx
c0016c06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016c10:	5b                   	pop    ebx
c0016c11:	5e                   	pop    esi
c0016c12:	c3                   	ret    

c0016c13 <sysCallWait(regs*)>:
c0016c13:	83 ec 10             	sub    esp,0x10
c0016c16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c1a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016c1d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016c20:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016c23:	e8 fc 24 00 00       	call   c0019124 <waitTask(int, int*, int)>
c0016c28:	83 c4 1c             	add    esp,0x1c
c0016c2b:	99                   	cdq    
c0016c2c:	c3                   	ret    

c0016c2d <sysCallNotImpl(regs*)>:
c0016c2d:	83 ec 18             	sub    esp,0x18
c0016c30:	68 39 6a 02 c0       	push   0xc0026a39
c0016c35:	e8 7b e5 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0016c3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016c44:	83 c4 1c             	add    esp,0x1c
c0016c47:	c3                   	ret    

c0016c48 <sysPanic(regs*)>:
c0016c48:	83 ec 18             	sub    esp,0x18
c0016c4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c4f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016c52:	e8 5e e5 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0016c57:	b8 01 00 00 00       	mov    eax,0x1
c0016c5c:	31 d2                	xor    edx,edx
c0016c5e:	83 c4 1c             	add    esp,0x1c
c0016c61:	c3                   	ret    

c0016c62 <sysCallRmdir(regs*)>:
c0016c62:	56                   	push   esi
c0016c63:	53                   	push   ebx
c0016c64:	83 ec 20             	sub    esp,0x20
c0016c67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c6b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c6e:	68 14 01 00 00       	push   0x114
c0016c73:	e8 6f 31 ff ff       	call   c0009de7 <malloc>
c0016c78:	83 c4 0c             	add    esp,0xc
c0016c7b:	89 c3                	mov    ebx,eax
c0016c7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c82:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016c85:	56                   	push   esi
c0016c86:	53                   	push   ebx
c0016c87:	e8 b2 69 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0016c8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c8f:	e8 fc 6b ff ff       	call   c000d890 <File::unlink()>
c0016c94:	83 c4 10             	add    esp,0x10
c0016c97:	85 db                	test   ebx,ebx
c0016c99:	74 14                	je     c0016caf <sysCallRmdir(regs*)+0x4d>
c0016c9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c9f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016ca1:	83 ec 0c             	sub    esp,0xc
c0016ca4:	53                   	push   ebx
c0016ca5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016ca8:	83 c4 10             	add    esp,0x10
c0016cab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016caf:	85 c0                	test   eax,eax
c0016cb1:	0f 95 c0             	setne  al
c0016cb4:	31 d2                	xor    edx,edx
c0016cb6:	0f b6 c0             	movzx  eax,al
c0016cb9:	f7 d8                	neg    eax
c0016cbb:	83 d2 00             	adc    edx,0x0
c0016cbe:	83 c4 14             	add    esp,0x14
c0016cc1:	f7 da                	neg    edx
c0016cc3:	5b                   	pop    ebx
c0016cc4:	5e                   	pop    esi
c0016cc5:	c3                   	ret    

c0016cc6 <sysCallUnlink(regs*)>:
c0016cc6:	56                   	push   esi
c0016cc7:	53                   	push   ebx
c0016cc8:	83 ec 20             	sub    esp,0x20
c0016ccb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ccf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016cd2:	68 14 01 00 00       	push   0x114
c0016cd7:	e8 0b 31 ff ff       	call   c0009de7 <malloc>
c0016cdc:	83 c4 0c             	add    esp,0xc
c0016cdf:	89 c3                	mov    ebx,eax
c0016ce1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ce6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016ce9:	56                   	push   esi
c0016cea:	53                   	push   ebx
c0016ceb:	e8 4e 69 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0016cf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016cf3:	e8 98 6b ff ff       	call   c000d890 <File::unlink()>
c0016cf8:	83 c4 10             	add    esp,0x10
c0016cfb:	85 db                	test   ebx,ebx
c0016cfd:	74 14                	je     c0016d13 <sysCallUnlink(regs*)+0x4d>
c0016cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d03:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016d05:	83 ec 0c             	sub    esp,0xc
c0016d08:	53                   	push   ebx
c0016d09:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016d0c:	83 c4 10             	add    esp,0x10
c0016d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d13:	85 c0                	test   eax,eax
c0016d15:	0f 95 c0             	setne  al
c0016d18:	31 d2                	xor    edx,edx
c0016d1a:	0f b6 c0             	movzx  eax,al
c0016d1d:	f7 d8                	neg    eax
c0016d1f:	83 d2 00             	adc    edx,0x0
c0016d22:	83 c4 14             	add    esp,0x14
c0016d25:	f7 da                	neg    edx
c0016d27:	5b                   	pop    ebx
c0016d28:	5e                   	pop    esi
c0016d29:	c3                   	ret    

c0016d2a <sysCallGetArgv(regs*)>:
c0016d2a:	83 ec 0c             	sub    esp,0xc
c0016d2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016d31:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016d34:	85 c0                	test   eax,eax
c0016d36:	78 2b                	js     c0016d63 <sysCallGetArgv(regs*)+0x39>
c0016d38:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016d3e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016d41:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016d47:	7d 1a                	jge    c0016d63 <sysCallGetArgv(regs*)+0x39>
c0016d49:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016d50:	85 c0                	test   eax,eax
c0016d52:	74 17                	je     c0016d6b <sysCallGetArgv(regs*)+0x41>
c0016d54:	83 ec 08             	sub    esp,0x8
c0016d57:	50                   	push   eax
c0016d58:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016d5b:	e8 f0 99 fe ff       	call   c0000750 <strcpy>
c0016d60:	83 c4 10             	add    esp,0x10
c0016d63:	31 c0                	xor    eax,eax
c0016d65:	31 d2                	xor    edx,edx
c0016d67:	83 c4 0c             	add    esp,0xc
c0016d6a:	c3                   	ret    
c0016d6b:	b8 01 00 00 00       	mov    eax,0x1
c0016d70:	31 d2                	xor    edx,edx
c0016d72:	83 c4 0c             	add    esp,0xc
c0016d75:	c3                   	ret    

c0016d76 <sysCallTTYName(regs*)>:
c0016d76:	56                   	push   esi
c0016d77:	53                   	push   ebx
c0016d78:	53                   	push   ebx
c0016d79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d7d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016d80:	85 c0                	test   eax,eax
c0016d82:	74 5f                	je     c0016de3 <sysCallTTYName(regs*)+0x6d>
c0016d84:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016d87:	83 f8 02             	cmp    eax,0x2
c0016d8a:	77 3e                	ja     c0016dca <sysCallTTYName(regs*)+0x54>
c0016d8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d94:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016d9a:	85 db                	test   ebx,ebx
c0016d9c:	74 45                	je     c0016de3 <sysCallTTYName(regs*)+0x6d>
c0016d9e:	83 ec 0c             	sub    esp,0xc
c0016da1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016da3:	53                   	push   ebx
c0016da4:	ff 10                	call   DWORD PTR [eax]
c0016da6:	83 c4 10             	add    esp,0x10
c0016da9:	84 c0                	test   al,al
c0016dab:	74 41                	je     c0016dee <sysCallTTYName(regs*)+0x78>
c0016dad:	83 ec 08             	sub    esp,0x8
c0016db0:	81 c3 82 00 00 00    	add    ebx,0x82
c0016db6:	53                   	push   ebx
c0016db7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016dba:	e8 91 99 fe ff       	call   c0000750 <strcpy>
c0016dbf:	83 c4 10             	add    esp,0x10
c0016dc2:	31 c0                	xor    eax,eax
c0016dc4:	59                   	pop    ecx
c0016dc5:	31 d2                	xor    edx,edx
c0016dc7:	5b                   	pop    ebx
c0016dc8:	5e                   	pop    esi
c0016dc9:	c3                   	ret    
c0016dca:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016dcf:	74 bb                	je     c0016d8c <sysCallTTYName(regs*)+0x16>
c0016dd1:	83 ec 0c             	sub    esp,0xc
c0016dd4:	50                   	push   eax
c0016dd5:	e8 7d 4e ff ff       	call   c000bc57 <getFromFileDescriptor(int)>
c0016dda:	83 c4 10             	add    esp,0x10
c0016ddd:	89 c3                	mov    ebx,eax
c0016ddf:	85 db                	test   ebx,ebx
c0016de1:	75 bb                	jne    c0016d9e <sysCallTTYName(regs*)+0x28>
c0016de3:	59                   	pop    ecx
c0016de4:	b8 01 00 00 00       	mov    eax,0x1
c0016de9:	31 d2                	xor    edx,edx
c0016deb:	5b                   	pop    ebx
c0016dec:	5e                   	pop    esi
c0016ded:	c3                   	ret    
c0016dee:	59                   	pop    ecx
c0016def:	b8 02 00 00 00       	mov    eax,0x2
c0016df4:	31 d2                	xor    edx,edx
c0016df6:	5b                   	pop    ebx
c0016df7:	5e                   	pop    esi
c0016df8:	c3                   	ret    

c0016df9 <sysCallUSleep(regs*)>:
c0016df9:	83 ec 1c             	sub    esp,0x1c
c0016dfc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016e00:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016e03:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016e06:	6a 00                	push   0x0
c0016e08:	6a 64                	push   0x64
c0016e0a:	52                   	push   edx
c0016e0b:	50                   	push   eax
c0016e0c:	e8 7f c1 00 00       	call   c0022f90 <__udivdi3>
c0016e11:	83 c4 14             	add    esp,0x14
c0016e14:	50                   	push   eax
c0016e15:	e8 da 23 00 00       	call   c00191f4 <milliTenthSleep(unsigned int)>
c0016e1a:	31 c0                	xor    eax,eax
c0016e1c:	31 d2                	xor    edx,edx
c0016e1e:	83 c4 1c             	add    esp,0x1c
c0016e21:	c3                   	ret    

c0016e22 <sysCallSpawn(regs*)>:
c0016e22:	56                   	push   esi
c0016e23:	53                   	push   ebx
c0016e24:	50                   	push   eax
c0016e25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e29:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e2c:	85 c0                	test   eax,eax
c0016e2e:	75 08                	jne    c0016e38 <sysCallSpawn(regs*)+0x16>
c0016e30:	59                   	pop    ecx
c0016e31:	31 c0                	xor    eax,eax
c0016e33:	31 d2                	xor    edx,edx
c0016e35:	5b                   	pop    ebx
c0016e36:	5e                   	pop    esi
c0016e37:	c3                   	ret    
c0016e38:	83 ec 0c             	sub    esp,0xc
c0016e3b:	68 1f 07 00 00       	push   0x71f
c0016e40:	e8 a2 2f ff ff       	call   c0009de7 <malloc>
c0016e45:	83 c4 10             	add    esp,0x10
c0016e48:	89 c6                	mov    esi,eax
c0016e4a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016e4d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016e50:	85 c0                	test   eax,eax
c0016e52:	75 32                	jne    c0016e86 <sysCallSpawn(regs*)+0x64>
c0016e54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e59:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e5c:	52                   	push   edx
c0016e5d:	50                   	push   eax
c0016e5e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016e61:	56                   	push   esi
c0016e62:	e8 85 1a 00 00       	call   c00188ec <Process::Process(char const*, Process*, char**)>
c0016e67:	83 c4 10             	add    esp,0x10
c0016e6a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016e71:	75 bd                	jne    c0016e30 <sysCallSpawn(regs*)+0xe>
c0016e73:	83 ec 0c             	sub    esp,0xc
c0016e76:	56                   	push   esi
c0016e77:	e8 5c 1f 00 00       	call   c0018dd8 <Process::createUserThread()>
c0016e7c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e7e:	83 c4 10             	add    esp,0x10
c0016e81:	99                   	cdq    
c0016e82:	59                   	pop    ecx
c0016e83:	5b                   	pop    ebx
c0016e84:	5e                   	pop    esi
c0016e85:	c3                   	ret    
c0016e86:	31 c0                	xor    eax,eax
c0016e88:	eb d2                	jmp    c0016e5c <sysCallSpawn(regs*)+0x3a>

c0016e8a <sysCallGetEnv(regs*)>:
c0016e8a:	57                   	push   edi
c0016e8b:	56                   	push   esi
c0016e8c:	53                   	push   ebx
c0016e8d:	83 ec 1c             	sub    esp,0x1c
c0016e90:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016e94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e99:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016e9c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016e9f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016ea2:	e8 5a e2 ff ff       	call   c0015101 <Krnl::getProcessTotalEnvCount(Process*)>
c0016ea7:	83 c4 10             	add    esp,0x10
c0016eaa:	39 c7                	cmp    edi,eax
c0016eac:	7c 14                	jl     c0016ec2 <sysCallGetEnv(regs*)+0x38>
c0016eae:	85 f6                	test   esi,esi
c0016eb0:	75 0b                	jne    c0016ebd <sysCallGetEnv(regs*)+0x33>
c0016eb2:	83 c4 10             	add    esp,0x10
c0016eb5:	31 c0                	xor    eax,eax
c0016eb7:	5b                   	pop    ebx
c0016eb8:	31 d2                	xor    edx,edx
c0016eba:	5e                   	pop    esi
c0016ebb:	5f                   	pop    edi
c0016ebc:	c3                   	ret    
c0016ebd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016ec0:	eb f0                	jmp    c0016eb2 <sysCallGetEnv(regs*)+0x28>
c0016ec2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ec6:	52                   	push   edx
c0016ec7:	57                   	push   edi
c0016ec8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ece:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016ed1:	50                   	push   eax
c0016ed2:	e8 4a e2 ff ff       	call   c0015121 <Krnl::getProcessEnvPair(Process*, int)>
c0016ed7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016eda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ede:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016ee2:	83 c4 0c             	add    esp,0xc
c0016ee5:	85 c9                	test   ecx,ecx
c0016ee7:	75 23                	jne    c0016f0c <sysCallGetEnv(regs*)+0x82>
c0016ee9:	83 ec 0c             	sub    esp,0xc
c0016eec:	50                   	push   eax
c0016eed:	e8 be 97 fe ff       	call   c00006b0 <strlen>
c0016ef2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016ef5:	89 c3                	mov    ebx,eax
c0016ef7:	e8 b4 97 fe ff       	call   c00006b0 <strlen>
c0016efc:	83 c4 10             	add    esp,0x10
c0016eff:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016f03:	83 c4 10             	add    esp,0x10
c0016f06:	31 d2                	xor    edx,edx
c0016f08:	5b                   	pop    ebx
c0016f09:	5e                   	pop    esi
c0016f0a:	5f                   	pop    edi
c0016f0b:	c3                   	ret    
c0016f0c:	83 ec 08             	sub    esp,0x8
c0016f0f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016f12:	50                   	push   eax
c0016f13:	56                   	push   esi
c0016f14:	e8 37 98 fe ff       	call   c0000750 <strcpy>
c0016f19:	58                   	pop    eax
c0016f1a:	5a                   	pop    edx
c0016f1b:	68 53 6a 02 c0       	push   0xc0026a53
c0016f20:	56                   	push   esi
c0016f21:	e8 6a 99 fe ff       	call   c0000890 <strcat>
c0016f26:	59                   	pop    ecx
c0016f27:	5b                   	pop    ebx
c0016f28:	57                   	push   edi
c0016f29:	56                   	push   esi
c0016f2a:	e8 61 99 fe ff       	call   c0000890 <strcat>
c0016f2f:	83 c4 10             	add    esp,0x10
c0016f32:	e9 7b ff ff ff       	jmp    c0016eb2 <sysCallGetEnv(regs*)+0x28>

c0016f37 <sysAppSettings(regs*)>:
c0016f37:	57                   	push   edi
c0016f38:	56                   	push   esi
c0016f39:	56                   	push   esi
c0016f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f3e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016f41:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016f47:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016f4c:	66 3d c0 09          	cmp    ax,0x9c0
c0016f50:	75 2e                	jne    c0016f80 <sysAppSettings(regs*)+0x49>
c0016f52:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016f58:	83 e0 1f             	and    eax,0x1f
c0016f5b:	3c 01                	cmp    al,0x1
c0016f5d:	74 2c                	je     c0016f8b <sysAppSettings(regs*)+0x54>
c0016f5f:	3c 07                	cmp    al,0x7
c0016f61:	0f 84 b3 00 00 00    	je     c001701a <sysAppSettings(regs*)+0xe3>
c0016f67:	84 c0                	test   al,al
c0016f69:	0f 84 d2 00 00 00    	je     c0017041 <sysAppSettings(regs*)+0x10a>
c0016f6f:	3c 08                	cmp    al,0x8
c0016f71:	74 63                	je     c0016fd6 <sysAppSettings(regs*)+0x9f>
c0016f73:	59                   	pop    ecx
c0016f74:	0f b6 c0             	movzx  eax,al
c0016f77:	5e                   	pop    esi
c0016f78:	05 e8 03 00 00       	add    eax,0x3e8
c0016f7d:	5f                   	pop    edi
c0016f7e:	99                   	cdq    
c0016f7f:	c3                   	ret    
c0016f80:	b8 01 00 00 00       	mov    eax,0x1
c0016f85:	59                   	pop    ecx
c0016f86:	31 d2                	xor    edx,edx
c0016f88:	5e                   	pop    esi
c0016f89:	5f                   	pop    edi
c0016f8a:	c3                   	ret    
c0016f8b:	50                   	push   eax
c0016f8c:	68 00 01 00 00       	push   0x100
c0016f91:	6a 00                	push   0x0
c0016f93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f9b:	83 c0 0c             	add    eax,0xc
c0016f9e:	50                   	push   eax
c0016f9f:	e8 f0 96 fe ff       	call   c0000694 <memset>
c0016fa4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fa9:	b9 ff 00 00 00       	mov    ecx,0xff
c0016fae:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016fb1:	83 c7 0c             	add    edi,0xc
c0016fb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fbb:	5a                   	pop    edx
c0016fbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fbf:	59                   	pop    ecx
c0016fc0:	8d 50 0c             	lea    edx,[eax+0xc]
c0016fc3:	52                   	push   edx
c0016fc4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016fca:	e8 b1 3d ff ff       	call   c000ad80 <VgaText::setTitle(char*)>
c0016fcf:	83 c4 10             	add    esp,0x10
c0016fd2:	31 c0                	xor    eax,eax
c0016fd4:	eb af                	jmp    c0016f85 <sysAppSettings(regs*)+0x4e>
c0016fd6:	83 ec 08             	sub    esp,0x8
c0016fd9:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016fdf:	83 e0 0f             	and    eax,0xf
c0016fe2:	50                   	push   eax
c0016fe3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fe8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016feb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016ff1:	e8 7a 3d ff ff       	call   c000ad70 <VgaText::setTitleColour(VgaColour)>
c0016ff6:	5f                   	pop    edi
c0016ff7:	58                   	pop    eax
c0016ff8:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016ffe:	c1 e8 04             	shr    eax,0x4
c0017001:	83 e0 0f             	and    eax,0xf
c0017004:	50                   	push   eax
c0017005:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001700a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001700d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0017013:	e8 48 3d ff ff       	call   c000ad60 <VgaText::setTitleTextColour(VgaColour)>
c0017018:	eb b5                	jmp    c0016fcf <sysAppSettings(regs*)+0x98>
c001701a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001701f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017022:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017028:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001702e:	c0 e8 06             	shr    al,0x6
c0017031:	83 e0 01             	and    eax,0x1
c0017034:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001703a:	31 c0                	xor    eax,eax
c001703c:	e9 44 ff ff ff       	jmp    c0016f85 <sysAppSettings(regs*)+0x4e>
c0017041:	b8 02 00 00 00       	mov    eax,0x2
c0017046:	e9 3a ff ff ff       	jmp    c0016f85 <sysAppSettings(regs*)+0x4e>

c001704b <sysSetFatAttrib(regs*)>:
c001704b:	57                   	push   edi
c001704c:	56                   	push   esi
c001704d:	53                   	push   ebx
c001704e:	83 ec 1c             	sub    esp,0x1c
c0017051:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017055:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0017058:	68 14 01 00 00       	push   0x114
c001705d:	e8 85 2d ff ff       	call   c0009de7 <malloc>
c0017062:	83 c4 0c             	add    esp,0xc
c0017065:	89 c3                	mov    ebx,eax
c0017067:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001706c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001706f:	57                   	push   edi
c0017070:	53                   	push   ebx
c0017071:	e8 c8 65 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0017076:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0017079:	83 c4 0c             	add    esp,0xc
c001707c:	0f b6 d4             	movzx  edx,ah
c001707f:	0f b6 c0             	movzx  eax,al
c0017082:	52                   	push   edx
c0017083:	50                   	push   eax
c0017084:	53                   	push   ebx
c0017085:	e8 a0 68 ff ff       	call   c000d92a <File::chfatattr(unsigned char, unsigned char)>
c001708a:	83 c4 10             	add    esp,0x10
c001708d:	85 db                	test   ebx,ebx
c001708f:	74 14                	je     c00170a5 <sysSetFatAttrib(regs*)+0x5a>
c0017091:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017095:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017097:	83 ec 0c             	sub    esp,0xc
c001709a:	53                   	push   ebx
c001709b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001709e:	83 c4 10             	add    esp,0x10
c00170a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170a5:	85 c0                	test   eax,eax
c00170a7:	0f 95 c0             	setne  al
c00170aa:	31 d2                	xor    edx,edx
c00170ac:	0f b6 c0             	movzx  eax,al
c00170af:	f7 d8                	neg    eax
c00170b1:	83 d2 00             	adc    edx,0x0
c00170b4:	83 c4 10             	add    esp,0x10
c00170b7:	f7 da                	neg    edx
c00170b9:	5b                   	pop    ebx
c00170ba:	5e                   	pop    esi
c00170bb:	5f                   	pop    edi
c00170bc:	c3                   	ret    

c00170bd <sysPipe(regs*)>:
c00170bd:	57                   	push   edi
c00170be:	56                   	push   esi
c00170bf:	53                   	push   ebx
c00170c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170c4:	83 ec 0c             	sub    esp,0xc
c00170c7:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00170ca:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00170cd:	6a 20                	push   0x20
c00170cf:	e8 13 2d ff ff       	call   c0009de7 <malloc>
c00170d4:	89 c3                	mov    ebx,eax
c00170d6:	58                   	pop    eax
c00170d7:	5a                   	pop    edx
c00170d8:	68 00 50 00 00       	push   0x5000
c00170dd:	53                   	push   ebx
c00170de:	e8 15 3a ff ff       	call   c000aaf8 <Pipe::Pipe(int)>
c00170e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00170e6:	e8 77 48 ff ff       	call   c000b962 <UnixFile::getFileDescriptor()>
c00170eb:	89 07                	mov    DWORD PTR [edi],eax
c00170ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00170f0:	e8 6d 48 ff ff       	call   c000b962 <UnixFile::getFileDescriptor()>
c00170f5:	83 c4 10             	add    esp,0x10
c00170f8:	89 06                	mov    DWORD PTR [esi],eax
c00170fa:	31 d2                	xor    edx,edx
c00170fc:	5b                   	pop    ebx
c00170fd:	31 c0                	xor    eax,eax
c00170ff:	5e                   	pop    esi
c0017100:	5f                   	pop    edi
c0017101:	c3                   	ret    

c0017102 <sysGetUnixTime(regs*)>:
c0017102:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0017107:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001710d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017111:	e9 48 70 ff ff       	jmp    c000e15e <Clock::timeInSecondsLocal()>

c0017116 <string_ends_with(char const*, char const*)>:
c0017116:	57                   	push   edi
c0017117:	56                   	push   esi
c0017118:	53                   	push   ebx
c0017119:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001711d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017121:	83 ec 0c             	sub    esp,0xc
c0017124:	53                   	push   ebx
c0017125:	e8 86 95 fe ff       	call   c00006b0 <strlen>
c001712a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001712d:	89 c6                	mov    esi,eax
c001712f:	e8 7c 95 fe ff       	call   c00006b0 <strlen>
c0017134:	83 c4 10             	add    esp,0x10
c0017137:	39 c6                	cmp    esi,eax
c0017139:	7d 06                	jge    c0017141 <string_ends_with(char const*, char const*)+0x2b>
c001713b:	5b                   	pop    ebx
c001713c:	31 c0                	xor    eax,eax
c001713e:	5e                   	pop    esi
c001713f:	5f                   	pop    edi
c0017140:	c3                   	ret    
c0017141:	83 ec 08             	sub    esp,0x8
c0017144:	29 c6                	sub    esi,eax
c0017146:	57                   	push   edi
c0017147:	01 f3                	add    ebx,esi
c0017149:	53                   	push   ebx
c001714a:	e8 8d 96 fe ff       	call   c00007dc <strcmp>
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	85 c0                	test   eax,eax
c0017154:	5b                   	pop    ebx
c0017155:	0f 94 c0             	sete   al
c0017158:	5e                   	pop    esi
c0017159:	0f b6 c0             	movzx  eax,al
c001715c:	5f                   	pop    edi
c001715d:	c3                   	ret    

c001715e <sysCallOpen(regs*)>:
c001715e:	56                   	push   esi
c001715f:	53                   	push   ebx
c0017160:	81 ec 04 01 00 00    	sub    esp,0x104
c0017166:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001716d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0017170:	85 c9                	test   ecx,ecx
c0017172:	0f 84 ad 01 00 00    	je     c0017325 <sysCallOpen(regs*)+0x1c7>
c0017178:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001717b:	85 c0                	test   eax,eax
c001717d:	0f 84 a2 01 00 00    	je     c0017325 <sysCallOpen(regs*)+0x1c7>
c0017183:	52                   	push   edx
c0017184:	68 55 6a 02 c0       	push   0xc0026a55
c0017189:	50                   	push   eax
c001718a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001718e:	56                   	push   esi
c001718f:	e8 00 63 ff ff       	call   c000d494 <Fs::standardiseFiles(char*, char const*, char const*)>
c0017194:	89 34 24             	mov    DWORD PTR [esp],esi
c0017197:	e8 14 95 fe ff       	call   c00006b0 <strlen>
c001719c:	83 c4 10             	add    esp,0x10
c001719f:	48                   	dec    eax
c00171a0:	74 1d                	je     c00171bf <sysCallOpen(regs*)+0x61>
c00171a2:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00171a5:	eb 0f                	jmp    c00171b6 <sysCallOpen(regs*)+0x58>
c00171a7:	80 fa 3a             	cmp    dl,0x3a
c00171aa:	74 0f                	je     c00171bb <sysCallOpen(regs*)+0x5d>
c00171ac:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00171b0:	48                   	dec    eax
c00171b1:	74 0c                	je     c00171bf <sysCallOpen(regs*)+0x61>
c00171b3:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00171b6:	80 fa 2e             	cmp    dl,0x2e
c00171b9:	75 ec                	jne    c00171a7 <sysCallOpen(regs*)+0x49>
c00171bb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00171bf:	83 ec 08             	sub    esp,0x8
c00171c2:	68 59 6a 02 c0       	push   0xc0026a59
c00171c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00171ca:	e8 47 ff ff ff       	call   c0017116 <string_ends_with(char const*, char const*)>
c00171cf:	83 c4 10             	add    esp,0x10
c00171d2:	85 c0                	test   eax,eax
c00171d4:	74 1d                	je     c00171f3 <sysCallOpen(regs*)+0x95>
c00171d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00171d9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00171df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00171e6:	81 c4 04 01 00 00    	add    esp,0x104
c00171ec:	31 c0                	xor    eax,eax
c00171ee:	31 d2                	xor    edx,edx
c00171f0:	5b                   	pop    ebx
c00171f1:	5e                   	pop    esi
c00171f2:	c3                   	ret    
c00171f3:	83 ec 08             	sub    esp,0x8
c00171f6:	68 5e 6a 02 c0       	push   0xc0026a5e
c00171fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00171fe:	e8 13 ff ff ff       	call   c0017116 <string_ends_with(char const*, char const*)>
c0017203:	83 c4 10             	add    esp,0x10
c0017206:	85 c0                	test   eax,eax
c0017208:	75 cc                	jne    c00171d6 <sysCallOpen(regs*)+0x78>
c001720a:	83 ec 08             	sub    esp,0x8
c001720d:	68 5a 6a 02 c0       	push   0xc0026a5a
c0017212:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017215:	e8 c2 95 fe ff       	call   c00007dc <strcmp>
c001721a:	83 c4 10             	add    esp,0x10
c001721d:	85 c0                	test   eax,eax
c001721f:	74 b5                	je     c00171d6 <sysCallOpen(regs*)+0x78>
c0017221:	83 ec 08             	sub    esp,0x8
c0017224:	68 59 6a 02 c0       	push   0xc0026a59
c0017229:	56                   	push   esi
c001722a:	e8 e7 fe ff ff       	call   c0017116 <string_ends_with(char const*, char const*)>
c001722f:	83 c4 10             	add    esp,0x10
c0017232:	85 c0                	test   eax,eax
c0017234:	75 a0                	jne    c00171d6 <sysCallOpen(regs*)+0x78>
c0017236:	83 ec 08             	sub    esp,0x8
c0017239:	68 63 6a 02 c0       	push   0xc0026a63
c001723e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017241:	e8 d0 fe ff ff       	call   c0017116 <string_ends_with(char const*, char const*)>
c0017246:	83 c4 10             	add    esp,0x10
c0017249:	85 c0                	test   eax,eax
c001724b:	0f 85 e7 00 00 00    	jne    c0017338 <sysCallOpen(regs*)+0x1da>
c0017251:	83 ec 08             	sub    esp,0x8
c0017254:	68 68 6a 02 c0       	push   0xc0026a68
c0017259:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001725c:	e8 b5 fe ff ff       	call   c0017116 <string_ends_with(char const*, char const*)>
c0017261:	83 c4 10             	add    esp,0x10
c0017264:	85 c0                	test   eax,eax
c0017266:	0f 85 cc 00 00 00    	jne    c0017338 <sysCallOpen(regs*)+0x1da>
c001726c:	83 ec 08             	sub    esp,0x8
c001726f:	68 64 6a 02 c0       	push   0xc0026a64
c0017274:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017277:	e8 60 95 fe ff       	call   c00007dc <strcmp>
c001727c:	83 c4 10             	add    esp,0x10
c001727f:	85 c0                	test   eax,eax
c0017281:	0f 84 b1 00 00 00    	je     c0017338 <sysCallOpen(regs*)+0x1da>
c0017287:	83 ec 08             	sub    esp,0x8
c001728a:	68 63 6a 02 c0       	push   0xc0026a63
c001728f:	56                   	push   esi
c0017290:	e8 81 fe ff ff       	call   c0017116 <string_ends_with(char const*, char const*)>
c0017295:	83 c4 10             	add    esp,0x10
c0017298:	85 c0                	test   eax,eax
c001729a:	0f 85 98 00 00 00    	jne    c0017338 <sysCallOpen(regs*)+0x1da>
c00172a0:	83 ec 0c             	sub    esp,0xc
c00172a3:	68 14 01 00 00       	push   0x114
c00172a8:	e8 3a 2b ff ff       	call   c0009de7 <malloc>
c00172ad:	83 c4 0c             	add    esp,0xc
c00172b0:	89 c6                	mov    esi,eax
c00172b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172b7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00172ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00172bd:	56                   	push   esi
c00172be:	e8 7b 63 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c00172c3:	83 c4 10             	add    esp,0x10
c00172c6:	85 f6                	test   esi,esi
c00172c8:	74 5b                	je     c0017325 <sysCallOpen(regs*)+0x1c7>
c00172ca:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00172cd:	0f b6 c2             	movzx  eax,dl
c00172d0:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00172d3:	89 d0                	mov    eax,edx
c00172d5:	83 e0 01             	and    eax,0x1
c00172d8:	f6 c2 02             	test   dl,0x2
c00172db:	74 03                	je     c00172e0 <sysCallOpen(regs*)+0x182>
c00172dd:	83 c8 02             	or     eax,0x2
c00172e0:	f6 c2 04             	test   dl,0x4
c00172e3:	74 03                	je     c00172e8 <sysCallOpen(regs*)+0x18a>
c00172e5:	83 c8 04             	or     eax,0x4
c00172e8:	f6 c2 08             	test   dl,0x8
c00172eb:	74 03                	je     c00172f0 <sysCallOpen(regs*)+0x192>
c00172ed:	83 c8 0a             	or     eax,0xa
c00172f0:	83 e2 10             	and    edx,0x10
c00172f3:	74 03                	je     c00172f8 <sysCallOpen(regs*)+0x19a>
c00172f5:	83 c8 12             	or     eax,0x12
c00172f8:	83 ec 08             	sub    esp,0x8
c00172fb:	50                   	push   eax
c00172fc:	56                   	push   esi
c00172fd:	e8 16 64 ff ff       	call   c000d718 <File::open(FileOpenMode)>
c0017302:	83 c4 10             	add    esp,0x10
c0017305:	85 c0                	test   eax,eax
c0017307:	75 1c                	jne    c0017325 <sysCallOpen(regs*)+0x1c7>
c0017309:	83 ec 0c             	sub    esp,0xc
c001730c:	56                   	push   esi
c001730d:	e8 50 46 ff ff       	call   c000b962 <UnixFile::getFileDescriptor()>
c0017312:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	89 02                	mov    DWORD PTR [edx],eax
c001731a:	c1 f8 1f             	sar    eax,0x1f
c001731d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017320:	e9 c1 fe ff ff       	jmp    c00171e6 <sysCallOpen(regs*)+0x88>
c0017325:	81 c4 04 01 00 00    	add    esp,0x104
c001732b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017330:	ba ff ff ff ff       	mov    edx,0xffffffff
c0017335:	5b                   	pop    ebx
c0017336:	5e                   	pop    esi
c0017337:	c3                   	ret    
c0017338:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001733b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017341:	e9 99 fe ff ff       	jmp    c00171df <sysCallOpen(regs*)+0x81>

c0017346 <Sys::loadSyscalls()>:
c0017346:	c7 05 20 97 02 c0 b7 65 01 c0 	mov    DWORD PTR ds:0xc0029720,0xc00165b7
c0017350:	c7 05 24 97 02 c0 ac 61 01 c0 	mov    DWORD PTR ds:0xc0029724,0xc00161ac
c001735a:	c7 05 28 97 02 c0 9d 63 01 c0 	mov    DWORD PTR ds:0xc0029728,0xc001639d
c0017364:	c7 05 2c 97 02 c0 ed 64 01 c0 	mov    DWORD PTR ds:0xc002972c,0xc00164ed
c001736e:	c7 05 30 97 02 c0 35 63 01 c0 	mov    DWORD PTR ds:0xc0029730,0xc0016335
c0017378:	c7 05 34 97 02 c0 e3 61 01 c0 	mov    DWORD PTR ds:0xc0029734,0xc00161e3
c0017382:	c7 05 38 97 02 c0 c4 61 01 c0 	mov    DWORD PTR ds:0xc0029738,0xc00161c4
c001738c:	c7 05 3c 97 02 c0 f2 63 01 c0 	mov    DWORD PTR ds:0xc002973c,0xc00163f2
c0017396:	c7 05 44 97 02 c0 7a 6a 01 c0 	mov    DWORD PTR ds:0xc0029744,0xc0016a7a
c00173a0:	c7 05 40 97 02 c0 5e 71 01 c0 	mov    DWORD PTR ds:0xc0029740,0xc001715e
c00173aa:	c7 05 48 97 02 c0 da 6a 01 c0 	mov    DWORD PTR ds:0xc0029748,0xc0016ada
c00173b4:	c7 05 4c 97 02 c0 bd 67 01 c0 	mov    DWORD PTR ds:0xc002974c,0xc00167bd
c00173be:	c7 05 50 97 02 c0 ef 65 01 c0 	mov    DWORD PTR ds:0xc0029750,0xc00165ef
c00173c8:	c7 05 54 97 02 c0 f4 65 01 c0 	mov    DWORD PTR ds:0xc0029754,0xc00165f4
c00173d2:	c7 05 58 97 02 c0 a3 6b 01 c0 	mov    DWORD PTR ds:0xc0029758,0xc0016ba3
c00173dc:	c7 05 5c 97 02 c0 4f 6b 01 c0 	mov    DWORD PTR ds:0xc002975c,0xc0016b4f
c00173e6:	c7 05 60 97 02 c0 96 68 01 c0 	mov    DWORD PTR ds:0xc0029760,0xc0016896
c00173f0:	c7 05 64 97 02 c0 ed 68 01 c0 	mov    DWORD PTR ds:0xc0029764,0xc00168ed
c00173fa:	c7 05 68 97 02 c0 59 69 01 c0 	mov    DWORD PTR ds:0xc0029768,0xc0016959
c0017404:	c7 05 6c 97 02 c0 f9 65 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc00165f9
c001740e:	c7 05 70 97 02 c0 13 6c 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc0016c13
c0017418:	c7 05 74 97 02 c0 2d 6c 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016c2d
c0017422:	c7 05 78 97 02 c0 2d 6c 01 c0 	mov    DWORD PTR ds:0xc0029778,0xc0016c2d
c001742c:	c7 05 7c 97 02 c0 62 6c 01 c0 	mov    DWORD PTR ds:0xc002977c,0xc0016c62
c0017436:	c7 05 80 97 02 c0 c6 6c 01 c0 	mov    DWORD PTR ds:0xc0029780,0xc0016cc6
c0017440:	c7 05 84 97 02 c0 03 66 01 c0 	mov    DWORD PTR ds:0xc0029784,0xc0016603
c001744a:	c7 05 88 97 02 c0 2a 6d 01 c0 	mov    DWORD PTR ds:0xc0029788,0xc0016d2a
c0017454:	c7 05 8c 97 02 c0 7a 67 01 c0 	mov    DWORD PTR ds:0xc002978c,0xc001677a
c001745e:	c7 05 90 97 02 c0 76 6d 01 c0 	mov    DWORD PTR ds:0xc0029790,0xc0016d76
c0017468:	c7 05 94 97 02 c0 3c 68 01 c0 	mov    DWORD PTR ds:0xc0029794,0xc001683c
c0017472:	c7 05 98 97 02 c0 f9 6d 01 c0 	mov    DWORD PTR ds:0xc0029798,0xc0016df9
c001747c:	c7 05 9c 97 02 c0 cb 69 01 c0 	mov    DWORD PTR ds:0xc002979c,0xc00169cb
c0017486:	c7 05 a0 97 02 c0 22 6e 01 c0 	mov    DWORD PTR ds:0xc00297a0,0xc0016e22
c0017490:	c7 05 a4 97 02 c0 8a 6e 01 c0 	mov    DWORD PTR ds:0xc00297a4,0xc0016e8a
c001749a:	c7 05 a8 97 02 c0 37 6f 01 c0 	mov    DWORD PTR ds:0xc00297a8,0xc0016f37
c00174a4:	c7 05 ac 97 02 c0 13 66 01 c0 	mov    DWORD PTR ds:0xc00297ac,0xc0016613
c00174ae:	c7 05 b0 97 02 c0 7d 66 01 c0 	mov    DWORD PTR ds:0xc00297b0,0xc001667d
c00174b8:	c7 05 b4 97 02 c0 c7 66 01 c0 	mov    DWORD PTR ds:0xc00297b4,0xc00166c7
c00174c2:	c7 05 b8 97 02 c0 4b 70 01 c0 	mov    DWORD PTR ds:0xc00297b8,0xc001704b
c00174cc:	c7 05 bc 97 02 c0 48 6c 01 c0 	mov    DWORD PTR ds:0xc00297bc,0xc0016c48
c00174d6:	c7 05 c0 97 02 c0 1c 67 01 c0 	mov    DWORD PTR ds:0xc00297c0,0xc001671c
c00174e0:	c7 05 c4 97 02 c0 bd 70 01 c0 	mov    DWORD PTR ds:0xc00297c4,0xc00170bd
c00174ea:	c7 05 c8 97 02 c0 02 71 01 c0 	mov    DWORD PTR ds:0xc00297c8,0xc0017102
c00174f4:	c7 05 cc 97 02 c0 8d 62 01 c0 	mov    DWORD PTR ds:0xc00297cc,0xc001628d
c00174fe:	c7 05 d0 97 02 c0 0e 64 01 c0 	mov    DWORD PTR ds:0xc00297d0,0xc001640e
c0017508:	c7 05 d4 97 02 c0 a3 64 01 c0 	mov    DWORD PTR ds:0xc00297d4,0xc00164a3
c0017512:	c7 05 d8 97 02 c0 76 61 01 c0 	mov    DWORD PTR ds:0xc00297d8,0xc0016176
c001751c:	c7 05 dc 97 02 c0 55 65 01 c0 	mov    DWORD PTR ds:0xc00297dc,0xc0016555
c0017526:	c7 05 e0 97 02 c0 ef 61 01 c0 	mov    DWORD PTR ds:0xc00297e0,0xc00161ef
c0017530:	c7 05 e4 97 02 c0 09 62 01 c0 	mov    DWORD PTR ds:0xc00297e4,0xc0016209
c001753a:	c3                   	ret    

c001753b <Sys::systemCall(regs*, void*)>:
c001753b:	53                   	push   ebx
c001753c:	83 ec 08             	sub    esp,0x8
c001753f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017543:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017546:	83 f8 7f             	cmp    eax,0x7f
c0017549:	77 16                	ja     c0017561 <Sys::systemCall(regs*, void*)+0x26>
c001754b:	8b 14 85 20 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd68e0]
c0017552:	85 d2                	test   edx,edx
c0017554:	74 0b                	je     c0017561 <Sys::systemCall(regs*, void*)+0x26>
c0017556:	83 ec 0c             	sub    esp,0xc
c0017559:	53                   	push   ebx
c001755a:	ff d2                	call   edx
c001755c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001755f:	eb 0d                	jmp    c001756e <Sys::systemCall(regs*, void*)+0x33>
c0017561:	52                   	push   edx
c0017562:	52                   	push   edx
c0017563:	50                   	push   eax
c0017564:	68 6d 6a 02 c0       	push   0xc0026a6d
c0017569:	e8 65 5b ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001756e:	83 c4 10             	add    esp,0x10
c0017571:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017576:	31 d2                	xor    edx,edx
c0017578:	83 c4 08             	add    esp,0x8
c001757b:	5b                   	pop    ebx
c001757c:	c3                   	ret    

c001757d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001757d:	55                   	push   ebp
c001757e:	57                   	push   edi
c001757f:	56                   	push   esi
c0017580:	53                   	push   ebx
c0017581:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0017587:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001758e:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0017595:	85 c0                	test   eax,eax
c0017597:	0f 95 c1             	setne  cl
c001759a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00175a2:	0f 94 c2             	sete   dl
c00175a5:	84 d1                	test   cl,dl
c00175a7:	74 23                	je     c00175cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00175a9:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00175af:	74 1b                	je     c00175cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00175b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175b7:	89 da                	mov    edx,ebx
c00175b9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00175bf:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00175c5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00175cc:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00175d3:	05 ff 0f 00 00       	add    eax,0xfff
c00175d8:	83 ec 0c             	sub    esp,0xc
c00175db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175df:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00175e5:	c1 e8 0c             	shr    eax,0xc
c00175e8:	89 fe                	mov    esi,edi
c00175ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175ee:	c1 ee 0c             	shr    esi,0xc
c00175f1:	6a 01                	push   0x1
c00175f3:	e8 b5 47 ff ff       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c00175f8:	89 c5                	mov    ebp,eax
c00175fa:	58                   	pop    eax
c00175fb:	5a                   	pop    edx
c00175fc:	56                   	push   esi
c00175fd:	68 81 6a 02 c0       	push   0xc0026a81
c0017602:	e8 cc 5a ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0017607:	59                   	pop    ecx
c0017608:	58                   	pop    eax
c0017609:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001760d:	68 93 6a 02 c0       	push   0xc0026a93
c0017612:	e8 bc 5a ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0017617:	83 c4 10             	add    esp,0x10
c001761a:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0017620:	0f 86 31 01 00 00    	jbe    c0017757 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0017626:	c1 e6 0c             	shl    esi,0xc
c0017629:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001762c:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001762f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017633:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001763a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001763d:	01 df                	add    edi,ebx
c001763f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0017642:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017646:	0f 84 08 01 00 00    	je     c0017754 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001764c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0017652:	76 05                	jbe    c0017659 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0017654:	bf 00 10 00 00       	mov    edi,0x1000
c0017659:	83 ec 0c             	sub    esp,0xc
c001765c:	31 d2                	xor    edx,edx
c001765e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0017665:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017667:	8d 44 24 28          	lea    eax,[esp+0x28]
c001766b:	50                   	push   eax
c001766c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0017670:	56                   	push   esi
c0017671:	52                   	push   edx
c0017672:	57                   	push   edi
c0017673:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001767a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001767d:	83 c4 20             	add    esp,0x20
c0017680:	85 c0                	test   eax,eax
c0017682:	74 0a                	je     c001768e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0017684:	53                   	push   ebx
c0017685:	53                   	push   ebx
c0017686:	50                   	push   eax
c0017687:	68 a5 6a 02 c0       	push   0xc0026aa5
c001768c:	eb 0f                	jmp    c001769d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001768e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017692:	74 20                	je     c00176b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0017694:	51                   	push   ecx
c0017695:	51                   	push   ecx
c0017696:	6a 00                	push   0x0
c0017698:	68 d0 6a 02 c0       	push   0xc0026ad0
c001769d:	e8 31 5a ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00176a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00176a5:	e8 33 4a ff ff       	call   c000c0dd <Virt::freeKernelVirtualPages(unsigned long)>
c00176aa:	83 c4 10             	add    esp,0x10
c00176ad:	31 c0                	xor    eax,eax
c00176af:	e9 68 01 00 00       	jmp    c001781c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00176b4:	fa                   	cli    
c00176b5:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00176bb:	e8 de 2d ff ff       	call   c000a49e <Phys::allocatePage()>
c00176c0:	6a 07                	push   0x7
c00176c2:	89 c7                	mov    edi,eax
c00176c4:	55                   	push   ebp
c00176c5:	50                   	push   eax
c00176c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00176ce:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00176d4:	e8 7b 4d ff ff       	call   c000c454 <VAS::mapPage(unsigned long, unsigned long, int)>
c00176d9:	83 c4 0c             	add    esp,0xc
c00176dc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00176e3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00176e9:	6a 00                	push   0x0
c00176eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00176f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00176f9:	e8 b0 4b ff ff       	call   c000c2ae <VAS::mapOtherVASIn(bool, VAS*)>
c00176fe:	58                   	pop    eax
c00176ff:	5a                   	pop    edx
c0017700:	68 07 0c 00 00       	push   0xc07
c0017705:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017709:	57                   	push   edi
c001770a:	89 ef                	mov    edi,ebp
c001770c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0017713:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017719:	6a 00                	push   0x0
c001771b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017720:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017723:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017729:	e8 e2 50 ff ff       	call   c000c810 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001772e:	b9 00 10 00 00       	mov    ecx,0x1000
c0017733:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017735:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001773a:	83 c4 20             	add    esp,0x20
c001773d:	48                   	dec    eax
c001773e:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0017743:	85 c0                	test   eax,eax
c0017745:	75 01                	jne    c0017748 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0017747:	fb                   	sti    
c0017748:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001774f:	e9 df fe ff ff       	jmp    c0017633 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0017754:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0017757:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001775f:	0f 86 a9 00 00 00    	jbe    c001780e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017765:	fa                   	cli    
c0017766:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c001776c:	51                   	push   ecx
c001776d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0017774:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001777a:	6a 00                	push   0x0
c001777c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017781:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017784:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001778a:	e8 1f 4b ff ff       	call   c000c2ae <VAS::mapOtherVASIn(bool, VAS*)>
c001778f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017793:	c1 e6 0c             	shl    esi,0xc
c0017796:	01 de                	add    esi,ebx
c0017798:	83 c4 10             	add    esp,0x10
c001779b:	39 de                	cmp    esi,ebx
c001779d:	74 61                	je     c0017800 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001779f:	e8 fa 2c ff ff       	call   c000a49e <Phys::allocatePage()>
c00177a4:	6a 07                	push   0x7
c00177a6:	89 c7                	mov    edi,eax
c00177a8:	55                   	push   ebp
c00177a9:	50                   	push   eax
c00177aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177b2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177b8:	e8 97 4c ff ff       	call   c000c454 <VAS::mapPage(unsigned long, unsigned long, int)>
c00177bd:	58                   	pop    eax
c00177be:	5a                   	pop    edx
c00177bf:	68 07 0c 00 00       	push   0xc07
c00177c4:	53                   	push   ebx
c00177c5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00177cb:	57                   	push   edi
c00177cc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00177d3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177d9:	6a 00                	push   0x0
c00177db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177e3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177e9:	e8 22 50 ff ff       	call   c000c810 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00177ee:	83 c4 1c             	add    esp,0x1c
c00177f1:	68 00 10 00 00       	push   0x1000
c00177f6:	6a 00                	push   0x0
c00177f8:	55                   	push   ebp
c00177f9:	e8 96 8e fe ff       	call   c0000694 <memset>
c00177fe:	eb 98                	jmp    c0017798 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0017800:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0017805:	48                   	dec    eax
c0017806:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001780b:	75 01                	jne    c001780e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001780d:	fb                   	sti    
c001780e:	83 ec 0c             	sub    esp,0xc
c0017811:	55                   	push   ebp
c0017812:	e8 c6 48 ff ff       	call   c000c0dd <Virt::freeKernelVirtualPages(unsigned long)>
c0017817:	83 c4 10             	add    esp,0x10
c001781a:	b0 01                	mov    al,0x1
c001781c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0017822:	5b                   	pop    ebx
c0017823:	5e                   	pop    esi
c0017824:	5f                   	pop    edi
c0017825:	5d                   	pop    ebp
c0017826:	c3                   	ret    

c0017827 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017827:	55                   	push   ebp
c0017828:	57                   	push   edi
c0017829:	56                   	push   esi
c001782a:	53                   	push   ebx
c001782b:	83 ec 48             	sub    esp,0x48
c001782e:	68 14 01 00 00       	push   0x114
c0017833:	e8 af 25 ff ff       	call   c0009de7 <malloc>
c0017838:	83 c4 0c             	add    esp,0xc
c001783b:	89 c6                	mov    esi,eax
c001783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017841:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017845:	50                   	push   eax
c0017846:	e8 f3 5d ff ff       	call   c000d63e <File::File(char const*, Process*)>
c001784b:	58                   	pop    eax
c001784c:	5a                   	pop    edx
c001784d:	6a 01                	push   0x1
c001784f:	56                   	push   esi
c0017850:	e8 c3 5e ff ff       	call   c000d718 <File::open(FileOpenMode)>
c0017855:	83 c4 10             	add    esp,0x10
c0017858:	85 c0                	test   eax,eax
c001785a:	0f 85 47 01 00 00    	jne    c00179a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017860:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017868:	83 ec 0c             	sub    esp,0xc
c001786b:	6a 34                	push   0x34
c001786d:	e8 75 25 ff ff       	call   c0009de7 <malloc>
c0017872:	89 c3                	mov    ebx,eax
c0017874:	58                   	pop    eax
c0017875:	8b 06                	mov    eax,DWORD PTR [esi]
c0017877:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001787b:	57                   	push   edi
c001787c:	53                   	push   ebx
c001787d:	6a 00                	push   0x0
c001787f:	6a 34                	push   0x34
c0017881:	56                   	push   esi
c0017882:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017885:	83 c4 20             	add    esp,0x20
c0017888:	85 c0                	test   eax,eax
c001788a:	0f 85 17 01 00 00    	jne    c00179a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017890:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017896:	0f 85 0b 01 00 00    	jne    c00179a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001789c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001789f:	85 c0                	test   eax,eax
c00178a1:	0f 84 00 01 00 00    	je     c00179a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178a7:	31 d2                	xor    edx,edx
c00178a9:	55                   	push   ebp
c00178aa:	52                   	push   edx
c00178ab:	50                   	push   eax
c00178ac:	56                   	push   esi
c00178ad:	e8 24 5f ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c00178b2:	83 c4 10             	add    esp,0x10
c00178b5:	85 c0                	test   eax,eax
c00178b7:	0f 85 ea 00 00 00    	jne    c00179a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178bd:	83 ec 0c             	sub    esp,0xc
c00178c0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00178c3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00178c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00178cb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00178cf:	0f af c2             	imul   eax,edx
c00178d2:	50                   	push   eax
c00178d3:	e8 0f 25 ff ff       	call   c0009de7 <malloc>
c00178d8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00178da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00178e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00178e5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00178e9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00178ed:	0f af c2             	imul   eax,edx
c00178f0:	99                   	cdq    
c00178f1:	52                   	push   edx
c00178f2:	50                   	push   eax
c00178f3:	56                   	push   esi
c00178f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00178f7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00178fa:	83 c4 20             	add    esp,0x20
c00178fd:	85 c0                	test   eax,eax
c00178ff:	0f 84 a2 00 00 00    	je     c00179a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017905:	31 d2                	xor    edx,edx
c0017907:	51                   	push   ecx
c0017908:	52                   	push   edx
c0017909:	50                   	push   eax
c001790a:	56                   	push   esi
c001790b:	e8 c6 5e ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c0017910:	83 c4 10             	add    esp,0x10
c0017913:	85 c0                	test   eax,eax
c0017915:	0f 85 8c 00 00 00    	jne    c00179a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001791b:	83 ec 0c             	sub    esp,0xc
c001791e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017922:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017926:	31 ed                	xor    ebp,ebp
c0017928:	0f af c2             	imul   eax,edx
c001792b:	50                   	push   eax
c001792c:	e8 b6 24 ff ff       	call   c0009de7 <malloc>
c0017931:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017933:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017937:	89 3c 24             	mov    DWORD PTR [esp],edi
c001793a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001793e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017942:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017946:	0f af c2             	imul   eax,edx
c0017949:	99                   	cdq    
c001794a:	52                   	push   edx
c001794b:	50                   	push   eax
c001794c:	56                   	push   esi
c001794d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017950:	83 c4 20             	add    esp,0x20
c0017953:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001795b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001795f:	0f 86 80 00 00 00    	jbe    c00179e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017965:	0f b7 fd             	movzx  edi,bp
c0017968:	c1 e7 05             	shl    edi,0x5
c001796b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001796f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017972:	75 6b                	jne    c00179df <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017974:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017977:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001797b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001797e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017982:	52                   	push   edx
c0017983:	31 d2                	xor    edx,edx
c0017985:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017988:	52                   	push   edx
c0017989:	50                   	push   eax
c001798a:	56                   	push   esi
c001798b:	e8 46 5e ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c0017990:	83 c4 10             	add    esp,0x10
c0017993:	85 c0                	test   eax,eax
c0017995:	74 17                	je     c00179ae <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017997:	83 ec 0c             	sub    esp,0xc
c001799a:	68 fc 6a 02 c0       	push   0xc0026afc
c001799f:	e8 2f 57 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00179a4:	83 c4 10             	add    esp,0x10
c00179a7:	31 c0                	xor    eax,eax
c00179a9:	e9 87 00 00 00       	jmp    c0017a35 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00179ae:	83 ec 0c             	sub    esp,0xc
c00179b1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00179b4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00179b7:	50                   	push   eax
c00179b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00179bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179c0:	56                   	push   esi
c00179c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00179c5:	e8 b3 fb ff ff       	call   c001757d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00179ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179ce:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00179d2:	83 c4 20             	add    esp,0x20
c00179d5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00179d9:	73 04                	jae    c00179df <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00179db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179df:	45                   	inc    ebp
c00179e0:	e9 76 ff ff ff       	jmp    c001795b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00179e5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00179e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00179ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00179f1:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00179f7:	83 ec 0c             	sub    esp,0xc
c00179fa:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0017a00:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017a05:	05 00 10 00 00       	add    eax,0x1000
c0017a0a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017a0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a11:	e8 e1 23 ff ff       	call   c0009df7 <free>
c0017a16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017a19:	e8 d9 23 ff ff       	call   c0009df7 <free>
c0017a1e:	58                   	pop    eax
c0017a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a23:	e8 cf 23 ff ff       	call   c0009df7 <free>
c0017a28:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a2b:	e8 46 5d ff ff       	call   c000d776 <File::close()>
c0017a30:	83 c4 10             	add    esp,0x10
c0017a33:	b0 01                	mov    al,0x1
c0017a35:	83 c4 3c             	add    esp,0x3c
c0017a38:	5b                   	pop    ebx
c0017a39:	5e                   	pop    esi
c0017a3a:	5f                   	pop    edi
c0017a3b:	5d                   	pop    ebp
c0017a3c:	c3                   	ret    

c0017a3d <Thr::runtimeReferenceHelper()>:
c0017a3d:	83 ec 18             	sub    esp,0x18
c0017a40:	68 04 6b 02 c0       	push   0xc0026b04
c0017a45:	e8 89 56 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0017a4a:	fa                   	cli    
c0017a4b:	83 c4 10             	add    esp,0x10
c0017a4e:	eb fe                	jmp    c0017a4e <Thr::runtimeReferenceHelper()+0x11>

c0017a50 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017a50:	57                   	push   edi
c0017a51:	56                   	push   esi
c0017a52:	53                   	push   ebx
c0017a53:	31 db                	xor    ebx,ebx
c0017a55:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c0017a5b:	7e 3c                	jle    c0017a99 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017a5d:	8b 34 9d 40 a0 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5fc0]
c0017a64:	31 ff                	xor    edi,edi
c0017a66:	39 3c 9d 40 9f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd60c0],edi
c0017a6d:	7e 27                	jle    c0017a96 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017a6f:	50                   	push   eax
c0017a70:	50                   	push   eax
c0017a71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a75:	8b 06                	mov    eax,DWORD PTR [esi]
c0017a77:	03 04 9d c0 9f 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6040]
c0017a7e:	50                   	push   eax
c0017a7f:	e8 58 8d fe ff       	call   c00007dc <strcmp>
c0017a84:	83 c4 10             	add    esp,0x10
c0017a87:	85 c0                	test   eax,eax
c0017a89:	75 05                	jne    c0017a90 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017a8b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017a8e:	eb 0b                	jmp    c0017a9b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017a90:	83 c6 10             	add    esi,0x10
c0017a93:	47                   	inc    edi
c0017a94:	eb d0                	jmp    c0017a66 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017a96:	43                   	inc    ebx
c0017a97:	eb bc                	jmp    c0017a55 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017a99:	31 c0                	xor    eax,eax
c0017a9b:	5b                   	pop    ebx
c0017a9c:	5e                   	pop    esi
c0017a9d:	5f                   	pop    edi
c0017a9e:	c3                   	ret    

c0017a9f <Thr::loadKernelSymbolTable(char const*)>:
c0017a9f:	55                   	push   ebp
c0017aa0:	57                   	push   edi
c0017aa1:	56                   	push   esi
c0017aa2:	53                   	push   ebx
c0017aa3:	83 ec 68             	sub    esp,0x68
c0017aa6:	8b 35 10 a1 02 c0    	mov    esi,DWORD PTR ds:0xc002a110
c0017aac:	68 14 01 00 00       	push   0x114
c0017ab1:	e8 31 23 ff ff       	call   c0009de7 <malloc>
c0017ab6:	83 c4 0c             	add    esp,0xc
c0017ab9:	89 c3                	mov    ebx,eax
c0017abb:	56                   	push   esi
c0017abc:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017ac0:	50                   	push   eax
c0017ac1:	e8 78 5b ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0017ac6:	5e                   	pop    esi
c0017ac7:	5f                   	pop    edi
c0017ac8:	6a 01                	push   0x1
c0017aca:	53                   	push   ebx
c0017acb:	e8 48 5c ff ff       	call   c000d718 <File::open(FileOpenMode)>
c0017ad0:	83 c4 10             	add    esp,0x10
c0017ad3:	85 c0                	test   eax,eax
c0017ad5:	74 0a                	je     c0017ae1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0017ad7:	83 ec 0c             	sub    esp,0xc
c0017ada:	68 26 6b 02 c0       	push   0xc0026b26
c0017adf:	eb 34                	jmp    c0017b15 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017ae1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017ae9:	83 ec 0c             	sub    esp,0xc
c0017aec:	6a 34                	push   0x34
c0017aee:	e8 f4 22 ff ff       	call   c0009de7 <malloc>
c0017af3:	59                   	pop    ecx
c0017af4:	89 c7                	mov    edi,eax
c0017af6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017afa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017afc:	56                   	push   esi
c0017afd:	57                   	push   edi
c0017afe:	6a 00                	push   0x0
c0017b00:	6a 34                	push   0x34
c0017b02:	53                   	push   ebx
c0017b03:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b06:	83 c4 20             	add    esp,0x20
c0017b09:	85 c0                	test   eax,eax
c0017b0b:	74 17                	je     c0017b24 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017b0d:	83 ec 0c             	sub    esp,0xc
c0017b10:	68 3d 6b 02 c0       	push   0xc0026b3d
c0017b15:	e8 9b d6 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0017b1a:	83 c4 10             	add    esp,0x10
c0017b1d:	31 c0                	xor    eax,eax
c0017b1f:	e9 31 02 00 00       	jmp    c0017d55 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017b24:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017b2a:	75 e1                	jne    c0017b0d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017b2c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017b2f:	85 c0                	test   eax,eax
c0017b31:	74 da                	je     c0017b0d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017b33:	52                   	push   edx
c0017b34:	31 d2                	xor    edx,edx
c0017b36:	52                   	push   edx
c0017b37:	50                   	push   eax
c0017b38:	53                   	push   ebx
c0017b39:	e8 98 5c ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c0017b3e:	83 c4 10             	add    esp,0x10
c0017b41:	85 c0                	test   eax,eax
c0017b43:	75 c8                	jne    c0017b0d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017b45:	83 ec 0c             	sub    esp,0xc
c0017b48:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017b4c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b50:	31 ed                	xor    ebp,ebp
c0017b52:	0f af c2             	imul   eax,edx
c0017b55:	50                   	push   eax
c0017b56:	e8 8c 22 ff ff       	call   c0009de7 <malloc>
c0017b5b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017b5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b61:	89 34 24             	mov    DWORD PTR [esp],esi
c0017b64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b68:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017b6c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b70:	0f af c2             	imul   eax,edx
c0017b73:	99                   	cdq    
c0017b74:	52                   	push   edx
c0017b75:	50                   	push   eax
c0017b76:	53                   	push   ebx
c0017b77:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b7a:	83 c4 20             	add    esp,0x20
c0017b7d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017b85:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017b8d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017b95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017b9d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017ba1:	0f 86 aa 00 00 00    	jbe    c0017c51 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0017ba7:	0f b7 f5             	movzx  esi,bp
c0017baa:	6b f6 28             	imul   esi,esi,0x28
c0017bad:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017bb1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017bb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bb8:	50                   	push   eax
c0017bb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017bbd:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017bc1:	8b 16                	mov    edx,DWORD PTR [esi]
c0017bc3:	6b c0 28             	imul   eax,eax,0x28
c0017bc6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017bca:	89 d0                	mov    eax,edx
c0017bcc:	31 d2                	xor    edx,edx
c0017bce:	52                   	push   edx
c0017bcf:	50                   	push   eax
c0017bd0:	53                   	push   ebx
c0017bd1:	e8 00 5c ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c0017bd6:	83 c4 0c             	add    esp,0xc
c0017bd9:	6a 20                	push   0x20
c0017bdb:	6a 00                	push   0x0
c0017bdd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017be1:	52                   	push   edx
c0017be2:	e8 ad 8a fe ff       	call   c0000694 <memset>
c0017be7:	58                   	pop    eax
c0017be8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bea:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017bee:	51                   	push   ecx
c0017bef:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017bf3:	52                   	push   edx
c0017bf4:	6a 00                	push   0x0
c0017bf6:	6a 1f                	push   0x1f
c0017bf8:	53                   	push   ebx
c0017bf9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bfc:	83 c4 18             	add    esp,0x18
c0017bff:	68 54 6b 02 c0       	push   0xc0026b54
c0017c04:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017c08:	52                   	push   edx
c0017c09:	e8 ce 8b fe ff       	call   c00007dc <strcmp>
c0017c0e:	83 c4 10             	add    esp,0x10
c0017c11:	85 c0                	test   eax,eax
c0017c13:	75 0f                	jne    c0017c24 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017c15:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017c18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c24:	50                   	push   eax
c0017c25:	50                   	push   eax
c0017c26:	68 5c 6b 02 c0       	push   0xc0026b5c
c0017c2b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017c2f:	50                   	push   eax
c0017c30:	e8 a7 8b fe ff       	call   c00007dc <strcmp>
c0017c35:	83 c4 10             	add    esp,0x10
c0017c38:	85 c0                	test   eax,eax
c0017c3a:	75 0f                	jne    c0017c4b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017c3c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017c3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c4b:	45                   	inc    ebp
c0017c4c:	e9 4c ff ff ff       	jmp    c0017b9d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017c51:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017c56:	75 10                	jne    c0017c68 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017c58:	83 ec 0c             	sub    esp,0xc
c0017c5b:	68 64 6b 02 c0       	push   0xc0026b64
c0017c60:	e8 50 d5 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0017c65:	83 c4 10             	add    esp,0x10
c0017c68:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017c6d:	75 10                	jne    c0017c7f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017c6f:	83 ec 0c             	sub    esp,0xc
c0017c72:	68 64 6b 02 c0       	push   0xc0026b64
c0017c77:	e8 39 d5 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0017c7c:	83 c4 10             	add    esp,0x10
c0017c7f:	31 d2                	xor    edx,edx
c0017c81:	50                   	push   eax
c0017c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c86:	52                   	push   edx
c0017c87:	50                   	push   eax
c0017c88:	53                   	push   ebx
c0017c89:	e8 48 5b ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c0017c8e:	5a                   	pop    edx
c0017c8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c93:	e8 4f 21 ff ff       	call   c0009de7 <malloc>
c0017c98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ca0:	31 c9                	xor    ecx,ecx
c0017ca2:	5e                   	pop    esi
c0017ca3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ca5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017ca9:	55                   	push   ebp
c0017caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cae:	51                   	push   ecx
c0017caf:	52                   	push   edx
c0017cb0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017cb4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017cb8:	53                   	push   ebx
c0017cb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cbc:	83 c4 14             	add    esp,0x14
c0017cbf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017cc3:	e8 1f 21 ff ff       	call   c0009de7 <malloc>
c0017cc8:	89 c6                	mov    esi,eax
c0017cca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ccc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ccf:	56                   	push   esi
c0017cd0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017cd4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017cd8:	51                   	push   ecx
c0017cd9:	52                   	push   edx
c0017cda:	53                   	push   ebx
c0017cdb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cde:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ce2:	8b 15 c0 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0c0
c0017ce8:	83 c4 1c             	add    esp,0x1c
c0017ceb:	c1 e8 04             	shr    eax,0x4
c0017cee:	89 04 95 40 9f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd60c0],eax
c0017cf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cf9:	31 d2                	xor    edx,edx
c0017cfb:	52                   	push   edx
c0017cfc:	50                   	push   eax
c0017cfd:	53                   	push   ebx
c0017cfe:	e8 d3 5a ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c0017d03:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017d05:	31 d2                	xor    edx,edx
c0017d07:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d0a:	56                   	push   esi
c0017d0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d0f:	52                   	push   edx
c0017d10:	50                   	push   eax
c0017d11:	53                   	push   ebx
c0017d12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d15:	83 c4 14             	add    esp,0x14
c0017d18:	53                   	push   ebx
c0017d19:	e8 58 5a ff ff       	call   c000d776 <File::close()>
c0017d1e:	5d                   	pop    ebp
c0017d1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d23:	e8 cf 20 ff ff       	call   c0009df7 <free>
c0017d28:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017d2b:	e8 c7 20 ff ff       	call   c0009df7 <free>
c0017d30:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c0017d35:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d39:	8d 50 01             	lea    edx,[eax+0x1]
c0017d3c:	89 0c 85 40 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5fc0],ecx
c0017d43:	89 34 85 c0 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6040],esi
c0017d4a:	89 15 c0 a0 02 c0    	mov    DWORD PTR ds:0xc002a0c0,edx
c0017d50:	83 c4 10             	add    esp,0x10
c0017d53:	b0 01                	mov    al,0x1
c0017d55:	83 c4 5c             	add    esp,0x5c
c0017d58:	5b                   	pop    ebx
c0017d59:	5e                   	pop    esi
c0017d5a:	5f                   	pop    edi
c0017d5b:	5d                   	pop    ebp
c0017d5c:	c3                   	ret    

c0017d5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017d5d:	55                   	push   ebp
c0017d5e:	57                   	push   edi
c0017d5f:	56                   	push   esi
c0017d60:	53                   	push   ebx
c0017d61:	81 ec 68 03 00 00    	sub    esp,0x368
c0017d67:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017d6e:	8b 1d 10 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a110
c0017d74:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017d78:	68 14 01 00 00       	push   0x114
c0017d7d:	e8 65 20 ff ff       	call   c0009de7 <malloc>
c0017d82:	83 c4 0c             	add    esp,0xc
c0017d85:	89 c5                	mov    ebp,eax
c0017d87:	53                   	push   ebx
c0017d88:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017d8f:	50                   	push   eax
c0017d90:	e8 a9 58 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0017d95:	5e                   	pop    esi
c0017d96:	5f                   	pop    edi
c0017d97:	6a 01                	push   0x1
c0017d99:	55                   	push   ebp
c0017d9a:	e8 79 59 ff ff       	call   c000d718 <File::open(FileOpenMode)>
c0017d9f:	83 c4 10             	add    esp,0x10
c0017da2:	85 c0                	test   eax,eax
c0017da4:	0f 85 a7 06 00 00    	jne    c0018451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017daa:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017db2:	83 ec 0c             	sub    esp,0xc
c0017db5:	6a 34                	push   0x34
c0017db7:	e8 2b 20 ff ff       	call   c0009de7 <malloc>
c0017dbc:	5b                   	pop    ebx
c0017dbd:	89 c7                	mov    edi,eax
c0017dbf:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017dc3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017dc6:	53                   	push   ebx
c0017dc7:	57                   	push   edi
c0017dc8:	6a 00                	push   0x0
c0017dca:	6a 34                	push   0x34
c0017dcc:	55                   	push   ebp
c0017dcd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017dd0:	83 c4 20             	add    esp,0x20
c0017dd3:	85 c0                	test   eax,eax
c0017dd5:	0f 85 76 06 00 00    	jne    c0018451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017ddb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017de1:	0f 85 6a 06 00 00    	jne    c0018451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017de7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017dea:	85 c0                	test   eax,eax
c0017dec:	0f 84 5f 06 00 00    	je     c0018451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017df2:	31 d2                	xor    edx,edx
c0017df4:	51                   	push   ecx
c0017df5:	52                   	push   edx
c0017df6:	50                   	push   eax
c0017df7:	55                   	push   ebp
c0017df8:	e8 d9 59 ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c0017dfd:	83 c4 10             	add    esp,0x10
c0017e00:	85 c0                	test   eax,eax
c0017e02:	0f 85 49 06 00 00    	jne    c0018451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e08:	83 ec 0c             	sub    esp,0xc
c0017e0b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017e0e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017e12:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017e16:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017e1a:	0f af c2             	imul   eax,edx
c0017e1d:	50                   	push   eax
c0017e1e:	e8 c4 1f ff ff       	call   c0009de7 <malloc>
c0017e23:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017e26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e31:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017e35:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017e39:	0f af c2             	imul   eax,edx
c0017e3c:	99                   	cdq    
c0017e3d:	52                   	push   edx
c0017e3e:	50                   	push   eax
c0017e3f:	55                   	push   ebp
c0017e40:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e43:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017e46:	83 c4 20             	add    esp,0x20
c0017e49:	85 c0                	test   eax,eax
c0017e4b:	0f 84 00 06 00 00    	je     c0018451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e51:	52                   	push   edx
c0017e52:	31 d2                	xor    edx,edx
c0017e54:	52                   	push   edx
c0017e55:	50                   	push   eax
c0017e56:	55                   	push   ebp
c0017e57:	e8 7a 59 ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c0017e5c:	83 c4 10             	add    esp,0x10
c0017e5f:	85 c0                	test   eax,eax
c0017e61:	0f 85 ea 05 00 00    	jne    c0018451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e67:	83 ec 0c             	sub    esp,0xc
c0017e6a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017e6e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017e72:	31 f6                	xor    esi,esi
c0017e74:	0f af c2             	imul   eax,edx
c0017e77:	50                   	push   eax
c0017e78:	e8 6a 1f ff ff       	call   c0009de7 <malloc>
c0017e7d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017e80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017e84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e87:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e8b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017e8f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017e93:	0f af c2             	imul   eax,edx
c0017e96:	99                   	cdq    
c0017e97:	52                   	push   edx
c0017e98:	50                   	push   eax
c0017e99:	55                   	push   ebp
c0017e9a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e9d:	83 c4 20             	add    esp,0x20
c0017ea0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017ea4:	0f 86 8a 00 00 00    	jbe    c0017f34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017eaa:	0f b7 de             	movzx  ebx,si
c0017ead:	c1 e3 05             	shl    ebx,0x5
c0017eb0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017eb4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017eb7:	75 75                	jne    c0017f2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017eb9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017ebc:	31 d2                	xor    edx,edx
c0017ebe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ec2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017ec5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ec9:	50                   	push   eax
c0017eca:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017ecd:	52                   	push   edx
c0017ece:	50                   	push   eax
c0017ecf:	55                   	push   ebp
c0017ed0:	e8 01 59 ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c0017ed5:	83 c4 10             	add    esp,0x10
c0017ed8:	85 c0                	test   eax,eax
c0017eda:	0f 85 71 05 00 00    	jne    c0018451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017ee0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017ee7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017eea:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017eee:	31 d2                	xor    edx,edx
c0017ef0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017ef4:	83 ec 0c             	sub    esp,0xc
c0017ef7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017efb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f02:	50                   	push   eax
c0017f03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f0b:	52                   	push   edx
c0017f0c:	50                   	push   eax
c0017f0d:	55                   	push   ebp
c0017f0e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f11:	83 c4 1c             	add    esp,0x1c
c0017f14:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017f17:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017f1a:	50                   	push   eax
c0017f1b:	6a 00                	push   0x0
c0017f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f21:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017f25:	50                   	push   eax
c0017f26:	e8 69 87 fe ff       	call   c0000694 <memset>
c0017f2b:	83 c4 10             	add    esp,0x10
c0017f2e:	46                   	inc    esi
c0017f2f:	e9 6c ff ff ff       	jmp    c0017ea0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017f34:	53                   	push   ebx
c0017f35:	31 db                	xor    ebx,ebx
c0017f37:	68 00 01 00 00       	push   0x100
c0017f3c:	6a 00                	push   0x0
c0017f3e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017f42:	50                   	push   eax
c0017f43:	e8 4c 87 fe ff       	call   c0000694 <memset>
c0017f48:	83 c4 0c             	add    esp,0xc
c0017f4b:	68 00 01 00 00       	push   0x100
c0017f50:	6a 00                	push   0x0
c0017f52:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017f59:	50                   	push   eax
c0017f5a:	e8 35 87 fe ff       	call   c0000694 <memset>
c0017f5f:	83 c4 10             	add    esp,0x10
c0017f62:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017f6a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f72:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0017f7a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017f82:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017f8a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017f8e:	0f 86 30 01 00 00    	jbe    c00180c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017f94:	0f b7 f3             	movzx  esi,bx
c0017f97:	6b f6 28             	imul   esi,esi,0x28
c0017f9a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017f9e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017fa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017fa5:	52                   	push   edx
c0017fa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017faa:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017fae:	8b 06                	mov    eax,DWORD PTR [esi]
c0017fb0:	6b d2 28             	imul   edx,edx,0x28
c0017fb3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017fb7:	31 d2                	xor    edx,edx
c0017fb9:	52                   	push   edx
c0017fba:	50                   	push   eax
c0017fbb:	55                   	push   ebp
c0017fbc:	e8 15 58 ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c0017fc1:	83 c4 0c             	add    esp,0xc
c0017fc4:	6a 20                	push   0x20
c0017fc6:	6a 00                	push   0x0
c0017fc8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017fcf:	51                   	push   ecx
c0017fd0:	e8 bf 86 fe ff       	call   c0000694 <memset>
c0017fd5:	59                   	pop    ecx
c0017fd6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017fd9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017fdd:	52                   	push   edx
c0017fde:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017fe5:	51                   	push   ecx
c0017fe6:	6a 00                	push   0x0
c0017fe8:	6a 1f                	push   0x1f
c0017fea:	55                   	push   ebp
c0017feb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017fee:	83 c4 1c             	add    esp,0x1c
c0017ff1:	6a 09                	push   0x9
c0017ff3:	68 7e 6b 02 c0       	push   0xc0026b7e
c0017ff8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017fff:	51                   	push   ecx
c0018000:	e8 8b 85 fe ff       	call   c0000590 <memcmp>
c0018005:	83 c4 10             	add    esp,0x10
c0018008:	85 c0                	test   eax,eax
c001800a:	75 21                	jne    c001802d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001800c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018010:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018014:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0018018:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001801c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001801f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0018026:	89 d0                	mov    eax,edx
c0018028:	40                   	inc    eax
c0018029:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001802d:	50                   	push   eax
c001802e:	6a 09                	push   0x9
c0018030:	68 88 6b 02 c0       	push   0xc0026b88
c0018035:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001803c:	50                   	push   eax
c001803d:	e8 4e 85 fe ff       	call   c0000590 <memcmp>
c0018042:	83 c4 10             	add    esp,0x10
c0018045:	85 c0                	test   eax,eax
c0018047:	75 21                	jne    c001806a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0018049:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001804d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018051:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0018055:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018059:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001805c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0018063:	89 d0                	mov    eax,edx
c0018065:	40                   	inc    eax
c0018066:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001806a:	50                   	push   eax
c001806b:	50                   	push   eax
c001806c:	68 54 6b 02 c0       	push   0xc0026b54
c0018071:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018078:	50                   	push   eax
c0018079:	e8 5e 87 fe ff       	call   c00007dc <strcmp>
c001807e:	83 c4 10             	add    esp,0x10
c0018081:	85 c0                	test   eax,eax
c0018083:	75 0f                	jne    c0018094 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0018085:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018088:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001808c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018094:	50                   	push   eax
c0018095:	50                   	push   eax
c0018096:	68 5c 6b 02 c0       	push   0xc0026b5c
c001809b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00180a2:	50                   	push   eax
c00180a3:	e8 34 87 fe ff       	call   c00007dc <strcmp>
c00180a8:	83 c4 10             	add    esp,0x10
c00180ab:	85 c0                	test   eax,eax
c00180ad:	75 0f                	jne    c00180be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00180af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00180b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00180b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00180be:	43                   	inc    ebx
c00180bf:	e9 c6 fe ff ff       	jmp    c0017f8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00180c4:	31 d2                	xor    edx,edx
c00180c6:	50                   	push   eax
c00180c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180cb:	52                   	push   edx
c00180cc:	50                   	push   eax
c00180cd:	55                   	push   ebp
c00180ce:	e8 03 57 ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c00180d3:	58                   	pop    eax
c00180d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180d8:	e8 0a 1d ff ff       	call   c0009de7 <malloc>
c00180dd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00180e0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00180e4:	31 d2                	xor    edx,edx
c00180e6:	58                   	pop    eax
c00180e7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00180eb:	53                   	push   ebx
c00180ec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00180f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180f4:	52                   	push   edx
c00180f5:	50                   	push   eax
c00180f6:	55                   	push   ebp
c00180f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00180fa:	83 c4 14             	add    esp,0x14
c00180fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018101:	e8 e1 1c ff ff       	call   c0009de7 <malloc>
c0018106:	31 d2                	xor    edx,edx
c0018108:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001810c:	83 c4 0c             	add    esp,0xc
c001810f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018113:	52                   	push   edx
c0018114:	50                   	push   eax
c0018115:	55                   	push   ebp
c0018116:	e8 bb 56 ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c001811b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001811e:	31 d2                	xor    edx,edx
c0018120:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018123:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018127:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001812b:	52                   	push   edx
c001812c:	50                   	push   eax
c001812d:	55                   	push   ebp
c001812e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018131:	83 c4 20             	add    esp,0x20
c0018134:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001813c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018140:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0018144:	0f 84 0b 03 00 00    	je     c0018455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001814a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0018151:	31 d2                	xor    edx,edx
c0018153:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018157:	c1 e8 03             	shr    eax,0x3
c001815a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001815e:	51                   	push   ecx
c001815f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018163:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0018167:	52                   	push   edx
c0018168:	50                   	push   eax
c0018169:	55                   	push   ebp
c001816a:	e8 67 56 ff ff       	call   c000d7d6 <File::seek(unsigned long long)>
c001816f:	5b                   	pop    ebx
c0018170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018174:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001817b:	e8 67 1c ff ff       	call   c0009de7 <malloc>
c0018180:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018183:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018187:	31 d2                	xor    edx,edx
c0018189:	5e                   	pop    esi
c001818a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001818e:	50                   	push   eax
c001818f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018193:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018197:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001819e:	52                   	push   edx
c001819f:	50                   	push   eax
c00181a0:	55                   	push   ebp
c00181a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00181a4:	83 c4 20             	add    esp,0x20
c00181a7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00181af:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00181b3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00181b7:	0f 8d 7c 02 00 00    	jge    c0018439 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00181bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00181c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181c5:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00181ca:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00181cd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181d5:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00181d9:	89 d8                	mov    eax,ebx
c00181db:	c1 e8 08             	shr    eax,0x8
c00181de:	89 c6                	mov    esi,eax
c00181e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00181e4:	c1 e6 04             	shl    esi,0x4
c00181e7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00181eb:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00181ee:	85 d2                	test   edx,edx
c00181f0:	0f 85 bf 00 00 00    	jne    c00182b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00181f6:	83 ec 0c             	sub    esp,0xc
c00181f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181fd:	03 06                	add    eax,DWORD PTR [esi]
c00181ff:	50                   	push   eax
c0018200:	e8 4b f8 ff ff       	call   c0017a50 <Thr::getAddressOfKernelSymbol(char const*)>
c0018205:	83 c4 10             	add    esp,0x10
c0018208:	89 c2                	mov    edx,eax
c001820a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001820f:	85 c0                	test   eax,eax
c0018211:	0f 85 9e 00 00 00    	jne    c00182b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0018217:	83 ec 0c             	sub    esp,0xc
c001821a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001821e:	03 06                	add    eax,DWORD PTR [esi]
c0018220:	50                   	push   eax
c0018221:	e8 fa 06 ff ff       	call   c0008920 <Krnl::resolveCompatibilitySymbol(char*)>
c0018226:	83 c4 10             	add    esp,0x10
c0018229:	89 c2                	mov    edx,eax
c001822b:	85 c0                	test   eax,eax
c001822d:	0f 85 82 00 00 00    	jne    c00182b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0018233:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018237:	50                   	push   eax
c0018238:	50                   	push   eax
c0018239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001823d:	03 06                	add    eax,DWORD PTR [esi]
c001823f:	50                   	push   eax
c0018240:	68 92 6b 02 c0       	push   0xc0026b92
c0018245:	e8 89 4e ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001824a:	58                   	pop    eax
c001824b:	5a                   	pop    edx
c001824c:	68 ac 6b 02 c0       	push   0xc0026bac
c0018251:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018258:	50                   	push   eax
c0018259:	e8 f2 84 fe ff       	call   c0000750 <strcpy>
c001825e:	59                   	pop    ecx
c001825f:	58                   	pop    eax
c0018260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018264:	03 06                	add    eax,DWORD PTR [esi]
c0018266:	50                   	push   eax
c0018267:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001826e:	50                   	push   eax
c001826f:	e8 1c 86 fe ff       	call   c0000890 <strcat>
c0018274:	58                   	pop    eax
c0018275:	5a                   	pop    edx
c0018276:	68 42 6c 02 c0       	push   0xc0026c42
c001827b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018282:	50                   	push   eax
c0018283:	e8 08 86 fe ff       	call   c0000890 <strcat>
c0018288:	83 c4 10             	add    esp,0x10
c001828b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018290:	0f 84 5d 01 00 00    	je     c00183f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018296:	83 ec 0c             	sub    esp,0xc
c0018299:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00182a0:	50                   	push   eax
c00182a1:	e8 0f cf ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00182a6:	83 c4 10             	add    esp,0x10
c00182a9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00182ad:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00182b1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00182b5:	80 fb 01             	cmp    bl,0x1
c00182b8:	0f 85 88 00 00 00    	jne    c0018346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00182be:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00182c5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00182c9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00182cd:	01 ce                	add    esi,ecx
c00182cf:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00182d5:	0f 94 c0             	sete   al
c00182d8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00182de:	0f 94 c3             	sete   bl
c00182e1:	09 c3                	or     ebx,eax
c00182e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00182e5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00182ea:	74 41                	je     c001832d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00182ec:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00182ef:	84 db                	test   bl,bl
c00182f1:	75 15                	jne    c0018308 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00182f3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00182f7:	66 83 f8 0c          	cmp    ax,0xc
c00182fb:	76 05                	jbe    c0018302 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00182fd:	b8 0c 00 00 00       	mov    eax,0xc
c0018302:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0018306:	76 37                	jbe    c001833f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018308:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001830c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018311:	0f 84 dc 00 00 00    	je     c00183f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018317:	83 ec 0c             	sub    esp,0xc
c001831a:	68 c3 6b 02 c0       	push   0xc0026bc3
c001831f:	e8 91 ce ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0018324:	83 c4 10             	add    esp,0x10
c0018327:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001832b:	eb 12                	jmp    c001833f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001832d:	01 c1                	add    ecx,eax
c001832f:	84 db                	test   bl,bl
c0018331:	75 0c                	jne    c001833f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018333:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0018337:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001833b:	77 02                	ja     c001833f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001833d:	01 d1                	add    ecx,edx
c001833f:	89 0e                	mov    DWORD PTR [esi],ecx
c0018341:	e9 ea 00 00 00       	jmp    c0018430 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0018346:	80 fb 02             	cmp    bl,0x2
c0018349:	75 7c                	jne    c00183c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001834b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0018352:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0018356:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001835a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0018360:	74 20                	je     c0018382 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0018362:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0018368:	74 18                	je     c0018382 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001836a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001836e:	b9 0a 00 00 00       	mov    ecx,0xa
c0018373:	66 83 f8 0e          	cmp    ax,0xe
c0018377:	77 03                	ja     c001837c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0018379:	8d 48 fc             	lea    ecx,[eax-0x4]
c001837c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0018380:	76 1f                	jbe    c00183a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0018382:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0018386:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001838b:	74 66                	je     c00183f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001838d:	83 ec 0c             	sub    esp,0xc
c0018390:	68 df 6b 02 c0       	push   0xc0026bdf
c0018395:	e8 1b ce ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001839a:	83 c4 10             	add    esp,0x10
c001839d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00183a3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00183a8:	74 13                	je     c00183bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00183aa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00183ae:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00183b5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00183b9:	01 c8                	add    eax,ecx
c00183bb:	eb 04                	jmp    c00183c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00183bd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00183c1:	01 c2                	add    edx,eax
c00183c3:	89 16                	mov    DWORD PTR [esi],edx
c00183c5:	eb 69                	jmp    c0018430 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00183c7:	0f b6 db             	movzx  ebx,bl
c00183ca:	50                   	push   eax
c00183cb:	50                   	push   eax
c00183cc:	53                   	push   ebx
c00183cd:	68 fb 6b 02 c0       	push   0xc0026bfb
c00183d2:	e8 fc 4c ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00183d7:	83 c4 10             	add    esp,0x10
c00183da:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183df:	74 12                	je     c00183f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00183e1:	83 ec 0c             	sub    esp,0xc
c00183e4:	68 06 6c 02 c0       	push   0xc0026c06
c00183e9:	e8 c7 cd ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00183ee:	83 c4 10             	add    esp,0x10
c00183f1:	eb 3d                	jmp    c0018430 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00183f3:	83 ec 0c             	sub    esp,0xc
c00183f6:	55                   	push   ebp
c00183f7:	e8 7a 53 ff ff       	call   c000d776 <File::close()>
c00183fc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00183ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018402:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018405:	59                   	pop    ecx
c0018406:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001840a:	e8 e8 19 ff ff       	call   c0009df7 <free>
c001840f:	5b                   	pop    ebx
c0018410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018414:	e8 de 19 ff ff       	call   c0009df7 <free>
c0018419:	89 3c 24             	mov    DWORD PTR [esp],edi
c001841c:	e8 d6 19 ff ff       	call   c0009df7 <free>
c0018421:	5e                   	pop    esi
c0018422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018426:	e8 cc 19 ff ff       	call   c0009df7 <free>
c001842b:	83 c4 10             	add    esp,0x10
c001842e:	eb 21                	jmp    c0018451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0018430:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0018434:	e9 76 fd ff ff       	jmp    c00181af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0018439:	83 ec 0c             	sub    esp,0xc
c001843c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018440:	e8 b2 19 ff ff       	call   c0009df7 <free>
c0018445:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0018449:	83 c4 10             	add    esp,0x10
c001844c:	e9 eb fc ff ff       	jmp    c001813c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0018451:	31 c0                	xor    eax,eax
c0018453:	eb 33                	jmp    c0018488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0018455:	83 ec 0c             	sub    esp,0xc
c0018458:	55                   	push   ebp
c0018459:	e8 18 53 ff ff       	call   c000d776 <File::close()>
c001845e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018461:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018464:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018467:	58                   	pop    eax
c0018468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001846c:	e8 86 19 ff ff       	call   c0009df7 <free>
c0018471:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018474:	e8 7e 19 ff ff       	call   c0009df7 <free>
c0018479:	5a                   	pop    edx
c001847a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001847e:	e8 74 19 ff ff       	call   c0009df7 <free>
c0018483:	83 c4 10             	add    esp,0x10
c0018486:	b0 01                	mov    al,0x1
c0018488:	81 c4 5c 03 00 00    	add    esp,0x35c
c001848e:	5b                   	pop    ebx
c001848f:	5e                   	pop    esi
c0018490:	5f                   	pop    edi
c0018491:	5d                   	pop    ebp
c0018492:	c3                   	ret    

c0018493 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0018493:	56                   	push   esi
c0018494:	31 d2                	xor    edx,edx
c0018496:	53                   	push   ebx
c0018497:	8b 1d 20 99 02 c0    	mov    ebx,DWORD PTR ds:0xc0029920
c001849d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00184a1:	39 d3                	cmp    ebx,edx
c00184a3:	7e 1b                	jle    c00184c0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00184a5:	8b 04 95 40 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64c0]
c00184ac:	39 c8                	cmp    eax,ecx
c00184ae:	77 0d                	ja     c00184bd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00184b0:	8b 34 95 40 99 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd66c0]
c00184b7:	01 c6                	add    esi,eax
c00184b9:	39 ce                	cmp    esi,ecx
c00184bb:	77 05                	ja     c00184c2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00184bd:	42                   	inc    edx
c00184be:	eb e1                	jmp    c00184a1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00184c0:	31 c0                	xor    eax,eax
c00184c2:	5b                   	pop    ebx
c00184c3:	5e                   	pop    esi
c00184c4:	c3                   	ret    

c00184c5 <Thr::getDriverNameFromAddress(unsigned long)>:
c00184c5:	53                   	push   ebx
c00184c6:	31 c0                	xor    eax,eax
c00184c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00184cc:	8b 1d 20 99 02 c0    	mov    ebx,DWORD PTR ds:0xc0029920
c00184d2:	39 c3                	cmp    ebx,eax
c00184d4:	7e 22                	jle    c00184f8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00184d6:	8b 14 85 40 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd64c0]
c00184dd:	39 ca                	cmp    edx,ecx
c00184df:	77 14                	ja     c00184f5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00184e1:	03 14 85 40 99 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd66c0]
c00184e8:	39 ca                	cmp    edx,ecx
c00184ea:	76 09                	jbe    c00184f5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00184ec:	8b 04 85 40 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd62c0]
c00184f3:	eb 05                	jmp    c00184fa <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00184f5:	40                   	inc    eax
c00184f6:	eb da                	jmp    c00184d2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00184f8:	31 c0                	xor    eax,eax
c00184fa:	5b                   	pop    ebx
c00184fb:	c3                   	ret    

c00184fc <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00184fc:	53                   	push   ebx
c00184fd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018501:	53                   	push   ebx
c0018502:	e8 8c ff ff ff       	call   c0018493 <Thr::getDriverBaseFromAddress(unsigned long)>
c0018507:	5a                   	pop    edx
c0018508:	31 d2                	xor    edx,edx
c001850a:	85 c0                	test   eax,eax
c001850c:	74 04                	je     c0018512 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001850e:	89 da                	mov    edx,ebx
c0018510:	29 c2                	sub    edx,eax
c0018512:	89 d0                	mov    eax,edx
c0018514:	5b                   	pop    ebx
c0018515:	c3                   	ret    

c0018516 <Thr::loadDLL(char const*, bool)>:
c0018516:	55                   	push   ebp
c0018517:	57                   	push   edi
c0018518:	56                   	push   esi
c0018519:	53                   	push   ebx
c001851a:	81 ec 34 01 00 00    	sub    esp,0x134
c0018520:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018527:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001852e:	56                   	push   esi
c001852f:	68 1e 6c 02 c0       	push   0xc0026c1e
c0018534:	e8 9a 4b ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0018539:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018540:	e8 a2 18 ff ff       	call   c0009de7 <malloc>
c0018545:	83 c4 0c             	add    esp,0xc
c0018548:	89 c3                	mov    ebx,eax
c001854a:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0018550:	56                   	push   esi
c0018551:	50                   	push   eax
c0018552:	e8 e7 50 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0018557:	83 c4 10             	add    esp,0x10
c001855a:	85 db                	test   ebx,ebx
c001855c:	75 3c                	jne    c001859a <Thr::loadDLL(char const*, bool)+0x84>
c001855e:	89 f8                	mov    eax,edi
c0018560:	84 c0                	test   al,al
c0018562:	0f 84 d2 01 00 00    	je     c001873a <Thr::loadDLL(char const*, bool)+0x224>
c0018568:	55                   	push   ebp
c0018569:	55                   	push   ebp
c001856a:	68 2f 6c 02 c0       	push   0xc0026c2f
c001856f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0018573:	55                   	push   ebp
c0018574:	e8 d7 81 fe ff       	call   c0000750 <strcpy>
c0018579:	58                   	pop    eax
c001857a:	5a                   	pop    edx
c001857b:	56                   	push   esi
c001857c:	55                   	push   ebp
c001857d:	e8 0e 83 fe ff       	call   c0000890 <strcat>
c0018582:	59                   	pop    ecx
c0018583:	58                   	pop    eax
c0018584:	68 42 6c 02 c0       	push   0xc0026c42
c0018589:	55                   	push   ebp
c001858a:	e8 01 83 fe ff       	call   c0000890 <strcat>
c001858f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018592:	e8 1e cc ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0018597:	83 c4 10             	add    esp,0x10
c001859a:	51                   	push   ecx
c001859b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001859f:	50                   	push   eax
c00185a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00185a4:	50                   	push   eax
c00185a5:	53                   	push   ebx
c00185a6:	e8 19 54 ff ff       	call   c000d9c4 <File::stat(unsigned long long*, bool*)>
c00185ab:	83 c4 10             	add    esp,0x10
c00185ae:	85 db                	test   ebx,ebx
c00185b0:	74 0c                	je     c00185be <Thr::loadDLL(char const*, bool)+0xa8>
c00185b2:	83 ec 0c             	sub    esp,0xc
c00185b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00185b7:	53                   	push   ebx
c00185b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00185bb:	83 c4 10             	add    esp,0x10
c00185be:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00185c3:	75 0a                	jne    c00185cf <Thr::loadDLL(char const*, bool)+0xb9>
c00185c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00185c9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00185cd:	75 3c                	jne    c001860b <Thr::loadDLL(char const*, bool)+0xf5>
c00185cf:	89 f8                	mov    eax,edi
c00185d1:	84 c0                	test   al,al
c00185d3:	0f 84 49 01 00 00    	je     c0018722 <Thr::loadDLL(char const*, bool)+0x20c>
c00185d9:	51                   	push   ecx
c00185da:	51                   	push   ecx
c00185db:	68 2f 6c 02 c0       	push   0xc0026c2f
c00185e0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00185e4:	53                   	push   ebx
c00185e5:	e8 66 81 fe ff       	call   c0000750 <strcpy>
c00185ea:	5d                   	pop    ebp
c00185eb:	58                   	pop    eax
c00185ec:	56                   	push   esi
c00185ed:	53                   	push   ebx
c00185ee:	e8 9d 82 fe ff       	call   c0000890 <strcat>
c00185f3:	58                   	pop    eax
c00185f4:	5a                   	pop    edx
c00185f5:	68 42 6c 02 c0       	push   0xc0026c42
c00185fa:	53                   	push   ebx
c00185fb:	e8 90 82 fe ff       	call   c0000890 <strcat>
c0018600:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018603:	e8 ad cb ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0018608:	83 c4 10             	add    esp,0x10
c001860b:	52                   	push   edx
c001860c:	6a 03                	push   0x3
c001860e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018612:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018616:	05 ff 0f 00 00       	add    eax,0xfff
c001861b:	83 d2 00             	adc    edx,0x0
c001861e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018622:	50                   	push   eax
c0018623:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c0018629:	e8 28 3f ff ff       	call   c000c556 <VAS::allocatePages(int, int)>
c001862e:	59                   	pop    ecx
c001862f:	89 c3                	mov    ebx,eax
c0018631:	5d                   	pop    ebp
c0018632:	50                   	push   eax
c0018633:	68 2e 4b 02 c0       	push   0xc0024b2e
c0018638:	e8 96 4a ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001863d:	89 34 24             	mov    DWORD PTR [esp],esi
c0018640:	e8 6b 80 fe ff       	call   c00006b0 <strlen>
c0018645:	8b 2d 20 99 02 c0    	mov    ebp,DWORD PTR ds:0xc0029920
c001864b:	40                   	inc    eax
c001864c:	89 04 24             	mov    DWORD PTR [esp],eax
c001864f:	e8 93 17 ff ff       	call   c0009de7 <malloc>
c0018654:	89 04 ad 40 9d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd62c0],eax
c001865b:	58                   	pop    eax
c001865c:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c0018661:	5a                   	pop    edx
c0018662:	56                   	push   esi
c0018663:	ff 34 85 40 9d 02 c0 	push   DWORD PTR [eax*4-0x3ffd62c0]
c001866a:	e8 e1 80 fe ff       	call   c0000750 <strcpy>
c001866f:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c0018674:	8d 50 01             	lea    edx,[eax+0x1]
c0018677:	89 1c 85 40 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64c0],ebx
c001867e:	89 15 20 99 02 c0    	mov    DWORD PTR ds:0xc0029920,edx
c0018684:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018688:	83 c4 0c             	add    esp,0xc
c001868b:	89 14 85 40 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66c0],edx
c0018692:	6a 01                	push   0x1
c0018694:	53                   	push   ebx
c0018695:	56                   	push   esi
c0018696:	e8 c2 f6 ff ff       	call   c0017d5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001869b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001869f:	83 c4 10             	add    esp,0x10
c00186a2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00186a7:	0f 85 89 00 00 00    	jne    c0018736 <Thr::loadDLL(char const*, bool)+0x220>
c00186ad:	89 f8                	mov    eax,edi
c00186af:	84 c0                	test   al,al
c00186b1:	74 73                	je     c0018726 <Thr::loadDLL(char const*, bool)+0x210>
c00186b3:	83 ec 0c             	sub    esp,0xc
c00186b6:	68 44 6c 02 c0       	push   0xc0026c44
c00186bb:	e8 f5 ca ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00186c0:	83 c4 10             	add    esp,0x10
c00186c3:	eb 61                	jmp    c0018726 <Thr::loadDLL(char const*, bool)+0x210>
c00186c5:	50                   	push   eax
c00186c6:	50                   	push   eax
c00186c7:	89 e8                	mov    eax,ebp
c00186c9:	c1 e0 0c             	shl    eax,0xc
c00186cc:	01 d8                	add    eax,ebx
c00186ce:	50                   	push   eax
c00186cf:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c00186d5:	e8 e4 39 ff ff       	call   c000c0be <VAS::getPageTableEntry(unsigned long)>
c00186da:	83 c4 10             	add    esp,0x10
c00186dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00186df:	a8 60                	test   al,0x60
c00186e1:	75 11                	jne    c00186f4 <Thr::loadDLL(char const*, bool)+0x1de>
c00186e3:	83 ec 0c             	sub    esp,0xc
c00186e6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00186eb:	50                   	push   eax
c00186ec:	e8 2a 1d ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c00186f1:	83 c4 10             	add    esp,0x10
c00186f4:	45                   	inc    ebp
c00186f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00186f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00186fd:	05 ff 0f 00 00       	add    eax,0xfff
c0018702:	bf 00 00 00 00       	mov    edi,0x0
c0018707:	83 d2 00             	adc    edx,0x0
c001870a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001870e:	c1 ea 0c             	shr    edx,0xc
c0018711:	39 c5                	cmp    ebp,eax
c0018713:	89 d1                	mov    ecx,edx
c0018715:	89 f8                	mov    eax,edi
c0018717:	19 c8                	sbb    eax,ecx
c0018719:	72 aa                	jb     c00186c5 <Thr::loadDLL(char const*, bool)+0x1af>
c001871b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018720:	75 18                	jne    c001873a <Thr::loadDLL(char const*, bool)+0x224>
c0018722:	31 db                	xor    ebx,ebx
c0018724:	eb 14                	jmp    c001873a <Thr::loadDLL(char const*, bool)+0x224>
c0018726:	83 ec 0c             	sub    esp,0xc
c0018729:	68 63 6c 02 c0       	push   0xc0026c63
c001872e:	e8 82 ca ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0018733:	83 c4 10             	add    esp,0x10
c0018736:	31 ed                	xor    ebp,ebp
c0018738:	eb bb                	jmp    c00186f5 <Thr::loadDLL(char const*, bool)+0x1df>
c001873a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018740:	89 d8                	mov    eax,ebx
c0018742:	5b                   	pop    ebx
c0018743:	5e                   	pop    esi
c0018744:	5f                   	pop    edi
c0018745:	5d                   	pop    ebp
c0018746:	c3                   	ret    

c0018747 <Thr::executeDLL(unsigned long, void*)>:
c0018747:	56                   	push   esi
c0018748:	53                   	push   ebx
c0018749:	52                   	push   edx
c001874a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001874e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018752:	85 db                	test   ebx,ebx
c0018754:	75 10                	jne    c0018766 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018756:	83 ec 0c             	sub    esp,0xc
c0018759:	68 7f 6c 02 c0       	push   0xc0026c7f
c001875e:	e8 52 ca ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0018763:	83 c4 10             	add    esp,0x10
c0018766:	50                   	push   eax
c0018767:	50                   	push   eax
c0018768:	53                   	push   ebx
c0018769:	68 a9 6c 02 c0       	push   0xc0026ca9
c001876e:	e8 60 49 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0018773:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018777:	89 d8                	mov    eax,ebx
c0018779:	83 c4 14             	add    esp,0x14
c001877c:	5b                   	pop    ebx
c001877d:	5e                   	pop    esi
c001877e:	ff e0                	jmp    eax

c0018780 <userModeEntryPoint(void*)>:
c0018780:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0018785:	48                   	dec    eax
c0018786:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001878b:	75 03                	jne    c0018790 <userModeEntryPoint(void*)+0x10>
c001878d:	fb                   	sti    
c001878e:	66 90                	xchg   ax,ax
c0018790:	fb                   	sti    
c0018791:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018796:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018799:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001879f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187a3:	e9 c7 7a fe ff       	jmp    c000026f <goToUsermode>

c00187a8 <changeTSS>:
c00187a8:	83 ec 14             	sub    esp,0x14
c00187ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187b0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00187b3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00187b8:	c1 e2 15             	shl    edx,0x15
c00187bb:	29 d0                	sub    eax,edx
c00187bd:	50                   	push   eax
c00187be:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00187c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00187c9:	05 7c 11 00 00       	add    eax,0x117c
c00187ce:	50                   	push   eax
c00187cf:	e8 2c 2f ff ff       	call   c000b700 <TSS::setESP(unsigned long)>
c00187d4:	83 c4 1c             	add    esp,0x1c
c00187d7:	c3                   	ret    

c00187d8 <switchToThread(ThreadControlBlock*)>:
c00187d8:	57                   	push   edi
c00187d9:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00187de:	56                   	push   esi
c00187df:	85 c0                	test   eax,eax
c00187e1:	53                   	push   ebx
c00187e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00187e6:	0f 85 90 00 00 00    	jne    c001887c <switchToThread(ThreadControlBlock*)+0xa4>
c00187ec:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c00187ef:	3c ff                	cmp    al,0xff
c00187f1:	0f 84 81 00 00 00    	je     c0018878 <switchToThread(ThreadControlBlock*)+0xa0>
c00187f7:	0f b6 d0             	movzx  edx,al
c00187fa:	b8 00 04 00 00       	mov    eax,0x400
c00187ff:	29 d0                	sub    eax,edx
c0018801:	d1 f8                	sar    eax,1
c0018803:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0018806:	66 90                	xchg   ax,ax
c0018808:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c001880b:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0018810:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018816:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001881d:	74 4d                	je     c001886c <switchToThread(ThreadControlBlock*)+0x94>
c001881f:	0f 31                	rdtsc  
c0018821:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0018826:	89 c6                	mov    esi,eax
c0018828:	89 d7                	mov    edi,edx
c001882a:	2b 35 18 a1 02 c0    	sub    esi,DWORD PTR ds:0xc002a118
c0018830:	89 15 2c a1 02 c0    	mov    DWORD PTR ds:0xc002a12c,edx
c0018836:	1b 3d 1c a1 02 c0    	sbb    edi,DWORD PTR ds:0xc002a11c
c001883c:	89 35 20 a1 02 c0    	mov    DWORD PTR ds:0xc002a120,esi
c0018842:	a3 18 a1 02 c0       	mov    ds:0xc002a118,eax
c0018847:	89 3d 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,edi
c001884d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018853:	89 15 1c a1 02 c0    	mov    DWORD PTR ds:0xc002a11c,edx
c0018859:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001885c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001885f:	01 c6                	add    esi,eax
c0018861:	11 d7                	adc    edi,edx
c0018863:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0018866:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0018869:	8d 76 00             	lea    esi,[esi+0x0]
c001886c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0018870:	5b                   	pop    ebx
c0018871:	5e                   	pop    esi
c0018872:	5f                   	pop    edi
c0018873:	e9 2f 7a fe ff       	jmp    c00002a7 <switchToThreadASM>
c0018878:	31 c0                	xor    eax,eax
c001887a:	eb 8c                	jmp    c0018808 <switchToThread(ThreadControlBlock*)+0x30>
c001887c:	5b                   	pop    ebx
c001887d:	c7 05 e0 a0 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x1
c0018887:	5e                   	pop    esi
c0018888:	5f                   	pop    edi
c0018889:	c3                   	ret    
c001888a:	66 90                	xchg   ax,ax

c001888c <Process::addArgs(char**)>:
c001888c:	57                   	push   edi
c001888d:	56                   	push   esi
c001888e:	53                   	push   ebx
c001888f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018893:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018897:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00188a1:	85 ff                	test   edi,edi
c00188a3:	74 43                	je     c00188e8 <Process::addArgs(char**)+0x5c>
c00188a5:	8b 07                	mov    eax,DWORD PTR [edi]
c00188a7:	85 c0                	test   eax,eax
c00188a9:	74 3d                	je     c00188e8 <Process::addArgs(char**)+0x5c>
c00188ab:	31 db                	xor    ebx,ebx
c00188ad:	8d 76 00             	lea    esi,[esi+0x0]
c00188b0:	83 ec 0c             	sub    esp,0xc
c00188b3:	50                   	push   eax
c00188b4:	e8 f7 7d fe ff       	call   c00006b0 <strlen>
c00188b9:	40                   	inc    eax
c00188ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00188bd:	e8 25 15 ff ff       	call   c0009de7 <malloc>
c00188c2:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00188c9:	5a                   	pop    edx
c00188ca:	59                   	pop    ecx
c00188cb:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00188ce:	43                   	inc    ebx
c00188cf:	50                   	push   eax
c00188d0:	e8 7b 7e fe ff       	call   c0000750 <strcpy>
c00188d5:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00188db:	83 c4 10             	add    esp,0x10
c00188de:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00188e1:	85 c0                	test   eax,eax
c00188e3:	75 cb                	jne    c00188b0 <Process::addArgs(char**)+0x24>
c00188e5:	8d 76 00             	lea    esi,[esi+0x0]
c00188e8:	5b                   	pop    ebx
c00188e9:	5e                   	pop    esi
c00188ea:	5f                   	pop    edi
c00188eb:	c3                   	ret    

c00188ec <Process::Process(char const*, Process*, char**)>:
c00188ec:	56                   	push   esi
c00188ed:	53                   	push   ebx
c00188ee:	83 ec 14             	sub    esp,0x14
c00188f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188f5:	05 0c 02 00 00       	add    eax,0x20c
c00188fa:	bb 07 00 00 00       	mov    ebx,0x7
c00188ff:	89 c6                	mov    esi,eax
c0018901:	8d 76 00             	lea    esi,[esi+0x0]
c0018904:	85 db                	test   ebx,ebx
c0018906:	78 14                	js     c001891c <Process::Process(char const*, Process*, char**)+0x30>
c0018908:	83 ec 0c             	sub    esp,0xc
c001890b:	56                   	push   esi
c001890c:	e8 8b af 00 00       	call   c002389c <ThreadControlBlock::ThreadControlBlock()>
c0018911:	83 c4 10             	add    esp,0x10
c0018914:	83 c6 5f             	add    esi,0x5f
c0018917:	4b                   	dec    ebx
c0018918:	eb ea                	jmp    c0018904 <Process::Process(char const*, Process*, char**)+0x18>
c001891a:	66 90                	xchg   ax,ax
c001891c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018920:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018927:	83 ec 0c             	sub    esp,0xc
c001892a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001892e:	e8 0b c7 ff ff       	call   c001503e <Krnl::newProcessEnv(Process*)>
c0018933:	83 c4 10             	add    esp,0x10
c0018936:	89 c2                	mov    edx,eax
c0018938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001893c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018946:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001894f:	a1 f0 85 02 c0       	mov    eax,ds:0xc00285f0
c0018954:	8d 50 01             	lea    edx,[eax+0x1]
c0018957:	89 15 f0 85 02 c0    	mov    DWORD PTR ds:0xc00285f0,edx
c001895d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018961:	89 02                	mov    DWORD PTR [edx],eax
c0018963:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001896b:	83 ec 0c             	sub    esp,0xc
c001896e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018972:	e8 70 14 ff ff       	call   c0009de7 <malloc>
c0018977:	83 c4 10             	add    esp,0x10
c001897a:	89 c3                	mov    ebx,eax
c001897c:	83 ec 08             	sub    esp,0x8
c001897f:	6a 00                	push   0x0
c0018981:	53                   	push   ebx
c0018982:	e8 77 3f ff ff       	call   c000c8fe <VAS::VAS(bool)>
c0018987:	83 c4 10             	add    esp,0x10
c001898a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001898e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018998:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00189a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189aa:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00189b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189ba:	85 c0                	test   eax,eax
c00189bc:	74 42                	je     c0018a00 <Process::Process(char const*, Process*, char**)+0x114>
c00189be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189c2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189c8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00189ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189d2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00189d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189e2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00189e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189ec:	05 0c 01 00 00       	add    eax,0x10c
c00189f1:	83 ec 08             	sub    esp,0x8
c00189f4:	52                   	push   edx
c00189f5:	50                   	push   eax
c00189f6:	e8 55 7d fe ff       	call   c0000750 <strcpy>
c00189fb:	83 c4 10             	add    esp,0x10
c00189fe:	eb 64                	jmp    c0018a64 <Process::Process(char const*, Process*, char**)+0x178>
c0018a00:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0018a08:	83 ec 0c             	sub    esp,0xc
c0018a0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018a0f:	e8 d3 13 ff ff       	call   c0009de7 <malloc>
c0018a14:	83 c4 10             	add    esp,0x10
c0018a17:	89 c3                	mov    ebx,eax
c0018a19:	83 ec 08             	sub    esp,0x8
c0018a1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a20:	53                   	push   ebx
c0018a21:	e8 ee 29 ff ff       	call   c000b414 <VgaText::VgaText(char const*)>
c0018a26:	83 c4 10             	add    esp,0x10
c0018a29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a2d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a3d:	83 ec 0c             	sub    esp,0xc
c0018a40:	50                   	push   eax
c0018a41:	e8 8d 21 ff ff       	call   c000abd3 <addToTerminalCycle(VgaText*)>
c0018a46:	83 c4 10             	add    esp,0x10
c0018a49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a4d:	05 0c 01 00 00       	add    eax,0x10c
c0018a52:	83 ec 08             	sub    esp,0x8
c0018a55:	68 c8 6c 02 c0       	push   0xc0026cc8
c0018a5a:	50                   	push   eax
c0018a5b:	e8 f0 7c fe ff       	call   c0000750 <strcpy>
c0018a60:	83 c4 10             	add    esp,0x10
c0018a63:	90                   	nop
c0018a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a68:	83 c0 0c             	add    eax,0xc
c0018a6b:	83 ec 08             	sub    esp,0x8
c0018a6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a72:	50                   	push   eax
c0018a73:	e8 d8 7c fe ff       	call   c0000750 <strcpy>
c0018a78:	83 c4 10             	add    esp,0x10
c0018a7b:	83 ec 08             	sub    esp,0x8
c0018a7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a86:	e8 01 fe ff ff       	call   c001888c <Process::addArgs(char**)>
c0018a8b:	83 c4 10             	add    esp,0x10
c0018a8e:	83 ec 08             	sub    esp,0x8
c0018a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a99:	e8 89 ed ff ff       	call   c0017827 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018a9e:	83 c4 10             	add    esp,0x10
c0018aa1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018aa5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018aa9:	83 f0 01             	xor    eax,0x1
c0018aac:	88 c2                	mov    dl,al
c0018aae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ab2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0018ab8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018abd:	83 ec 08             	sub    esp,0x8
c0018ac0:	50                   	push   eax
c0018ac1:	68 20 6d 02 c0       	push   0xc0026d20
c0018ac6:	e8 08 46 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0018acb:	83 c4 10             	add    esp,0x10
c0018ace:	90                   	nop
c0018acf:	83 c4 14             	add    esp,0x14
c0018ad2:	5b                   	pop    ebx
c0018ad3:	5e                   	pop    esi
c0018ad4:	c3                   	ret    
c0018ad5:	90                   	nop
c0018ad6:	66 90                	xchg   ax,ax

c0018ad8 <Process::Process(bool, char const*, Process*, char**)>:
c0018ad8:	56                   	push   esi
c0018ad9:	53                   	push   ebx
c0018ada:	83 ec 24             	sub    esp,0x24
c0018add:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018ae1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ae5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ae9:	05 0c 02 00 00       	add    eax,0x20c
c0018aee:	bb 07 00 00 00       	mov    ebx,0x7
c0018af3:	89 c6                	mov    esi,eax
c0018af5:	8d 76 00             	lea    esi,[esi+0x0]
c0018af8:	85 db                	test   ebx,ebx
c0018afa:	78 14                	js     c0018b10 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018afc:	83 ec 0c             	sub    esp,0xc
c0018aff:	56                   	push   esi
c0018b00:	e8 97 ad 00 00       	call   c002389c <ThreadControlBlock::ThreadControlBlock()>
c0018b05:	83 c4 10             	add    esp,0x10
c0018b08:	83 c6 5f             	add    esi,0x5f
c0018b0b:	4b                   	dec    ebx
c0018b0c:	eb ea                	jmp    c0018af8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018b0e:	66 90                	xchg   ax,ax
c0018b10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b14:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018b1b:	83 ec 0c             	sub    esp,0xc
c0018b1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b22:	e8 17 c5 ff ff       	call   c001503e <Krnl::newProcessEnv(Process*)>
c0018b27:	83 c4 10             	add    esp,0x10
c0018b2a:	89 c2                	mov    edx,eax
c0018b2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b30:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018b36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b3a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018b43:	a1 f0 85 02 c0       	mov    eax,ds:0xc00285f0
c0018b48:	8d 50 01             	lea    edx,[eax+0x1]
c0018b4b:	89 15 f0 85 02 c0    	mov    DWORD PTR ds:0xc00285f0,edx
c0018b51:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018b55:	89 02                	mov    DWORD PTR [edx],eax
c0018b57:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018b5f:	83 ec 0c             	sub    esp,0xc
c0018b62:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018b66:	e8 7c 12 ff ff       	call   c0009de7 <malloc>
c0018b6b:	83 c4 10             	add    esp,0x10
c0018b6e:	89 c3                	mov    ebx,eax
c0018b70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018b75:	83 ec 08             	sub    esp,0x8
c0018b78:	50                   	push   eax
c0018b79:	53                   	push   ebx
c0018b7a:	e8 7f 3d ff ff       	call   c000c8fe <VAS::VAS(bool)>
c0018b7f:	83 c4 10             	add    esp,0x10
c0018b82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b86:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018b8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b90:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018b9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018ba2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018ba8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bac:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018bb2:	85 c0                	test   eax,eax
c0018bb4:	74 42                	je     c0018bf8 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0018bb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bba:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018bc0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018bc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bca:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018bd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bd4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018bda:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018be0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018be4:	05 0c 01 00 00       	add    eax,0x10c
c0018be9:	83 ec 08             	sub    esp,0x8
c0018bec:	52                   	push   edx
c0018bed:	50                   	push   eax
c0018bee:	e8 5d 7b fe ff       	call   c0000750 <strcpy>
c0018bf3:	83 c4 10             	add    esp,0x10
c0018bf6:	eb 64                	jmp    c0018c5c <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018bf8:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0018c00:	83 ec 0c             	sub    esp,0xc
c0018c03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018c07:	e8 db 11 ff ff       	call   c0009de7 <malloc>
c0018c0c:	83 c4 10             	add    esp,0x10
c0018c0f:	89 c3                	mov    ebx,eax
c0018c11:	83 ec 08             	sub    esp,0x8
c0018c14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018c18:	53                   	push   ebx
c0018c19:	e8 f6 27 ff ff       	call   c000b414 <VgaText::VgaText(char const*)>
c0018c1e:	83 c4 10             	add    esp,0x10
c0018c21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c25:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018c2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c35:	83 ec 0c             	sub    esp,0xc
c0018c38:	50                   	push   eax
c0018c39:	e8 95 1f ff ff       	call   c000abd3 <addToTerminalCycle(VgaText*)>
c0018c3e:	83 c4 10             	add    esp,0x10
c0018c41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c45:	05 0c 01 00 00       	add    eax,0x10c
c0018c4a:	83 ec 08             	sub    esp,0x8
c0018c4d:	68 c8 6c 02 c0       	push   0xc0026cc8
c0018c52:	50                   	push   eax
c0018c53:	e8 f8 7a fe ff       	call   c0000750 <strcpy>
c0018c58:	83 c4 10             	add    esp,0x10
c0018c5b:	90                   	nop
c0018c5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c60:	83 c0 0c             	add    eax,0xc
c0018c63:	83 ec 08             	sub    esp,0x8
c0018c66:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018c6a:	50                   	push   eax
c0018c6b:	e8 e0 7a fe ff       	call   c0000750 <strcpy>
c0018c70:	83 c4 10             	add    esp,0x10
c0018c73:	83 ec 08             	sub    esp,0x8
c0018c76:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018c7e:	e8 09 fc ff ff       	call   c001888c <Process::addArgs(char**)>
c0018c83:	83 c4 10             	add    esp,0x10
c0018c86:	90                   	nop
c0018c87:	83 c4 24             	add    esp,0x24
c0018c8a:	5b                   	pop    ebx
c0018c8b:	5e                   	pop    esi
c0018c8c:	c3                   	ret    
c0018c8d:	8d 76 00             	lea    esi,[esi+0x0]

c0018c90 <taskStartupFunction>:
c0018c90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018c95:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018c98:	c3                   	ret    
c0018c99:	90                   	nop
c0018c9a:	66 90                	xchg   ax,ax

c0018c9c <Semaphore::Semaphore(int)>:
c0018c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018ca4:	89 10                	mov    DWORD PTR [eax],edx
c0018ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018caa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018cb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cb5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cc0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018cc7:	90                   	nop
c0018cc8:	c3                   	ret    
c0018cc9:	90                   	nop
c0018cca:	66 90                	xchg   ax,ax

c0018ccc <Mutex::Mutex()>:
c0018ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cd0:	6a 01                	push   0x1
c0018cd2:	50                   	push   eax
c0018cd3:	e8 c4 ff ff ff       	call   c0018c9c <Semaphore::Semaphore(int)>
c0018cd8:	83 c4 08             	add    esp,0x8
c0018cdb:	90                   	nop
c0018cdc:	c3                   	ret    
c0018cdd:	90                   	nop
c0018cde:	66 90                	xchg   ax,ax

c0018ce0 <Process::createThread(void (*)(void*), void*, int)>:
c0018ce0:	57                   	push   edi
c0018ce1:	31 c9                	xor    ecx,ecx
c0018ce3:	56                   	push   esi
c0018ce4:	53                   	push   ebx
c0018ce5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018ce9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018cf0:	89 f2                	mov    edx,esi
c0018cf2:	66 90                	xchg   ax,ax
c0018cf4:	0f b7 c2             	movzx  eax,dx
c0018cf7:	83 e2 01             	and    edx,0x1
c0018cfa:	74 14                	je     c0018d10 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018cfc:	d1 f8                	sar    eax,1
c0018cfe:	41                   	inc    ecx
c0018cff:	89 c2                	mov    edx,eax
c0018d01:	83 f9 10             	cmp    ecx,0x10
c0018d04:	75 ee                	jne    c0018cf4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0018d06:	31 db                	xor    ebx,ebx
c0018d08:	89 d8                	mov    eax,ebx
c0018d0a:	5b                   	pop    ebx
c0018d0b:	5e                   	pop    esi
c0018d0c:	5f                   	pop    edi
c0018d0d:	c3                   	ret    
c0018d0e:	66 90                	xchg   ax,ax
c0018d10:	b8 01 00 00 00       	mov    eax,0x1
c0018d15:	d3 e0                	shl    eax,cl
c0018d17:	09 c6                	or     esi,eax
c0018d19:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018d1c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018d23:	01 c0                	add    eax,eax
c0018d25:	01 c8                	add    eax,ecx
c0018d27:	8d 04 80             	lea    eax,[eax+eax*4]
c0018d2a:	01 d8                	add    eax,ebx
c0018d2c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018d33:	75 0b                	jne    c0018d40 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018d35:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018d3f:	90                   	nop
c0018d40:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018d46:	83 ec 08             	sub    esp,0x8
c0018d49:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018d4c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018d4f:	01 c0                	add    eax,eax
c0018d51:	01 c8                	add    eax,ecx
c0018d53:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018d56:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018d59:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018d5f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018d65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d69:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018d6f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018d75:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018d7c:	89 ca                	mov    edx,ecx
c0018d7e:	f7 da                	neg    edx
c0018d80:	c1 e2 15             	shl    edx,0x15
c0018d83:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018d89:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018d8f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d93:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018d9d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018da3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018da7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018dad:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018db7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018dc1:	53                   	push   ebx
c0018dc2:	68 04 a1 02 c0       	push   0xc002a104
c0018dc7:	e8 70 a8 00 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018dcc:	83 c4 10             	add    esp,0x10
c0018dcf:	89 d8                	mov    eax,ebx
c0018dd1:	5b                   	pop    ebx
c0018dd2:	5e                   	pop    esi
c0018dd3:	5f                   	pop    edi
c0018dd4:	c3                   	ret    
c0018dd5:	90                   	nop
c0018dd6:	66 90                	xchg   ax,ax

c0018dd8 <Process::createUserThread()>:
c0018dd8:	83 ec 0c             	sub    esp,0xc
c0018ddb:	68 80 00 00 00       	push   0x80
c0018de0:	6a 00                	push   0x0
c0018de2:	68 80 87 01 c0       	push   0xc0018780
c0018de7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018deb:	e8 f0 fe ff ff       	call   c0018ce0 <Process::createThread(void (*)(void*), void*, int)>
c0018df0:	83 c4 1c             	add    esp,0x1c
c0018df3:	c3                   	ret    

c0018df4 <setupMultitasking(void (*)())>:
c0018df4:	56                   	push   esi
c0018df5:	53                   	push   ebx
c0018df6:	51                   	push   ecx
c0018df7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018dfb:	eb 13                	jmp    c0018e10 <setupMultitasking(void (*)())+0x1c>
c0018dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0018e00:	83 ec 0c             	sub    esp,0xc
c0018e03:	68 04 a1 02 c0       	push   0xc002a104
c0018e08:	e8 77 a7 00 00       	call   c0023584 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018e0d:	83 c4 10             	add    esp,0x10
c0018e10:	83 ec 0c             	sub    esp,0xc
c0018e13:	68 04 a1 02 c0       	push   0xc002a104
c0018e18:	e8 43 a7 00 00       	call   c0023560 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018e1d:	83 c4 10             	add    esp,0x10
c0018e20:	84 c0                	test   al,al
c0018e22:	74 dc                	je     c0018e00 <setupMultitasking(void (*)())+0xc>
c0018e24:	83 ec 0c             	sub    esp,0xc
c0018e27:	68 1f 07 00 00       	push   0x71f
c0018e2c:	e8 b6 0f ff ff       	call   c0009de7 <malloc>
c0018e31:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018e38:	89 c3                	mov    ebx,eax
c0018e3a:	6a 00                	push   0x0
c0018e3c:	68 cc 6c 02 c0       	push   0xc0026ccc
c0018e41:	6a 01                	push   0x1
c0018e43:	50                   	push   eax
c0018e44:	e8 8f fc ff ff       	call   c0018ad8 <Process::Process(bool, char const*, Process*, char**)>
c0018e49:	83 c4 14             	add    esp,0x14
c0018e4c:	89 1d 10 a1 02 c0    	mov    DWORD PTR ds:0xc002a110,ebx
c0018e52:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018e58:	e8 84 20 ff ff       	call   c000aee1 <setActiveTerminal(VgaText*)>
c0018e5d:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018e65:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018e6f:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018e75:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018e78:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018e82:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018e88:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018e8e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018e98:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018ea2:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018eac:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018eb2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018ebc:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018ec2:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018ecc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018ed2:	58                   	pop    eax
c0018ed3:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018ed9:	5a                   	pop    edx
c0018eda:	68 c8 6c 02 c0       	push   0xc0026cc8
c0018edf:	50                   	push   eax
c0018ee0:	e8 6b 78 fe ff       	call   c0000750 <strcpy>
c0018ee5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018eec:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018ef0:	83 c4 14             	add    esp,0x14
c0018ef3:	5b                   	pop    ebx
c0018ef4:	5e                   	pop    esi
c0018ef5:	e9 9f 73 fe ff       	jmp    c0000299 <switchToThreadASMFirstTime>
c0018efa:	66 90                	xchg   ax,ax

c0018efc <schedule()>:
c0018efc:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c0018f01:	85 c0                	test   eax,eax
c0018f03:	74 0b                	je     c0018f10 <schedule()+0x14>
c0018f05:	c7 05 e0 a0 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x1
c0018f0f:	c3                   	ret    
c0018f10:	53                   	push   ebx
c0018f11:	83 ec 14             	sub    esp,0x14
c0018f14:	68 04 a1 02 c0       	push   0xc002a104
c0018f19:	e8 42 a6 00 00       	call   c0023560 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018f1e:	83 c4 10             	add    esp,0x10
c0018f21:	84 c0                	test   al,al
c0018f23:	75 3b                	jne    c0018f60 <schedule()+0x64>
c0018f25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018f2d:	4a                   	dec    edx
c0018f2e:	74 38                	je     c0018f68 <schedule()+0x6c>
c0018f30:	83 ec 0c             	sub    esp,0xc
c0018f33:	68 04 a1 02 c0       	push   0xc002a104
c0018f38:	e8 3f a6 00 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018f3d:	c7 04 24 04 a1 02 c0 	mov    DWORD PTR [esp],0xc002a104
c0018f44:	89 c3                	mov    ebx,eax
c0018f46:	e8 39 a6 00 00       	call   c0023584 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018f4b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018f52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f55:	e8 7e f8 ff ff       	call   c00187d8 <switchToThread(ThreadControlBlock*)>
c0018f5a:	83 c4 10             	add    esp,0x10
c0018f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f60:	83 c4 08             	add    esp,0x8
c0018f63:	5b                   	pop    ebx
c0018f64:	c3                   	ret    
c0018f65:	8d 76 00             	lea    esi,[esi+0x0]
c0018f68:	83 ec 08             	sub    esp,0x8
c0018f6b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018f72:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018f78:	68 04 a1 02 c0       	push   0xc002a104
c0018f7d:	e8 ba a6 00 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018f82:	83 c4 10             	add    esp,0x10
c0018f85:	eb a9                	jmp    c0018f30 <schedule()+0x34>
c0018f87:	90                   	nop

c0018f88 <Semaphore::tryAcquire()>:
c0018f88:	53                   	push   ebx
c0018f89:	83 ec 08             	sub    esp,0x8
c0018f8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018f90:	fa                   	cli    
c0018f91:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0018f96:	8d 50 01             	lea    edx,[eax+0x1]
c0018f99:	89 15 e8 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e8,edx
c0018f9f:	8b 15 e4 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0e4
c0018fa5:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018fa8:	89 1d e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,ebx
c0018fae:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018fb1:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0018fb3:	7c 33                	jl     c0018fe8 <Semaphore::tryAcquire()+0x60>
c0018fb5:	89 15 e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,edx
c0018fbb:	85 d2                	test   edx,edx
c0018fbd:	75 0d                	jne    c0018fcc <Semaphore::tryAcquire()+0x44>
c0018fbf:	8b 15 e0 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0e0
c0018fc5:	85 d2                	test   edx,edx
c0018fc7:	75 6b                	jne    c0019034 <Semaphore::tryAcquire()+0xac>
c0018fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0018fcc:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0018fd1:	85 c0                	test   eax,eax
c0018fd3:	74 0b                	je     c0018fe0 <Semaphore::tryAcquire()+0x58>
c0018fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fd8:	31 c0                	xor    eax,eax
c0018fda:	83 c4 08             	add    esp,0x8
c0018fdd:	5b                   	pop    ebx
c0018fde:	c3                   	ret    
c0018fdf:	90                   	nop
c0018fe0:	fb                   	sti    
c0018fe1:	83 c4 08             	add    esp,0x8
c0018fe4:	5b                   	pop    ebx
c0018fe5:	c3                   	ret    
c0018fe6:	66 90                	xchg   ax,ax
c0018fe8:	43                   	inc    ebx
c0018fe9:	89 15 e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,edx
c0018fef:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0018ff2:	85 d2                	test   edx,edx
c0018ff4:	75 22                	jne    c0019018 <Semaphore::tryAcquire()+0x90>
c0018ff6:	8b 0d e0 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a0e0
c0018ffc:	85 c9                	test   ecx,ecx
c0018ffe:	74 18                	je     c0019018 <Semaphore::tryAcquire()+0x90>
c0019000:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c001900a:	e8 ed fe ff ff       	call   c0018efc <schedule()>
c001900f:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019014:	48                   	dec    eax
c0019015:	8d 76 00             	lea    esi,[esi+0x0]
c0019018:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001901d:	85 c0                	test   eax,eax
c001901f:	75 0b                	jne    c001902c <Semaphore::tryAcquire()+0xa4>
c0019021:	fb                   	sti    
c0019022:	b0 01                	mov    al,0x1
c0019024:	83 c4 08             	add    esp,0x8
c0019027:	5b                   	pop    ebx
c0019028:	c3                   	ret    
c0019029:	8d 76 00             	lea    esi,[esi+0x0]
c001902c:	b0 01                	mov    al,0x1
c001902e:	83 c4 08             	add    esp,0x8
c0019031:	5b                   	pop    ebx
c0019032:	c3                   	ret    
c0019033:	90                   	nop
c0019034:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c001903e:	e8 b9 fe ff ff       	call   c0018efc <schedule()>
c0019043:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019048:	48                   	dec    eax
c0019049:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001904e:	85 c0                	test   eax,eax
c0019050:	75 86                	jne    c0018fd8 <Semaphore::tryAcquire()+0x50>
c0019052:	eb 8c                	jmp    c0018fe0 <Semaphore::tryAcquire()+0x58>

c0019054 <Semaphore::assertLocked(char const*)>:
c0019054:	83 ec 0c             	sub    esp,0xc
c0019057:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001905b:	fa                   	cli    
c001905c:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019062:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c0019067:	8d 48 01             	lea    ecx,[eax+0x1]
c001906a:	89 0d e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,ecx
c0019070:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019072:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0019075:	7c 29                	jl     c00190a0 <Semaphore::assertLocked(char const*)+0x4c>
c0019077:	90                   	nop
c0019078:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c001907d:	85 c0                	test   eax,eax
c001907f:	75 0b                	jne    c001908c <Semaphore::assertLocked(char const*)+0x38>
c0019081:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c0019086:	85 c0                	test   eax,eax
c0019088:	75 2e                	jne    c00190b8 <Semaphore::assertLocked(char const*)+0x64>
c001908a:	66 90                	xchg   ax,ax
c001908c:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019091:	48                   	dec    eax
c0019092:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019097:	75 03                	jne    c001909c <Semaphore::assertLocked(char const*)+0x48>
c0019099:	fb                   	sti    
c001909a:	66 90                	xchg   ax,ax
c001909c:	83 c4 0c             	add    esp,0xc
c001909f:	c3                   	ret    
c00190a0:	83 ec 0c             	sub    esp,0xc
c00190a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00190a7:	e8 09 c1 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00190ac:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00190b1:	83 c4 10             	add    esp,0x10
c00190b4:	48                   	dec    eax
c00190b5:	eb c1                	jmp    c0019078 <Semaphore::assertLocked(char const*)+0x24>
c00190b7:	90                   	nop
c00190b8:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c00190c2:	e8 35 fe ff ff       	call   c0018efc <schedule()>
c00190c7:	eb c3                	jmp    c001908c <Semaphore::assertLocked(char const*)+0x38>
c00190c9:	8d 76 00             	lea    esi,[esi+0x0]

c00190cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00190cc:	83 ec 0c             	sub    esp,0xc
c00190cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00190d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00190d8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00190db:	e8 1c fe ff ff       	call   c0018efc <schedule()>
c00190e0:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00190e5:	48                   	dec    eax
c00190e6:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00190eb:	75 03                	jne    c00190f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00190ed:	fb                   	sti    
c00190ee:	66 90                	xchg   ax,ax
c00190f0:	83 c4 0c             	add    esp,0xc
c00190f3:	c3                   	ret    

c00190f4 <blockTask(TaskState)>:
c00190f4:	83 ec 0c             	sub    esp,0xc
c00190f7:	fa                   	cli    
c00190f8:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00190fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019102:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019107:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001910a:	e8 ed fd ff ff       	call   c0018efc <schedule()>
c001910f:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019114:	48                   	dec    eax
c0019115:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001911a:	75 04                	jne    c0019120 <blockTask(TaskState)+0x2c>
c001911c:	fb                   	sti    
c001911d:	8d 76 00             	lea    esi,[esi+0x0]
c0019120:	83 c4 0c             	add    esp,0xc
c0019123:	c3                   	ret    

c0019124 <waitTask(int, int*, int)>:
c0019124:	83 ec 18             	sub    esp,0x18
c0019127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001912c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019130:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0019133:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001913c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001913f:	6a 07                	push   0x7
c0019141:	e8 ae ff ff ff       	call   c00190f4 <blockTask(TaskState)>
c0019146:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001914b:	83 c4 10             	add    esp,0x10
c001914e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0019151:	85 d2                	test   edx,edx
c0019153:	74 0b                	je     c0019160 <waitTask(int, int*, int)+0x3c>
c0019155:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0019158:	89 02                	mov    DWORD PTR [edx],eax
c001915a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001915f:	90                   	nop
c0019160:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0019163:	83 c4 0c             	add    esp,0xc
c0019166:	c3                   	ret    
c0019167:	90                   	nop

c0019168 <milliTenthSleepUntil(unsigned int)>:
c0019168:	83 ec 0c             	sub    esp,0xc
c001916b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001916f:	39 05 ec 91 02 c0    	cmp    DWORD PTR ds:0xc00291ec,eax
c0019175:	76 05                	jbe    c001917c <milliTenthSleepUntil(unsigned int)+0x14>
c0019177:	90                   	nop
c0019178:	83 c4 0c             	add    esp,0xc
c001917b:	c3                   	ret    
c001917c:	fa                   	cli    
c001917d:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019183:	83 ec 08             	sub    esp,0x8
c0019186:	ff 05 e4 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e4
c001918c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019192:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0019195:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001919b:	68 f8 a0 02 c0       	push   0xc002a0f8
c00191a0:	e8 97 a4 00 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00191a5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00191ac:	e8 43 ff ff ff       	call   c00190f4 <blockTask(TaskState)>
c00191b1:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00191b6:	83 c4 10             	add    esp,0x10
c00191b9:	48                   	dec    eax
c00191ba:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c00191bf:	85 c0                	test   eax,eax
c00191c1:	75 09                	jne    c00191cc <milliTenthSleepUntil(unsigned int)+0x64>
c00191c3:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c00191c8:	85 c0                	test   eax,eax
c00191ca:	75 14                	jne    c00191e0 <milliTenthSleepUntil(unsigned int)+0x78>
c00191cc:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00191d1:	48                   	dec    eax
c00191d2:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00191d7:	75 9f                	jne    c0019178 <milliTenthSleepUntil(unsigned int)+0x10>
c00191d9:	fb                   	sti    
c00191da:	83 c4 0c             	add    esp,0xc
c00191dd:	c3                   	ret    
c00191de:	66 90                	xchg   ax,ax
c00191e0:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c00191ea:	e8 0d fd ff ff       	call   c0018efc <schedule()>
c00191ef:	eb db                	jmp    c00191cc <milliTenthSleepUntil(unsigned int)+0x64>
c00191f1:	8d 76 00             	lea    esi,[esi+0x0]

c00191f4 <milliTenthSleep(unsigned int)>:
c00191f4:	a1 ec 91 02 c0       	mov    eax,ds:0xc00291ec
c00191f9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00191fd:	e9 66 ff ff ff       	jmp    c0019168 <milliTenthSleepUntil(unsigned int)>
c0019202:	66 90                	xchg   ax,ax

c0019204 <sleep(unsigned int)>:
c0019204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019208:	8d 04 80             	lea    eax,[eax+eax*4]
c001920b:	8d 04 80             	lea    eax,[eax+eax*4]
c001920e:	8d 04 80             	lea    eax,[eax+eax*4]
c0019211:	8d 04 80             	lea    eax,[eax+eax*4]
c0019214:	c1 e0 04             	shl    eax,0x4
c0019217:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001921b:	eb d7                	jmp    c00191f4 <milliTenthSleep(unsigned int)>
c001921d:	90                   	nop
c001921e:	66 90                	xchg   ax,ax

c0019220 <Semaphore::acquire()>:
c0019220:	83 ec 0c             	sub    esp,0xc
c0019223:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019227:	fa                   	cli    
c0019228:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c001922d:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019233:	8d 48 01             	lea    ecx,[eax+0x1]
c0019236:	89 0d e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,ecx
c001923c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001923f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0019241:	7d 2d                	jge    c0019270 <Semaphore::acquire()+0x50>
c0019243:	41                   	inc    ecx
c0019244:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0019247:	90                   	nop
c0019248:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c001924d:	85 c0                	test   eax,eax
c001924f:	75 0b                	jne    c001925c <Semaphore::acquire()+0x3c>
c0019251:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c0019256:	85 c0                	test   eax,eax
c0019258:	75 62                	jne    c00192bc <Semaphore::acquire()+0x9c>
c001925a:	66 90                	xchg   ax,ax
c001925c:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019261:	48                   	dec    eax
c0019262:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019267:	75 03                	jne    c001926c <Semaphore::acquire()+0x4c>
c0019269:	fb                   	sti    
c001926a:	66 90                	xchg   ax,ax
c001926c:	83 c4 0c             	add    esp,0xc
c001926f:	c3                   	ret    
c0019270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019275:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001927c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001927f:	85 c9                	test   ecx,ecx
c0019281:	74 4d                	je     c00192d0 <Semaphore::acquire()+0xb0>
c0019283:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0019286:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001928c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001928f:	90                   	nop
c0019290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019295:	83 ec 0c             	sub    esp,0xc
c0019298:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001929b:	68 48 6d 02 c0       	push   0xc0026d48
c00192a0:	e8 2e 3e ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00192a5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00192ac:	e8 43 fe ff ff       	call   c00190f4 <blockTask(TaskState)>
c00192b1:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00192b6:	83 c4 10             	add    esp,0x10
c00192b9:	48                   	dec    eax
c00192ba:	eb 8c                	jmp    c0019248 <Semaphore::acquire()+0x28>
c00192bc:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c00192c6:	e8 31 fc ff ff       	call   c0018efc <schedule()>
c00192cb:	eb 8f                	jmp    c001925c <Semaphore::acquire()+0x3c>
c00192cd:	8d 76 00             	lea    esi,[esi+0x0]
c00192d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00192d8:	eb b6                	jmp    c0019290 <Semaphore::acquire()+0x70>
c00192da:	66 90                	xchg   ax,ax

c00192dc <taskReturned>:
c00192dc:	83 ec 18             	sub    esp,0x18
c00192df:	68 68 6d 02 c0       	push   0xc0026d68
c00192e4:	e8 cc be ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00192e9:	83 c4 10             	add    esp,0x10
c00192ec:	83 ec 0c             	sub    esp,0xc
c00192ef:	6a 02                	push   0x2
c00192f1:	e8 fe fd ff ff       	call   c00190f4 <blockTask(TaskState)>
c00192f6:	fa                   	cli    
c00192f7:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00192fd:	e8 fa fb ff ff       	call   c0018efc <schedule()>
c0019302:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019307:	83 c4 10             	add    esp,0x10
c001930a:	48                   	dec    eax
c001930b:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019310:	85 c0                	test   eax,eax
c0019312:	75 d8                	jne    c00192ec <taskReturned+0x10>
c0019314:	fb                   	sti    
c0019315:	eb d5                	jmp    c00192ec <taskReturned+0x10>
c0019317:	90                   	nop

c0019318 <Thr::processFromPID(int)>:
c0019318:	57                   	push   edi
c0019319:	56                   	push   esi
c001931a:	53                   	push   ebx
c001931b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001931f:	fa                   	cli    
c0019320:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019326:	83 ec 0c             	sub    esp,0xc
c0019329:	68 04 a1 02 c0       	push   0xc002a104
c001932e:	e8 49 a2 00 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019333:	83 c4 10             	add    esp,0x10
c0019336:	89 c7                	mov    edi,eax
c0019338:	eb 16                	jmp    c0019350 <Thr::processFromPID(int)+0x38>
c001933a:	66 90                	xchg   ax,ax
c001933c:	83 ec 0c             	sub    esp,0xc
c001933f:	68 04 a1 02 c0       	push   0xc002a104
c0019344:	e8 33 a2 00 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019349:	83 c4 10             	add    esp,0x10
c001934c:	39 f8                	cmp    eax,edi
c001934e:	74 4c                	je     c001939c <Thr::processFromPID(int)+0x84>
c0019350:	83 ec 0c             	sub    esp,0xc
c0019353:	68 04 a1 02 c0       	push   0xc002a104
c0019358:	e8 1f a2 00 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001935d:	c7 04 24 04 a1 02 c0 	mov    DWORD PTR [esp],0xc002a104
c0019364:	89 c3                	mov    ebx,eax
c0019366:	e8 19 a2 00 00       	call   c0023584 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001936b:	58                   	pop    eax
c001936c:	5a                   	pop    edx
c001936d:	53                   	push   ebx
c001936e:	68 04 a1 02 c0       	push   0xc002a104
c0019373:	e8 c4 a2 00 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019378:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001937b:	83 c4 10             	add    esp,0x10
c001937e:	39 30                	cmp    DWORD PTR [eax],esi
c0019380:	75 ba                	jne    c001933c <Thr::processFromPID(int)+0x24>
c0019382:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019387:	48                   	dec    eax
c0019388:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001938d:	74 09                	je     c0019398 <Thr::processFromPID(int)+0x80>
c001938f:	90                   	nop
c0019390:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019393:	5b                   	pop    ebx
c0019394:	5e                   	pop    esi
c0019395:	5f                   	pop    edi
c0019396:	c3                   	ret    
c0019397:	90                   	nop
c0019398:	fb                   	sti    
c0019399:	eb f5                	jmp    c0019390 <Thr::processFromPID(int)+0x78>
c001939b:	90                   	nop
c001939c:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00193a1:	48                   	dec    eax
c00193a2:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00193a7:	75 07                	jne    c00193b0 <Thr::processFromPID(int)+0x98>
c00193a9:	fb                   	sti    
c00193aa:	5b                   	pop    ebx
c00193ab:	5e                   	pop    esi
c00193ac:	5f                   	pop    edi
c00193ad:	c3                   	ret    
c00193ae:	66 90                	xchg   ax,ax
c00193b0:	5b                   	pop    ebx
c00193b1:	31 c0                	xor    eax,eax
c00193b3:	5e                   	pop    esi
c00193b4:	5f                   	pop    edi
c00193b5:	c3                   	ret    
c00193b6:	66 90                	xchg   ax,ax

c00193b8 <unblockTask(ThreadControlBlock*)>:
c00193b8:	53                   	push   ebx
c00193b9:	83 ec 08             	sub    esp,0x8
c00193bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00193c0:	fa                   	cli    
c00193c1:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00193c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00193ca:	85 c0                	test   eax,eax
c00193cc:	74 66                	je     c0019434 <unblockTask(ThreadControlBlock*)+0x7c>
c00193ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00193d1:	48                   	dec    eax
c00193d2:	74 38                	je     c001940c <unblockTask(ThreadControlBlock*)+0x54>
c00193d4:	83 ec 0c             	sub    esp,0xc
c00193d7:	68 04 a1 02 c0       	push   0xc002a104
c00193dc:	e8 9b a1 00 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193e1:	83 c4 10             	add    esp,0x10
c00193e4:	85 c0                	test   eax,eax
c00193e6:	75 1c                	jne    c0019404 <unblockTask(ThreadControlBlock*)+0x4c>
c00193e8:	eb 5e                	jmp    c0019448 <unblockTask(ThreadControlBlock*)+0x90>
c00193ea:	66 90                	xchg   ax,ax
c00193ec:	83 ec 08             	sub    esp,0x8
c00193ef:	50                   	push   eax
c00193f0:	68 04 a1 02 c0       	push   0xc002a104
c00193f5:	e8 32 a5 00 00       	call   c002392c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00193fa:	83 c4 10             	add    esp,0x10
c00193fd:	85 c0                	test   eax,eax
c00193ff:	74 47                	je     c0019448 <unblockTask(ThreadControlBlock*)+0x90>
c0019401:	8d 76 00             	lea    esi,[esi+0x0]
c0019404:	39 c3                	cmp    ebx,eax
c0019406:	75 e4                	jne    c00193ec <unblockTask(ThreadControlBlock*)+0x34>
c0019408:	eb 12                	jmp    c001941c <unblockTask(ThreadControlBlock*)+0x64>
c001940a:	66 90                	xchg   ax,ax
c001940c:	83 ec 0c             	sub    esp,0xc
c001940f:	68 ea 6c 02 c0       	push   0xc0026cea
c0019414:	e8 ba 3c ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0019419:	83 c4 10             	add    esp,0x10
c001941c:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019421:	48                   	dec    eax
c0019422:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019427:	75 03                	jne    c001942c <unblockTask(ThreadControlBlock*)+0x74>
c0019429:	fb                   	sti    
c001942a:	66 90                	xchg   ax,ax
c001942c:	83 c4 08             	add    esp,0x8
c001942f:	5b                   	pop    ebx
c0019430:	c3                   	ret    
c0019431:	8d 76 00             	lea    esi,[esi+0x0]
c0019434:	83 ec 0c             	sub    esp,0xc
c0019437:	68 d3 6c 02 c0       	push   0xc0026cd3
c001943c:	e8 92 3c ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0019441:	83 c4 10             	add    esp,0x10
c0019444:	eb d6                	jmp    c001941c <unblockTask(ThreadControlBlock*)+0x64>
c0019446:	66 90                	xchg   ax,ax
c0019448:	83 ec 08             	sub    esp,0x8
c001944b:	53                   	push   ebx
c001944c:	68 04 a1 02 c0       	push   0xc002a104
c0019451:	e8 e6 a1 00 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019456:	83 c4 10             	add    esp,0x10
c0019459:	eb c1                	jmp    c001941c <unblockTask(ThreadControlBlock*)+0x64>
c001945b:	90                   	nop

c001945c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001945c:	55                   	push   ebp
c001945d:	57                   	push   edi
c001945e:	56                   	push   esi
c001945f:	53                   	push   ebx
c0019460:	83 ec 1c             	sub    esp,0x1c
c0019463:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019467:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001946a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0019470:	85 ff                	test   edi,edi
c0019472:	7e 24                	jle    c0019498 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0019474:	31 f6                	xor    esi,esi
c0019476:	66 90                	xchg   ax,ax
c0019478:	83 ec 0c             	sub    esp,0xc
c001947b:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0019482:	46                   	inc    esi
c0019483:	e8 6f 09 ff ff       	call   c0009df7 <free>
c0019488:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001948b:	83 c4 10             	add    esp,0x10
c001948e:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0019494:	7f e2                	jg     c0019478 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0019496:	66 90                	xchg   ax,ax
c0019498:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00194a2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00194a7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00194aa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00194ad:	d3 c0                	rol    eax,cl
c00194af:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00194b6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00194b9:	89 f7                	mov    edi,esi
c00194bb:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00194c3:	0f 85 73 01 00 00    	jne    c001963c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00194c9:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00194cf:	85 ed                	test   ebp,ebp
c00194d1:	74 1d                	je     c00194f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00194d3:	83 ec 0c             	sub    esp,0xc
c00194d6:	55                   	push   ebp
c00194d7:	e8 7e ba ff ff       	call   c0014f5a <EnvVarContainer::~EnvVarContainer()>
c00194dc:	59                   	pop    ecx
c00194dd:	5e                   	pop    esi
c00194de:	6a 0c                	push   0xc
c00194e0:	55                   	push   ebp
c00194e1:	e8 0c 3b ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c00194e6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00194e9:	83 c4 10             	add    esp,0x10
c00194ec:	89 f7                	mov    edi,esi
c00194ee:	66 90                	xchg   ax,ax
c00194f0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00194f6:	85 c0                	test   eax,eax
c00194f8:	0f 84 b2 00 00 00    	je     c00195b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00194fe:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0019501:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019505:	31 c9                	xor    ecx,ecx
c0019507:	eb 17                	jmp    c0019520 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0019509:	8d 76 00             	lea    esi,[esi+0x0]
c001950c:	41                   	inc    ecx
c001950d:	83 f9 10             	cmp    ecx,0x10
c0019510:	0f 84 9a 00 00 00    	je     c00195b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0019516:	66 90                	xchg   ax,ax
c0019518:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001951e:	66 90                	xchg   ax,ax
c0019520:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0019527:	d3 fa                	sar    edx,cl
c0019529:	83 e2 01             	and    edx,0x1
c001952c:	74 de                	je     c001950c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001952e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0019531:	01 d2                	add    edx,edx
c0019533:	01 ca                	add    edx,ecx
c0019535:	8d 14 92             	lea    edx,[edx+edx*4]
c0019538:	01 d0                	add    eax,edx
c001953a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0019540:	83 fd 07             	cmp    ebp,0x7
c0019543:	75 c7                	jne    c001950c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019545:	05 40 02 00 00       	add    eax,0x240
c001954a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001954d:	83 fd ff             	cmp    ebp,0xffffffff
c0019550:	0f 8c ee 00 00 00    	jl     c0019644 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0019556:	0f 84 ac 01 00 00    	je     c0019708 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c001955c:	85 ed                	test   ebp,ebp
c001955e:	0f 84 90 01 00 00    	je     c00196f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0019564:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0019566:	75 a4                	jne    c001950c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019568:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001956e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019572:	01 d0                	add    eax,edx
c0019574:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019578:	83 ec 0c             	sub    esp,0xc
c001957b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0019581:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019584:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001958a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019591:	50                   	push   eax
c0019592:	e8 21 fe ff ff       	call   c00193b8 <unblockTask(ThreadControlBlock*)>
c0019597:	83 c4 10             	add    esp,0x10
c001959a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001959d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00195a1:	89 f7                	mov    edi,esi
c00195a3:	41                   	inc    ecx
c00195a4:	83 f9 10             	cmp    ecx,0x10
c00195a7:	0f 85 6b ff ff ff    	jne    c0019518 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00195ad:	8d 76 00             	lea    esi,[esi+0x0]
c00195b0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00195b6:	85 c0                	test   eax,eax
c00195b8:	74 62                	je     c001961c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00195ba:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00195c0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00195c6:	74 54                	je     c001961c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00195c8:	83 ec 0c             	sub    esp,0xc
c00195cb:	68 04 a1 02 c0       	push   0xc002a104
c00195d0:	e8 a7 9f 00 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00195d5:	c7 04 24 04 a1 02 c0 	mov    DWORD PTR [esp],0xc002a104
c00195dc:	89 c7                	mov    edi,eax
c00195de:	e8 7d 9f 00 00       	call   c0023560 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00195e3:	83 c4 10             	add    esp,0x10
c00195e6:	84 c0                	test   al,al
c00195e8:	0f 84 ce 00 00 00    	je     c00196bc <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00195ee:	66 90                	xchg   ax,ax
c00195f0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00195f3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00195f9:	85 d2                	test   edx,edx
c00195fb:	74 0f                	je     c001960c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c00195fd:	83 ec 0c             	sub    esp,0xc
c0019600:	8b 02                	mov    eax,DWORD PTR [edx]
c0019602:	52                   	push   edx
c0019603:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019606:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019609:	83 c4 10             	add    esp,0x10
c001960c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0019616:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0019619:	8d 76 00             	lea    esi,[esi+0x0]
c001961c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0019622:	85 db                	test   ebx,ebx
c0019624:	74 16                	je     c001963c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0019626:	83 ec 0c             	sub    esp,0xc
c0019629:	53                   	push   ebx
c001962a:	e8 a9 2c ff ff       	call   c000c2d8 <VAS::~VAS()>
c001962f:	58                   	pop    eax
c0019630:	5a                   	pop    edx
c0019631:	6a 14                	push   0x14
c0019633:	53                   	push   ebx
c0019634:	e8 b9 39 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0019639:	83 c4 10             	add    esp,0x10
c001963c:	83 c4 1c             	add    esp,0x1c
c001963f:	5b                   	pop    ebx
c0019640:	5e                   	pop    esi
c0019641:	5f                   	pop    edi
c0019642:	5d                   	pop    ebp
c0019643:	c3                   	ret    
c0019644:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019648:	83 ec 0c             	sub    esp,0xc
c001964b:	68 9c 6d 02 c0       	push   0xc0026d9c
c0019650:	e8 60 bb ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0019655:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019658:	83 c4 10             	add    esp,0x10
c001965b:	89 f7                	mov    edi,esi
c001965d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019661:	e9 a6 fe ff ff       	jmp    c001950c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019666:	66 90                	xchg   ax,ax
c0019668:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001966e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0019674:	75 1e                	jne    c0019694 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019676:	83 ec 0c             	sub    esp,0xc
c0019679:	68 04 6e 02 c0       	push   0xc0026e04
c001967e:	e8 50 3a ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0019683:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001968a:	e8 65 fa ff ff       	call   c00190f4 <blockTask(TaskState)>
c001968f:	83 c4 10             	add    esp,0x10
c0019692:	66 90                	xchg   ax,ax
c0019694:	83 ec 08             	sub    esp,0x8
c0019697:	56                   	push   esi
c0019698:	68 04 a1 02 c0       	push   0xc002a104
c001969d:	e8 9a 9f 00 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00196a2:	c7 04 24 04 a1 02 c0 	mov    DWORD PTR [esp],0xc002a104
c00196a9:	e8 ce 9e 00 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00196ae:	83 c4 10             	add    esp,0x10
c00196b1:	39 f8                	cmp    eax,edi
c00196b3:	0f 84 37 ff ff ff    	je     c00195f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00196b9:	8d 76 00             	lea    esi,[esi+0x0]
c00196bc:	83 ec 0c             	sub    esp,0xc
c00196bf:	68 04 a1 02 c0       	push   0xc002a104
c00196c4:	e8 b3 9e 00 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00196c9:	c7 04 24 04 a1 02 c0 	mov    DWORD PTR [esp],0xc002a104
c00196d0:	89 c6                	mov    esi,eax
c00196d2:	e8 ad 9e 00 00       	call   c0023584 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00196d7:	83 c4 10             	add    esp,0x10
c00196da:	39 f3                	cmp    ebx,esi
c00196dc:	74 b6                	je     c0019694 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00196de:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00196e1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00196e4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00196ea:	75 a8                	jne    c0019694 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00196ec:	e9 77 ff ff ff       	jmp    c0019668 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00196f1:	8d 76 00             	lea    esi,[esi+0x0]
c00196f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00196f8:	83 ec 0c             	sub    esp,0xc
c00196fb:	68 d0 6d 02 c0       	push   0xc0026dd0
c0019700:	e9 4b ff ff ff       	jmp    c0019650 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0019705:	8d 76 00             	lea    esi,[esi+0x0]
c0019708:	8b 36                	mov    esi,DWORD PTR [esi]
c001970a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001970e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0019711:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019714:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001971a:	01 d7                	add    edi,edx
c001971c:	89 f8                	mov    eax,edi
c001971e:	e9 51 fe ff ff       	jmp    c0019574 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0019723:	90                   	nop

c0019724 <cleanerTaskFunction(void*)>:
c0019724:	53                   	push   ebx
c0019725:	83 ec 08             	sub    esp,0x8
c0019728:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001972d:	48                   	dec    eax
c001972e:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019733:	75 03                	jne    c0019738 <cleanerTaskFunction(void*)+0x14>
c0019735:	fb                   	sti    
c0019736:	66 90                	xchg   ax,ax
c0019738:	fa                   	cli    
c0019739:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001973e:	80 3d cc a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0cc,0x0
c0019745:	8d 50 01             	lea    edx,[eax+0x1]
c0019748:	89 15 e8 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e8,edx
c001974e:	0f 84 ac 00 00 00    	je     c0019800 <cleanerTaskFunction(void*)+0xdc>
c0019754:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019759:	85 c0                	test   eax,eax
c001975b:	75 03                	jne    c0019760 <cleanerTaskFunction(void*)+0x3c>
c001975d:	fb                   	sti    
c001975e:	66 90                	xchg   ax,ax
c0019760:	c6 05 cc a0 02 c0 00 	mov    BYTE PTR ds:0xc002a0cc,0x0
c0019767:	fa                   	cli    
c0019768:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c001976e:	ff 05 e4 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e4
c0019774:	fa                   	cli    
c0019775:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c001977b:	eb 2b                	jmp    c00197a8 <cleanerTaskFunction(void*)+0x84>
c001977d:	8d 76 00             	lea    esi,[esi+0x0]
c0019780:	83 ec 0c             	sub    esp,0xc
c0019783:	68 ec a0 02 c0       	push   0xc002a0ec
c0019788:	e8 ef 9d 00 00       	call   c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001978d:	c7 04 24 ec a0 02 c0 	mov    DWORD PTR [esp],0xc002a0ec
c0019794:	89 c3                	mov    ebx,eax
c0019796:	e8 e9 9d 00 00       	call   c0023584 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001979b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001979e:	e8 b9 fc ff ff       	call   c001945c <cleanupTerminatedTask(ThreadControlBlock*)>
c00197a3:	83 c4 10             	add    esp,0x10
c00197a6:	66 90                	xchg   ax,ax
c00197a8:	83 ec 0c             	sub    esp,0xc
c00197ab:	68 ec a0 02 c0       	push   0xc002a0ec
c00197b0:	e8 ab 9d 00 00       	call   c0023560 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00197b5:	83 c4 10             	add    esp,0x10
c00197b8:	84 c0                	test   al,al
c00197ba:	74 c4                	je     c0019780 <cleanerTaskFunction(void*)+0x5c>
c00197bc:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00197c1:	48                   	dec    eax
c00197c2:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00197c7:	75 03                	jne    c00197cc <cleanerTaskFunction(void*)+0xa8>
c00197c9:	fb                   	sti    
c00197ca:	66 90                	xchg   ax,ax
c00197cc:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00197d1:	48                   	dec    eax
c00197d2:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c00197d7:	0f 85 4b ff ff ff    	jne    c0019728 <cleanerTaskFunction(void*)+0x4>
c00197dd:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c00197e2:	85 c0                	test   eax,eax
c00197e4:	0f 84 3e ff ff ff    	je     c0019728 <cleanerTaskFunction(void*)+0x4>
c00197ea:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c00197f4:	e8 03 f7 ff ff       	call   c0018efc <schedule()>
c00197f9:	e9 2a ff ff ff       	jmp    c0019728 <cleanerTaskFunction(void*)+0x4>
c00197fe:	66 90                	xchg   ax,ax
c0019800:	83 ec 0c             	sub    esp,0xc
c0019803:	6a 02                	push   0x2
c0019805:	e8 c2 f8 ff ff       	call   c00190cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001980a:	83 c4 10             	add    esp,0x10
c001980d:	e9 4e ff ff ff       	jmp    c0019760 <cleanerTaskFunction(void*)+0x3c>
c0019812:	66 90                	xchg   ax,ax

c0019814 <terminateTask(int)>:
c0019814:	83 ec 14             	sub    esp,0x14
c0019817:	fa                   	cli    
c0019818:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c001981e:	ff 05 e4 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e4
c0019824:	fa                   	cli    
c0019825:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c001982b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001982f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019834:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0019837:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001983c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001983f:	50                   	push   eax
c0019840:	68 ec a0 02 c0       	push   0xc002a0ec
c0019845:	e8 f2 9d 00 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001984a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001984f:	83 c4 10             	add    esp,0x10
c0019852:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0019859:	a1 c8 a0 02 c0       	mov    eax,ds:0xc002a0c8
c001985e:	85 c0                	test   eax,eax
c0019860:	74 5e                	je     c00198c0 <terminateTask(int)+0xac>
c0019862:	83 ec 0c             	sub    esp,0xc
c0019865:	c6 05 cc a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0cc,0x1
c001986c:	50                   	push   eax
c001986d:	e8 46 fb ff ff       	call   c00193b8 <unblockTask(ThreadControlBlock*)>
c0019872:	83 c4 10             	add    esp,0x10
c0019875:	8d 76 00             	lea    esi,[esi+0x0]
c0019878:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001987d:	48                   	dec    eax
c001987e:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019883:	75 03                	jne    c0019888 <terminateTask(int)+0x74>
c0019885:	fb                   	sti    
c0019886:	66 90                	xchg   ax,ax
c0019888:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c001988d:	48                   	dec    eax
c001988e:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c0019893:	75 0b                	jne    c00198a0 <terminateTask(int)+0x8c>
c0019895:	83 3d e0 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a0e0,0x0
c001989c:	75 36                	jne    c00198d4 <terminateTask(int)+0xc0>
c001989e:	66 90                	xchg   ax,ax
c00198a0:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00198a5:	48                   	dec    eax
c00198a6:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00198ab:	75 03                	jne    c00198b0 <terminateTask(int)+0x9c>
c00198ad:	fb                   	sti    
c00198ae:	66 90                	xchg   ax,ax
c00198b0:	fa                   	cli    
c00198b1:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00198b7:	90                   	nop
c00198b8:	e8 3f f6 ff ff       	call   c0018efc <schedule()>
c00198bd:	eb e1                	jmp    c00198a0 <terminateTask(int)+0x8c>
c00198bf:	90                   	nop
c00198c0:	83 ec 0c             	sub    esp,0xc
c00198c3:	68 01 6d 02 c0       	push   0xc0026d01
c00198c8:	e8 06 38 ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00198cd:	83 c4 10             	add    esp,0x10
c00198d0:	eb a6                	jmp    c0019878 <terminateTask(int)+0x64>
c00198d2:	66 90                	xchg   ax,ax
c00198d4:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c00198de:	eb d8                	jmp    c00198b8 <terminateTask(int)+0xa4>

c00198e0 <Thr::terminateFromIRQ(int)>:
c00198e0:	83 ec 18             	sub    esp,0x18
c00198e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198e7:	e8 28 ff ff ff       	call   c0019814 <terminateTask(int)>

c00198ec <Semaphore::release()>:
c00198ec:	83 ec 0c             	sub    esp,0xc
c00198ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198f3:	fa                   	cli    
c00198f4:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00198f9:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00198ff:	8d 48 01             	lea    ecx,[eax+0x1]
c0019902:	89 0d e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,ecx
c0019908:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001990b:	85 c9                	test   ecx,ecx
c001990d:	74 41                	je     c0019950 <Semaphore::release()+0x64>
c001990f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0019912:	83 ec 0c             	sub    esp,0xc
c0019915:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019918:	51                   	push   ecx
c0019919:	e8 9a fa ff ff       	call   c00193b8 <unblockTask(ThreadControlBlock*)>
c001991e:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c0019923:	83 c4 10             	add    esp,0x10
c0019926:	48                   	dec    eax
c0019927:	90                   	nop
c0019928:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c001992d:	85 c0                	test   eax,eax
c001992f:	75 0b                	jne    c001993c <Semaphore::release()+0x50>
c0019931:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c0019936:	85 c0                	test   eax,eax
c0019938:	75 1e                	jne    c0019958 <Semaphore::release()+0x6c>
c001993a:	66 90                	xchg   ax,ax
c001993c:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019941:	48                   	dec    eax
c0019942:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019947:	75 03                	jne    c001994c <Semaphore::release()+0x60>
c0019949:	fb                   	sti    
c001994a:	66 90                	xchg   ax,ax
c001994c:	83 c4 0c             	add    esp,0xc
c001994f:	c3                   	ret    
c0019950:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0019953:	eb d3                	jmp    c0019928 <Semaphore::release()+0x3c>
c0019955:	8d 76 00             	lea    esi,[esi+0x0]
c0019958:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c0019962:	e8 95 f5 ff ff       	call   c0018efc <schedule()>
c0019967:	eb d3                	jmp    c001993c <Semaphore::release()+0x50>
c0019969:	8d 76 00             	lea    esi,[esi+0x0]

c001996c <__static_initialization_and_destruction_0(int, int)>:
c001996c:	83 ec 0c             	sub    esp,0xc
c001996f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019974:	0f 85 8e 00 00 00    	jne    c0019a08 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001997a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019982:	0f 85 80 00 00 00    	jne    c0019a08 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0019988:	83 ec 0c             	sub    esp,0xc
c001998b:	68 04 a1 02 c0       	push   0xc002a104
c0019990:	e8 53 9f 00 00       	call   c00238e8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019995:	83 c4 10             	add    esp,0x10
c0019998:	83 ec 04             	sub    esp,0x4
c001999b:	68 38 7e 02 c0       	push   0xc0027e38
c00199a0:	68 04 a1 02 c0       	push   0xc002a104
c00199a5:	68 98 38 02 c0       	push   0xc0023898
c00199aa:	e8 bd 35 ff ff       	call   c000cf6c <__cxa_atexit>
c00199af:	83 c4 10             	add    esp,0x10
c00199b2:	83 ec 0c             	sub    esp,0xc
c00199b5:	68 f8 a0 02 c0       	push   0xc002a0f8
c00199ba:	e8 29 9f 00 00       	call   c00238e8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00199bf:	83 c4 10             	add    esp,0x10
c00199c2:	83 ec 04             	sub    esp,0x4
c00199c5:	68 38 7e 02 c0       	push   0xc0027e38
c00199ca:	68 f8 a0 02 c0       	push   0xc002a0f8
c00199cf:	68 98 38 02 c0       	push   0xc0023898
c00199d4:	e8 93 35 ff ff       	call   c000cf6c <__cxa_atexit>
c00199d9:	83 c4 10             	add    esp,0x10
c00199dc:	83 ec 0c             	sub    esp,0xc
c00199df:	68 ec a0 02 c0       	push   0xc002a0ec
c00199e4:	e8 ff 9e 00 00       	call   c00238e8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00199e9:	83 c4 10             	add    esp,0x10
c00199ec:	83 ec 04             	sub    esp,0x4
c00199ef:	68 38 7e 02 c0       	push   0xc0027e38
c00199f4:	68 ec a0 02 c0       	push   0xc002a0ec
c00199f9:	68 98 38 02 c0       	push   0xc0023898
c00199fe:	e8 69 35 ff ff       	call   c000cf6c <__cxa_atexit>
c0019a03:	83 c4 10             	add    esp,0x10
c0019a06:	66 90                	xchg   ax,ax
c0019a08:	90                   	nop
c0019a09:	83 c4 0c             	add    esp,0xc
c0019a0c:	c3                   	ret    
c0019a0d:	8d 76 00             	lea    esi,[esi+0x0]

c0019a10 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019a10:	83 ec 0c             	sub    esp,0xc
c0019a13:	83 ec 08             	sub    esp,0x8
c0019a16:	68 ff ff 00 00       	push   0xffff
c0019a1b:	6a 01                	push   0x1
c0019a1d:	e8 4a ff ff ff       	call   c001996c <__static_initialization_and_destruction_0(int, int)>
c0019a22:	83 c4 10             	add    esp,0x10
c0019a25:	83 c4 0c             	add    esp,0xc
c0019a28:	c3                   	ret    

c0019a29 <Vm::inbv(unsigned short)>:
c0019a29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a2d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019a32:	75 06                	jne    c0019a3a <Vm::inbv(unsigned short)+0x11>
c0019a34:	a0 4c a1 02 c0       	mov    al,ds:0xc002a14c
c0019a39:	c3                   	ret    
c0019a3a:	ec                   	in     al,dx
c0019a3b:	c3                   	ret    

c0019a3c <Vm::outbv(unsigned short, unsigned char)>:
c0019a3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a44:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019a49:	75 25                	jne    c0019a70 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0019a4b:	8b 0d 4c a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a14c
c0019a51:	8d 51 01             	lea    edx,[ecx+0x1]
c0019a54:	88 81 60 a1 02 c0    	mov    BYTE PTR [ecx-0x3ffd5ea0],al
c0019a5a:	89 15 4c a1 02 c0    	mov    DWORD PTR ds:0xc002a14c,edx
c0019a60:	83 fa 20             	cmp    edx,0x20
c0019a63:	75 0c                	jne    c0019a71 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019a65:	c7 05 4c a1 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a14c,0x1f
c0019a6f:	c3                   	ret    
c0019a70:	ee                   	out    dx,al
c0019a71:	c3                   	ret    

c0019a72 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019a72:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019a77:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019a7c:	c1 e0 04             	shl    eax,0x4
c0019a7f:	01 d0                	add    eax,edx
c0019a81:	c3                   	ret    

c0019a82 <Vm::getSegment(unsigned int)>:
c0019a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a86:	c1 e8 10             	shr    eax,0x10
c0019a89:	c3                   	ret    

c0019a8a <Vm::getOffset(unsigned int)>:
c0019a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a8e:	c3                   	ret    

c0019a8f <Vm::mainloop2()>:
c0019a8f:	83 ec 18             	sub    esp,0x18
c0019a92:	fa                   	cli    
c0019a93:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019a99:	6a 02                	push   0x2
c0019a9b:	c6 05 45 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a145,0x1
c0019aa2:	e8 25 f6 ff ff       	call   c00190cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019aa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019aac:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019ab0:	52                   	push   edx
c0019ab1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0019ab5:	52                   	push   edx
c0019ab6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0019aba:	52                   	push   edx
c0019abb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0019abf:	50                   	push   eax
c0019ac0:	e8 7a 67 fe ff       	call   c000023f <goToVM86>
c0019ac5:	83 c4 2c             	add    esp,0x2c
c0019ac8:	c3                   	ret    

c0019ac9 <Vm::mainVm8086Loop(void*)>:
c0019ac9:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019ace:	48                   	dec    eax
c0019acf:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019ad4:	75 01                	jne    c0019ad7 <Vm::mainVm8086Loop(void*)+0xe>
c0019ad6:	fb                   	sti    
c0019ad7:	eb b6                	jmp    c0019a8f <Vm::mainloop2()>

c0019ad9 <Vm::mainloop3(unsigned long)>:
c0019ad9:	83 ec 18             	sub    esp,0x18
c0019adc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ae0:	fa                   	cli    
c0019ae1:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019ae7:	6a 02                	push   0x2
c0019ae9:	c6 05 44 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a144,0x1
c0019af0:	a3 40 a1 02 c0       	mov    ds:0xc002a140,eax
c0019af5:	e8 d2 f5 ff ff       	call   c00190cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019afa:	83 c4 1c             	add    esp,0x1c
c0019afd:	eb 90                	jmp    c0019a8f <Vm::mainloop2()>

c0019aff <Vm::initialise8086()>:
c0019aff:	83 ec 0c             	sub    esp,0xc
c0019b02:	68 80 00 00 00       	push   0x80
c0019b07:	6a 00                	push   0x0
c0019b09:	68 c9 9a 01 c0       	push   0xc0019ac9
c0019b0e:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0019b14:	e8 c7 f1 ff ff       	call   c0018ce0 <Process::createThread(void (*)(void*), void*, int)>
c0019b19:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019b20:	a3 48 a1 02 c0       	mov    ds:0xc002a148,eax
c0019b25:	68 00 01 00 00       	push   0x100
c0019b2a:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c0019b2f:	6a 00                	push   0x0
c0019b31:	6a 00                	push   0x0
c0019b33:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019b39:	e8 0c 2c ff ff       	call   c000c74a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b3e:	83 c4 2c             	add    esp,0x2c
c0019b41:	c3                   	ret    

c0019b42 <Vm::finish8086()>:
c0019b42:	53                   	push   ebx
c0019b43:	83 ec 08             	sub    esp,0x8
c0019b46:	fa                   	cli    
c0019b47:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019b4d:	80 3d 44 a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a144,0x0
c0019b54:	75 15                	jne    c0019b6b <Vm::finish8086()+0x29>
c0019b56:	e8 a1 f3 ff ff       	call   c0018efc <schedule()>
c0019b5b:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019b60:	48                   	dec    eax
c0019b61:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019b66:	75 de                	jne    c0019b46 <Vm::finish8086()+0x4>
c0019b68:	fb                   	sti    
c0019b69:	eb db                	jmp    c0019b46 <Vm::finish8086()+0x4>
c0019b6b:	83 ec 0c             	sub    esp,0xc
c0019b6e:	8b 1d 40 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a140
c0019b74:	ff 35 48 a1 02 c0    	push   DWORD PTR ds:0xc002a148
c0019b7a:	c6 05 44 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a144,0x0
c0019b81:	e8 32 f8 ff ff       	call   c00193b8 <unblockTask(ThreadControlBlock*)>
c0019b86:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019b8b:	83 c4 10             	add    esp,0x10
c0019b8e:	8d 50 ff             	lea    edx,[eax-0x1]
c0019b91:	89 15 e8 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e8,edx
c0019b97:	85 d2                	test   edx,edx
c0019b99:	75 01                	jne    c0019b9c <Vm::finish8086()+0x5a>
c0019b9b:	fb                   	sti    
c0019b9c:	89 d8                	mov    eax,ebx
c0019b9e:	83 c4 08             	add    esp,0x8
c0019ba1:	5b                   	pop    ebx
c0019ba2:	c3                   	ret    

c0019ba3 <Vm::getOutput8086(unsigned char*)>:
c0019ba3:	57                   	push   edi
c0019ba4:	8b 0d 4c a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a14c
c0019baa:	56                   	push   esi
c0019bab:	be 60 a1 02 c0       	mov    esi,0xc002a160
c0019bb0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019bb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019bb6:	a1 4c a1 02 c0       	mov    eax,ds:0xc002a14c
c0019bbb:	5e                   	pop    esi
c0019bbc:	c7 05 4c a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a14c,0x0
c0019bc6:	5f                   	pop    edi
c0019bc7:	c3                   	ret    

c0019bc8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019bc8:	55                   	push   ebp
c0019bc9:	57                   	push   edi
c0019bca:	56                   	push   esi
c0019bcb:	53                   	push   ebx
c0019bcc:	83 ec 0c             	sub    esp,0xc
c0019bcf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019bd3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019bd7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0019bdb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019bdf:	fa                   	cli    
c0019be0:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019be6:	80 3d 45 a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a145,0x0
c0019bed:	75 15                	jne    c0019c04 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0019bef:	e8 08 f3 ff ff       	call   c0018efc <schedule()>
c0019bf4:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019bf9:	48                   	dec    eax
c0019bfa:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019bff:	75 de                	jne    c0019bdf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019c01:	fb                   	sti    
c0019c02:	eb db                	jmp    c0019bdf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019c04:	a1 48 a1 02 c0       	mov    eax,ds:0xc002a148
c0019c09:	c7 05 4c a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a14c,0x0
c0019c13:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0019c17:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0019c1b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0019c1f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019c23:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019c27:	0f b7 ff             	movzx  edi,di
c0019c2a:	0f b7 f6             	movzx  esi,si
c0019c2d:	50                   	push   eax
c0019c2e:	6a 20                	push   0x20
c0019c30:	6a 00                	push   0x0
c0019c32:	68 60 a1 02 c0       	push   0xc002a160
c0019c37:	e8 58 6a fe ff       	call   c0000694 <memset>
c0019c3c:	5a                   	pop    edx
c0019c3d:	59                   	pop    ecx
c0019c3e:	57                   	push   edi
c0019c3f:	56                   	push   esi
c0019c40:	e8 2d fe ff ff       	call   c0019a72 <Vm::realToLinear(unsigned short, unsigned short)>
c0019c45:	83 c4 10             	add    esp,0x10
c0019c48:	89 c7                	mov    edi,eax
c0019c4a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019c4e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019c52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c54:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019c59:	c6 05 45 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a145,0x0
c0019c60:	48                   	dec    eax
c0019c61:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019c66:	75 01                	jne    c0019c69 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0019c68:	fb                   	sti    
c0019c69:	83 ec 0c             	sub    esp,0xc
c0019c6c:	ff 35 48 a1 02 c0    	push   DWORD PTR ds:0xc002a148
c0019c72:	e8 41 f7 ff ff       	call   c00193b8 <unblockTask(ThreadControlBlock*)>
c0019c77:	83 c4 1c             	add    esp,0x1c
c0019c7a:	b0 01                	mov    al,0x1
c0019c7c:	5b                   	pop    ebx
c0019c7d:	5e                   	pop    esi
c0019c7e:	5f                   	pop    edi
c0019c7f:	5d                   	pop    ebp
c0019c80:	c3                   	ret    

c0019c81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019c81:	55                   	push   ebp
c0019c82:	57                   	push   edi
c0019c83:	56                   	push   esi
c0019c84:	53                   	push   ebx
c0019c85:	83 ec 2c             	sub    esp,0x2c
c0019c88:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019c8c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019c90:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019c94:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019c98:	fa                   	cli    
c0019c99:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019c9f:	0f b6 35 45 a1 02 c0 	movzx  esi,BYTE PTR ds:0xc002a145
c0019ca6:	89 f0                	mov    eax,esi
c0019ca8:	84 c0                	test   al,al
c0019caa:	75 1d                	jne    c0019cc9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019cac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019cb0:	e8 47 f2 ff ff       	call   c0018efc <schedule()>
c0019cb5:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019cba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019cbe:	48                   	dec    eax
c0019cbf:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019cc4:	75 d2                	jne    c0019c98 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019cc6:	fb                   	sti    
c0019cc7:	eb cf                	jmp    c0019c98 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019cc9:	a1 48 a1 02 c0       	mov    eax,ds:0xc002a148
c0019cce:	c7 05 4c a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a14c,0x0
c0019cd8:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019cdc:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019ce0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019ce4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019ce8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019cec:	50                   	push   eax
c0019ced:	6a 20                	push   0x20
c0019cef:	6a 00                	push   0x0
c0019cf1:	68 60 a1 02 c0       	push   0xc002a160
c0019cf6:	e8 99 69 fe ff       	call   c0000694 <memset>
c0019cfb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019d02:	e8 e0 00 ff ff       	call   c0009de7 <malloc>
c0019d07:	83 c4 0c             	add    esp,0xc
c0019d0a:	89 c3                	mov    ebx,eax
c0019d0c:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0019d12:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019d16:	50                   	push   eax
c0019d17:	e8 22 39 ff ff       	call   c000d63e <File::File(char const*, Process*)>
c0019d1c:	83 c4 10             	add    esp,0x10
c0019d1f:	85 db                	test   ebx,ebx
c0019d21:	75 0a                	jne    c0019d2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019d23:	83 ec 0c             	sub    esp,0xc
c0019d26:	68 2c 6e 02 c0       	push   0xc0026e2c
c0019d2b:	eb 3e                	jmp    c0019d6b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019d2d:	50                   	push   eax
c0019d2e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019d32:	50                   	push   eax
c0019d33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019d37:	50                   	push   eax
c0019d38:	53                   	push   ebx
c0019d39:	e8 86 3c ff ff       	call   c000d9c4 <File::stat(unsigned long long*, bool*)>
c0019d3e:	83 c4 10             	add    esp,0x10
c0019d41:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019d46:	74 0a                	je     c0019d52 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019d48:	83 ec 0c             	sub    esp,0xc
c0019d4b:	68 40 6e 02 c0       	push   0xc0026e40
c0019d50:	eb 19                	jmp    c0019d6b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019d52:	51                   	push   ecx
c0019d53:	51                   	push   ecx
c0019d54:	6a 01                	push   0x1
c0019d56:	53                   	push   ebx
c0019d57:	e8 bc 39 ff ff       	call   c000d718 <File::open(FileOpenMode)>
c0019d5c:	83 c4 10             	add    esp,0x10
c0019d5f:	85 c0                	test   eax,eax
c0019d61:	74 24                	je     c0019d87 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019d63:	83 ec 0c             	sub    esp,0xc
c0019d66:	68 59 6e 02 c0       	push   0xc0026e59
c0019d6b:	e8 45 b4 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0019d70:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019d75:	83 c4 10             	add    esp,0x10
c0019d78:	48                   	dec    eax
c0019d79:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019d7e:	85 c0                	test   eax,eax
c0019d80:	75 01                	jne    c0019d83 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019d82:	fb                   	sti    
c0019d83:	31 f6                	xor    esi,esi
c0019d85:	eb 58                	jmp    c0019ddf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019d87:	0f b7 ed             	movzx  ebp,bp
c0019d8a:	50                   	push   eax
c0019d8b:	0f b7 ff             	movzx  edi,di
c0019d8e:	50                   	push   eax
c0019d8f:	55                   	push   ebp
c0019d90:	57                   	push   edi
c0019d91:	e8 dc fc ff ff       	call   c0019a72 <Vm::realToLinear(unsigned short, unsigned short)>
c0019d96:	5a                   	pop    edx
c0019d97:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019d99:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019d9d:	51                   	push   ecx
c0019d9e:	50                   	push   eax
c0019d9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019da3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019da7:	53                   	push   ebx
c0019da8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019dab:	83 c4 14             	add    esp,0x14
c0019dae:	53                   	push   ebx
c0019daf:	e8 c2 39 ff ff       	call   c000d776 <File::close()>
c0019db4:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019db9:	83 c4 10             	add    esp,0x10
c0019dbc:	48                   	dec    eax
c0019dbd:	c6 05 45 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a145,0x0
c0019dc4:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019dc9:	85 c0                	test   eax,eax
c0019dcb:	75 01                	jne    c0019dce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019dcd:	fb                   	sti    
c0019dce:	83 ec 0c             	sub    esp,0xc
c0019dd1:	ff 35 48 a1 02 c0    	push   DWORD PTR ds:0xc002a148
c0019dd7:	e8 dc f5 ff ff       	call   c00193b8 <unblockTask(ThreadControlBlock*)>
c0019ddc:	83 c4 10             	add    esp,0x10
c0019ddf:	83 c4 2c             	add    esp,0x2c
c0019de2:	89 f0                	mov    eax,esi
c0019de4:	5b                   	pop    ebx
c0019de5:	5e                   	pop    esi
c0019de6:	5f                   	pop    edi
c0019de7:	5d                   	pop    ebp
c0019de8:	c3                   	ret    

c0019de9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019de9:	57                   	push   edi
c0019dea:	56                   	push   esi
c0019deb:	53                   	push   ebx
c0019dec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019df0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019df4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019df8:	83 e8 06             	sub    eax,0x6
c0019dfb:	0f b7 c0             	movzx  eax,ax
c0019dfe:	50                   	push   eax
c0019dff:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019e04:	50                   	push   eax
c0019e05:	e8 68 fc ff ff       	call   c0019a72 <Vm::realToLinear(unsigned short, unsigned short)>
c0019e0a:	5a                   	pop    edx
c0019e0b:	5e                   	pop    esi
c0019e0c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019e0f:	8d 56 fa             	lea    edx,[esi-0x6]
c0019e12:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019e18:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019e1b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019e1e:	83 c2 02             	add    edx,0x2
c0019e21:	66 89 10             	mov    WORD PTR [eax],dx
c0019e24:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019e27:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019e2b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019e2e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019e32:	89 d6                	mov    esi,edx
c0019e34:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019e3a:	66 81 e6 ff fd       	and    si,0xfdff
c0019e3f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019e43:	74 07                	je     c0019e4c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019e45:	89 d6                	mov    esi,edx
c0019e47:	66 81 ce 00 02       	or     si,0x200
c0019e4c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019e50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e55:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019e59:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019e61:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019e64:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019e6c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019e6f:	5b                   	pop    ebx
c0019e70:	5e                   	pop    esi
c0019e71:	5f                   	pop    edi
c0019e72:	c3                   	ret    

c0019e73 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019e73:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019e78:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019e7d:	c1 e0 04             	shl    eax,0x4
c0019e80:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019e83:	c3                   	ret    

c0019e84 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019e84:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019e89:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019e8e:	c1 e0 04             	shl    eax,0x4
c0019e91:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019e95:	c3                   	ret    

c0019e96 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019e96:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019e9b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ea0:	c1 e0 04             	shl    eax,0x4
c0019ea3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019ea6:	c3                   	ret    

c0019ea7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019ea7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019eac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019eb1:	c1 e0 04             	shl    eax,0x4
c0019eb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019eb8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019ebb:	c3                   	ret    

c0019ebc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019ebc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ec1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ec6:	c1 e0 04             	shl    eax,0x4
c0019ec9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ecd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019ed1:	c3                   	ret    

c0019ed2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019ed2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ed7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019edc:	c1 e0 04             	shl    eax,0x4
c0019edf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ee3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019ee6:	c3                   	ret    

c0019ee7 <Vm::faultHandler(regs*)>:
c0019ee7:	55                   	push   ebp
c0019ee8:	57                   	push   edi
c0019ee9:	56                   	push   esi
c0019eea:	53                   	push   ebx
c0019eeb:	83 ec 1c             	sub    esp,0x1c
c0019eee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019ef2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019ef5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019ef9:	0f b7 f8             	movzx  edi,ax
c0019efc:	52                   	push   edx
c0019efd:	0f b7 c0             	movzx  eax,ax
c0019f00:	50                   	push   eax
c0019f01:	e8 6c fb ff ff       	call   c0019a72 <Vm::realToLinear(unsigned short, unsigned short)>
c0019f06:	5a                   	pop    edx
c0019f07:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019f0a:	59                   	pop    ecx
c0019f0b:	89 c1                	mov    ecx,eax
c0019f0d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019f10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f14:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f1d:	0f b7 c5             	movzx  eax,bp
c0019f20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f24:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019f28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019f2c:	e8 41 fb ff ff       	call   c0019a72 <Vm::realToLinear(unsigned short, unsigned short)>
c0019f31:	5e                   	pop    esi
c0019f32:	be 06 00 00 00       	mov    esi,0x6
c0019f37:	5a                   	pop    edx
c0019f38:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019f3d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019f42:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019f45:	80 fa 9d             	cmp    dl,0x9d
c0019f48:	0f 84 2c 02 00 00    	je     c001a17a <Vm::faultHandler(regs*)+0x293>
c0019f4e:	0f 87 91 00 00 00    	ja     c0019fe5 <Vm::faultHandler(regs*)+0xfe>
c0019f54:	80 fa 66             	cmp    dl,0x66
c0019f57:	0f 84 98 01 00 00    	je     c001a0f5 <Vm::faultHandler(regs*)+0x20e>
c0019f5d:	77 47                	ja     c0019fa6 <Vm::faultHandler(regs*)+0xbf>
c0019f5f:	80 fa 36             	cmp    dl,0x36
c0019f62:	0f 84 80 01 00 00    	je     c001a0e8 <Vm::faultHandler(regs*)+0x201>
c0019f68:	77 1a                	ja     c0019f84 <Vm::faultHandler(regs*)+0x9d>
c0019f6a:	80 fa 26             	cmp    dl,0x26
c0019f6d:	0f 84 4e 01 00 00    	je     c001a0c1 <Vm::faultHandler(regs*)+0x1da>
c0019f73:	80 fa 2e             	cmp    dl,0x2e
c0019f76:	0f 85 e2 05 00 00    	jne    c001a55e <Vm::faultHandler(regs*)+0x677>
c0019f7c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f7f:	31 f6                	xor    esi,esi
c0019f81:	41                   	inc    ecx
c0019f82:	eb be                	jmp    c0019f42 <Vm::faultHandler(regs*)+0x5b>
c0019f84:	80 fa 64             	cmp    dl,0x64
c0019f87:	0f 84 41 01 00 00    	je     c001a0ce <Vm::faultHandler(regs*)+0x1e7>
c0019f8d:	0f 87 48 01 00 00    	ja     c001a0db <Vm::faultHandler(regs*)+0x1f4>
c0019f93:	80 fa 3e             	cmp    dl,0x3e
c0019f96:	0f 85 c2 05 00 00    	jne    c001a55e <Vm::faultHandler(regs*)+0x677>
c0019f9c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f9f:	be 01 00 00 00       	mov    esi,0x1
c0019fa4:	eb db                	jmp    c0019f81 <Vm::faultHandler(regs*)+0x9a>
c0019fa6:	80 fa 6d             	cmp    dl,0x6d
c0019fa9:	0f 84 ec 02 00 00    	je     c001a29b <Vm::faultHandler(regs*)+0x3b4>
c0019faf:	77 17                	ja     c0019fc8 <Vm::faultHandler(regs*)+0xe1>
c0019fb1:	80 fa 67             	cmp    dl,0x67
c0019fb4:	0f 84 48 01 00 00    	je     c001a102 <Vm::faultHandler(regs*)+0x21b>
c0019fba:	80 fa 6c             	cmp    dl,0x6c
c0019fbd:	0f 84 69 02 00 00    	je     c001a22c <Vm::faultHandler(regs*)+0x345>
c0019fc3:	e9 96 05 00 00       	jmp    c001a55e <Vm::faultHandler(regs*)+0x677>
c0019fc8:	80 fa 6f             	cmp    dl,0x6f
c0019fcb:	0f 84 f4 03 00 00    	je     c001a3c5 <Vm::faultHandler(regs*)+0x4de>
c0019fd1:	0f 82 59 03 00 00    	jb     c001a330 <Vm::faultHandler(regs*)+0x449>
c0019fd7:	80 fa 9c             	cmp    dl,0x9c
c0019fda:	0f 84 2f 01 00 00    	je     c001a10f <Vm::faultHandler(regs*)+0x228>
c0019fe0:	e9 79 05 00 00       	jmp    c001a55e <Vm::faultHandler(regs*)+0x677>
c0019fe5:	80 fa ec             	cmp    dl,0xec
c0019fe8:	0f 84 14 05 00 00    	je     c001a502 <Vm::faultHandler(regs*)+0x61b>
c0019fee:	77 7b                	ja     c001a06b <Vm::faultHandler(regs*)+0x184>
c0019ff0:	80 fa e4             	cmp    dl,0xe4
c0019ff3:	0f 84 93 04 00 00    	je     c001a48c <Vm::faultHandler(regs*)+0x5a5>
c0019ff9:	77 53                	ja     c001a04e <Vm::faultHandler(regs*)+0x167>
c0019ffb:	80 fa cd             	cmp    dl,0xcd
c0019ffe:	0f 84 d9 01 00 00    	je     c001a1dd <Vm::faultHandler(regs*)+0x2f6>
c001a004:	80 fa cf             	cmp    dl,0xcf
c001a007:	0f 85 51 05 00 00    	jne    c001a55e <Vm::faultHandler(regs*)+0x677>
c001a00d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a010:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001a013:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001a017:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001a01a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001a01e:	81 ca 00 02 02 00    	or     edx,0x20200
c001a024:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a027:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001a02b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a031:	66 c1 e8 09          	shr    ax,0x9
c001a035:	83 e0 01             	and    eax,0x1
c001a038:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a03b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a03e:	83 c0 06             	add    eax,0x6
c001a041:	25 ff ff 00 00       	and    eax,0xffff
c001a046:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a049:	e9 0c 05 00 00       	jmp    c001a55a <Vm::faultHandler(regs*)+0x673>
c001a04e:	80 fa e6             	cmp    dl,0xe6
c001a051:	0f 84 7f 04 00 00    	je     c001a4d6 <Vm::faultHandler(regs*)+0x5ef>
c001a057:	0f 82 4b 04 00 00    	jb     c001a4a8 <Vm::faultHandler(regs*)+0x5c1>
c001a05d:	80 fa e7             	cmp    dl,0xe7
c001a060:	0f 84 87 04 00 00    	je     c001a4ed <Vm::faultHandler(regs*)+0x606>
c001a066:	e9 f3 04 00 00       	jmp    c001a55e <Vm::faultHandler(regs*)+0x677>
c001a06b:	80 fa ef             	cmp    dl,0xef
c001a06e:	0f 84 d1 04 00 00    	je     c001a545 <Vm::faultHandler(regs*)+0x65e>
c001a074:	77 28                	ja     c001a09e <Vm::faultHandler(regs*)+0x1b7>
c001a076:	80 fa ed             	cmp    dl,0xed
c001a079:	0f 84 9f 04 00 00    	je     c001a51e <Vm::faultHandler(regs*)+0x637>
c001a07f:	80 fa ee             	cmp    dl,0xee
c001a082:	0f 85 d6 04 00 00    	jne    c001a55e <Vm::faultHandler(regs*)+0x677>
c001a088:	50                   	push   eax
c001a089:	50                   	push   eax
c001a08a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a08e:	50                   	push   eax
c001a08f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a093:	50                   	push   eax
c001a094:	e8 a3 f9 ff ff       	call   c0019a3c <Vm::outbv(unsigned short, unsigned char)>
c001a099:	e9 9f 04 00 00       	jmp    c001a53d <Vm::faultHandler(regs*)+0x656>
c001a09e:	80 fa fa             	cmp    dl,0xfa
c001a0a1:	0f 84 69 01 00 00    	je     c001a210 <Vm::faultHandler(regs*)+0x329>
c001a0a7:	80 fa fb             	cmp    dl,0xfb
c001a0aa:	0f 84 6e 01 00 00    	je     c001a21e <Vm::faultHandler(regs*)+0x337>
c001a0b0:	80 fa f3             	cmp    dl,0xf3
c001a0b3:	0f 85 a5 04 00 00    	jne    c001a55e <Vm::faultHandler(regs*)+0x677>
c001a0b9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a0bc:	e9 c0 fe ff ff       	jmp    c0019f81 <Vm::faultHandler(regs*)+0x9a>
c001a0c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a0c4:	be 02 00 00 00       	mov    esi,0x2
c001a0c9:	e9 b3 fe ff ff       	jmp    c0019f81 <Vm::faultHandler(regs*)+0x9a>
c001a0ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a0d1:	be 03 00 00 00       	mov    esi,0x3
c001a0d6:	e9 a6 fe ff ff       	jmp    c0019f81 <Vm::faultHandler(regs*)+0x9a>
c001a0db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a0de:	be 04 00 00 00       	mov    esi,0x4
c001a0e3:	e9 99 fe ff ff       	jmp    c0019f81 <Vm::faultHandler(regs*)+0x9a>
c001a0e8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a0eb:	be 05 00 00 00       	mov    esi,0x5
c001a0f0:	e9 8c fe ff ff       	jmp    c0019f81 <Vm::faultHandler(regs*)+0x9a>
c001a0f5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a0f8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001a0fd:	e9 7f fe ff ff       	jmp    c0019f81 <Vm::faultHandler(regs*)+0x9a>
c001a102:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a105:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001a10a:	e9 72 fe ff ff       	jmp    c0019f81 <Vm::faultHandler(regs*)+0x9a>
c001a10f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001a112:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a116:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a11b:	74 30                	je     c001a14d <Vm::faultHandler(regs*)+0x266>
c001a11d:	83 e9 04             	sub    ecx,0x4
c001a120:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001a126:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001a12c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001a12f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001a132:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a138:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001a13c:	0f 84 15 04 00 00    	je     c001a557 <Vm::faultHandler(regs*)+0x670>
c001a142:	80 ce 02             	or     dh,0x2
c001a145:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001a148:	e9 0a 04 00 00       	jmp    c001a557 <Vm::faultHandler(regs*)+0x670>
c001a14d:	83 e9 02             	sub    ecx,0x2
c001a150:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001a156:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001a159:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001a15d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a163:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001a167:	74 05                	je     c001a16e <Vm::faultHandler(regs*)+0x287>
c001a169:	80 ce 02             	or     dh,0x2
c001a16c:	eb 03                	jmp    c001a171 <Vm::faultHandler(regs*)+0x28a>
c001a16e:	80 e6 fd             	and    dh,0xfd
c001a171:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001a175:	e9 dd 03 00 00       	jmp    c001a557 <Vm::faultHandler(regs*)+0x670>
c001a17a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a17f:	74 2a                	je     c001a1ab <Vm::faultHandler(regs*)+0x2c4>
c001a181:	8b 10                	mov    edx,DWORD PTR [eax]
c001a183:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001a189:	81 ca 00 02 02 00    	or     edx,0x20200
c001a18f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a192:	8b 00                	mov    eax,DWORD PTR [eax]
c001a194:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a19a:	c1 e8 09             	shr    eax,0x9
c001a19d:	83 e0 01             	and    eax,0x1
c001a1a0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a1a3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a1a6:	83 c0 04             	add    eax,0x4
c001a1a9:	eb 25                	jmp    c001a1d0 <Vm::faultHandler(regs*)+0x2e9>
c001a1ab:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a1ae:	81 ca 00 02 02 00    	or     edx,0x20200
c001a1b4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a1b7:	66 8b 00             	mov    ax,WORD PTR [eax]
c001a1ba:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a1c0:	66 c1 e8 09          	shr    ax,0x9
c001a1c4:	83 e0 01             	and    eax,0x1
c001a1c7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a1ca:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a1cd:	83 c0 02             	add    eax,0x2
c001a1d0:	25 ff ff 00 00       	and    eax,0xffff
c001a1d5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a1d8:	e9 7a 03 00 00       	jmp    c001a557 <Vm::faultHandler(regs*)+0x670>
c001a1dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a1e1:	3c ee                	cmp    al,0xee
c001a1e3:	75 10                	jne    c001a1f5 <Vm::faultHandler(regs*)+0x30e>
c001a1e5:	83 ec 0c             	sub    esp,0xc
c001a1e8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001a1eb:	e8 e9 f8 ff ff       	call   c0019ad9 <Vm::mainloop3(unsigned long)>
c001a1f0:	e9 4b 03 00 00       	jmp    c001a540 <Vm::faultHandler(regs*)+0x659>
c001a1f5:	83 ec 0c             	sub    esp,0xc
c001a1f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a1fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a200:	51                   	push   ecx
c001a201:	50                   	push   eax
c001a202:	53                   	push   ebx
c001a203:	e8 e1 fb ff ff       	call   c0019de9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001a208:	83 c4 20             	add    esp,0x20
c001a20b:	e9 4a 03 00 00       	jmp    c001a55a <Vm::faultHandler(regs*)+0x673>
c001a210:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a215:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001a219:	e9 39 03 00 00       	jmp    c001a557 <Vm::faultHandler(regs*)+0x670>
c001a21e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a223:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001a227:	e9 2b 03 00 00       	jmp    c001a557 <Vm::faultHandler(regs*)+0x670>
c001a22c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a22f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a234:	74 2b                	je     c001a261 <Vm::faultHandler(regs*)+0x37a>
c001a236:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001a23d:	76 22                	jbe    c001a261 <Vm::faultHandler(regs*)+0x37a>
c001a23f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a243:	50                   	push   eax
c001a244:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a248:	50                   	push   eax
c001a249:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a24d:	50                   	push   eax
c001a24e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a252:	50                   	push   eax
c001a253:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a257:	50                   	push   eax
c001a258:	6a 6c                	push   0x6c
c001a25a:	6a 6c                	push   0x6c
c001a25c:	e9 b9 01 00 00       	jmp    c001a41a <Vm::faultHandler(regs*)+0x533>
c001a261:	83 ec 0c             	sub    esp,0xc
c001a264:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a268:	0f b7 f6             	movzx  esi,si
c001a26b:	50                   	push   eax
c001a26c:	e8 b8 f7 ff ff       	call   c0019a29 <Vm::inbv(unsigned short)>
c001a271:	83 c4 0c             	add    esp,0xc
c001a274:	0f b6 c0             	movzx  eax,al
c001a277:	50                   	push   eax
c001a278:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001a27c:	50                   	push   eax
c001a27d:	56                   	push   esi
c001a27e:	e8 24 fc ff ff       	call   c0019ea7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001a283:	83 c4 10             	add    esp,0x10
c001a286:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a289:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a28d:	74 03                	je     c001a292 <Vm::faultHandler(regs*)+0x3ab>
c001a28f:	48                   	dec    eax
c001a290:	eb 01                	jmp    c001a293 <Vm::faultHandler(regs*)+0x3ac>
c001a292:	40                   	inc    eax
c001a293:	0f b7 c0             	movzx  eax,ax
c001a296:	e9 8d 00 00 00       	jmp    c001a328 <Vm::faultHandler(regs*)+0x441>
c001a29b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a29e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a2a1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a2a6:	74 29                	je     c001a2d1 <Vm::faultHandler(regs*)+0x3ea>
c001a2a8:	3d ff ff 00 00       	cmp    eax,0xffff
c001a2ad:	76 22                	jbe    c001a2d1 <Vm::faultHandler(regs*)+0x3ea>
c001a2af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a2b3:	50                   	push   eax
c001a2b4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a2b8:	50                   	push   eax
c001a2b9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a2bd:	50                   	push   eax
c001a2be:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a2c2:	50                   	push   eax
c001a2c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a2c7:	50                   	push   eax
c001a2c8:	6a 6d                	push   0x6d
c001a2ca:	6a 6d                	push   0x6d
c001a2cc:	e9 49 01 00 00       	jmp    c001a41a <Vm::faultHandler(regs*)+0x533>
c001a2d1:	0f b7 c8             	movzx  ecx,ax
c001a2d4:	0f b7 f6             	movzx  esi,si
c001a2d7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a2da:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a2df:	74 20                	je     c001a301 <Vm::faultHandler(regs*)+0x41a>
c001a2e1:	ed                   	in     eax,dx
c001a2e2:	55                   	push   ebp
c001a2e3:	50                   	push   eax
c001a2e4:	51                   	push   ecx
c001a2e5:	56                   	push   esi
c001a2e6:	e8 e7 fb ff ff       	call   c0019ed2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001a2eb:	83 c4 10             	add    esp,0x10
c001a2ee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a2f1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a2f5:	74 05                	je     c001a2fc <Vm::faultHandler(regs*)+0x415>
c001a2f7:	83 e8 04             	sub    eax,0x4
c001a2fa:	eb 27                	jmp    c001a323 <Vm::faultHandler(regs*)+0x43c>
c001a2fc:	83 c0 04             	add    eax,0x4
c001a2ff:	eb 22                	jmp    c001a323 <Vm::faultHandler(regs*)+0x43c>
c001a301:	66 ed                	in     ax,dx
c001a303:	0f b7 c0             	movzx  eax,ax
c001a306:	57                   	push   edi
c001a307:	50                   	push   eax
c001a308:	51                   	push   ecx
c001a309:	56                   	push   esi
c001a30a:	e8 ad fb ff ff       	call   c0019ebc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001a30f:	83 c4 10             	add    esp,0x10
c001a312:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a315:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a319:	74 05                	je     c001a320 <Vm::faultHandler(regs*)+0x439>
c001a31b:	83 e8 02             	sub    eax,0x2
c001a31e:	eb 03                	jmp    c001a323 <Vm::faultHandler(regs*)+0x43c>
c001a320:	83 c0 02             	add    eax,0x2
c001a323:	25 ff ff 00 00       	and    eax,0xffff
c001a328:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001a32b:	e9 27 02 00 00       	jmp    c001a557 <Vm::faultHandler(regs*)+0x670>
c001a330:	8d 46 ff             	lea    eax,[esi-0x1]
c001a333:	3c 05                	cmp    al,0x5
c001a335:	77 24                	ja     c001a35b <Vm::faultHandler(regs*)+0x474>
c001a337:	0f b6 c0             	movzx  eax,al
c001a33a:	ff 24 85 cc 6e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9134]
c001a341:	0f b7 fd             	movzx  edi,bp
c001a344:	eb 15                	jmp    c001a35b <Vm::faultHandler(regs*)+0x474>
c001a346:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001a34a:	eb 0f                	jmp    c001a35b <Vm::faultHandler(regs*)+0x474>
c001a34c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001a350:	eb 09                	jmp    c001a35b <Vm::faultHandler(regs*)+0x474>
c001a352:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001a356:	eb 03                	jmp    c001a35b <Vm::faultHandler(regs*)+0x474>
c001a358:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001a35b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a35e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a363:	74 29                	je     c001a38e <Vm::faultHandler(regs*)+0x4a7>
c001a365:	3d ff ff 00 00       	cmp    eax,0xffff
c001a36a:	76 22                	jbe    c001a38e <Vm::faultHandler(regs*)+0x4a7>
c001a36c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a370:	50                   	push   eax
c001a371:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a375:	50                   	push   eax
c001a376:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a37a:	50                   	push   eax
c001a37b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a37f:	50                   	push   eax
c001a380:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a384:	50                   	push   eax
c001a385:	6a 6e                	push   0x6e
c001a387:	6a 6e                	push   0x6e
c001a389:	e9 8c 00 00 00       	jmp    c001a41a <Vm::faultHandler(regs*)+0x533>
c001a38e:	0f b7 c0             	movzx  eax,ax
c001a391:	52                   	push   edx
c001a392:	52                   	push   edx
c001a393:	50                   	push   eax
c001a394:	57                   	push   edi
c001a395:	e8 d9 fa ff ff       	call   c0019e73 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001a39a:	59                   	pop    ecx
c001a39b:	0f b6 c0             	movzx  eax,al
c001a39e:	5e                   	pop    esi
c001a39f:	50                   	push   eax
c001a3a0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a3a4:	50                   	push   eax
c001a3a5:	e8 92 f6 ff ff       	call   c0019a3c <Vm::outbv(unsigned short, unsigned char)>
c001a3aa:	83 c4 10             	add    esp,0x10
c001a3ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a3b0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a3b4:	74 03                	je     c001a3b9 <Vm::faultHandler(regs*)+0x4d2>
c001a3b6:	48                   	dec    eax
c001a3b7:	eb 01                	jmp    c001a3ba <Vm::faultHandler(regs*)+0x4d3>
c001a3b9:	40                   	inc    eax
c001a3ba:	0f b7 c0             	movzx  eax,ax
c001a3bd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a3c0:	e9 92 01 00 00       	jmp    c001a557 <Vm::faultHandler(regs*)+0x670>
c001a3c5:	8d 46 ff             	lea    eax,[esi-0x1]
c001a3c8:	3c 05                	cmp    al,0x5
c001a3ca:	77 1f                	ja     c001a3eb <Vm::faultHandler(regs*)+0x504>
c001a3cc:	0f b6 c0             	movzx  eax,al
c001a3cf:	ff 24 85 e4 6e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd911c]
c001a3d6:	89 ef                	mov    edi,ebp
c001a3d8:	eb 11                	jmp    c001a3eb <Vm::faultHandler(regs*)+0x504>
c001a3da:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001a3dd:	eb 0c                	jmp    c001a3eb <Vm::faultHandler(regs*)+0x504>
c001a3df:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001a3e2:	eb 07                	jmp    c001a3eb <Vm::faultHandler(regs*)+0x504>
c001a3e4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001a3e7:	eb 02                	jmp    c001a3eb <Vm::faultHandler(regs*)+0x504>
c001a3e9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001a3eb:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a3ee:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a3f3:	74 37                	je     c001a42c <Vm::faultHandler(regs*)+0x545>
c001a3f5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001a3fb:	76 2f                	jbe    c001a42c <Vm::faultHandler(regs*)+0x545>
c001a3fd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a401:	50                   	push   eax
c001a402:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a406:	50                   	push   eax
c001a407:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a40b:	50                   	push   eax
c001a40c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a410:	50                   	push   eax
c001a411:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a415:	50                   	push   eax
c001a416:	6a 6f                	push   0x6f
c001a418:	6a 6f                	push   0x6f
c001a41a:	68 72 6e 02 c0       	push   0xc0026e72
c001a41f:	e8 af 2c ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001a424:	83 c4 20             	add    esp,0x20
c001a427:	e9 86 01 00 00       	jmp    c001a5b2 <Vm::faultHandler(regs*)+0x6cb>
c001a42c:	0f b7 d7             	movzx  edx,di
c001a42f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001a432:	0f b7 c6             	movzx  eax,si
c001a435:	81 e1 00 04 00 00    	and    ecx,0x400
c001a43b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001a43e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a443:	74 1d                	je     c001a462 <Vm::faultHandler(regs*)+0x57b>
c001a445:	55                   	push   ebp
c001a446:	55                   	push   ebp
c001a447:	50                   	push   eax
c001a448:	52                   	push   edx
c001a449:	e8 48 fa ff ff       	call   c0019e96 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001a44e:	83 c4 10             	add    esp,0x10
c001a451:	89 fa                	mov    edx,edi
c001a453:	ef                   	out    dx,eax
c001a454:	85 c9                	test   ecx,ecx
c001a456:	74 05                	je     c001a45d <Vm::faultHandler(regs*)+0x576>
c001a458:	83 ee 04             	sub    esi,0x4
c001a45b:	eb 21                	jmp    c001a47e <Vm::faultHandler(regs*)+0x597>
c001a45d:	83 c6 04             	add    esi,0x4
c001a460:	eb 1c                	jmp    c001a47e <Vm::faultHandler(regs*)+0x597>
c001a462:	55                   	push   ebp
c001a463:	55                   	push   ebp
c001a464:	50                   	push   eax
c001a465:	52                   	push   edx
c001a466:	e8 19 fa ff ff       	call   c0019e84 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001a46b:	83 c4 10             	add    esp,0x10
c001a46e:	89 fa                	mov    edx,edi
c001a470:	66 ef                	out    dx,ax
c001a472:	85 c9                	test   ecx,ecx
c001a474:	74 05                	je     c001a47b <Vm::faultHandler(regs*)+0x594>
c001a476:	83 ee 02             	sub    esi,0x2
c001a479:	eb 03                	jmp    c001a47e <Vm::faultHandler(regs*)+0x597>
c001a47b:	83 c6 02             	add    esi,0x2
c001a47e:	81 e6 ff ff 00 00    	and    esi,0xffff
c001a484:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001a487:	e9 cb 00 00 00       	jmp    c001a557 <Vm::faultHandler(regs*)+0x670>
c001a48c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a493:	83 ec 0c             	sub    esp,0xc
c001a496:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a49a:	50                   	push   eax
c001a49b:	e8 89 f5 ff ff       	call   c0019a29 <Vm::inbv(unsigned short)>
c001a4a0:	0f b6 c0             	movzx  eax,al
c001a4a3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a4a6:	eb 3f                	jmp    c001a4e7 <Vm::faultHandler(regs*)+0x600>
c001a4a8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a4ad:	74 07                	je     c001a4b6 <Vm::faultHandler(regs*)+0x5cf>
c001a4af:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a4b3:	ed                   	in     eax,dx
c001a4b4:	eb 14                	jmp    c001a4ca <Vm::faultHandler(regs*)+0x5e3>
c001a4b6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001a4b9:	66 31 f6             	xor    si,si
c001a4bc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001a4bf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a4c3:	66 ed                	in     ax,dx
c001a4c5:	0f b7 c0             	movzx  eax,ax
c001a4c8:	09 f0                	or     eax,esi
c001a4ca:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a4cd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a4d1:	e9 84 00 00 00       	jmp    c001a55a <Vm::faultHandler(regs*)+0x673>
c001a4d6:	52                   	push   edx
c001a4d7:	52                   	push   edx
c001a4d8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a4dc:	50                   	push   eax
c001a4dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a4e1:	50                   	push   eax
c001a4e2:	e8 55 f5 ff ff       	call   c0019a3c <Vm::outbv(unsigned short, unsigned char)>
c001a4e7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a4eb:	eb 53                	jmp    c001a540 <Vm::faultHandler(regs*)+0x659>
c001a4ed:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a4f0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a4f4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a4f9:	74 03                	je     c001a4fe <Vm::faultHandler(regs*)+0x617>
c001a4fb:	ef                   	out    dx,eax
c001a4fc:	eb cf                	jmp    c001a4cd <Vm::faultHandler(regs*)+0x5e6>
c001a4fe:	66 ef                	out    dx,ax
c001a500:	eb cb                	jmp    c001a4cd <Vm::faultHandler(regs*)+0x5e6>
c001a502:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a509:	83 ec 0c             	sub    esp,0xc
c001a50c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a510:	50                   	push   eax
c001a511:	e8 13 f5 ff ff       	call   c0019a29 <Vm::inbv(unsigned short)>
c001a516:	0f b6 c0             	movzx  eax,al
c001a519:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a51c:	eb 1f                	jmp    c001a53d <Vm::faultHandler(regs*)+0x656>
c001a51e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a521:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a526:	74 03                	je     c001a52b <Vm::faultHandler(regs*)+0x644>
c001a528:	ed                   	in     eax,dx
c001a529:	eb 0d                	jmp    c001a538 <Vm::faultHandler(regs*)+0x651>
c001a52b:	66 ed                	in     ax,dx
c001a52d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001a530:	0f b7 c0             	movzx  eax,ax
c001a533:	66 31 d2             	xor    dx,dx
c001a536:	09 d0                	or     eax,edx
c001a538:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a53b:	eb 1a                	jmp    c001a557 <Vm::faultHandler(regs*)+0x670>
c001a53d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a540:	83 c4 10             	add    esp,0x10
c001a543:	eb 15                	jmp    c001a55a <Vm::faultHandler(regs*)+0x673>
c001a545:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a548:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a54b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a550:	74 03                	je     c001a555 <Vm::faultHandler(regs*)+0x66e>
c001a552:	ef                   	out    dx,eax
c001a553:	eb 02                	jmp    c001a557 <Vm::faultHandler(regs*)+0x670>
c001a555:	66 ef                	out    dx,ax
c001a557:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a55a:	b0 01                	mov    al,0x1
c001a55c:	eb 56                	jmp    c001a5b4 <Vm::faultHandler(regs*)+0x6cd>
c001a55e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a562:	50                   	push   eax
c001a563:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a567:	50                   	push   eax
c001a568:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a56c:	50                   	push   eax
c001a56d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a571:	50                   	push   eax
c001a572:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a576:	50                   	push   eax
c001a577:	52                   	push   edx
c001a578:	52                   	push   edx
c001a579:	68 9f 6e 02 c0       	push   0xc0026e9f
c001a57e:	e8 50 2b ff ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001a583:	83 c4 20             	add    esp,0x20
c001a586:	83 ec 0c             	sub    esp,0xc
c001a589:	6a 60                	push   0x60
c001a58b:	e8 99 f4 ff ff       	call   c0019a29 <Vm::inbv(unsigned short)>
c001a590:	83 c4 10             	add    esp,0x10
c001a593:	3c 1c                	cmp    al,0x1c
c001a595:	74 04                	je     c001a59b <Vm::faultHandler(regs*)+0x6b4>
c001a597:	3c 5a                	cmp    al,0x5a
c001a599:	75 eb                	jne    c001a586 <Vm::faultHandler(regs*)+0x69f>
c001a59b:	3c 5a                	cmp    al,0x5a
c001a59d:	74 04                	je     c001a5a3 <Vm::faultHandler(regs*)+0x6bc>
c001a59f:	3c 1c                	cmp    al,0x1c
c001a5a1:	75 0f                	jne    c001a5b2 <Vm::faultHandler(regs*)+0x6cb>
c001a5a3:	83 ec 0c             	sub    esp,0xc
c001a5a6:	6a 60                	push   0x60
c001a5a8:	e8 7c f4 ff ff       	call   c0019a29 <Vm::inbv(unsigned short)>
c001a5ad:	83 c4 10             	add    esp,0x10
c001a5b0:	eb e9                	jmp    c001a59b <Vm::faultHandler(regs*)+0x6b4>
c001a5b2:	31 c0                	xor    eax,eax
c001a5b4:	83 c4 1c             	add    esp,0x1c
c001a5b7:	5b                   	pop    ebx
c001a5b8:	5e                   	pop    esi
c001a5b9:	5f                   	pop    edi
c001a5ba:	5d                   	pop    ebp
c001a5bb:	c3                   	ret    

c001a5bc <Vm::fpuInternalTo32(unsigned long long)>:
c001a5bc:	57                   	push   edi
c001a5bd:	56                   	push   esi
c001a5be:	53                   	push   ebx
c001a5bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5c7:	89 d6                	mov    esi,edx
c001a5c9:	89 d7                	mov    edi,edx
c001a5cb:	89 c1                	mov    ecx,eax
c001a5cd:	c1 ef 14             	shr    edi,0x14
c001a5d0:	89 d3                	mov    ebx,edx
c001a5d2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a5d8:	31 d2                	xor    edx,edx
c001a5da:	89 f8                	mov    eax,edi
c001a5dc:	81 e6 00 00 00 80    	and    esi,0x80000000
c001a5e2:	bf ff 00 00 00       	mov    edi,0xff
c001a5e7:	05 80 fc ff ff       	add    eax,0xfffffc80
c001a5ec:	83 d2 ff             	adc    edx,0xffffffff
c001a5ef:	39 c7                	cmp    edi,eax
c001a5f1:	bf 00 00 00 00       	mov    edi,0x0
c001a5f6:	19 d7                	sbb    edi,edx
c001a5f8:	72 16                	jb     c001a610 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001a5fa:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001a5fe:	c1 e0 17             	shl    eax,0x17
c001a601:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001a607:	09 f1                	or     ecx,esi
c001a609:	09 c1                	or     ecx,eax
c001a60b:	89 cf                	mov    edi,ecx
c001a60d:	eb 05                	jmp    c001a614 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001a60f:	90                   	nop
c001a610:	31 ff                	xor    edi,edi
c001a612:	66 90                	xchg   ax,ax
c001a614:	89 f8                	mov    eax,edi
c001a616:	5b                   	pop    ebx
c001a617:	5e                   	pop    esi
c001a618:	5f                   	pop    edi
c001a619:	c3                   	ret    

c001a61a <Vm::fpuInternalTo64(unsigned long long)>:
c001a61a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a61e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a622:	c3                   	ret    

c001a623 <Vm::fpu32ToInternal(unsigned int)>:
c001a623:	57                   	push   edi
c001a624:	31 ff                	xor    edi,edi
c001a626:	56                   	push   esi
c001a627:	53                   	push   ebx
c001a628:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a62c:	89 cb                	mov    ebx,ecx
c001a62e:	89 ce                	mov    esi,ecx
c001a630:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001a636:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001a63c:	c1 e9 17             	shr    ecx,0x17
c001a63f:	89 f0                	mov    eax,esi
c001a641:	0f b6 d1             	movzx  edx,cl
c001a644:	81 c2 80 03 00 00    	add    edx,0x380
c001a64a:	89 d1                	mov    ecx,edx
c001a64c:	89 fa                	mov    edx,edi
c001a64e:	c1 e1 14             	shl    ecx,0x14
c001a651:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001a655:	c1 e0 1d             	shl    eax,0x1d
c001a658:	89 d7                	mov    edi,edx
c001a65a:	89 c6                	mov    esi,eax
c001a65c:	89 ca                	mov    edx,ecx
c001a65e:	89 f0                	mov    eax,esi
c001a660:	09 fa                	or     edx,edi
c001a662:	09 da                	or     edx,ebx
c001a664:	5b                   	pop    ebx
c001a665:	5e                   	pop    esi
c001a666:	5f                   	pop    edi
c001a667:	c3                   	ret    

c001a668 <Vm::fpu64ToInternal(unsigned long long)>:
c001a668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a66c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a670:	c3                   	ret    

c001a671 <Vm::fpuFloatToLong(unsigned long long)>:
c001a671:	57                   	push   edi
c001a672:	31 c0                	xor    eax,eax
c001a674:	56                   	push   esi
c001a675:	31 d2                	xor    edx,edx
c001a677:	53                   	push   ebx
c001a678:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a67c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a680:	89 d9                	mov    ecx,ebx
c001a682:	c1 e9 14             	shr    ecx,0x14
c001a685:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a68b:	89 cf                	mov    edi,ecx
c001a68d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001a693:	78 37                	js     c001a6cc <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a695:	89 d9                	mov    ecx,ebx
c001a697:	89 f0                	mov    eax,esi
c001a699:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a69f:	81 c9 00 00 10 00    	or     ecx,0x100000
c001a6a5:	89 ca                	mov    edx,ecx
c001a6a7:	b9 34 00 00 00       	mov    ecx,0x34
c001a6ac:	29 f9                	sub    ecx,edi
c001a6ae:	0f ad d0             	shrd   eax,edx,cl
c001a6b1:	d3 fa                	sar    edx,cl
c001a6b3:	f6 c1 20             	test   cl,0x20
c001a6b6:	74 08                	je     c001a6c0 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001a6b8:	89 d0                	mov    eax,edx
c001a6ba:	c1 fa 1f             	sar    edx,0x1f
c001a6bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a6c0:	85 db                	test   ebx,ebx
c001a6c2:	79 08                	jns    c001a6cc <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a6c4:	f7 d8                	neg    eax
c001a6c6:	83 d2 00             	adc    edx,0x0
c001a6c9:	f7 da                	neg    edx
c001a6cb:	90                   	nop
c001a6cc:	5b                   	pop    ebx
c001a6cd:	5e                   	pop    esi
c001a6ce:	5f                   	pop    edi
c001a6cf:	c3                   	ret    

c001a6d0 <Vm::fpuULongToFloat(unsigned long long)>:
c001a6d0:	57                   	push   edi
c001a6d1:	31 c9                	xor    ecx,ecx
c001a6d3:	56                   	push   esi
c001a6d4:	53                   	push   ebx
c001a6d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a6d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a6dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a6e0:	0f ba e7 14          	bt     edi,0x14
c001a6e4:	72 0a                	jb     c001a6f0 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001a6e6:	01 f6                	add    esi,esi
c001a6e8:	11 ff                	adc    edi,edi
c001a6ea:	41                   	inc    ecx
c001a6eb:	eb f3                	jmp    c001a6e0 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001a6ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a6f0:	89 fa                	mov    edx,edi
c001a6f2:	89 f0                	mov    eax,esi
c001a6f4:	bb 33 04 00 00       	mov    ebx,0x433
c001a6f9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001a6ff:	29 cb                	sub    ebx,ecx
c001a701:	89 d9                	mov    ecx,ebx
c001a703:	5b                   	pop    ebx
c001a704:	c1 e1 14             	shl    ecx,0x14
c001a707:	5e                   	pop    esi
c001a708:	09 ca                	or     edx,ecx
c001a70a:	5f                   	pop    edi
c001a70b:	c3                   	ret    

c001a70c <Vm::fpuLongToFloat(long long)>:
c001a70c:	56                   	push   esi
c001a70d:	31 c0                	xor    eax,eax
c001a70f:	53                   	push   ebx
c001a710:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a714:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a718:	39 c8                	cmp    eax,ecx
c001a71a:	19 d8                	sbb    eax,ebx
c001a71c:	7d 06                	jge    c001a724 <Vm::fpuLongToFloat(long long)+0x18>
c001a71e:	31 f6                	xor    esi,esi
c001a720:	eb 0e                	jmp    c001a730 <Vm::fpuLongToFloat(long long)+0x24>
c001a722:	66 90                	xchg   ax,ax
c001a724:	f7 d9                	neg    ecx
c001a726:	be 01 00 00 00       	mov    esi,0x1
c001a72b:	83 d3 00             	adc    ebx,0x0
c001a72e:	f7 db                	neg    ebx
c001a730:	31 c0                	xor    eax,eax
c001a732:	66 90                	xchg   ax,ax
c001a734:	0f ba e3 14          	bt     ebx,0x14
c001a738:	72 0a                	jb     c001a744 <Vm::fpuLongToFloat(long long)+0x38>
c001a73a:	01 c9                	add    ecx,ecx
c001a73c:	11 db                	adc    ebx,ebx
c001a73e:	40                   	inc    eax
c001a73f:	eb f3                	jmp    c001a734 <Vm::fpuLongToFloat(long long)+0x28>
c001a741:	8d 76 00             	lea    esi,[esi+0x0]
c001a744:	ba 33 04 00 00       	mov    edx,0x433
c001a749:	29 c2                	sub    edx,eax
c001a74b:	89 c8                	mov    eax,ecx
c001a74d:	c1 e2 14             	shl    edx,0x14
c001a750:	89 d9                	mov    ecx,ebx
c001a752:	89 f3                	mov    ebx,esi
c001a754:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a75a:	09 ca                	or     edx,ecx
c001a75c:	84 db                	test   bl,bl
c001a75e:	74 08                	je     c001a768 <Vm::fpuLongToFloat(long long)+0x5c>
c001a760:	81 ca 00 00 00 80    	or     edx,0x80000000
c001a766:	66 90                	xchg   ax,ax
c001a768:	5b                   	pop    ebx
c001a769:	5e                   	pop    esi
c001a76a:	c3                   	ret    

c001a76b <Vm::fpuGet0()>:
c001a76b:	31 c0                	xor    eax,eax
c001a76d:	31 d2                	xor    edx,edx
c001a76f:	c3                   	ret    

c001a770 <Vm::fpuGet1()>:
c001a770:	b8 01 00 00 00       	mov    eax,0x1
c001a775:	31 d2                	xor    edx,edx
c001a777:	c3                   	ret    

c001a778 <Vm::fpuGetPi()>:
c001a778:	b8 03 00 00 00       	mov    eax,0x3
c001a77d:	31 d2                	xor    edx,edx
c001a77f:	c3                   	ret    

c001a780 <Vm::fpuGetLog2E()>:
c001a780:	83 ec 18             	sub    esp,0x18
c001a783:	68 fc 6e 02 c0       	push   0xc0026efc
c001a788:	e8 28 aa ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001a78d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a792:	31 d2                	xor    edx,edx
c001a794:	83 c4 1c             	add    esp,0x1c
c001a797:	c3                   	ret    

c001a798 <Vm::fpuGetLogE2()>:
c001a798:	83 ec 18             	sub    esp,0x18
c001a79b:	68 08 6f 02 c0       	push   0xc0026f08
c001a7a0:	e8 10 aa ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001a7a5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a7aa:	31 d2                	xor    edx,edx
c001a7ac:	83 c4 1c             	add    esp,0x1c
c001a7af:	c3                   	ret    

c001a7b0 <Vm::fpuGetLog210()>:
c001a7b0:	83 ec 18             	sub    esp,0x18
c001a7b3:	68 14 6f 02 c0       	push   0xc0026f14
c001a7b8:	e8 f8 a9 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001a7bd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a7c2:	31 d2                	xor    edx,edx
c001a7c4:	83 c4 1c             	add    esp,0x1c
c001a7c7:	c3                   	ret    

c001a7c8 <Vm::fpuGetLog102()>:
c001a7c8:	83 ec 18             	sub    esp,0x18
c001a7cb:	68 21 6f 02 c0       	push   0xc0026f21
c001a7d0:	e8 e0 a9 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001a7d5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a7da:	31 d2                	xor    edx,edx
c001a7dc:	83 c4 1c             	add    esp,0x1c
c001a7df:	c3                   	ret    

c001a7e0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001a7e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7e4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a7e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7ec:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001a7f0:	0f 92 c0             	setb   al
c001a7f3:	c3                   	ret    

c001a7f4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001a7f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7fc:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001a800:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001a804:	09 c2                	or     edx,eax
c001a806:	0f 94 c0             	sete   al
c001a809:	c3                   	ret    

c001a80a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001a80a:	57                   	push   edi
c001a80b:	56                   	push   esi
c001a80c:	53                   	push   ebx
c001a80d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a811:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a815:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a819:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a81d:	57                   	push   edi
c001a81e:	56                   	push   esi
c001a81f:	53                   	push   ebx
c001a820:	51                   	push   ecx
c001a821:	e8 ce ff ff ff       	call   c001a7f4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001a826:	83 c4 10             	add    esp,0x10
c001a829:	88 c2                	mov    dl,al
c001a82b:	31 c0                	xor    eax,eax
c001a82d:	84 d2                	test   dl,dl
c001a82f:	75 0f                	jne    c001a840 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001a831:	57                   	push   edi
c001a832:	56                   	push   esi
c001a833:	53                   	push   ebx
c001a834:	51                   	push   ecx
c001a835:	e8 a6 ff ff ff       	call   c001a7e0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001a83a:	83 c4 10             	add    esp,0x10
c001a83d:	8d 76 00             	lea    esi,[esi+0x0]
c001a840:	83 e0 01             	and    eax,0x1
c001a843:	5b                   	pop    ebx
c001a844:	88 c1                	mov    cl,al
c001a846:	83 e2 01             	and    edx,0x1
c001a849:	a0 81 a1 02 c0       	mov    al,ds:0xc002a181
c001a84e:	c1 e2 06             	shl    edx,0x6
c001a851:	83 e0 ba             	and    eax,0xffffffba
c001a854:	5e                   	pop    esi
c001a855:	09 c8                	or     eax,ecx
c001a857:	5f                   	pop    edi
c001a858:	09 d0                	or     eax,edx
c001a85a:	a2 81 a1 02 c0       	mov    ds:0xc002a181,al
c001a85f:	c3                   	ret    

c001a860 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a860:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a864:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a868:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a86c:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a870:	c3                   	ret    

c001a871 <Vm::fpuAbs(unsigned long long)>:
c001a871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a875:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a879:	c3                   	ret    

c001a87a <Vm::fpuChs(unsigned long long)>:
c001a87a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a87e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a882:	f7 d8                	neg    eax
c001a884:	83 d2 00             	adc    edx,0x0
c001a887:	f7 da                	neg    edx
c001a889:	c3                   	ret    

c001a88a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a88a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a88e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a893:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a897:	eb c7                	jmp    c001a860 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a899 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a899:	53                   	push   ebx
c001a89a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a89e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a8a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8aa:	0f af ca             	imul   ecx,edx
c001a8ad:	0f af d8             	imul   ebx,eax
c001a8b0:	f7 e2                	mul    edx
c001a8b2:	01 d9                	add    ecx,ebx
c001a8b4:	5b                   	pop    ebx
c001a8b5:	01 ca                	add    edx,ecx
c001a8b7:	c3                   	ret    

c001a8b8 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a8b8:	83 ec 0c             	sub    esp,0xc
c001a8bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8cb:	e8 c0 86 00 00       	call   c0022f90 <__udivdi3>
c001a8d0:	83 c4 1c             	add    esp,0x1c
c001a8d3:	c3                   	ret    

c001a8d4 <Vm::fpuSquare(unsigned long long)>:
c001a8d4:	50                   	push   eax
c001a8d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8dd:	52                   	push   edx
c001a8de:	50                   	push   eax
c001a8df:	52                   	push   edx
c001a8e0:	50                   	push   eax
c001a8e1:	e8 b3 ff ff ff       	call   c001a899 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a8e6:	83 c4 14             	add    esp,0x14
c001a8e9:	c3                   	ret    

c001a8ea <Vm::fpuGetReg(int)>:
c001a8ea:	83 ec 0c             	sub    esp,0xc
c001a8ed:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a8f2:	76 10                	jbe    c001a904 <Vm::fpuGetReg(int)+0x1a>
c001a8f4:	83 ec 0c             	sub    esp,0xc
c001a8f7:	68 2e 6f 02 c0       	push   0xc0026f2e
c001a8fc:	e8 b4 a8 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001a901:	83 c4 10             	add    esp,0x10
c001a904:	a0 81 a1 02 c0       	mov    al,ds:0xc002a181
c001a909:	b9 08 00 00 00       	mov    ecx,0x8
c001a90e:	c0 e8 03             	shr    al,0x3
c001a911:	83 e0 07             	and    eax,0x7
c001a914:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a918:	99                   	cdq    
c001a919:	f7 f9                	idiv   ecx
c001a91b:	8b 04 d5 84 a1 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd5e7c]
c001a922:	8b 14 d5 88 a1 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd5e78]
c001a929:	83 c4 0c             	add    esp,0xc
c001a92c:	c3                   	ret    

c001a92d <Vm::fpuSetReg(int, unsigned long long)>:
c001a92d:	57                   	push   edi
c001a92e:	56                   	push   esi
c001a92f:	52                   	push   edx
c001a930:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a934:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a938:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a93d:	76 11                	jbe    c001a950 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a93f:	83 ec 0c             	sub    esp,0xc
c001a942:	68 41 6f 02 c0       	push   0xc0026f41
c001a947:	e8 69 a8 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001a94c:	83 c4 10             	add    esp,0x10
c001a94f:	90                   	nop
c001a950:	a0 81 a1 02 c0       	mov    al,ds:0xc002a181
c001a955:	b9 08 00 00 00       	mov    ecx,0x8
c001a95a:	c0 e8 03             	shr    al,0x3
c001a95d:	83 e0 07             	and    eax,0x7
c001a960:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a964:	99                   	cdq    
c001a965:	f7 f9                	idiv   ecx
c001a967:	89 34 d5 84 a1 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5e7c],esi
c001a96e:	89 3c d5 88 a1 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5e78],edi
c001a975:	58                   	pop    eax
c001a976:	5e                   	pop    esi
c001a977:	5f                   	pop    edi
c001a978:	c3                   	ret    

c001a979 <Vm::fpuPush(unsigned long long)>:
c001a979:	a0 81 a1 02 c0       	mov    al,ds:0xc002a181
c001a97e:	c0 e8 03             	shr    al,0x3
c001a981:	83 e0 07             	and    eax,0x7
c001a984:	83 c0 07             	add    eax,0x7
c001a987:	88 c2                	mov    dl,al
c001a989:	83 e0 07             	and    eax,0x7
c001a98c:	83 e2 07             	and    edx,0x7
c001a98f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a996:	8a 15 81 a1 02 c0    	mov    dl,BYTE PTR ds:0xc002a181
c001a99c:	83 e2 c7             	and    edx,0xffffffc7
c001a99f:	09 ca                	or     edx,ecx
c001a9a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a9a5:	88 15 81 a1 02 c0    	mov    BYTE PTR ds:0xc002a181,dl
c001a9ab:	89 0c c5 88 a1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5e78],ecx
c001a9b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a9b6:	89 14 c5 84 a1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5e7c],edx
c001a9bd:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c001a9c2:	83 f8 08             	cmp    eax,0x8
c001a9c5:	75 09                	jne    c001a9d0 <Vm::fpuPush(unsigned long long)+0x57>
c001a9c7:	80 0d 80 a1 02 c0 40 	or     BYTE PTR ds:0xc002a180,0x40
c001a9ce:	c3                   	ret    
c001a9cf:	90                   	nop
c001a9d0:	40                   	inc    eax
c001a9d1:	a3 c4 a1 02 c0       	mov    ds:0xc002a1c4,eax
c001a9d6:	c3                   	ret    

c001a9d7 <Vm::fpuPop()>:
c001a9d7:	8a 0d 81 a1 02 c0    	mov    cl,BYTE PTR ds:0xc002a181
c001a9dd:	53                   	push   ebx
c001a9de:	c0 e9 03             	shr    cl,0x3
c001a9e1:	8a 1d 81 a1 02 c0    	mov    bl,BYTE PTR ds:0xc002a181
c001a9e7:	83 e1 07             	and    ecx,0x7
c001a9ea:	83 e3 c7             	and    ebx,0xffffffc7
c001a9ed:	8b 04 cd 84 a1 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd5e7c]
c001a9f4:	8b 14 cd 88 a1 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd5e78]
c001a9fb:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001aa02:	83 e1 38             	and    ecx,0x38
c001aa05:	09 d9                	or     ecx,ebx
c001aa07:	88 0d 81 a1 02 c0    	mov    BYTE PTR ds:0xc002a181,cl
c001aa0d:	8b 0d c4 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a1c4
c001aa13:	85 c9                	test   ecx,ecx
c001aa15:	74 09                	je     c001aa20 <Vm::fpuPop()+0x49>
c001aa17:	49                   	dec    ecx
c001aa18:	89 0d c4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c4,ecx
c001aa1e:	eb 08                	jmp    c001aa28 <Vm::fpuPop()+0x51>
c001aa20:	80 0d 80 a1 02 c0 40 	or     BYTE PTR ds:0xc002a180,0x40
c001aa27:	90                   	nop
c001aa28:	5b                   	pop    ebx
c001aa29:	c3                   	ret    

c001aa2a <Vm::x87Handler(regs*)>:
c001aa2a:	55                   	push   ebp
c001aa2b:	57                   	push   edi
c001aa2c:	56                   	push   esi
c001aa2d:	53                   	push   ebx
c001aa2e:	83 ec 1c             	sub    esp,0x1c
c001aa31:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa35:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001aa3a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001aa3d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001aa45:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001aa49:	50                   	push   eax
c001aa4a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001aa4e:	50                   	push   eax
c001aa4f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa53:	50                   	push   eax
c001aa54:	53                   	push   ebx
c001aa55:	e8 74 9e ff ff       	call   c00148ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001aa5a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001aa5d:	83 c4 10             	add    esp,0x10
c001aa60:	89 c6                	mov    esi,eax
c001aa62:	80 fa d9             	cmp    dl,0xd9
c001aa65:	0f 85 79 01 00 00    	jne    c001abe4 <Vm::x87Handler(regs*)+0x1ba>
c001aa6b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aa6f:	8d 50 20             	lea    edx,[eax+0x20]
c001aa72:	80 fa 0e             	cmp    dl,0xe
c001aa75:	0f 87 a5 00 00 00    	ja     c001ab20 <Vm::x87Handler(regs*)+0xf6>
c001aa7b:	0f b6 d2             	movzx  edx,dl
c001aa7e:	ff 24 95 54 6f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd90ac]
c001aa85:	8d 76 00             	lea    esi,[esi+0x0]
c001aa88:	e8 de fc ff ff       	call   c001a76b <Vm::fpuGet0()>
c001aa8d:	eb 09                	jmp    c001aa98 <Vm::x87Handler(regs*)+0x6e>
c001aa8f:	90                   	nop
c001aa90:	e8 db fc ff ff       	call   c001a770 <Vm::fpuGet1()>
c001aa95:	8d 76 00             	lea    esi,[esi+0x0]
c001aa98:	57                   	push   edi
c001aa99:	57                   	push   edi
c001aa9a:	66 90                	xchg   ax,ax
c001aa9c:	52                   	push   edx
c001aa9d:	50                   	push   eax
c001aa9e:	e8 d6 fe ff ff       	call   c001a979 <Vm::fpuPush(unsigned long long)>
c001aaa3:	90                   	nop
c001aaa4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001aaa8:	83 c4 10             	add    esp,0x10
c001aaab:	90                   	nop
c001aaac:	b0 01                	mov    al,0x1
c001aaae:	e9 89 0a 00 00       	jmp    c001b53c <Vm::x87Handler(regs*)+0xb12>
c001aab3:	90                   	nop
c001aab4:	83 ec 0c             	sub    esp,0xc
c001aab7:	6a 00                	push   0x0
c001aab9:	e8 2c fe ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001aabe:	59                   	pop    ecx
c001aabf:	5e                   	pop    esi
c001aac0:	52                   	push   edx
c001aac1:	50                   	push   eax
c001aac2:	e8 b3 fd ff ff       	call   c001a87a <Vm::fpuChs(unsigned long long)>
c001aac7:	eb 17                	jmp    c001aae0 <Vm::x87Handler(regs*)+0xb6>
c001aac9:	8d 76 00             	lea    esi,[esi+0x0]
c001aacc:	83 ec 0c             	sub    esp,0xc
c001aacf:	6a 00                	push   0x0
c001aad1:	e8 14 fe ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001aad6:	5f                   	pop    edi
c001aad7:	5d                   	pop    ebp
c001aad8:	52                   	push   edx
c001aad9:	50                   	push   eax
c001aada:	e8 92 fd ff ff       	call   c001a871 <Vm::fpuAbs(unsigned long long)>
c001aadf:	90                   	nop
c001aae0:	83 c4 0c             	add    esp,0xc
c001aae3:	90                   	nop
c001aae4:	52                   	push   edx
c001aae5:	50                   	push   eax
c001aae6:	66 90                	xchg   ax,ax
c001aae8:	6a 00                	push   0x0
c001aaea:	66 90                	xchg   ax,ax
c001aaec:	e8 3c fe ff ff       	call   c001a92d <Vm::fpuSetReg(int, unsigned long long)>
c001aaf1:	eb b1                	jmp    c001aaa4 <Vm::x87Handler(regs*)+0x7a>
c001aaf3:	90                   	nop
c001aaf4:	e8 b7 fc ff ff       	call   c001a7b0 <Vm::fpuGetLog210()>
c001aaf9:	eb 9d                	jmp    c001aa98 <Vm::x87Handler(regs*)+0x6e>
c001aafb:	90                   	nop
c001aafc:	e8 7f fc ff ff       	call   c001a780 <Vm::fpuGetLog2E()>
c001ab01:	eb 95                	jmp    c001aa98 <Vm::x87Handler(regs*)+0x6e>
c001ab03:	90                   	nop
c001ab04:	e8 6f fc ff ff       	call   c001a778 <Vm::fpuGetPi()>
c001ab09:	eb 8d                	jmp    c001aa98 <Vm::x87Handler(regs*)+0x6e>
c001ab0b:	90                   	nop
c001ab0c:	e8 b7 fc ff ff       	call   c001a7c8 <Vm::fpuGetLog102()>
c001ab11:	eb 85                	jmp    c001aa98 <Vm::x87Handler(regs*)+0x6e>
c001ab13:	90                   	nop
c001ab14:	e8 7f fc ff ff       	call   c001a798 <Vm::fpuGetLogE2()>
c001ab19:	e9 7a ff ff ff       	jmp    c001aa98 <Vm::x87Handler(regs*)+0x6e>
c001ab1e:	66 90                	xchg   ax,ax
c001ab20:	8d 50 40             	lea    edx,[eax+0x40]
c001ab23:	80 fa 07             	cmp    dl,0x7
c001ab26:	77 18                	ja     c001ab40 <Vm::x87Handler(regs*)+0x116>
c001ab28:	83 ec 0c             	sub    esp,0xc
c001ab2b:	2d c0 00 00 00       	sub    eax,0xc0
c001ab30:	50                   	push   eax
c001ab31:	e8 b4 fd ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001ab36:	59                   	pop    ecx
c001ab37:	5e                   	pop    esi
c001ab38:	e9 5f ff ff ff       	jmp    c001aa9c <Vm::x87Handler(regs*)+0x72>
c001ab3d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab40:	8d 50 38             	lea    edx,[eax+0x38]
c001ab43:	80 fa 07             	cmp    dl,0x7
c001ab46:	77 3c                	ja     c001ab84 <Vm::x87Handler(regs*)+0x15a>
c001ab48:	83 ec 0c             	sub    esp,0xc
c001ab4b:	2d c8 00 00 00       	sub    eax,0xc8
c001ab50:	50                   	push   eax
c001ab51:	e8 94 fd ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001ab56:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab5d:	89 c6                	mov    esi,eax
c001ab5f:	89 d7                	mov    edi,edx
c001ab61:	e8 84 fd ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001ab66:	83 c4 0c             	add    esp,0xc
c001ab69:	52                   	push   edx
c001ab6a:	50                   	push   eax
c001ab6b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ab6f:	2d c8 00 00 00       	sub    eax,0xc8
c001ab74:	50                   	push   eax
c001ab75:	e8 b3 fd ff ff       	call   c001a92d <Vm::fpuSetReg(int, unsigned long long)>
c001ab7a:	83 c4 0c             	add    esp,0xc
c001ab7d:	57                   	push   edi
c001ab7e:	56                   	push   esi
c001ab7f:	e9 64 ff ff ff       	jmp    c001aae8 <Vm::x87Handler(regs*)+0xbe>
c001ab84:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ab88:	84 d2                	test   dl,dl
c001ab8a:	75 10                	jne    c001ab9c <Vm::x87Handler(regs*)+0x172>
c001ab8c:	83 ec 0c             	sub    esp,0xc
c001ab8f:	ff 36                	push   DWORD PTR [esi]
c001ab91:	e8 8d fa ff ff       	call   c001a623 <Vm::fpu32ToInternal(unsigned int)>
c001ab96:	e9 c9 00 00 00       	jmp    c001ac64 <Vm::x87Handler(regs*)+0x23a>
c001ab9b:	90                   	nop
c001ab9c:	80 fa 03             	cmp    dl,0x3
c001ab9f:	75 13                	jne    c001abb4 <Vm::x87Handler(regs*)+0x18a>
c001aba1:	e8 31 fe ff ff       	call   c001a9d7 <Vm::fpuPop()>
c001aba6:	55                   	push   ebp
c001aba7:	55                   	push   ebp
c001aba8:	52                   	push   edx
c001aba9:	50                   	push   eax
c001abaa:	e8 0d fa ff ff       	call   c001a5bc <Vm::fpuInternalTo32(unsigned long long)>
c001abaf:	e9 90 00 00 00       	jmp    c001ac44 <Vm::x87Handler(regs*)+0x21a>
c001abb4:	80 fa 05             	cmp    dl,0x5
c001abb7:	75 0f                	jne    c001abc8 <Vm::x87Handler(regs*)+0x19e>
c001abb9:	66 8b 06             	mov    ax,WORD PTR [esi]
c001abbc:	66 a3 82 a1 02 c0    	mov    ds:0xc002a182,ax
c001abc2:	e9 ed 00 00 00       	jmp    c001acb4 <Vm::x87Handler(regs*)+0x28a>
c001abc7:	90                   	nop
c001abc8:	31 c0                	xor    eax,eax
c001abca:	80 fa 07             	cmp    dl,0x7
c001abcd:	0f 85 69 09 00 00    	jne    c001b53c <Vm::x87Handler(regs*)+0xb12>
c001abd3:	66 a1 82 a1 02 c0    	mov    ax,ds:0xc002a182
c001abd9:	66 89 06             	mov    WORD PTR [esi],ax
c001abdc:	e9 d3 00 00 00       	jmp    c001acb4 <Vm::x87Handler(regs*)+0x28a>
c001abe1:	8d 76 00             	lea    esi,[esi+0x0]
c001abe4:	80 fa d8             	cmp    dl,0xd8
c001abe7:	0f 84 d3 00 00 00    	je     c001acc0 <Vm::x87Handler(regs*)+0x296>
c001abed:	80 fa dc             	cmp    dl,0xdc
c001abf0:	0f 84 2a 02 00 00    	je     c001ae20 <Vm::x87Handler(regs*)+0x3f6>
c001abf6:	80 fa de             	cmp    dl,0xde
c001abf9:	0f 84 f1 02 00 00    	je     c001aef0 <Vm::x87Handler(regs*)+0x4c6>
c001abff:	80 fa dd             	cmp    dl,0xdd
c001ac02:	0f 84 94 04 00 00    	je     c001b09c <Vm::x87Handler(regs*)+0x672>
c001ac08:	80 fa da             	cmp    dl,0xda
c001ac0b:	0f 84 5f 05 00 00    	je     c001b170 <Vm::x87Handler(regs*)+0x746>
c001ac11:	80 fa df             	cmp    dl,0xdf
c001ac14:	0f 84 aa 05 00 00    	je     c001b1c4 <Vm::x87Handler(regs*)+0x79a>
c001ac1a:	31 c0                	xor    eax,eax
c001ac1c:	80 fa db             	cmp    dl,0xdb
c001ac1f:	0f 85 17 09 00 00    	jne    c001b53c <Vm::x87Handler(regs*)+0xb12>
c001ac25:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ac29:	80 fa 03             	cmp    dl,0x3
c001ac2c:	0f 85 c2 06 00 00    	jne    c001b2f4 <Vm::x87Handler(regs*)+0x8ca>
c001ac32:	e8 a0 fd ff ff       	call   c001a9d7 <Vm::fpuPop()>
c001ac37:	55                   	push   ebp
c001ac38:	55                   	push   ebp
c001ac39:	8d 76 00             	lea    esi,[esi+0x0]
c001ac3c:	52                   	push   edx
c001ac3d:	50                   	push   eax
c001ac3e:	e8 2e fa ff ff       	call   c001a671 <Vm::fpuFloatToLong(unsigned long long)>
c001ac43:	90                   	nop
c001ac44:	83 c4 10             	add    esp,0x10
c001ac47:	89 06                	mov    DWORD PTR [esi],eax
c001ac49:	eb 69                	jmp    c001acb4 <Vm::x87Handler(regs*)+0x28a>
c001ac4b:	90                   	nop
c001ac4c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ac50:	84 d2                	test   dl,dl
c001ac52:	0f 85 2c 06 00 00    	jne    c001b284 <Vm::x87Handler(regs*)+0x85a>
c001ac58:	57                   	push   edi
c001ac59:	57                   	push   edi
c001ac5a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ac5d:	ff 36                	push   DWORD PTR [esi]
c001ac5f:	e8 04 fa ff ff       	call   c001a668 <Vm::fpu64ToInternal(unsigned long long)>
c001ac64:	5e                   	pop    esi
c001ac65:	5f                   	pop    edi
c001ac66:	52                   	push   edx
c001ac67:	50                   	push   eax
c001ac68:	e8 0c fd ff ff       	call   c001a979 <Vm::fpuPush(unsigned long long)>
c001ac6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac74:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ac77:	e9 2c fe ff ff       	jmp    c001aaa8 <Vm::x87Handler(regs*)+0x7e>
c001ac7c:	80 fa 03             	cmp    dl,0x3
c001ac7f:	0f 85 2b 07 00 00    	jne    c001b3b0 <Vm::x87Handler(regs*)+0x986>
c001ac85:	57                   	push   edi
c001ac86:	57                   	push   edi
c001ac87:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ac8a:	ff 36                	push   DWORD PTR [esi]
c001ac8c:	e8 d7 f9 ff ff       	call   c001a668 <Vm::fpu64ToInternal(unsigned long long)>
c001ac91:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac98:	89 c6                	mov    esi,eax
c001ac9a:	89 d7                	mov    edi,edx
c001ac9c:	e8 49 fc ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001aca1:	57                   	push   edi
c001aca2:	56                   	push   esi
c001aca3:	52                   	push   edx
c001aca4:	50                   	push   eax
c001aca5:	e8 60 fb ff ff       	call   c001a80a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001acaa:	83 c4 20             	add    esp,0x20
c001acad:	e8 25 fd ff ff       	call   c001a9d7 <Vm::fpuPop()>
c001acb2:	66 90                	xchg   ax,ax
c001acb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acb8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001acbb:	e9 ec fd ff ff       	jmp    c001aaac <Vm::x87Handler(regs*)+0x82>
c001acc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001acc4:	8d 50 40             	lea    edx,[eax+0x40]
c001acc7:	80 fa 07             	cmp    dl,0x7
c001acca:	77 2c                	ja     c001acf8 <Vm::x87Handler(regs*)+0x2ce>
c001accc:	83 ec 0c             	sub    esp,0xc
c001accf:	2d c0 00 00 00       	sub    eax,0xc0
c001acd4:	50                   	push   eax
c001acd5:	e8 10 fc ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001acda:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ace1:	89 c6                	mov    esi,eax
c001ace3:	89 d7                	mov    edi,edx
c001ace5:	e8 00 fc ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001acea:	57                   	push   edi
c001aceb:	56                   	push   esi
c001acec:	52                   	push   edx
c001aced:	50                   	push   eax
c001acee:	e8 6d fb ff ff       	call   c001a860 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001acf3:	eb 33                	jmp    c001ad28 <Vm::x87Handler(regs*)+0x2fe>
c001acf5:	8d 76 00             	lea    esi,[esi+0x0]
c001acf8:	8d 50 38             	lea    edx,[eax+0x38]
c001acfb:	80 fa 07             	cmp    dl,0x7
c001acfe:	77 30                	ja     c001ad30 <Vm::x87Handler(regs*)+0x306>
c001ad00:	83 ec 0c             	sub    esp,0xc
c001ad03:	2d c8 00 00 00       	sub    eax,0xc8
c001ad08:	50                   	push   eax
c001ad09:	e8 dc fb ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001ad0e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad15:	89 c6                	mov    esi,eax
c001ad17:	89 d7                	mov    edi,edx
c001ad19:	e8 cc fb ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001ad1e:	57                   	push   edi
c001ad1f:	56                   	push   esi
c001ad20:	52                   	push   edx
c001ad21:	50                   	push   eax
c001ad22:	e8 72 fb ff ff       	call   c001a899 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ad27:	90                   	nop
c001ad28:	83 c4 1c             	add    esp,0x1c
c001ad2b:	e9 b4 fd ff ff       	jmp    c001aae4 <Vm::x87Handler(regs*)+0xba>
c001ad30:	8d 50 30             	lea    edx,[eax+0x30]
c001ad33:	80 fa 07             	cmp    dl,0x7
c001ad36:	77 10                	ja     c001ad48 <Vm::x87Handler(regs*)+0x31e>
c001ad38:	83 ec 0c             	sub    esp,0xc
c001ad3b:	2d d0 00 00 00       	sub    eax,0xd0
c001ad40:	e9 c3 03 00 00       	jmp    c001b108 <Vm::x87Handler(regs*)+0x6de>
c001ad45:	8d 76 00             	lea    esi,[esi+0x0]
c001ad48:	8d 50 28             	lea    edx,[eax+0x28]
c001ad4b:	80 fa 07             	cmp    dl,0x7
c001ad4e:	77 10                	ja     c001ad60 <Vm::x87Handler(regs*)+0x336>
c001ad50:	83 ec 0c             	sub    esp,0xc
c001ad53:	2d d8 00 00 00       	sub    eax,0xd8
c001ad58:	e9 e7 03 00 00       	jmp    c001b144 <Vm::x87Handler(regs*)+0x71a>
c001ad5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad60:	8d 50 20             	lea    edx,[eax+0x20]
c001ad63:	80 fa 07             	cmp    dl,0x7
c001ad66:	77 1c                	ja     c001ad84 <Vm::x87Handler(regs*)+0x35a>
c001ad68:	83 ec 0c             	sub    esp,0xc
c001ad6b:	2d e0 00 00 00       	sub    eax,0xe0
c001ad70:	50                   	push   eax
c001ad71:	e8 74 fb ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001ad76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad7d:	89 c6                	mov    esi,eax
c001ad7f:	89 d7                	mov    edi,edx
c001ad81:	eb 25                	jmp    c001ada8 <Vm::x87Handler(regs*)+0x37e>
c001ad83:	90                   	nop
c001ad84:	8d 50 18             	lea    edx,[eax+0x18]
c001ad87:	80 fa 07             	cmp    dl,0x7
c001ad8a:	77 30                	ja     c001adbc <Vm::x87Handler(regs*)+0x392>
c001ad8c:	83 ec 0c             	sub    esp,0xc
c001ad8f:	6a 00                	push   0x0
c001ad91:	e8 54 fb ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001ad96:	89 c6                	mov    esi,eax
c001ad98:	89 d7                	mov    edi,edx
c001ad9a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad9e:	2d e8 00 00 00       	sub    eax,0xe8
c001ada3:	89 04 24             	mov    DWORD PTR [esp],eax
c001ada6:	66 90                	xchg   ax,ax
c001ada8:	e8 3d fb ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001adad:	57                   	push   edi
c001adae:	56                   	push   esi
c001adaf:	52                   	push   edx
c001adb0:	50                   	push   eax
c001adb1:	e8 d4 fa ff ff       	call   c001a88a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001adb6:	e9 6d ff ff ff       	jmp    c001ad28 <Vm::x87Handler(regs*)+0x2fe>
c001adbb:	90                   	nop
c001adbc:	8d 50 10             	lea    edx,[eax+0x10]
c001adbf:	80 fa 07             	cmp    dl,0x7
c001adc2:	77 1c                	ja     c001ade0 <Vm::x87Handler(regs*)+0x3b6>
c001adc4:	83 ec 0c             	sub    esp,0xc
c001adc7:	2d f0 00 00 00       	sub    eax,0xf0
c001adcc:	50                   	push   eax
c001adcd:	e8 18 fb ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001add2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001add9:	89 c6                	mov    esi,eax
c001addb:	89 d7                	mov    edi,edx
c001addd:	eb 25                	jmp    c001ae04 <Vm::x87Handler(regs*)+0x3da>
c001addf:	90                   	nop
c001ade0:	3c f7                	cmp    al,0xf7
c001ade2:	0f 86 00 04 00 00    	jbe    c001b1e8 <Vm::x87Handler(regs*)+0x7be>
c001ade8:	83 ec 0c             	sub    esp,0xc
c001adeb:	6a 00                	push   0x0
c001aded:	e8 f8 fa ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001adf2:	89 c6                	mov    esi,eax
c001adf4:	89 d7                	mov    edi,edx
c001adf6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001adfa:	2d f8 00 00 00       	sub    eax,0xf8
c001adff:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae02:	66 90                	xchg   ax,ax
c001ae04:	e8 e1 fa ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001ae09:	57                   	push   edi
c001ae0a:	56                   	push   esi
c001ae0b:	52                   	push   edx
c001ae0c:	50                   	push   eax
c001ae0d:	e8 a6 fa ff ff       	call   c001a8b8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ae12:	83 c4 1c             	add    esp,0x1c
c001ae15:	52                   	push   edx
c001ae16:	50                   	push   eax
c001ae17:	6a 00                	push   0x0
c001ae19:	e9 6a 02 00 00       	jmp    c001b088 <Vm::x87Handler(regs*)+0x65e>
c001ae1e:	66 90                	xchg   ax,ax
c001ae20:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae24:	8d 50 40             	lea    edx,[eax+0x40]
c001ae27:	80 fa 07             	cmp    dl,0x7
c001ae2a:	77 38                	ja     c001ae64 <Vm::x87Handler(regs*)+0x43a>
c001ae2c:	83 ec 0c             	sub    esp,0xc
c001ae2f:	2d c0 00 00 00       	sub    eax,0xc0
c001ae34:	50                   	push   eax
c001ae35:	e8 b0 fa ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001ae3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae41:	89 c6                	mov    esi,eax
c001ae43:	89 d7                	mov    edi,edx
c001ae45:	e8 a0 fa ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001ae4a:	57                   	push   edi
c001ae4b:	56                   	push   esi
c001ae4c:	52                   	push   edx
c001ae4d:	50                   	push   eax
c001ae4e:	e8 0d fa ff ff       	call   c001a860 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ae53:	83 c4 1c             	add    esp,0x1c
c001ae56:	52                   	push   edx
c001ae57:	50                   	push   eax
c001ae58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae5c:	2d c0 00 00 00       	sub    eax,0xc0
c001ae61:	eb 41                	jmp    c001aea4 <Vm::x87Handler(regs*)+0x47a>
c001ae63:	90                   	nop
c001ae64:	8d 50 38             	lea    edx,[eax+0x38]
c001ae67:	80 fa 07             	cmp    dl,0x7
c001ae6a:	77 40                	ja     c001aeac <Vm::x87Handler(regs*)+0x482>
c001ae6c:	83 ec 0c             	sub    esp,0xc
c001ae6f:	2d c8 00 00 00       	sub    eax,0xc8
c001ae74:	50                   	push   eax
c001ae75:	e8 70 fa ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001ae7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae81:	89 c6                	mov    esi,eax
c001ae83:	89 d7                	mov    edi,edx
c001ae85:	e8 60 fa ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001ae8a:	57                   	push   edi
c001ae8b:	56                   	push   esi
c001ae8c:	52                   	push   edx
c001ae8d:	50                   	push   eax
c001ae8e:	e8 06 fa ff ff       	call   c001a899 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ae93:	83 c4 1c             	add    esp,0x1c
c001ae96:	52                   	push   edx
c001ae97:	50                   	push   eax
c001ae98:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae9c:	2d c8 00 00 00       	sub    eax,0xc8
c001aea1:	8d 76 00             	lea    esi,[esi+0x0]
c001aea4:	50                   	push   eax
c001aea5:	e9 42 fc ff ff       	jmp    c001aaec <Vm::x87Handler(regs*)+0xc2>
c001aeaa:	66 90                	xchg   ax,ax
c001aeac:	83 c0 18             	add    eax,0x18
c001aeaf:	3c 07                	cmp    al,0x7
c001aeb1:	0f 87 6d 04 00 00    	ja     c001b324 <Vm::x87Handler(regs*)+0x8fa>
c001aeb7:	83 ec 0c             	sub    esp,0xc
c001aeba:	6a 00                	push   0x0
c001aebc:	e8 29 fa ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001aec1:	89 c6                	mov    esi,eax
c001aec3:	89 d7                	mov    edi,edx
c001aec5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aec9:	2d e8 00 00 00       	sub    eax,0xe8
c001aece:	89 04 24             	mov    DWORD PTR [esp],eax
c001aed1:	e8 14 fa ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001aed6:	57                   	push   edi
c001aed7:	56                   	push   esi
c001aed8:	52                   	push   edx
c001aed9:	50                   	push   eax
c001aeda:	e8 ab f9 ff ff       	call   c001a88a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001aedf:	83 c4 1c             	add    esp,0x1c
c001aee2:	52                   	push   edx
c001aee3:	50                   	push   eax
c001aee4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aee8:	2d e8 00 00 00       	sub    eax,0xe8
c001aeed:	eb b5                	jmp    c001aea4 <Vm::x87Handler(regs*)+0x47a>
c001aeef:	90                   	nop
c001aef0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aef4:	8d 50 40             	lea    edx,[eax+0x40]
c001aef7:	80 fa 07             	cmp    dl,0x7
c001aefa:	77 3c                	ja     c001af38 <Vm::x87Handler(regs*)+0x50e>
c001aefc:	83 ec 0c             	sub    esp,0xc
c001aeff:	2d c0 00 00 00       	sub    eax,0xc0
c001af04:	50                   	push   eax
c001af05:	e8 e0 f9 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001af0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af11:	89 c6                	mov    esi,eax
c001af13:	89 d7                	mov    edi,edx
c001af15:	e8 d0 f9 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001af1a:	57                   	push   edi
c001af1b:	56                   	push   esi
c001af1c:	52                   	push   edx
c001af1d:	50                   	push   eax
c001af1e:	e8 3d f9 ff ff       	call   c001a860 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001af23:	83 c4 1c             	add    esp,0x1c
c001af26:	52                   	push   edx
c001af27:	50                   	push   eax
c001af28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af2c:	2d c0 00 00 00       	sub    eax,0xc0
c001af31:	e9 b2 01 00 00       	jmp    c001b0e8 <Vm::x87Handler(regs*)+0x6be>
c001af36:	66 90                	xchg   ax,ax
c001af38:	8d 50 20             	lea    edx,[eax+0x20]
c001af3b:	80 fa 07             	cmp    dl,0x7
c001af3e:	77 3c                	ja     c001af7c <Vm::x87Handler(regs*)+0x552>
c001af40:	83 ec 0c             	sub    esp,0xc
c001af43:	2d e0 00 00 00       	sub    eax,0xe0
c001af48:	50                   	push   eax
c001af49:	e8 9c f9 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001af4e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af55:	89 c6                	mov    esi,eax
c001af57:	89 d7                	mov    edi,edx
c001af59:	e8 8c f9 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001af5e:	57                   	push   edi
c001af5f:	56                   	push   esi
c001af60:	52                   	push   edx
c001af61:	50                   	push   eax
c001af62:	e8 23 f9 ff ff       	call   c001a88a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001af67:	83 c4 1c             	add    esp,0x1c
c001af6a:	52                   	push   edx
c001af6b:	50                   	push   eax
c001af6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af70:	2d e0 00 00 00       	sub    eax,0xe0
c001af75:	e9 6e 01 00 00       	jmp    c001b0e8 <Vm::x87Handler(regs*)+0x6be>
c001af7a:	66 90                	xchg   ax,ax
c001af7c:	8d 50 18             	lea    edx,[eax+0x18]
c001af7f:	80 fa 07             	cmp    dl,0x7
c001af82:	77 3c                	ja     c001afc0 <Vm::x87Handler(regs*)+0x596>
c001af84:	83 ec 0c             	sub    esp,0xc
c001af87:	6a 00                	push   0x0
c001af89:	e8 5c f9 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001af8e:	89 c6                	mov    esi,eax
c001af90:	89 d7                	mov    edi,edx
c001af92:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af96:	2d e8 00 00 00       	sub    eax,0xe8
c001af9b:	89 04 24             	mov    DWORD PTR [esp],eax
c001af9e:	e8 47 f9 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001afa3:	57                   	push   edi
c001afa4:	56                   	push   esi
c001afa5:	52                   	push   edx
c001afa6:	50                   	push   eax
c001afa7:	e8 de f8 ff ff       	call   c001a88a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001afac:	83 c4 1c             	add    esp,0x1c
c001afaf:	52                   	push   edx
c001afb0:	50                   	push   eax
c001afb1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001afb5:	2d e8 00 00 00       	sub    eax,0xe8
c001afba:	e9 29 01 00 00       	jmp    c001b0e8 <Vm::x87Handler(regs*)+0x6be>
c001afbf:	90                   	nop
c001afc0:	8d 50 38             	lea    edx,[eax+0x38]
c001afc3:	80 fa 07             	cmp    dl,0x7
c001afc6:	77 3c                	ja     c001b004 <Vm::x87Handler(regs*)+0x5da>
c001afc8:	83 ec 0c             	sub    esp,0xc
c001afcb:	2d c8 00 00 00       	sub    eax,0xc8
c001afd0:	50                   	push   eax
c001afd1:	e8 14 f9 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001afd6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001afdd:	89 c6                	mov    esi,eax
c001afdf:	89 d7                	mov    edi,edx
c001afe1:	e8 04 f9 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001afe6:	57                   	push   edi
c001afe7:	56                   	push   esi
c001afe8:	52                   	push   edx
c001afe9:	50                   	push   eax
c001afea:	e8 aa f8 ff ff       	call   c001a899 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001afef:	83 c4 1c             	add    esp,0x1c
c001aff2:	52                   	push   edx
c001aff3:	50                   	push   eax
c001aff4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aff8:	2d c8 00 00 00       	sub    eax,0xc8
c001affd:	e9 82 00 00 00       	jmp    c001b084 <Vm::x87Handler(regs*)+0x65a>
c001b002:	66 90                	xchg   ax,ax
c001b004:	3c f7                	cmp    al,0xf7
c001b006:	76 38                	jbe    c001b040 <Vm::x87Handler(regs*)+0x616>
c001b008:	83 ec 0c             	sub    esp,0xc
c001b00b:	6a 00                	push   0x0
c001b00d:	e8 d8 f8 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b012:	89 c6                	mov    esi,eax
c001b014:	89 d7                	mov    edi,edx
c001b016:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b01a:	2d f8 00 00 00       	sub    eax,0xf8
c001b01f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b022:	e8 c3 f8 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b027:	57                   	push   edi
c001b028:	56                   	push   esi
c001b029:	52                   	push   edx
c001b02a:	50                   	push   eax
c001b02b:	e8 88 f8 ff ff       	call   c001a8b8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b030:	83 c4 1c             	add    esp,0x1c
c001b033:	52                   	push   edx
c001b034:	50                   	push   eax
c001b035:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b039:	2d f8 00 00 00       	sub    eax,0xf8
c001b03e:	eb 44                	jmp    c001b084 <Vm::x87Handler(regs*)+0x65a>
c001b040:	8d 50 10             	lea    edx,[eax+0x10]
c001b043:	80 fa 07             	cmp    dl,0x7
c001b046:	0f 87 6c 01 00 00    	ja     c001b1b8 <Vm::x87Handler(regs*)+0x78e>
c001b04c:	83 ec 0c             	sub    esp,0xc
c001b04f:	2d f0 00 00 00       	sub    eax,0xf0
c001b054:	50                   	push   eax
c001b055:	e8 90 f8 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b05a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b061:	89 c6                	mov    esi,eax
c001b063:	89 d7                	mov    edi,edx
c001b065:	e8 80 f8 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b06a:	57                   	push   edi
c001b06b:	56                   	push   esi
c001b06c:	52                   	push   edx
c001b06d:	50                   	push   eax
c001b06e:	e8 45 f8 ff ff       	call   c001a8b8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b073:	83 c4 1c             	add    esp,0x1c
c001b076:	52                   	push   edx
c001b077:	50                   	push   eax
c001b078:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b07c:	2d f0 00 00 00       	sub    eax,0xf0
c001b081:	8d 76 00             	lea    esi,[esi+0x0]
c001b084:	50                   	push   eax
c001b085:	8d 76 00             	lea    esi,[esi+0x0]
c001b088:	e8 a0 f8 ff ff       	call   c001a92d <Vm::fpuSetReg(int, unsigned long long)>
c001b08d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b091:	e8 41 f9 ff ff       	call   c001a9d7 <Vm::fpuPop()>
c001b096:	e9 0d fa ff ff       	jmp    c001aaa8 <Vm::x87Handler(regs*)+0x7e>
c001b09b:	90                   	nop
c001b09c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0a0:	8d 50 30             	lea    edx,[eax+0x30]
c001b0a3:	80 fa 07             	cmp    dl,0x7
c001b0a6:	77 20                	ja     c001b0c8 <Vm::x87Handler(regs*)+0x69e>
c001b0a8:	83 ec 0c             	sub    esp,0xc
c001b0ab:	6a 00                	push   0x0
c001b0ad:	e8 38 f8 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b0b2:	83 c4 0c             	add    esp,0xc
c001b0b5:	52                   	push   edx
c001b0b6:	50                   	push   eax
c001b0b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0bb:	2d d0 00 00 00       	sub    eax,0xd0
c001b0c0:	e9 df fd ff ff       	jmp    c001aea4 <Vm::x87Handler(regs*)+0x47a>
c001b0c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b0c8:	8d 50 28             	lea    edx,[eax+0x28]
c001b0cb:	80 fa 07             	cmp    dl,0x7
c001b0ce:	77 28                	ja     c001b0f8 <Vm::x87Handler(regs*)+0x6ce>
c001b0d0:	83 ec 0c             	sub    esp,0xc
c001b0d3:	6a 00                	push   0x0
c001b0d5:	e8 10 f8 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b0da:	83 c4 0c             	add    esp,0xc
c001b0dd:	52                   	push   edx
c001b0de:	50                   	push   eax
c001b0df:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0e3:	2d d8 00 00 00       	sub    eax,0xd8
c001b0e8:	50                   	push   eax
c001b0e9:	e8 3f f8 ff ff       	call   c001a92d <Vm::fpuSetReg(int, unsigned long long)>
c001b0ee:	e8 e4 f8 ff ff       	call   c001a9d7 <Vm::fpuPop()>
c001b0f3:	e9 ac f9 ff ff       	jmp    c001aaa4 <Vm::x87Handler(regs*)+0x7a>
c001b0f8:	8d 50 20             	lea    edx,[eax+0x20]
c001b0fb:	80 fa 07             	cmp    dl,0x7
c001b0fe:	77 30                	ja     c001b130 <Vm::x87Handler(regs*)+0x706>
c001b100:	83 ec 0c             	sub    esp,0xc
c001b103:	2d e0 00 00 00       	sub    eax,0xe0
c001b108:	50                   	push   eax
c001b109:	e8 dc f7 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b10e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b115:	89 c6                	mov    esi,eax
c001b117:	89 d7                	mov    edi,edx
c001b119:	e8 cc f7 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b11e:	57                   	push   edi
c001b11f:	56                   	push   esi
c001b120:	52                   	push   edx
c001b121:	50                   	push   eax
c001b122:	e8 e3 f6 ff ff       	call   c001a80a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b127:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b12b:	e9 78 02 00 00       	jmp    c001b3a8 <Vm::x87Handler(regs*)+0x97e>
c001b130:	8d 50 18             	lea    edx,[eax+0x18]
c001b133:	80 fa 07             	cmp    dl,0x7
c001b136:	0f 87 10 fb ff ff    	ja     c001ac4c <Vm::x87Handler(regs*)+0x222>
c001b13c:	83 ec 0c             	sub    esp,0xc
c001b13f:	2d e8 00 00 00       	sub    eax,0xe8
c001b144:	50                   	push   eax
c001b145:	e8 a0 f7 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b14a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b151:	89 c6                	mov    esi,eax
c001b153:	89 d7                	mov    edi,edx
c001b155:	e8 90 f7 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b15a:	57                   	push   edi
c001b15b:	56                   	push   esi
c001b15c:	52                   	push   edx
c001b15d:	50                   	push   eax
c001b15e:	e8 a7 f6 ff ff       	call   c001a80a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b163:	83 c4 20             	add    esp,0x20
c001b166:	e8 6c f8 ff ff       	call   c001a9d7 <Vm::fpuPop()>
c001b16b:	eb 6f                	jmp    c001b1dc <Vm::x87Handler(regs*)+0x7b2>
c001b16d:	8d 76 00             	lea    esi,[esi+0x0]
c001b170:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001b174:	0f 85 22 01 00 00    	jne    c001b29c <Vm::x87Handler(regs*)+0x872>
c001b17a:	66 90                	xchg   ax,ax
c001b17c:	83 ec 0c             	sub    esp,0xc
c001b17f:	6a 01                	push   0x1
c001b181:	e8 64 f7 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b186:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b18d:	89 c6                	mov    esi,eax
c001b18f:	89 d7                	mov    edi,edx
c001b191:	e8 54 f7 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b196:	57                   	push   edi
c001b197:	56                   	push   esi
c001b198:	52                   	push   edx
c001b199:	50                   	push   eax
c001b19a:	e8 6b f6 ff ff       	call   c001a80a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b19f:	83 c4 20             	add    esp,0x20
c001b1a2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b1a6:	e8 2c f8 ff ff       	call   c001a9d7 <Vm::fpuPop()>
c001b1ab:	e8 27 f8 ff ff       	call   c001a9d7 <Vm::fpuPop()>
c001b1b0:	e9 f7 f8 ff ff       	jmp    c001aaac <Vm::x87Handler(regs*)+0x82>
c001b1b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1b8:	3c d9                	cmp    al,0xd9
c001b1ba:	0f 85 e8 02 00 00    	jne    c001b4a8 <Vm::x87Handler(regs*)+0xa7e>
c001b1c0:	eb ba                	jmp    c001b17c <Vm::x87Handler(regs*)+0x752>
c001b1c2:	66 90                	xchg   ax,ax
c001b1c4:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001b1c8:	0f 85 2a 03 00 00    	jne    c001b4f8 <Vm::x87Handler(regs*)+0xace>
c001b1ce:	0f b7 05 80 a1 02 c0 	movzx  eax,WORD PTR ds:0xc002a180
c001b1d5:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001b1d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1dc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b1e0:	e9 c7 f8 ff ff       	jmp    c001aaac <Vm::x87Handler(regs*)+0x82>
c001b1e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1e8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b1ec:	84 d2                	test   dl,dl
c001b1ee:	75 10                	jne    c001b200 <Vm::x87Handler(regs*)+0x7d6>
c001b1f0:	83 ec 0c             	sub    esp,0xc
c001b1f3:	ff 36                	push   DWORD PTR [esi]
c001b1f5:	e8 29 f4 ff ff       	call   c001a623 <Vm::fpu32ToInternal(unsigned int)>
c001b1fa:	e9 39 01 00 00       	jmp    c001b338 <Vm::x87Handler(regs*)+0x90e>
c001b1ff:	90                   	nop
c001b200:	80 fa 01             	cmp    dl,0x1
c001b203:	75 0f                	jne    c001b214 <Vm::x87Handler(regs*)+0x7ea>
c001b205:	83 ec 0c             	sub    esp,0xc
c001b208:	ff 36                	push   DWORD PTR [esi]
c001b20a:	e8 14 f4 ff ff       	call   c001a623 <Vm::fpu32ToInternal(unsigned int)>
c001b20f:	e9 b4 02 00 00       	jmp    c001b4c8 <Vm::x87Handler(regs*)+0xa9e>
c001b214:	80 fa 04             	cmp    dl,0x4
c001b217:	75 0f                	jne    c001b228 <Vm::x87Handler(regs*)+0x7fe>
c001b219:	83 ec 0c             	sub    esp,0xc
c001b21c:	ff 36                	push   DWORD PTR [esi]
c001b21e:	e8 00 f4 ff ff       	call   c001a623 <Vm::fpu32ToInternal(unsigned int)>
c001b223:	e9 9c 01 00 00       	jmp    c001b3c4 <Vm::x87Handler(regs*)+0x99a>
c001b228:	80 fa 05             	cmp    dl,0x5
c001b22b:	75 1b                	jne    c001b248 <Vm::x87Handler(regs*)+0x81e>
c001b22d:	83 ec 0c             	sub    esp,0xc
c001b230:	6a 00                	push   0x0
c001b232:	e8 b3 f6 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b237:	89 c7                	mov    edi,eax
c001b239:	89 d5                	mov    ebp,edx
c001b23b:	58                   	pop    eax
c001b23c:	ff 36                	push   DWORD PTR [esi]
c001b23e:	e8 e0 f3 ff ff       	call   c001a623 <Vm::fpu32ToInternal(unsigned int)>
c001b243:	e9 bc 01 00 00       	jmp    c001b404 <Vm::x87Handler(regs*)+0x9da>
c001b248:	80 fa 06             	cmp    dl,0x6
c001b24b:	75 0f                	jne    c001b25c <Vm::x87Handler(regs*)+0x832>
c001b24d:	83 ec 0c             	sub    esp,0xc
c001b250:	ff 36                	push   DWORD PTR [esi]
c001b252:	e8 cc f3 ff ff       	call   c001a623 <Vm::fpu32ToInternal(unsigned int)>
c001b257:	e9 cc 01 00 00       	jmp    c001b428 <Vm::x87Handler(regs*)+0x9fe>
c001b25c:	31 c0                	xor    eax,eax
c001b25e:	80 fa 07             	cmp    dl,0x7
c001b261:	0f 85 d5 02 00 00    	jne    c001b53c <Vm::x87Handler(regs*)+0xb12>
c001b267:	83 ec 0c             	sub    esp,0xc
c001b26a:	6a 00                	push   0x0
c001b26c:	e8 79 f6 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b271:	89 c7                	mov    edi,eax
c001b273:	89 d5                	mov    ebp,edx
c001b275:	58                   	pop    eax
c001b276:	ff 36                	push   DWORD PTR [esi]
c001b278:	e8 a6 f3 ff ff       	call   c001a623 <Vm::fpu32ToInternal(unsigned int)>
c001b27d:	e9 ee 01 00 00       	jmp    c001b470 <Vm::x87Handler(regs*)+0xa46>
c001b282:	66 90                	xchg   ax,ax
c001b284:	80 fa 03             	cmp    dl,0x3
c001b287:	0f 85 f7 01 00 00    	jne    c001b484 <Vm::x87Handler(regs*)+0xa5a>
c001b28d:	e8 45 f7 ff ff       	call   c001a9d7 <Vm::fpuPop()>
c001b292:	51                   	push   ecx
c001b293:	51                   	push   ecx
c001b294:	e9 03 02 00 00       	jmp    c001b49c <Vm::x87Handler(regs*)+0xa72>
c001b299:	8d 76 00             	lea    esi,[esi+0x0]
c001b29c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b2a0:	80 fa 01             	cmp    dl,0x1
c001b2a3:	75 0b                	jne    c001b2b0 <Vm::x87Handler(regs*)+0x886>
c001b2a5:	57                   	push   edi
c001b2a6:	57                   	push   edi
c001b2a7:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2a9:	e9 0e 02 00 00       	jmp    c001b4bc <Vm::x87Handler(regs*)+0xa92>
c001b2ae:	66 90                	xchg   ax,ax
c001b2b0:	80 fa 04             	cmp    dl,0x4
c001b2b3:	75 13                	jne    c001b2c8 <Vm::x87Handler(regs*)+0x89e>
c001b2b5:	31 d2                	xor    edx,edx
c001b2b7:	51                   	push   ecx
c001b2b8:	51                   	push   ecx
c001b2b9:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2bb:	52                   	push   edx
c001b2bc:	50                   	push   eax
c001b2bd:	e8 4a f4 ff ff       	call   c001a70c <Vm::fpuLongToFloat(long long)>
c001b2c2:	e9 fd 00 00 00       	jmp    c001b3c4 <Vm::x87Handler(regs*)+0x99a>
c001b2c7:	90                   	nop
c001b2c8:	31 c0                	xor    eax,eax
c001b2ca:	80 fa 07             	cmp    dl,0x7
c001b2cd:	0f 85 69 02 00 00    	jne    c001b53c <Vm::x87Handler(regs*)+0xb12>
c001b2d3:	83 ec 0c             	sub    esp,0xc
c001b2d6:	6a 00                	push   0x0
c001b2d8:	e8 0d f6 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b2dd:	89 c7                	mov    edi,eax
c001b2df:	89 d5                	mov    ebp,edx
c001b2e1:	58                   	pop    eax
c001b2e2:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2e4:	5a                   	pop    edx
c001b2e5:	31 d2                	xor    edx,edx
c001b2e7:	52                   	push   edx
c001b2e8:	50                   	push   eax
c001b2e9:	e8 1e f4 ff ff       	call   c001a70c <Vm::fpuLongToFloat(long long)>
c001b2ee:	e9 7d 01 00 00       	jmp    c001b470 <Vm::x87Handler(regs*)+0xa46>
c001b2f3:	90                   	nop
c001b2f4:	84 d2                	test   dl,dl
c001b2f6:	75 10                	jne    c001b308 <Vm::x87Handler(regs*)+0x8de>
c001b2f8:	31 d2                	xor    edx,edx
c001b2fa:	55                   	push   ebp
c001b2fb:	55                   	push   ebp
c001b2fc:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2fe:	52                   	push   edx
c001b2ff:	50                   	push   eax
c001b300:	e9 03 02 00 00       	jmp    c001b508 <Vm::x87Handler(regs*)+0xade>
c001b305:	8d 76 00             	lea    esi,[esi+0x0]
c001b308:	31 c0                	xor    eax,eax
c001b30a:	80 fa 02             	cmp    dl,0x2
c001b30d:	0f 85 29 02 00 00    	jne    c001b53c <Vm::x87Handler(regs*)+0xb12>
c001b313:	83 ec 0c             	sub    esp,0xc
c001b316:	6a 00                	push   0x0
c001b318:	e8 cd f5 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b31d:	59                   	pop    ecx
c001b31e:	5f                   	pop    edi
c001b31f:	e9 18 f9 ff ff       	jmp    c001ac3c <Vm::x87Handler(regs*)+0x212>
c001b324:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b328:	84 d2                	test   dl,dl
c001b32a:	75 2c                	jne    c001b358 <Vm::x87Handler(regs*)+0x92e>
c001b32c:	50                   	push   eax
c001b32d:	50                   	push   eax
c001b32e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b331:	ff 36                	push   DWORD PTR [esi]
c001b333:	e8 30 f3 ff ff       	call   c001a668 <Vm::fpu64ToInternal(unsigned long long)>
c001b338:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b33f:	89 c6                	mov    esi,eax
c001b341:	89 d7                	mov    edi,edx
c001b343:	e8 a2 f5 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b348:	57                   	push   edi
c001b349:	56                   	push   esi
c001b34a:	52                   	push   edx
c001b34b:	50                   	push   eax
c001b34c:	e8 0f f5 ff ff       	call   c001a860 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001b351:	e9 8e 01 00 00       	jmp    c001b4e4 <Vm::x87Handler(regs*)+0xaba>
c001b356:	66 90                	xchg   ax,ax
c001b358:	80 fa 01             	cmp    dl,0x1
c001b35b:	75 13                	jne    c001b370 <Vm::x87Handler(regs*)+0x946>
c001b35d:	50                   	push   eax
c001b35e:	50                   	push   eax
c001b35f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b362:	ff 36                	push   DWORD PTR [esi]
c001b364:	e8 ff f2 ff ff       	call   c001a668 <Vm::fpu64ToInternal(unsigned long long)>
c001b369:	e9 5a 01 00 00       	jmp    c001b4c8 <Vm::x87Handler(regs*)+0xa9e>
c001b36e:	66 90                	xchg   ax,ax
c001b370:	80 fa 02             	cmp    dl,0x2
c001b373:	0f 85 03 f9 ff ff    	jne    c001ac7c <Vm::x87Handler(regs*)+0x252>
c001b379:	55                   	push   ebp
c001b37a:	55                   	push   ebp
c001b37b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b37e:	ff 36                	push   DWORD PTR [esi]
c001b380:	e8 e3 f2 ff ff       	call   c001a668 <Vm::fpu64ToInternal(unsigned long long)>
c001b385:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b38c:	89 c6                	mov    esi,eax
c001b38e:	89 d7                	mov    edi,edx
c001b390:	e8 55 f5 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b395:	57                   	push   edi
c001b396:	56                   	push   esi
c001b397:	52                   	push   edx
c001b398:	50                   	push   eax
c001b399:	e8 6c f4 ff ff       	call   c001a80a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b39e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3a2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001b3a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b3a8:	83 c4 20             	add    esp,0x20
c001b3ab:	e9 fc f6 ff ff       	jmp    c001aaac <Vm::x87Handler(regs*)+0x82>
c001b3b0:	80 fa 04             	cmp    dl,0x4
c001b3b3:	75 2f                	jne    c001b3e4 <Vm::x87Handler(regs*)+0x9ba>
c001b3b5:	51                   	push   ecx
c001b3b6:	51                   	push   ecx
c001b3b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b3ba:	ff 36                	push   DWORD PTR [esi]
c001b3bc:	e8 a7 f2 ff ff       	call   c001a668 <Vm::fpu64ToInternal(unsigned long long)>
c001b3c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b3c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b3cb:	89 c6                	mov    esi,eax
c001b3cd:	89 d7                	mov    edi,edx
c001b3cf:	e8 16 f5 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b3d4:	57                   	push   edi
c001b3d5:	56                   	push   esi
c001b3d6:	52                   	push   edx
c001b3d7:	50                   	push   eax
c001b3d8:	e8 ad f4 ff ff       	call   c001a88a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b3dd:	e9 02 01 00 00       	jmp    c001b4e4 <Vm::x87Handler(regs*)+0xaba>
c001b3e2:	66 90                	xchg   ax,ax
c001b3e4:	80 fa 05             	cmp    dl,0x5
c001b3e7:	75 2b                	jne    c001b414 <Vm::x87Handler(regs*)+0x9ea>
c001b3e9:	83 ec 0c             	sub    esp,0xc
c001b3ec:	6a 00                	push   0x0
c001b3ee:	e8 f7 f4 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b3f3:	89 c7                	mov    edi,eax
c001b3f5:	89 d5                	mov    ebp,edx
c001b3f7:	58                   	pop    eax
c001b3f8:	5a                   	pop    edx
c001b3f9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b3fc:	ff 36                	push   DWORD PTR [esi]
c001b3fe:	e8 65 f2 ff ff       	call   c001a668 <Vm::fpu64ToInternal(unsigned long long)>
c001b403:	90                   	nop
c001b404:	83 c4 10             	add    esp,0x10
c001b407:	55                   	push   ebp
c001b408:	57                   	push   edi
c001b409:	52                   	push   edx
c001b40a:	50                   	push   eax
c001b40b:	e8 7a f4 ff ff       	call   c001a88a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b410:	eb 6a                	jmp    c001b47c <Vm::x87Handler(regs*)+0xa52>
c001b412:	66 90                	xchg   ax,ax
c001b414:	80 fa 06             	cmp    dl,0x6
c001b417:	75 2f                	jne    c001b448 <Vm::x87Handler(regs*)+0xa1e>
c001b419:	51                   	push   ecx
c001b41a:	51                   	push   ecx
c001b41b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b41e:	ff 36                	push   DWORD PTR [esi]
c001b420:	e8 43 f2 ff ff       	call   c001a668 <Vm::fpu64ToInternal(unsigned long long)>
c001b425:	8d 76 00             	lea    esi,[esi+0x0]
c001b428:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b42f:	89 c6                	mov    esi,eax
c001b431:	89 d7                	mov    edi,edx
c001b433:	e8 b2 f4 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b438:	57                   	push   edi
c001b439:	56                   	push   esi
c001b43a:	52                   	push   edx
c001b43b:	50                   	push   eax
c001b43c:	e8 77 f4 ff ff       	call   c001a8b8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b441:	e9 9e 00 00 00       	jmp    c001b4e4 <Vm::x87Handler(regs*)+0xaba>
c001b446:	66 90                	xchg   ax,ax
c001b448:	31 c0                	xor    eax,eax
c001b44a:	80 fa 07             	cmp    dl,0x7
c001b44d:	0f 85 e9 00 00 00    	jne    c001b53c <Vm::x87Handler(regs*)+0xb12>
c001b453:	83 ec 0c             	sub    esp,0xc
c001b456:	6a 00                	push   0x0
c001b458:	e8 8d f4 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b45d:	89 c7                	mov    edi,eax
c001b45f:	89 d5                	mov    ebp,edx
c001b461:	58                   	pop    eax
c001b462:	5a                   	pop    edx
c001b463:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b466:	ff 36                	push   DWORD PTR [esi]
c001b468:	e8 fb f1 ff ff       	call   c001a668 <Vm::fpu64ToInternal(unsigned long long)>
c001b46d:	8d 76 00             	lea    esi,[esi+0x0]
c001b470:	83 c4 10             	add    esp,0x10
c001b473:	55                   	push   ebp
c001b474:	57                   	push   edi
c001b475:	52                   	push   edx
c001b476:	50                   	push   eax
c001b477:	e8 3c f4 ff ff       	call   c001a8b8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b47c:	83 c4 0c             	add    esp,0xc
c001b47f:	eb 67                	jmp    c001b4e8 <Vm::x87Handler(regs*)+0xabe>
c001b481:	8d 76 00             	lea    esi,[esi+0x0]
c001b484:	31 c0                	xor    eax,eax
c001b486:	80 fa 02             	cmp    dl,0x2
c001b489:	0f 85 ad 00 00 00    	jne    c001b53c <Vm::x87Handler(regs*)+0xb12>
c001b48f:	83 ec 0c             	sub    esp,0xc
c001b492:	6a 00                	push   0x0
c001b494:	e8 51 f4 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b499:	59                   	pop    ecx
c001b49a:	5f                   	pop    edi
c001b49b:	90                   	nop
c001b49c:	52                   	push   edx
c001b49d:	50                   	push   eax
c001b49e:	e8 77 f1 ff ff       	call   c001a61a <Vm::fpuInternalTo64(unsigned long long)>
c001b4a3:	e9 84 00 00 00       	jmp    c001b52c <Vm::x87Handler(regs*)+0xb02>
c001b4a8:	31 c0                	xor    eax,eax
c001b4aa:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b4af:	0f 85 87 00 00 00    	jne    c001b53c <Vm::x87Handler(regs*)+0xb12>
c001b4b5:	50                   	push   eax
c001b4b6:	50                   	push   eax
c001b4b7:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001b4ba:	66 90                	xchg   ax,ax
c001b4bc:	31 d2                	xor    edx,edx
c001b4be:	52                   	push   edx
c001b4bf:	50                   	push   eax
c001b4c0:	e8 47 f2 ff ff       	call   c001a70c <Vm::fpuLongToFloat(long long)>
c001b4c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4c8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b4cf:	89 c6                	mov    esi,eax
c001b4d1:	89 d7                	mov    edi,edx
c001b4d3:	e8 12 f4 ff ff       	call   c001a8ea <Vm::fpuGetReg(int)>
c001b4d8:	57                   	push   edi
c001b4d9:	56                   	push   esi
c001b4da:	52                   	push   edx
c001b4db:	50                   	push   eax
c001b4dc:	e8 b8 f3 ff ff       	call   c001a899 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b4e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4e4:	83 c4 1c             	add    esp,0x1c
c001b4e7:	90                   	nop
c001b4e8:	52                   	push   edx
c001b4e9:	50                   	push   eax
c001b4ea:	6a 00                	push   0x0
c001b4ec:	e8 3c f4 ff ff       	call   c001a92d <Vm::fpuSetReg(int, unsigned long long)>
c001b4f1:	e9 7a f7 ff ff       	jmp    c001ac70 <Vm::x87Handler(regs*)+0x246>
c001b4f6:	66 90                	xchg   ax,ax
c001b4f8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b4fc:	80 fa 05             	cmp    dl,0x5
c001b4ff:	75 13                	jne    c001b514 <Vm::x87Handler(regs*)+0xaea>
c001b501:	55                   	push   ebp
c001b502:	55                   	push   ebp
c001b503:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b506:	ff 36                	push   DWORD PTR [esi]
c001b508:	e8 c3 f1 ff ff       	call   c001a6d0 <Vm::fpuULongToFloat(unsigned long long)>
c001b50d:	e9 52 f7 ff ff       	jmp    c001ac64 <Vm::x87Handler(regs*)+0x23a>
c001b512:	66 90                	xchg   ax,ax
c001b514:	31 c0                	xor    eax,eax
c001b516:	80 fa 07             	cmp    dl,0x7
c001b519:	75 21                	jne    c001b53c <Vm::x87Handler(regs*)+0xb12>
c001b51b:	e8 b7 f4 ff ff       	call   c001a9d7 <Vm::fpuPop()>
c001b520:	51                   	push   ecx
c001b521:	51                   	push   ecx
c001b522:	52                   	push   edx
c001b523:	50                   	push   eax
c001b524:	e8 48 f1 ff ff       	call   c001a671 <Vm::fpuFloatToLong(unsigned long long)>
c001b529:	8d 76 00             	lea    esi,[esi+0x0]
c001b52c:	83 c4 10             	add    esp,0x10
c001b52f:	89 06                	mov    DWORD PTR [esi],eax
c001b531:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001b534:	e9 7b f7 ff ff       	jmp    c001acb4 <Vm::x87Handler(regs*)+0x28a>
c001b539:	8d 76 00             	lea    esi,[esi+0x0]
c001b53c:	83 c4 1c             	add    esp,0x1c
c001b53f:	5b                   	pop    ebx
c001b540:	5e                   	pop    esi
c001b541:	5f                   	pop    edi
c001b542:	5d                   	pop    ebp
c001b543:	c3                   	ret    

c001b544 <__static_initialization_and_destruction_0(int, int)>:
c001b544:	83 ec 0c             	sub    esp,0xc
c001b547:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001b54c:	75 1a                	jne    c001b568 <__static_initialization_and_destruction_0(int, int)+0x24>
c001b54e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001b556:	75 10                	jne    c001b568 <__static_initialization_and_destruction_0(int, int)+0x24>
c001b558:	83 ec 0c             	sub    esp,0xc
c001b55b:	68 80 a1 02 c0       	push   0xc002a180
c001b560:	e8 cf 83 00 00       	call   c0023934 <Vm::_FPUState::_FPUState()>
c001b565:	83 c4 10             	add    esp,0x10
c001b568:	90                   	nop
c001b569:	83 c4 0c             	add    esp,0xc
c001b56c:	c3                   	ret    
c001b56d:	8d 76 00             	lea    esi,[esi+0x0]

c001b570 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001b570:	83 ec 0c             	sub    esp,0xc
c001b573:	83 ec 08             	sub    esp,0x8
c001b576:	68 ff ff 00 00       	push   0xffff
c001b57b:	6a 01                	push   0x1
c001b57d:	e8 c2 ff ff ff       	call   c001b544 <__static_initialization_and_destruction_0(int, int)>
c001b582:	83 c4 10             	add    esp,0x10
c001b585:	83 c4 0c             	add    esp,0xc
c001b588:	c3                   	ret    
c001b589:	66 90                	xchg   ax,ax
c001b58b:	90                   	nop

c001b58c <FAT::getName()>:
c001b58c:	b8 90 6f 02 c0       	mov    eax,0xc0026f90
c001b591:	c3                   	ret    
c001b592:	66 90                	xchg   ax,ax

c001b594 <FAT::tell(void*, unsigned long long*)>:
c001b594:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b599:	75 09                	jne    c001b5a4 <FAT::tell(void*, unsigned long long*)+0x10>
c001b59b:	b8 04 00 00 00       	mov    eax,0x4
c001b5a0:	c3                   	ret    
c001b5a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b5a9:	75 09                	jne    c001b5b4 <FAT::tell(void*, unsigned long long*)+0x20>
c001b5ab:	b8 04 00 00 00       	mov    eax,0x4
c001b5b0:	c3                   	ret    
c001b5b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5b8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001b5bb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001b5be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b5c2:	89 01                	mov    DWORD PTR [ecx],eax
c001b5c4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b5c7:	b8 00 00 00 00       	mov    eax,0x0
c001b5cc:	c3                   	ret    
c001b5cd:	90                   	nop
c001b5ce:	66 90                	xchg   ax,ax

c001b5d0 <FAT::stat(void*, unsigned long long*)>:
c001b5d0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b5d5:	75 09                	jne    c001b5e0 <FAT::stat(void*, unsigned long long*)+0x10>
c001b5d7:	b8 04 00 00 00       	mov    eax,0x4
c001b5dc:	c3                   	ret    
c001b5dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b5e5:	75 09                	jne    c001b5f0 <FAT::stat(void*, unsigned long long*)+0x20>
c001b5e7:	b8 04 00 00 00       	mov    eax,0x4
c001b5ec:	c3                   	ret    
c001b5ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b5f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5f4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b5f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b5fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b5fe:	89 01                	mov    DWORD PTR [ecx],eax
c001b600:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b603:	b8 00 00 00 00       	mov    eax,0x0
c001b608:	c3                   	ret    
c001b609:	90                   	nop
c001b60a:	66 90                	xchg   ax,ax

c001b60c <FAT::~FAT()>:
c001b60c:	83 ec 0c             	sub    esp,0xc
c001b60f:	ba dc 6f 02 c0       	mov    edx,0xc0026fdc
c001b614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b618:	89 10                	mov    DWORD PTR [eax],edx
c001b61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b61e:	83 ec 0c             	sub    esp,0xc
c001b621:	50                   	push   eax
c001b622:	e8 e7 1d ff ff       	call   c000d40e <Filesystem::~Filesystem()>
c001b627:	83 c4 10             	add    esp,0x10
c001b62a:	90                   	nop
c001b62b:	83 c4 0c             	add    esp,0xc
c001b62e:	c3                   	ret    
c001b62f:	90                   	nop

c001b630 <FAT::~FAT()>:
c001b630:	83 ec 0c             	sub    esp,0xc
c001b633:	83 ec 0c             	sub    esp,0xc
c001b636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b63a:	e8 cd ff ff ff       	call   c001b60c <FAT::~FAT()>
c001b63f:	83 c4 10             	add    esp,0x10
c001b642:	83 ec 08             	sub    esp,0x8
c001b645:	6a 08                	push   0x8
c001b647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b64b:	e8 a2 19 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c001b650:	83 c4 10             	add    esp,0x10
c001b653:	83 c4 0c             	add    esp,0xc
c001b656:	c3                   	ret    
c001b657:	90                   	nop

c001b658 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b658:	83 ec 1c             	sub    esp,0x1c
c001b65b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b662:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b667:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b66b:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b672:	83 f8 ff             	cmp    eax,0xffffffff
c001b675:	75 35                	jne    c001b6ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b677:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b67b:	88 c2                	mov    dl,al
c001b67d:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b682:	01 d0                	add    eax,edx
c001b684:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b688:	8b 15 e0 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1e0
c001b68e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b692:	89 14 85 00 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5e00],edx
c001b699:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b69e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b6a2:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c001b6a9:	eb 19                	jmp    c001b6c4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b6ab:	90                   	nop
c001b6ac:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b6b0:	88 c2                	mov    dl,al
c001b6b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b6b6:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b6bd:	01 d0                	add    eax,edx
c001b6bf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b6c3:	90                   	nop
c001b6c4:	83 ec 04             	sub    esp,0x4
c001b6c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b6cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b6cf:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b6d3:	50                   	push   eax
c001b6d4:	e8 69 b5 fe ff       	call   c0006c42 <f_getlabel>
c001b6d9:	83 c4 10             	add    esp,0x10
c001b6dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b6e5:	75 09                	jne    c001b6f0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b6e7:	b8 00 00 00 00       	mov    eax,0x0
c001b6ec:	eb 0a                	jmp    c001b6f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b6ee:	66 90                	xchg   ax,ax
c001b6f0:	b8 01 00 00 00       	mov    eax,0x1
c001b6f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b6f8:	83 c4 1c             	add    esp,0x1c
c001b6fb:	c3                   	ret    

c001b6fc <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b6fc:	57                   	push   edi
c001b6fd:	83 ec 58             	sub    esp,0x58
c001b700:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b708:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b70c:	b9 0f 00 00 00       	mov    ecx,0xf
c001b711:	b8 00 00 00 00       	mov    eax,0x0
c001b716:	fc                   	cld    
c001b717:	89 d7                	mov    edi,edx
c001b719:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b71b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b71f:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b726:	83 f8 ff             	cmp    eax,0xffffffff
c001b729:	75 35                	jne    c001b760 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b72b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b72f:	88 c2                	mov    dl,al
c001b731:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b736:	01 d0                	add    eax,edx
c001b738:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b73c:	8b 15 e0 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1e0
c001b742:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b746:	89 14 85 00 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5e00],edx
c001b74d:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b752:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b756:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c001b75d:	eb 19                	jmp    c001b778 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b75f:	90                   	nop
c001b760:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b764:	88 c2                	mov    dl,al
c001b766:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b76a:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b771:	01 d0                	add    eax,edx
c001b773:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b777:	90                   	nop
c001b778:	83 ec 08             	sub    esp,0x8
c001b77b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b77f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b783:	50                   	push   eax
c001b784:	e8 07 51 fe ff       	call   c0000890 <strcat>
c001b789:	83 c4 10             	add    esp,0x10
c001b78c:	83 ec 0c             	sub    esp,0xc
c001b78f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b793:	50                   	push   eax
c001b794:	e8 97 b6 fe ff       	call   c0006e30 <f_setlabel>
c001b799:	83 c4 10             	add    esp,0x10
c001b79c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b7a0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b7a5:	75 09                	jne    c001b7b0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b7a7:	b8 00 00 00 00       	mov    eax,0x0
c001b7ac:	eb 0a                	jmp    c001b7b8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b7ae:	66 90                	xchg   ax,ax
c001b7b0:	b8 01 00 00 00       	mov    eax,0x1
c001b7b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b8:	83 c4 58             	add    esp,0x58
c001b7bb:	5f                   	pop    edi
c001b7bc:	c3                   	ret    
c001b7bd:	90                   	nop
c001b7be:	66 90                	xchg   ax,ax

c001b7c0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b7c0:	83 ec 2c             	sub    esp,0x2c
c001b7c3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b7cb:	83 ec 08             	sub    esp,0x8
c001b7ce:	68 b4 6f 02 c0       	push   0xc0026fb4
c001b7d3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b7d7:	e8 00 50 fe ff       	call   c00007dc <strcmp>
c001b7dc:	83 c4 10             	add    esp,0x10
c001b7df:	85 c0                	test   eax,eax
c001b7e1:	0f 94 c0             	sete   al
c001b7e4:	84 c0                	test   al,al
c001b7e6:	74 10                	je     c001b7f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b7e8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b7f0:	e9 b3 00 00 00       	jmp    c001b8a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7f8:	83 ec 08             	sub    esp,0x8
c001b7fb:	68 a6 6f 02 c0       	push   0xc0026fa6
c001b800:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b804:	e8 d3 4f fe ff       	call   c00007dc <strcmp>
c001b809:	83 c4 10             	add    esp,0x10
c001b80c:	85 c0                	test   eax,eax
c001b80e:	0f 94 c0             	sete   al
c001b811:	84 c0                	test   al,al
c001b813:	74 0f                	je     c001b824 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b815:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b81d:	e9 86 00 00 00       	jmp    c001b8a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b822:	66 90                	xchg   ax,ax
c001b824:	83 ec 08             	sub    esp,0x8
c001b827:	68 ac 6f 02 c0       	push   0xc0026fac
c001b82c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b830:	e8 a7 4f fe ff       	call   c00007dc <strcmp>
c001b835:	83 c4 10             	add    esp,0x10
c001b838:	85 c0                	test   eax,eax
c001b83a:	0f 94 c0             	sete   al
c001b83d:	84 c0                	test   al,al
c001b83f:	74 0b                	je     c001b84c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b841:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b849:	eb 5d                	jmp    c001b8a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b84b:	90                   	nop
c001b84c:	83 ec 08             	sub    esp,0x8
c001b84f:	68 ac 40 02 c0       	push   0xc00240ac
c001b854:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b858:	e8 7f 4f fe ff       	call   c00007dc <strcmp>
c001b85d:	83 c4 10             	add    esp,0x10
c001b860:	85 c0                	test   eax,eax
c001b862:	0f 94 c0             	sete   al
c001b865:	84 c0                	test   al,al
c001b867:	74 0b                	je     c001b874 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b869:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b871:	eb 35                	jmp    c001b8a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b873:	90                   	nop
c001b874:	83 ec 08             	sub    esp,0x8
c001b877:	68 b2 6f 02 c0       	push   0xc0026fb2
c001b87c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b880:	e8 57 4f fe ff       	call   c00007dc <strcmp>
c001b885:	83 c4 10             	add    esp,0x10
c001b888:	85 c0                	test   eax,eax
c001b88a:	0f 94 c0             	sete   al
c001b88d:	84 c0                	test   al,al
c001b88f:	74 0b                	je     c001b89c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b891:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b899:	eb 0d                	jmp    c001b8a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b89b:	90                   	nop
c001b89c:	b8 08 00 00 00       	mov    eax,0x8
c001b8a1:	e9 ea 00 00 00       	jmp    c001b990 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b8a6:	66 90                	xchg   ax,ax
c001b8a8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b8af:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b8b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8b8:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b8bf:	83 f8 ff             	cmp    eax,0xffffffff
c001b8c2:	75 34                	jne    c001b8f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b8c4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b8c8:	88 c2                	mov    dl,al
c001b8ca:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b8cf:	01 d0                	add    eax,edx
c001b8d1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b8d5:	8b 15 e0 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1e0
c001b8db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8df:	89 14 85 00 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5e00],edx
c001b8e6:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b8eb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b8ef:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c001b8f6:	eb 18                	jmp    c001b910 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b8f8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b8fc:	88 c2                	mov    dl,al
c001b8fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b902:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b909:	01 d0                	add    eax,edx
c001b90b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b90f:	90                   	nop
c001b910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b914:	88 04 24             	mov    BYTE PTR [esp],al
c001b917:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b91b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b91f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b927:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b92c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b934:	83 ec 0c             	sub    esp,0xc
c001b937:	68 00 20 00 00       	push   0x2000
c001b93c:	e8 a6 e4 fe ff       	call   c0009de7 <malloc>
c001b941:	83 c4 10             	add    esp,0x10
c001b944:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b948:	68 00 20 00 00       	push   0x2000
c001b94d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b951:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b955:	50                   	push   eax
c001b956:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b95a:	50                   	push   eax
c001b95b:	e8 51 bb fe ff       	call   c00074b1 <f_mkfs>
c001b960:	83 c4 10             	add    esp,0x10
c001b963:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b967:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b96c:	75 0a                	jne    c001b978 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b96e:	b8 00 00 00 00       	mov    eax,0x0
c001b973:	eb 1b                	jmp    c001b990 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b975:	8d 76 00             	lea    esi,[esi+0x0]
c001b978:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b97d:	75 09                	jne    c001b988 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b97f:	b8 09 00 00 00       	mov    eax,0x9
c001b984:	eb 0a                	jmp    c001b990 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b986:	66 90                	xchg   ax,ax
c001b988:	b8 01 00 00 00       	mov    eax,0x1
c001b98d:	8d 76 00             	lea    esi,[esi+0x0]
c001b990:	83 c4 2c             	add    esp,0x2c
c001b993:	c3                   	ret    

c001b994 <FAT::tryMount(LogicalDisk*, int)>:
c001b994:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b99a:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b99f:	83 f8 14             	cmp    eax,0x14
c001b9a2:	75 18                	jne    c001b9bc <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b9a4:	83 ec 0c             	sub    esp,0xc
c001b9a7:	68 b8 6f 02 c0       	push   0xc0026fb8
c001b9ac:	e8 04 98 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001b9b1:	83 c4 10             	add    esp,0x10
c001b9b4:	b0 00                	mov    al,0x0
c001b9b6:	e9 e9 01 00 00       	jmp    c001bba4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b9bb:	90                   	nop
c001b9bc:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b9c3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b9c9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b9cf:	3d 00 02 00 00       	cmp    eax,0x200
c001b9d4:	74 0a                	je     c001b9e0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b9d6:	b0 00                	mov    al,0x0
c001b9d8:	e9 c7 01 00 00       	jmp    c001bba4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b9dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b9e0:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b9e8:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b9ef:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b9f6:	83 f8 ff             	cmp    eax,0xffffffff
c001b9f9:	74 09                	je     c001ba04 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b9fb:	b0 01                	mov    al,0x1
c001b9fd:	e9 a2 01 00 00       	jmp    c001bba4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ba02:	66 90                	xchg   ax,ax
c001ba04:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001ba0e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001ba16:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001ba1d:	88 c2                	mov    dl,al
c001ba1f:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001ba24:	01 d0                	add    eax,edx
c001ba26:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001ba2d:	8b 15 e0 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1e0
c001ba33:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ba3a:	89 14 85 00 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5e00],edx
c001ba41:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001ba46:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001ba4d:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c001ba54:	83 ec 0c             	sub    esp,0xc
c001ba57:	68 54 02 00 00       	push   0x254
c001ba5c:	e8 86 e3 fe ff       	call   c0009de7 <malloc>
c001ba61:	83 c4 10             	add    esp,0x10
c001ba64:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001ba6b:	83 ec 04             	sub    esp,0x4
c001ba6e:	6a 00                	push   0x0
c001ba70:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ba77:	50                   	push   eax
c001ba78:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ba7f:	e8 b5 93 fe ff       	call   c0004e39 <f_mount>
c001ba84:	83 c4 10             	add    esp,0x10
c001ba87:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001ba8e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001ba96:	74 1c                	je     c001bab4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001ba98:	83 ec 0c             	sub    esp,0xc
c001ba9b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001baa2:	e8 60 e3 fe ff       	call   c0009e07 <rfree>
c001baa7:	83 c4 10             	add    esp,0x10
c001baaa:	b0 00                	mov    al,0x0
c001baac:	e9 f3 00 00 00       	jmp    c001bba4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001bab1:	8d 76 00             	lea    esi,[esi+0x0]
c001bab4:	83 ec 04             	sub    esp,0x4
c001bab7:	68 00 01 00 00       	push   0x100
c001babc:	6a 00                	push   0x0
c001babe:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bac5:	50                   	push   eax
c001bac6:	e8 c9 4b fe ff       	call   c0000694 <memset>
c001bacb:	83 c4 10             	add    esp,0x10
c001bace:	83 ec 08             	sub    esp,0x8
c001bad1:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bad8:	50                   	push   eax
c001bad9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bae0:	50                   	push   eax
c001bae1:	e8 aa 4d fe ff       	call   c0000890 <strcat>
c001bae6:	83 c4 10             	add    esp,0x10
c001bae9:	83 ec 08             	sub    esp,0x8
c001baec:	68 c6 6f 02 c0       	push   0xc0026fc6
c001baf1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001baf8:	50                   	push   eax
c001baf9:	e8 92 4d fe ff       	call   c0000890 <strcat>
c001bafe:	83 c4 10             	add    esp,0x10
c001bb01:	83 ec 04             	sub    esp,0x4
c001bb04:	6a 01                	push   0x1
c001bb06:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001bb0d:	50                   	push   eax
c001bb0e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bb12:	50                   	push   eax
c001bb13:	e8 83 93 fe ff       	call   c0004e9b <f_open>
c001bb18:	83 c4 10             	add    esp,0x10
c001bb1b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001bb22:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bb29:	85 c0                	test   eax,eax
c001bb2b:	74 0b                	je     c001bb38 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bb2d:	78 31                	js     c001bb60 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bb2f:	83 e8 04             	sub    eax,0x4
c001bb32:	83 f8 01             	cmp    eax,0x1
c001bb35:	77 29                	ja     c001bb60 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bb37:	90                   	nop
c001bb38:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001bb40:	83 ec 0c             	sub    esp,0xc
c001bb43:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bb47:	50                   	push   eax
c001bb48:	e8 a0 9e fe ff       	call   c00059ed <f_close>
c001bb4d:	83 c4 10             	add    esp,0x10
c001bb50:	90                   	nop
c001bb51:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001bb59:	74 41                	je     c001bb9c <FAT::tryMount(LogicalDisk*, int)+0x208>
c001bb5b:	eb 33                	jmp    c001bb90 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bb5d:	8d 76 00             	lea    esi,[esi+0x0]
c001bb60:	83 ec 0c             	sub    esp,0xc
c001bb63:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bb6a:	e8 98 e2 fe ff       	call   c0009e07 <rfree>
c001bb6f:	83 c4 10             	add    esp,0x10
c001bb72:	83 ec 04             	sub    esp,0x4
c001bb75:	6a 00                	push   0x0
c001bb77:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bb7e:	50                   	push   eax
c001bb7f:	6a 00                	push   0x0
c001bb81:	e8 b3 92 fe ff       	call   c0004e39 <f_mount>
c001bb86:	83 c4 10             	add    esp,0x10
c001bb89:	b0 00                	mov    al,0x0
c001bb8b:	eb 17                	jmp    c001bba4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001bb8d:	8d 76 00             	lea    esi,[esi+0x0]
c001bb90:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001bb95:	40                   	inc    eax
c001bb96:	a3 e0 a1 02 c0       	mov    ds:0xc002a1e0,eax
c001bb9b:	90                   	nop
c001bb9c:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001bba3:	90                   	nop
c001bba4:	81 c4 6c 03 00 00    	add    esp,0x36c
c001bbaa:	c3                   	ret    
c001bbab:	90                   	nop

c001bbac <FAT::allocateSwapfile(char const*, int)>:
c001bbac:	55                   	push   ebp
c001bbad:	57                   	push   edi
c001bbae:	56                   	push   esi
c001bbaf:	53                   	push   ebx
c001bbb0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001bbb6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001bbc1:	83 ec 0c             	sub    esp,0xc
c001bbc4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001bbcb:	e8 17 e2 fe ff       	call   c0009de7 <malloc>
c001bbd0:	83 c4 10             	add    esp,0x10
c001bbd3:	89 c7                	mov    edi,eax
c001bbd5:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c001bbda:	83 ec 04             	sub    esp,0x4
c001bbdd:	50                   	push   eax
c001bbde:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001bbe5:	57                   	push   edi
c001bbe6:	e8 53 1a ff ff       	call   c000d63e <File::File(char const*, Process*)>
c001bbeb:	83 c4 10             	add    esp,0x10
c001bbee:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001bbf5:	83 ec 04             	sub    esp,0x4
c001bbf8:	8d 44 24 13          	lea    eax,[esp+0x13]
c001bbfc:	50                   	push   eax
c001bbfd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc01:	50                   	push   eax
c001bc02:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc09:	e8 b6 1d ff ff       	call   c000d9c4 <File::stat(unsigned long long*, bool*)>
c001bc0e:	83 c4 10             	add    esp,0x10
c001bc11:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bc18:	c1 e0 14             	shl    eax,0x14
c001bc1b:	89 c7                	mov    edi,eax
c001bc1d:	89 c5                	mov    ebp,eax
c001bc1f:	c1 fd 1f             	sar    ebp,0x1f
c001bc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc2a:	89 f9                	mov    ecx,edi
c001bc2c:	31 c1                	xor    ecx,eax
c001bc2e:	89 cb                	mov    ebx,ecx
c001bc30:	89 e9                	mov    ecx,ebp
c001bc32:	31 d1                	xor    ecx,edx
c001bc34:	89 ce                	mov    esi,ecx
c001bc36:	89 f0                	mov    eax,esi
c001bc38:	09 d8                	or     eax,ebx
c001bc3a:	0f 84 98 00 00 00    	je     c001bcd8 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001bc40:	83 ec 0c             	sub    esp,0xc
c001bc43:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc4a:	e8 41 1c ff ff       	call   c000d890 <File::unlink()>
c001bc4f:	83 c4 10             	add    esp,0x10
c001bc52:	83 ec 08             	sub    esp,0x8
c001bc55:	6a 12                	push   0x12
c001bc57:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc5e:	e8 b5 1a ff ff       	call   c000d718 <File::open(FileOpenMode)>
c001bc63:	83 c4 10             	add    esp,0x10
c001bc66:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bc6d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bc73:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bc7a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bc81:	c1 e0 14             	shl    eax,0x14
c001bc84:	99                   	cdq    
c001bc85:	6a 01                	push   0x1
c001bc87:	52                   	push   edx
c001bc88:	50                   	push   eax
c001bc89:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bc90:	e8 08 b4 fe ff       	call   c000709d <f_expand>
c001bc95:	83 c4 10             	add    esp,0x10
c001bc98:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bc9f:	8b 00                	mov    eax,DWORD PTR [eax]
c001bca1:	83 c0 10             	add    eax,0x10
c001bca4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bca6:	83 ec 0c             	sub    esp,0xc
c001bca9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bcad:	52                   	push   edx
c001bcae:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bcb2:	52                   	push   edx
c001bcb3:	6a 00                	push   0x0
c001bcb5:	68 00 04 00 00       	push   0x400
c001bcba:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bcc1:	ff d0                	call   eax
c001bcc3:	83 c4 20             	add    esp,0x20
c001bcc6:	83 ec 0c             	sub    esp,0xc
c001bcc9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bcd0:	e8 a1 1a ff ff       	call   c000d776 <File::close()>
c001bcd5:	83 c4 10             	add    esp,0x10
c001bcd8:	83 ec 08             	sub    esp,0x8
c001bcdb:	6a 01                	push   0x1
c001bcdd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bce4:	e8 2f 1a ff ff       	call   c000d718 <File::open(FileOpenMode)>
c001bce9:	83 c4 10             	add    esp,0x10
c001bcec:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bcf3:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcf5:	83 c0 0c             	add    eax,0xc
c001bcf8:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcfa:	83 ec 0c             	sub    esp,0xc
c001bcfd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bd01:	52                   	push   edx
c001bd02:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bd06:	52                   	push   edx
c001bd07:	6a 00                	push   0x0
c001bd09:	6a 04                	push   0x4
c001bd0b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bd12:	ff d0                	call   eax
c001bd14:	83 c4 20             	add    esp,0x20
c001bd17:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd1e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bd24:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bd2b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bd32:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bd35:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bd38:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bd3f:	83 ec 0c             	sub    esp,0xc
c001bd42:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd49:	e8 28 1a ff ff       	call   c000d776 <File::close()>
c001bd4e:	83 c4 10             	add    esp,0x10
c001bd51:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bd58:	ba 00 00 00 00       	mov    edx,0x0
c001bd5d:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bd63:	5b                   	pop    ebx
c001bd64:	5e                   	pop    esi
c001bd65:	5f                   	pop    edi
c001bd66:	5d                   	pop    ebp
c001bd67:	c3                   	ret    

c001bd68 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bd68:	57                   	push   edi
c001bd69:	56                   	push   esi
c001bd6a:	53                   	push   ebx
c001bd6b:	81 ec 50 02 00 00    	sub    esp,0x250
c001bd71:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001bd79:	74 0d                	je     c001bd88 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001bd7b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001bd83:	75 0f                	jne    c001bd94 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001bd85:	8d 76 00             	lea    esi,[esi+0x0]
c001bd88:	b8 04 00 00 00       	mov    eax,0x4
c001bd8d:	e9 36 01 00 00       	jmp    c001bec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bd92:	66 90                	xchg   ax,ax
c001bd94:	83 ec 08             	sub    esp,0x8
c001bd97:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bd9e:	50                   	push   eax
c001bd9f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001bda6:	e8 4c a2 fe ff       	call   c0005ff7 <f_readdir>
c001bdab:	83 c4 10             	add    esp,0x10
c001bdae:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001bdb5:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001bdbc:	83 ec 0c             	sub    esp,0xc
c001bdbf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bdc6:	83 c0 1a             	add    eax,0x1a
c001bdc9:	50                   	push   eax
c001bdca:	e8 e1 48 fe ff       	call   c00006b0 <strlen>
c001bdcf:	83 c4 10             	add    esp,0x10
c001bdd2:	ba 00 00 00 00       	mov    edx,0x0
c001bdd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bddf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001bde6:	0f b6 c0             	movzx  eax,al
c001bde9:	83 e0 10             	and    eax,0x10
c001bdec:	74 0a                	je     c001bdf8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001bdee:	b8 02 00 00 00       	mov    eax,0x2
c001bdf3:	eb 0b                	jmp    c001be00 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001bdf5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdf8:	b8 01 00 00 00       	mov    eax,0x1
c001bdfd:	8d 76 00             	lea    esi,[esi+0x0]
c001be00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be04:	83 ec 08             	sub    esp,0x8
c001be07:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001be0e:	83 c0 1a             	add    eax,0x1a
c001be11:	50                   	push   eax
c001be12:	8d 44 24 10          	lea    eax,[esp+0x10]
c001be16:	83 c0 10             	add    eax,0x10
c001be19:	50                   	push   eax
c001be1a:	e8 31 49 fe ff       	call   c0000750 <strcpy>
c001be1f:	83 c4 10             	add    esp,0x10
c001be22:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001be29:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001be30:	8d 44 24 04          	lea    eax,[esp+0x4]
c001be34:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001be3b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001be42:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001be49:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001be50:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001be57:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001be5e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001be65:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001be6c:	89 c6                	mov    esi,eax
c001be6e:	89 d7                	mov    edi,edx
c001be70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001be72:	89 c8                	mov    eax,ecx
c001be74:	89 fa                	mov    edx,edi
c001be76:	89 f3                	mov    ebx,esi
c001be78:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001be7f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001be86:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001be8d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001be94:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001be9a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bea1:	84 c0                	test   al,al
c001bea3:	75 07                	jne    c001beac <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001bea5:	b8 07 00 00 00       	mov    eax,0x7
c001beaa:	eb 1c                	jmp    c001bec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001beac:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001beb3:	85 c0                	test   eax,eax
c001beb5:	75 09                	jne    c001bec0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001beb7:	b8 00 00 00 00       	mov    eax,0x0
c001bebc:	eb 0a                	jmp    c001bec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bebe:	66 90                	xchg   ax,ax
c001bec0:	b8 01 00 00 00       	mov    eax,0x1
c001bec5:	8d 76 00             	lea    esi,[esi+0x0]
c001bec8:	81 c4 50 02 00 00    	add    esp,0x250
c001bece:	5b                   	pop    ebx
c001becf:	5e                   	pop    esi
c001bed0:	5f                   	pop    edi
c001bed1:	c3                   	ret    
c001bed2:	66 90                	xchg   ax,ax

c001bed4 <FAT::read(void*, unsigned long, void*, int*)>:
c001bed4:	83 ec 1c             	sub    esp,0x1c
c001bed7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bedc:	74 0a                	je     c001bee8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bede:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bee3:	75 0b                	jne    c001bef0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bee5:	8d 76 00             	lea    esi,[esi+0x0]
c001bee8:	b8 04 00 00 00       	mov    eax,0x4
c001beed:	eb 41                	jmp    c001bf30 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001beef:	90                   	nop
c001bef0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bef4:	50                   	push   eax
c001bef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bef9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001befd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf01:	e8 d1 93 fe ff       	call   c00052d7 <f_read>
c001bf06:	83 c4 10             	add    esp,0x10
c001bf09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf11:	89 c2                	mov    edx,eax
c001bf13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bf17:	89 10                	mov    DWORD PTR [eax],edx
c001bf19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf1d:	85 c0                	test   eax,eax
c001bf1f:	75 07                	jne    c001bf28 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bf21:	b8 00 00 00 00       	mov    eax,0x0
c001bf26:	eb 08                	jmp    c001bf30 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bf28:	b8 01 00 00 00       	mov    eax,0x1
c001bf2d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf30:	83 c4 1c             	add    esp,0x1c
c001bf33:	c3                   	ret    

c001bf34 <FAT::write(void*, unsigned long, void*, int*)>:
c001bf34:	83 ec 1c             	sub    esp,0x1c
c001bf37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bf3c:	74 0a                	je     c001bf48 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bf3e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bf43:	75 0b                	jne    c001bf50 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bf45:	8d 76 00             	lea    esi,[esi+0x0]
c001bf48:	b8 04 00 00 00       	mov    eax,0x4
c001bf4d:	eb 41                	jmp    c001bf90 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bf4f:	90                   	nop
c001bf50:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf54:	50                   	push   eax
c001bf55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bf5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf61:	e8 f1 95 fe ff       	call   c0005557 <f_write>
c001bf66:	83 c4 10             	add    esp,0x10
c001bf69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf71:	89 c2                	mov    edx,eax
c001bf73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bf77:	89 10                	mov    DWORD PTR [eax],edx
c001bf79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf7d:	85 c0                	test   eax,eax
c001bf7f:	75 07                	jne    c001bf88 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bf81:	b8 00 00 00 00       	mov    eax,0x0
c001bf86:	eb 08                	jmp    c001bf90 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bf88:	b8 01 00 00 00       	mov    eax,0x1
c001bf8d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf90:	83 c4 1c             	add    esp,0x1c
c001bf93:	c3                   	ret    

c001bf94 <FAT::close(void*)>:
c001bf94:	83 ec 1c             	sub    esp,0x1c
c001bf97:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bf9c:	75 0a                	jne    c001bfa8 <FAT::close(void*)+0x14>
c001bf9e:	b8 04 00 00 00       	mov    eax,0x4
c001bfa3:	eb 3f                	jmp    c001bfe4 <FAT::close(void*)+0x50>
c001bfa5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfa8:	83 ec 0c             	sub    esp,0xc
c001bfab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bfaf:	e8 39 9a fe ff       	call   c00059ed <f_close>
c001bfb4:	83 c4 10             	add    esp,0x10
c001bfb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfbb:	83 ec 0c             	sub    esp,0xc
c001bfbe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bfc2:	e8 30 de fe ff       	call   c0009df7 <free>
c001bfc7:	83 c4 10             	add    esp,0x10
c001bfca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfce:	85 c0                	test   eax,eax
c001bfd0:	75 0a                	jne    c001bfdc <FAT::close(void*)+0x48>
c001bfd2:	b8 00 00 00 00       	mov    eax,0x0
c001bfd7:	eb 0b                	jmp    c001bfe4 <FAT::close(void*)+0x50>
c001bfd9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfdc:	b8 01 00 00 00       	mov    eax,0x1
c001bfe1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfe4:	83 c4 1c             	add    esp,0x1c
c001bfe7:	c3                   	ret    

c001bfe8 <FAT::closeDir(void*)>:
c001bfe8:	83 ec 1c             	sub    esp,0x1c
c001bfeb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bff0:	75 0a                	jne    c001bffc <FAT::closeDir(void*)+0x14>
c001bff2:	b8 04 00 00 00       	mov    eax,0x4
c001bff7:	eb 3f                	jmp    c001c038 <FAT::closeDir(void*)+0x50>
c001bff9:	8d 76 00             	lea    esi,[esi+0x0]
c001bffc:	83 ec 0c             	sub    esp,0xc
c001bfff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c003:	e8 cd 9f fe ff       	call   c0005fd5 <f_closedir>
c001c008:	83 c4 10             	add    esp,0x10
c001c00b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c00f:	83 ec 0c             	sub    esp,0xc
c001c012:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c016:	e8 dc dd fe ff       	call   c0009df7 <free>
c001c01b:	83 c4 10             	add    esp,0x10
c001c01e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c022:	85 c0                	test   eax,eax
c001c024:	75 0a                	jne    c001c030 <FAT::closeDir(void*)+0x48>
c001c026:	b8 00 00 00 00       	mov    eax,0x0
c001c02b:	eb 0b                	jmp    c001c038 <FAT::closeDir(void*)+0x50>
c001c02d:	8d 76 00             	lea    esi,[esi+0x0]
c001c030:	b8 01 00 00 00       	mov    eax,0x1
c001c035:	8d 76 00             	lea    esi,[esi+0x0]
c001c038:	83 c4 1c             	add    esp,0x1c
c001c03b:	c3                   	ret    

c001c03c <FAT::seek(void*, unsigned long long)>:
c001c03c:	83 ec 2c             	sub    esp,0x2c
c001c03f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c043:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c047:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c04b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c04f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c054:	75 0a                	jne    c001c060 <FAT::seek(void*, unsigned long long)+0x24>
c001c056:	b8 04 00 00 00       	mov    eax,0x4
c001c05b:	eb 37                	jmp    c001c094 <FAT::seek(void*, unsigned long long)+0x58>
c001c05d:	8d 76 00             	lea    esi,[esi+0x0]
c001c060:	83 ec 04             	sub    esp,0x4
c001c063:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c067:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c06b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c06f:	e8 a8 99 fe ff       	call   c0005a1c <f_lseek>
c001c074:	83 c4 10             	add    esp,0x10
c001c077:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c07b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c07f:	85 c0                	test   eax,eax
c001c081:	75 09                	jne    c001c08c <FAT::seek(void*, unsigned long long)+0x50>
c001c083:	b8 00 00 00 00       	mov    eax,0x0
c001c088:	eb 0a                	jmp    c001c094 <FAT::seek(void*, unsigned long long)+0x58>
c001c08a:	66 90                	xchg   ax,ax
c001c08c:	b8 01 00 00 00       	mov    eax,0x1
c001c091:	8d 76 00             	lea    esi,[esi+0x0]
c001c094:	83 c4 2c             	add    esp,0x2c
c001c097:	c3                   	ret    

c001c098 <fatWrapperReadDisk>:
c001c098:	83 ec 1c             	sub    esp,0x1c
c001c09b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c09f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c0a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c0a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c0ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0b7:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c001c0be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c0c2:	83 ec 0c             	sub    esp,0xc
c001c0c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c0c9:	52                   	push   edx
c001c0ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c0ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c0d2:	50                   	push   eax
c001c0d3:	e8 7e 49 ff ff       	call   c0010a56 <LogicalDisk::read(unsigned long long, int, void*)>
c001c0d8:	83 c4 20             	add    esp,0x20
c001c0db:	83 c4 1c             	add    esp,0x1c
c001c0de:	c3                   	ret    
c001c0df:	90                   	nop

c001c0e0 <fatWrapperWriteDisk>:
c001c0e0:	83 ec 1c             	sub    esp,0x1c
c001c0e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0e7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c0eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c0ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c0f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0fa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0ff:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c001c106:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c10a:	83 ec 0c             	sub    esp,0xc
c001c10d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c111:	52                   	push   edx
c001c112:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c116:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c11a:	50                   	push   eax
c001c11b:	e8 a2 49 ff ff       	call   c0010ac2 <LogicalDisk::write(unsigned long long, int, void*)>
c001c120:	83 c4 20             	add    esp,0x20
c001c123:	83 c4 1c             	add    esp,0x1c
c001c126:	c3                   	ret    
c001c127:	90                   	nop

c001c128 <fatWrapperIoctl>:
c001c128:	53                   	push   ebx
c001c129:	83 ec 28             	sub    esp,0x28
c001c12c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c130:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c134:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c138:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c13c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001c141:	75 31                	jne    c001c174 <fatWrapperIoctl+0x4c>
c001c143:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c147:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c14b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c150:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c001c157:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c15d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c163:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c167:	66 89 02             	mov    WORD PTR [edx],ax
c001c16a:	b8 00 00 00 00       	mov    eax,0x0
c001c16f:	e9 bc 00 00 00       	jmp    c001c230 <fatWrapperIoctl+0x108>
c001c174:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001c179:	75 6d                	jne    c001c1e8 <fatWrapperIoctl+0xc0>
c001c17b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c17f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c183:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c188:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c001c18f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c195:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c19b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c1a1:	89 c8                	mov    eax,ecx
c001c1a3:	89 da                	mov    edx,ebx
c001c1a5:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c1a9:	c1 e0 0a             	shl    eax,0xa
c001c1ac:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c1b1:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c001c1b8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c1be:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c1c4:	89 cb                	mov    ebx,ecx
c001c1c6:	c1 fb 1f             	sar    ebx,0x1f
c001c1c9:	53                   	push   ebx
c001c1ca:	51                   	push   ecx
c001c1cb:	52                   	push   edx
c001c1cc:	50                   	push   eax
c001c1cd:	e8 be 6d 00 00       	call   c0022f90 <__udivdi3>
c001c1d2:	83 c4 10             	add    esp,0x10
c001c1d5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c1d9:	89 01                	mov    DWORD PTR [ecx],eax
c001c1db:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c1de:	b8 00 00 00 00       	mov    eax,0x0
c001c1e3:	eb 4b                	jmp    c001c230 <fatWrapperIoctl+0x108>
c001c1e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1e8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001c1ed:	75 09                	jne    c001c1f8 <fatWrapperIoctl+0xd0>
c001c1ef:	b8 00 00 00 00       	mov    eax,0x0
c001c1f4:	eb 3a                	jmp    c001c230 <fatWrapperIoctl+0x108>
c001c1f6:	66 90                	xchg   ax,ax
c001c1f8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001c1fd:	75 19                	jne    c001c218 <fatWrapperIoctl+0xf0>
c001c1ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c203:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c207:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c20b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c211:	b8 00 00 00 00       	mov    eax,0x0
c001c216:	eb 18                	jmp    c001c230 <fatWrapperIoctl+0x108>
c001c218:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001c21d:	75 09                	jne    c001c228 <fatWrapperIoctl+0x100>
c001c21f:	b8 00 00 00 00       	mov    eax,0x0
c001c224:	eb 0a                	jmp    c001c230 <fatWrapperIoctl+0x108>
c001c226:	66 90                	xchg   ax,ax
c001c228:	b8 04 00 00 00       	mov    eax,0x4
c001c22d:	8d 76 00             	lea    esi,[esi+0x0]
c001c230:	83 c4 28             	add    esp,0x28
c001c233:	5b                   	pop    ebx
c001c234:	c3                   	ret    
c001c235:	90                   	nop
c001c236:	66 90                	xchg   ax,ax

c001c238 <FAT::FAT()>:
c001c238:	83 ec 1c             	sub    esp,0x1c
c001c23b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c23f:	83 ec 0c             	sub    esp,0xc
c001c242:	50                   	push   eax
c001c243:	e8 a2 11 ff ff       	call   c000d3ea <Filesystem::Filesystem()>
c001c248:	83 c4 10             	add    esp,0x10
c001c24b:	ba dc 6f 02 c0       	mov    edx,0xc0026fdc
c001c250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c254:	89 10                	mov    DWORD PTR [eax],edx
c001c256:	c7 05 e0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1e0,0x0
c001c260:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c268:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c26d:	7f 15                	jg     c001c284 <FAT::FAT()+0x4c>
c001c26f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c273:	c7 04 85 00 a2 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5e00],0xffffffff
c001c27e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c282:	eb e4                	jmp    c001c268 <FAT::FAT()+0x30>
c001c284:	90                   	nop
c001c285:	83 c4 1c             	add    esp,0x1c
c001c288:	c3                   	ret    
c001c289:	90                   	nop
c001c28a:	66 90                	xchg   ax,ax

c001c28c <FAT::fixFilepath(char*)>:
c001c28c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c290:	8a 00                	mov    al,BYTE PTR [eax]
c001c292:	3c 40                	cmp    al,0x40
c001c294:	7e 2e                	jle    c001c2c4 <FAT::fixFilepath(char*)+0x38>
c001c296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c29a:	8a 00                	mov    al,BYTE PTR [eax]
c001c29c:	83 e8 41             	sub    eax,0x41
c001c29f:	88 c2                	mov    dl,al
c001c2a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2a5:	88 10                	mov    BYTE PTR [eax],dl
c001c2a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2ab:	8a 00                	mov    al,BYTE PTR [eax]
c001c2ad:	0f be c0             	movsx  eax,al
c001c2b0:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001c2b7:	83 c0 30             	add    eax,0x30
c001c2ba:	88 c2                	mov    dl,al
c001c2bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2c0:	88 10                	mov    BYTE PTR [eax],dl
c001c2c2:	66 90                	xchg   ax,ax
c001c2c4:	90                   	nop
c001c2c5:	c3                   	ret    
c001c2c6:	66 90                	xchg   ax,ax

c001c2c8 <FAT::open(char const*, void**, FileOpenMode)>:
c001c2c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c2ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c2d6:	74 0c                	je     c001c2e4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c2d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c2e0:	75 0e                	jne    c001c2f0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c2e2:	66 90                	xchg   ax,ax
c001c2e4:	b8 04 00 00 00       	mov    eax,0x4
c001c2e9:	e9 06 01 00 00       	jmp    c001c3f4 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c2ee:	66 90                	xchg   ax,ax
c001c2f0:	83 ec 08             	sub    esp,0x8
c001c2f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c2fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c2fe:	50                   	push   eax
c001c2ff:	e8 4c 44 fe ff       	call   c0000750 <strcpy>
c001c304:	83 c4 10             	add    esp,0x10
c001c307:	83 ec 08             	sub    esp,0x8
c001c30a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c30e:	50                   	push   eax
c001c30f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c316:	e8 71 ff ff ff       	call   c001c28c <FAT::fixFilepath(char*)>
c001c31b:	83 c4 10             	add    esp,0x10
c001c31e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c326:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c32d:	83 e0 01             	and    eax,0x1
c001c330:	74 0a                	je     c001c33c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001c332:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001c33a:	66 90                	xchg   ax,ax
c001c33c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c343:	83 e0 04             	and    eax,0x4
c001c346:	74 10                	je     c001c358 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001c348:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001c350:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c358:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c35f:	83 e0 02             	and    eax,0x2
c001c362:	74 08                	je     c001c36c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001c364:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c36c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c373:	83 e0 08             	and    eax,0x8
c001c376:	74 08                	je     c001c380 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001c378:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001c380:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c387:	83 e0 10             	and    eax,0x10
c001c38a:	74 08                	je     c001c394 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c38c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001c394:	83 ec 0c             	sub    esp,0xc
c001c397:	68 50 02 00 00       	push   0x250
c001c39c:	e8 46 da fe ff       	call   c0009de7 <malloc>
c001c3a1:	83 c4 10             	add    esp,0x10
c001c3a4:	89 c2                	mov    edx,eax
c001c3a6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c3ad:	89 10                	mov    DWORD PTR [eax],edx
c001c3af:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c3b7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c3be:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3c0:	83 ec 04             	sub    esp,0x4
c001c3c3:	52                   	push   edx
c001c3c4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c3c8:	52                   	push   edx
c001c3c9:	50                   	push   eax
c001c3ca:	e8 cc 8a fe ff       	call   c0004e9b <f_open>
c001c3cf:	83 c4 10             	add    esp,0x10
c001c3d2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c3d9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c3e1:	74 09                	je     c001c3ec <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001c3e3:	b8 01 00 00 00       	mov    eax,0x1
c001c3e8:	eb 0a                	jmp    c001c3f4 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c3ea:	66 90                	xchg   ax,ax
c001c3ec:	b8 00 00 00 00       	mov    eax,0x0
c001c3f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c3f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c3fa:	c3                   	ret    
c001c3fb:	90                   	nop

c001c3fc <FAT::openDir(char const*, void**)>:
c001c3fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c402:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c40a:	74 0c                	je     c001c418 <FAT::openDir(char const*, void**)+0x1c>
c001c40c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c414:	75 0e                	jne    c001c424 <FAT::openDir(char const*, void**)+0x28>
c001c416:	66 90                	xchg   ax,ax
c001c418:	b8 04 00 00 00       	mov    eax,0x4
c001c41d:	e9 82 00 00 00       	jmp    c001c4a4 <FAT::openDir(char const*, void**)+0xa8>
c001c422:	66 90                	xchg   ax,ax
c001c424:	83 ec 08             	sub    esp,0x8
c001c427:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c42e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c432:	50                   	push   eax
c001c433:	e8 18 43 fe ff       	call   c0000750 <strcpy>
c001c438:	83 c4 10             	add    esp,0x10
c001c43b:	83 ec 08             	sub    esp,0x8
c001c43e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c442:	50                   	push   eax
c001c443:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c44a:	e8 3d fe ff ff       	call   c001c28c <FAT::fixFilepath(char*)>
c001c44f:	83 c4 10             	add    esp,0x10
c001c452:	83 ec 0c             	sub    esp,0xc
c001c455:	6a 4c                	push   0x4c
c001c457:	e8 8b d9 fe ff       	call   c0009de7 <malloc>
c001c45c:	83 c4 10             	add    esp,0x10
c001c45f:	89 c2                	mov    edx,eax
c001c461:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c468:	89 10                	mov    DWORD PTR [eax],edx
c001c46a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c471:	8b 00                	mov    eax,DWORD PTR [eax]
c001c473:	83 ec 08             	sub    esp,0x8
c001c476:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c47a:	52                   	push   edx
c001c47b:	50                   	push   eax
c001c47c:	e8 52 9a fe ff       	call   c0005ed3 <f_opendir>
c001c481:	83 c4 10             	add    esp,0x10
c001c484:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c48b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c493:	74 07                	je     c001c49c <FAT::openDir(char const*, void**)+0xa0>
c001c495:	b8 01 00 00 00       	mov    eax,0x1
c001c49a:	eb 08                	jmp    c001c4a4 <FAT::openDir(char const*, void**)+0xa8>
c001c49c:	b8 00 00 00 00       	mov    eax,0x0
c001c4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c4aa:	c3                   	ret    
c001c4ab:	90                   	nop

c001c4ac <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c4ac:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c4b2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c4ba:	75 0c                	jne    c001c4c8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c4bc:	b8 04 00 00 00       	mov    eax,0x4
c001c4c1:	e9 d2 00 00 00       	jmp    c001c598 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c4c6:	66 90                	xchg   ax,ax
c001c4c8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c4d0:	75 0a                	jne    c001c4dc <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c4d2:	b8 04 00 00 00       	mov    eax,0x4
c001c4d7:	e9 bc 00 00 00       	jmp    c001c598 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c4dc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c4e4:	75 0a                	jne    c001c4f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c4e6:	b8 04 00 00 00       	mov    eax,0x4
c001c4eb:	e9 a8 00 00 00       	jmp    c001c598 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c4f0:	83 ec 08             	sub    esp,0x8
c001c4f3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c4fa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c501:	50                   	push   eax
c001c502:	e8 49 42 fe ff       	call   c0000750 <strcpy>
c001c507:	83 c4 10             	add    esp,0x10
c001c50a:	83 ec 08             	sub    esp,0x8
c001c50d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c514:	50                   	push   eax
c001c515:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c51c:	e8 6b fd ff ff       	call   c001c28c <FAT::fixFilepath(char*)>
c001c521:	83 c4 10             	add    esp,0x10
c001c524:	83 ec 08             	sub    esp,0x8
c001c527:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c52b:	50                   	push   eax
c001c52c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c533:	50                   	push   eax
c001c534:	e8 59 9b fe ff       	call   c0006092 <f_stat>
c001c539:	83 c4 10             	add    esp,0x10
c001c53c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c543:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c54a:	85 c0                	test   eax,eax
c001c54c:	74 0a                	je     c001c558 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c54e:	83 f8 04             	cmp    eax,0x4
c001c551:	74 35                	je     c001c588 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001c553:	eb 3b                	jmp    c001c590 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001c555:	8d 76 00             	lea    esi,[esi+0x0]
c001c558:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c55c:	0f b6 c0             	movzx  eax,al
c001c55f:	83 e0 10             	and    eax,0x10
c001c562:	0f 95 c2             	setne  dl
c001c565:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c56c:	88 10                	mov    BYTE PTR [eax],dl
c001c56e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c571:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c575:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c57c:	89 01                	mov    DWORD PTR [ecx],eax
c001c57e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c581:	b8 00 00 00 00       	mov    eax,0x0
c001c586:	eb 10                	jmp    c001c598 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c588:	b8 02 00 00 00       	mov    eax,0x2
c001c58d:	eb 09                	jmp    c001c598 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c58f:	90                   	nop
c001c590:	b8 01 00 00 00       	mov    eax,0x1
c001c595:	8d 76 00             	lea    esi,[esi+0x0]
c001c598:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c59e:	c3                   	ret    
c001c59f:	90                   	nop

c001c5a0 <FAT::unlink(char const*)>:
c001c5a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c5a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c5ae:	75 08                	jne    c001c5b8 <FAT::unlink(char const*)+0x18>
c001c5b0:	b8 04 00 00 00       	mov    eax,0x4
c001c5b5:	eb 61                	jmp    c001c618 <FAT::unlink(char const*)+0x78>
c001c5b7:	90                   	nop
c001c5b8:	83 ec 08             	sub    esp,0x8
c001c5bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c5c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c5c6:	50                   	push   eax
c001c5c7:	e8 84 41 fe ff       	call   c0000750 <strcpy>
c001c5cc:	83 c4 10             	add    esp,0x10
c001c5cf:	83 ec 08             	sub    esp,0x8
c001c5d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5d6:	50                   	push   eax
c001c5d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c5de:	e8 a9 fc ff ff       	call   c001c28c <FAT::fixFilepath(char*)>
c001c5e3:	83 c4 10             	add    esp,0x10
c001c5e6:	83 ec 0c             	sub    esp,0xc
c001c5e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c5ed:	50                   	push   eax
c001c5ee:	e8 f1 9d fe ff       	call   c00063e4 <f_unlink>
c001c5f3:	83 c4 10             	add    esp,0x10
c001c5f6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c5fd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c604:	85 c0                	test   eax,eax
c001c606:	75 08                	jne    c001c610 <FAT::unlink(char const*)+0x70>
c001c608:	b8 00 00 00 00       	mov    eax,0x0
c001c60d:	eb 09                	jmp    c001c618 <FAT::unlink(char const*)+0x78>
c001c60f:	90                   	nop
c001c610:	b8 01 00 00 00       	mov    eax,0x1
c001c615:	8d 76 00             	lea    esi,[esi+0x0]
c001c618:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c61e:	c3                   	ret    
c001c61f:	90                   	nop

c001c620 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c620:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c626:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c62d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c634:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c638:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c63c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c644:	75 0a                	jne    c001c650 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c646:	b8 04 00 00 00       	mov    eax,0x4
c001c64b:	e9 30 01 00 00       	jmp    c001c780 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c650:	83 ec 08             	sub    esp,0x8
c001c653:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c65a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c65e:	50                   	push   eax
c001c65f:	e8 ec 40 fe ff       	call   c0000750 <strcpy>
c001c664:	83 c4 10             	add    esp,0x10
c001c667:	83 ec 08             	sub    esp,0x8
c001c66a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c66e:	50                   	push   eax
c001c66f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c676:	e8 11 fc ff ff       	call   c001c28c <FAT::fixFilepath(char*)>
c001c67b:	83 c4 10             	add    esp,0x10
c001c67e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c686:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c68e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c693:	83 e0 01             	and    eax,0x1
c001c696:	74 08                	je     c001c6a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c698:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c6a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6a5:	83 e0 02             	and    eax,0x2
c001c6a8:	74 0a                	je     c001c6b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c6aa:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c6b2:	66 90                	xchg   ax,ax
c001c6b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6b9:	83 e0 04             	and    eax,0x4
c001c6bc:	74 0a                	je     c001c6c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c6be:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c6c6:	66 90                	xchg   ax,ax
c001c6c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6cd:	83 e0 08             	and    eax,0x8
c001c6d0:	74 0a                	je     c001c6dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c6d2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c6da:	66 90                	xchg   ax,ax
c001c6dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c6e1:	83 e0 01             	and    eax,0x1
c001c6e4:	74 0a                	je     c001c6f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c6e6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c6ee:	66 90                	xchg   ax,ax
c001c6f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c6f5:	83 e0 02             	and    eax,0x2
c001c6f8:	74 0a                	je     c001c704 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c6fa:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c702:	66 90                	xchg   ax,ax
c001c704:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c709:	83 e0 04             	and    eax,0x4
c001c70c:	74 0a                	je     c001c718 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c70e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c716:	66 90                	xchg   ax,ax
c001c718:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c71d:	83 e0 08             	and    eax,0x8
c001c720:	74 0a                	je     c001c72c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c722:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c72a:	66 90                	xchg   ax,ax
c001c72c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c733:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c73a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c742:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c74a:	83 ec 04             	sub    esp,0x4
c001c74d:	52                   	push   edx
c001c74e:	50                   	push   eax
c001c74f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c753:	50                   	push   eax
c001c754:	e8 2d a3 fe ff       	call   c0006a86 <f_chmod>
c001c759:	83 c4 10             	add    esp,0x10
c001c75c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c763:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c76a:	85 c0                	test   eax,eax
c001c76c:	75 0a                	jne    c001c778 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c76e:	b8 00 00 00 00       	mov    eax,0x0
c001c773:	eb 0b                	jmp    c001c780 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c775:	8d 76 00             	lea    esi,[esi+0x0]
c001c778:	b8 01 00 00 00       	mov    eax,0x1
c001c77d:	8d 76 00             	lea    esi,[esi+0x0]
c001c780:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c786:	c3                   	ret    
c001c787:	90                   	nop

c001c788 <FAT::rename(char const*, char const*)>:
c001c788:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c78e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c796:	74 0c                	je     c001c7a4 <FAT::rename(char const*, char const*)+0x1c>
c001c798:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c7a0:	75 0e                	jne    c001c7b0 <FAT::rename(char const*, char const*)+0x28>
c001c7a2:	66 90                	xchg   ax,ax
c001c7a4:	b8 04 00 00 00       	mov    eax,0x4
c001c7a9:	e9 9e 00 00 00       	jmp    c001c84c <FAT::rename(char const*, char const*)+0xc4>
c001c7ae:	66 90                	xchg   ax,ax
c001c7b0:	83 ec 08             	sub    esp,0x8
c001c7b3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c7ba:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c7c1:	50                   	push   eax
c001c7c2:	e8 89 3f fe ff       	call   c0000750 <strcpy>
c001c7c7:	83 c4 10             	add    esp,0x10
c001c7ca:	83 ec 08             	sub    esp,0x8
c001c7cd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c7d4:	50                   	push   eax
c001c7d5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c7dc:	e8 ab fa ff ff       	call   c001c28c <FAT::fixFilepath(char*)>
c001c7e1:	83 c4 10             	add    esp,0x10
c001c7e4:	83 ec 08             	sub    esp,0x8
c001c7e7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c7ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c7f2:	50                   	push   eax
c001c7f3:	e8 58 3f fe ff       	call   c0000750 <strcpy>
c001c7f8:	83 c4 10             	add    esp,0x10
c001c7fb:	83 ec 08             	sub    esp,0x8
c001c7fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c802:	50                   	push   eax
c001c803:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c80a:	e8 7d fa ff ff       	call   c001c28c <FAT::fixFilepath(char*)>
c001c80f:	83 c4 10             	add    esp,0x10
c001c812:	83 ec 08             	sub    esp,0x8
c001c815:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c819:	50                   	push   eax
c001c81a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c821:	50                   	push   eax
c001c822:	e8 6c 9f fe ff       	call   c0006793 <f_rename>
c001c827:	83 c4 10             	add    esp,0x10
c001c82a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c831:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c838:	85 c0                	test   eax,eax
c001c83a:	75 08                	jne    c001c844 <FAT::rename(char const*, char const*)+0xbc>
c001c83c:	b8 00 00 00 00       	mov    eax,0x0
c001c841:	eb 09                	jmp    c001c84c <FAT::rename(char const*, char const*)+0xc4>
c001c843:	90                   	nop
c001c844:	b8 01 00 00 00       	mov    eax,0x1
c001c849:	8d 76 00             	lea    esi,[esi+0x0]
c001c84c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c852:	c3                   	ret    
c001c853:	90                   	nop

c001c854 <FAT::mkdir(char const*)>:
c001c854:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c85a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c862:	75 08                	jne    c001c86c <FAT::mkdir(char const*)+0x18>
c001c864:	b8 04 00 00 00       	mov    eax,0x4
c001c869:	eb 61                	jmp    c001c8cc <FAT::mkdir(char const*)+0x78>
c001c86b:	90                   	nop
c001c86c:	83 ec 08             	sub    esp,0x8
c001c86f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c876:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c87a:	50                   	push   eax
c001c87b:	e8 d0 3e fe ff       	call   c0000750 <strcpy>
c001c880:	83 c4 10             	add    esp,0x10
c001c883:	83 ec 08             	sub    esp,0x8
c001c886:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c88a:	50                   	push   eax
c001c88b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c892:	e8 f5 f9 ff ff       	call   c001c28c <FAT::fixFilepath(char*)>
c001c897:	83 c4 10             	add    esp,0x10
c001c89a:	83 ec 0c             	sub    esp,0xc
c001c89d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c8a1:	50                   	push   eax
c001c8a2:	e8 c0 9c fe ff       	call   c0006567 <f_mkdir>
c001c8a7:	83 c4 10             	add    esp,0x10
c001c8aa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c8b1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c8b8:	85 c0                	test   eax,eax
c001c8ba:	75 08                	jne    c001c8c4 <FAT::mkdir(char const*)+0x70>
c001c8bc:	b8 00 00 00 00       	mov    eax,0x0
c001c8c1:	eb 09                	jmp    c001c8cc <FAT::mkdir(char const*)+0x78>
c001c8c3:	90                   	nop
c001c8c4:	b8 01 00 00 00       	mov    eax,0x1
c001c8c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c8cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c8d2:	c3                   	ret    
c001c8d3:	90                   	nop

c001c8d4 <FAT::exists(char const*)>:
c001c8d4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c8da:	83 ec 08             	sub    esp,0x8
c001c8dd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c8e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c8e8:	50                   	push   eax
c001c8e9:	e8 62 3e fe ff       	call   c0000750 <strcpy>
c001c8ee:	83 c4 10             	add    esp,0x10
c001c8f1:	83 ec 08             	sub    esp,0x8
c001c8f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c8f8:	50                   	push   eax
c001c8f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c900:	e8 87 f9 ff ff       	call   c001c28c <FAT::fixFilepath(char*)>
c001c905:	83 c4 10             	add    esp,0x10
c001c908:	83 ec 08             	sub    esp,0x8
c001c90b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c912:	50                   	push   eax
c001c913:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c917:	50                   	push   eax
c001c918:	e8 75 97 fe ff       	call   c0006092 <f_stat>
c001c91d:	83 c4 10             	add    esp,0x10
c001c920:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c927:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c92e:	85 c0                	test   eax,eax
c001c930:	75 06                	jne    c001c938 <FAT::exists(char const*)+0x64>
c001c932:	b0 01                	mov    al,0x1
c001c934:	eb 06                	jmp    c001c93c <FAT::exists(char const*)+0x68>
c001c936:	66 90                	xchg   ax,ax
c001c938:	b0 00                	mov    al,0x0
c001c93a:	66 90                	xchg   ax,ax
c001c93c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c942:	c3                   	ret    
c001c943:	90                   	nop

c001c944 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c944:	b8 08 00 00 00       	mov    eax,0x8
c001c949:	c3                   	ret    

c001c94a <ISO9660::seek(void*, unsigned long long)>:
c001c94a:	53                   	push   ebx
c001c94b:	b8 04 00 00 00       	mov    eax,0x4
c001c950:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c954:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c958:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c95c:	85 d2                	test   edx,edx
c001c95e:	74 17                	je     c001c977 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c960:	89 c8                	mov    eax,ecx
c001c962:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c965:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c968:	b8 01 00 00 00       	mov    eax,0x1
c001c96d:	73 08                	jae    c001c977 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c96f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c972:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c975:	31 c0                	xor    eax,eax
c001c977:	5b                   	pop    ebx
c001c978:	c3                   	ret    
c001c979:	90                   	nop

c001c97a <ISO9660::tell(void*, unsigned long long*)>:
c001c97a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c97e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c982:	85 d2                	test   edx,edx
c001c984:	74 12                	je     c001c998 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c986:	85 c0                	test   eax,eax
c001c988:	74 0e                	je     c001c998 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c98a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c98d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c990:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c993:	89 10                	mov    DWORD PTR [eax],edx
c001c995:	31 c0                	xor    eax,eax
c001c997:	c3                   	ret    
c001c998:	b8 04 00 00 00       	mov    eax,0x4
c001c99d:	c3                   	ret    

c001c99e <ISO9660::getName()>:
c001c99e:	b8 3c 70 02 c0       	mov    eax,0xc002703c
c001c9a3:	c3                   	ret    

c001c9a4 <ISO9660::stat(void*, unsigned long long*)>:
c001c9a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9ac:	85 d2                	test   edx,edx
c001c9ae:	74 12                	je     c001c9c2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c9b0:	85 c0                	test   eax,eax
c001c9b2:	74 0e                	je     c001c9c2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c9b4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c9b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c9ba:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c9bd:	89 10                	mov    DWORD PTR [eax],edx
c001c9bf:	31 c0                	xor    eax,eax
c001c9c1:	c3                   	ret    
c001c9c2:	b8 04 00 00 00       	mov    eax,0x4
c001c9c7:	c3                   	ret    

c001c9c8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c9c8:	b8 01 00 00 00       	mov    eax,0x1
c001c9cd:	c3                   	ret    

c001c9ce <ISO9660::unlink(char const*)>:
c001c9ce:	b8 01 00 00 00       	mov    eax,0x1
c001c9d3:	c3                   	ret    

c001c9d4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c9d4:	b8 01 00 00 00       	mov    eax,0x1
c001c9d9:	c3                   	ret    

c001c9da <ISO9660::rename(char const*, char const*)>:
c001c9da:	b8 01 00 00 00       	mov    eax,0x1
c001c9df:	c3                   	ret    

c001c9e0 <ISO9660::mkdir(char const*)>:
c001c9e0:	b8 01 00 00 00       	mov    eax,0x1
c001c9e5:	c3                   	ret    

c001c9e6 <ISO9660::close(void*)>:
c001c9e6:	83 ec 0c             	sub    esp,0xc
c001c9e9:	b8 04 00 00 00       	mov    eax,0x4
c001c9ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c9f2:	85 d2                	test   edx,edx
c001c9f4:	74 0e                	je     c001ca04 <ISO9660::close(void*)+0x1e>
c001c9f6:	83 ec 0c             	sub    esp,0xc
c001c9f9:	52                   	push   edx
c001c9fa:	e8 f8 d3 fe ff       	call   c0009df7 <free>
c001c9ff:	83 c4 10             	add    esp,0x10
c001ca02:	31 c0                	xor    eax,eax
c001ca04:	83 c4 0c             	add    esp,0xc
c001ca07:	c3                   	ret    

c001ca08 <ISO9660::closeDir(void*)>:
c001ca08:	83 ec 0c             	sub    esp,0xc
c001ca0b:	b8 04 00 00 00       	mov    eax,0x4
c001ca10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca14:	85 d2                	test   edx,edx
c001ca16:	74 0e                	je     c001ca26 <ISO9660::closeDir(void*)+0x1e>
c001ca18:	83 ec 0c             	sub    esp,0xc
c001ca1b:	52                   	push   edx
c001ca1c:	e8 d6 d3 fe ff       	call   c0009df7 <free>
c001ca21:	83 c4 10             	add    esp,0x10
c001ca24:	31 c0                	xor    eax,eax
c001ca26:	83 c4 0c             	add    esp,0xc
c001ca29:	c3                   	ret    

c001ca2a <ISO9660::~ISO9660()>:
c001ca2a:	83 ec 0c             	sub    esp,0xc
c001ca2d:	ba 60 70 02 c0       	mov    edx,0xc0027060
c001ca32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca36:	89 10                	mov    DWORD PTR [eax],edx
c001ca38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca3c:	83 ec 0c             	sub    esp,0xc
c001ca3f:	50                   	push   eax
c001ca40:	e8 c9 09 ff ff       	call   c000d40e <Filesystem::~Filesystem()>
c001ca45:	83 c4 10             	add    esp,0x10
c001ca48:	90                   	nop
c001ca49:	83 c4 0c             	add    esp,0xc
c001ca4c:	c3                   	ret    
c001ca4d:	90                   	nop

c001ca4e <ISO9660::~ISO9660()>:
c001ca4e:	83 ec 0c             	sub    esp,0xc
c001ca51:	83 ec 0c             	sub    esp,0xc
c001ca54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca58:	e8 cd ff ff ff       	call   c001ca2a <ISO9660::~ISO9660()>
c001ca5d:	83 c4 10             	add    esp,0x10
c001ca60:	83 ec 08             	sub    esp,0x8
c001ca63:	6a 08                	push   0x8
c001ca65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca69:	e8 84 05 ff ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c001ca6e:	83 c4 10             	add    esp,0x10
c001ca71:	83 c4 0c             	add    esp,0xc
c001ca74:	c3                   	ret    

c001ca75 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ca75:	55                   	push   ebp
c001ca76:	31 c9                	xor    ecx,ecx
c001ca78:	57                   	push   edi
c001ca79:	56                   	push   esi
c001ca7a:	53                   	push   ebx
c001ca7b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ca7f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ca83:	89 eb                	mov    ebx,ebp
c001ca85:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ca89:	39 ce                	cmp    esi,ecx
c001ca8b:	7e 17                	jle    c001caa4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ca8d:	31 d2                	xor    edx,edx
c001ca8f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ca93:	7d 13                	jge    c001caa8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ca95:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ca99:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ca9c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ca9f:	75 0d                	jne    c001caae <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001caa1:	42                   	inc    edx
c001caa2:	eb eb                	jmp    c001ca8f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001caa4:	31 c0                	xor    eax,eax
c001caa6:	eb 0a                	jmp    c001cab2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001caa8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001caac:	eb 04                	jmp    c001cab2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001caae:	41                   	inc    ecx
c001caaf:	43                   	inc    ebx
c001cab0:	eb d7                	jmp    c001ca89 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001cab2:	5b                   	pop    ebx
c001cab3:	5e                   	pop    esi
c001cab4:	5f                   	pop    edi
c001cab5:	5d                   	pop    ebp
c001cab6:	c3                   	ret    

c001cab7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001cab7:	57                   	push   edi
c001cab8:	56                   	push   esi
c001cab9:	53                   	push   ebx
c001caba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cabe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cac2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cac6:	39 35 e0 a2 02 c0    	cmp    DWORD PTR ds:0xc002a2e0,esi
c001cacc:	75 08                	jne    c001cad6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001cace:	38 1d f4 85 02 c0    	cmp    BYTE PTR ds:0xc00285f4,bl
c001cad4:	74 4a                	je     c001cb20 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001cad6:	83 ec 0c             	sub    esp,0xc
c001cad9:	31 d2                	xor    edx,edx
c001cadb:	68 00 a3 02 c0       	push   0xc002a300
c001cae0:	0f be c3             	movsx  eax,bl
c001cae3:	6a 01                	push   0x1
c001cae5:	52                   	push   edx
c001cae6:	56                   	push   esi
c001cae7:	ff 34 85 7c 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f84]
c001caee:	e8 63 3f ff ff       	call   c0010a56 <LogicalDisk::read(unsigned long long, int, void*)>
c001caf3:	83 c4 20             	add    esp,0x20
c001caf6:	85 c0                	test   eax,eax
c001caf8:	75 0e                	jne    c001cb08 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001cafa:	89 35 e0 a2 02 c0    	mov    DWORD PTR ds:0xc002a2e0,esi
c001cb00:	88 1d f4 85 02 c0    	mov    BYTE PTR ds:0xc00285f4,bl
c001cb06:	eb 18                	jmp    c001cb20 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001cb08:	50                   	push   eax
c001cb09:	68 00 08 00 00       	push   0x800
c001cb0e:	6a 00                	push   0x0
c001cb10:	57                   	push   edi
c001cb11:	e8 7e 3b fe ff       	call   c0000694 <memset>
c001cb16:	83 c4 10             	add    esp,0x10
c001cb19:	b8 01 00 00 00       	mov    eax,0x1
c001cb1e:	eb 0e                	jmp    c001cb2e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001cb20:	be 00 a3 02 c0       	mov    esi,0xc002a300
c001cb25:	b9 00 08 00 00       	mov    ecx,0x800
c001cb2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb2c:	31 c0                	xor    eax,eax
c001cb2e:	5b                   	pop    ebx
c001cb2f:	5e                   	pop    esi
c001cb30:	5f                   	pop    edi
c001cb31:	c3                   	ret    

c001cb32 <ISO9660::tryMount(LogicalDisk*, int)>:
c001cb32:	81 ec 10 08 00 00    	sub    esp,0x810
c001cb38:	c7 05 e0 a2 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a2e0,0xdeadbeef
c001cb42:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001cb49:	83 c0 41             	add    eax,0x41
c001cb4c:	0f be c0             	movsx  eax,al
c001cb4f:	50                   	push   eax
c001cb50:	8d 44 24 08          	lea    eax,[esp+0x8]
c001cb54:	50                   	push   eax
c001cb55:	6a 10                	push   0x10
c001cb57:	e8 5b ff ff ff       	call   c001cab7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cb5c:	83 c4 10             	add    esp,0x10
c001cb5f:	31 d2                	xor    edx,edx
c001cb61:	85 c0                	test   eax,eax
c001cb63:	75 24                	jne    c001cb89 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cb65:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001cb6a:	75 1d                	jne    c001cb89 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cb6c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001cb71:	75 16                	jne    c001cb89 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cb73:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001cb78:	75 0f                	jne    c001cb89 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cb7a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001cb7f:	75 08                	jne    c001cb89 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cb81:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001cb86:	0f 94 c2             	sete   dl
c001cb89:	88 d0                	mov    al,dl
c001cb8b:	81 c4 0c 08 00 00    	add    esp,0x80c
c001cb91:	c3                   	ret    

c001cb92 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001cb92:	55                   	push   ebp
c001cb93:	57                   	push   edi
c001cb94:	56                   	push   esi
c001cb95:	53                   	push   ebx
c001cb96:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001cb9c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001cba3:	85 ed                	test   ebp,ebp
c001cba5:	0f 84 da 01 00 00    	je     c001cd85 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001cbab:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001cbb3:	0f 84 cc 01 00 00    	je     c001cd85 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001cbb9:	b8 01 00 00 00       	mov    eax,0x1
c001cbbe:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001cbc2:	0f 85 c2 01 00 00    	jne    c001cd8a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cbc8:	31 d2                	xor    edx,edx
c001cbca:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001cbd1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001cbd4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001cbd7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001cbda:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbdd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cbe1:	01 c8                	add    eax,ecx
c001cbe3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001cbe6:	11 da                	adc    edx,ebx
c001cbe8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001cbec:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001cbf0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cbf4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cbf8:	19 d7                	sbb    edi,edx
c001cbfa:	72 11                	jb     c001cc0d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001cbfc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001cbff:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001cc03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cc0b:	eb 0c                	jmp    c001cc19 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001cc0d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001cc11:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cc15:	29 ce                	sub    esi,ecx
c001cc17:	19 df                	sbb    edi,ebx
c001cc19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001cc1f:	0f a4 c2 0b          	shld   edx,eax,0xb
c001cc23:	c1 e0 0b             	shl    eax,0xb
c001cc26:	01 c8                	add    eax,ecx
c001cc28:	11 da                	adc    edx,ebx
c001cc2a:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cc31:	51                   	push   ecx
c001cc32:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cc36:	50                   	push   eax
c001cc37:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001cc3b:	53                   	push   ebx
c001cc3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cc40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc44:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cc48:	50                   	push   eax
c001cc49:	e8 69 fe ff ff       	call   c001cab7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cc4e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001cc51:	b8 00 08 00 00       	mov    eax,0x800
c001cc56:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001cc5c:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001cc60:	29 d0                	sub    eax,edx
c001cc62:	83 c4 10             	add    esp,0x10
c001cc65:	89 f9                	mov    ecx,edi
c001cc67:	39 c6                	cmp    esi,eax
c001cc69:	83 d9 00             	sbb    ecx,0x0
c001cc6c:	7d 1b                	jge    c001cc89 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001cc6e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cc73:	75 12                	jne    c001cc87 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001cc75:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cc7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cc82:	e9 fa 00 00 00       	jmp    c001cd81 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001cc87:	89 f0                	mov    eax,esi
c001cc89:	01 d3                	add    ebx,edx
c001cc8b:	31 d2                	xor    edx,edx
c001cc8d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001cc91:	39 c2                	cmp    edx,eax
c001cc93:	7d 14                	jge    c001cca9 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001cc95:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001cc9c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cca0:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001cca3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001cca6:	42                   	inc    edx
c001cca7:	eb e8                	jmp    c001cc91 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001cca9:	89 c2                	mov    edx,eax
c001ccab:	85 c0                	test   eax,eax
c001ccad:	79 02                	jns    c001ccb1 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001ccaf:	31 d2                	xor    edx,edx
c001ccb1:	01 c2                	add    edx,eax
c001ccb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001ccb6:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001ccbd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001ccc1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ccc5:	99                   	cdq    
c001ccc6:	01 c1                	add    ecx,eax
c001ccc8:	11 d3                	adc    ebx,edx
c001ccca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ccce:	29 c6                	sub    esi,eax
c001ccd0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ccd4:	19 d7                	sbb    edi,edx
c001ccd6:	89 34 24             	mov    DWORD PTR [esp],esi
c001ccd9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001ccdd:	b8 ff 07 00 00       	mov    eax,0x7ff
c001cce2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001cce5:	b8 00 00 00 00       	mov    eax,0x0
c001ccea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001ccee:	7d 43                	jge    c001cd33 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001ccf0:	52                   	push   edx
c001ccf1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ccf5:	50                   	push   eax
c001ccf6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ccfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ccfe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cd02:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cd06:	50                   	push   eax
c001cd07:	e8 ab fd ff ff       	call   c001cab7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cd0c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001cd14:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001cd19:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001cd21:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001cd29:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001cd2e:	83 c4 10             	add    esp,0x10
c001cd31:	eb aa                	jmp    c001ccdd <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001cd33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd37:	0b 04 24             	or     eax,DWORD PTR [esp]
c001cd3a:	74 2a                	je     c001cd66 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001cd3c:	50                   	push   eax
c001cd3d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cd41:	50                   	push   eax
c001cd42:	8d 74 24 28          	lea    esi,[esp+0x28]
c001cd46:	56                   	push   esi
c001cd47:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd4b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd4f:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001cd53:	51                   	push   ecx
c001cd54:	e8 5e fd ff ff       	call   c001cab7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cd59:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cd5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cd61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd63:	83 c4 10             	add    esp,0x10
c001cd66:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cd6d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cd71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cd75:	89 18                	mov    DWORD PTR [eax],ebx
c001cd77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd7b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cd7e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cd81:	31 c0                	xor    eax,eax
c001cd83:	eb 05                	jmp    c001cd8a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cd85:	b8 04 00 00 00       	mov    eax,0x4
c001cd8a:	81 c4 2c 08 00 00    	add    esp,0x82c
c001cd90:	5b                   	pop    ebx
c001cd91:	5e                   	pop    esi
c001cd92:	5f                   	pop    edi
c001cd93:	5d                   	pop    ebp
c001cd94:	c3                   	ret    
c001cd95:	90                   	nop

c001cd96 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001cd96:	55                   	push   ebp
c001cd97:	57                   	push   edi
c001cd98:	56                   	push   esi
c001cd99:	53                   	push   ebx
c001cd9a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001cda0:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001cda7:	85 ed                	test   ebp,ebp
c001cda9:	0f 84 51 02 00 00    	je     c001d000 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cdaf:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001cdb7:	0f 84 43 02 00 00    	je     c001d000 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cdbd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cdc0:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001cdc3:	75 0a                	jne    c001cdcf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001cdc5:	b8 07 00 00 00       	mov    eax,0x7
c001cdca:	e9 36 02 00 00       	jmp    c001d005 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001cdcf:	50                   	push   eax
c001cdd0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cdd4:	50                   	push   eax
c001cdd5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cddc:	53                   	push   ebx
c001cddd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cde0:	c1 e0 0b             	shl    eax,0xb
c001cde3:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001cde6:	c1 e8 0b             	shr    eax,0xb
c001cde9:	50                   	push   eax
c001cdea:	e8 c8 fc ff ff       	call   c001cab7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cdef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cdf2:	83 c4 10             	add    esp,0x10
c001cdf5:	89 c1                	mov    ecx,eax
c001cdf7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001cdfa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ce00:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001ce03:	84 db                	test   bl,bl
c001ce05:	0f 85 8b 00 00 00    	jne    c001ce96 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001ce0b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001ce11:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001ce14:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001ce1a:	29 c6                	sub    esi,eax
c001ce1c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001ce20:	89 f3                	mov    ebx,esi
c001ce22:	89 f1                	mov    ecx,esi
c001ce24:	c1 fb 1f             	sar    ebx,0x1f
c001ce27:	01 f0                	add    eax,esi
c001ce29:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001ce2c:	11 da                	adc    edx,ebx
c001ce2e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce31:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ce35:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001ce38:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001ce3b:	89 d8                	mov    eax,ebx
c001ce3d:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001ce41:	ba 00 00 00 00       	mov    edx,0x0
c001ce46:	19 f8                	sbb    eax,edi
c001ce48:	b8 00 00 00 00       	mov    eax,0x0
c001ce4d:	73 08                	jae    c001ce57 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001ce4f:	89 f0                	mov    eax,esi
c001ce51:	89 fa                	mov    edx,edi
c001ce53:	29 c8                	sub    eax,ecx
c001ce55:	19 da                	sbb    edx,ebx
c001ce57:	89 d7                	mov    edi,edx
c001ce59:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001ce5c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001ce5f:	09 c7                	or     edi,eax
c001ce61:	0f 84 5e ff ff ff    	je     c001cdc5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001ce67:	57                   	push   edi
c001ce68:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ce6c:	50                   	push   eax
c001ce6d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ce74:	53                   	push   ebx
c001ce75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce78:	c1 e0 0b             	shl    eax,0xb
c001ce7b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001ce7f:	c1 e8 0b             	shr    eax,0xb
c001ce82:	50                   	push   eax
c001ce83:	e8 2f fc ff ff       	call   c001cab7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce88:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ce8b:	83 c4 10             	add    esp,0x10
c001ce8e:	25 ff 07 00 00       	and    eax,0x7ff
c001ce93:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001ce96:	31 ff                	xor    edi,edi
c001ce98:	56                   	push   esi
c001ce99:	6a 28                	push   0x28
c001ce9b:	6a 00                	push   0x0
c001ce9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cea1:	50                   	push   eax
c001cea2:	e8 ed 37 fe ff       	call   c0000694 <memset>
c001cea7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ceaa:	25 ff 07 00 00       	and    eax,0x7ff
c001ceaf:	89 c6                	mov    esi,eax
c001ceb1:	83 c6 21             	add    esi,0x21
c001ceb4:	83 d7 00             	adc    edi,0x0
c001ceb7:	83 c4 10             	add    esp,0x10
c001ceba:	31 c9                	xor    ecx,ecx
c001cebc:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001cec3:	83 f9 28             	cmp    ecx,0x28
c001cec6:	88 04 24             	mov    BYTE PTR [esp],al
c001cec9:	0f 94 c2             	sete   dl
c001cecc:	88 d0                	mov    al,dl
c001cece:	ba ff 07 00 00       	mov    edx,0x7ff
c001ced3:	39 f2                	cmp    edx,esi
c001ced5:	ba 00 00 00 00       	mov    edx,0x0
c001ceda:	19 fa                	sbb    edx,edi
c001cedc:	0f 92 c2             	setb   dl
c001cedf:	09 c2                	or     edx,eax
c001cee1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001cee5:	0f 94 c0             	sete   al
c001cee8:	08 d0                	or     al,dl
c001ceea:	75 16                	jne    c001cf02 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001ceec:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001cef0:	74 10                	je     c001cf02 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cef2:	8a 04 24             	mov    al,BYTE PTR [esp]
c001cef5:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001cef9:	41                   	inc    ecx
c001cefa:	83 c6 01             	add    esi,0x1
c001cefd:	83 d7 00             	adc    edi,0x0
c001cf00:	eb ba                	jmp    c001cebc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001cf02:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001cf09:	83 ec 0c             	sub    esp,0xc
c001cf0c:	8d 74 24 24          	lea    esi,[esp+0x24]
c001cf10:	56                   	push   esi
c001cf11:	e8 9a 37 fe ff       	call   c00006b0 <strlen>
c001cf16:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001cf1d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cf21:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001cf29:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cf2c:	5a                   	pop    edx
c001cf2d:	25 ff 07 00 00       	and    eax,0x7ff
c001cf32:	59                   	pop    ecx
c001cf33:	01 f8                	add    eax,edi
c001cf35:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001cf3b:	83 e0 02             	and    eax,0x2
c001cf3e:	3c 01                	cmp    al,0x1
c001cf40:	19 c0                	sbb    eax,eax
c001cf42:	83 c0 02             	add    eax,0x2
c001cf45:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cf49:	56                   	push   esi
c001cf4a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cf4e:	50                   	push   eax
c001cf4f:	e8 fc 37 fe ff       	call   c0000750 <strcpy>
c001cf54:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001cf58:	83 c4 10             	add    esp,0x10
c001cf5b:	84 c0                	test   al,al
c001cf5d:	75 21                	jne    c001cf80 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001cf5f:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001cf67:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf6f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cf77:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001cf7e:	eb 28                	jmp    c001cfa8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cf80:	fe c8                	dec    al
c001cf82:	75 24                	jne    c001cfa8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cf84:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001cf8c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf94:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cf9c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001cfa3:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001cfa8:	8d 74 24 40          	lea    esi,[esp+0x40]
c001cfac:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001cfb3:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001cfba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cfbc:	0f b6 f3             	movzx  esi,bl
c001cfbf:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001cfc6:	31 db                	xor    ebx,ebx
c001cfc8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001cfce:	89 df                	mov    edi,ebx
c001cfd0:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001cfd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cfd6:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001cfd9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001cfdc:	39 c6                	cmp    esi,eax
c001cfde:	19 d7                	sbb    edi,edx
c001cfe0:	72 10                	jb     c001cff2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001cfe2:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001cfe9:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001cff0:	eb 0a                	jmp    c001cffc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001cff2:	29 f0                	sub    eax,esi
c001cff4:	19 da                	sbb    edx,ebx
c001cff6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001cff9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001cffc:	31 c0                	xor    eax,eax
c001cffe:	eb 05                	jmp    c001d005 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001d000:	b8 04 00 00 00       	mov    eax,0x4
c001d005:	81 c4 5c 09 00 00    	add    esp,0x95c
c001d00b:	5b                   	pop    ebx
c001d00c:	5e                   	pop    esi
c001d00d:	5f                   	pop    edi
c001d00e:	5d                   	pop    ebp
c001d00f:	c3                   	ret    

c001d010 <readRoot(unsigned int*, unsigned int*, char)>:
c001d010:	57                   	push   edi
c001d011:	56                   	push   esi
c001d012:	81 ec 38 08 00 00    	sub    esp,0x838
c001d018:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001d020:	50                   	push   eax
c001d021:	8d 44 24 38          	lea    eax,[esp+0x38]
c001d025:	50                   	push   eax
c001d026:	6a 10                	push   0x10
c001d028:	e8 8a fa ff ff       	call   c001cab7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d02d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001d034:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001d038:	b9 22 00 00 00       	mov    ecx,0x22
c001d03d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d03f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001d046:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d04a:	89 10                	mov    DWORD PTR [eax],edx
c001d04c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001d053:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d057:	89 10                	mov    DWORD PTR [eax],edx
c001d059:	81 c4 44 08 00 00    	add    esp,0x844
c001d05f:	b0 01                	mov    al,0x1
c001d061:	5e                   	pop    esi
c001d062:	5f                   	pop    edi
c001d063:	c3                   	ret    

c001d064 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001d064:	55                   	push   ebp
c001d065:	57                   	push   edi
c001d066:	56                   	push   esi
c001d067:	53                   	push   ebx
c001d068:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d06e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d075:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001d07c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d080:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001d084:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d088:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d08c:	75 03                	jne    c001d091 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001d08e:	83 c3 02             	add    ebx,0x2
c001d091:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001d094:	75 03                	jne    c001d099 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001d096:	43                   	inc    ebx
c001d097:	eb f8                	jmp    c001d091 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001d099:	52                   	push   edx
c001d09a:	68 00 01 00 00       	push   0x100
c001d09f:	6a 00                	push   0x0
c001d0a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d0a5:	50                   	push   eax
c001d0a6:	e8 e9 35 fe ff       	call   c0000694 <memset>
c001d0ab:	83 c4 10             	add    esp,0x10
c001d0ae:	31 d2                	xor    edx,edx
c001d0b0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001d0b3:	84 c0                	test   al,al
c001d0b5:	74 21                	je     c001d0d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001d0b7:	3c 2f                	cmp    al,0x2f
c001d0b9:	75 0b                	jne    c001d0c6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001d0bb:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001d0bf:	bd 01 00 00 00       	mov    ebp,0x1
c001d0c4:	eb 14                	jmp    c001d0da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001d0c6:	8d 48 9f             	lea    ecx,[eax-0x61]
c001d0c9:	80 f9 19             	cmp    cl,0x19
c001d0cc:	77 03                	ja     c001d0d1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d0ce:	83 e8 20             	sub    eax,0x20
c001d0d1:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001d0d5:	42                   	inc    edx
c001d0d6:	eb d8                	jmp    c001d0b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001d0d8:	31 ed                	xor    ebp,ebp
c001d0da:	83 ec 0c             	sub    esp,0xc
c001d0dd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001d0e4:	e8 fe cc fe ff       	call   c0009de7 <malloc>
c001d0e9:	89 c6                	mov    esi,eax
c001d0eb:	89 c2                	mov    edx,eax
c001d0ed:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001d0f4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001d0fa:	c1 ef 0b             	shr    edi,0xb
c001d0fd:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001d104:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001d108:	83 c4 10             	add    esp,0x10
c001d10b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001d110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d114:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001d11b:	74 29                	je     c001d146 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001d11d:	50                   	push   eax
c001d11e:	57                   	push   edi
c001d11f:	52                   	push   edx
c001d120:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d124:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001d12b:	e8 87 f9 ff ff       	call   c001cab7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d130:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d134:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001d13b:	81 c2 00 08 00 00    	add    edx,0x800
c001d141:	83 c4 10             	add    esp,0x10
c001d144:	eb ca                	jmp    c001d110 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001d146:	83 ec 0c             	sub    esp,0xc
c001d149:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001d14d:	57                   	push   edi
c001d14e:	e8 5d 35 fe ff       	call   c00006b0 <strlen>
c001d153:	50                   	push   eax
c001d154:	57                   	push   edi
c001d155:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001d15c:	56                   	push   esi
c001d15d:	e8 13 f9 ff ff       	call   c001ca75 <__memmem(unsigned char*, int, unsigned char*, int)>
c001d162:	83 c4 20             	add    esp,0x20
c001d165:	85 c0                	test   eax,eax
c001d167:	75 13                	jne    c001d17c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001d169:	83 ec 0c             	sub    esp,0xc
c001d16c:	56                   	push   esi
c001d16d:	e8 85 cc fe ff       	call   c0009df7 <free>
c001d172:	83 c4 10             	add    esp,0x10
c001d175:	31 c0                	xor    eax,eax
c001d177:	e9 b3 00 00 00       	jmp    c001d22f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d17c:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001d180:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001d184:	c1 e7 08             	shl    edi,0x8
c001d187:	c1 e2 10             	shl    edx,0x10
c001d18a:	09 d7                	or     edi,edx
c001d18c:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001d190:	09 d7                	or     edi,edx
c001d192:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001d196:	c1 e2 18             	shl    edx,0x18
c001d199:	09 d7                	or     edi,edx
c001d19b:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001d19f:	89 d1                	mov    ecx,edx
c001d1a1:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001d1a5:	c1 e1 08             	shl    ecx,0x8
c001d1a8:	c1 e2 10             	shl    edx,0x10
c001d1ab:	09 ca                	or     edx,ecx
c001d1ad:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001d1b1:	09 ca                	or     edx,ecx
c001d1b3:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001d1b7:	c1 e1 18             	shl    ecx,0x18
c001d1ba:	09 ca                	or     edx,ecx
c001d1bc:	89 e9                	mov    ecx,ebp
c001d1be:	84 c9                	test   cl,cl
c001d1c0:	74 3c                	je     c001d1fe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001d1c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d1c6:	83 ec 0c             	sub    esp,0xc
c001d1c9:	56                   	push   esi
c001d1ca:	e8 28 cc fe ff       	call   c0009df7 <free>
c001d1cf:	83 c4 0c             	add    esp,0xc
c001d1d2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d1d9:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d1de:	50                   	push   eax
c001d1df:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d1e6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d1ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1f1:	52                   	push   edx
c001d1f2:	57                   	push   edi
c001d1f3:	53                   	push   ebx
c001d1f4:	e8 6b fe ff ff       	call   c001d064 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d1f9:	83 c4 20             	add    esp,0x20
c001d1fc:	eb 31                	jmp    c001d22f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d1fe:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001d201:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001d208:	d0 e8                	shr    al,1
c001d20a:	89 3b                	mov    DWORD PTR [ebx],edi
c001d20c:	83 e0 01             	and    eax,0x1
c001d20f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d216:	83 ec 0c             	sub    esp,0xc
c001d219:	89 13                	mov    DWORD PTR [ebx],edx
c001d21b:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001d222:	89 03                	mov    DWORD PTR [ebx],eax
c001d224:	56                   	push   esi
c001d225:	e8 cd cb fe ff       	call   c0009df7 <free>
c001d22a:	83 c4 10             	add    esp,0x10
c001d22d:	b0 01                	mov    al,0x1
c001d22f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d235:	5b                   	pop    ebx
c001d236:	5e                   	pop    esi
c001d237:	5f                   	pop    edi
c001d238:	5d                   	pop    ebp
c001d239:	c3                   	ret    

c001d23a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001d23a:	55                   	push   ebp
c001d23b:	57                   	push   edi
c001d23c:	56                   	push   esi
c001d23d:	53                   	push   ebx
c001d23e:	83 ec 20             	sub    esp,0x20
c001d241:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d245:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d249:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d24d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d255:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d25d:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001d262:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001d268:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001d26e:	57                   	push   edi
c001d26f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d273:	50                   	push   eax
c001d274:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d278:	50                   	push   eax
c001d279:	e8 92 fd ff ff       	call   c001d010 <readRoot(unsigned int*, unsigned int*, char)>
c001d27e:	5a                   	pop    edx
c001d27f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d283:	e8 28 34 fe ff       	call   c00006b0 <strlen>
c001d288:	83 c4 10             	add    esp,0x10
c001d28b:	83 f8 03             	cmp    eax,0x3
c001d28e:	77 17                	ja     c001d2a7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d290:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d294:	89 03                	mov    DWORD PTR [ebx],eax
c001d296:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d29a:	89 06                	mov    DWORD PTR [esi],eax
c001d29c:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001d2a3:	b0 01                	mov    al,0x1
c001d2a5:	eb 19                	jmp    c001d2c0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001d2a7:	50                   	push   eax
c001d2a8:	55                   	push   ebp
c001d2a9:	57                   	push   edi
c001d2aa:	56                   	push   esi
c001d2ab:	53                   	push   ebx
c001d2ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2b4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d2b8:	e8 a7 fd ff ff       	call   c001d064 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d2bd:	83 c4 20             	add    esp,0x20
c001d2c0:	83 c4 1c             	add    esp,0x1c
c001d2c3:	5b                   	pop    ebx
c001d2c4:	5e                   	pop    esi
c001d2c5:	5f                   	pop    edi
c001d2c6:	5d                   	pop    ebp
c001d2c7:	c3                   	ret    

c001d2c8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d2c8:	57                   	push   edi
c001d2c9:	56                   	push   esi
c001d2ca:	53                   	push   ebx
c001d2cb:	83 ec 10             	sub    esp,0x10
c001d2ce:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d2d2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d2d6:	85 ff                	test   edi,edi
c001d2d8:	0f 84 8b 00 00 00    	je     c001d369 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d2de:	85 f6                	test   esi,esi
c001d2e0:	0f 84 83 00 00 00    	je     c001d369 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d2e6:	b8 03 00 00 00       	mov    eax,0x3
c001d2eb:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001d2f0:	75 7c                	jne    c001d36e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d2f2:	83 ec 0c             	sub    esp,0xc
c001d2f5:	6a 1c                	push   0x1c
c001d2f7:	e8 eb ca fe ff       	call   c0009de7 <malloc>
c001d2fc:	89 07                	mov    DWORD PTR [edi],eax
c001d2fe:	89 c3                	mov    ebx,eax
c001d300:	58                   	pop    eax
c001d301:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d305:	50                   	push   eax
c001d306:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d309:	50                   	push   eax
c001d30a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d30e:	50                   	push   eax
c001d30f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d313:	50                   	push   eax
c001d314:	56                   	push   esi
c001d315:	e8 20 ff ff ff       	call   c001d23a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d31a:	83 c4 20             	add    esp,0x20
c001d31d:	84 c0                	test   al,al
c001d31f:	74 07                	je     c001d328 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001d321:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d326:	74 0b                	je     c001d333 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001d328:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d32c:	b8 01 00 00 00       	mov    eax,0x1
c001d331:	eb 3b                	jmp    c001d36e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d333:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d337:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d33b:	89 03                	mov    DWORD PTR [ebx],eax
c001d33d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d344:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d348:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d34f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d356:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d359:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d360:	8a 06                	mov    al,BYTE PTR [esi]
c001d362:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d365:	31 c0                	xor    eax,eax
c001d367:	eb 05                	jmp    c001d36e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d369:	b8 04 00 00 00       	mov    eax,0x4
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	5b                   	pop    ebx
c001d372:	5e                   	pop    esi
c001d373:	5f                   	pop    edi
c001d374:	c3                   	ret    
c001d375:	90                   	nop

c001d376 <ISO9660::exists(char const*)>:
c001d376:	83 ec 28             	sub    esp,0x28
c001d379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d37d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001d381:	52                   	push   edx
c001d382:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001d385:	52                   	push   edx
c001d386:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d38a:	52                   	push   edx
c001d38b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d38f:	52                   	push   edx
c001d390:	50                   	push   eax
c001d391:	e8 a4 fe ff ff       	call   c001d23a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d396:	83 c4 3c             	add    esp,0x3c
c001d399:	c3                   	ret    

c001d39a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d39a:	56                   	push   esi
c001d39b:	53                   	push   ebx
c001d39c:	83 ec 14             	sub    esp,0x14
c001d39f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d3a3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d3a7:	85 db                	test   ebx,ebx
c001d3a9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d3ad:	0f 94 c2             	sete   dl
c001d3b0:	85 f6                	test   esi,esi
c001d3b2:	0f 94 c0             	sete   al
c001d3b5:	08 c2                	or     dl,al
c001d3b7:	75 68                	jne    c001d421 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d3b9:	85 c9                	test   ecx,ecx
c001d3bb:	74 64                	je     c001d421 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d3bd:	83 ec 0c             	sub    esp,0xc
c001d3c0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d3c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d3c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d3cd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d3d4:	50                   	push   eax
c001d3d5:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001d3d8:	50                   	push   eax
c001d3d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3dd:	50                   	push   eax
c001d3de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3e2:	50                   	push   eax
c001d3e3:	51                   	push   ecx
c001d3e4:	e8 51 fe ff ff       	call   c001d23a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d3e9:	83 c4 20             	add    esp,0x20
c001d3ec:	ba 01 00 00 00       	mov    edx,0x1
c001d3f1:	84 c0                	test   al,al
c001d3f3:	74 31                	je     c001d426 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d3f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3f9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d400:	89 03                	mov    DWORD PTR [ebx],eax
c001d402:	ba 00 00 00 00       	mov    edx,0x0
c001d407:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d40b:	85 c0                	test   eax,eax
c001d40d:	0f 95 06             	setne  BYTE PTR [esi]
c001d410:	74 14                	je     c001d426 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d412:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d418:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d41f:	eb 05                	jmp    c001d426 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d421:	ba 04 00 00 00       	mov    edx,0x4
c001d426:	83 c4 14             	add    esp,0x14
c001d429:	89 d0                	mov    eax,edx
c001d42b:	5b                   	pop    ebx
c001d42c:	5e                   	pop    esi
c001d42d:	c3                   	ret    

c001d42e <ISO9660::openDir(char const*, void**)>:
c001d42e:	57                   	push   edi
c001d42f:	56                   	push   esi
c001d430:	53                   	push   ebx
c001d431:	83 ec 10             	sub    esp,0x10
c001d434:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d438:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d43c:	85 ff                	test   edi,edi
c001d43e:	74 7b                	je     c001d4bb <ISO9660::openDir(char const*, void**)+0x8d>
c001d440:	85 f6                	test   esi,esi
c001d442:	74 77                	je     c001d4bb <ISO9660::openDir(char const*, void**)+0x8d>
c001d444:	83 ec 0c             	sub    esp,0xc
c001d447:	6a 1c                	push   0x1c
c001d449:	e8 99 c9 fe ff       	call   c0009de7 <malloc>
c001d44e:	89 07                	mov    DWORD PTR [edi],eax
c001d450:	89 c3                	mov    ebx,eax
c001d452:	58                   	pop    eax
c001d453:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d457:	50                   	push   eax
c001d458:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d45b:	50                   	push   eax
c001d45c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d460:	50                   	push   eax
c001d461:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d465:	50                   	push   eax
c001d466:	56                   	push   esi
c001d467:	e8 ce fd ff ff       	call   c001d23a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d46c:	83 c4 20             	add    esp,0x20
c001d46f:	84 c0                	test   al,al
c001d471:	74 07                	je     c001d47a <ISO9660::openDir(char const*, void**)+0x4c>
c001d473:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d478:	75 0b                	jne    c001d485 <ISO9660::openDir(char const*, void**)+0x57>
c001d47a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d47e:	b8 01 00 00 00       	mov    eax,0x1
c001d483:	eb 3b                	jmp    c001d4c0 <ISO9660::openDir(char const*, void**)+0x92>
c001d485:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d489:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d48d:	89 03                	mov    DWORD PTR [ebx],eax
c001d48f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d496:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d49a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d4a1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d4a8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d4ab:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d4b2:	8a 06                	mov    al,BYTE PTR [esi]
c001d4b4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d4b7:	31 c0                	xor    eax,eax
c001d4b9:	eb 05                	jmp    c001d4c0 <ISO9660::openDir(char const*, void**)+0x92>
c001d4bb:	b8 04 00 00 00       	mov    eax,0x4
c001d4c0:	83 c4 10             	add    esp,0x10
c001d4c3:	5b                   	pop    ebx
c001d4c4:	5e                   	pop    esi
c001d4c5:	5f                   	pop    edi
c001d4c6:	c3                   	ret    
c001d4c7:	90                   	nop

c001d4c8 <ISO9660::ISO9660()>:
c001d4c8:	83 ec 0c             	sub    esp,0xc
c001d4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4cf:	83 ec 0c             	sub    esp,0xc
c001d4d2:	50                   	push   eax
c001d4d3:	e8 12 ff fe ff       	call   c000d3ea <Filesystem::Filesystem()>
c001d4d8:	83 c4 10             	add    esp,0x10
c001d4db:	ba 60 70 02 c0       	mov    edx,0xc0027060
c001d4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4e4:	89 10                	mov    DWORD PTR [eax],edx
c001d4e6:	90                   	nop
c001d4e7:	83 c4 0c             	add    esp,0xc
c001d4ea:	c3                   	ret    
c001d4eb:	90                   	nop

c001d4ec <SoundCard::beginPlayback()>:
c001d4ec:	c7 44 24 04 c0 70 02 c0 	mov    DWORD PTR [esp+0x4],0xc00270c0
c001d4f4:	e9 bc 7c ff ff       	jmp    c00151b5 <Krnl::panic(char const*)>
c001d4f9:	90                   	nop

c001d4fa <SoundCard::stopPlayback()>:
c001d4fa:	c7 44 24 04 f4 70 02 c0 	mov    DWORD PTR [esp+0x4],0xc00270f4
c001d502:	e9 ae 7c ff ff       	jmp    c00151b5 <Krnl::panic(char const*)>
c001d507:	90                   	nop

c001d508 <SoundCard::SoundCard(char const*)>:
c001d508:	83 ec 1c             	sub    esp,0x1c
c001d50b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d50f:	83 ec 08             	sub    esp,0x8
c001d512:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d516:	50                   	push   eax
c001d517:	e8 2e 13 ff ff       	call   c000e84a <Device::Device(char const*)>
c001d51c:	83 c4 10             	add    esp,0x10
c001d51f:	ba 8c 71 02 c0       	mov    edx,0xc002718c
c001d524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d528:	89 10                	mov    DWORD PTR [eax],edx
c001d52a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d52e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d539:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d547:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d555:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d55f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d563:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d56d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d575:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d57a:	7f 19                	jg     c001d595 <SoundCard::SoundCard(char const*)+0x8d>
c001d57c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d580:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d584:	83 c2 54             	add    edx,0x54
c001d587:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d58f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d593:	eb e0                	jmp    c001d575 <SoundCard::SoundCard(char const*)+0x6d>
c001d595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d599:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d5a0:	90                   	nop
c001d5a1:	83 c4 1c             	add    esp,0x1c
c001d5a4:	c3                   	ret    
c001d5a5:	90                   	nop

c001d5a6 <SoundCard::~SoundCard()>:
c001d5a6:	83 ec 0c             	sub    esp,0xc
c001d5a9:	ba 8c 71 02 c0       	mov    edx,0xc002718c
c001d5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b2:	89 10                	mov    DWORD PTR [eax],edx
c001d5b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b8:	83 ec 0c             	sub    esp,0xc
c001d5bb:	50                   	push   eax
c001d5bc:	e8 53 0f ff ff       	call   c000e514 <Device::~Device()>
c001d5c1:	83 c4 10             	add    esp,0x10
c001d5c4:	90                   	nop
c001d5c5:	83 c4 0c             	add    esp,0xc
c001d5c8:	c3                   	ret    
c001d5c9:	90                   	nop

c001d5ca <SoundCard::~SoundCard()>:
c001d5ca:	83 ec 0c             	sub    esp,0xc
c001d5cd:	83 ec 0c             	sub    esp,0xc
c001d5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5d4:	e8 cd ff ff ff       	call   c001d5a6 <SoundCard::~SoundCard()>
c001d5d9:	83 c4 10             	add    esp,0x10
c001d5dc:	83 ec 08             	sub    esp,0x8
c001d5df:	68 e8 01 00 00       	push   0x1e8
c001d5e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5e8:	e8 05 fa fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c001d5ed:	83 c4 10             	add    esp,0x10
c001d5f0:	83 c4 0c             	add    esp,0xc
c001d5f3:	c3                   	ret    

c001d5f4 <SoundCard::configureRates(int, int, int)>:
c001d5f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5f8:	31 c0                	xor    eax,eax
c001d5fa:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d601:	75 20                	jne    c001d623 <SoundCard::configureRates(int, int, int)+0x2f>
c001d603:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d607:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d60d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d611:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d61b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d621:	b0 01                	mov    al,0x1
c001d623:	c3                   	ret    

c001d624 <SoundCard::getSamples16(int, short*)>:
c001d624:	55                   	push   ebp
c001d625:	57                   	push   edi
c001d626:	31 ff                	xor    edi,edi
c001d628:	56                   	push   esi
c001d629:	53                   	push   ebx
c001d62a:	31 db                	xor    ebx,ebx
c001d62c:	83 ec 18             	sub    esp,0x18
c001d62f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d633:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d637:	68 27 71 02 c0       	push   0xc0027127
c001d63c:	e8 92 fa fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001d641:	83 c4 0c             	add    esp,0xc
c001d644:	8d 04 36             	lea    eax,[esi+esi*1]
c001d647:	50                   	push   eax
c001d648:	6a 00                	push   0x0
c001d64a:	55                   	push   ebp
c001d64b:	e8 44 30 fe ff       	call   c0000694 <memset>
c001d650:	83 c4 10             	add    esp,0x10
c001d653:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d657:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d65e:	85 c0                	test   eax,eax
c001d660:	74 1b                	je     c001d67d <SoundCard::getSamples16(int, short*)+0x59>
c001d662:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d666:	75 15                	jne    c001d67d <SoundCard::getSamples16(int, short*)+0x59>
c001d668:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d66c:	55                   	push   ebp
c001d66d:	56                   	push   esi
c001d66e:	50                   	push   eax
c001d66f:	e8 58 03 00 00       	call   c001d9cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d674:	83 c4 10             	add    esp,0x10
c001d677:	39 c7                	cmp    edi,eax
c001d679:	7d 02                	jge    c001d67d <SoundCard::getSamples16(int, short*)+0x59>
c001d67b:	89 c7                	mov    edi,eax
c001d67d:	43                   	inc    ebx
c001d67e:	83 fb 20             	cmp    ebx,0x20
c001d681:	75 d0                	jne    c001d653 <SoundCard::getSamples16(int, short*)+0x2f>
c001d683:	83 c4 0c             	add    esp,0xc
c001d686:	89 f8                	mov    eax,edi
c001d688:	5b                   	pop    ebx
c001d689:	5e                   	pop    esi
c001d68a:	5f                   	pop    edi
c001d68b:	5d                   	pop    ebp
c001d68c:	c3                   	ret    
c001d68d:	90                   	nop

c001d68e <SoundCard::getSamples32(int, int*)>:
c001d68e:	55                   	push   ebp
c001d68f:	57                   	push   edi
c001d690:	31 ff                	xor    edi,edi
c001d692:	56                   	push   esi
c001d693:	31 f6                	xor    esi,esi
c001d695:	53                   	push   ebx
c001d696:	83 ec 10             	sub    esp,0x10
c001d699:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d69d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d6a1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d6a5:	c1 e0 02             	shl    eax,0x2
c001d6a8:	50                   	push   eax
c001d6a9:	6a 00                	push   0x0
c001d6ab:	55                   	push   ebp
c001d6ac:	e8 e3 2f fe ff       	call   c0000694 <memset>
c001d6b1:	83 c4 10             	add    esp,0x10
c001d6b4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d6bb:	85 c0                	test   eax,eax
c001d6bd:	74 1b                	je     c001d6da <SoundCard::getSamples32(int, int*)+0x4c>
c001d6bf:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d6c3:	75 15                	jne    c001d6da <SoundCard::getSamples32(int, int*)+0x4c>
c001d6c5:	53                   	push   ebx
c001d6c6:	55                   	push   ebp
c001d6c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6cb:	50                   	push   eax
c001d6cc:	e8 f7 03 00 00       	call   c001dac8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d6d1:	83 c4 10             	add    esp,0x10
c001d6d4:	39 c6                	cmp    esi,eax
c001d6d6:	7d 02                	jge    c001d6da <SoundCard::getSamples32(int, int*)+0x4c>
c001d6d8:	89 c6                	mov    esi,eax
c001d6da:	47                   	inc    edi
c001d6db:	83 ff 20             	cmp    edi,0x20
c001d6de:	75 d4                	jne    c001d6b4 <SoundCard::getSamples32(int, int*)+0x26>
c001d6e0:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d6e6:	85 f6                	test   esi,esi
c001d6e8:	75 0f                	jne    c001d6f9 <SoundCard::getSamples32(int, int*)+0x6b>
c001d6ea:	84 c0                	test   al,al
c001d6ec:	74 1b                	je     c001d709 <SoundCard::getSamples32(int, int*)+0x7b>
c001d6ee:	83 ec 0c             	sub    esp,0xc
c001d6f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d6f3:	53                   	push   ebx
c001d6f4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d6f7:	eb 0d                	jmp    c001d706 <SoundCard::getSamples32(int, int*)+0x78>
c001d6f9:	84 c0                	test   al,al
c001d6fb:	75 0c                	jne    c001d709 <SoundCard::getSamples32(int, int*)+0x7b>
c001d6fd:	83 ec 0c             	sub    esp,0xc
c001d700:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d702:	53                   	push   ebx
c001d703:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d706:	83 c4 10             	add    esp,0x10
c001d709:	83 c4 0c             	add    esp,0xc
c001d70c:	89 f0                	mov    eax,esi
c001d70e:	5b                   	pop    ebx
c001d70f:	5e                   	pop    esi
c001d710:	5f                   	pop    edi
c001d711:	5d                   	pop    ebp
c001d712:	c3                   	ret    
c001d713:	90                   	nop

c001d714 <SoundCard::addChannel(SoundPort*)>:
c001d714:	56                   	push   esi
c001d715:	53                   	push   ebx
c001d716:	53                   	push   ebx
c001d717:	31 db                	xor    ebx,ebx
c001d719:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d71d:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d725:	74 27                	je     c001d74e <SoundCard::addChannel(SoundPort*)+0x3a>
c001d727:	43                   	inc    ebx
c001d728:	83 fb 20             	cmp    ebx,0x20
c001d72b:	75 f0                	jne    c001d71d <SoundCard::addChannel(SoundPort*)+0x9>
c001d72d:	83 ec 0c             	sub    esp,0xc
c001d730:	83 cb ff             	or     ebx,0xffffffff
c001d733:	68 4d 71 02 c0       	push   0xc002714d
c001d738:	e8 96 f9 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001d73d:	c7 04 24 46 71 02 c0 	mov    DWORD PTR [esp],0xc0027146
c001d744:	e8 6c 7a ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001d749:	83 c4 10             	add    esp,0x10
c001d74c:	eb 1b                	jmp    c001d769 <SoundCard::addChannel(SoundPort*)+0x55>
c001d74e:	51                   	push   ecx
c001d74f:	51                   	push   ecx
c001d750:	53                   	push   ebx
c001d751:	68 65 71 02 c0       	push   0xc0027165
c001d756:	e8 78 f9 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001d75b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d75f:	83 c4 10             	add    esp,0x10
c001d762:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d769:	89 d8                	mov    eax,ebx
c001d76b:	5a                   	pop    edx
c001d76c:	5b                   	pop    ebx
c001d76d:	5e                   	pop    esi
c001d76e:	c3                   	ret    
c001d76f:	90                   	nop

c001d770 <SoundCard::removeChannel(int)>:
c001d770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d774:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d778:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d783:	c3                   	ret    

c001d784 <SoundPort::SoundPort(int, int, int, int)>:
c001d784:	83 ec 0c             	sub    esp,0xc
c001d787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d78b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d796:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d79e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d7a2:	89 10                	mov    DWORD PTR [eax],edx
c001d7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d7ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7b7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d7ba:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d7bf:	75 13                	jne    c001d7d4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7c7:	05 a0 0f 00 00       	add    eax,0xfa0
c001d7cc:	01 c0                	add    eax,eax
c001d7ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d7d2:	66 90                	xchg   ax,ax
c001d7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7d8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d7dc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7e3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d7f1:	c1 e0 02             	shl    eax,0x2
c001d7f4:	83 ec 0c             	sub    esp,0xc
c001d7f7:	50                   	push   eax
c001d7f8:	e8 ea c5 fe ff       	call   c0009de7 <malloc>
c001d7fd:	83 c4 10             	add    esp,0x10
c001d800:	89 c2                	mov    edx,eax
c001d802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d806:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d809:	90                   	nop
c001d80a:	83 c4 0c             	add    esp,0xc
c001d80d:	c3                   	ret    
c001d80e:	66 90                	xchg   ax,ax

c001d810 <SoundPort::~SoundPort()>:
c001d810:	83 ec 0c             	sub    esp,0xc
c001d813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d817:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d81a:	85 c0                	test   eax,eax
c001d81c:	74 1e                	je     c001d83c <SoundPort::~SoundPort()+0x2c>
c001d81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d822:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d825:	83 ec 0c             	sub    esp,0xc
c001d828:	50                   	push   eax
c001d829:	e8 c9 c5 fe ff       	call   c0009df7 <free>
c001d82e:	83 c4 10             	add    esp,0x10
c001d831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d835:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d83c:	90                   	nop
c001d83d:	83 c4 0c             	add    esp,0xc
c001d840:	c3                   	ret    
c001d841:	90                   	nop
c001d842:	66 90                	xchg   ax,ax

c001d844 <SoundPort::unpause()>:
c001d844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d848:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d84c:	c3                   	ret    
c001d84d:	90                   	nop
c001d84e:	66 90                	xchg   ax,ax

c001d850 <SoundPort::pause()>:
c001d850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d854:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d858:	c3                   	ret    
c001d859:	90                   	nop
c001d85a:	66 90                	xchg   ax,ax

c001d85c <SoundPort::getBufferUsed()>:
c001d85c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d860:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d863:	c3                   	ret    

c001d864 <SoundPort::getBufferSize()>:
c001d864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d868:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d86b:	c3                   	ret    

c001d86c <SoundPort::buffer16(short*, int)>:
c001d86c:	55                   	push   ebp
c001d86d:	57                   	push   edi
c001d86e:	56                   	push   esi
c001d86f:	53                   	push   ebx
c001d870:	83 ec 1c             	sub    esp,0x1c
c001d873:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d877:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d87b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d87e:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d881:	0f 84 85 00 00 00    	je     c001d90c <SoundPort::buffer16(short*, int)+0xa0>
c001d887:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d88b:	85 c9                	test   ecx,ecx
c001d88d:	7e 7d                	jle    c001d90c <SoundPort::buffer16(short*, int)+0xa0>
c001d88f:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d893:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d896:	c1 e1 0f             	shl    ecx,0xf
c001d899:	8d 70 01             	lea    esi,[eax+0x1]
c001d89c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d89f:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d8a2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d8a5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d8a8:	74 6e                	je     c001d918 <SoundPort::buffer16(short*, int)+0xac>
c001d8aa:	31 f6                	xor    esi,esi
c001d8ac:	eb 22                	jmp    c001d8d0 <SoundPort::buffer16(short*, int)+0x64>
c001d8ae:	66 90                	xchg   ax,ax
c001d8b0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d8b5:	8d 79 01             	lea    edi,[ecx+0x1]
c001d8b8:	c1 e3 0f             	shl    ebx,0xf
c001d8bb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d8be:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d8c1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d8c4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d8c7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d8ca:	74 1c                	je     c001d8e8 <SoundPort::buffer16(short*, int)+0x7c>
c001d8cc:	89 c6                	mov    esi,eax
c001d8ce:	66 90                	xchg   ax,ax
c001d8d0:	8d 46 01             	lea    eax,[esi+0x1]
c001d8d3:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d8d7:	75 d7                	jne    c001d8b0 <SoundPort::buffer16(short*, int)+0x44>
c001d8d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d8dd:	83 c4 1c             	add    esp,0x1c
c001d8e0:	5b                   	pop    ebx
c001d8e1:	5e                   	pop    esi
c001d8e2:	5f                   	pop    edi
c001d8e3:	5d                   	pop    ebp
c001d8e4:	c3                   	ret    
c001d8e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d8e8:	8d 46 02             	lea    eax,[esi+0x2]
c001d8eb:	90                   	nop
c001d8ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d8f0:	83 ec 0c             	sub    esp,0xc
c001d8f3:	68 b8 71 02 c0       	push   0xc00271b8
c001d8f8:	e8 d6 f7 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001d8fd:	83 c4 10             	add    esp,0x10
c001d900:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d904:	83 c4 1c             	add    esp,0x1c
c001d907:	5b                   	pop    ebx
c001d908:	5e                   	pop    esi
c001d909:	5f                   	pop    edi
c001d90a:	5d                   	pop    ebp
c001d90b:	c3                   	ret    
c001d90c:	83 c4 1c             	add    esp,0x1c
c001d90f:	31 c0                	xor    eax,eax
c001d911:	5b                   	pop    ebx
c001d912:	5e                   	pop    esi
c001d913:	5f                   	pop    edi
c001d914:	5d                   	pop    ebp
c001d915:	c3                   	ret    
c001d916:	66 90                	xchg   ax,ax
c001d918:	b8 01 00 00 00       	mov    eax,0x1
c001d91d:	eb cd                	jmp    c001d8ec <SoundPort::buffer16(short*, int)+0x80>
c001d91f:	90                   	nop

c001d920 <SoundPort::buffer32(int*, int)>:
c001d920:	55                   	push   ebp
c001d921:	57                   	push   edi
c001d922:	56                   	push   esi
c001d923:	53                   	push   ebx
c001d924:	83 ec 1c             	sub    esp,0x1c
c001d927:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d92b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d92f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d932:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d93a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d93d:	74 79                	je     c001d9b8 <SoundPort::buffer32(int*, int)+0x98>
c001d93f:	85 c0                	test   eax,eax
c001d941:	7e 75                	jle    c001d9b8 <SoundPort::buffer32(int*, int)+0x98>
c001d943:	8d 71 01             	lea    esi,[ecx+0x1]
c001d946:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d949:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d94c:	8b 37                	mov    esi,DWORD PTR [edi]
c001d94e:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d951:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d954:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d957:	74 6b                	je     c001d9c4 <SoundPort::buffer32(int*, int)+0xa4>
c001d959:	31 f6                	xor    esi,esi
c001d95b:	eb 1f                	jmp    c001d97c <SoundPort::buffer32(int*, int)+0x5c>
c001d95d:	8d 76 00             	lea    esi,[esi+0x0]
c001d960:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d963:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d966:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d969:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d96c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d970:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d973:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d976:	74 1c                	je     c001d994 <SoundPort::buffer32(int*, int)+0x74>
c001d978:	89 de                	mov    esi,ebx
c001d97a:	66 90                	xchg   ax,ax
c001d97c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d97f:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d983:	75 db                	jne    c001d960 <SoundPort::buffer32(int*, int)+0x40>
c001d985:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d989:	83 c4 1c             	add    esp,0x1c
c001d98c:	5b                   	pop    ebx
c001d98d:	5e                   	pop    esi
c001d98e:	5f                   	pop    edi
c001d98f:	5d                   	pop    ebp
c001d990:	c3                   	ret    
c001d991:	8d 76 00             	lea    esi,[esi+0x0]
c001d994:	8d 46 02             	lea    eax,[esi+0x2]
c001d997:	90                   	nop
c001d998:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d99c:	83 ec 0c             	sub    esp,0xc
c001d99f:	68 d3 71 02 c0       	push   0xc00271d3
c001d9a4:	e8 2a f7 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001d9a9:	83 c4 10             	add    esp,0x10
c001d9ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9b0:	83 c4 1c             	add    esp,0x1c
c001d9b3:	5b                   	pop    ebx
c001d9b4:	5e                   	pop    esi
c001d9b5:	5f                   	pop    edi
c001d9b6:	5d                   	pop    ebp
c001d9b7:	c3                   	ret    
c001d9b8:	83 c4 1c             	add    esp,0x1c
c001d9bb:	31 c0                	xor    eax,eax
c001d9bd:	5b                   	pop    ebx
c001d9be:	5e                   	pop    esi
c001d9bf:	5f                   	pop    edi
c001d9c0:	5d                   	pop    ebp
c001d9c1:	c3                   	ret    
c001d9c2:	66 90                	xchg   ax,ax
c001d9c4:	b8 01 00 00 00       	mov    eax,0x1
c001d9c9:	eb cd                	jmp    c001d998 <SoundPort::buffer32(int*, int)+0x78>
c001d9cb:	90                   	nop

c001d9cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d9cc:	57                   	push   edi
c001d9cd:	56                   	push   esi
c001d9ce:	53                   	push   ebx
c001d9cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9d3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d9d7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d9dd:	39 03                	cmp    DWORD PTR [ebx],eax
c001d9df:	74 13                	je     c001d9f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d9e1:	83 ec 0c             	sub    esp,0xc
c001d9e4:	68 28 72 02 c0       	push   0xc0027228
c001d9e9:	e8 c7 77 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001d9ee:	83 c4 10             	add    esp,0x10
c001d9f1:	8d 76 00             	lea    esi,[esi+0x0]
c001d9f4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d9fa:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d9fd:	74 11                	je     c001da10 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d9ff:	83 ec 0c             	sub    esp,0xc
c001da02:	68 ee 71 02 c0       	push   0xc00271ee
c001da07:	e8 a9 77 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001da0c:	83 c4 10             	add    esp,0x10
c001da0f:	90                   	nop
c001da10:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001da16:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001da19:	74 11                	je     c001da2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001da1b:	83 ec 0c             	sub    esp,0xc
c001da1e:	68 ee 71 02 c0       	push   0xc00271ee
c001da23:	e8 8d 77 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001da28:	83 c4 10             	add    esp,0x10
c001da2b:	90                   	nop
c001da2c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001da2f:	89 c6                	mov    esi,eax
c001da31:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001da35:	7e 05                	jle    c001da3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001da37:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da3b:	90                   	nop
c001da3c:	85 f6                	test   esi,esi
c001da3e:	7e 30                	jle    c001da70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001da40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001da44:	8d 3c 36             	lea    edi,[esi+esi*1]
c001da47:	31 c9                	xor    ecx,ecx
c001da49:	01 d7                	add    edi,edx
c001da4b:	90                   	nop
c001da4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001da4f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001da52:	85 c0                	test   eax,eax
c001da54:	79 06                	jns    c001da5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001da56:	05 ff 7f 00 00       	add    eax,0x7fff
c001da5b:	90                   	nop
c001da5c:	c1 f8 0f             	sar    eax,0xf
c001da5f:	83 c1 04             	add    ecx,0x4
c001da62:	66 01 02             	add    WORD PTR [edx],ax
c001da65:	83 c2 02             	add    edx,0x2
c001da68:	39 d7                	cmp    edi,edx
c001da6a:	75 e0                	jne    c001da4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001da6c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001da6f:	90                   	nop
c001da70:	56                   	push   esi
c001da71:	89 c2                	mov    edx,eax
c001da73:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001da7a:	29 f2                	sub    edx,esi
c001da7c:	52                   	push   edx
c001da7d:	50                   	push   eax
c001da7e:	68 48 72 02 c0       	push   0xc0027248
c001da83:	e8 4b f6 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001da88:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001da8b:	50                   	push   eax
c001da8c:	01 f8                	add    eax,edi
c001da8e:	50                   	push   eax
c001da8f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001da92:	29 f0                	sub    eax,esi
c001da94:	c1 e0 02             	shl    eax,0x2
c001da97:	50                   	push   eax
c001da98:	68 78 72 02 c0       	push   0xc0027278
c001da9d:	e8 31 f6 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001daa2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001daa5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001daa8:	83 c4 1c             	add    esp,0x1c
c001daab:	01 d7                	add    edi,edx
c001daad:	29 f0                	sub    eax,esi
c001daaf:	c1 e0 02             	shl    eax,0x2
c001dab2:	50                   	push   eax
c001dab3:	57                   	push   edi
c001dab4:	52                   	push   edx
c001dab5:	e8 12 2b fe ff       	call   c00005cc <memmove>
c001daba:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001dabd:	83 c4 10             	add    esp,0x10
c001dac0:	89 f0                	mov    eax,esi
c001dac2:	5b                   	pop    ebx
c001dac3:	5e                   	pop    esi
c001dac4:	5f                   	pop    edi
c001dac5:	c3                   	ret    
c001dac6:	66 90                	xchg   ax,ax

c001dac8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001dac8:	57                   	push   edi
c001dac9:	56                   	push   esi
c001daca:	53                   	push   ebx
c001dacb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dacf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dad3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dad7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001dadd:	39 06                	cmp    DWORD PTR [esi],eax
c001dadf:	74 13                	je     c001daf4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001dae1:	83 ec 0c             	sub    esp,0xc
c001dae4:	68 9c 72 02 c0       	push   0xc002729c
c001dae9:	e8 c7 76 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001daee:	83 c4 10             	add    esp,0x10
c001daf1:	8d 76 00             	lea    esi,[esi+0x0]
c001daf4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001dafa:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001dafd:	74 11                	je     c001db10 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001daff:	83 ec 0c             	sub    esp,0xc
c001db02:	68 0a 72 02 c0       	push   0xc002720a
c001db07:	e8 a9 76 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001db0c:	83 c4 10             	add    esp,0x10
c001db0f:	90                   	nop
c001db10:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001db16:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001db19:	74 11                	je     c001db2c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001db1b:	83 ec 0c             	sub    esp,0xc
c001db1e:	68 0a 72 02 c0       	push   0xc002720a
c001db23:	e8 8d 76 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001db28:	83 c4 10             	add    esp,0x10
c001db2b:	90                   	nop
c001db2c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001db2f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001db33:	7e 07                	jle    c001db3c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001db35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001db39:	8d 76 00             	lea    esi,[esi+0x0]
c001db3c:	85 ff                	test   edi,edi
c001db3e:	7e 1c                	jle    c001db5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001db40:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001db47:	31 c0                	xor    eax,eax
c001db49:	8d 76 00             	lea    esi,[esi+0x0]
c001db4c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001db4f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001db52:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001db55:	83 c0 04             	add    eax,0x4
c001db58:	39 c1                	cmp    ecx,eax
c001db5a:	75 f0                	jne    c001db4c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001db5c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001db5f:	50                   	push   eax
c001db60:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001db63:	29 f8                	sub    eax,edi
c001db65:	c1 e0 02             	shl    eax,0x2
c001db68:	50                   	push   eax
c001db69:	8d 04 ba             	lea    eax,[edx+edi*4]
c001db6c:	50                   	push   eax
c001db6d:	52                   	push   edx
c001db6e:	e8 59 2a fe ff       	call   c00005cc <memmove>
c001db73:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001db76:	83 c4 10             	add    esp,0x10
c001db79:	89 f8                	mov    eax,edi
c001db7b:	5b                   	pop    ebx
c001db7c:	5e                   	pop    esi
c001db7d:	5f                   	pop    edi
c001db7e:	c3                   	ret    
c001db7f:	90                   	nop

c001db80 <PCI::open(int, int, void*)>:
c001db80:	83 ec 18             	sub    esp,0x18
c001db83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db8b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001db91:	8b 10                	mov    edx,DWORD PTR [eax]
c001db93:	50                   	push   eax
c001db94:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001db97:	31 c0                	xor    eax,eax
c001db99:	83 c4 1c             	add    esp,0x1c
c001db9c:	c3                   	ret    
c001db9d:	90                   	nop

c001db9e <PCI::close(int, int, void*)>:
c001db9e:	31 c0                	xor    eax,eax
c001dba0:	c3                   	ret    
c001dba1:	90                   	nop

c001dba2 <PCI::PCI()>:
c001dba2:	83 ec 0c             	sub    esp,0xc
c001dba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dba9:	83 ec 08             	sub    esp,0x8
c001dbac:	68 bb 72 02 c0       	push   0xc00272bb
c001dbb1:	50                   	push   eax
c001dbb2:	e8 f5 02 ff ff       	call   c000deac <Bus::Bus(char const*)>
c001dbb7:	83 c4 10             	add    esp,0x10
c001dbba:	ba 90 74 02 c0       	mov    edx,0xc0027490
c001dbbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbc3:	89 10                	mov    DWORD PTR [eax],edx
c001dbc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbc9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001dbd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbd7:	a3 00 ab 02 c0       	mov    ds:0xc002ab00,eax
c001dbdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbe0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbe6:	0f b6 d0             	movzx  edx,al
c001dbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbed:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001dbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbfe:	0f b6 d0             	movzx  edx,al
c001dc01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc05:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001dc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc14:	8d 50 01             	lea    edx,[eax+0x1]
c001dc17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc1b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc21:	0f b6 d0             	movzx  edx,al
c001dc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc28:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc2c:	83 c9 c0             	or     ecx,0xffffffc0
c001dc2f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc33:	90                   	nop
c001dc34:	83 c4 0c             	add    esp,0xc
c001dc37:	c3                   	ret    

c001dc38 <PCI::readBAR8(unsigned int, int)>:
c001dc38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc40:	f6 c2 01             	test   dl,0x1
c001dc43:	74 07                	je     c001dc4c <PCI::readBAR8(unsigned int, int)+0x14>
c001dc45:	83 e2 fc             	and    edx,0xfffffffc
c001dc48:	01 c2                	add    edx,eax
c001dc4a:	ec                   	in     al,dx
c001dc4b:	c3                   	ret    
c001dc4c:	83 e2 f0             	and    edx,0xfffffff0
c001dc4f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001dc52:	c3                   	ret    
c001dc53:	90                   	nop

c001dc54 <PCI::readBAR16(unsigned int, int)>:
c001dc54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc5c:	f6 c2 01             	test   dl,0x1
c001dc5f:	74 08                	je     c001dc69 <PCI::readBAR16(unsigned int, int)+0x15>
c001dc61:	83 e2 fc             	and    edx,0xfffffffc
c001dc64:	01 c2                	add    edx,eax
c001dc66:	66 ed                	in     ax,dx
c001dc68:	c3                   	ret    
c001dc69:	83 e2 f0             	and    edx,0xfffffff0
c001dc6c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001dc70:	c3                   	ret    
c001dc71:	90                   	nop

c001dc72 <PCI::readBAR32(unsigned int, int)>:
c001dc72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc7a:	f6 c2 01             	test   dl,0x1
c001dc7d:	74 07                	je     c001dc86 <PCI::readBAR32(unsigned int, int)+0x14>
c001dc7f:	83 e2 fc             	and    edx,0xfffffffc
c001dc82:	01 c2                	add    edx,eax
c001dc84:	ed                   	in     eax,dx
c001dc85:	c3                   	ret    
c001dc86:	83 e2 f0             	and    edx,0xfffffff0
c001dc89:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001dc8c:	c3                   	ret    
c001dc8d:	90                   	nop

c001dc8e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001dc8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc96:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc9a:	f6 c2 01             	test   dl,0x1
c001dc9d:	74 07                	je     c001dca6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dc9f:	83 e2 fc             	and    edx,0xfffffffc
c001dca2:	01 ca                	add    edx,ecx
c001dca4:	ee                   	out    dx,al
c001dca5:	c3                   	ret    
c001dca6:	83 e2 f0             	and    edx,0xfffffff0
c001dca9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dcac:	c3                   	ret    
c001dcad:	90                   	nop

c001dcae <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001dcae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcb6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcba:	f6 c2 01             	test   dl,0x1
c001dcbd:	74 08                	je     c001dcc7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dcbf:	83 e2 fc             	and    edx,0xfffffffc
c001dcc2:	01 ca                	add    edx,ecx
c001dcc4:	66 ef                	out    dx,ax
c001dcc6:	c3                   	ret    
c001dcc7:	83 e2 f0             	and    edx,0xfffffff0
c001dcca:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001dcce:	c3                   	ret    
c001dccf:	90                   	nop

c001dcd0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001dcd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcd8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcdc:	f6 c2 01             	test   dl,0x1
c001dcdf:	74 07                	je     c001dce8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dce1:	83 e2 fc             	and    edx,0xfffffffc
c001dce4:	01 ca                	add    edx,ecx
c001dce6:	ef                   	out    dx,eax
c001dce7:	c3                   	ret    
c001dce8:	83 e2 f0             	and    edx,0xfffffff0
c001dceb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dcee:	c3                   	ret    
c001dcef:	90                   	nop

c001dcf0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dcf0:	55                   	push   ebp
c001dcf1:	57                   	push   edi
c001dcf2:	56                   	push   esi
c001dcf3:	53                   	push   ebx
c001dcf4:	83 ec 0c             	sub    esp,0xc
c001dcf7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dcfb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dcff:	89 f0                	mov    eax,esi
c001dd01:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dd05:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dd09:	3c 07                	cmp    al,0x7
c001dd0b:	76 10                	jbe    c001dd1d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001dd0d:	83 ec 0c             	sub    esp,0xc
c001dd10:	68 c3 72 02 c0       	push   0xc00272c3
c001dd15:	e8 9b 74 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001dd1a:	83 c4 10             	add    esp,0x10
c001dd1d:	80 fb 0f             	cmp    bl,0xf
c001dd20:	76 10                	jbe    c001dd32 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001dd22:	83 ec 0c             	sub    esp,0xc
c001dd25:	68 f3 72 02 c0       	push   0xc00272f3
c001dd2a:	e8 86 74 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001dd2f:	83 c4 10             	add    esp,0x10
c001dd32:	8d 04 36             	lea    eax,[esi+esi*1]
c001dd35:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dd3a:	83 c8 f0             	or     eax,0xfffffff0
c001dd3d:	ee                   	out    dx,al
c001dd3e:	ba fa 0c 00 00       	mov    edx,0xcfa
c001dd43:	89 e8                	mov    eax,ebp
c001dd45:	ee                   	out    dx,al
c001dd46:	83 c4 0c             	add    esp,0xc
c001dd49:	89 d8                	mov    eax,ebx
c001dd4b:	66 81 e7 fc 00       	and    di,0xfc
c001dd50:	5b                   	pop    ebx
c001dd51:	c1 e0 08             	shl    eax,0x8
c001dd54:	5e                   	pop    esi
c001dd55:	09 f8                	or     eax,edi
c001dd57:	5f                   	pop    edi
c001dd58:	66 0d 00 c0          	or     ax,0xc000
c001dd5c:	5d                   	pop    ebp
c001dd5d:	c3                   	ret    

c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd5e:	57                   	push   edi
c001dd5f:	56                   	push   esi
c001dd60:	53                   	push   ebx
c001dd61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd69:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001dd6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd73:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd77:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dd7b:	83 ff 01             	cmp    edi,0x1
c001dd7e:	75 3e                	jne    c001ddbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001dd80:	89 de                	mov    esi,ebx
c001dd82:	0f b6 c0             	movzx  eax,al
c001dd85:	81 e6 fc 00 00 00    	and    esi,0xfc
c001dd8b:	c1 e0 10             	shl    eax,0x10
c001dd8e:	0f b6 c9             	movzx  ecx,cl
c001dd91:	09 f0                	or     eax,esi
c001dd93:	c1 e1 08             	shl    ecx,0x8
c001dd96:	0f b6 d2             	movzx  edx,dl
c001dd99:	09 c8                	or     eax,ecx
c001dd9b:	c1 e2 0b             	shl    edx,0xb
c001dd9e:	09 d0                	or     eax,edx
c001dda0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dda5:	0d 00 00 00 80       	or     eax,0x80000000
c001ddaa:	ef                   	out    dx,eax
c001ddab:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ddb0:	ed                   	in     eax,dx
c001ddb1:	83 e3 02             	and    ebx,0x2
c001ddb4:	0f b6 cb             	movzx  ecx,bl
c001ddb7:	c1 e1 03             	shl    ecx,0x3
c001ddba:	d3 e8                	shr    eax,cl
c001ddbc:	eb 43                	jmp    c001de01 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001ddbe:	83 ff 02             	cmp    edi,0x2
c001ddc1:	75 2c                	jne    c001ddef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001ddc3:	83 ec 0c             	sub    esp,0xc
c001ddc6:	0f b6 c9             	movzx  ecx,cl
c001ddc9:	0f b6 d2             	movzx  edx,dl
c001ddcc:	0f b6 fb             	movzx  edi,bl
c001ddcf:	0f b6 c0             	movzx  eax,al
c001ddd2:	57                   	push   edi
c001ddd3:	51                   	push   ecx
c001ddd4:	52                   	push   edx
c001ddd5:	50                   	push   eax
c001ddd6:	56                   	push   esi
c001ddd7:	e8 14 ff ff ff       	call   c001dcf0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dddc:	89 c2                	mov    edx,eax
c001ddde:	ed                   	in     eax,dx
c001dddf:	83 e3 02             	and    ebx,0x2
c001dde2:	83 c4 20             	add    esp,0x20
c001dde5:	0f b6 cb             	movzx  ecx,bl
c001dde8:	c1 e1 03             	shl    ecx,0x3
c001ddeb:	d3 e8                	shr    eax,cl
c001dded:	eb 12                	jmp    c001de01 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001ddef:	83 ec 0c             	sub    esp,0xc
c001ddf2:	68 23 73 02 c0       	push   0xc0027323
c001ddf7:	e8 b9 73 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001ddfc:	83 c4 10             	add    esp,0x10
c001ddff:	31 c0                	xor    eax,eax
c001de01:	5b                   	pop    ebx
c001de02:	5e                   	pop    esi
c001de03:	5f                   	pop    edi
c001de04:	c3                   	ret    
c001de05:	90                   	nop

c001de06 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001de06:	83 ec 18             	sub    esp,0x18
c001de09:	6a 00                	push   0x0
c001de0b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de10:	50                   	push   eax
c001de11:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de16:	50                   	push   eax
c001de17:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de1c:	50                   	push   eax
c001de1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de21:	e8 38 ff ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de26:	83 c4 2c             	add    esp,0x2c
c001de29:	c3                   	ret    

c001de2a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001de2a:	83 ec 18             	sub    esp,0x18
c001de2d:	6a 0e                	push   0xe
c001de2f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de34:	50                   	push   eax
c001de35:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de3a:	50                   	push   eax
c001de3b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de40:	50                   	push   eax
c001de41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de45:	e8 14 ff ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de4a:	83 c4 2c             	add    esp,0x2c
c001de4d:	0f b6 c0             	movzx  eax,al
c001de50:	c3                   	ret    
c001de51:	90                   	nop

c001de52 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001de52:	55                   	push   ebp
c001de53:	57                   	push   edi
c001de54:	56                   	push   esi
c001de55:	53                   	push   ebx
c001de56:	83 ec 18             	sub    esp,0x18
c001de59:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001de5e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001de63:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001de68:	6a 0a                	push   0xa
c001de6a:	56                   	push   esi
c001de6b:	55                   	push   ebp
c001de6c:	57                   	push   edi
c001de6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de71:	e8 e8 fe ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de76:	83 c4 14             	add    esp,0x14
c001de79:	89 c3                	mov    ebx,eax
c001de7b:	6a 0a                	push   0xa
c001de7d:	0f b6 db             	movzx  ebx,bl
c001de80:	56                   	push   esi
c001de81:	55                   	push   ebp
c001de82:	57                   	push   edi
c001de83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de87:	e8 d2 fe ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de8c:	83 c4 2c             	add    esp,0x2c
c001de8f:	25 00 ff 00 00       	and    eax,0xff00
c001de94:	09 d8                	or     eax,ebx
c001de96:	5b                   	pop    ebx
c001de97:	5e                   	pop    esi
c001de98:	5f                   	pop    edi
c001de99:	5d                   	pop    ebp
c001de9a:	c3                   	ret    
c001de9b:	90                   	nop

c001de9c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001de9c:	83 ec 18             	sub    esp,0x18
c001de9f:	6a 08                	push   0x8
c001dea1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dea6:	50                   	push   eax
c001dea7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001deac:	50                   	push   eax
c001dead:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001deb2:	50                   	push   eax
c001deb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001deb7:	e8 a2 fe ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001debc:	83 c4 2c             	add    esp,0x2c
c001debf:	0f b6 c4             	movzx  eax,ah
c001dec2:	c3                   	ret    
c001dec3:	90                   	nop

c001dec4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001dec4:	83 ec 18             	sub    esp,0x18
c001dec7:	6a 08                	push   0x8
c001dec9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dece:	50                   	push   eax
c001decf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ded4:	50                   	push   eax
c001ded5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001deda:	50                   	push   eax
c001dedb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dedf:	e8 7a fe ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dee4:	83 c4 2c             	add    esp,0x2c
c001dee7:	c3                   	ret    

c001dee8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001dee8:	83 ec 18             	sub    esp,0x18
c001deeb:	6a 3c                	push   0x3c
c001deed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001def2:	50                   	push   eax
c001def3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001def8:	50                   	push   eax
c001def9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001defe:	50                   	push   eax
c001deff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df03:	e8 56 fe ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df08:	83 c4 2c             	add    esp,0x2c
c001df0b:	c3                   	ret    

c001df0c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001df0c:	83 ec 18             	sub    esp,0x18
c001df0f:	6a 18                	push   0x18
c001df11:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df16:	50                   	push   eax
c001df17:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df1c:	50                   	push   eax
c001df1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df22:	50                   	push   eax
c001df23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df27:	e8 32 fe ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df2c:	83 c4 2c             	add    esp,0x2c
c001df2f:	0f b6 c4             	movzx  eax,ah
c001df32:	c3                   	ret    
c001df33:	90                   	nop

c001df34 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001df34:	55                   	push   ebp
c001df35:	57                   	push   edi
c001df36:	56                   	push   esi
c001df37:	53                   	push   ebx
c001df38:	83 ec 28             	sub    esp,0x28
c001df3b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001df3f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001df44:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001df49:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001df4e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001df55:	8d 43 12             	lea    eax,[ebx+0x12]
c001df58:	83 c3 10             	add    ebx,0x10
c001df5b:	0f b6 c0             	movzx  eax,al
c001df5e:	0f b6 db             	movzx  ebx,bl
c001df61:	50                   	push   eax
c001df62:	51                   	push   ecx
c001df63:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001df67:	57                   	push   edi
c001df68:	55                   	push   ebp
c001df69:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001df6d:	e8 ec fd ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df72:	83 c4 14             	add    esp,0x14
c001df75:	89 c6                	mov    esi,eax
c001df77:	53                   	push   ebx
c001df78:	c1 e6 10             	shl    esi,0x10
c001df7b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001df7f:	51                   	push   ecx
c001df80:	57                   	push   edi
c001df81:	55                   	push   ebp
c001df82:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001df86:	e8 d3 fd ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df8b:	83 c4 3c             	add    esp,0x3c
c001df8e:	0f b7 c0             	movzx  eax,ax
c001df91:	5b                   	pop    ebx
c001df92:	09 f0                	or     eax,esi
c001df94:	5e                   	pop    esi
c001df95:	5f                   	pop    edi
c001df96:	5d                   	pop    ebp
c001df97:	c3                   	ret    

c001df98 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001df98:	55                   	push   ebp
c001df99:	57                   	push   edi
c001df9a:	56                   	push   esi
c001df9b:	53                   	push   ebx
c001df9c:	83 ec 0c             	sub    esp,0xc
c001df9f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dfa3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001dfa7:	89 f5                	mov    ebp,esi
c001dfa9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001dfaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dfb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dfb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dfbb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dfbf:	83 f9 01             	cmp    ecx,0x1
c001dfc2:	75 5d                	jne    c001e021 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001dfc4:	0f b6 c8             	movzx  ecx,al
c001dfc7:	0f b6 d2             	movzx  edx,dl
c001dfca:	c1 e1 10             	shl    ecx,0x10
c001dfcd:	c1 e2 0b             	shl    edx,0xb
c001dfd0:	89 f0                	mov    eax,esi
c001dfd2:	25 fc 00 00 00       	and    eax,0xfc
c001dfd7:	09 c1                	or     ecx,eax
c001dfd9:	89 e8                	mov    eax,ebp
c001dfdb:	0f b6 c0             	movzx  eax,al
c001dfde:	c1 e0 08             	shl    eax,0x8
c001dfe1:	09 c1                	or     ecx,eax
c001dfe3:	09 d1                	or     ecx,edx
c001dfe5:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dfea:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001dff0:	89 c8                	mov    eax,ecx
c001dff2:	ef                   	out    dx,eax
c001dff3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dff8:	ed                   	in     eax,dx
c001dff9:	0f b7 db             	movzx  ebx,bx
c001dffc:	83 e6 02             	and    esi,0x2
c001dfff:	74 0a                	je     c001e00b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e001:	0f b7 d0             	movzx  edx,ax
c001e004:	c1 e3 10             	shl    ebx,0x10
c001e007:	09 d3                	or     ebx,edx
c001e009:	eb 05                	jmp    c001e010 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e00b:	66 31 c0             	xor    ax,ax
c001e00e:	09 c3                	or     ebx,eax
c001e010:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e015:	89 c8                	mov    eax,ecx
c001e017:	ef                   	out    dx,eax
c001e018:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e01d:	89 d8                	mov    eax,ebx
c001e01f:	eb 41                	jmp    c001e062 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e021:	83 f9 02             	cmp    ecx,0x2
c001e024:	75 45                	jne    c001e06b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e026:	83 ec 0c             	sub    esp,0xc
c001e029:	0f b6 d2             	movzx  edx,dl
c001e02c:	89 f1                	mov    ecx,esi
c001e02e:	0f b6 c0             	movzx  eax,al
c001e031:	0f b6 f1             	movzx  esi,cl
c001e034:	89 e9                	mov    ecx,ebp
c001e036:	56                   	push   esi
c001e037:	0f b6 c9             	movzx  ecx,cl
c001e03a:	51                   	push   ecx
c001e03b:	52                   	push   edx
c001e03c:	50                   	push   eax
c001e03d:	57                   	push   edi
c001e03e:	e8 ad fc ff ff       	call   c001dcf0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e043:	89 c2                	mov    edx,eax
c001e045:	ed                   	in     eax,dx
c001e046:	83 c4 20             	add    esp,0x20
c001e049:	0f b7 db             	movzx  ebx,bx
c001e04c:	f6 c2 02             	test   dl,0x2
c001e04f:	74 0c                	je     c001e05d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e051:	0f b7 c8             	movzx  ecx,ax
c001e054:	89 d8                	mov    eax,ebx
c001e056:	c1 e0 10             	shl    eax,0x10
c001e059:	09 c8                	or     eax,ecx
c001e05b:	eb 05                	jmp    c001e062 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e05d:	66 31 c0             	xor    ax,ax
c001e060:	09 d8                	or     eax,ebx
c001e062:	ef                   	out    dx,eax
c001e063:	83 c4 0c             	add    esp,0xc
c001e066:	5b                   	pop    ebx
c001e067:	5e                   	pop    esi
c001e068:	5f                   	pop    edi
c001e069:	5d                   	pop    ebp
c001e06a:	c3                   	ret    
c001e06b:	c7 44 24 20 23 73 02 c0 	mov    DWORD PTR [esp+0x20],0xc0027323
c001e073:	83 c4 0c             	add    esp,0xc
c001e076:	5b                   	pop    ebx
c001e077:	5e                   	pop    esi
c001e078:	5f                   	pop    edi
c001e079:	5d                   	pop    ebp
c001e07a:	e9 36 71 ff ff       	jmp    c00151b5 <Krnl::panic(char const*)>
c001e07f:	90                   	nop

c001e080 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e080:	55                   	push   ebp
c001e081:	57                   	push   edi
c001e082:	56                   	push   esi
c001e083:	53                   	push   ebx
c001e084:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001e08a:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e091:	75 0f                	jne    c001e0a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001e093:	80 3d 0c ab 02 c0 00 	cmp    BYTE PTR ds:0xc002ab0c,0x0
c001e09a:	0f 85 fa 00 00 00    	jne    c001e19a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001e0a0:	eb 2f                	jmp    c001e0d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001e0a2:	83 ec 0c             	sub    esp,0xc
c001e0a5:	68 29 73 02 c0       	push   0xc0027329
c001e0aa:	e8 92 bd fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e0af:	83 c4 10             	add    esp,0x10
c001e0b2:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e0b9:	75 d8                	jne    c001e093 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001e0bb:	e4 60                	in     al,0x60
c001e0bd:	3c 1c                	cmp    al,0x1c
c001e0bf:	74 04                	je     c001e0c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e0c1:	3c 5a                	cmp    al,0x5a
c001e0c3:	75 f6                	jne    c001e0bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001e0c5:	e4 60                	in     al,0x60
c001e0c7:	3c 5a                	cmp    al,0x5a
c001e0c9:	74 fa                	je     c001e0c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e0cb:	3c 1c                	cmp    al,0x1c
c001e0cd:	74 f6                	je     c001e0c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e0cf:	eb c2                	jmp    c001e093 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001e0d1:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e0d8:	0f 85 86 00 00 00    	jne    c001e164 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001e0de:	83 ec 0c             	sub    esp,0xc
c001e0e1:	68 14 01 00 00       	push   0x114
c001e0e6:	e8 fc bc fe ff       	call   c0009de7 <malloc>
c001e0eb:	83 c4 0c             	add    esp,0xc
c001e0ee:	89 c3                	mov    ebx,eax
c001e0f0:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c001e0f6:	68 43 73 02 c0       	push   0xc0027343
c001e0fb:	50                   	push   eax
c001e0fc:	e8 3d f5 fe ff       	call   c000d63e <File::File(char const*, Process*)>
c001e101:	5a                   	pop    edx
c001e102:	59                   	pop    ecx
c001e103:	6a 01                	push   0x1
c001e105:	53                   	push   ebx
c001e106:	e8 0d f6 fe ff       	call   c000d718 <File::open(FileOpenMode)>
c001e10b:	83 c4 0c             	add    esp,0xc
c001e10e:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001e112:	50                   	push   eax
c001e113:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e117:	50                   	push   eax
c001e118:	53                   	push   ebx
c001e119:	e8 a6 f8 fe ff       	call   c000d9c4 <File::stat(unsigned long long*, bool*)>
c001e11e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e122:	40                   	inc    eax
c001e123:	89 04 24             	mov    DWORD PTR [esp],eax
c001e126:	e8 bc bc fe ff       	call   c0009de7 <malloc>
c001e12b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e12f:	a3 08 ab 02 c0       	mov    ds:0xc002ab08,eax
c001e134:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e138:	5e                   	pop    esi
c001e139:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e13b:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001e13f:	51                   	push   ecx
c001e140:	50                   	push   eax
c001e141:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001e145:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001e149:	53                   	push   ebx
c001e14a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e14d:	83 c4 14             	add    esp,0x14
c001e150:	53                   	push   ebx
c001e151:	e8 20 f6 fe ff       	call   c000d776 <File::close()>
c001e156:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e15a:	83 c4 10             	add    esp,0x10
c001e15d:	a3 04 ab 02 c0       	mov    ds:0xc002ab04,eax
c001e162:	eb 36                	jmp    c001e19a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001e164:	83 ec 0c             	sub    esp,0xc
c001e167:	68 5c 73 02 c0       	push   0xc002735c
c001e16c:	e8 d0 bc fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e171:	83 c4 10             	add    esp,0x10
c001e174:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e17b:	0f 85 5d ff ff ff    	jne    c001e0de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001e181:	e4 60                	in     al,0x60
c001e183:	3c 1c                	cmp    al,0x1c
c001e185:	74 04                	je     c001e18b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e187:	3c 5a                	cmp    al,0x5a
c001e189:	75 f6                	jne    c001e181 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001e18b:	e4 60                	in     al,0x60
c001e18d:	3c 5a                	cmp    al,0x5a
c001e18f:	74 fa                	je     c001e18b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e191:	3c 1c                	cmp    al,0x1c
c001e193:	74 f6                	je     c001e18b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e195:	e9 44 ff ff ff       	jmp    c001e0de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001e19a:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e1a1:	75 0b                	jne    c001e1ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001e1a3:	31 f6                	xor    esi,esi
c001e1a5:	31 db                	xor    ebx,ebx
c001e1a7:	31 ed                	xor    ebp,ebp
c001e1a9:	e9 a3 01 00 00       	jmp    c001e351 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e1ae:	83 ec 0c             	sub    esp,0xc
c001e1b1:	68 6e 73 02 c0       	push   0xc002736e
c001e1b6:	e8 86 bc fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e1bb:	8b 15 e0 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028be0
c001e1c1:	83 c4 10             	add    esp,0x10
c001e1c4:	f6 c2 80             	test   dl,0x80
c001e1c7:	74 0c                	je     c001e1d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001e1c9:	0f ba e2 0b          	bt     edx,0xb
c001e1cd:	72 1a                	jb     c001e1e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001e1cf:	eb d2                	jmp    c001e1a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e1d1:	3c 5a                	cmp    al,0x5a
c001e1d3:	74 0c                	je     c001e1e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e1d5:	e4 60                	in     al,0x60
c001e1d7:	3c 1c                	cmp    al,0x1c
c001e1d9:	75 f6                	jne    c001e1d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001e1db:	eb 04                	jmp    c001e1e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e1dd:	3c 1c                	cmp    al,0x1c
c001e1df:	75 e8                	jne    c001e1c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001e1e1:	e4 60                	in     al,0x60
c001e1e3:	3c 5a                	cmp    al,0x5a
c001e1e5:	74 fa                	je     c001e1e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e1e7:	eb f4                	jmp    c001e1dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001e1e9:	83 ec 0c             	sub    esp,0xc
c001e1ec:	68 73 73 02 c0       	push   0xc0027373
c001e1f1:	e8 4b bc fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e1f6:	83 c4 10             	add    esp,0x10
c001e1f9:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e200:	75 a1                	jne    c001e1a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e202:	e4 60                	in     al,0x60
c001e204:	3c 5a                	cmp    al,0x5a
c001e206:	74 04                	je     c001e20c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e208:	3c 1c                	cmp    al,0x1c
c001e20a:	75 f6                	jne    c001e202 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001e20c:	e4 60                	in     al,0x60
c001e20e:	3c 5a                	cmp    al,0x5a
c001e210:	74 fa                	je     c001e20c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e212:	3c 1c                	cmp    al,0x1c
c001e214:	74 f6                	je     c001e20c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e216:	eb 8b                	jmp    c001e1a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e218:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e21f:	0f 85 3d 01 00 00    	jne    c001e362 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001e225:	a1 08 ab 02 c0       	mov    eax,ds:0xc002ab08
c001e22a:	8d 7e 01             	lea    edi,[esi+0x1]
c001e22d:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001e230:	d4 40                	aam    0x40
c001e232:	d5 39                	aad    0x39
c001e234:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e23b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e23f:	0f 85 53 01 00 00    	jne    c001e398 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001e245:	8b 15 08 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab08
c001e24b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001e24e:	d4 40                	aam    0x40
c001e250:	d5 39                	aad    0x39
c001e252:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e256:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001e25a:	d4 40                	aam    0x40
c001e25c:	d5 39                	aad    0x39
c001e25e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e262:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001e266:	d4 40                	aam    0x40
c001e268:	d5 39                	aad    0x39
c001e26a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e26e:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001e272:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001e276:	3c 56                	cmp    al,0x56
c001e278:	74 49                	je     c001e2c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001e27a:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001e27e:	d4 40                	aam    0x40
c001e280:	d5 39                	aad    0x39
c001e282:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e285:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001e289:	0f b6 c9             	movzx  ecx,cl
c001e28c:	c1 e1 04             	shl    ecx,0x4
c001e28f:	d4 40                	aam    0x40
c001e291:	d5 39                	aad    0x39
c001e293:	83 e8 30             	sub    eax,0x30
c001e296:	0f b6 c0             	movzx  eax,al
c001e299:	09 c1                	or     ecx,eax
c001e29b:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001e29f:	c1 e1 04             	shl    ecx,0x4
c001e2a2:	d4 40                	aam    0x40
c001e2a4:	d5 39                	aad    0x39
c001e2a6:	83 e8 30             	sub    eax,0x30
c001e2a9:	0f b6 c0             	movzx  eax,al
c001e2ac:	09 c1                	or     ecx,eax
c001e2ae:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001e2b2:	c1 e1 04             	shl    ecx,0x4
c001e2b5:	d4 40                	aam    0x40
c001e2b7:	d5 39                	aad    0x39
c001e2b9:	83 e8 30             	sub    eax,0x30
c001e2bc:	0f b6 c0             	movzx  eax,al
c001e2bf:	09 c8                	or     eax,ecx
c001e2c1:	89 c5                	mov    ebp,eax
c001e2c3:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001e2c7:	80 f9 44             	cmp    cl,0x44
c001e2ca:	74 47                	je     c001e313 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001e2cc:	88 c8                	mov    al,cl
c001e2ce:	d4 40                	aam    0x40
c001e2d0:	d5 39                	aad    0x39
c001e2d2:	83 e8 30             	sub    eax,0x30
c001e2d5:	0f b6 f8             	movzx  edi,al
c001e2d8:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001e2dc:	c1 e7 04             	shl    edi,0x4
c001e2df:	d4 40                	aam    0x40
c001e2e1:	d5 39                	aad    0x39
c001e2e3:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e2e6:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001e2ea:	0f b6 db             	movzx  ebx,bl
c001e2ed:	09 fb                	or     ebx,edi
c001e2ef:	c1 e3 04             	shl    ebx,0x4
c001e2f2:	d4 40                	aam    0x40
c001e2f4:	d5 39                	aad    0x39
c001e2f6:	83 e8 30             	sub    eax,0x30
c001e2f9:	0f b6 f8             	movzx  edi,al
c001e2fc:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001e300:	09 fb                	or     ebx,edi
c001e302:	89 df                	mov    edi,ebx
c001e304:	c1 e7 04             	shl    edi,0x4
c001e307:	d4 40                	aam    0x40
c001e309:	d5 39                	aad    0x39
c001e30b:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e30e:	0f b6 db             	movzx  ebx,bl
c001e311:	09 fb                	or     ebx,edi
c001e313:	a1 04 ab 02 c0       	mov    eax,ds:0xc002ab04
c001e318:	83 c6 10             	add    esi,0x10
c001e31b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e31f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001e323:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001e326:	3c 0a                	cmp    al,0xa
c001e328:	0f 85 a0 00 00 00    	jne    c001e3ce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001e32e:	3c 0a                	cmp    al,0xa
c001e330:	0f 94 c0             	sete   al
c001e333:	0f b6 c0             	movzx  eax,al
c001e336:	01 c6                	add    esi,eax
c001e338:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001e33d:	0f 84 a2 00 00 00    	je     c001e3e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e343:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001e34b:	0f 84 94 00 00 00    	je     c001e3e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e351:	39 35 04 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab04,esi
c001e357:	0f 8f bb fe ff ff    	jg     c001e218 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001e35d:	e9 e8 00 00 00       	jmp    c001e44a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001e362:	83 ec 0c             	sub    esp,0xc
c001e365:	68 7a 73 02 c0       	push   0xc002737a
c001e36a:	e8 d2 ba fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e36f:	83 c4 10             	add    esp,0x10
c001e372:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e379:	0f 85 a6 fe ff ff    	jne    c001e225 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e37f:	e4 60                	in     al,0x60
c001e381:	3c 5a                	cmp    al,0x5a
c001e383:	74 04                	je     c001e389 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e385:	3c 1c                	cmp    al,0x1c
c001e387:	75 f6                	jne    c001e37f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001e389:	e4 60                	in     al,0x60
c001e38b:	3c 5a                	cmp    al,0x5a
c001e38d:	74 fa                	je     c001e389 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e38f:	3c 1c                	cmp    al,0x1c
c001e391:	74 f6                	je     c001e389 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e393:	e9 8d fe ff ff       	jmp    c001e225 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e398:	83 ec 0c             	sub    esp,0xc
c001e39b:	68 82 73 02 c0       	push   0xc0027382
c001e3a0:	e8 9c ba fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e3a5:	83 c4 10             	add    esp,0x10
c001e3a8:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e3af:	0f 85 90 fe ff ff    	jne    c001e245 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e3b5:	e4 60                	in     al,0x60
c001e3b7:	3c 5a                	cmp    al,0x5a
c001e3b9:	74 04                	je     c001e3bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e3bb:	3c 1c                	cmp    al,0x1c
c001e3bd:	75 f6                	jne    c001e3b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001e3bf:	e4 60                	in     al,0x60
c001e3c1:	3c 5a                	cmp    al,0x5a
c001e3c3:	74 fa                	je     c001e3bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e3c5:	3c 1c                	cmp    al,0x1c
c001e3c7:	74 f6                	je     c001e3bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e3c9:	e9 77 fe ff ff       	jmp    c001e245 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e3ce:	47                   	inc    edi
c001e3cf:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001e3d3:	0f 84 55 ff ff ff    	je     c001e32e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001e3d9:	46                   	inc    esi
c001e3da:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001e3dd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e3e0:	e9 3e ff ff ff       	jmp    c001e323 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001e3e5:	80 f9 44             	cmp    cl,0x44
c001e3e8:	74 0e                	je     c001e3f8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001e3ea:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001e3f2:	0f 85 59 ff ff ff    	jne    c001e351 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e3f8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e3fc:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001e400:	c1 e0 04             	shl    eax,0x4
c001e403:	83 ea 30             	sub    edx,0x30
c001e406:	09 d0                	or     eax,edx
c001e408:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001e40f:	0f 85 3c ff ff ff    	jne    c001e351 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e415:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001e419:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e41d:	c1 e2 04             	shl    edx,0x4
c001e420:	83 e8 30             	sub    eax,0x30
c001e423:	09 d0                	or     eax,edx
c001e425:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001e42c:	0f 85 1f ff ff ff    	jne    c001e351 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e432:	50                   	push   eax
c001e433:	50                   	push   eax
c001e434:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e438:	50                   	push   eax
c001e439:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001e440:	e8 0b 23 fe ff       	call   c0000750 <strcpy>
c001e445:	83 c4 10             	add    esp,0x10
c001e448:	eb 15                	jmp    c001e45f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001e44a:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e451:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001e45c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001e45f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e466:	81 c4 2c 01 00 00    	add    esp,0x12c
c001e46c:	5b                   	pop    ebx
c001e46d:	5e                   	pop    esi
c001e46e:	5f                   	pop    edi
c001e46f:	5d                   	pop    ebp
c001e470:	c3                   	ret    
c001e471:	90                   	nop

c001e472 <PCI::checkBus(unsigned char)>:
c001e472:	56                   	push   esi
c001e473:	53                   	push   ebx
c001e474:	31 db                	xor    ebx,ebx
c001e476:	51                   	push   ecx
c001e477:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e47c:	52                   	push   edx
c001e47d:	53                   	push   ebx
c001e47e:	43                   	inc    ebx
c001e47f:	56                   	push   esi
c001e480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e484:	e8 bf 07 00 00       	call   c001ec48 <PCI::checkDevice(unsigned char, unsigned char)>
c001e489:	83 c4 10             	add    esp,0x10
c001e48c:	83 fb 20             	cmp    ebx,0x20
c001e48f:	75 eb                	jne    c001e47c <PCI::checkBus(unsigned char)+0xa>
c001e491:	58                   	pop    eax
c001e492:	5b                   	pop    ebx
c001e493:	5e                   	pop    esi
c001e494:	c3                   	ret    
c001e495:	90                   	nop

c001e496 <PCI::foundDevice(PCIDeviceInfo)>:
c001e496:	55                   	push   ebp
c001e497:	57                   	push   edi
c001e498:	56                   	push   esi
c001e499:	53                   	push   ebx
c001e49a:	83 ec 1c             	sub    esp,0x1c
c001e49d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4a1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001e4a7:	0f 84 20 04 00 00    	je     c001e8cd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e4ad:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e4b4:	75 37                	jne    c001e4ed <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001e4b6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e4ba:	66 81 f9 06 04       	cmp    cx,0x406
c001e4bf:	75 5b                	jne    c001e51c <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001e4c1:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001e4c6:	50                   	push   eax
c001e4c7:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001e4cc:	50                   	push   eax
c001e4cd:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001e4d2:	50                   	push   eax
c001e4d3:	53                   	push   ebx
c001e4d4:	e8 33 fa ff ff       	call   c001df0c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e4d9:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001e4dd:	0f b6 c0             	movzx  eax,al
c001e4e0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e4e4:	83 c4 2c             	add    esp,0x2c
c001e4e7:	5b                   	pop    ebx
c001e4e8:	5e                   	pop    esi
c001e4e9:	5f                   	pop    edi
c001e4ea:	5d                   	pop    ebp
c001e4eb:	eb 85                	jmp    c001e472 <PCI::checkBus(unsigned char)>
c001e4ed:	83 ec 0c             	sub    esp,0xc
c001e4f0:	68 8b 73 02 c0       	push   0xc002738b
c001e4f5:	e8 47 b9 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e4fa:	83 c4 10             	add    esp,0x10
c001e4fd:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e504:	75 b0                	jne    c001e4b6 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e506:	e4 60                	in     al,0x60
c001e508:	3c 5a                	cmp    al,0x5a
c001e50a:	74 04                	je     c001e510 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e50c:	3c 1c                	cmp    al,0x1c
c001e50e:	75 f6                	jne    c001e506 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001e510:	e4 60                	in     al,0x60
c001e512:	3c 5a                	cmp    al,0x5a
c001e514:	74 fa                	je     c001e510 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e516:	3c 1c                	cmp    al,0x1c
c001e518:	74 f6                	je     c001e510 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e51a:	eb 9a                	jmp    c001e4b6 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e51c:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e522:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001e526:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e52a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e52e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e532:	88 d0                	mov    al,dl
c001e534:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e539:	74 3b                	je     c001e576 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001e53b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e53f:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e542:	85 d2                	test   edx,edx
c001e544:	74 24                	je     c001e56a <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e546:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e54c:	31 ef                	xor    edi,ebp
c001e54e:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e554:	75 14                	jne    c001e56a <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e556:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e55c:	75 0c                	jne    c001e56a <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e55e:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001e564:	0f 84 63 03 00 00    	je     c001e8cd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e56a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e56e:	8b 12                	mov    edx,DWORD PTR [edx]
c001e570:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e574:	eb be                	jmp    c001e534 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001e576:	66 81 f9 01 06       	cmp    cx,0x601
c001e57b:	0f 85 81 01 00 00    	jne    c001e702 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001e581:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e588:	75 25                	jne    c001e5af <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001e58a:	83 ec 0c             	sub    esp,0xc
c001e58d:	68 64 01 00 00       	push   0x164
c001e592:	e8 50 b8 fe ff       	call   c0009de7 <malloc>
c001e597:	89 04 24             	mov    DWORD PTR [esp],eax
c001e59a:	89 c5                	mov    ebp,eax
c001e59c:	e8 d3 12 00 00       	call   c001f874 <SATABus::SATABus()>
c001e5a1:	83 c4 10             	add    esp,0x10
c001e5a4:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e5ab:	74 4a                	je     c001e5f7 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e5ad:	eb 2f                	jmp    c001e5de <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001e5af:	83 ec 0c             	sub    esp,0xc
c001e5b2:	68 9b 73 02 c0       	push   0xc002739b
c001e5b7:	e8 85 b8 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e5bc:	83 c4 10             	add    esp,0x10
c001e5bf:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e5c6:	75 c2                	jne    c001e58a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e5c8:	e4 60                	in     al,0x60
c001e5ca:	3c 1c                	cmp    al,0x1c
c001e5cc:	74 04                	je     c001e5d2 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e5ce:	3c 5a                	cmp    al,0x5a
c001e5d0:	75 f6                	jne    c001e5c8 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001e5d2:	e4 60                	in     al,0x60
c001e5d4:	3c 5a                	cmp    al,0x5a
c001e5d6:	74 fa                	je     c001e5d2 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e5d8:	3c 1c                	cmp    al,0x1c
c001e5da:	74 f6                	je     c001e5d2 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e5dc:	eb ac                	jmp    c001e58a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e5de:	83 ec 0c             	sub    esp,0xc
c001e5e1:	68 a1 73 02 c0       	push   0xc00273a1
c001e5e6:	e8 56 b8 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e5eb:	83 c4 10             	add    esp,0x10
c001e5ee:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e5f5:	74 1b                	je     c001e612 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001e5f7:	50                   	push   eax
c001e5f8:	50                   	push   eax
c001e5f9:	55                   	push   ebp
c001e5fa:	53                   	push   ebx
c001e5fb:	e8 46 00 ff ff       	call   c000e646 <Device::addChild(Device*)>
c001e600:	83 c4 10             	add    esp,0x10
c001e603:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e60a:	74 33                	je     c001e63f <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e60c:	eb 18                	jmp    c001e626 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001e60e:	3c 1c                	cmp    al,0x1c
c001e610:	74 0c                	je     c001e61e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e612:	e4 60                	in     al,0x60
c001e614:	3c 5a                	cmp    al,0x5a
c001e616:	75 f6                	jne    c001e60e <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001e618:	eb 04                	jmp    c001e61e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e61a:	3c 1c                	cmp    al,0x1c
c001e61c:	75 d9                	jne    c001e5f7 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e61e:	e4 60                	in     al,0x60
c001e620:	3c 5a                	cmp    al,0x5a
c001e622:	74 fa                	je     c001e61e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e624:	eb f4                	jmp    c001e61a <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001e626:	83 ec 0c             	sub    esp,0xc
c001e629:	68 a9 73 02 c0       	push   0xc00273a9
c001e62e:	e8 0e b8 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e633:	83 c4 10             	add    esp,0x10
c001e636:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e63d:	74 29                	je     c001e668 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001e63f:	83 ec 2c             	sub    esp,0x2c
c001e642:	b9 09 00 00 00       	mov    ecx,0x9
c001e647:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e64b:	fc                   	cld    
c001e64c:	89 e7                	mov    edi,esp
c001e64e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e650:	55                   	push   ebp
c001e651:	e8 02 ff fe ff       	call   c000e558 <Device::preOpenPCI(PCIDeviceInfo)>
c001e656:	83 c4 30             	add    esp,0x30
c001e659:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e660:	74 33                	je     c001e695 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e662:	eb 18                	jmp    c001e67c <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e664:	3c 1c                	cmp    al,0x1c
c001e666:	74 0c                	je     c001e674 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e668:	e4 60                	in     al,0x60
c001e66a:	3c 5a                	cmp    al,0x5a
c001e66c:	75 f6                	jne    c001e664 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e66e:	eb 04                	jmp    c001e674 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e670:	3c 1c                	cmp    al,0x1c
c001e672:	75 cb                	jne    c001e63f <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e674:	e4 60                	in     al,0x60
c001e676:	3c 5a                	cmp    al,0x5a
c001e678:	74 fa                	je     c001e674 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e67a:	eb f4                	jmp    c001e670 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e67c:	83 ec 0c             	sub    esp,0xc
c001e67f:	68 b1 73 02 c0       	push   0xc00273b1
c001e684:	e8 b8 b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e689:	83 c4 10             	add    esp,0x10
c001e68c:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e693:	74 23                	je     c001e6b8 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e695:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e698:	6a 00                	push   0x0
c001e69a:	6a 00                	push   0x0
c001e69c:	6a 00                	push   0x0
c001e69e:	55                   	push   ebp
c001e69f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6a2:	83 c4 10             	add    esp,0x10
c001e6a5:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e6ac:	0f 84 1b 02 00 00    	je     c001e8cd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e6b2:	eb 18                	jmp    c001e6cc <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e6b4:	3c 1c                	cmp    al,0x1c
c001e6b6:	74 0c                	je     c001e6c4 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e6b8:	e4 60                	in     al,0x60
c001e6ba:	3c 5a                	cmp    al,0x5a
c001e6bc:	75 f6                	jne    c001e6b4 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e6be:	eb 04                	jmp    c001e6c4 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e6c0:	3c 1c                	cmp    al,0x1c
c001e6c2:	75 d1                	jne    c001e695 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e6c4:	e4 60                	in     al,0x60
c001e6c6:	3c 5a                	cmp    al,0x5a
c001e6c8:	74 fa                	je     c001e6c4 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e6ca:	eb f4                	jmp    c001e6c0 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e6cc:	83 ec 0c             	sub    esp,0xc
c001e6cf:	68 b9 73 02 c0       	push   0xc00273b9
c001e6d4:	e8 68 b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e6d9:	83 c4 10             	add    esp,0x10
c001e6dc:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e6e3:	0f 85 e4 01 00 00    	jne    c001e8cd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e6e9:	e4 60                	in     al,0x60
c001e6eb:	3c 5a                	cmp    al,0x5a
c001e6ed:	74 04                	je     c001e6f3 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e6ef:	3c 1c                	cmp    al,0x1c
c001e6f1:	75 f6                	jne    c001e6e9 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e6f3:	e4 60                	in     al,0x60
c001e6f5:	3c 5a                	cmp    al,0x5a
c001e6f7:	74 fa                	je     c001e6f3 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e6f9:	3c 1c                	cmp    al,0x1c
c001e6fb:	74 f6                	je     c001e6f3 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e6fd:	e9 cb 01 00 00       	jmp    c001e8cd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e702:	66 81 f9 01 01       	cmp    cx,0x101
c001e707:	0f 85 7a 01 00 00    	jne    c001e887 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e70d:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e714:	75 25                	jne    c001e73b <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e716:	83 ec 0c             	sub    esp,0xc
c001e719:	68 70 02 00 00       	push   0x270
c001e71e:	e8 c4 b6 fe ff       	call   c0009de7 <malloc>
c001e723:	89 04 24             	mov    DWORD PTR [esp],eax
c001e726:	89 c5                	mov    ebp,eax
c001e728:	e8 df 05 00 00       	call   c001ed0c <IDE::IDE()>
c001e72d:	83 c4 10             	add    esp,0x10
c001e730:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e737:	74 4a                	je     c001e783 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e739:	eb 2f                	jmp    c001e76a <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e73b:	83 ec 0c             	sub    esp,0xc
c001e73e:	68 c1 73 02 c0       	push   0xc00273c1
c001e743:	e8 f9 b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e748:	83 c4 10             	add    esp,0x10
c001e74b:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e752:	75 c2                	jne    c001e716 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e754:	e4 60                	in     al,0x60
c001e756:	3c 5a                	cmp    al,0x5a
c001e758:	74 04                	je     c001e75e <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e75a:	3c 1c                	cmp    al,0x1c
c001e75c:	75 f6                	jne    c001e754 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e75e:	e4 60                	in     al,0x60
c001e760:	3c 5a                	cmp    al,0x5a
c001e762:	74 fa                	je     c001e75e <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e764:	3c 1c                	cmp    al,0x1c
c001e766:	74 f6                	je     c001e75e <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e768:	eb ac                	jmp    c001e716 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e76a:	83 ec 0c             	sub    esp,0xc
c001e76d:	68 c8 73 02 c0       	push   0xc00273c8
c001e772:	e8 ca b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e777:	83 c4 10             	add    esp,0x10
c001e77a:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e781:	74 1b                	je     c001e79e <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e783:	57                   	push   edi
c001e784:	57                   	push   edi
c001e785:	55                   	push   ebp
c001e786:	53                   	push   ebx
c001e787:	e8 ba fe fe ff       	call   c000e646 <Device::addChild(Device*)>
c001e78c:	83 c4 10             	add    esp,0x10
c001e78f:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e796:	74 33                	je     c001e7cb <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e798:	eb 18                	jmp    c001e7b2 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e79a:	3c 1c                	cmp    al,0x1c
c001e79c:	74 0c                	je     c001e7aa <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e79e:	e4 60                	in     al,0x60
c001e7a0:	3c 5a                	cmp    al,0x5a
c001e7a2:	75 f6                	jne    c001e79a <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e7a4:	eb 04                	jmp    c001e7aa <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e7a6:	3c 1c                	cmp    al,0x1c
c001e7a8:	75 d9                	jne    c001e783 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e7aa:	e4 60                	in     al,0x60
c001e7ac:	3c 5a                	cmp    al,0x5a
c001e7ae:	74 fa                	je     c001e7aa <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e7b0:	eb f4                	jmp    c001e7a6 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e7b2:	83 ec 0c             	sub    esp,0xc
c001e7b5:	68 cf 73 02 c0       	push   0xc00273cf
c001e7ba:	e8 82 b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e7bf:	83 c4 10             	add    esp,0x10
c001e7c2:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e7c9:	74 29                	je     c001e7f4 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e7cb:	83 ec 2c             	sub    esp,0x2c
c001e7ce:	b9 09 00 00 00       	mov    ecx,0x9
c001e7d3:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e7d7:	fc                   	cld    
c001e7d8:	89 e7                	mov    edi,esp
c001e7da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e7dc:	55                   	push   ebp
c001e7dd:	e8 76 fd fe ff       	call   c000e558 <Device::preOpenPCI(PCIDeviceInfo)>
c001e7e2:	83 c4 30             	add    esp,0x30
c001e7e5:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e7ec:	74 33                	je     c001e821 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e7ee:	eb 18                	jmp    c001e808 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e7f0:	3c 1c                	cmp    al,0x1c
c001e7f2:	74 0c                	je     c001e800 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e7f4:	e4 60                	in     al,0x60
c001e7f6:	3c 5a                	cmp    al,0x5a
c001e7f8:	75 f6                	jne    c001e7f0 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e7fa:	eb 04                	jmp    c001e800 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e7fc:	3c 1c                	cmp    al,0x1c
c001e7fe:	75 cb                	jne    c001e7cb <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e800:	e4 60                	in     al,0x60
c001e802:	3c 5a                	cmp    al,0x5a
c001e804:	74 fa                	je     c001e800 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e806:	eb f4                	jmp    c001e7fc <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e808:	83 ec 0c             	sub    esp,0xc
c001e80b:	68 d6 73 02 c0       	push   0xc00273d6
c001e810:	e8 2c b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e815:	83 c4 10             	add    esp,0x10
c001e818:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e81f:	74 23                	je     c001e844 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e821:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e824:	6a 00                	push   0x0
c001e826:	6a 00                	push   0x0
c001e828:	6a 00                	push   0x0
c001e82a:	55                   	push   ebp
c001e82b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e82e:	83 c4 10             	add    esp,0x10
c001e831:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e838:	0f 84 8f 00 00 00    	je     c001e8cd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e83e:	eb 18                	jmp    c001e858 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e840:	3c 1c                	cmp    al,0x1c
c001e842:	74 0c                	je     c001e850 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e844:	e4 60                	in     al,0x60
c001e846:	3c 5a                	cmp    al,0x5a
c001e848:	75 f6                	jne    c001e840 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e84a:	eb 04                	jmp    c001e850 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e84c:	3c 1c                	cmp    al,0x1c
c001e84e:	75 d1                	jne    c001e821 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e850:	e4 60                	in     al,0x60
c001e852:	3c 5a                	cmp    al,0x5a
c001e854:	74 fa                	je     c001e850 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e856:	eb f4                	jmp    c001e84c <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e858:	83 ec 0c             	sub    esp,0xc
c001e85b:	68 dd 73 02 c0       	push   0xc00273dd
c001e860:	e8 dc b5 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e865:	83 c4 10             	add    esp,0x10
c001e868:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e86f:	75 5c                	jne    c001e8cd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e871:	e4 60                	in     al,0x60
c001e873:	3c 5a                	cmp    al,0x5a
c001e875:	74 04                	je     c001e87b <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e877:	3c 1c                	cmp    al,0x1c
c001e879:	75 f6                	jne    c001e871 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e87b:	e4 60                	in     al,0x60
c001e87d:	3c 5a                	cmp    al,0x5a
c001e87f:	74 fa                	je     c001e87b <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e881:	3c 1c                	cmp    al,0x1c
c001e883:	74 f6                	je     c001e87b <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e885:	eb 46                	jmp    c001e8cd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e887:	83 ec 0c             	sub    esp,0xc
c001e88a:	68 58 01 00 00       	push   0x158
c001e88f:	e8 53 b5 fe ff       	call   c0009de7 <malloc>
c001e894:	89 c5                	mov    ebp,eax
c001e896:	58                   	pop    eax
c001e897:	5a                   	pop    edx
c001e898:	68 e4 73 02 c0       	push   0xc00273e4
c001e89d:	55                   	push   ebp
c001e89e:	e8 ad 00 ff ff       	call   c000e950 <DriverlessDevice::DriverlessDevice(char const*)>
c001e8a3:	59                   	pop    ecx
c001e8a4:	5e                   	pop    esi
c001e8a5:	55                   	push   ebp
c001e8a6:	53                   	push   ebx
c001e8a7:	e8 9a fd fe ff       	call   c000e646 <Device::addChild(Device*)>
c001e8ac:	83 c4 10             	add    esp,0x10
c001e8af:	b9 09 00 00 00       	mov    ecx,0x9
c001e8b4:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e8b8:	fc                   	cld    
c001e8b9:	89 fe                	mov    esi,edi
c001e8bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e8bd:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e8c1:	83 c4 1c             	add    esp,0x1c
c001e8c4:	5b                   	pop    ebx
c001e8c5:	5e                   	pop    esi
c001e8c6:	5f                   	pop    edi
c001e8c7:	5d                   	pop    ebp
c001e8c8:	e9 8b fc fe ff       	jmp    c000e558 <Device::preOpenPCI(PCIDeviceInfo)>
c001e8cd:	83 c4 1c             	add    esp,0x1c
c001e8d0:	5b                   	pop    ebx
c001e8d1:	5e                   	pop    esi
c001e8d2:	5f                   	pop    edi
c001e8d3:	5d                   	pop    ebp
c001e8d4:	c3                   	ret    
c001e8d5:	90                   	nop

c001e8d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e8d6:	55                   	push   ebp
c001e8d7:	57                   	push   edi
c001e8d8:	56                   	push   esi
c001e8d9:	53                   	push   ebx
c001e8da:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e8e0:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e8e7:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e8ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e8f2:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e8f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e8fd:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e904:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e908:	68 fe 73 02 c0       	push   0xc00273fe
c001e90d:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e911:	53                   	push   ebx
c001e912:	e8 39 1e fe ff       	call   c0000750 <strcpy>
c001e917:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e91c:	b2 64                	mov    dl,0x64
c001e91e:	89 c8                	mov    eax,ecx
c001e920:	f6 f2                	div    dl
c001e922:	b2 0a                	mov    dl,0xa
c001e924:	83 c0 30             	add    eax,0x30
c001e927:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e92b:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e92f:	83 c4 10             	add    esp,0x10
c001e932:	89 c8                	mov    eax,ecx
c001e934:	f6 f2                	div    dl
c001e936:	89 c1                	mov    ecx,eax
c001e938:	0f b6 c0             	movzx  eax,al
c001e93b:	88 e9                	mov    cl,ch
c001e93d:	f6 f2                	div    dl
c001e93f:	88 e0                	mov    al,ah
c001e941:	83 c0 30             	add    eax,0x30
c001e944:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e948:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e94c:	8d 41 30             	lea    eax,[ecx+0x30]
c001e94f:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e953:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e957:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e95c:	f6 f2                	div    dl
c001e95e:	89 c1                	mov    ecx,eax
c001e960:	0f b6 c0             	movzx  eax,al
c001e963:	88 e9                	mov    cl,ch
c001e965:	f6 f2                	div    dl
c001e967:	88 e0                	mov    al,ah
c001e969:	83 c0 30             	add    eax,0x30
c001e96c:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e970:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e974:	8d 41 30             	lea    eax,[ecx+0x30]
c001e977:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e97b:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e97f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e984:	f6 f2                	div    dl
c001e986:	89 c1                	mov    ecx,eax
c001e988:	0f b6 c0             	movzx  eax,al
c001e98b:	88 e9                	mov    cl,ch
c001e98d:	f6 f2                	div    dl
c001e98f:	88 e0                	mov    al,ah
c001e991:	83 c0 30             	add    eax,0x30
c001e994:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e99b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e99f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e9a3:	8d 41 30             	lea    eax,[ecx+0x30]
c001e9a6:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e9aa:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e9ae:	74 29                	je     c001e9d9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	53                   	push   ebx
c001e9b4:	e8 88 b4 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e9b9:	83 c4 10             	add    esp,0x10
c001e9bc:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e9c3:	75 14                	jne    c001e9d9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e9c5:	e4 60                	in     al,0x60
c001e9c7:	3c 1c                	cmp    al,0x1c
c001e9c9:	74 04                	je     c001e9cf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e9cb:	3c 5a                	cmp    al,0x5a
c001e9cd:	75 f6                	jne    c001e9c5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e9cf:	e4 60                	in     al,0x60
c001e9d1:	3c 5a                	cmp    al,0x5a
c001e9d3:	74 fa                	je     c001e9cf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e9d5:	3c 1c                	cmp    al,0x1c
c001e9d7:	74 f6                	je     c001e9cf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e9d9:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e9de:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e9e3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e9e8:	83 ec 0c             	sub    esp,0xc
c001e9eb:	6a 0c                	push   0xc
c001e9ed:	56                   	push   esi
c001e9ee:	53                   	push   ebx
c001e9ef:	57                   	push   edi
c001e9f0:	55                   	push   ebp
c001e9f1:	e8 68 f3 ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e9f6:	83 c4 20             	add    esp,0x20
c001e9f9:	56                   	push   esi
c001e9fa:	53                   	push   ebx
c001e9fb:	57                   	push   edi
c001e9fc:	55                   	push   ebp
c001e9fd:	e8 50 f4 ff ff       	call   c001de52 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ea02:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001ea07:	56                   	push   esi
c001ea08:	53                   	push   ebx
c001ea09:	57                   	push   edi
c001ea0a:	55                   	push   ebp
c001ea0b:	e8 d8 f4 ff ff       	call   c001dee8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ea10:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001ea14:	83 c4 14             	add    esp,0x14
c001ea17:	6a 3c                	push   0x3c
c001ea19:	56                   	push   esi
c001ea1a:	53                   	push   ebx
c001ea1b:	57                   	push   edi
c001ea1c:	55                   	push   ebp
c001ea1d:	e8 3c f3 ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea22:	0f b6 c4             	movzx  eax,ah
c001ea25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ea29:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001ea2d:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001ea34:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001ea39:	83 c4 20             	add    esp,0x20
c001ea3c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ea42:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001ea49:	0f 84 38 01 00 00    	je     c001eb87 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001ea4f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ea57:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001ea5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea60:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ea66:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001ea6c:	0f 8e 15 01 00 00    	jle    c001eb87 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001ea72:	50                   	push   eax
c001ea73:	50                   	push   eax
c001ea74:	68 19 74 02 c0       	push   0xc0027419
c001ea79:	8d 44 24 68          	lea    eax,[esp+0x68]
c001ea7d:	50                   	push   eax
c001ea7e:	e8 cd 1c fe ff       	call   c0000750 <strcpy>
c001ea83:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001ea87:	b9 0a 00 00 00       	mov    ecx,0xa
c001ea8c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ea90:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ea94:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001ea98:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001ea9c:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001eaa0:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001eaa4:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001eaa8:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001eaac:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001eab0:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001eab4:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001eab8:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001eabc:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001eac0:	83 c4 10             	add    esp,0x10
c001eac3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eac7:	99                   	cdq    
c001eac8:	f7 f9                	idiv   ecx
c001eaca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001eace:	99                   	cdq    
c001eacf:	f7 f9                	idiv   ecx
c001ead1:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001ead5:	83 c2 30             	add    edx,0x30
c001ead8:	83 c0 30             	add    eax,0x30
c001eadb:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001eadf:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001eae3:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001eaea:	74 2d                	je     c001eb19 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001eaec:	83 ec 0c             	sub    esp,0xc
c001eaef:	8d 44 24 68          	lea    eax,[esp+0x68]
c001eaf3:	50                   	push   eax
c001eaf4:	e8 48 b3 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001eaf9:	83 c4 10             	add    esp,0x10
c001eafc:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001eb03:	75 14                	jne    c001eb19 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001eb05:	e4 60                	in     al,0x60
c001eb07:	3c 5a                	cmp    al,0x5a
c001eb09:	74 04                	je     c001eb0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb0b:	3c 1c                	cmp    al,0x1c
c001eb0d:	75 f6                	jne    c001eb05 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001eb0f:	e4 60                	in     al,0x60
c001eb11:	3c 5a                	cmp    al,0x5a
c001eb13:	74 fa                	je     c001eb0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb15:	3c 1c                	cmp    al,0x1c
c001eb17:	74 f6                	je     c001eb0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eb1d:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001eb22:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eb28:	8d 04 d0             	lea    eax,[eax+edx*8]
c001eb2b:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001eb32:	39 d3                	cmp    ebx,edx
c001eb34:	75 48                	jne    c001eb7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001eb36:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001eb3d:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001eb41:	75 3b                	jne    c001eb7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001eb43:	83 ec 0c             	sub    esp,0xc
c001eb46:	68 48 74 02 c0       	push   0xc0027448
c001eb4b:	e8 83 e5 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001eb50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb54:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001eb59:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eb5f:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001eb67:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001eb6b:	50                   	push   eax
c001eb6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001eb70:	53                   	push   ebx
c001eb71:	68 6d 74 02 c0       	push   0xc002746d
c001eb76:	e8 58 e5 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001eb7b:	83 c4 20             	add    esp,0x20
c001eb7e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001eb82:	e9 d0 fe ff ff       	jmp    c001ea57 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001eb87:	31 d2                	xor    edx,edx
c001eb89:	83 ec 0c             	sub    esp,0xc
c001eb8c:	56                   	push   esi
c001eb8d:	53                   	push   ebx
c001eb8e:	57                   	push   edi
c001eb8f:	52                   	push   edx
c001eb90:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001eb94:	55                   	push   ebp
c001eb95:	e8 9a f3 ff ff       	call   c001df34 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001eb9a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001eb9e:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001eba5:	42                   	inc    edx
c001eba6:	83 c4 20             	add    esp,0x20
c001eba9:	83 fa 06             	cmp    edx,0x6
c001ebac:	75 db                	jne    c001eb89 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001ebae:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001ebb3:	83 ec 0c             	sub    esp,0xc
c001ebb6:	86 e0                	xchg   al,ah
c001ebb8:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001ebc0:	6a 02                	push   0x2
c001ebc2:	56                   	push   esi
c001ebc3:	53                   	push   ebx
c001ebc4:	57                   	push   edi
c001ebc5:	55                   	push   ebp
c001ebc6:	e8 93 f1 ff ff       	call   c001dd5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ebcb:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001ebd3:	83 c4 20             	add    esp,0x20
c001ebd6:	56                   	push   esi
c001ebd7:	53                   	push   ebx
c001ebd8:	57                   	push   edi
c001ebd9:	55                   	push   ebp
c001ebda:	e8 bd f2 ff ff       	call   c001de9c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ebdf:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001ebe6:	56                   	push   esi
c001ebe7:	53                   	push   ebx
c001ebe8:	57                   	push   edi
c001ebe9:	55                   	push   ebp
c001ebea:	e8 17 f2 ff ff       	call   c001de06 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ebef:	b9 09 00 00 00       	mov    ecx,0x9
c001ebf4:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001ebfc:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001ec00:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001ec07:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ec0b:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001ec12:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ec16:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001ec1d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ec21:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001ec28:	83 ec 0c             	sub    esp,0xc
c001ec2b:	fc                   	cld    
c001ec2c:	89 e7                	mov    edi,esp
c001ec2e:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001ec35:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ec37:	55                   	push   ebp
c001ec38:	e8 59 f8 ff ff       	call   c001e496 <PCI::foundDevice(PCIDeviceInfo)>
c001ec3d:	81 c4 dc 00 00 00    	add    esp,0xdc
c001ec43:	5b                   	pop    ebx
c001ec44:	5e                   	pop    esi
c001ec45:	5f                   	pop    edi
c001ec46:	5d                   	pop    ebp
c001ec47:	c3                   	ret    

c001ec48 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ec48:	55                   	push   ebp
c001ec49:	57                   	push   edi
c001ec4a:	56                   	push   esi
c001ec4b:	53                   	push   ebx
c001ec4c:	83 ec 0c             	sub    esp,0xc
c001ec4f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ec53:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ec58:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ec5d:	6a 00                	push   0x0
c001ec5f:	56                   	push   esi
c001ec60:	57                   	push   edi
c001ec61:	55                   	push   ebp
c001ec62:	e8 9f f1 ff ff       	call   c001de06 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ec67:	6a 00                	push   0x0
c001ec69:	56                   	push   esi
c001ec6a:	57                   	push   edi
c001ec6b:	55                   	push   ebp
c001ec6c:	e8 65 fc ff ff       	call   c001e8d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ec71:	83 c4 20             	add    esp,0x20
c001ec74:	6a 00                	push   0x0
c001ec76:	56                   	push   esi
c001ec77:	57                   	push   edi
c001ec78:	55                   	push   ebp
c001ec79:	e8 ac f1 ff ff       	call   c001de2a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ec7e:	83 c4 10             	add    esp,0x10
c001ec81:	84 c0                	test   al,al
c001ec83:	79 27                	jns    c001ecac <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ec85:	bb 01 00 00 00       	mov    ebx,0x1
c001ec8a:	53                   	push   ebx
c001ec8b:	56                   	push   esi
c001ec8c:	57                   	push   edi
c001ec8d:	55                   	push   ebp
c001ec8e:	e8 73 f1 ff ff       	call   c001de06 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ec93:	83 c4 10             	add    esp,0x10
c001ec96:	66 40                	inc    ax
c001ec98:	74 0c                	je     c001eca6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001ec9a:	53                   	push   ebx
c001ec9b:	56                   	push   esi
c001ec9c:	57                   	push   edi
c001ec9d:	55                   	push   ebp
c001ec9e:	e8 33 fc ff ff       	call   c001e8d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001eca3:	83 c4 10             	add    esp,0x10
c001eca6:	43                   	inc    ebx
c001eca7:	83 fb 08             	cmp    ebx,0x8
c001ecaa:	75 de                	jne    c001ec8a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ecac:	83 c4 0c             	add    esp,0xc
c001ecaf:	5b                   	pop    ebx
c001ecb0:	5e                   	pop    esi
c001ecb1:	5f                   	pop    edi
c001ecb2:	5d                   	pop    ebp
c001ecb3:	c3                   	ret    

c001ecb4 <PCI::detect()>:
c001ecb4:	56                   	push   esi
c001ecb5:	53                   	push   ebx
c001ecb6:	53                   	push   ebx
c001ecb7:	31 db                	xor    ebx,ebx
c001ecb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ecbd:	6a 00                	push   0x0
c001ecbf:	6a 00                	push   0x0
c001ecc1:	6a 00                	push   0x0
c001ecc3:	56                   	push   esi
c001ecc4:	e8 61 f1 ff ff       	call   c001de2a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ecc9:	83 c4 10             	add    esp,0x10
c001eccc:	a8 80                	test   al,0x80
c001ecce:	75 21                	jne    c001ecf1 <PCI::detect()+0x3d>
c001ecd0:	51                   	push   ecx
c001ecd1:	51                   	push   ecx
c001ecd2:	6a 00                	push   0x0
c001ecd4:	56                   	push   esi
c001ecd5:	e8 98 f7 ff ff       	call   c001e472 <PCI::checkBus(unsigned char)>
c001ecda:	83 c4 10             	add    esp,0x10
c001ecdd:	eb 24                	jmp    c001ed03 <PCI::detect()+0x4f>
c001ecdf:	52                   	push   edx
c001ece0:	52                   	push   edx
c001ece1:	53                   	push   ebx
c001ece2:	43                   	inc    ebx
c001ece3:	56                   	push   esi
c001ece4:	e8 89 f7 ff ff       	call   c001e472 <PCI::checkBus(unsigned char)>
c001ece9:	83 c4 10             	add    esp,0x10
c001ecec:	83 fb 08             	cmp    ebx,0x8
c001ecef:	74 12                	je     c001ed03 <PCI::detect()+0x4f>
c001ecf1:	53                   	push   ebx
c001ecf2:	6a 00                	push   0x0
c001ecf4:	6a 00                	push   0x0
c001ecf6:	56                   	push   esi
c001ecf7:	e8 0a f1 ff ff       	call   c001de06 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ecfc:	83 c4 10             	add    esp,0x10
c001ecff:	66 40                	inc    ax
c001ed01:	74 dc                	je     c001ecdf <PCI::detect()+0x2b>
c001ed03:	58                   	pop    eax
c001ed04:	5b                   	pop    ebx
c001ed05:	5e                   	pop    esi
c001ed06:	c3                   	ret    
c001ed07:	90                   	nop

c001ed08 <IDE::close(int, int, void*)>:
c001ed08:	83 c8 ff             	or     eax,0xffffffff
c001ed0b:	c3                   	ret    

c001ed0c <IDE::IDE()>:
c001ed0c:	83 ec 0c             	sub    esp,0xc
c001ed0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed13:	83 ec 08             	sub    esp,0x8
c001ed16:	68 b4 74 02 c0       	push   0xc00274b4
c001ed1b:	50                   	push   eax
c001ed1c:	e8 d3 fc fe ff       	call   c000e9f4 <HardDiskController::HardDiskController(char const*)>
c001ed21:	83 c4 10             	add    esp,0x10
c001ed24:	ba 60 75 02 c0       	mov    edx,0xc0027560
c001ed29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2d:	89 10                	mov    DWORD PTR [eax],edx
c001ed2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed33:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ed3a:	90                   	nop
c001ed3b:	83 c4 0c             	add    esp,0xc
c001ed3e:	c3                   	ret    
c001ed3f:	90                   	nop

c001ed40 <IDE::prepareInterrupt(unsigned char)>:
c001ed40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ed45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ed49:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ed51:	c3                   	ret    

c001ed52 <selectDrive(unsigned char, unsigned char)>:
c001ed52:	c3                   	ret    
c001ed53:	90                   	nop

c001ed54 <IDE::getBase(unsigned char)>:
c001ed54:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ed59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed5d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ed65:	c3                   	ret    

c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ed66:	55                   	push   ebp
c001ed67:	57                   	push   edi
c001ed68:	56                   	push   esi
c001ed69:	53                   	push   ebx
c001ed6a:	83 ec 1c             	sub    esp,0x1c
c001ed6d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ed71:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ed75:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ed78:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ed7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ed80:	80 f9 03             	cmp    cl,0x3
c001ed83:	77 51                	ja     c001edd6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001ed85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed89:	0f b6 f2             	movzx  esi,dl
c001ed8c:	0f b6 db             	movzx  ebx,bl
c001ed8f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ed92:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001ed96:	83 ca 80             	or     edx,0xffffff80
c001ed99:	0f b6 d2             	movzx  edx,dl
c001ed9c:	52                   	push   edx
c001ed9d:	6a 0c                	push   0xc
c001ed9f:	56                   	push   esi
c001eda0:	57                   	push   edi
c001eda1:	e8 c0 ff ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eda6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001edab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edaf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001edb3:	ee                   	out    dx,al
c001edb4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001edb9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001edbd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001edc1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001edc5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001edcd:	83 c4 2c             	add    esp,0x2c
c001edd0:	5b                   	pop    ebx
c001edd1:	5e                   	pop    esi
c001edd2:	5f                   	pop    edi
c001edd3:	5d                   	pop    ebp
c001edd4:	eb 90                	jmp    c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edd6:	80 fb 07             	cmp    bl,0x7
c001edd9:	77 12                	ja     c001eded <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001eddb:	0f b6 d2             	movzx  edx,dl
c001edde:	0f b6 db             	movzx  ebx,bl
c001ede1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001ede9:	89 da                	mov    edx,ebx
c001edeb:	eb 2f                	jmp    c001ee1c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001eded:	80 fb 0d             	cmp    bl,0xd
c001edf0:	77 13                	ja     c001ee05 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001edf2:	0f b6 d2             	movzx  edx,dl
c001edf5:	0f b6 db             	movzx  ebx,bl
c001edf8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001edff:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ee03:	eb 17                	jmp    c001ee1c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ee05:	80 fb 15             	cmp    bl,0x15
c001ee08:	77 13                	ja     c001ee1d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ee0a:	0f b6 d2             	movzx  edx,dl
c001ee0d:	0f b6 db             	movzx  ebx,bl
c001ee10:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ee18:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ee1c:	ee                   	out    dx,al
c001ee1d:	83 c4 1c             	add    esp,0x1c
c001ee20:	5b                   	pop    ebx
c001ee21:	5e                   	pop    esi
c001ee22:	5f                   	pop    edi
c001ee23:	5d                   	pop    ebp
c001ee24:	c3                   	ret    
c001ee25:	90                   	nop

c001ee26 <IDE::read(unsigned char, unsigned char)>:
c001ee26:	55                   	push   ebp
c001ee27:	57                   	push   edi
c001ee28:	56                   	push   esi
c001ee29:	53                   	push   ebx
c001ee2a:	83 ec 1c             	sub    esp,0x1c
c001ee2d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ee31:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee35:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ee38:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ee3c:	3c 03                	cmp    al,0x3
c001ee3e:	77 43                	ja     c001ee83 <IDE::read(unsigned char, unsigned char)+0x5d>
c001ee40:	0f b6 f2             	movzx  esi,dl
c001ee43:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ee46:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001ee4a:	83 c8 80             	or     eax,0xffffff80
c001ee4d:	0f b6 c0             	movzx  eax,al
c001ee50:	50                   	push   eax
c001ee51:	6a 0c                	push   0xc
c001ee53:	56                   	push   esi
c001ee54:	57                   	push   edi
c001ee55:	e8 0c ff ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee5a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001ee5f:	0f b6 c3             	movzx  eax,bl
c001ee62:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001ee66:	ec                   	in     al,dx
c001ee67:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ee6b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ee70:	52                   	push   edx
c001ee71:	6a 0c                	push   0xc
c001ee73:	56                   	push   esi
c001ee74:	57                   	push   edi
c001ee75:	e8 ec fe ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee7a:	83 c4 20             	add    esp,0x20
c001ee7d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ee81:	eb 49                	jmp    c001eecc <IDE::read(unsigned char, unsigned char)+0xa6>
c001ee83:	80 fb 07             	cmp    bl,0x7
c001ee86:	77 12                	ja     c001ee9a <IDE::read(unsigned char, unsigned char)+0x74>
c001ee88:	0f b6 d2             	movzx  edx,dl
c001ee8b:	0f b6 c3             	movzx  eax,bl
c001ee8e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001ee96:	89 c2                	mov    edx,eax
c001ee98:	eb 31                	jmp    c001eecb <IDE::read(unsigned char, unsigned char)+0xa5>
c001ee9a:	80 fb 0d             	cmp    bl,0xd
c001ee9d:	77 13                	ja     c001eeb2 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ee9f:	0f b6 d2             	movzx  edx,dl
c001eea2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001eea9:	0f b6 d3             	movzx  edx,bl
c001eeac:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001eeb0:	eb 19                	jmp    c001eecb <IDE::read(unsigned char, unsigned char)+0xa5>
c001eeb2:	31 c0                	xor    eax,eax
c001eeb4:	80 fb 15             	cmp    bl,0x15
c001eeb7:	77 13                	ja     c001eecc <IDE::read(unsigned char, unsigned char)+0xa6>
c001eeb9:	0f b6 d2             	movzx  edx,dl
c001eebc:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001eec4:	0f b6 d3             	movzx  edx,bl
c001eec7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001eecb:	ec                   	in     al,dx
c001eecc:	83 c4 1c             	add    esp,0x1c
c001eecf:	5b                   	pop    ebx
c001eed0:	5e                   	pop    esi
c001eed1:	5f                   	pop    edi
c001eed2:	5d                   	pop    ebp
c001eed3:	c3                   	ret    

c001eed4 <IDE::waitInterrupt(unsigned char)>:
c001eed4:	55                   	push   ebp
c001eed5:	57                   	push   edi
c001eed6:	56                   	push   esi
c001eed7:	53                   	push   ebx
c001eed8:	31 db                	xor    ebx,ebx
c001eeda:	83 ec 0c             	sub    esp,0xc
c001eedd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001eee1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001eee6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001eeee:	89 e8                	mov    eax,ebp
c001eef0:	84 c0                	test   al,al
c001eef2:	75 30                	jne    c001ef24 <IDE::waitInterrupt(unsigned char)+0x50>
c001eef4:	50                   	push   eax
c001eef5:	6a 0c                	push   0xc
c001eef7:	56                   	push   esi
c001eef8:	57                   	push   edi
c001eef9:	e8 28 ff ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001eefe:	83 c4 10             	add    esp,0x10
c001ef01:	a8 01                	test   al,0x1
c001ef03:	75 27                	jne    c001ef2c <IDE::waitInterrupt(unsigned char)+0x58>
c001ef05:	f6 c3 04             	test   bl,0x4
c001ef08:	75 12                	jne    c001ef1c <IDE::waitInterrupt(unsigned char)+0x48>
c001ef0a:	83 fb 32             	cmp    ebx,0x32
c001ef0d:	7e 0d                	jle    c001ef1c <IDE::waitInterrupt(unsigned char)+0x48>
c001ef0f:	83 ec 0c             	sub    esp,0xc
c001ef12:	6a 64                	push   0x64
c001ef14:	e8 db a2 ff ff       	call   c00191f4 <milliTenthSleep(unsigned int)>
c001ef19:	83 c4 10             	add    esp,0x10
c001ef1c:	83 fb 3c             	cmp    ebx,0x3c
c001ef1f:	74 0b                	je     c001ef2c <IDE::waitInterrupt(unsigned char)+0x58>
c001ef21:	43                   	inc    ebx
c001ef22:	eb c2                	jmp    c001eee6 <IDE::waitInterrupt(unsigned char)+0x12>
c001ef24:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ef2c:	83 c4 0c             	add    esp,0xc
c001ef2f:	89 e8                	mov    eax,ebp
c001ef31:	5b                   	pop    ebx
c001ef32:	5e                   	pop    esi
c001ef33:	5f                   	pop    edi
c001ef34:	5d                   	pop    ebp
c001ef35:	c3                   	ret    

c001ef36 <ideChannel0IRQHandler(regs*, void*)>:
c001ef36:	83 ec 10             	sub    esp,0x10
c001ef39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef3d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ef44:	6a 07                	push   0x7
c001ef46:	6a 00                	push   0x0
c001ef48:	50                   	push   eax
c001ef49:	e8 d8 fe ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001ef4e:	83 c4 1c             	add    esp,0x1c
c001ef51:	c3                   	ret    

c001ef52 <ideChannel1IRQHandler(regs*, void*)>:
c001ef52:	83 ec 10             	sub    esp,0x10
c001ef55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef59:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ef60:	6a 07                	push   0x7
c001ef62:	6a 01                	push   0x1
c001ef64:	50                   	push   eax
c001ef65:	e8 bc fe ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001ef6a:	83 c4 1c             	add    esp,0x1c
c001ef6d:	c3                   	ret    

c001ef6e <IDE::enableIRQs(unsigned char, bool)>:
c001ef6e:	57                   	push   edi
c001ef6f:	56                   	push   esi
c001ef70:	be 04 00 00 00       	mov    esi,0x4
c001ef75:	53                   	push   ebx
c001ef76:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ef7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ef7f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ef84:	0f 94 c0             	sete   al
c001ef87:	d1 e0                	shl    eax,1
c001ef89:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001ef90:	0f b6 c0             	movzx  eax,al
c001ef93:	50                   	push   eax
c001ef94:	6a 0c                	push   0xc
c001ef96:	57                   	push   edi
c001ef97:	53                   	push   ebx
c001ef98:	e8 c9 fd ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef9d:	83 c4 10             	add    esp,0x10
c001efa0:	50                   	push   eax
c001efa1:	6a 0c                	push   0xc
c001efa3:	57                   	push   edi
c001efa4:	53                   	push   ebx
c001efa5:	e8 7c fe ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001efaa:	83 c4 10             	add    esp,0x10
c001efad:	4e                   	dec    esi
c001efae:	75 f0                	jne    c001efa0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001efb0:	5b                   	pop    ebx
c001efb1:	5e                   	pop    esi
c001efb2:	5f                   	pop    edi
c001efb3:	c3                   	ret    

c001efb4 <IDE::open(int, int, void*)>:
c001efb4:	55                   	push   ebp
c001efb5:	57                   	push   edi
c001efb6:	56                   	push   esi
c001efb7:	53                   	push   ebx
c001efb8:	83 ec 1c             	sub    esp,0x1c
c001efbb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001efbf:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001efc8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001efd1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001efd8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001efdf:	0f 85 cb 02 00 00    	jne    c001f2b0 <IDE::open(int, int, void*)+0x2fc>
c001efe5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001efeb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001efef:	83 e0 7f             	and    eax,0x7f
c001eff2:	3c 05                	cmp    al,0x5
c001eff4:	74 04                	je     c001effa <IDE::open(int, int, void*)+0x46>
c001eff6:	3c 0f                	cmp    al,0xf
c001eff8:	75 32                	jne    c001f02c <IDE::open(int, int, void*)+0x78>
c001effa:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001f000:	83 e0 fc             	and    eax,0xfffffffc
c001f003:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f00a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001f010:	83 e0 fc             	and    eax,0xfffffffc
c001f013:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f01a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001f020:	83 e0 fc             	and    eax,0xfffffffc
c001f023:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f02a:	eb 14                	jmp    c001f040 <IDE::open(int, int, void*)+0x8c>
c001f02c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001f036:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001f040:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f047:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001f04e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f052:	89 c6                	mov    esi,eax
c001f054:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f059:	c1 e6 10             	shl    esi,0x10
c001f05c:	89 e8                	mov    eax,ebp
c001f05e:	89 fa                	mov    edx,edi
c001f060:	c1 e0 0b             	shl    eax,0xb
c001f063:	09 f0                	or     eax,esi
c001f065:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001f06c:	c1 e6 08             	shl    esi,0x8
c001f06f:	09 c6                	or     esi,eax
c001f071:	89 f0                	mov    eax,esi
c001f073:	0d 08 00 00 80       	or     eax,0x80000008
c001f078:	ef                   	out    dx,eax
c001f079:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001f07e:	89 ca                	mov    edx,ecx
c001f080:	ed                   	in     eax,dx
c001f081:	c1 e8 10             	shr    eax,0x10
c001f084:	3d ff ff 00 00       	cmp    eax,0xffff
c001f089:	0f 84 f5 00 00 00    	je     c001f184 <IDE::open(int, int, void*)+0x1d0>
c001f08f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001f095:	89 fa                	mov    edx,edi
c001f097:	89 f0                	mov    eax,esi
c001f099:	ef                   	out    dx,eax
c001f09a:	b0 fe                	mov    al,0xfe
c001f09c:	89 ca                	mov    edx,ecx
c001f09e:	ee                   	out    dx,al
c001f09f:	89 f0                	mov    eax,esi
c001f0a1:	89 fa                	mov    edx,edi
c001f0a3:	ef                   	out    dx,eax
c001f0a4:	89 ca                	mov    edx,ecx
c001f0a6:	ed                   	in     eax,dx
c001f0a7:	3c fe                	cmp    al,0xfe
c001f0a9:	0f 85 a9 00 00 00    	jne    c001f158 <IDE::open(int, int, void*)+0x1a4>
c001f0af:	8b 15 c8 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028bc8
c001f0b5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001f0bc:	74 33                	je     c001f0f1 <IDE::open(int, int, void*)+0x13d>
c001f0be:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001f0c4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001f0c8:	40                   	inc    eax
c001f0c9:	83 ec 0c             	sub    esp,0xc
c001f0cc:	0f b6 c0             	movzx  eax,al
c001f0cf:	50                   	push   eax
c001f0d0:	55                   	push   ebp
c001f0d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f0d5:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001f0db:	51                   	push   ecx
c001f0dc:	e8 e3 35 ff ff       	call   c00126c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001f0e1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001f0e6:	83 c4 1c             	add    esp,0x1c
c001f0e9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f0ef:	eb 0a                	jmp    c001f0fb <IDE::open(int, int, void*)+0x147>
c001f0f1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001f0fb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f102:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f109:	c1 e1 10             	shl    ecx,0x10
c001f10c:	c1 e0 08             	shl    eax,0x8
c001f10f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f114:	09 c1                	or     ecx,eax
c001f116:	89 fa                	mov    edx,edi
c001f118:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f11f:	c1 e0 0b             	shl    eax,0xb
c001f122:	09 c1                	or     ecx,eax
c001f124:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f12a:	89 c8                	mov    eax,ecx
c001f12c:	ef                   	out    dx,eax
c001f12d:	be fc 0c 00 00       	mov    esi,0xcfc
c001f132:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001f138:	89 f2                	mov    edx,esi
c001f13a:	ee                   	out    dx,al
c001f13b:	89 c8                	mov    eax,ecx
c001f13d:	89 fa                	mov    edx,edi
c001f13f:	ef                   	out    dx,eax
c001f140:	89 f2                	mov    edx,esi
c001f142:	ed                   	in     eax,dx
c001f143:	0f b6 c0             	movzx  eax,al
c001f146:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001f14c:	74 46                	je     c001f194 <IDE::open(int, int, void*)+0x1e0>
c001f14e:	83 ec 0c             	sub    esp,0xc
c001f151:	68 cc 74 02 c0       	push   0xc00274cc
c001f156:	eb 34                	jmp    c001f18c <IDE::open(int, int, void*)+0x1d8>
c001f158:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001f161:	75 17                	jne    c001f17a <IDE::open(int, int, void*)+0x1c6>
c001f163:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001f168:	74 07                	je     c001f171 <IDE::open(int, int, void*)+0x1bd>
c001f16a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001f16f:	75 09                	jne    c001f17a <IDE::open(int, int, void*)+0x1c6>
c001f171:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f178:	eb 1a                	jmp    c001f194 <IDE::open(int, int, void*)+0x1e0>
c001f17a:	83 ec 0c             	sub    esp,0xc
c001f17d:	68 d4 74 02 c0       	push   0xc00274d4
c001f182:	eb 08                	jmp    c001f18c <IDE::open(int, int, void*)+0x1d8>
c001f184:	83 ec 0c             	sub    esp,0xc
c001f187:	68 05 75 02 c0       	push   0xc0027505
c001f18c:	e8 24 60 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c001f191:	83 c4 10             	add    esp,0x10
c001f194:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001f19b:	79 1a                	jns    c001f1b7 <IDE::open(int, int, void*)+0x203>
c001f19d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f1a3:	83 e0 fc             	and    eax,0xfffffffc
c001f1a6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f1ad:	83 c0 08             	add    eax,0x8
c001f1b0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f1b7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f1bd:	89 c2                	mov    edx,eax
c001f1bf:	83 e2 0f             	and    edx,0xf
c001f1c2:	66 83 fa 08          	cmp    dx,0x8
c001f1c6:	75 0a                	jne    c001f1d2 <IDE::open(int, int, void*)+0x21e>
c001f1c8:	83 e8 02             	sub    eax,0x2
c001f1cb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f1d2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f1d8:	89 c2                	mov    edx,eax
c001f1da:	83 e2 0f             	and    edx,0xf
c001f1dd:	66 83 fa 08          	cmp    dx,0x8
c001f1e1:	75 0a                	jne    c001f1ed <IDE::open(int, int, void*)+0x239>
c001f1e3:	83 e8 02             	sub    eax,0x2
c001f1e6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f1ed:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001f1f4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f1fb:	89 c8                	mov    eax,ecx
c001f1fd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f200:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f204:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f208:	8d 51 01             	lea    edx,[ecx+0x1]
c001f20b:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f210:	0f b6 d2             	movzx  edx,dl
c001f213:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f21a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f21d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f221:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f225:	8d 48 02             	lea    ecx,[eax+0x2]
c001f228:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f22d:	0f b6 c9             	movzx  ecx,cl
c001f230:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f236:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f239:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f23d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f241:	8d 50 03             	lea    edx,[eax+0x3]
c001f244:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f249:	0f b6 d2             	movzx  edx,dl
c001f24c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f252:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f255:	83 c0 04             	add    eax,0x4
c001f258:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f25c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f260:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f266:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f26b:	56                   	push   esi
c001f26c:	56                   	push   esi
c001f26d:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001f274:	50                   	push   eax
c001f275:	68 2f 75 02 c0       	push   0xc002752f
c001f27a:	e8 54 de fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001f27f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f286:	83 c4 10             	add    esp,0x10
c001f289:	66 85 f6             	test   si,si
c001f28c:	74 5f                	je     c001f2ed <IDE::open(int, int, void*)+0x339>
c001f28e:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f295:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f298:	89 d0                	mov    eax,edx
c001f29a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f29e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f2a2:	40                   	inc    eax
c001f2a3:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f2a9:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f2ae:	eb 3d                	jmp    c001f2ed <IDE::open(int, int, void*)+0x339>
c001f2b0:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f2b6:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f2bd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f2c4:	66 05 06 02          	add    ax,0x206
c001f2c8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f2cf:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f2d6:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f2dd:	66 05 06 02          	add    ax,0x206
c001f2e1:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f2e8:	e9 ca fe ff ff       	jmp    c001f1b7 <IDE::open(int, int, void*)+0x203>
c001f2ed:	50                   	push   eax
c001f2ee:	50                   	push   eax
c001f2ef:	6a 00                	push   0x0
c001f2f1:	53                   	push   ebx
c001f2f2:	e8 49 fa ff ff       	call   c001ed40 <IDE::prepareInterrupt(unsigned char)>
c001f2f7:	5a                   	pop    edx
c001f2f8:	59                   	pop    ecx
c001f2f9:	6a 01                	push   0x1
c001f2fb:	53                   	push   ebx
c001f2fc:	e8 3f fa ff ff       	call   c001ed40 <IDE::prepareInterrupt(unsigned char)>
c001f301:	83 c4 0c             	add    esp,0xc
c001f304:	6a 00                	push   0x0
c001f306:	6a 00                	push   0x0
c001f308:	53                   	push   ebx
c001f309:	e8 60 fc ff ff       	call   c001ef6e <IDE::enableIRQs(unsigned char, bool)>
c001f30e:	83 c4 0c             	add    esp,0xc
c001f311:	6a 00                	push   0x0
c001f313:	6a 01                	push   0x1
c001f315:	53                   	push   ebx
c001f316:	e8 53 fc ff ff       	call   c001ef6e <IDE::enableIRQs(unsigned char, bool)>
c001f31b:	83 c4 10             	add    esp,0x10
c001f31e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f325:	74 34                	je     c001f35b <IDE::open(int, int, void*)+0x3a7>
c001f327:	83 ec 0c             	sub    esp,0xc
c001f32a:	53                   	push   ebx
c001f32b:	6a 01                	push   0x1
c001f32d:	68 36 ef 01 c0       	push   0xc001ef36
c001f332:	6a 0e                	push   0xe
c001f334:	53                   	push   ebx
c001f335:	e8 84 f2 fe ff       	call   c000e5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f33a:	83 c4 14             	add    esp,0x14
c001f33d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f343:	53                   	push   ebx
c001f344:	6a 01                	push   0x1
c001f346:	68 52 ef 01 c0       	push   0xc001ef52
c001f34b:	6a 0f                	push   0xf
c001f34d:	53                   	push   ebx
c001f34e:	e8 6b f2 fe ff       	call   c000e5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f353:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f359:	eb 38                	jmp    c001f393 <IDE::open(int, int, void*)+0x3df>
c001f35b:	83 ec 0c             	sub    esp,0xc
c001f35e:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f368:	53                   	push   ebx
c001f369:	6a 00                	push   0x0
c001f36b:	68 36 ef 01 c0       	push   0xc001ef36
c001f370:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f376:	53                   	push   ebx
c001f377:	e8 42 f2 fe ff       	call   c000e5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f37c:	83 c4 14             	add    esp,0x14
c001f37f:	53                   	push   ebx
c001f380:	6a 00                	push   0x0
c001f382:	68 52 ef 01 c0       	push   0xc001ef52
c001f387:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f38d:	53                   	push   ebx
c001f38e:	e8 2b f2 fe ff       	call   c000e5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f393:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f395:	83 c4 20             	add    esp,0x20
c001f398:	83 ec 0c             	sub    esp,0xc
c001f39b:	53                   	push   ebx
c001f39c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f39f:	83 c4 0c             	add    esp,0xc
c001f3a2:	6a 07                	push   0x7
c001f3a4:	6a 00                	push   0x0
c001f3a6:	53                   	push   ebx
c001f3a7:	e8 7a fa ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f3ac:	83 c4 0c             	add    esp,0xc
c001f3af:	6a 07                	push   0x7
c001f3b1:	6a 01                	push   0x1
c001f3b3:	53                   	push   ebx
c001f3b4:	e8 6d fa ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f3b9:	83 c4 0c             	add    esp,0xc
c001f3bc:	6a 01                	push   0x1
c001f3be:	6a 00                	push   0x0
c001f3c0:	53                   	push   ebx
c001f3c1:	e8 a8 fb ff ff       	call   c001ef6e <IDE::enableIRQs(unsigned char, bool)>
c001f3c6:	83 c4 0c             	add    esp,0xc
c001f3c9:	6a 01                	push   0x1
c001f3cb:	6a 01                	push   0x1
c001f3cd:	53                   	push   ebx
c001f3ce:	e8 9b fb ff ff       	call   c001ef6e <IDE::enableIRQs(unsigned char, bool)>
c001f3d3:	83 c4 2c             	add    esp,0x2c
c001f3d6:	31 c0                	xor    eax,eax
c001f3d8:	5b                   	pop    ebx
c001f3d9:	5e                   	pop    esi
c001f3da:	5f                   	pop    edi
c001f3db:	5d                   	pop    ebp
c001f3dc:	c3                   	ret    
c001f3dd:	90                   	nop

c001f3de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f3de:	55                   	push   ebp
c001f3df:	57                   	push   edi
c001f3e0:	56                   	push   esi
c001f3e1:	53                   	push   ebx
c001f3e2:	83 ec 1c             	sub    esp,0x1c
c001f3e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f3e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f3ed:	8d 50 f8             	lea    edx,[eax-0x8]
c001f3f0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f3f4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f3f8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f3fc:	80 fa 03             	cmp    dl,0x3
c001f3ff:	77 5d                	ja     c001f45e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001f401:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f405:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f409:	0f b6 db             	movzx  ebx,bl
c001f40c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f40f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001f413:	83 ca 80             	or     edx,0xffffff80
c001f416:	0f b6 d2             	movzx  edx,dl
c001f419:	52                   	push   edx
c001f41a:	6a 0c                	push   0xc
c001f41c:	53                   	push   ebx
c001f41d:	56                   	push   esi
c001f41e:	e8 43 f9 ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f423:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f428:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f42c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f430:	0f b6 c0             	movzx  eax,al
c001f433:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001f437:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f439:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f43e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f442:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f446:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f44a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f452:	83 c4 2c             	add    esp,0x2c
c001f455:	5b                   	pop    ebx
c001f456:	5e                   	pop    esi
c001f457:	5f                   	pop    edi
c001f458:	5d                   	pop    ebp
c001f459:	e9 08 f9 ff ff       	jmp    c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f45e:	3c 07                	cmp    al,0x7
c001f460:	77 10                	ja     c001f472 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001f462:	0f b6 db             	movzx  ebx,bl
c001f465:	0f b6 d0             	movzx  edx,al
c001f468:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001f470:	eb 2d                	jmp    c001f49f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f472:	3c 0d                	cmp    al,0xd
c001f474:	77 13                	ja     c001f489 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001f476:	0f b6 db             	movzx  ebx,bl
c001f479:	0f b6 c0             	movzx  eax,al
c001f47c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001f483:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001f487:	eb 16                	jmp    c001f49f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f489:	3c 15                	cmp    al,0x15
c001f48b:	77 14                	ja     c001f4a1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001f48d:	0f b6 db             	movzx  ebx,bl
c001f490:	0f b6 c0             	movzx  eax,al
c001f493:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001f49b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001f49f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f4a1:	83 c4 1c             	add    esp,0x1c
c001f4a4:	5b                   	pop    ebx
c001f4a5:	5e                   	pop    esi
c001f4a6:	5f                   	pop    edi
c001f4a7:	5d                   	pop    ebp
c001f4a8:	c3                   	ret    
c001f4a9:	90                   	nop

c001f4aa <IDE::detect()>:
c001f4aa:	55                   	push   ebp
c001f4ab:	57                   	push   edi
c001f4ac:	56                   	push   esi
c001f4ad:	53                   	push   ebx
c001f4ae:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f4b4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001f4bb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001f4c2:	0f 85 97 02 00 00    	jne    c001f75f <IDE::detect()+0x2b5>
c001f4c8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f4cf:	31 f6                	xor    esi,esi
c001f4d1:	31 ed                	xor    ebp,ebp
c001f4d3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f4db:	89 e8                	mov    eax,ebp
c001f4dd:	c1 e0 06             	shl    eax,0x6
c001f4e0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f4e8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f4ec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f4f0:	c1 e0 04             	shl    eax,0x4
c001f4f3:	83 c8 a0             	or     eax,0xffffffa0
c001f4f6:	0f b6 c0             	movzx  eax,al
c001f4f9:	50                   	push   eax
c001f4fa:	6a 06                	push   0x6
c001f4fc:	56                   	push   esi
c001f4fd:	53                   	push   ebx
c001f4fe:	e8 63 f8 ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f503:	83 c4 0c             	add    esp,0xc
c001f506:	6a 0c                	push   0xc
c001f508:	56                   	push   esi
c001f509:	53                   	push   ebx
c001f50a:	e8 17 f9 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f50f:	83 c4 0c             	add    esp,0xc
c001f512:	6a 0c                	push   0xc
c001f514:	56                   	push   esi
c001f515:	53                   	push   ebx
c001f516:	e8 0b f9 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f51b:	83 c4 0c             	add    esp,0xc
c001f51e:	6a 0c                	push   0xc
c001f520:	56                   	push   esi
c001f521:	53                   	push   ebx
c001f522:	e8 ff f8 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f527:	83 c4 0c             	add    esp,0xc
c001f52a:	6a 0c                	push   0xc
c001f52c:	56                   	push   esi
c001f52d:	53                   	push   ebx
c001f52e:	e8 f3 f8 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f533:	68 ec 00 00 00       	push   0xec
c001f538:	6a 07                	push   0x7
c001f53a:	56                   	push   esi
c001f53b:	53                   	push   ebx
c001f53c:	e8 25 f8 ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f541:	83 c4 1c             	add    esp,0x1c
c001f544:	6a 0c                	push   0xc
c001f546:	56                   	push   esi
c001f547:	53                   	push   ebx
c001f548:	e8 d9 f8 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f54d:	83 c4 0c             	add    esp,0xc
c001f550:	6a 0c                	push   0xc
c001f552:	56                   	push   esi
c001f553:	53                   	push   ebx
c001f554:	e8 cd f8 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f559:	83 c4 0c             	add    esp,0xc
c001f55c:	6a 0c                	push   0xc
c001f55e:	56                   	push   esi
c001f55f:	53                   	push   ebx
c001f560:	e8 c1 f8 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f565:	83 c4 0c             	add    esp,0xc
c001f568:	6a 0c                	push   0xc
c001f56a:	56                   	push   esi
c001f56b:	53                   	push   ebx
c001f56c:	e8 b5 f8 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f571:	83 c4 0c             	add    esp,0xc
c001f574:	6a 0c                	push   0xc
c001f576:	56                   	push   esi
c001f577:	53                   	push   ebx
c001f578:	e8 a9 f8 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f57d:	83 c4 10             	add    esp,0x10
c001f580:	84 c0                	test   al,al
c001f582:	0f 84 5f 01 00 00    	je     c001f6e7 <IDE::detect()+0x23d>
c001f588:	31 ff                	xor    edi,edi
c001f58a:	50                   	push   eax
c001f58b:	6a 0c                	push   0xc
c001f58d:	56                   	push   esi
c001f58e:	53                   	push   ebx
c001f58f:	e8 92 f8 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f594:	83 c4 10             	add    esp,0x10
c001f597:	a8 01                	test   al,0x1
c001f599:	0f 85 69 01 00 00    	jne    c001f708 <IDE::detect()+0x25e>
c001f59f:	84 c0                	test   al,al
c001f5a1:	78 04                	js     c001f5a7 <IDE::detect()+0xfd>
c001f5a3:	a8 08                	test   al,0x8
c001f5a5:	75 23                	jne    c001f5ca <IDE::detect()+0x120>
c001f5a7:	47                   	inc    edi
c001f5a8:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f5ae:	7e da                	jle    c001f58a <IDE::detect()+0xe0>
c001f5b0:	83 ec 0c             	sub    esp,0xc
c001f5b3:	6a 32                	push   0x32
c001f5b5:	e8 3a 9c ff ff       	call   c00191f4 <milliTenthSleep(unsigned int)>
c001f5ba:	83 c4 10             	add    esp,0x10
c001f5bd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f5c3:	75 c5                	jne    c001f58a <IDE::detect()+0xe0>
c001f5c5:	e9 3e 01 00 00       	jmp    c001f708 <IDE::detect()+0x25e>
c001f5ca:	31 c9                	xor    ecx,ecx
c001f5cc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f5d0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f5d4:	83 ec 0c             	sub    esp,0xc
c001f5d7:	68 80 00 00 00       	push   0x80
c001f5dc:	57                   	push   edi
c001f5dd:	6a 00                	push   0x0
c001f5df:	56                   	push   esi
c001f5e0:	53                   	push   ebx
c001f5e1:	e8 f8 fd ff ff       	call   c001f3de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f5e6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f5eb:	89 e8                	mov    eax,ebp
c001f5ed:	89 d1                	mov    ecx,edx
c001f5ef:	c1 e0 06             	shl    eax,0x6
c001f5f2:	01 d8                	add    eax,ebx
c001f5f4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f5fb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f602:	89 f2                	mov    edx,esi
c001f604:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f60a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f60e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f614:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f618:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f61f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f627:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f62e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f636:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f63c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f643:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f649:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f64d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f651:	83 c4 20             	add    esp,0x20
c001f654:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f657:	83 c0 02             	add    eax,0x2
c001f65a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f660:	83 c7 02             	add    edi,0x2
c001f663:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f666:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f66c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f670:	75 e2                	jne    c001f654 <IDE::detect()+0x1aa>
c001f672:	89 e8                	mov    eax,ebp
c001f674:	c1 e0 06             	shl    eax,0x6
c001f677:	01 d8                	add    eax,ebx
c001f679:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f67f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f686:	66 c1 ea 09          	shr    dx,0x9
c001f68a:	83 e2 01             	and    edx,0x1
c001f68d:	84 c9                	test   cl,cl
c001f68f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f695:	75 22                	jne    c001f6b9 <IDE::detect()+0x20f>
c001f697:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f69e:	74 46                	je     c001f6e6 <IDE::detect()+0x23c>
c001f6a0:	83 ec 0c             	sub    esp,0xc
c001f6a3:	68 7c 01 00 00       	push   0x17c
c001f6a8:	e8 3a a7 fe ff       	call   c0009de7 <malloc>
c001f6ad:	89 c7                	mov    edi,eax
c001f6af:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6b2:	e8 49 06 00 00       	call   c001fd00 <ATA::ATA()>
c001f6b7:	eb 17                	jmp    c001f6d0 <IDE::detect()+0x226>
c001f6b9:	83 ec 0c             	sub    esp,0xc
c001f6bc:	68 84 01 00 00       	push   0x184
c001f6c1:	e8 21 a7 fe ff       	call   c0009de7 <malloc>
c001f6c6:	89 c7                	mov    edi,eax
c001f6c8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6cb:	e8 b8 0c 00 00       	call   c0020388 <ATAPI::ATAPI()>
c001f6d0:	5a                   	pop    edx
c001f6d1:	59                   	pop    ecx
c001f6d2:	57                   	push   edi
c001f6d3:	53                   	push   ebx
c001f6d4:	e8 6d ef fe ff       	call   c000e646 <Device::addChild(Device*)>
c001f6d9:	8b 07                	mov    eax,DWORD PTR [edi]
c001f6db:	53                   	push   ebx
c001f6dc:	55                   	push   ebp
c001f6dd:	6a 00                	push   0x0
c001f6df:	57                   	push   edi
c001f6e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f6e3:	83 c4 20             	add    esp,0x20
c001f6e6:	45                   	inc    ebp
c001f6e7:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f6ec:	74 0d                	je     c001f6fb <IDE::detect()+0x251>
c001f6ee:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f6f6:	e9 e0 fd ff ff       	jmp    c001f4db <IDE::detect()+0x31>
c001f6fb:	4e                   	dec    esi
c001f6fc:	74 61                	je     c001f75f <IDE::detect()+0x2b5>
c001f6fe:	be 01 00 00 00       	mov    esi,0x1
c001f703:	e9 cb fd ff ff       	jmp    c001f4d3 <IDE::detect()+0x29>
c001f708:	50                   	push   eax
c001f709:	6a 04                	push   0x4
c001f70b:	56                   	push   esi
c001f70c:	53                   	push   ebx
c001f70d:	e8 14 f7 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f712:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f716:	83 c4 0c             	add    esp,0xc
c001f719:	6a 05                	push   0x5
c001f71b:	56                   	push   esi
c001f71c:	53                   	push   ebx
c001f71d:	e8 04 f7 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f722:	83 c4 10             	add    esp,0x10
c001f725:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f729:	80 fa 14             	cmp    dl,0x14
c001f72c:	75 04                	jne    c001f732 <IDE::detect()+0x288>
c001f72e:	3c eb                	cmp    al,0xeb
c001f730:	eb 07                	jmp    c001f739 <IDE::detect()+0x28f>
c001f732:	3c 96                	cmp    al,0x96
c001f734:	75 b1                	jne    c001f6e7 <IDE::detect()+0x23d>
c001f736:	80 fa 69             	cmp    dl,0x69
c001f739:	75 ac                	jne    c001f6e7 <IDE::detect()+0x23d>
c001f73b:	68 a1 00 00 00       	push   0xa1
c001f740:	6a 07                	push   0x7
c001f742:	56                   	push   esi
c001f743:	53                   	push   ebx
c001f744:	e8 1d f6 ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f749:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f750:	e8 9f 9a ff ff       	call   c00191f4 <milliTenthSleep(unsigned int)>
c001f755:	83 c4 10             	add    esp,0x10
c001f758:	b1 01                	mov    cl,0x1
c001f75a:	e9 6d fe ff ff       	jmp    c001f5cc <IDE::detect()+0x122>
c001f75f:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f765:	5b                   	pop    ebx
c001f766:	5e                   	pop    esi
c001f767:	5f                   	pop    edi
c001f768:	5d                   	pop    ebp
c001f769:	c3                   	ret    

c001f76a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f76a:	55                   	push   ebp
c001f76b:	57                   	push   edi
c001f76c:	56                   	push   esi
c001f76d:	53                   	push   ebx
c001f76e:	83 ec 1c             	sub    esp,0x1c
c001f771:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f775:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f779:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f77d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f781:	88 c3                	mov    bl,al
c001f783:	84 c0                	test   al,al
c001f785:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f789:	0f 84 81 00 00 00    	je     c001f810 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f78f:	83 ec 0c             	sub    esp,0xc
c001f792:	68 4b 75 02 c0       	push   0xc002754b
c001f797:	e8 37 d9 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001f79c:	83 c4 10             	add    esp,0x10
c001f79f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7a3:	3c 01                	cmp    al,0x1
c001f7a5:	74 63                	je     c001f80a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f7a7:	3c 02                	cmp    al,0x2
c001f7a9:	75 53                	jne    c001f7fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f7ab:	d1 e6                	shl    esi,1
c001f7ad:	09 ee                	or     esi,ebp
c001f7af:	50                   	push   eax
c001f7b0:	89 f0                	mov    eax,esi
c001f7b2:	6a 01                	push   0x1
c001f7b4:	0f b6 f0             	movzx  esi,al
c001f7b7:	c1 e6 06             	shl    esi,0x6
c001f7ba:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f7c2:	50                   	push   eax
c001f7c3:	57                   	push   edi
c001f7c4:	e8 5d f6 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f7c9:	83 c4 10             	add    esp,0x10
c001f7cc:	a8 01                	test   al,0x1
c001f7ce:	74 02                	je     c001f7d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f7d0:	b3 07                	mov    bl,0x7
c001f7d2:	a8 02                	test   al,0x2
c001f7d4:	74 02                	je     c001f7d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f7d6:	b3 03                	mov    bl,0x3
c001f7d8:	a8 04                	test   al,0x4
c001f7da:	74 02                	je     c001f7de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f7dc:	b3 14                	mov    bl,0x14
c001f7de:	a8 08                	test   al,0x8
c001f7e0:	74 02                	je     c001f7e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f7e2:	b3 03                	mov    bl,0x3
c001f7e4:	a8 10                	test   al,0x10
c001f7e6:	74 02                	je     c001f7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f7e8:	b3 15                	mov    bl,0x15
c001f7ea:	a8 20                	test   al,0x20
c001f7ec:	74 02                	je     c001f7f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f7ee:	b3 03                	mov    bl,0x3
c001f7f0:	a8 40                	test   al,0x40
c001f7f2:	74 02                	je     c001f7f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f7f4:	b3 16                	mov    bl,0x16
c001f7f6:	84 c0                	test   al,al
c001f7f8:	79 16                	jns    c001f810 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f7fa:	b3 0d                	mov    bl,0xd
c001f7fc:	eb 12                	jmp    c001f810 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f7fe:	3c 03                	cmp    al,0x3
c001f800:	74 0c                	je     c001f80e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f802:	3c 04                	cmp    al,0x4
c001f804:	75 0a                	jne    c001f810 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f806:	b3 08                	mov    bl,0x8
c001f808:	eb 06                	jmp    c001f810 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f80a:	b3 13                	mov    bl,0x13
c001f80c:	eb 02                	jmp    c001f810 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f80e:	b3 17                	mov    bl,0x17
c001f810:	83 c4 1c             	add    esp,0x1c
c001f813:	88 d8                	mov    al,bl
c001f815:	5b                   	pop    ebx
c001f816:	5e                   	pop    esi
c001f817:	5f                   	pop    edi
c001f818:	5d                   	pop    ebp
c001f819:	c3                   	ret    

c001f81a <IDE::polling(unsigned char, unsigned int)>:
c001f81a:	57                   	push   edi
c001f81b:	56                   	push   esi
c001f81c:	53                   	push   ebx
c001f81d:	bb 04 00 00 00       	mov    ebx,0x4
c001f822:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f826:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f82b:	52                   	push   edx
c001f82c:	6a 0c                	push   0xc
c001f82e:	56                   	push   esi
c001f82f:	57                   	push   edi
c001f830:	e8 f1 f5 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f835:	83 c4 10             	add    esp,0x10
c001f838:	4b                   	dec    ebx
c001f839:	75 f0                	jne    c001f82b <IDE::polling(unsigned char, unsigned int)+0x11>
c001f83b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f840:	50                   	push   eax
c001f841:	6a 0c                	push   0xc
c001f843:	56                   	push   esi
c001f844:	57                   	push   edi
c001f845:	e8 dc f5 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001f84a:	83 c4 10             	add    esp,0x10
c001f84d:	a8 01                	test   al,0x1
c001f84f:	75 17                	jne    c001f868 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f851:	a8 20                	test   al,0x20
c001f853:	75 0f                	jne    c001f864 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f855:	4b                   	dec    ebx
c001f856:	74 10                	je     c001f868 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f858:	84 c0                	test   al,al
c001f85a:	78 e4                	js     c001f840 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f85c:	a8 08                	test   al,0x8
c001f85e:	74 e0                	je     c001f840 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f860:	31 c0                	xor    eax,eax
c001f862:	eb 06                	jmp    c001f86a <IDE::polling(unsigned char, unsigned int)+0x50>
c001f864:	b0 01                	mov    al,0x1
c001f866:	eb 02                	jmp    c001f86a <IDE::polling(unsigned char, unsigned int)+0x50>
c001f868:	b0 02                	mov    al,0x2
c001f86a:	5b                   	pop    ebx
c001f86b:	5e                   	pop    esi
c001f86c:	5f                   	pop    edi
c001f86d:	c3                   	ret    

c001f86e <SATABus::close(int, int, void*)>:
c001f86e:	31 c0                	xor    eax,eax
c001f870:	c3                   	ret    
c001f871:	90                   	nop

c001f872 <SATABus::detect()>:
c001f872:	c3                   	ret    
c001f873:	90                   	nop

c001f874 <SATABus::SATABus()>:
c001f874:	83 ec 0c             	sub    esp,0xc
c001f877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87b:	83 ec 08             	sub    esp,0x8
c001f87e:	68 84 75 02 c0       	push   0xc0027584
c001f883:	50                   	push   eax
c001f884:	e8 6b f1 fe ff       	call   c000e9f4 <HardDiskController::HardDiskController(char const*)>
c001f889:	83 c4 10             	add    esp,0x10
c001f88c:	ba 2c 76 02 c0       	mov    edx,0xc002762c
c001f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f895:	89 10                	mov    DWORD PTR [eax],edx
c001f897:	83 ec 0c             	sub    esp,0xc
c001f89a:	6a 50                	push   0x50
c001f89c:	e8 e8 ac fe ff       	call   c000a589 <Phys::allocateContiguousPages(int)>
c001f8a1:	83 c4 10             	add    esp,0x10
c001f8a4:	89 c2                	mov    edx,eax
c001f8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8aa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f8b0:	83 ec 0c             	sub    esp,0xc
c001f8b3:	6a 50                	push   0x50
c001f8b5:	e8 f3 c4 fe ff       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c001f8ba:	83 c4 10             	add    esp,0x10
c001f8bd:	89 c2                	mov    edx,eax
c001f8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f8c9:	a1 f0 8c 02 c0       	mov    eax,ds:0xc0028cf0
c001f8ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8d2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f8d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8dc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f8e2:	83 ec 0c             	sub    esp,0xc
c001f8e5:	6a 03                	push   0x3
c001f8e7:	6a 50                	push   0x50
c001f8e9:	51                   	push   ecx
c001f8ea:	52                   	push   edx
c001f8eb:	50                   	push   eax
c001f8ec:	e8 59 ce fe ff       	call   c000c74a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f8f1:	83 c4 20             	add    esp,0x20
c001f8f4:	90                   	nop
c001f8f5:	83 c4 0c             	add    esp,0xc
c001f8f8:	c3                   	ret    
c001f8f9:	90                   	nop

c001f8fa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f8fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8fe:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f901:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f904:	09 c2                	or     edx,eax
c001f906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f90a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f910:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f912:	31 c0                	xor    eax,eax
c001f914:	c1 e9 08             	shr    ecx,0x8
c001f917:	83 e1 0f             	and    ecx,0xf
c001f91a:	39 c8                	cmp    eax,ecx
c001f91c:	74 0a                	je     c001f928 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f91e:	f6 c2 01             	test   dl,0x1
c001f921:	74 08                	je     c001f92b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f923:	d1 ea                	shr    edx,1
c001f925:	40                   	inc    eax
c001f926:	eb f2                	jmp    c001f91a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f928:	83 c8 ff             	or     eax,0xffffffff
c001f92b:	c3                   	ret    

c001f92c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f92c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f930:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f933:	89 c2                	mov    edx,eax
c001f935:	c1 ea 08             	shr    edx,0x8
c001f938:	83 e2 0f             	and    edx,0xf
c001f93b:	fe ca                	dec    dl
c001f93d:	75 31                	jne    c001f970 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f93f:	83 e0 0f             	and    eax,0xf
c001f942:	3c 03                	cmp    al,0x3
c001f944:	75 2a                	jne    c001f970 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f946:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f949:	b8 02 00 00 00       	mov    eax,0x2
c001f94e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f954:	74 1c                	je     c001f972 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f956:	b8 04 00 00 00       	mov    eax,0x4
c001f95b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f961:	74 0f                	je     c001f972 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f963:	31 c0                	xor    eax,eax
c001f965:	83 fa 03             	cmp    edx,0x3
c001f968:	0f 94 c0             	sete   al
c001f96b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f96f:	c3                   	ret    
c001f970:	31 c0                	xor    eax,eax
c001f972:	c3                   	ret    
c001f973:	90                   	nop

c001f974 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f978:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f97b:	0f ba e2 0f          	bt     edx,0xf
c001f97f:	72 f7                	jb     c001f978 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f981:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f984:	83 ca 10             	or     edx,0x10
c001f987:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f98a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f98d:	83 ca 01             	or     edx,0x1
c001f990:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f993:	c3                   	ret    

c001f994 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f998:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f99b:	83 e2 fe             	and    edx,0xfffffffe
c001f99e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9a1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9a4:	83 e2 ef             	and    edx,0xffffffef
c001f9a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9ad:	0f ba e2 0e          	bt     edx,0xe
c001f9b1:	72 f7                	jb     c001f9aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f9b3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9b6:	0f ba e2 0f          	bt     edx,0xf
c001f9ba:	72 ee                	jb     c001f9aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f9bc:	c3                   	ret    
c001f9bd:	90                   	nop

c001f9be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f9be:	55                   	push   ebp
c001f9bf:	57                   	push   edi
c001f9c0:	56                   	push   esi
c001f9c1:	53                   	push   ebx
c001f9c2:	83 ec 1c             	sub    esp,0x1c
c001f9c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f9c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f9cd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f9d1:	53                   	push   ebx
c001f9d2:	89 fd                	mov    ebp,edi
c001f9d4:	56                   	push   esi
c001f9d5:	c1 e5 0a             	shl    ebp,0xa
c001f9d8:	e8 b7 ff ff ff       	call   c001f994 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f9dd:	83 ec 0c             	sub    esp,0xc
c001f9e0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f9e6:	01 e8                	add    eax,ebp
c001f9e8:	89 03                	mov    DWORD PTR [ebx],eax
c001f9ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f9ec:	68 00 04 00 00       	push   0x400
c001f9f1:	6a 00                	push   0x0
c001f9f3:	50                   	push   eax
c001f9f4:	e8 9b 0c fe ff       	call   c0000694 <memset>
c001f9f9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f9ff:	89 fa                	mov    edx,edi
c001fa01:	01 e8                	add    eax,ebp
c001fa03:	c1 e7 0d             	shl    edi,0xd
c001fa06:	89 03                	mov    DWORD PTR [ebx],eax
c001fa08:	c1 e2 08             	shl    edx,0x8
c001fa0b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fa12:	81 c2 00 80 00 00    	add    edx,0x8000
c001fa18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001fa1c:	89 d0                	mov    eax,edx
c001fa1e:	83 c4 1c             	add    esp,0x1c
c001fa21:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fa27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fa2a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fa2d:	68 00 01 00 00       	push   0x100
c001fa32:	6a 00                	push   0x0
c001fa34:	50                   	push   eax
c001fa35:	e8 5a 0c fe ff       	call   c0000694 <memset>
c001fa3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa3e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001fa44:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001fa4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fa4e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001fa51:	83 c4 10             	add    esp,0x10
c001fa54:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fa5b:	31 ff                	xor    edi,edi
c001fa5d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001fa63:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001fa69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa6d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fa73:	83 c5 20             	add    ebp,0x20
c001fa76:	01 f8                	add    eax,edi
c001fa78:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fa7b:	52                   	push   edx
c001fa7c:	68 00 01 00 00       	push   0x100
c001fa81:	6a 00                	push   0x0
c001fa83:	50                   	push   eax
c001fa84:	e8 0b 0c fe ff       	call   c0000694 <memset>
c001fa89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fa8d:	83 c4 10             	add    esp,0x10
c001fa90:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001fa96:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001fa9d:	01 f8                	add    eax,edi
c001fa9f:	81 c7 00 01 00 00    	add    edi,0x100
c001faa5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001faa8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001faae:	75 b3                	jne    c001fa63 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001fab0:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001fab4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001fab8:	83 c4 1c             	add    esp,0x1c
c001fabb:	5b                   	pop    ebx
c001fabc:	5e                   	pop    esi
c001fabd:	5f                   	pop    edi
c001fabe:	5d                   	pop    ebp
c001fabf:	e9 b0 fe ff ff       	jmp    c001f974 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001fac4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fac4:	55                   	push   ebp
c001fac5:	57                   	push   edi
c001fac6:	56                   	push   esi
c001fac7:	53                   	push   ebx
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001facf:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001fad6:	74 2d                	je     c001fb05 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001fad8:	83 ec 0c             	sub    esp,0xc
c001fadb:	68 a8 75 02 c0       	push   0xc00275a8
c001fae0:	e8 5c a3 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fae5:	83 c4 10             	add    esp,0x10
c001fae8:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001faef:	75 14                	jne    c001fb05 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001faf1:	e4 60                	in     al,0x60
c001faf3:	3c 1c                	cmp    al,0x1c
c001faf5:	74 04                	je     c001fafb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001faf7:	3c 5a                	cmp    al,0x5a
c001faf9:	75 f6                	jne    c001faf1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001fafb:	e4 60                	in     al,0x60
c001fafd:	3c 5a                	cmp    al,0x5a
c001faff:	74 fa                	je     c001fafb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb01:	3c 1c                	cmp    al,0x1c
c001fb03:	74 f6                	je     c001fafb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fb09:	31 db                	xor    ebx,ebx
c001fb0b:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001fb0e:	f7 c5 01 00 00 00    	test   ebp,0x1
c001fb14:	0f 84 78 01 00 00    	je     c001fc92 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fb1a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fb1e:	89 d8                	mov    eax,ebx
c001fb20:	c1 e0 07             	shl    eax,0x7
c001fb23:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001fb2a:	50                   	push   eax
c001fb2b:	50                   	push   eax
c001fb2c:	57                   	push   edi
c001fb2d:	56                   	push   esi
c001fb2e:	e8 f9 fd ff ff       	call   c001f92c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001fb33:	83 c4 10             	add    esp,0x10
c001fb36:	83 f8 01             	cmp    eax,0x1
c001fb39:	0f 85 19 01 00 00    	jne    c001fc58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001fb3f:	50                   	push   eax
c001fb40:	53                   	push   ebx
c001fb41:	57                   	push   edi
c001fb42:	56                   	push   esi
c001fb43:	e8 76 fe ff ff       	call   c001f9be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fb48:	83 c4 10             	add    esp,0x10
c001fb4b:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001fb52:	74 2d                	je     c001fb81 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001fb54:	83 ec 0c             	sub    esp,0xc
c001fb57:	68 bd 75 02 c0       	push   0xc00275bd
c001fb5c:	e8 e0 a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fb61:	83 c4 10             	add    esp,0x10
c001fb64:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001fb6b:	75 14                	jne    c001fb81 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001fb6d:	e4 60                	in     al,0x60
c001fb6f:	3c 1c                	cmp    al,0x1c
c001fb71:	74 04                	je     c001fb77 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fb73:	3c 5a                	cmp    al,0x5a
c001fb75:	75 f6                	jne    c001fb6d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001fb77:	e4 60                	in     al,0x60
c001fb79:	3c 5a                	cmp    al,0x5a
c001fb7b:	74 fa                	je     c001fb77 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fb7d:	3c 1c                	cmp    al,0x1c
c001fb7f:	74 f6                	je     c001fb77 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fb81:	83 ec 0c             	sub    esp,0xc
c001fb84:	68 7c 01 00 00       	push   0x17c
c001fb89:	e8 59 a2 fe ff       	call   c0009de7 <malloc>
c001fb8e:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb91:	89 c7                	mov    edi,eax
c001fb93:	e8 28 10 00 00       	call   c0020bc0 <SATA::SATA()>
c001fb98:	83 c4 10             	add    esp,0x10
c001fb9b:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001fba2:	74 2d                	je     c001fbd1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fba4:	83 ec 0c             	sub    esp,0xc
c001fba7:	68 d2 75 02 c0       	push   0xc00275d2
c001fbac:	e8 90 a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fbb1:	83 c4 10             	add    esp,0x10
c001fbb4:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001fbbb:	75 14                	jne    c001fbd1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fbbd:	e4 60                	in     al,0x60
c001fbbf:	3c 5a                	cmp    al,0x5a
c001fbc1:	74 04                	je     c001fbc7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fbc3:	3c 1c                	cmp    al,0x1c
c001fbc5:	75 f6                	jne    c001fbbd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001fbc7:	e4 60                	in     al,0x60
c001fbc9:	3c 5a                	cmp    al,0x5a
c001fbcb:	74 fa                	je     c001fbc7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fbcd:	3c 1c                	cmp    al,0x1c
c001fbcf:	74 f6                	je     c001fbc7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fbd1:	50                   	push   eax
c001fbd2:	50                   	push   eax
c001fbd3:	57                   	push   edi
c001fbd4:	56                   	push   esi
c001fbd5:	e8 6c ea fe ff       	call   c000e646 <Device::addChild(Device*)>
c001fbda:	83 c4 10             	add    esp,0x10
c001fbdd:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001fbe4:	74 2d                	je     c001fc13 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fbe6:	83 ec 0c             	sub    esp,0xc
c001fbe9:	68 e7 75 02 c0       	push   0xc00275e7
c001fbee:	e8 4e a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fbf3:	83 c4 10             	add    esp,0x10
c001fbf6:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001fbfd:	75 14                	jne    c001fc13 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fbff:	e4 60                	in     al,0x60
c001fc01:	3c 1c                	cmp    al,0x1c
c001fc03:	74 04                	je     c001fc09 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc05:	3c 5a                	cmp    al,0x5a
c001fc07:	75 f6                	jne    c001fbff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001fc09:	e4 60                	in     al,0x60
c001fc0b:	3c 5a                	cmp    al,0x5a
c001fc0d:	74 fa                	je     c001fc09 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc0f:	3c 1c                	cmp    al,0x1c
c001fc11:	74 f6                	je     c001fc09 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc13:	8b 07                	mov    eax,DWORD PTR [edi]
c001fc15:	56                   	push   esi
c001fc16:	6a 00                	push   0x0
c001fc18:	53                   	push   ebx
c001fc19:	57                   	push   edi
c001fc1a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fc1d:	83 c4 10             	add    esp,0x10
c001fc20:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001fc27:	74 69                	je     c001fc92 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc29:	83 ec 0c             	sub    esp,0xc
c001fc2c:	68 fc 75 02 c0       	push   0xc00275fc
c001fc31:	e8 0b a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fc36:	83 c4 10             	add    esp,0x10
c001fc39:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001fc40:	75 50                	jne    c001fc92 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc42:	e4 60                	in     al,0x60
c001fc44:	3c 1c                	cmp    al,0x1c
c001fc46:	74 04                	je     c001fc4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fc48:	3c 5a                	cmp    al,0x5a
c001fc4a:	75 f6                	jne    c001fc42 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001fc4c:	e4 60                	in     al,0x60
c001fc4e:	3c 5a                	cmp    al,0x5a
c001fc50:	74 fa                	je     c001fc4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fc52:	3c 1c                	cmp    al,0x1c
c001fc54:	74 f6                	je     c001fc4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fc56:	eb 3a                	jmp    c001fc92 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc58:	83 f8 04             	cmp    eax,0x4
c001fc5b:	75 35                	jne    c001fc92 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc5d:	50                   	push   eax
c001fc5e:	53                   	push   ebx
c001fc5f:	57                   	push   edi
c001fc60:	56                   	push   esi
c001fc61:	e8 58 fd ff ff       	call   c001f9be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fc66:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fc6d:	e8 75 a1 fe ff       	call   c0009de7 <malloc>
c001fc72:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc75:	89 c7                	mov    edi,eax
c001fc77:	e8 ba 17 00 00       	call   c0021436 <SATAPI::SATAPI()>
c001fc7c:	5a                   	pop    edx
c001fc7d:	59                   	pop    ecx
c001fc7e:	57                   	push   edi
c001fc7f:	56                   	push   esi
c001fc80:	e8 c1 e9 fe ff       	call   c000e646 <Device::addChild(Device*)>
c001fc85:	8b 07                	mov    eax,DWORD PTR [edi]
c001fc87:	56                   	push   esi
c001fc88:	6a 00                	push   0x0
c001fc8a:	53                   	push   ebx
c001fc8b:	57                   	push   edi
c001fc8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fc8f:	83 c4 20             	add    esp,0x20
c001fc92:	d1 ed                	shr    ebp,1
c001fc94:	43                   	inc    ebx
c001fc95:	83 fb 20             	cmp    ebx,0x20
c001fc98:	0f 85 70 fe ff ff    	jne    c001fb0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001fc9e:	83 c4 0c             	add    esp,0xc
c001fca1:	5b                   	pop    ebx
c001fca2:	5e                   	pop    esi
c001fca3:	5f                   	pop    edi
c001fca4:	5d                   	pop    ebp
c001fca5:	c3                   	ret    

c001fca6 <SATABus::open(int, int, void*)>:
c001fca6:	53                   	push   ebx
c001fca7:	83 ec 10             	sub    esp,0x10
c001fcaa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fcae:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001fcb4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fcba:	50                   	push   eax
c001fcbb:	68 11 76 02 c0       	push   0xc0027611
c001fcc0:	e8 0e d4 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001fcc5:	58                   	pop    eax
c001fcc6:	5a                   	pop    edx
c001fcc7:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fccd:	53                   	push   ebx
c001fcce:	e8 f1 fd ff ff       	call   c001fac4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fcd3:	31 c0                	xor    eax,eax
c001fcd5:	83 c4 18             	add    esp,0x18
c001fcd8:	5b                   	pop    ebx
c001fcd9:	c3                   	ret    

c001fcda <ATA::close(int, int, void*)>:
c001fcda:	83 ec 0c             	sub    esp,0xc
c001fcdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fce7:	85 c0                	test   eax,eax
c001fce9:	74 0c                	je     c001fcf7 <ATA::close(int, int, void*)+0x1d>
c001fceb:	83 ec 0c             	sub    esp,0xc
c001fcee:	8b 10                	mov    edx,DWORD PTR [eax]
c001fcf0:	50                   	push   eax
c001fcf1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fcf4:	83 c4 10             	add    esp,0x10
c001fcf7:	31 c0                	xor    eax,eax
c001fcf9:	83 c4 0c             	add    esp,0xc
c001fcfc:	c3                   	ret    
c001fcfd:	90                   	nop

c001fcfe <ATA::powerSaving(PowerSavingLevel)>:
c001fcfe:	c3                   	ret    
c001fcff:	90                   	nop

c001fd00 <ATA::ATA()>:
c001fd00:	83 ec 0c             	sub    esp,0xc
c001fd03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd07:	83 ec 04             	sub    esp,0x4
c001fd0a:	68 00 02 00 00       	push   0x200
c001fd0f:	68 af 77 02 c0       	push   0xc00277af
c001fd14:	50                   	push   eax
c001fd15:	e8 64 ed fe ff       	call   c000ea7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fd1a:	83 c4 10             	add    esp,0x10
c001fd1d:	ba a4 76 02 c0       	mov    edx,0xc00276a4
c001fd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd26:	89 10                	mov    DWORD PTR [eax],edx
c001fd28:	90                   	nop
c001fd29:	83 c4 0c             	add    esp,0xc
c001fd2c:	c3                   	ret    
c001fd2d:	90                   	nop

c001fd2e <ATA::flush(bool)>:
c001fd2e:	53                   	push   ebx
c001fd2f:	83 ec 08             	sub    esp,0x8
c001fd32:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001fd37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fd3b:	19 c0                	sbb    eax,eax
c001fd3d:	83 e0 fd             	and    eax,0xfffffffd
c001fd40:	05 ea 00 00 00       	add    eax,0xea
c001fd45:	50                   	push   eax
c001fd46:	6a 07                	push   0x7
c001fd48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd4f:	50                   	push   eax
c001fd50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd56:	e8 0b f0 ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd5b:	83 c4 0c             	add    esp,0xc
c001fd5e:	6a 00                	push   0x0
c001fd60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd67:	50                   	push   eax
c001fd68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd6e:	e8 a7 fa ff ff       	call   c001f81a <IDE::polling(unsigned char, unsigned int)>
c001fd73:	83 c4 18             	add    esp,0x18
c001fd76:	5b                   	pop    ebx
c001fd77:	c3                   	ret    

c001fd78 <ATA::readyForCommand()>:
c001fd78:	56                   	push   esi
c001fd79:	53                   	push   ebx
c001fd7a:	53                   	push   ebx
c001fd7b:	31 db                	xor    ebx,ebx
c001fd7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd81:	51                   	push   ecx
c001fd82:	6a 0c                	push   0xc
c001fd84:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fd8b:	50                   	push   eax
c001fd8c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fd92:	e8 8f f0 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c001fd97:	83 c4 10             	add    esp,0x10
c001fd9a:	a8 88                	test   al,0x88
c001fd9c:	74 1f                	je     c001fdbd <ATA::readyForCommand()+0x45>
c001fd9e:	43                   	inc    ebx
c001fd9f:	83 fb 63             	cmp    ebx,0x63
c001fda2:	7e dd                	jle    c001fd81 <ATA::readyForCommand()+0x9>
c001fda4:	83 ec 0c             	sub    esp,0xc
c001fda7:	6a 0a                	push   0xa
c001fda9:	e8 46 94 ff ff       	call   c00191f4 <milliTenthSleep(unsigned int)>
c001fdae:	83 c4 10             	add    esp,0x10
c001fdb1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fdb7:	75 c8                	jne    c001fd81 <ATA::readyForCommand()+0x9>
c001fdb9:	31 c0                	xor    eax,eax
c001fdbb:	eb 02                	jmp    c001fdbf <ATA::readyForCommand()+0x47>
c001fdbd:	b0 01                	mov    al,0x1
c001fdbf:	5a                   	pop    edx
c001fdc0:	5b                   	pop    ebx
c001fdc1:	5e                   	pop    esi
c001fdc2:	c3                   	ret    
c001fdc3:	90                   	nop

c001fdc4 <ATA::access(unsigned long long, int, void*, bool)>:
c001fdc4:	55                   	push   ebp
c001fdc5:	57                   	push   edi
c001fdc6:	56                   	push   esi
c001fdc7:	53                   	push   ebx
c001fdc8:	83 ec 38             	sub    esp,0x38
c001fdcb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fdcf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001fdd3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fdd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fddb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fddf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fde3:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001fde7:	68 50 76 02 c0       	push   0xc0027650
c001fdec:	e8 e2 d2 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c001fdf1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fdf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fdfb:	83 c4 10             	add    esp,0x10
c001fdfe:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fe04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe08:	c1 e0 06             	shl    eax,0x6
c001fe0b:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fe13:	74 5d                	je     c001fe72 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001fe15:	89 fa                	mov    edx,edi
c001fe17:	89 f0                	mov    eax,esi
c001fe19:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fe1d:	c1 ea 1c             	shr    edx,0x1c
c001fe20:	89 d1                	mov    ecx,edx
c001fe22:	09 c1                	or     ecx,eax
c001fe24:	74 25                	je     c001fe4b <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001fe26:	31 ed                	xor    ebp,ebp
c001fe28:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fe2f:	89 fa                	mov    edx,edi
c001fe31:	89 f0                	mov    eax,esi
c001fe33:	0f ad d0             	shrd   eax,edx,cl
c001fe36:	d3 ea                	shr    edx,cl
c001fe38:	f6 c1 20             	test   cl,0x20
c001fe3b:	74 02                	je     c001fe3f <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001fe3d:	89 d0                	mov    eax,edx
c001fe3f:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fe43:	45                   	inc    ebp
c001fe44:	83 fd 06             	cmp    ebp,0x6
c001fe47:	75 df                	jne    c001fe28 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001fe49:	eb 76                	jmp    c001fec1 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001fe4b:	89 f0                	mov    eax,esi
c001fe4d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fe52:	89 fa                	mov    edx,edi
c001fe54:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fe5b:	0f ac d0 10          	shrd   eax,edx,0x10
c001fe5f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fe64:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fe68:	c1 ee 18             	shr    esi,0x18
c001fe6b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fe70:	eb 56                	jmp    c001fec8 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fe72:	6a 00                	push   0x0
c001fe74:	6a 3f                	push   0x3f
c001fe76:	57                   	push   edi
c001fe77:	56                   	push   esi
c001fe78:	e8 13 32 00 00       	call   c0023090 <__umoddi3>
c001fe7d:	83 c4 10             	add    esp,0x10
c001fe80:	40                   	inc    eax
c001fe81:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fe85:	6a 00                	push   0x0
c001fe87:	68 f0 03 00 00       	push   0x3f0
c001fe8c:	57                   	push   edi
c001fe8d:	56                   	push   esi
c001fe8e:	e8 fd 30 00 00       	call   c0022f90 <__udivdi3>
c001fe93:	83 c4 10             	add    esp,0x10
c001fe96:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fe9b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fea2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fea7:	6a 00                	push   0x0
c001fea9:	6a 3f                	push   0x3f
c001feab:	57                   	push   edi
c001feac:	56                   	push   esi
c001fead:	e8 de 30 00 00       	call   c0022f90 <__udivdi3>
c001feb2:	83 c4 10             	add    esp,0x10
c001feb5:	89 c6                	mov    esi,eax
c001feb7:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001febc:	83 e6 0f             	and    esi,0xf
c001febf:	eb 07                	jmp    c001fec8 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fec1:	31 f6                	xor    esi,esi
c001fec3:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001fec8:	bf 01 00 00 00       	mov    edi,0x1
c001fecd:	50                   	push   eax
c001fece:	6a 00                	push   0x0
c001fed0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fed7:	50                   	push   eax
c001fed8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fedc:	e8 8d f0 ff ff       	call   c001ef6e <IDE::enableIRQs(unsigned char, bool)>
c001fee1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fee4:	e8 8f fe ff ff       	call   c001fd78 <ATA::readyForCommand()>
c001fee9:	83 c4 10             	add    esp,0x10
c001feec:	84 c0                	test   al,al
c001feee:	0f 84 bc 02 00 00    	je     c00201b0 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001fef4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fefa:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ff00:	c1 e0 04             	shl    eax,0x4
c001ff03:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ff0a:	09 c6                	or     esi,eax
c001ff0c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ff11:	75 05                	jne    c001ff18 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001ff13:	83 ce a0             	or     esi,0xffffffa0
c001ff16:	eb 03                	jmp    c001ff1b <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001ff18:	83 ce e0             	or     esi,0xffffffe0
c001ff1b:	89 f0                	mov    eax,esi
c001ff1d:	0f b6 f0             	movzx  esi,al
c001ff20:	56                   	push   esi
c001ff21:	6a 06                	push   0x6
c001ff23:	51                   	push   ecx
c001ff24:	52                   	push   edx
c001ff25:	e8 3c ee ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff2a:	83 c4 10             	add    esp,0x10
c001ff2d:	6a 00                	push   0x0
c001ff2f:	6a 01                	push   0x1
c001ff31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff38:	50                   	push   eax
c001ff39:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff3f:	e8 22 ee ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff44:	83 c4 10             	add    esp,0x10
c001ff47:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ff4c:	75 6e                	jne    c001ffbc <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001ff4e:	6a 00                	push   0x0
c001ff50:	6a 08                	push   0x8
c001ff52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff59:	50                   	push   eax
c001ff5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff60:	e8 01 ee ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff65:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ff6a:	50                   	push   eax
c001ff6b:	6a 09                	push   0x9
c001ff6d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff74:	50                   	push   eax
c001ff75:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff7b:	e8 e6 ed ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff80:	83 c4 20             	add    esp,0x20
c001ff83:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ff88:	50                   	push   eax
c001ff89:	6a 0a                	push   0xa
c001ff8b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff92:	50                   	push   eax
c001ff93:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff99:	e8 c8 ed ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff9e:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ffa3:	50                   	push   eax
c001ffa4:	6a 0b                	push   0xb
c001ffa6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffad:	50                   	push   eax
c001ffae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffb4:	e8 ad ed ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffb9:	83 c4 20             	add    esp,0x20
c001ffbc:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ffc1:	50                   	push   eax
c001ffc2:	6a 02                	push   0x2
c001ffc4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffcb:	50                   	push   eax
c001ffcc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffd2:	e8 8f ed ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffd7:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ffdc:	50                   	push   eax
c001ffdd:	6a 03                	push   0x3
c001ffdf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffe6:	50                   	push   eax
c001ffe7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffed:	e8 74 ed ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fff2:	83 c4 20             	add    esp,0x20
c001fff5:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fffa:	50                   	push   eax
c001fffb:	6a 04                	push   0x4
c001fffd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020004:	50                   	push   eax
c0020005:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002000b:	e8 56 ed ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020010:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020015:	50                   	push   eax
c0020016:	6a 05                	push   0x5
c0020018:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002001f:	50                   	push   eax
c0020020:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020026:	e8 3b ed ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002002b:	83 c4 20             	add    esp,0x20
c002002e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0020033:	0f 94 c0             	sete   al
c0020036:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002003b:	74 09                	je     c0020046 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c002003d:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0020044:	eb 07                	jmp    c002004d <ATA::access(unsigned long long, int, void*, bool)+0x289>
c0020046:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002004d:	0f b6 c0             	movzx  eax,al
c0020050:	50                   	push   eax
c0020051:	6a 07                	push   0x7
c0020053:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002005a:	50                   	push   eax
c002005b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020061:	e8 00 ed ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020066:	c7 04 24 5d 76 02 c0 	mov    DWORD PTR [esp],0xc002765d
c002006d:	e8 61 d0 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0020072:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0020076:	83 c4 10             	add    esp,0x10
c0020079:	85 f6                	test   esi,esi
c002007b:	0f 84 f7 00 00 00    	je     c0020178 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c0020081:	83 ec 0c             	sub    esp,0xc
c0020084:	68 60 76 02 c0       	push   0xc0027660
c0020089:	e8 45 d0 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c002008e:	83 c4 0c             	add    esp,0xc
c0020091:	6a 01                	push   0x1
c0020093:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002009a:	50                   	push   eax
c002009b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200a1:	e8 74 f7 ff ff       	call   c001f81a <IDE::polling(unsigned char, unsigned int)>
c00200a6:	c7 04 24 63 76 02 c0 	mov    DWORD PTR [esp],0xc0027663
c00200ad:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00200b1:	e8 1d d0 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00200b6:	83 c4 10             	add    esp,0x10
c00200b9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00200bd:	84 c0                	test   al,al
c00200bf:	74 2b                	je     c00200ec <ATA::access(unsigned long long, int, void*, bool)+0x328>
c00200c1:	0f b6 f8             	movzx  edi,al
c00200c4:	57                   	push   edi
c00200c5:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00200cc:	50                   	push   eax
c00200cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200d4:	50                   	push   eax
c00200d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200db:	e8 8a f6 ff ff       	call   c001f76a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00200e0:	c7 04 24 66 76 02 c0 	mov    DWORD PTR [esp],0xc0027666
c00200e7:	e9 bc 00 00 00       	jmp    c00201a8 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c00200ec:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00200f1:	74 50                	je     c0020143 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c00200f3:	83 ec 0c             	sub    esp,0xc
c00200f6:	31 ed                	xor    ebp,ebp
c00200f8:	68 71 76 02 c0       	push   0xc0027671
c00200fd:	e8 d1 cf fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0020102:	83 c4 10             	add    esp,0x10
c0020105:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020109:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002010d:	50                   	push   eax
c002010e:	50                   	push   eax
c002010f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020116:	50                   	push   eax
c0020117:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002011d:	e8 32 ec ff ff       	call   c001ed54 <IDE::getBase(unsigned char)>
c0020122:	89 c2                	mov    edx,eax
c0020124:	89 f8                	mov    eax,edi
c0020126:	66 ef                	out    dx,ax
c0020128:	45                   	inc    ebp
c0020129:	83 c4 10             	add    esp,0x10
c002012c:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0020132:	75 d1                	jne    c0020105 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c0020134:	83 ec 0c             	sub    esp,0xc
c0020137:	68 74 76 02 c0       	push   0xc0027674
c002013c:	e8 92 cf fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0020141:	eb 24                	jmp    c0020167 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c0020143:	51                   	push   ecx
c0020144:	51                   	push   ecx
c0020145:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002014c:	50                   	push   eax
c002014d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020153:	e8 fc eb ff ff       	call   c001ed54 <IDE::getBase(unsigned char)>
c0020158:	b9 00 01 00 00       	mov    ecx,0x100
c002015d:	89 c2                	mov    edx,eax
c002015f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0020163:	fc                   	cld    
c0020164:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0020167:	83 c4 10             	add    esp,0x10
c002016a:	4e                   	dec    esi
c002016b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0020173:	e9 01 ff ff ff       	jmp    c0020079 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c0020178:	31 ff                	xor    edi,edi
c002017a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002017f:	74 2f                	je     c00201b0 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c0020181:	83 ec 0c             	sub    esp,0xc
c0020184:	68 77 76 02 c0       	push   0xc0027677
c0020189:	e8 45 cf fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c002018e:	58                   	pop    eax
c002018f:	31 c0                	xor    eax,eax
c0020191:	5a                   	pop    edx
c0020192:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0020197:	0f 94 c0             	sete   al
c002019a:	50                   	push   eax
c002019b:	53                   	push   ebx
c002019c:	e8 8d fb ff ff       	call   c001fd2e <ATA::flush(bool)>
c00201a1:	c7 04 24 7a 76 02 c0 	mov    DWORD PTR [esp],0xc002767a
c00201a8:	e8 26 cf fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00201ad:	83 c4 10             	add    esp,0x10
c00201b0:	83 c4 2c             	add    esp,0x2c
c00201b3:	89 f8                	mov    eax,edi
c00201b5:	5b                   	pop    ebx
c00201b6:	5e                   	pop    esi
c00201b7:	5f                   	pop    edi
c00201b8:	5d                   	pop    ebp
c00201b9:	c3                   	ret    

c00201ba <ATA::read(unsigned long long, int, void*)>:
c00201ba:	57                   	push   edi
c00201bb:	b8 04 00 00 00       	mov    eax,0x4
c00201c0:	56                   	push   esi
c00201c1:	53                   	push   ebx
c00201c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00201c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00201ca:	8d 7a ff             	lea    edi,[edx-0x1]
c00201cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00201d1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00201d5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00201db:	77 25                	ja     c0020202 <ATA::read(unsigned long long, int, void*)+0x48>
c00201dd:	b8 06 00 00 00       	mov    eax,0x6
c00201e2:	85 f6                	test   esi,esi
c00201e4:	74 1c                	je     c0020202 <ATA::read(unsigned long long, int, void*)+0x48>
c00201e6:	50                   	push   eax
c00201e7:	50                   	push   eax
c00201e8:	6a 00                	push   0x0
c00201ea:	56                   	push   esi
c00201eb:	52                   	push   edx
c00201ec:	53                   	push   ebx
c00201ed:	51                   	push   ecx
c00201ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00201f2:	e8 cd fb ff ff       	call   c001fdc4 <ATA::access(unsigned long long, int, void*, bool)>
c00201f7:	83 c4 20             	add    esp,0x20
c00201fa:	85 c0                	test   eax,eax
c00201fc:	0f 95 c0             	setne  al
c00201ff:	0f b6 c0             	movzx  eax,al
c0020202:	5b                   	pop    ebx
c0020203:	5e                   	pop    esi
c0020204:	5f                   	pop    edi
c0020205:	c3                   	ret    

c0020206 <ATA::write(unsigned long long, int, void*)>:
c0020206:	55                   	push   ebp
c0020207:	57                   	push   edi
c0020208:	56                   	push   esi
c0020209:	53                   	push   ebx
c002020a:	83 ec 18             	sub    esp,0x18
c002020d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020211:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020215:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020219:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002021d:	68 7d 76 02 c0       	push   0xc002767d
c0020222:	e8 ac ce fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0020227:	8d 53 ff             	lea    edx,[ebx-0x1]
c002022a:	83 c4 10             	add    esp,0x10
c002022d:	b8 04 00 00 00       	mov    eax,0x4
c0020232:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020238:	77 25                	ja     c002025f <ATA::write(unsigned long long, int, void*)+0x59>
c002023a:	b8 06 00 00 00       	mov    eax,0x6
c002023f:	85 f6                	test   esi,esi
c0020241:	74 1c                	je     c002025f <ATA::write(unsigned long long, int, void*)+0x59>
c0020243:	50                   	push   eax
c0020244:	50                   	push   eax
c0020245:	6a 01                	push   0x1
c0020247:	56                   	push   esi
c0020248:	53                   	push   ebx
c0020249:	55                   	push   ebp
c002024a:	57                   	push   edi
c002024b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002024f:	e8 70 fb ff ff       	call   c001fdc4 <ATA::access(unsigned long long, int, void*, bool)>
c0020254:	83 c4 20             	add    esp,0x20
c0020257:	85 c0                	test   eax,eax
c0020259:	0f 95 c0             	setne  al
c002025c:	0f b6 c0             	movzx  eax,al
c002025f:	83 c4 0c             	add    esp,0xc
c0020262:	5b                   	pop    ebx
c0020263:	5e                   	pop    esi
c0020264:	5f                   	pop    edi
c0020265:	5d                   	pop    ebp
c0020266:	c3                   	ret    
c0020267:	90                   	nop

c0020268 <ATA::detectCHS()>:
c0020268:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002026c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0020272:	c1 e0 06             	shl    eax,0x6
c0020275:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002027b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0020285:	c7 44 24 04 89 76 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027689
c002028d:	e9 23 4f ff ff       	jmp    c00151b5 <Krnl::panic(char const*)>

c0020292 <ATA::open(int, int, void*)>:
c0020292:	53                   	push   ebx
c0020293:	83 ec 08             	sub    esp,0x8
c0020296:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002029a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002029e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00202a2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00202a8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00202ae:	c1 e0 06             	shl    eax,0x6
c00202b1:	01 d0                	add    eax,edx
c00202b3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00202ba:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00202c0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00202c7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00202d1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00202d7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00202de:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00202e5:	75 0c                	jne    c00202f3 <ATA::open(int, int, void*)+0x61>
c00202e7:	83 ec 0c             	sub    esp,0xc
c00202ea:	53                   	push   ebx
c00202eb:	e8 78 ff ff ff       	call   c0020268 <ATA::detectCHS()>
c00202f0:	83 c4 10             	add    esp,0x10
c00202f3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00202f9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00202ff:	c1 e0 06             	shl    eax,0x6
c0020302:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0020309:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020313:	d1 e8                	shr    eax,1
c0020315:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002031b:	6a 04                	push   0x4
c002031d:	6a 0c                	push   0xc
c002031f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020326:	50                   	push   eax
c0020327:	52                   	push   edx
c0020328:	e8 39 ea ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002032d:	90                   	nop
c002032e:	90                   	nop
c002032f:	6a 00                	push   0x0
c0020331:	6a 0c                	push   0xc
c0020333:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002033a:	50                   	push   eax
c002033b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020341:	e8 20 ea ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020346:	83 c4 14             	add    esp,0x14
c0020349:	53                   	push   ebx
c002034a:	e8 97 e7 fe ff       	call   c000eae6 <PhysicalDisk::startCache()>
c002034f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020352:	e8 07 09 ff ff       	call   c0010c5e <createPartitionsForDisk(PhysicalDisk*)>
c0020357:	31 c0                	xor    eax,eax
c0020359:	83 c4 18             	add    esp,0x18
c002035c:	5b                   	pop    ebx
c002035d:	c3                   	ret    

c002035e <ATAPI::write(unsigned long long, int, void*)>:
c002035e:	b8 03 00 00 00       	mov    eax,0x3
c0020363:	c3                   	ret    

c0020364 <ATAPI::close(int, int, void*)>:
c0020364:	83 ec 0c             	sub    esp,0xc
c0020367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002036b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020371:	85 c0                	test   eax,eax
c0020373:	74 0c                	je     c0020381 <ATAPI::close(int, int, void*)+0x1d>
c0020375:	83 ec 0c             	sub    esp,0xc
c0020378:	8b 10                	mov    edx,DWORD PTR [eax]
c002037a:	50                   	push   eax
c002037b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002037e:	83 c4 10             	add    esp,0x10
c0020381:	31 c0                	xor    eax,eax
c0020383:	83 c4 0c             	add    esp,0xc
c0020386:	c3                   	ret    
c0020387:	90                   	nop

c0020388 <ATAPI::ATAPI()>:
c0020388:	83 ec 0c             	sub    esp,0xc
c002038b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002038f:	83 ec 04             	sub    esp,0x4
c0020392:	68 00 08 00 00       	push   0x800
c0020397:	68 89 79 02 c0       	push   0xc0027989
c002039c:	50                   	push   eax
c002039d:	e8 dc e6 fe ff       	call   c000ea7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00203a2:	83 c4 10             	add    esp,0x10
c00203a5:	ba 1c 77 02 c0       	mov    edx,0xc002771c
c00203aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ae:	89 10                	mov    DWORD PTR [eax],edx
c00203b0:	90                   	nop
c00203b1:	83 c4 0c             	add    esp,0xc
c00203b4:	c3                   	ret    
c00203b5:	90                   	nop

c00203b6 <ATAPI::readyForCommand()>:
c00203b6:	56                   	push   esi
c00203b7:	53                   	push   ebx
c00203b8:	53                   	push   ebx
c00203b9:	31 db                	xor    ebx,ebx
c00203bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00203bf:	51                   	push   ecx
c00203c0:	6a 0c                	push   0xc
c00203c2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00203c9:	50                   	push   eax
c00203ca:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00203d0:	e8 51 ea ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c00203d5:	83 c4 10             	add    esp,0x10
c00203d8:	a8 88                	test   al,0x88
c00203da:	74 25                	je     c0020401 <ATAPI::readyForCommand()+0x4b>
c00203dc:	43                   	inc    ebx
c00203dd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00203e3:	7e da                	jle    c00203bf <ATAPI::readyForCommand()+0x9>
c00203e5:	83 ec 0c             	sub    esp,0xc
c00203e8:	68 5e 01 00 00       	push   0x15e
c00203ed:	e8 02 8e ff ff       	call   c00191f4 <milliTenthSleep(unsigned int)>
c00203f2:	83 c4 10             	add    esp,0x10
c00203f5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00203fb:	75 c2                	jne    c00203bf <ATAPI::readyForCommand()+0x9>
c00203fd:	31 c0                	xor    eax,eax
c00203ff:	eb 02                	jmp    c0020403 <ATAPI::readyForCommand()+0x4d>
c0020401:	b0 01                	mov    al,0x1
c0020403:	5a                   	pop    edx
c0020404:	5b                   	pop    ebx
c0020405:	5e                   	pop    esi
c0020406:	c3                   	ret    
c0020407:	90                   	nop

c0020408 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020408:	55                   	push   ebp
c0020409:	57                   	push   edi
c002040a:	56                   	push   esi
c002040b:	53                   	push   ebx
c002040c:	83 ec 20             	sub    esp,0x20
c002040f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020413:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0020417:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002041b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002041f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020423:	6a 01                	push   0x1
c0020425:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002042c:	50                   	push   eax
c002042d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020433:	e8 36 eb ff ff       	call   c001ef6e <IDE::enableIRQs(unsigned char, bool)>
c0020438:	5e                   	pop    esi
c0020439:	58                   	pop    eax
c002043a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020441:	50                   	push   eax
c0020442:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020448:	e8 f3 e8 ff ff       	call   c001ed40 <IDE::prepareInterrupt(unsigned char)>
c002044d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020450:	e8 61 ff ff ff       	call   c00203b6 <ATAPI::readyForCommand()>
c0020455:	83 c4 10             	add    esp,0x10
c0020458:	84 c0                	test   al,al
c002045a:	75 0a                	jne    c0020466 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002045c:	bb 01 00 00 00       	mov    ebx,0x1
c0020461:	e9 57 02 00 00       	jmp    c00206bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020466:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002046c:	c1 e0 04             	shl    eax,0x4
c002046f:	0f b6 c0             	movzx  eax,al
c0020472:	50                   	push   eax
c0020473:	6a 06                	push   0x6
c0020475:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002047c:	50                   	push   eax
c002047d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020483:	e8 de e8 ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020488:	6a 00                	push   0x0
c002048a:	6a 01                	push   0x1
c002048c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020493:	50                   	push   eax
c0020494:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002049a:	e8 c7 e8 ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002049f:	83 c4 20             	add    esp,0x20
c00204a2:	0f b6 c3             	movzx  eax,bl
c00204a5:	0f b6 df             	movzx  ebx,bh
c00204a8:	50                   	push   eax
c00204a9:	6a 04                	push   0x4
c00204ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204b2:	50                   	push   eax
c00204b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204b9:	e8 a8 e8 ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204be:	53                   	push   ebx
c00204bf:	6a 05                	push   0x5
c00204c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204c8:	50                   	push   eax
c00204c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204cf:	e8 92 e8 ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204d4:	83 c4 20             	add    esp,0x20
c00204d7:	68 a0 00 00 00       	push   0xa0
c00204dc:	6a 07                	push   0x7
c00204de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204e5:	50                   	push   eax
c00204e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204ec:	e8 75 e8 ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204f1:	83 c4 0c             	add    esp,0xc
c00204f4:	6a 01                	push   0x1
c00204f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204fd:	50                   	push   eax
c00204fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020504:	e8 11 f3 ff ff       	call   c001f81a <IDE::polling(unsigned char, unsigned int)>
c0020509:	83 c4 10             	add    esp,0x10
c002050c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0020512:	84 c0                	test   al,al
c0020514:	74 23                	je     c0020539 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0020516:	0f b6 d8             	movzx  ebx,al
c0020519:	0f b6 d2             	movzx  edx,dl
c002051c:	53                   	push   ebx
c002051d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0020524:	50                   	push   eax
c0020525:	52                   	push   edx
c0020526:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002052c:	e8 39 f2 ff ff       	call   c001f76a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020531:	83 c4 10             	add    esp,0x10
c0020534:	e9 84 01 00 00       	jmp    c00206bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020539:	0f b6 d2             	movzx  edx,dl
c002053c:	53                   	push   ebx
c002053d:	53                   	push   ebx
c002053e:	52                   	push   edx
c002053f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020545:	e8 0a e8 ff ff       	call   c001ed54 <IDE::getBase(unsigned char)>
c002054a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002054e:	b9 06 00 00 00       	mov    ecx,0x6
c0020553:	89 c2                	mov    edx,eax
c0020555:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020558:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002055c:	83 c4 10             	add    esp,0x10
c002055f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020565:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002056c:	85 db                	test   ebx,ebx
c002056e:	0f 84 ec 00 00 00    	je     c0020660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0020574:	51                   	push   ecx
c0020575:	51                   	push   ecx
c0020576:	52                   	push   edx
c0020577:	50                   	push   eax
c0020578:	e8 57 e9 ff ff       	call   c001eed4 <IDE::waitInterrupt(unsigned char)>
c002057d:	83 c4 10             	add    esp,0x10
c0020580:	84 c0                	test   al,al
c0020582:	0f 84 d4 fe ff ff    	je     c002045c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020588:	56                   	push   esi
c0020589:	56                   	push   esi
c002058a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020591:	50                   	push   eax
c0020592:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020598:	e8 a3 e7 ff ff       	call   c001ed40 <IDE::prepareInterrupt(unsigned char)>
c002059d:	83 c4 0c             	add    esp,0xc
c00205a0:	6a 04                	push   0x4
c00205a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205a9:	50                   	push   eax
c00205aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205b0:	e8 71 e8 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c00205b5:	83 c4 0c             	add    esp,0xc
c00205b8:	89 c6                	mov    esi,eax
c00205ba:	6a 05                	push   0x5
c00205bc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205c3:	50                   	push   eax
c00205c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205ca:	e8 57 e8 ff ff       	call   c001ee26 <IDE::read(unsigned char, unsigned char)>
c00205cf:	89 f1                	mov    ecx,esi
c00205d1:	0f b6 c0             	movzx  eax,al
c00205d4:	0f b6 f1             	movzx  esi,cl
c00205d7:	c1 e0 08             	shl    eax,0x8
c00205da:	09 c6                	or     esi,eax
c00205dc:	d1 fe                	sar    esi,1
c00205de:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00205e2:	83 c4 10             	add    esp,0x10
c00205e5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00205ea:	74 41                	je     c002062d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00205ec:	31 c9                	xor    ecx,ecx
c00205ee:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00205f4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00205fb:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00205ff:	75 0a                	jne    c002060b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0020601:	01 c9                	add    ecx,ecx
c0020603:	01 cd                	add    ebp,ecx
c0020605:	4b                   	dec    ebx
c0020606:	e9 54 ff ff ff       	jmp    c002055f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002060b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020610:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020614:	51                   	push   ecx
c0020615:	51                   	push   ecx
c0020616:	52                   	push   edx
c0020617:	50                   	push   eax
c0020618:	e8 37 e7 ff ff       	call   c001ed54 <IDE::getBase(unsigned char)>
c002061d:	89 c2                	mov    edx,eax
c002061f:	89 f0                	mov    eax,esi
c0020621:	66 ef                	out    dx,ax
c0020623:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020627:	83 c4 10             	add    esp,0x10
c002062a:	41                   	inc    ecx
c002062b:	eb c1                	jmp    c00205ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002062d:	31 f6                	xor    esi,esi
c002062f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020635:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002063c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020640:	75 06                	jne    c0020648 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0020642:	01 f6                	add    esi,esi
c0020644:	01 f5                	add    ebp,esi
c0020646:	eb bd                	jmp    c0020605 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0020648:	51                   	push   ecx
c0020649:	51                   	push   ecx
c002064a:	52                   	push   edx
c002064b:	50                   	push   eax
c002064c:	e8 03 e7 ff ff       	call   c001ed54 <IDE::getBase(unsigned char)>
c0020651:	89 c2                	mov    edx,eax
c0020653:	66 ed                	in     ax,dx
c0020655:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002065a:	83 c4 10             	add    esp,0x10
c002065d:	46                   	inc    esi
c002065e:	eb cf                	jmp    c002062f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0020660:	51                   	push   ecx
c0020661:	51                   	push   ecx
c0020662:	52                   	push   edx
c0020663:	50                   	push   eax
c0020664:	e8 6b e8 ff ff       	call   c001eed4 <IDE::waitInterrupt(unsigned char)>
c0020669:	83 c4 10             	add    esp,0x10
c002066c:	84 c0                	test   al,al
c002066e:	0f 84 e8 fd ff ff    	je     c002045c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020674:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020679:	52                   	push   edx
c002067a:	52                   	push   edx
c002067b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020682:	50                   	push   eax
c0020683:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020689:	e8 b2 e6 ff ff       	call   c001ed40 <IDE::prepareInterrupt(unsigned char)>
c002068e:	83 c4 10             	add    esp,0x10
c0020691:	50                   	push   eax
c0020692:	50                   	push   eax
c0020693:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002069a:	50                   	push   eax
c002069b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206a1:	e8 ae e6 ff ff       	call   c001ed54 <IDE::getBase(unsigned char)>
c00206a6:	8d 50 07             	lea    edx,[eax+0x7]
c00206a9:	ec                   	in     al,dx
c00206aa:	83 c4 10             	add    esp,0x10
c00206ad:	a8 88                	test   al,0x88
c00206af:	74 0a                	je     c00206bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00206b1:	4b                   	dec    ebx
c00206b2:	75 dd                	jne    c0020691 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00206b4:	bb 02 00 00 00       	mov    ebx,0x2
c00206b9:	eb 02                	jmp    c00206bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00206bb:	31 db                	xor    ebx,ebx
c00206bd:	83 c4 1c             	add    esp,0x1c
c00206c0:	89 d8                	mov    eax,ebx
c00206c2:	5b                   	pop    ebx
c00206c3:	5e                   	pop    esi
c00206c4:	5f                   	pop    edi
c00206c5:	5d                   	pop    ebp
c00206c6:	c3                   	ret    
c00206c7:	90                   	nop

c00206c8 <ATAPI::diskRemoved()>:
c00206c8:	53                   	push   ebx
c00206c9:	83 ec 14             	sub    esp,0x14
c00206cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00206d0:	68 d4 76 02 c0       	push   0xc00276d4
c00206d5:	e8 f9 c9 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00206da:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00206e1:	c7 04 24 ea 76 02 c0 	mov    DWORD PTR [esp],0xc00276ea
c00206e8:	e8 e6 c9 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00206ed:	58                   	pop    eax
c00206ee:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00206f4:	e8 e3 02 ff ff       	call   c00109dc <LogicalDisk::unmount()>
c00206f9:	c7 04 24 f9 76 02 c0 	mov    DWORD PTR [esp],0xc00276f9
c0020700:	e8 ce c9 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0020705:	5a                   	pop    edx
c0020706:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002070c:	e8 d3 0c ff ff       	call   c00113e4 <VCache::writeWriteBuffer()>
c0020711:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002071b:	83 c4 18             	add    esp,0x18
c002071e:	5b                   	pop    ebx
c002071f:	e9 b0 0c ff ff       	jmp    c00113d4 <VCache::invalidateReadBuffer()>

c0020724 <ATAPI::eject()>:
c0020724:	57                   	push   edi
c0020725:	b9 03 00 00 00       	mov    ecx,0x3
c002072a:	53                   	push   ebx
c002072b:	83 ec 14             	sub    esp,0x14
c002072e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020732:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020736:	fc                   	cld    
c0020737:	31 c0                	xor    eax,eax
c0020739:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002073b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020740:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020745:	50                   	push   eax
c0020746:	50                   	push   eax
c0020747:	6a 00                	push   0x0
c0020749:	6a 00                	push   0x0
c002074b:	6a 00                	push   0x0
c002074d:	6a 02                	push   0x2
c002074f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020753:	50                   	push   eax
c0020754:	53                   	push   ebx
c0020755:	e8 ae fc ff ff       	call   c0020408 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002075a:	83 c4 14             	add    esp,0x14
c002075d:	53                   	push   ebx
c002075e:	e8 65 ff ff ff       	call   c00206c8 <ATAPI::diskRemoved()>
c0020763:	83 c4 24             	add    esp,0x24
c0020766:	31 c0                	xor    eax,eax
c0020768:	5b                   	pop    ebx
c0020769:	5f                   	pop    edi
c002076a:	c3                   	ret    
c002076b:	90                   	nop

c002076c <ATAPI::diskInserted()>:
c002076c:	83 ec 18             	sub    esp,0x18
c002076f:	68 95 79 02 c0       	push   0xc0027995
c0020774:	e8 5a c9 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0020779:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002077d:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020784:	83 c4 1c             	add    esp,0x1c
c0020787:	c3                   	ret    

c0020788 <ATAPI::detectMedia()>:
c0020788:	56                   	push   esi
c0020789:	53                   	push   ebx
c002078a:	83 ec 28             	sub    esp,0x28
c002078d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020791:	6a 0c                	push   0xc
c0020793:	6a 00                	push   0x0
c0020795:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020799:	56                   	push   esi
c002079a:	e8 f5 fe fd ff       	call   c0000694 <memset>
c002079f:	58                   	pop    eax
c00207a0:	5a                   	pop    edx
c00207a1:	6a 00                	push   0x0
c00207a3:	6a 00                	push   0x0
c00207a5:	6a 00                	push   0x0
c00207a7:	6a 00                	push   0x0
c00207a9:	56                   	push   esi
c00207aa:	53                   	push   ebx
c00207ab:	e8 58 fc ff ff       	call   c0020408 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00207b0:	83 c4 1c             	add    esp,0x1c
c00207b3:	6a 0c                	push   0xc
c00207b5:	6a 00                	push   0x0
c00207b7:	56                   	push   esi
c00207b8:	e8 d7 fe fd ff       	call   c0000694 <memset>
c00207bd:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00207c2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00207c7:	59                   	pop    ecx
c00207c8:	58                   	pop    eax
c00207c9:	6a 01                	push   0x1
c00207cb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00207cf:	50                   	push   eax
c00207d0:	6a 00                	push   0x0
c00207d2:	6a 12                	push   0x12
c00207d4:	56                   	push   esi
c00207d5:	53                   	push   ebx
c00207d6:	e8 2d fc ff ff       	call   c0020408 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00207db:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00207df:	83 c4 20             	add    esp,0x20
c00207e2:	83 e0 7f             	and    eax,0x7f
c00207e5:	3c 70                	cmp    al,0x70
c00207e7:	74 15                	je     c00207fe <ATAPI::detectMedia()+0x76>
c00207e9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00207f0:	75 0c                	jne    c00207fe <ATAPI::detectMedia()+0x76>
c00207f2:	83 ec 0c             	sub    esp,0xc
c00207f5:	53                   	push   ebx
c00207f6:	e8 71 ff ff ff       	call   c002076c <ATAPI::diskInserted()>
c00207fb:	83 c4 10             	add    esp,0x10
c00207fe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020802:	83 e0 0f             	and    eax,0xf
c0020805:	3c 02                	cmp    al,0x2
c0020807:	75 1b                	jne    c0020824 <ATAPI::detectMedia()+0x9c>
c0020809:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002080e:	75 2d                	jne    c002083d <ATAPI::detectMedia()+0xb5>
c0020810:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020817:	74 24                	je     c002083d <ATAPI::detectMedia()+0xb5>
c0020819:	83 ec 0c             	sub    esp,0xc
c002081c:	53                   	push   ebx
c002081d:	e8 a6 fe ff ff       	call   c00206c8 <ATAPI::diskRemoved()>
c0020822:	eb 16                	jmp    c002083a <ATAPI::detectMedia()+0xb2>
c0020824:	84 c0                	test   al,al
c0020826:	75 15                	jne    c002083d <ATAPI::detectMedia()+0xb5>
c0020828:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002082f:	75 0c                	jne    c002083d <ATAPI::detectMedia()+0xb5>
c0020831:	83 ec 0c             	sub    esp,0xc
c0020834:	53                   	push   ebx
c0020835:	e8 32 ff ff ff       	call   c002076c <ATAPI::diskInserted()>
c002083a:	83 c4 10             	add    esp,0x10
c002083d:	83 c4 24             	add    esp,0x24
c0020840:	5b                   	pop    ebx
c0020841:	5e                   	pop    esi
c0020842:	c3                   	ret    
c0020843:	90                   	nop

c0020844 <ATAPI::open(int, int, void*)>:
c0020844:	56                   	push   esi
c0020845:	53                   	push   ebx
c0020846:	50                   	push   eax
c0020847:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002084b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002084f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020853:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020859:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002085f:	c1 e0 06             	shl    eax,0x6
c0020862:	01 d0                	add    eax,edx
c0020864:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002086b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020871:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020878:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020882:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020888:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002088f:	6a 04                	push   0x4
c0020891:	6a 0c                	push   0xc
c0020893:	51                   	push   ecx
c0020894:	52                   	push   edx
c0020895:	e8 cc e4 ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002089a:	90                   	nop
c002089b:	90                   	nop
c002089c:	6a 00                	push   0x0
c002089e:	6a 0c                	push   0xc
c00208a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00208a7:	50                   	push   eax
c00208a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00208ae:	e8 b3 e4 ff ff       	call   c001ed66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208b3:	83 c4 14             	add    esp,0x14
c00208b6:	68 74 01 00 00       	push   0x174
c00208bb:	e8 27 95 fe ff       	call   c0009de7 <malloc>
c00208c0:	83 c4 0c             	add    esp,0xc
c00208c3:	89 c6                	mov    esi,eax
c00208c5:	6a 00                	push   0x0
c00208c7:	68 ff ff ff 7f       	push   0x7fffffff
c00208cc:	6a 00                	push   0x0
c00208ce:	6a 00                	push   0x0
c00208d0:	53                   	push   ebx
c00208d1:	68 72 7a 02 c0       	push   0xc0027a72
c00208d6:	50                   	push   eax
c00208d7:	e8 0c ff fe ff       	call   c00107e8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00208dc:	83 c4 14             	add    esp,0x14
c00208df:	56                   	push   esi
c00208e0:	e8 b9 ff fe ff       	call   c001089e <LogicalDisk::assignDriveLetter()>
c00208e5:	5a                   	pop    edx
c00208e6:	0f be c0             	movsx  eax,al
c00208e9:	59                   	pop    ecx
c00208ea:	50                   	push   eax
c00208eb:	68 07 77 02 c0       	push   0xc0027707
c00208f0:	e8 de c7 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00208f5:	58                   	pop    eax
c00208f6:	5a                   	pop    edx
c00208f7:	56                   	push   esi
c00208f8:	53                   	push   ebx
c00208f9:	e8 48 dd fe ff       	call   c000e646 <Device::addChild(Device*)>
c00208fe:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020904:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020907:	e8 da e1 fe ff       	call   c000eae6 <PhysicalDisk::startCache()>
c002090c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020913:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020916:	e8 6d fe ff ff       	call   c0020788 <ATAPI::detectMedia()>
c002091b:	83 c4 14             	add    esp,0x14
c002091e:	31 c0                	xor    eax,eax
c0020920:	5b                   	pop    ebx
c0020921:	5e                   	pop    esi
c0020922:	c3                   	ret    
c0020923:	90                   	nop

c0020924 <ATAPI::read(unsigned long long, int, void*)>:
c0020924:	55                   	push   ebp
c0020925:	57                   	push   edi
c0020926:	56                   	push   esi
c0020927:	53                   	push   ebx
c0020928:	83 ec 1c             	sub    esp,0x1c
c002092b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002092f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020933:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020937:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002093e:	74 41                	je     c0020981 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0020940:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020944:	b9 03 00 00 00       	mov    ecx,0x3
c0020949:	fc                   	cld    
c002094a:	31 c0                	xor    eax,eax
c002094c:	86 fb                	xchg   bl,bh
c002094e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020950:	c1 c3 10             	rol    ebx,0x10
c0020953:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020958:	89 e8                	mov    eax,ebp
c002095a:	86 fb                	xchg   bl,bh
c002095c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020960:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0020964:	50                   	push   eax
c0020965:	50                   	push   eax
c0020966:	55                   	push   ebp
c0020967:	c1 e5 0b             	shl    ebp,0xb
c002096a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002096e:	6a 00                	push   0x0
c0020970:	55                   	push   ebp
c0020971:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020975:	50                   	push   eax
c0020976:	56                   	push   esi
c0020977:	e8 8c fa ff ff       	call   c0020408 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002097c:	83 c4 20             	add    esp,0x20
c002097f:	eb 1a                	jmp    c002099b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020981:	83 ec 0c             	sub    esp,0xc
c0020984:	56                   	push   esi
c0020985:	e8 fe fd ff ff       	call   c0020788 <ATAPI::detectMedia()>
c002098a:	83 c4 10             	add    esp,0x10
c002098d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020994:	75 aa                	jne    c0020940 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020996:	b8 02 00 00 00       	mov    eax,0x2
c002099b:	83 c4 1c             	add    esp,0x1c
c002099e:	5b                   	pop    ebx
c002099f:	5e                   	pop    esi
c00209a0:	5f                   	pop    edi
c00209a1:	5d                   	pop    ebp
c00209a2:	c3                   	ret    
c00209a3:	90                   	nop

c00209a4 <SATA::close(int, int, void*)>:
c00209a4:	83 ec 0c             	sub    esp,0xc
c00209a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209ab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00209b1:	85 c0                	test   eax,eax
c00209b3:	74 0c                	je     c00209c1 <SATA::close(int, int, void*)+0x1d>
c00209b5:	83 ec 0c             	sub    esp,0xc
c00209b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00209ba:	50                   	push   eax
c00209bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00209be:	83 c4 10             	add    esp,0x10
c00209c1:	31 c0                	xor    eax,eax
c00209c3:	83 c4 0c             	add    esp,0xc
c00209c6:	c3                   	ret    
c00209c7:	90                   	nop

c00209c8 <SATA::powerSaving(PowerSavingLevel)>:
c00209c8:	c3                   	ret    
c00209c9:	90                   	nop

c00209ca <SATA::open(int, int, void*)>:
c00209ca:	56                   	push   esi
c00209cb:	53                   	push   ebx
c00209cc:	51                   	push   ecx
c00209cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00209d1:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c00209d8:	74 2d                	je     c0020a07 <SATA::open(int, int, void*)+0x3d>
c00209da:	83 ec 0c             	sub    esp,0xc
c00209dd:	68 4c 77 02 c0       	push   0xc002774c
c00209e2:	e8 5a 94 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00209e7:	83 c4 10             	add    esp,0x10
c00209ea:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c00209f1:	75 14                	jne    c0020a07 <SATA::open(int, int, void*)+0x3d>
c00209f3:	e4 60                	in     al,0x60
c00209f5:	3c 5a                	cmp    al,0x5a
c00209f7:	74 04                	je     c00209fd <SATA::open(int, int, void*)+0x33>
c00209f9:	3c 1c                	cmp    al,0x1c
c00209fb:	75 f6                	jne    c00209f3 <SATA::open(int, int, void*)+0x29>
c00209fd:	e4 60                	in     al,0x60
c00209ff:	3c 5a                	cmp    al,0x5a
c0020a01:	74 fa                	je     c00209fd <SATA::open(int, int, void*)+0x33>
c0020a03:	3c 1c                	cmp    al,0x1c
c0020a05:	74 f6                	je     c00209fd <SATA::open(int, int, void*)+0x33>
c0020a07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a0b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020a15:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020a1b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020a25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a29:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020a33:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020a39:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020a40:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020a47:	74 2d                	je     c0020a76 <SATA::open(int, int, void*)+0xac>
c0020a49:	83 ec 0c             	sub    esp,0xc
c0020a4c:	68 59 77 02 c0       	push   0xc0027759
c0020a51:	e8 eb 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020a56:	83 c4 10             	add    esp,0x10
c0020a59:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020a60:	75 14                	jne    c0020a76 <SATA::open(int, int, void*)+0xac>
c0020a62:	e4 60                	in     al,0x60
c0020a64:	3c 1c                	cmp    al,0x1c
c0020a66:	74 04                	je     c0020a6c <SATA::open(int, int, void*)+0xa2>
c0020a68:	3c 5a                	cmp    al,0x5a
c0020a6a:	75 f6                	jne    c0020a62 <SATA::open(int, int, void*)+0x98>
c0020a6c:	e4 60                	in     al,0x60
c0020a6e:	3c 5a                	cmp    al,0x5a
c0020a70:	74 fa                	je     c0020a6c <SATA::open(int, int, void*)+0xa2>
c0020a72:	3c 1c                	cmp    al,0x1c
c0020a74:	74 f6                	je     c0020a6c <SATA::open(int, int, void*)+0xa2>
c0020a76:	e8 23 9a fe ff       	call   c000a49e <Phys::allocatePage()>
c0020a7b:	89 c6                	mov    esi,eax
c0020a7d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020a83:	81 c6 00 10 00 00    	add    esi,0x1000
c0020a89:	e8 10 9a fe ff       	call   c000a49e <Phys::allocatePage()>
c0020a8e:	39 c6                	cmp    esi,eax
c0020a90:	74 10                	je     c0020aa2 <SATA::open(int, int, void*)+0xd8>
c0020a92:	83 ec 0c             	sub    esp,0xc
c0020a95:	68 66 77 02 c0       	push   0xc0027766
c0020a9a:	e8 16 47 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0020a9f:	83 c4 10             	add    esp,0x10
c0020aa2:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020aa9:	74 2d                	je     c0020ad8 <SATA::open(int, int, void*)+0x10e>
c0020aab:	83 ec 0c             	sub    esp,0xc
c0020aae:	68 7a 77 02 c0       	push   0xc002777a
c0020ab3:	e8 89 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020ab8:	83 c4 10             	add    esp,0x10
c0020abb:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020ac2:	75 14                	jne    c0020ad8 <SATA::open(int, int, void*)+0x10e>
c0020ac4:	e4 60                	in     al,0x60
c0020ac6:	3c 1c                	cmp    al,0x1c
c0020ac8:	74 04                	je     c0020ace <SATA::open(int, int, void*)+0x104>
c0020aca:	3c 5a                	cmp    al,0x5a
c0020acc:	75 f6                	jne    c0020ac4 <SATA::open(int, int, void*)+0xfa>
c0020ace:	e4 60                	in     al,0x60
c0020ad0:	3c 5a                	cmp    al,0x5a
c0020ad2:	74 fa                	je     c0020ace <SATA::open(int, int, void*)+0x104>
c0020ad4:	3c 1c                	cmp    al,0x1c
c0020ad6:	74 f6                	je     c0020ace <SATA::open(int, int, void*)+0x104>
c0020ad8:	83 ec 0c             	sub    esp,0xc
c0020adb:	6a 02                	push   0x2
c0020add:	e8 cb b2 fe ff       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c0020ae2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020ae8:	6a 03                	push   0x3
c0020aea:	50                   	push   eax
c0020aeb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020af1:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c0020af7:	e8 58 b9 fe ff       	call   c000c454 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020afc:	83 c4 20             	add    esp,0x20
c0020aff:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020b06:	74 2d                	je     c0020b35 <SATA::open(int, int, void*)+0x16b>
c0020b08:	83 ec 0c             	sub    esp,0xc
c0020b0b:	68 87 77 02 c0       	push   0xc0027787
c0020b10:	e8 2c 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020b15:	83 c4 10             	add    esp,0x10
c0020b18:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020b1f:	75 14                	jne    c0020b35 <SATA::open(int, int, void*)+0x16b>
c0020b21:	e4 60                	in     al,0x60
c0020b23:	3c 1c                	cmp    al,0x1c
c0020b25:	74 04                	je     c0020b2b <SATA::open(int, int, void*)+0x161>
c0020b27:	3c 5a                	cmp    al,0x5a
c0020b29:	75 f6                	jne    c0020b21 <SATA::open(int, int, void*)+0x157>
c0020b2b:	e4 60                	in     al,0x60
c0020b2d:	3c 5a                	cmp    al,0x5a
c0020b2f:	74 fa                	je     c0020b2b <SATA::open(int, int, void*)+0x161>
c0020b31:	3c 1c                	cmp    al,0x1c
c0020b33:	74 f6                	je     c0020b2b <SATA::open(int, int, void*)+0x161>
c0020b35:	83 ec 0c             	sub    esp,0xc
c0020b38:	53                   	push   ebx
c0020b39:	e8 a8 df fe ff       	call   c000eae6 <PhysicalDisk::startCache()>
c0020b3e:	83 c4 10             	add    esp,0x10
c0020b41:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020b48:	74 2d                	je     c0020b77 <SATA::open(int, int, void*)+0x1ad>
c0020b4a:	83 ec 0c             	sub    esp,0xc
c0020b4d:	68 94 77 02 c0       	push   0xc0027794
c0020b52:	e8 ea 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020b57:	83 c4 10             	add    esp,0x10
c0020b5a:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020b61:	75 14                	jne    c0020b77 <SATA::open(int, int, void*)+0x1ad>
c0020b63:	e4 60                	in     al,0x60
c0020b65:	3c 1c                	cmp    al,0x1c
c0020b67:	74 04                	je     c0020b6d <SATA::open(int, int, void*)+0x1a3>
c0020b69:	3c 5a                	cmp    al,0x5a
c0020b6b:	75 f6                	jne    c0020b63 <SATA::open(int, int, void*)+0x199>
c0020b6d:	e4 60                	in     al,0x60
c0020b6f:	3c 5a                	cmp    al,0x5a
c0020b71:	74 fa                	je     c0020b6d <SATA::open(int, int, void*)+0x1a3>
c0020b73:	3c 1c                	cmp    al,0x1c
c0020b75:	74 f6                	je     c0020b6d <SATA::open(int, int, void*)+0x1a3>
c0020b77:	83 ec 0c             	sub    esp,0xc
c0020b7a:	53                   	push   ebx
c0020b7b:	e8 de 00 ff ff       	call   c0010c5e <createPartitionsForDisk(PhysicalDisk*)>
c0020b80:	83 c4 10             	add    esp,0x10
c0020b83:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020b8a:	74 2d                	je     c0020bb9 <SATA::open(int, int, void*)+0x1ef>
c0020b8c:	83 ec 0c             	sub    esp,0xc
c0020b8f:	68 a1 77 02 c0       	push   0xc00277a1
c0020b94:	e8 a8 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020b99:	83 c4 10             	add    esp,0x10
c0020b9c:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020ba3:	75 14                	jne    c0020bb9 <SATA::open(int, int, void*)+0x1ef>
c0020ba5:	e4 60                	in     al,0x60
c0020ba7:	3c 1c                	cmp    al,0x1c
c0020ba9:	74 04                	je     c0020baf <SATA::open(int, int, void*)+0x1e5>
c0020bab:	3c 5a                	cmp    al,0x5a
c0020bad:	75 f6                	jne    c0020ba5 <SATA::open(int, int, void*)+0x1db>
c0020baf:	e4 60                	in     al,0x60
c0020bb1:	3c 5a                	cmp    al,0x5a
c0020bb3:	74 fa                	je     c0020baf <SATA::open(int, int, void*)+0x1e5>
c0020bb5:	3c 1c                	cmp    al,0x1c
c0020bb7:	74 f6                	je     c0020baf <SATA::open(int, int, void*)+0x1e5>
c0020bb9:	5a                   	pop    edx
c0020bba:	31 c0                	xor    eax,eax
c0020bbc:	5b                   	pop    ebx
c0020bbd:	5e                   	pop    esi
c0020bbe:	c3                   	ret    
c0020bbf:	90                   	nop

c0020bc0 <SATA::SATA()>:
c0020bc0:	83 ec 0c             	sub    esp,0xc
c0020bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bc7:	83 ec 04             	sub    esp,0x4
c0020bca:	68 00 02 00 00       	push   0x200
c0020bcf:	68 ae 77 02 c0       	push   0xc00277ae
c0020bd4:	50                   	push   eax
c0020bd5:	e8 a4 de fe ff       	call   c000ea7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020bda:	83 c4 10             	add    esp,0x10
c0020bdd:	ba 58 79 02 c0       	mov    edx,0xc0027958
c0020be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020be6:	89 10                	mov    DWORD PTR [eax],edx
c0020be8:	90                   	nop
c0020be9:	83 c4 0c             	add    esp,0xc
c0020bec:	c3                   	ret    
c0020bed:	90                   	nop

c0020bee <SATA::access(unsigned long long, int, void*, bool)>:
c0020bee:	55                   	push   ebp
c0020bef:	57                   	push   edi
c0020bf0:	56                   	push   esi
c0020bf1:	53                   	push   ebx
c0020bf2:	83 ec 2c             	sub    esp,0x2c
c0020bf5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020bf9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020bfd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020c01:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020c08:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020c0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c10:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c18:	75 19                	jne    c0020c33 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020c1a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020c1f:	7e 41                	jle    c0020c62 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020c21:	83 ec 0c             	sub    esp,0xc
c0020c24:	68 cd 77 02 c0       	push   0xc00277cd
c0020c29:	e8 87 45 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0020c2e:	83 c4 10             	add    esp,0x10
c0020c31:	eb 2f                	jmp    c0020c62 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020c33:	83 ec 0c             	sub    esp,0xc
c0020c36:	68 be 77 02 c0       	push   0xc00277be
c0020c3b:	e8 01 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020c40:	83 c4 10             	add    esp,0x10
c0020c43:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020c4a:	75 ce                	jne    c0020c1a <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020c4c:	e4 60                	in     al,0x60
c0020c4e:	3c 1c                	cmp    al,0x1c
c0020c50:	74 04                	je     c0020c56 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020c52:	3c 5a                	cmp    al,0x5a
c0020c54:	75 f6                	jne    c0020c4c <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020c56:	e4 60                	in     al,0x60
c0020c58:	3c 5a                	cmp    al,0x5a
c0020c5a:	74 fa                	je     c0020c56 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020c5c:	3c 1c                	cmp    al,0x1c
c0020c5e:	74 f6                	je     c0020c56 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020c60:	eb b8                	jmp    c0020c1a <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020c62:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020c69:	75 29                	jne    c0020c94 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020c6b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020c71:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020c77:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020c7d:	8d 75 02             	lea    esi,[ebp+0x2]
c0020c80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c84:	c1 e6 07             	shl    esi,0x7
c0020c87:	01 c6                	add    esi,eax
c0020c89:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020c90:	74 4a                	je     c0020cdc <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020c92:	eb 2f                	jmp    c0020cc3 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020c94:	83 ec 0c             	sub    esp,0xc
c0020c97:	68 06 78 02 c0       	push   0xc0027806
c0020c9c:	e8 a0 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020ca1:	83 c4 10             	add    esp,0x10
c0020ca4:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020cab:	75 be                	jne    c0020c6b <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020cad:	e4 60                	in     al,0x60
c0020caf:	3c 1c                	cmp    al,0x1c
c0020cb1:	74 04                	je     c0020cb7 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020cb3:	3c 5a                	cmp    al,0x5a
c0020cb5:	75 f6                	jne    c0020cad <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020cb7:	e4 60                	in     al,0x60
c0020cb9:	3c 5a                	cmp    al,0x5a
c0020cbb:	74 fa                	je     c0020cb7 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020cbd:	3c 1c                	cmp    al,0x1c
c0020cbf:	74 f6                	je     c0020cb7 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020cc1:	eb a8                	jmp    c0020c6b <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020cc3:	83 ec 0c             	sub    esp,0xc
c0020cc6:	68 15 78 02 c0       	push   0xc0027815
c0020ccb:	e8 71 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020cd0:	83 c4 10             	add    esp,0x10
c0020cd3:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020cda:	74 3d                	je     c0020d19 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020cdc:	89 e8                	mov    eax,ebp
c0020cde:	c1 e0 07             	shl    eax,0x7
c0020ce1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020ce5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020cef:	52                   	push   edx
c0020cf0:	52                   	push   edx
c0020cf1:	56                   	push   esi
c0020cf2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020cf8:	e8 fd eb ff ff       	call   c001f8fa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020cfd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d01:	83 c4 10             	add    esp,0x10
c0020d04:	b8 01 00 00 00       	mov    eax,0x1
c0020d09:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020d0e:	75 1d                	jne    c0020d2d <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020d10:	e9 c8 04 00 00       	jmp    c00211dd <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020d15:	3c 5a                	cmp    al,0x5a
c0020d17:	74 0c                	je     c0020d25 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d19:	e4 60                	in     al,0x60
c0020d1b:	3c 1c                	cmp    al,0x1c
c0020d1d:	75 f6                	jne    c0020d15 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020d1f:	eb 04                	jmp    c0020d25 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d21:	3c 1c                	cmp    al,0x1c
c0020d23:	75 b7                	jne    c0020cdc <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020d25:	e4 60                	in     al,0x60
c0020d27:	3c 5a                	cmp    al,0x5a
c0020d29:	74 fa                	je     c0020d25 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d2b:	eb f4                	jmp    c0020d21 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020d2d:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020d34:	74 3a                	je     c0020d70 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020d36:	83 ec 0c             	sub    esp,0xc
c0020d39:	68 24 78 02 c0       	push   0xc0027824
c0020d3e:	e8 fe 90 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020d43:	83 c4 10             	add    esp,0x10
c0020d46:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020d4d:	74 0d                	je     c0020d5c <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020d4f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020d54:	74 34                	je     c0020d8a <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020d56:	eb 1f                	jmp    c0020d77 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020d58:	3c 1c                	cmp    al,0x1c
c0020d5a:	74 0c                	je     c0020d68 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020d5c:	e4 60                	in     al,0x60
c0020d5e:	3c 5a                	cmp    al,0x5a
c0020d60:	75 f6                	jne    c0020d58 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020d62:	eb 04                	jmp    c0020d68 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020d64:	3c 1c                	cmp    al,0x1c
c0020d66:	75 e7                	jne    c0020d4f <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020d68:	e4 60                	in     al,0x60
c0020d6a:	3c 5a                	cmp    al,0x5a
c0020d6c:	74 fa                	je     c0020d68 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020d6e:	eb f4                	jmp    c0020d64 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020d70:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020d75:	74 1c                	je     c0020d93 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020d77:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020d7b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020d81:	c1 e1 09             	shl    ecx,0x9
c0020d84:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020d88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020d8a:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020d91:	75 55                	jne    c0020de8 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020d93:	8d 45 02             	lea    eax,[ebp+0x2]
c0020d96:	c1 e0 07             	shl    eax,0x7
c0020d99:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020d9d:	8b 38                	mov    edi,DWORD PTR [eax]
c0020d9f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020da5:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020dab:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020db5:	c1 e0 05             	shl    eax,0x5
c0020db8:	01 c7                	add    edi,eax
c0020dba:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020dbe:	83 e0 01             	and    eax,0x1
c0020dc1:	c1 e0 06             	shl    eax,0x6
c0020dc4:	88 c2                	mov    dl,al
c0020dc6:	8a 07                	mov    al,BYTE PTR [edi]
c0020dc8:	83 e0 bf             	and    eax,0xffffffbf
c0020dcb:	09 d0                	or     eax,edx
c0020dcd:	88 07                	mov    BYTE PTR [edi],al
c0020dcf:	8b 07                	mov    eax,DWORD PTR [edi]
c0020dd1:	25 e0 ff 00 00       	and    eax,0xffe0
c0020dd6:	0d 05 00 01 00       	or     eax,0x10005
c0020ddb:	89 07                	mov    DWORD PTR [edi],eax
c0020ddd:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020de4:	74 4d                	je     c0020e33 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020de6:	eb 32                	jmp    c0020e1a <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020de8:	83 ec 0c             	sub    esp,0xc
c0020deb:	68 33 78 02 c0       	push   0xc0027833
c0020df0:	e8 4c 90 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020df5:	83 c4 10             	add    esp,0x10
c0020df8:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020dff:	75 92                	jne    c0020d93 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020e01:	e4 60                	in     al,0x60
c0020e03:	3c 1c                	cmp    al,0x1c
c0020e05:	74 04                	je     c0020e0b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e07:	3c 5a                	cmp    al,0x5a
c0020e09:	75 f6                	jne    c0020e01 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020e0b:	e4 60                	in     al,0x60
c0020e0d:	3c 5a                	cmp    al,0x5a
c0020e0f:	74 fa                	je     c0020e0b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e11:	3c 1c                	cmp    al,0x1c
c0020e13:	74 f6                	je     c0020e0b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e15:	e9 79 ff ff ff       	jmp    c0020d93 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020e1a:	83 ec 0c             	sub    esp,0xc
c0020e1d:	68 42 78 02 c0       	push   0xc0027842
c0020e22:	e8 1a 90 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020e27:	83 c4 10             	add    esp,0x10
c0020e2a:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020e31:	74 3b                	je     c0020e6e <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020e33:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020e39:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020e3f:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020e45:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020e48:	50                   	push   eax
c0020e49:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020e4d:	83 c0 08             	add    eax,0x8
c0020e50:	c1 e0 04             	shl    eax,0x4
c0020e53:	50                   	push   eax
c0020e54:	6a 00                	push   0x0
c0020e56:	56                   	push   esi
c0020e57:	e8 38 f8 fd ff       	call   c0000694 <memset>
c0020e5c:	83 c4 10             	add    esp,0x10
c0020e5f:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020e66:	74 33                	je     c0020e9b <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020e68:	eb 18                	jmp    c0020e82 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020e6a:	3c 1c                	cmp    al,0x1c
c0020e6c:	74 0c                	je     c0020e7a <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020e6e:	e4 60                	in     al,0x60
c0020e70:	3c 5a                	cmp    al,0x5a
c0020e72:	75 f6                	jne    c0020e6a <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020e74:	eb 04                	jmp    c0020e7a <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020e76:	3c 1c                	cmp    al,0x1c
c0020e78:	75 b9                	jne    c0020e33 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020e7a:	e4 60                	in     al,0x60
c0020e7c:	3c 5a                	cmp    al,0x5a
c0020e7e:	74 fa                	je     c0020e7a <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020e80:	eb f4                	jmp    c0020e76 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020e82:	83 ec 0c             	sub    esp,0xc
c0020e85:	68 51 78 02 c0       	push   0xc0027851
c0020e8a:	e8 b2 8f fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020e8f:	83 c4 10             	add    esp,0x10
c0020e92:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020e99:	74 48                	je     c0020ee3 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020e9b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020ea1:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020ea7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020eab:	c1 e0 09             	shl    eax,0x9
c0020eae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020eb2:	48                   	dec    eax
c0020eb3:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020eb8:	89 c2                	mov    edx,eax
c0020eba:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020ec0:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020ec5:	09 d0                	or     eax,edx
c0020ec7:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020ecd:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020ed4:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020edb:	74 33                	je     c0020f10 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020edd:	eb 18                	jmp    c0020ef7 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020edf:	3c 1c                	cmp    al,0x1c
c0020ee1:	74 0c                	je     c0020eef <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020ee3:	e4 60                	in     al,0x60
c0020ee5:	3c 5a                	cmp    al,0x5a
c0020ee7:	75 f6                	jne    c0020edf <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020ee9:	eb 04                	jmp    c0020eef <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020eeb:	3c 1c                	cmp    al,0x1c
c0020eed:	75 ac                	jne    c0020e9b <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020eef:	e4 60                	in     al,0x60
c0020ef1:	3c 5a                	cmp    al,0x5a
c0020ef3:	74 fa                	je     c0020eef <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020ef5:	eb f4                	jmp    c0020eeb <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020ef7:	83 ec 0c             	sub    esp,0xc
c0020efa:	68 60 78 02 c0       	push   0xc0027860
c0020eff:	e8 3d 8f fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020f04:	83 c4 10             	add    esp,0x10
c0020f07:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020f0e:	74 63                	je     c0020f73 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020f10:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020f13:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020f17:	66 25 00 7f          	and    ax,0x7f00
c0020f1b:	66 0d 27 80          	or     ax,0x8027
c0020f1f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020f24:	66 89 06             	mov    WORD PTR [esi],ax
c0020f27:	19 c0                	sbb    eax,eax
c0020f29:	83 e0 f0             	and    eax,0xfffffff0
c0020f2c:	83 c0 35             	add    eax,0x35
c0020f2f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020f32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f36:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020f3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f3e:	c1 e8 10             	shr    eax,0x10
c0020f41:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020f44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f48:	c1 e8 18             	shr    eax,0x18
c0020f4b:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020f52:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020f55:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020f59:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020f5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020f60:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020f63:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020f67:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020f6b:	74 33                	je     c0020fa0 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020f6d:	eb 18                	jmp    c0020f87 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020f6f:	3c 1c                	cmp    al,0x1c
c0020f71:	74 0c                	je     c0020f7f <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020f73:	e4 60                	in     al,0x60
c0020f75:	3c 5a                	cmp    al,0x5a
c0020f77:	75 f6                	jne    c0020f6f <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020f79:	eb 04                	jmp    c0020f7f <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020f7b:	3c 1c                	cmp    al,0x1c
c0020f7d:	75 91                	jne    c0020f10 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020f7f:	e4 60                	in     al,0x60
c0020f81:	3c 5a                	cmp    al,0x5a
c0020f83:	74 fa                	je     c0020f7f <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020f85:	eb f4                	jmp    c0020f7b <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020f87:	83 ec 0c             	sub    esp,0xc
c0020f8a:	68 6f 78 02 c0       	push   0xc002786f
c0020f8f:	e8 ad 8e fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020f94:	83 c4 10             	add    esp,0x10
c0020f97:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020f9e:	74 11                	je     c0020fb1 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020fa0:	89 e8                	mov    eax,ebp
c0020fa2:	31 f6                	xor    esi,esi
c0020fa4:	c1 e0 07             	shl    eax,0x7
c0020fa7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020fab:	eb 21                	jmp    c0020fce <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020fad:	3c 1c                	cmp    al,0x1c
c0020faf:	74 0c                	je     c0020fbd <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020fb1:	e4 60                	in     al,0x60
c0020fb3:	3c 5a                	cmp    al,0x5a
c0020fb5:	75 f6                	jne    c0020fad <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020fb7:	eb 04                	jmp    c0020fbd <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020fb9:	3c 1c                	cmp    al,0x1c
c0020fbb:	75 e3                	jne    c0020fa0 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020fbd:	e4 60                	in     al,0x60
c0020fbf:	3c 5a                	cmp    al,0x5a
c0020fc1:	74 fa                	je     c0020fbd <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020fc3:	eb f4                	jmp    c0020fb9 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020fc5:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020fcb:	74 0c                	je     c0020fd9 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020fcd:	46                   	inc    esi
c0020fce:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020fd4:	80 e2 88             	and    dl,0x88
c0020fd7:	75 ec                	jne    c0020fc5 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020fd9:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020fe0:	74 3d                	je     c002101f <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020fe2:	83 ec 0c             	sub    esp,0xc
c0020fe5:	68 7e 78 02 c0       	push   0xc002787e
c0020fea:	e8 52 8e fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020fef:	8b 15 e0 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028be0
c0020ff5:	83 c4 10             	add    esp,0x10
c0020ff8:	f6 c2 80             	test   dl,0x80
c0020ffb:	74 0e                	je     c002100b <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020ffd:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0021003:	75 2f                	jne    c0021034 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0021005:	eb 20                	jmp    c0021027 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0021007:	3c 1c                	cmp    al,0x1c
c0021009:	74 0c                	je     c0021017 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002100b:	e4 60                	in     al,0x60
c002100d:	3c 5a                	cmp    al,0x5a
c002100f:	75 f6                	jne    c0021007 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0021011:	eb 04                	jmp    c0021017 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0021013:	3c 1c                	cmp    al,0x1c
c0021015:	75 e6                	jne    c0020ffd <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0021017:	e4 60                	in     al,0x60
c0021019:	3c 5a                	cmp    al,0x5a
c002101b:	74 fa                	je     c0021017 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002101d:	eb f4                	jmp    c0021013 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c002101f:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0021025:	75 13                	jne    c002103a <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0021027:	83 ec 0c             	sub    esp,0xc
c002102a:	68 8e 78 02 c0       	push   0xc002788e
c002102f:	e9 d2 00 00 00       	jmp    c0021106 <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0021034:	0f ba e2 0b          	bt     edx,0xb
c0021038:	72 25                	jb     c002105f <SATA::access(unsigned long long, int, void*, bool)+0x471>
c002103a:	be 01 00 00 00       	mov    esi,0x1
c002103f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021043:	89 e8                	mov    eax,ebp
c0021045:	d3 e6                	shl    esi,cl
c0021047:	c1 e0 07             	shl    eax,0x7
c002104a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002104e:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0021055:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c002105b:	74 4a                	je     c00210a7 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c002105d:	eb 2f                	jmp    c002108e <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c002105f:	83 ec 0c             	sub    esp,0xc
c0021062:	68 9c 78 02 c0       	push   0xc002789c
c0021067:	e8 d5 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002106c:	83 c4 10             	add    esp,0x10
c002106f:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0021076:	75 c2                	jne    c002103a <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0021078:	e4 60                	in     al,0x60
c002107a:	3c 5a                	cmp    al,0x5a
c002107c:	74 04                	je     c0021082 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c002107e:	3c 1c                	cmp    al,0x1c
c0021080:	75 f6                	jne    c0021078 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0021082:	e4 60                	in     al,0x60
c0021084:	3c 5a                	cmp    al,0x5a
c0021086:	74 fa                	je     c0021082 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0021088:	3c 1c                	cmp    al,0x1c
c002108a:	74 f6                	je     c0021082 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c002108c:	eb ac                	jmp    c002103a <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002108e:	83 ec 0c             	sub    esp,0xc
c0021091:	68 ac 78 02 c0       	push   0xc00278ac
c0021096:	e8 a6 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002109b:	83 c4 10             	add    esp,0x10
c002109e:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c00210a5:	74 0f                	je     c00210b6 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c00210a7:	89 e8                	mov    eax,ebp
c00210a9:	c1 e0 07             	shl    eax,0x7
c00210ac:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00210b0:	eb 24                	jmp    c00210d6 <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c00210b2:	3c 1c                	cmp    al,0x1c
c00210b4:	74 0c                	je     c00210c2 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00210b6:	e4 60                	in     al,0x60
c00210b8:	3c 5a                	cmp    al,0x5a
c00210ba:	75 f6                	jne    c00210b2 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c00210bc:	eb 04                	jmp    c00210c2 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00210be:	3c 1c                	cmp    al,0x1c
c00210c0:	75 e5                	jne    c00210a7 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00210c2:	e4 60                	in     al,0x60
c00210c4:	3c 5a                	cmp    al,0x5a
c00210c6:	74 fa                	je     c00210c2 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00210c8:	eb f4                	jmp    c00210be <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c00210ca:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c00210d0:	0f ba e2 1e          	bt     edx,0x1e
c00210d4:	72 28                	jb     c00210fe <SATA::access(unsigned long long, int, void*, bool)+0x510>
c00210d6:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c00210dc:	85 d6                	test   esi,edx
c00210de:	75 ea                	jne    c00210ca <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c00210e0:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c00210e7:	75 2f                	jne    c0021118 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c00210e9:	89 e8                	mov    eax,ebp
c00210eb:	c1 e0 07             	shl    eax,0x7
c00210ee:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00210f2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00210f8:	0f ba e0 1e          	bt     eax,0x1e
c00210fc:	73 49                	jae    c0021147 <SATA::access(unsigned long long, int, void*, bool)+0x559>
c00210fe:	83 ec 0c             	sub    esp,0xc
c0021101:	68 bc 78 02 c0       	push   0xc00278bc
c0021106:	e8 c8 bf fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c002110b:	83 c4 10             	add    esp,0x10
c002110e:	b8 01 00 00 00       	mov    eax,0x1
c0021113:	e9 c5 00 00 00       	jmp    c00211dd <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0021118:	83 ec 0c             	sub    esp,0xc
c002111b:	68 cd 78 02 c0       	push   0xc00278cd
c0021120:	e8 1c 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021125:	83 c4 10             	add    esp,0x10
c0021128:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c002112f:	75 b8                	jne    c00210e9 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0021131:	e4 60                	in     al,0x60
c0021133:	3c 5a                	cmp    al,0x5a
c0021135:	74 04                	je     c002113b <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0021137:	3c 1c                	cmp    al,0x1c
c0021139:	75 f6                	jne    c0021131 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c002113b:	e4 60                	in     al,0x60
c002113d:	3c 5a                	cmp    al,0x5a
c002113f:	74 fa                	je     c002113b <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0021141:	3c 1c                	cmp    al,0x1c
c0021143:	74 f6                	je     c002113b <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0021145:	eb a2                	jmp    c00210e9 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0021147:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c002114e:	74 3a                	je     c002118a <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0021150:	83 ec 0c             	sub    esp,0xc
c0021153:	68 dd 78 02 c0       	push   0xc00278dd
c0021158:	e8 e4 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002115d:	83 c4 10             	add    esp,0x10
c0021160:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0021167:	74 0d                	je     c0021176 <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0021169:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002116e:	75 31                	jne    c00211a1 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0021170:	eb 1f                	jmp    c0021191 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0021172:	3c 1c                	cmp    al,0x1c
c0021174:	74 0c                	je     c0021182 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0021176:	e4 60                	in     al,0x60
c0021178:	3c 5a                	cmp    al,0x5a
c002117a:	75 f6                	jne    c0021172 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c002117c:	eb 04                	jmp    c0021182 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c002117e:	3c 1c                	cmp    al,0x1c
c0021180:	75 e7                	jne    c0021169 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0021182:	e4 60                	in     al,0x60
c0021184:	3c 5a                	cmp    al,0x5a
c0021186:	74 fa                	je     c0021182 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0021188:	eb f4                	jmp    c002117e <SATA::access(unsigned long long, int, void*, bool)+0x590>
c002118a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002118f:	75 19                	jne    c00211aa <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0021191:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0021197:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002119b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002119f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211a1:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c00211a8:	75 04                	jne    c00211ae <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c00211aa:	31 c0                	xor    eax,eax
c00211ac:	eb 2f                	jmp    c00211dd <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00211ae:	83 ec 0c             	sub    esp,0xc
c00211b1:	68 ed 78 02 c0       	push   0xc00278ed
c00211b6:	e8 86 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00211bb:	83 c4 10             	add    esp,0x10
c00211be:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c00211c5:	75 e3                	jne    c00211aa <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00211c7:	e4 60                	in     al,0x60
c00211c9:	3c 1c                	cmp    al,0x1c
c00211cb:	74 04                	je     c00211d1 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00211cd:	3c 5a                	cmp    al,0x5a
c00211cf:	75 f6                	jne    c00211c7 <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c00211d1:	e4 60                	in     al,0x60
c00211d3:	3c 5a                	cmp    al,0x5a
c00211d5:	74 fa                	je     c00211d1 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00211d7:	3c 1c                	cmp    al,0x1c
c00211d9:	74 f6                	je     c00211d1 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00211db:	eb cd                	jmp    c00211aa <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00211dd:	83 c4 2c             	add    esp,0x2c
c00211e0:	5b                   	pop    ebx
c00211e1:	5e                   	pop    esi
c00211e2:	5f                   	pop    edi
c00211e3:	5d                   	pop    ebp
c00211e4:	c3                   	ret    
c00211e5:	90                   	nop

c00211e6 <SATA::read(unsigned long long, int, void*)>:
c00211e6:	55                   	push   ebp
c00211e7:	57                   	push   edi
c00211e8:	56                   	push   esi
c00211e9:	53                   	push   ebx
c00211ea:	83 ec 0c             	sub    esp,0xc
c00211ed:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00211f1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00211f5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00211f9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00211fd:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0021204:	74 2d                	je     c0021233 <SATA::read(unsigned long long, int, void*)+0x4d>
c0021206:	83 ec 0c             	sub    esp,0xc
c0021209:	68 fd 78 02 c0       	push   0xc00278fd
c002120e:	e8 2e 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021213:	83 c4 10             	add    esp,0x10
c0021216:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c002121d:	75 14                	jne    c0021233 <SATA::read(unsigned long long, int, void*)+0x4d>
c002121f:	e4 60                	in     al,0x60
c0021221:	3c 1c                	cmp    al,0x1c
c0021223:	74 04                	je     c0021229 <SATA::read(unsigned long long, int, void*)+0x43>
c0021225:	3c 5a                	cmp    al,0x5a
c0021227:	75 f6                	jne    c002121f <SATA::read(unsigned long long, int, void*)+0x39>
c0021229:	e4 60                	in     al,0x60
c002122b:	3c 5a                	cmp    al,0x5a
c002122d:	74 fa                	je     c0021229 <SATA::read(unsigned long long, int, void*)+0x43>
c002122f:	3c 1c                	cmp    al,0x1c
c0021231:	74 f6                	je     c0021229 <SATA::read(unsigned long long, int, void*)+0x43>
c0021233:	8d 53 ff             	lea    edx,[ebx-0x1]
c0021236:	b8 04 00 00 00       	mov    eax,0x4
c002123b:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021241:	0f 87 96 00 00 00    	ja     c00212dd <SATA::read(unsigned long long, int, void*)+0xf7>
c0021247:	b8 06 00 00 00       	mov    eax,0x6
c002124c:	85 ed                	test   ebp,ebp
c002124e:	0f 84 89 00 00 00    	je     c00212dd <SATA::read(unsigned long long, int, void*)+0xf7>
c0021254:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c002125b:	74 2d                	je     c002128a <SATA::read(unsigned long long, int, void*)+0xa4>
c002125d:	83 ec 0c             	sub    esp,0xc
c0021260:	68 0a 79 02 c0       	push   0xc002790a
c0021265:	e8 d7 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002126a:	83 c4 10             	add    esp,0x10
c002126d:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0021274:	75 14                	jne    c002128a <SATA::read(unsigned long long, int, void*)+0xa4>
c0021276:	e4 60                	in     al,0x60
c0021278:	3c 5a                	cmp    al,0x5a
c002127a:	74 04                	je     c0021280 <SATA::read(unsigned long long, int, void*)+0x9a>
c002127c:	3c 1c                	cmp    al,0x1c
c002127e:	75 f6                	jne    c0021276 <SATA::read(unsigned long long, int, void*)+0x90>
c0021280:	e4 60                	in     al,0x60
c0021282:	3c 5a                	cmp    al,0x5a
c0021284:	74 fa                	je     c0021280 <SATA::read(unsigned long long, int, void*)+0x9a>
c0021286:	3c 1c                	cmp    al,0x1c
c0021288:	74 f6                	je     c0021280 <SATA::read(unsigned long long, int, void*)+0x9a>
c002128a:	50                   	push   eax
c002128b:	50                   	push   eax
c002128c:	6a 00                	push   0x0
c002128e:	55                   	push   ebp
c002128f:	53                   	push   ebx
c0021290:	57                   	push   edi
c0021291:	56                   	push   esi
c0021292:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021296:	e8 53 f9 ff ff       	call   c0020bee <SATA::access(unsigned long long, int, void*, bool)>
c002129b:	83 c4 20             	add    esp,0x20
c002129e:	89 c3                	mov    ebx,eax
c00212a0:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c00212a7:	74 2d                	je     c00212d6 <SATA::read(unsigned long long, int, void*)+0xf0>
c00212a9:	83 ec 0c             	sub    esp,0xc
c00212ac:	68 17 79 02 c0       	push   0xc0027917
c00212b1:	e8 8b 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00212b6:	83 c4 10             	add    esp,0x10
c00212b9:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c00212c0:	75 14                	jne    c00212d6 <SATA::read(unsigned long long, int, void*)+0xf0>
c00212c2:	e4 60                	in     al,0x60
c00212c4:	3c 5a                	cmp    al,0x5a
c00212c6:	74 04                	je     c00212cc <SATA::read(unsigned long long, int, void*)+0xe6>
c00212c8:	3c 1c                	cmp    al,0x1c
c00212ca:	75 f6                	jne    c00212c2 <SATA::read(unsigned long long, int, void*)+0xdc>
c00212cc:	e4 60                	in     al,0x60
c00212ce:	3c 5a                	cmp    al,0x5a
c00212d0:	74 fa                	je     c00212cc <SATA::read(unsigned long long, int, void*)+0xe6>
c00212d2:	3c 1c                	cmp    al,0x1c
c00212d4:	74 f6                	je     c00212cc <SATA::read(unsigned long long, int, void*)+0xe6>
c00212d6:	31 c0                	xor    eax,eax
c00212d8:	85 db                	test   ebx,ebx
c00212da:	0f 95 c0             	setne  al
c00212dd:	83 c4 0c             	add    esp,0xc
c00212e0:	5b                   	pop    ebx
c00212e1:	5e                   	pop    esi
c00212e2:	5f                   	pop    edi
c00212e3:	5d                   	pop    ebp
c00212e4:	c3                   	ret    
c00212e5:	90                   	nop

c00212e6 <SATA::write(unsigned long long, int, void*)>:
c00212e6:	55                   	push   ebp
c00212e7:	57                   	push   edi
c00212e8:	56                   	push   esi
c00212e9:	53                   	push   ebx
c00212ea:	83 ec 1c             	sub    esp,0x1c
c00212ed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00212f1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00212f5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00212f9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00212fd:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0021304:	74 2d                	je     c0021333 <SATA::write(unsigned long long, int, void*)+0x4d>
c0021306:	83 ec 0c             	sub    esp,0xc
c0021309:	68 24 79 02 c0       	push   0xc0027924
c002130e:	e8 2e 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021313:	83 c4 10             	add    esp,0x10
c0021316:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c002131d:	75 14                	jne    c0021333 <SATA::write(unsigned long long, int, void*)+0x4d>
c002131f:	e4 60                	in     al,0x60
c0021321:	3c 1c                	cmp    al,0x1c
c0021323:	74 04                	je     c0021329 <SATA::write(unsigned long long, int, void*)+0x43>
c0021325:	3c 5a                	cmp    al,0x5a
c0021327:	75 f6                	jne    c002131f <SATA::write(unsigned long long, int, void*)+0x39>
c0021329:	e4 60                	in     al,0x60
c002132b:	3c 5a                	cmp    al,0x5a
c002132d:	74 fa                	je     c0021329 <SATA::write(unsigned long long, int, void*)+0x43>
c002132f:	3c 1c                	cmp    al,0x1c
c0021331:	74 f6                	je     c0021329 <SATA::write(unsigned long long, int, void*)+0x43>
c0021333:	8d 55 ff             	lea    edx,[ebp-0x1]
c0021336:	b8 04 00 00 00       	mov    eax,0x4
c002133b:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021341:	0f 87 bd 00 00 00    	ja     c0021404 <SATA::write(unsigned long long, int, void*)+0x11e>
c0021347:	b8 06 00 00 00       	mov    eax,0x6
c002134c:	85 db                	test   ebx,ebx
c002134e:	0f 84 b0 00 00 00    	je     c0021404 <SATA::write(unsigned long long, int, void*)+0x11e>
c0021354:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c002135b:	74 2d                	je     c002138a <SATA::write(unsigned long long, int, void*)+0xa4>
c002135d:	83 ec 0c             	sub    esp,0xc
c0021360:	68 32 79 02 c0       	push   0xc0027932
c0021365:	e8 d7 8a fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002136a:	83 c4 10             	add    esp,0x10
c002136d:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0021374:	75 14                	jne    c002138a <SATA::write(unsigned long long, int, void*)+0xa4>
c0021376:	e4 60                	in     al,0x60
c0021378:	3c 1c                	cmp    al,0x1c
c002137a:	74 04                	je     c0021380 <SATA::write(unsigned long long, int, void*)+0x9a>
c002137c:	3c 5a                	cmp    al,0x5a
c002137e:	75 f6                	jne    c0021376 <SATA::write(unsigned long long, int, void*)+0x90>
c0021380:	e4 60                	in     al,0x60
c0021382:	3c 5a                	cmp    al,0x5a
c0021384:	74 fa                	je     c0021380 <SATA::write(unsigned long long, int, void*)+0x9a>
c0021386:	3c 1c                	cmp    al,0x1c
c0021388:	74 f6                	je     c0021380 <SATA::write(unsigned long long, int, void*)+0x9a>
c002138a:	c1 e5 09             	shl    ebp,0x9
c002138d:	01 dd                	add    ebp,ebx
c002138f:	89 f0                	mov    eax,esi
c0021391:	89 fa                	mov    edx,edi
c0021393:	83 c0 01             	add    eax,0x1
c0021396:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002139a:	83 d2 00             	adc    edx,0x0
c002139d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00213a1:	50                   	push   eax
c00213a2:	50                   	push   eax
c00213a3:	6a 01                	push   0x1
c00213a5:	53                   	push   ebx
c00213a6:	81 c3 00 02 00 00    	add    ebx,0x200
c00213ac:	6a 01                	push   0x1
c00213ae:	57                   	push   edi
c00213af:	56                   	push   esi
c00213b0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00213b4:	e8 35 f8 ff ff       	call   c0020bee <SATA::access(unsigned long long, int, void*, bool)>
c00213b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00213bd:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00213c1:	83 c4 20             	add    esp,0x20
c00213c4:	39 dd                	cmp    ebp,ebx
c00213c6:	75 c7                	jne    c002138f <SATA::write(unsigned long long, int, void*)+0xa9>
c00213c8:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c00213cf:	75 04                	jne    c00213d5 <SATA::write(unsigned long long, int, void*)+0xef>
c00213d1:	31 c0                	xor    eax,eax
c00213d3:	eb 2f                	jmp    c0021404 <SATA::write(unsigned long long, int, void*)+0x11e>
c00213d5:	83 ec 0c             	sub    esp,0xc
c00213d8:	68 40 79 02 c0       	push   0xc0027940
c00213dd:	e8 5f 8a fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00213e2:	83 c4 10             	add    esp,0x10
c00213e5:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c00213ec:	75 e3                	jne    c00213d1 <SATA::write(unsigned long long, int, void*)+0xeb>
c00213ee:	e4 60                	in     al,0x60
c00213f0:	3c 5a                	cmp    al,0x5a
c00213f2:	74 04                	je     c00213f8 <SATA::write(unsigned long long, int, void*)+0x112>
c00213f4:	3c 1c                	cmp    al,0x1c
c00213f6:	75 f6                	jne    c00213ee <SATA::write(unsigned long long, int, void*)+0x108>
c00213f8:	e4 60                	in     al,0x60
c00213fa:	3c 5a                	cmp    al,0x5a
c00213fc:	74 fa                	je     c00213f8 <SATA::write(unsigned long long, int, void*)+0x112>
c00213fe:	3c 1c                	cmp    al,0x1c
c0021400:	74 f6                	je     c00213f8 <SATA::write(unsigned long long, int, void*)+0x112>
c0021402:	eb cd                	jmp    c00213d1 <SATA::write(unsigned long long, int, void*)+0xeb>
c0021404:	83 c4 1c             	add    esp,0x1c
c0021407:	5b                   	pop    ebx
c0021408:	5e                   	pop    esi
c0021409:	5f                   	pop    edi
c002140a:	5d                   	pop    ebp
c002140b:	c3                   	ret    

c002140c <SATAPI::write(unsigned long long, int, void*)>:
c002140c:	b8 03 00 00 00       	mov    eax,0x3
c0021411:	c3                   	ret    

c0021412 <SATAPI::close(int, int, void*)>:
c0021412:	83 ec 0c             	sub    esp,0xc
c0021415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021419:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002141f:	85 c0                	test   eax,eax
c0021421:	74 0c                	je     c002142f <SATAPI::close(int, int, void*)+0x1d>
c0021423:	83 ec 0c             	sub    esp,0xc
c0021426:	8b 10                	mov    edx,DWORD PTR [eax]
c0021428:	50                   	push   eax
c0021429:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002142c:	83 c4 10             	add    esp,0x10
c002142f:	31 c0                	xor    eax,eax
c0021431:	83 c4 0c             	add    esp,0xc
c0021434:	c3                   	ret    
c0021435:	90                   	nop

c0021436 <SATAPI::SATAPI()>:
c0021436:	83 ec 0c             	sub    esp,0xc
c0021439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002143d:	83 ec 04             	sub    esp,0x4
c0021440:	68 00 08 00 00       	push   0x800
c0021445:	68 88 79 02 c0       	push   0xc0027988
c002144a:	50                   	push   eax
c002144b:	e8 2e d6 fe ff       	call   c000ea7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021450:	83 c4 10             	add    esp,0x10
c0021453:	ba c4 7a 02 c0       	mov    edx,0xc0027ac4
c0021458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002145c:	89 10                	mov    DWORD PTR [eax],edx
c002145e:	90                   	nop
c002145f:	83 c4 0c             	add    esp,0xc
c0021462:	c3                   	ret    
c0021463:	90                   	nop

c0021464 <SATAPI::diskRemoved()>:
c0021464:	c3                   	ret    
c0021465:	90                   	nop

c0021466 <SATAPI::diskInserted()>:
c0021466:	83 ec 18             	sub    esp,0x18
c0021469:	68 94 79 02 c0       	push   0xc0027994
c002146e:	e8 60 bc fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0021473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021477:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002147e:	83 c4 1c             	add    esp,0x1c
c0021481:	c3                   	ret    

c0021482 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0021482:	55                   	push   ebp
c0021483:	57                   	push   edi
c0021484:	56                   	push   esi
c0021485:	53                   	push   ebx
c0021486:	83 ec 38             	sub    esp,0x38
c0021489:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c002148d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0021491:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0021495:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021499:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002149d:	68 ac 79 02 c0       	push   0xc00279ac
c00214a2:	e8 2c bc fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00214a7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00214ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00214b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00214b7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00214bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00214c1:	c1 e0 07             	shl    eax,0x7
c00214c4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00214c8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00214cc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00214d6:	5a                   	pop    edx
c00214d7:	59                   	pop    ecx
c00214d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214dc:	8d 58 02             	lea    ebx,[eax+0x2]
c00214df:	c1 e3 07             	shl    ebx,0x7
c00214e2:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00214e6:	53                   	push   ebx
c00214e7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00214ed:	e8 08 e4 ff ff       	call   c001f8fa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00214f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00214f6:	83 c4 10             	add    esp,0x10
c00214f9:	b8 01 00 00 00       	mov    eax,0x1
c00214fe:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0021503:	0f 84 ff 01 00 00    	je     c0021708 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0021509:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002150f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021511:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0021517:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002151d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021521:	c1 e1 05             	shl    ecx,0x5
c0021524:	01 c8                	add    eax,ecx
c0021526:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021528:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002152e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0021534:	89 08                	mov    DWORD PTR [eax],ecx
c0021536:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002153c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0021542:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0021548:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002154b:	8d 7b 40             	lea    edi,[ebx+0x40]
c002154e:	50                   	push   eax
c002154f:	68 90 00 00 00       	push   0x90
c0021554:	6a 00                	push   0x0
c0021556:	53                   	push   ebx
c0021557:	e8 38 f1 fd ff       	call   c0000694 <memset>
c002155c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0021560:	b9 0c 00 00 00       	mov    ecx,0xc
c0021565:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021567:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002156d:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0021571:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0021577:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002157b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002157f:	48                   	dec    eax
c0021580:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021585:	89 c1                	mov    ecx,eax
c0021587:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002158d:	25 00 00 c0 ff       	and    eax,0xffc00000
c0021592:	09 c8                	or     eax,ecx
c0021594:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002159a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002159d:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00215a4:	66 25 00 7f          	and    ax,0x7f00
c00215a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00215ac:	66 0d 27 80          	or     ax,0x8027
c00215b0:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00215b4:	66 89 03             	mov    WORD PTR [ebx],ax
c00215b7:	89 d0                	mov    eax,edx
c00215b9:	c1 ea 18             	shr    edx,0x18
c00215bc:	c1 e8 10             	shr    eax,0x10
c00215bf:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00215c2:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00215c5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00215c9:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00215cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00215d0:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00215d3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00215d7:	83 c4 10             	add    esp,0x10
c00215da:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00215de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215e2:	31 c0                	xor    eax,eax
c00215e4:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00215ea:	80 e1 88             	and    cl,0x88
c00215ed:	74 0a                	je     c00215f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c00215ef:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00215f4:	74 0a                	je     c0021600 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c00215f6:	40                   	inc    eax
c00215f7:	eb eb                	jmp    c00215e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c00215f9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00215fe:	75 0a                	jne    c002160a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0021600:	83 ec 0c             	sub    esp,0xc
c0021603:	68 c6 79 02 c0       	push   0xc00279c6
c0021608:	eb 43                	jmp    c002164d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c002160a:	be 01 00 00 00       	mov    esi,0x1
c002160f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021613:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021617:	d3 e6                	shl    esi,cl
c0021619:	c1 e7 07             	shl    edi,0x7
c002161c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0021622:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0021627:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002162b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0021631:	85 c6                	test   esi,eax
c0021633:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0021639:	0f 84 96 00 00 00    	je     c00216d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c002163f:	0f ba e0 1e          	bt     eax,0x1e
c0021643:	73 1a                	jae    c002165f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c0021645:	83 ec 0c             	sub    esp,0xc
c0021648:	68 db 79 02 c0       	push   0xc00279db
c002164d:	e8 81 ba fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0021652:	83 c4 10             	add    esp,0x10
c0021655:	b8 01 00 00 00       	mov    eax,0x1
c002165a:	e9 a9 00 00 00       	jmp    c0021708 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c002165f:	83 fb 0d             	cmp    ebx,0xd
c0021662:	77 12                	ja     c0021676 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c0021664:	83 ec 0c             	sub    esp,0xc
c0021667:	68 c8 00 00 00       	push   0xc8
c002166c:	e8 83 7b ff ff       	call   c00191f4 <milliTenthSleep(unsigned int)>
c0021671:	83 c4 10             	add    esp,0x10
c0021674:	eb 2a                	jmp    c00216a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0021676:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c002167c:	83 f8 0d             	cmp    eax,0xd
c002167f:	77 0a                	ja     c002168b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c0021681:	83 ec 0c             	sub    esp,0xc
c0021684:	68 58 02 00 00       	push   0x258
c0021689:	eb 28                	jmp    c00216b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c002168b:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0021691:	83 f8 0d             	cmp    eax,0xd
c0021694:	77 0a                	ja     c00216a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0021696:	83 ec 0c             	sub    esp,0xc
c0021699:	68 dc 05 00 00       	push   0x5dc
c002169e:	eb 13                	jmp    c00216b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c00216a0:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c00216a6:	83 f8 0d             	cmp    eax,0xd
c00216a9:	77 10                	ja     c00216bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c00216ab:	83 ec 0c             	sub    esp,0xc
c00216ae:	68 c4 09 00 00       	push   0x9c4
c00216b3:	e8 3c 7b ff ff       	call   c00191f4 <milliTenthSleep(unsigned int)>
c00216b8:	83 c4 10             	add    esp,0x10
c00216bb:	43                   	inc    ebx
c00216bc:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c00216c2:	0f 85 63 ff ff ff    	jne    c002162b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c00216c8:	83 ec 0c             	sub    esp,0xc
c00216cb:	68 ee 79 02 c0       	push   0xc00279ee
c00216d0:	e9 78 ff ff ff       	jmp    c002164d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00216d5:	0f ba e0 1e          	bt     eax,0x1e
c00216d9:	73 0d                	jae    c00216e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c00216db:	83 ec 0c             	sub    esp,0xc
c00216de:	68 02 7a 02 c0       	push   0xc0027a02
c00216e3:	e9 65 ff ff ff       	jmp    c002164d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00216e8:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00216ed:	74 17                	je     c0021706 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c00216ef:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00216f4:	74 10                	je     c0021706 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c00216f6:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00216fc:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021700:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021704:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021706:	31 c0                	xor    eax,eax
c0021708:	83 c4 2c             	add    esp,0x2c
c002170b:	5b                   	pop    ebx
c002170c:	5e                   	pop    esi
c002170d:	5f                   	pop    edi
c002170e:	5d                   	pop    ebp
c002170f:	c3                   	ret    

c0021710 <SATAPI::eject()>:
c0021710:	57                   	push   edi
c0021711:	b9 03 00 00 00       	mov    ecx,0x3
c0021716:	83 ec 18             	sub    esp,0x18
c0021719:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002171d:	fc                   	cld    
c002171e:	31 c0                	xor    eax,eax
c0021720:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021722:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021727:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002172c:	50                   	push   eax
c002172d:	6a 00                	push   0x0
c002172f:	6a 00                	push   0x0
c0021731:	6a 00                	push   0x0
c0021733:	6a 00                	push   0x0
c0021735:	6a 02                	push   0x2
c0021737:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002173b:	50                   	push   eax
c002173c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021740:	e8 3d fd ff ff       	call   c0021482 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021745:	31 c0                	xor    eax,eax
c0021747:	83 c4 38             	add    esp,0x38
c002174a:	5f                   	pop    edi
c002174b:	c3                   	ret    

c002174c <SATAPI::detectMedia()>:
c002174c:	56                   	push   esi
c002174d:	53                   	push   ebx
c002174e:	83 ec 30             	sub    esp,0x30
c0021751:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021755:	68 17 7a 02 c0       	push   0xc0027a17
c002175a:	e8 74 b9 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c002175f:	83 c4 0c             	add    esp,0xc
c0021762:	6a 0c                	push   0xc
c0021764:	6a 00                	push   0x0
c0021766:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002176a:	56                   	push   esi
c002176b:	e8 24 ef fd ff       	call   c0000694 <memset>
c0021770:	83 c4 0c             	add    esp,0xc
c0021773:	6a 00                	push   0x0
c0021775:	6a 00                	push   0x0
c0021777:	6a 00                	push   0x0
c0021779:	6a 00                	push   0x0
c002177b:	6a 00                	push   0x0
c002177d:	56                   	push   esi
c002177e:	53                   	push   ebx
c002177f:	e8 fe fc ff ff       	call   c0021482 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021784:	83 c4 20             	add    esp,0x20
c0021787:	48                   	dec    eax
c0021788:	74 34                	je     c00217be <SATAPI::detectMedia()+0x72>
c002178a:	50                   	push   eax
c002178b:	6a 0c                	push   0xc
c002178d:	6a 00                	push   0x0
c002178f:	56                   	push   esi
c0021790:	e8 ff ee fd ff       	call   c0000694 <memset>
c0021795:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002179a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002179f:	83 c4 0c             	add    esp,0xc
c00217a2:	6a 01                	push   0x1
c00217a4:	8d 44 24 16          	lea    eax,[esp+0x16]
c00217a8:	50                   	push   eax
c00217a9:	6a 00                	push   0x0
c00217ab:	6a 00                	push   0x0
c00217ad:	6a 12                	push   0x12
c00217af:	56                   	push   esi
c00217b0:	53                   	push   ebx
c00217b1:	e8 cc fc ff ff       	call   c0021482 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00217b6:	83 c4 20             	add    esp,0x20
c00217b9:	48                   	dec    eax
c00217ba:	75 39                	jne    c00217f5 <SATAPI::detectMedia()+0xa9>
c00217bc:	eb 1e                	jmp    c00217dc <SATAPI::detectMedia()+0x90>
c00217be:	83 ec 0c             	sub    esp,0xc
c00217c1:	68 2b 7a 02 c0       	push   0xc0027a2b
c00217c6:	e8 08 b9 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00217cb:	83 c4 10             	add    esp,0x10
c00217ce:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00217d5:	74 b3                	je     c002178a <SATAPI::detectMedia()+0x3e>
c00217d7:	e9 93 00 00 00       	jmp    c002186f <SATAPI::detectMedia()+0x123>
c00217dc:	83 ec 0c             	sub    esp,0xc
c00217df:	68 35 7a 02 c0       	push   0xc0027a35
c00217e4:	e8 ea b8 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c00217e9:	83 c4 10             	add    esp,0x10
c00217ec:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00217f3:	75 7a                	jne    c002186f <SATAPI::detectMedia()+0x123>
c00217f5:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00217f9:	83 e0 7f             	and    eax,0x7f
c00217fc:	3c 70                	cmp    al,0x70
c00217fe:	74 25                	je     c0021825 <SATAPI::detectMedia()+0xd9>
c0021800:	83 ec 0c             	sub    esp,0xc
c0021803:	68 3f 7a 02 c0       	push   0xc0027a3f
c0021808:	e8 c6 b8 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c002180d:	83 c4 10             	add    esp,0x10
c0021810:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021817:	75 0c                	jne    c0021825 <SATAPI::detectMedia()+0xd9>
c0021819:	83 ec 0c             	sub    esp,0xc
c002181c:	53                   	push   ebx
c002181d:	e8 44 fc ff ff       	call   c0021466 <SATAPI::diskInserted()>
c0021822:	83 c4 10             	add    esp,0x10
c0021825:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021829:	83 e0 0f             	and    eax,0xf
c002182c:	3c 02                	cmp    al,0x2
c002182e:	75 16                	jne    c0021846 <SATAPI::detectMedia()+0xfa>
c0021830:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021835:	75 38                	jne    c002186f <SATAPI::detectMedia()+0x123>
c0021837:	83 ec 0c             	sub    esp,0xc
c002183a:	68 48 7a 02 c0       	push   0xc0027a48
c002183f:	e8 8f b8 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0021844:	eb 26                	jmp    c002186c <SATAPI::detectMedia()+0x120>
c0021846:	84 c0                	test   al,al
c0021848:	75 25                	jne    c002186f <SATAPI::detectMedia()+0x123>
c002184a:	83 ec 0c             	sub    esp,0xc
c002184d:	68 51 7a 02 c0       	push   0xc0027a51
c0021852:	e8 7c b8 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0021857:	83 c4 10             	add    esp,0x10
c002185a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021861:	75 0c                	jne    c002186f <SATAPI::detectMedia()+0x123>
c0021863:	83 ec 0c             	sub    esp,0xc
c0021866:	53                   	push   ebx
c0021867:	e8 fa fb ff ff       	call   c0021466 <SATAPI::diskInserted()>
c002186c:	83 c4 10             	add    esp,0x10
c002186f:	83 c4 24             	add    esp,0x24
c0021872:	5b                   	pop    ebx
c0021873:	5e                   	pop    esi
c0021874:	c3                   	ret    
c0021875:	90                   	nop

c0021876 <SATAPI::open(int, int, void*)>:
c0021876:	56                   	push   esi
c0021877:	53                   	push   ebx
c0021878:	51                   	push   ecx
c0021879:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002187d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021881:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002188b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0021891:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002189b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002189f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00218a9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00218af:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00218b6:	e8 e3 8b fe ff       	call   c000a49e <Phys::allocatePage()>
c00218bb:	89 c6                	mov    esi,eax
c00218bd:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00218c3:	81 c6 00 10 00 00    	add    esi,0x1000
c00218c9:	e8 d0 8b fe ff       	call   c000a49e <Phys::allocatePage()>
c00218ce:	39 c6                	cmp    esi,eax
c00218d0:	74 10                	je     c00218e2 <SATAPI::open(int, int, void*)+0x6c>
c00218d2:	83 ec 0c             	sub    esp,0xc
c00218d5:	68 5b 7a 02 c0       	push   0xc0027a5b
c00218da:	e8 d6 38 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00218df:	83 c4 10             	add    esp,0x10
c00218e2:	83 ec 0c             	sub    esp,0xc
c00218e5:	6a 02                	push   0x2
c00218e7:	e8 c1 a4 fe ff       	call   c000bdad <Virt::allocateKernelVirtualPages(int)>
c00218ec:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00218f2:	6a 03                	push   0x3
c00218f4:	50                   	push   eax
c00218f5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00218fb:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c0021901:	e8 4e ab fe ff       	call   c000c454 <VAS::mapPage(unsigned long, unsigned long, int)>
c0021906:	83 c4 14             	add    esp,0x14
c0021909:	68 74 01 00 00       	push   0x174
c002190e:	e8 d4 84 fe ff       	call   c0009de7 <malloc>
c0021913:	83 c4 0c             	add    esp,0xc
c0021916:	89 c6                	mov    esi,eax
c0021918:	6a 00                	push   0x0
c002191a:	68 ff ff ff 7f       	push   0x7fffffff
c002191f:	6a 00                	push   0x0
c0021921:	6a 00                	push   0x0
c0021923:	53                   	push   ebx
c0021924:	68 71 7a 02 c0       	push   0xc0027a71
c0021929:	50                   	push   eax
c002192a:	e8 b9 ee fe ff       	call   c00107e8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002192f:	83 c4 14             	add    esp,0x14
c0021932:	56                   	push   esi
c0021933:	e8 66 ef fe ff       	call   c001089e <LogicalDisk::assignDriveLetter()>
c0021938:	5a                   	pop    edx
c0021939:	0f be c0             	movsx  eax,al
c002193c:	59                   	pop    ecx
c002193d:	50                   	push   eax
c002193e:	68 07 77 02 c0       	push   0xc0027707
c0021943:	e8 8b b7 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0021948:	58                   	pop    eax
c0021949:	5a                   	pop    edx
c002194a:	56                   	push   esi
c002194b:	53                   	push   ebx
c002194c:	e8 f5 cc fe ff       	call   c000e646 <Device::addChild(Device*)>
c0021951:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021957:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002195a:	e8 87 d1 fe ff       	call   c000eae6 <PhysicalDisk::startCache()>
c002195f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021966:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021969:	e8 de fd ff ff       	call   c002174c <SATAPI::detectMedia()>
c002196e:	83 c4 14             	add    esp,0x14
c0021971:	31 c0                	xor    eax,eax
c0021973:	5b                   	pop    ebx
c0021974:	5e                   	pop    esi
c0021975:	c3                   	ret    

c0021976 <SATAPI::read(unsigned long long, int, void*)>:
c0021976:	55                   	push   ebp
c0021977:	57                   	push   edi
c0021978:	56                   	push   esi
c0021979:	53                   	push   ebx
c002197a:	83 ec 48             	sub    esp,0x48
c002197d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0021981:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0021985:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0021989:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002198d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021991:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021995:	68 7f 7a 02 c0       	push   0xc0027a7f
c002199a:	e8 34 b7 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c002199f:	83 c4 10             	add    esp,0x10
c00219a2:	83 fb 04             	cmp    ebx,0x4
c00219a5:	7e 10                	jle    c00219b7 <SATAPI::read(unsigned long long, int, void*)+0x41>
c00219a7:	83 ec 0c             	sub    esp,0xc
c00219aa:	68 90 7a 02 c0       	push   0xc0027a90
c00219af:	e8 01 38 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00219b4:	83 c4 10             	add    esp,0x10
c00219b7:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00219bb:	31 ed                	xor    ebp,ebp
c00219bd:	b9 03 00 00 00       	mov    ecx,0x3
c00219c2:	fc                   	cld    
c00219c3:	89 e8                	mov    eax,ebp
c00219c5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00219c7:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c00219cc:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00219d1:	50                   	push   eax
c00219d2:	6a 00                	push   0x0
c00219d4:	6a 00                	push   0x0
c00219d6:	6a 00                	push   0x0
c00219d8:	6a 00                	push   0x0
c00219da:	6a 02                	push   0x2
c00219dc:	8d 44 24 30          	lea    eax,[esp+0x30]
c00219e0:	50                   	push   eax
c00219e1:	56                   	push   esi
c00219e2:	e8 9b fa ff ff       	call   c0021482 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00219e7:	8d 7c 24 44          	lea    edi,[esp+0x44]
c00219eb:	89 e8                	mov    eax,ebp
c00219ed:	b9 03 00 00 00       	mov    ecx,0x3
c00219f2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00219f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00219f8:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c00219fc:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021a01:	86 e0                	xchg   al,ah
c0021a03:	c1 c0 10             	rol    eax,0x10
c0021a06:	86 e0                	xchg   al,ah
c0021a08:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0021a0c:	83 c4 1c             	add    esp,0x1c
c0021a0f:	53                   	push   ebx
c0021a10:	c1 e3 0b             	shl    ebx,0xb
c0021a13:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0021a17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a1f:	53                   	push   ebx
c0021a20:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021a24:	50                   	push   eax
c0021a25:	56                   	push   esi
c0021a26:	e8 57 fa ff ff       	call   c0021482 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021a2b:	83 c4 20             	add    esp,0x20
c0021a2e:	85 c0                	test   eax,eax
c0021a30:	74 14                	je     c0021a46 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0021a32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a36:	83 ec 0c             	sub    esp,0xc
c0021a39:	56                   	push   esi
c0021a3a:	e8 0d fd ff ff       	call   c002174c <SATAPI::detectMedia()>
c0021a3f:	83 c4 10             	add    esp,0x10
c0021a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a46:	83 c4 3c             	add    esp,0x3c
c0021a49:	5b                   	pop    ebx
c0021a4a:	5e                   	pop    esi
c0021a4b:	5f                   	pop    edi
c0021a4c:	5d                   	pop    ebp
c0021a4d:	c3                   	ret    
c0021a4e:	66 90                	xchg   ax,ax

c0021a50 <AVX::open(int, int, void*)>:
c0021a50:	83 ec 0c             	sub    esp,0xc
c0021a53:	e8 74 11 00 00       	call   c0022bcc <avxInit>
c0021a58:	b8 00 00 00 00       	mov    eax,0x0
c0021a5d:	83 c4 0c             	add    esp,0xc
c0021a60:	c3                   	ret    
c0021a61:	90                   	nop
c0021a62:	66 90                	xchg   ax,ax

c0021a64 <AVX::close(int, int, void*)>:
c0021a64:	83 ec 0c             	sub    esp,0xc
c0021a67:	e8 82 11 00 00       	call   c0022bee <avxClose>
c0021a6c:	b8 00 00 00 00       	mov    eax,0x0
c0021a71:	83 c4 0c             	add    esp,0xc
c0021a74:	c3                   	ret    
c0021a75:	90                   	nop
c0021a76:	66 90                	xchg   ax,ax

c0021a78 <AVX::available()>:
c0021a78:	83 ec 0c             	sub    esp,0xc
c0021a7b:	e8 00 11 00 00       	call   c0022b80 <avxDetect>
c0021a80:	85 c0                	test   eax,eax
c0021a82:	0f 95 c0             	setne  al
c0021a85:	83 c4 0c             	add    esp,0xc
c0021a88:	c3                   	ret    
c0021a89:	90                   	nop
c0021a8a:	66 90                	xchg   ax,ax

c0021a8c <AVX::save(void*)>:
c0021a8c:	83 ec 0c             	sub    esp,0xc
c0021a8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a93:	83 ec 0c             	sub    esp,0xc
c0021a96:	50                   	push   eax
c0021a97:	e8 0e 11 00 00       	call   c0022baa <avxSave>
c0021a9c:	83 c4 10             	add    esp,0x10
c0021a9f:	90                   	nop
c0021aa0:	83 c4 0c             	add    esp,0xc
c0021aa3:	c3                   	ret    

c0021aa4 <AVX::load(void*)>:
c0021aa4:	83 ec 0c             	sub    esp,0xc
c0021aa7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021aab:	83 ec 0c             	sub    esp,0xc
c0021aae:	50                   	push   eax
c0021aaf:	e8 07 11 00 00       	call   c0022bbb <avxLoad>
c0021ab4:	83 c4 10             	add    esp,0x10
c0021ab7:	90                   	nop
c0021ab8:	83 c4 0c             	add    esp,0xc
c0021abb:	c3                   	ret    

c0021abc <AVX::AVX()>:
c0021abc:	83 ec 0c             	sub    esp,0xc
c0021abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac3:	83 ec 08             	sub    esp,0x8
c0021ac6:	68 f4 7a 02 c0       	push   0xc0027af4
c0021acb:	50                   	push   eax
c0021acc:	e8 8b d0 fe ff       	call   c000eb5c <FPU::FPU(char const*)>
c0021ad1:	83 c4 10             	add    esp,0x10
c0021ad4:	ba 04 7b 02 c0       	mov    edx,0xc0027b04
c0021ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021add:	89 10                	mov    DWORD PTR [eax],edx
c0021adf:	90                   	nop
c0021ae0:	83 c4 0c             	add    esp,0xc
c0021ae3:	c3                   	ret    

c0021ae4 <MMX::available()>:
c0021ae4:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0021ae9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021aef:	83 e0 20             	and    eax,0x20
c0021af2:	84 c0                	test   al,al
c0021af4:	0f 95 c0             	setne  al
c0021af7:	c3                   	ret    

c0021af8 <MMX::open(int, int, void*)>:
c0021af8:	83 ec 0c             	sub    esp,0xc
c0021afb:	e8 7f 11 00 00       	call   c0022c7f <x87Init>
c0021b00:	b8 00 00 00 00       	mov    eax,0x0
c0021b05:	83 c4 0c             	add    esp,0xc
c0021b08:	c3                   	ret    
c0021b09:	90                   	nop
c0021b0a:	66 90                	xchg   ax,ax

c0021b0c <MMX::close(int, int, void*)>:
c0021b0c:	83 ec 0c             	sub    esp,0xc
c0021b0f:	e8 84 11 00 00       	call   c0022c98 <x87Close>
c0021b14:	b8 00 00 00 00       	mov    eax,0x0
c0021b19:	83 c4 0c             	add    esp,0xc
c0021b1c:	c3                   	ret    
c0021b1d:	90                   	nop
c0021b1e:	66 90                	xchg   ax,ax

c0021b20 <MMX::save(void*)>:
c0021b20:	83 ec 0c             	sub    esp,0xc
c0021b23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b27:	83 ec 0c             	sub    esp,0xc
c0021b2a:	50                   	push   eax
c0021b2b:	e8 41 11 00 00       	call   c0022c71 <x87Save>
c0021b30:	83 c4 10             	add    esp,0x10
c0021b33:	90                   	nop
c0021b34:	83 c4 0c             	add    esp,0xc
c0021b37:	c3                   	ret    

c0021b38 <MMX::load(void*)>:
c0021b38:	83 ec 0c             	sub    esp,0xc
c0021b3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b3f:	83 ec 0c             	sub    esp,0xc
c0021b42:	50                   	push   eax
c0021b43:	e8 30 11 00 00       	call   c0022c78 <x87Load>
c0021b48:	83 c4 10             	add    esp,0x10
c0021b4b:	90                   	nop
c0021b4c:	83 c4 0c             	add    esp,0xc
c0021b4f:	c3                   	ret    

c0021b50 <MMX::MMX()>:
c0021b50:	83 ec 0c             	sub    esp,0xc
c0021b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b57:	83 ec 08             	sub    esp,0x8
c0021b5a:	68 34 7b 02 c0       	push   0xc0027b34
c0021b5f:	50                   	push   eax
c0021b60:	e8 f7 cf fe ff       	call   c000eb5c <FPU::FPU(char const*)>
c0021b65:	83 c4 10             	add    esp,0x10
c0021b68:	ba 44 7b 02 c0       	mov    edx,0xc0027b44
c0021b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b71:	89 10                	mov    DWORD PTR [eax],edx
c0021b73:	90                   	nop
c0021b74:	83 c4 0c             	add    esp,0xc
c0021b77:	c3                   	ret    

c0021b78 <SSE::open(int, int, void*)>:
c0021b78:	83 ec 0c             	sub    esp,0xc
c0021b7b:	e8 b8 10 00 00       	call   c0022c38 <sseInit>
c0021b80:	b8 00 00 00 00       	mov    eax,0x0
c0021b85:	83 c4 0c             	add    esp,0xc
c0021b88:	c3                   	ret    
c0021b89:	90                   	nop
c0021b8a:	66 90                	xchg   ax,ax

c0021b8c <SSE::close(int, int, void*)>:
c0021b8c:	83 ec 0c             	sub    esp,0xc
c0021b8f:	e8 b4 10 00 00       	call   c0022c48 <sseClose>
c0021b94:	b8 00 00 00 00       	mov    eax,0x0
c0021b99:	83 c4 0c             	add    esp,0xc
c0021b9c:	c3                   	ret    
c0021b9d:	90                   	nop
c0021b9e:	66 90                	xchg   ax,ax

c0021ba0 <SSE::available()>:
c0021ba0:	83 ec 1c             	sub    esp,0x1c
c0021ba3:	e8 68 10 00 00       	call   c0022c10 <absolutelyNoChanceInHell>
c0021ba8:	85 c0                	test   eax,eax
c0021baa:	0f 95 c0             	setne  al
c0021bad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021bb1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021bb5:	83 c4 1c             	add    esp,0x1c
c0021bb8:	c3                   	ret    
c0021bb9:	90                   	nop
c0021bba:	66 90                	xchg   ax,ax

c0021bbc <SSE::save(void*)>:
c0021bbc:	83 ec 0c             	sub    esp,0xc
c0021bbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021bc3:	83 ec 0c             	sub    esp,0xc
c0021bc6:	50                   	push   eax
c0021bc7:	e8 5c 10 00 00       	call   c0022c28 <sseSave>
c0021bcc:	83 c4 10             	add    esp,0x10
c0021bcf:	90                   	nop
c0021bd0:	83 c4 0c             	add    esp,0xc
c0021bd3:	c3                   	ret    

c0021bd4 <SSE::load(void*)>:
c0021bd4:	83 ec 0c             	sub    esp,0xc
c0021bd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021bdb:	83 ec 0c             	sub    esp,0xc
c0021bde:	50                   	push   eax
c0021bdf:	e8 4c 10 00 00       	call   c0022c30 <sseLoad>
c0021be4:	83 c4 10             	add    esp,0x10
c0021be7:	90                   	nop
c0021be8:	83 c4 0c             	add    esp,0xc
c0021beb:	c3                   	ret    

c0021bec <SSE::SSE()>:
c0021bec:	83 ec 0c             	sub    esp,0xc
c0021bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bf3:	83 ec 08             	sub    esp,0x8
c0021bf6:	68 74 7b 02 c0       	push   0xc0027b74
c0021bfb:	50                   	push   eax
c0021bfc:	e8 5b cf fe ff       	call   c000eb5c <FPU::FPU(char const*)>
c0021c01:	83 c4 10             	add    esp,0x10
c0021c04:	ba 84 7b 02 c0       	mov    edx,0xc0027b84
c0021c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c0d:	89 10                	mov    DWORD PTR [eax],edx
c0021c0f:	90                   	nop
c0021c10:	83 c4 0c             	add    esp,0xc
c0021c13:	c3                   	ret    

c0021c14 <x87::open(int, int, void*)>:
c0021c14:	55                   	push   ebp
c0021c15:	89 e5                	mov    ebp,esp
c0021c17:	83 ec 08             	sub    esp,0x8
c0021c1a:	e8 60 10 00 00       	call   c0022c7f <x87Init>
c0021c1f:	b8 00 00 00 00       	mov    eax,0x0
c0021c24:	c9                   	leave  
c0021c25:	c3                   	ret    

c0021c26 <x87::close(int, int, void*)>:
c0021c26:	55                   	push   ebp
c0021c27:	89 e5                	mov    ebp,esp
c0021c29:	83 ec 08             	sub    esp,0x8
c0021c2c:	e8 67 10 00 00       	call   c0022c98 <x87Close>
c0021c31:	b8 00 00 00 00       	mov    eax,0x0
c0021c36:	c9                   	leave  
c0021c37:	c3                   	ret    

c0021c38 <x87::available()>:
c0021c38:	55                   	push   ebp
c0021c39:	89 e5                	mov    ebp,esp
c0021c3b:	83 ec 08             	sub    esp,0x8
c0021c3e:	e8 13 10 00 00       	call   c0022c56 <x87Detect>
c0021c43:	85 c0                	test   eax,eax
c0021c45:	0f 95 c0             	setne  al
c0021c48:	c9                   	leave  
c0021c49:	c3                   	ret    

c0021c4a <x87::save(void*)>:
c0021c4a:	55                   	push   ebp
c0021c4b:	89 e5                	mov    ebp,esp
c0021c4d:	83 ec 08             	sub    esp,0x8
c0021c50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c53:	83 ec 0c             	sub    esp,0xc
c0021c56:	50                   	push   eax
c0021c57:	e8 15 10 00 00       	call   c0022c71 <x87Save>
c0021c5c:	83 c4 10             	add    esp,0x10
c0021c5f:	90                   	nop
c0021c60:	c9                   	leave  
c0021c61:	c3                   	ret    

c0021c62 <x87::load(void*)>:
c0021c62:	55                   	push   ebp
c0021c63:	89 e5                	mov    ebp,esp
c0021c65:	83 ec 08             	sub    esp,0x8
c0021c68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c6b:	83 ec 0c             	sub    esp,0xc
c0021c6e:	50                   	push   eax
c0021c6f:	e8 04 10 00 00       	call   c0022c78 <x87Load>
c0021c74:	83 c4 10             	add    esp,0x10
c0021c77:	90                   	nop
c0021c78:	c9                   	leave  
c0021c79:	c3                   	ret    

c0021c7a <x87::x87()>:
c0021c7a:	83 ec 0c             	sub    esp,0xc
c0021c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c81:	83 ec 08             	sub    esp,0x8
c0021c84:	68 b4 7b 02 c0       	push   0xc0027bb4
c0021c89:	50                   	push   eax
c0021c8a:	e8 cd ce fe ff       	call   c000eb5c <FPU::FPU(char const*)>
c0021c8f:	83 c4 10             	add    esp,0x10
c0021c92:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0021c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9b:	89 10                	mov    DWORD PTR [eax],edx
c0021c9d:	90                   	nop
c0021c9e:	83 c4 0c             	add    esp,0xc
c0021ca1:	c3                   	ret    

c0021ca2 <APIC::disable()>:
c0021ca2:	90                   	nop
c0021ca3:	c3                   	ret    

c0021ca4 <APIC::close(int, int, void*)>:
c0021ca4:	55                   	push   ebp
c0021ca5:	89 e5                	mov    ebp,esp
c0021ca7:	83 ec 08             	sub    esp,0x8
c0021caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0021caf:	83 c0 3c             	add    eax,0x3c
c0021cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cb4:	83 ec 0c             	sub    esp,0xc
c0021cb7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021cba:	ff d0                	call   eax
c0021cbc:	83 c4 10             	add    esp,0x10
c0021cbf:	b8 00 00 00 00       	mov    eax,0x0
c0021cc4:	c9                   	leave  
c0021cc5:	c3                   	ret    

c0021cc6 <IOAPIC::close(int, int, void*)>:
c0021cc6:	b8 00 00 00 00       	mov    eax,0x0
c0021ccb:	c3                   	ret    

c0021ccc <APIC::io_wait()>:
c0021ccc:	eb 00                	jmp    c0021cce <APIC::io_wait()+0x2>
c0021cce:	eb 00                	jmp    c0021cd0 <APIC::io_wait()+0x4>
c0021cd0:	90                   	nop
c0021cd1:	c3                   	ret    

c0021cd2 <APIC::getBase()>:
c0021cd2:	55                   	push   ebp
c0021cd3:	89 e5                	mov    ebp,esp
c0021cd5:	83 ec 18             	sub    esp,0x18
c0021cd8:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0021cdd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021ce3:	83 e0 08             	and    eax,0x8
c0021ce6:	84 c0                	test   al,al
c0021ce8:	75 07                	jne    c0021cf1 <APIC::getBase()+0x1f>
c0021cea:	b8 00 00 00 00       	mov    eax,0x0
c0021cef:	eb 21                	jmp    c0021d12 <APIC::getBase()+0x40>
c0021cf1:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0021cf6:	83 ec 08             	sub    esp,0x8
c0021cf9:	6a 1b                	push   0x1b
c0021cfb:	50                   	push   eax
c0021cfc:	e8 7d 75 fe ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0021d01:	83 c4 10             	add    esp,0x10
c0021d04:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021d07:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021d0a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021d0d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021d12:	c9                   	leave  
c0021d13:	c3                   	ret    

c0021d14 <APIC::eoi(unsigned char)>:
c0021d14:	55                   	push   ebp
c0021d15:	89 e5                	mov    ebp,esp
c0021d17:	83 ec 28             	sub    esp,0x28
c0021d1a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d1d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021d20:	83 ec 0c             	sub    esp,0xc
c0021d23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d26:	e8 a7 ff ff ff       	call   c0021cd2 <APIC::getBase()>
c0021d2b:	83 c4 10             	add    esp,0x10
c0021d2e:	05 b0 00 00 00       	add    eax,0xb0
c0021d33:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021d36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021d39:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021d3f:	90                   	nop
c0021d40:	c9                   	leave  
c0021d41:	c3                   	ret    

c0021d42 <APIC::open(int, int, void*)>:
c0021d42:	55                   	push   ebp
c0021d43:	89 e5                	mov    ebp,esp
c0021d45:	57                   	push   edi
c0021d46:	56                   	push   esi
c0021d47:	53                   	push   ebx
c0021d48:	83 ec 2c             	sub    esp,0x2c
c0021d4b:	83 ec 0c             	sub    esp,0xc
c0021d4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d51:	e8 7c ff ff ff       	call   c0021cd2 <APIC::getBase()>
c0021d56:	83 c4 10             	add    esp,0x10
c0021d59:	89 c2                	mov    edx,eax
c0021d5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021d5e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021d64:	0f b6 f8             	movzx  edi,al
c0021d67:	89 d0                	mov    eax,edx
c0021d69:	ba 00 00 00 00       	mov    edx,0x0
c0021d6e:	89 c1                	mov    ecx,eax
c0021d70:	80 e5 ff             	and    ch,0xff
c0021d73:	89 cb                	mov    ebx,ecx
c0021d75:	0f b6 f2             	movzx  esi,dl
c0021d78:	89 d8                	mov    eax,ebx
c0021d7a:	89 f2                	mov    edx,esi
c0021d7c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021d7f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021d82:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021d86:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021d8a:	83 e0 00             	and    eax,0x0
c0021d8d:	09 d0                	or     eax,edx
c0021d8f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021d93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021d96:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021d9c:	8d 50 01             	lea    edx,[eax+0x1]
c0021d9f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021da2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021da8:	0f b6 d0             	movzx  edx,al
c0021dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021dae:	83 c2 08             	add    edx,0x8
c0021db1:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021db5:	0f b6 c9             	movzx  ecx,cl
c0021db8:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021dbe:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021dc2:	83 ec 0c             	sub    esp,0xc
c0021dc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dc8:	e8 05 ff ff ff       	call   c0021cd2 <APIC::getBase()>
c0021dcd:	83 c4 10             	add    esp,0x10
c0021dd0:	05 f0 00 00 00       	add    eax,0xf0
c0021dd5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021dd8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021ddb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ddd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021de0:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021de7:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021dee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021df1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021df4:	89 10                	mov    DWORD PTR [eax],edx
c0021df6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021dfd:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0021e02:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021e05:	7d 7c                	jge    c0021e83 <APIC::open(int, int, void*)+0x141>
c0021e07:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e0a:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c0021e11:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021e14:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e17:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c0021e1e:	c1 e8 08             	shr    eax,0x8
c0021e21:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021e25:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e28:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c0021e2f:	c1 e8 18             	shr    eax,0x18
c0021e32:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021e35:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021e39:	75 40                	jne    c0021e7b <APIC::open(int, int, void*)+0x139>
c0021e3b:	83 ec 0c             	sub    esp,0xc
c0021e3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e41:	e8 8c fe ff ff       	call   c0021cd2 <APIC::getBase()>
c0021e46:	83 c4 10             	add    esp,0x10
c0021e49:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021e4d:	75 07                	jne    c0021e56 <APIC::open(int, int, void*)+0x114>
c0021e4f:	ba 60 03 00 00       	mov    edx,0x360
c0021e54:	eb 05                	jmp    c0021e5b <APIC::open(int, int, void*)+0x119>
c0021e56:	ba 50 03 00 00       	mov    edx,0x350
c0021e5b:	01 d0                	add    eax,edx
c0021e5d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021e60:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e65:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021e68:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021e6f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021e73:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021e76:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021e79:	89 10                	mov    DWORD PTR [eax],edx
c0021e7b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021e7e:	e9 7a ff ff ff       	jmp    c0021dfd <APIC::open(int, int, void*)+0xbb>
c0021e83:	b8 00 00 00 00       	mov    eax,0x0
c0021e88:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021e8b:	5b                   	pop    ebx
c0021e8c:	5e                   	pop    esi
c0021e8d:	5f                   	pop    edi
c0021e8e:	5d                   	pop    ebp
c0021e8f:	c3                   	ret    

c0021e90 <IOAPIC::IOAPIC()>:
c0021e90:	83 ec 0c             	sub    esp,0xc
c0021e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e97:	83 ec 08             	sub    esp,0x8
c0021e9a:	68 f4 7b 02 c0       	push   0xc0027bf4
c0021e9f:	50                   	push   eax
c0021ea0:	e8 a5 c9 fe ff       	call   c000e84a <Device::Device(char const*)>
c0021ea5:	83 c4 10             	add    esp,0x10
c0021ea8:	ba 1c 7d 02 c0       	mov    edx,0xc0027d1c
c0021ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eb1:	89 10                	mov    DWORD PTR [eax],edx
c0021eb3:	90                   	nop
c0021eb4:	83 c4 0c             	add    esp,0xc
c0021eb7:	c3                   	ret    

c0021eb8 <APIC::APIC()>:
c0021eb8:	53                   	push   ebx
c0021eb9:	83 ec 18             	sub    esp,0x18
c0021ebc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ec0:	83 ec 08             	sub    esp,0x8
c0021ec3:	68 fc 7b 02 c0       	push   0xc0027bfc
c0021ec8:	50                   	push   eax
c0021ec9:	e8 0c d1 fe ff       	call   c000efda <InterruptController::InterruptController(char const*)>
c0021ece:	83 c4 10             	add    esp,0x10
c0021ed1:	ba d4 7c 02 c0       	mov    edx,0xc0027cd4
c0021ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021eda:	89 10                	mov    DWORD PTR [eax],edx
c0021edc:	a0 60 ab 02 c0       	mov    al,ds:0xc002ab60
c0021ee1:	83 f0 01             	xor    eax,0x1
c0021ee4:	84 c0                	test   al,al
c0021ee6:	0f 84 a1 00 00 00    	je     c0021f8d <APIC::APIC()+0xd5>
c0021eec:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021ef1:	a0 e0 94 02 c0       	mov    al,ds:0xc00294e0
c0021ef6:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021efa:	0f 83 86 00 00 00    	jae    c0021f86 <APIC::APIC()+0xce>
c0021f00:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021f08:	83 ec 0c             	sub    esp,0xc
c0021f0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f0f:	e8 d3 7e fe ff       	call   c0009de7 <malloc>
c0021f14:	83 c4 10             	add    esp,0x10
c0021f17:	89 c3                	mov    ebx,eax
c0021f19:	83 ec 0c             	sub    esp,0xc
c0021f1c:	53                   	push   ebx
c0021f1d:	e8 6e ff ff ff       	call   c0021e90 <IOAPIC::IOAPIC()>
c0021f22:	83 c4 10             	add    esp,0x10
c0021f25:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021f29:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021f2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f32:	89 14 85 40 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd54c0],edx
c0021f39:	a1 20 ab 02 c0       	mov    eax,ds:0xc002ab20
c0021f3e:	40                   	inc    eax
c0021f3f:	a3 20 ab 02 c0       	mov    ds:0xc002ab20,eax
c0021f44:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0021f49:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021f4f:	83 ec 08             	sub    esp,0x8
c0021f52:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f56:	50                   	push   eax
c0021f57:	e8 ea c6 fe ff       	call   c000e646 <Device::addChild(Device*)>
c0021f5c:	83 c4 10             	add    esp,0x10
c0021f5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f63:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f65:	83 c0 08             	add    eax,0x8
c0021f68:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f6a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021f6f:	6a 00                	push   0x0
c0021f71:	6a 00                	push   0x0
c0021f73:	52                   	push   edx
c0021f74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f78:	ff d0                	call   eax
c0021f7a:	83 c4 10             	add    esp,0x10
c0021f7d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021f81:	e9 6b ff ff ff       	jmp    c0021ef1 <APIC::APIC()+0x39>
c0021f86:	c6 05 60 ab 02 c0 01 	mov    BYTE PTR ds:0xc002ab60,0x1
c0021f8d:	90                   	nop
c0021f8e:	83 c4 18             	add    esp,0x18
c0021f91:	5b                   	pop    ebx
c0021f92:	c3                   	ret    
c0021f93:	90                   	nop

c0021f94 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021f94:	55                   	push   ebp
c0021f95:	89 e5                	mov    ebp,esp
c0021f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021fa0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021fa3:	72 1d                	jb     c0021fc2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021fa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fa8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021fae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fb1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021fb7:	01 d0                	add    eax,edx
c0021fb9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021fbc:	73 04                	jae    c0021fc2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021fbe:	b0 01                	mov    al,0x1
c0021fc0:	eb 02                	jmp    c0021fc4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021fc2:	b0 00                	mov    al,0x0
c0021fc4:	5d                   	pop    ebp
c0021fc5:	c3                   	ret    

c0021fc6 <IOAPIC::read(int)>:
c0021fc6:	55                   	push   ebp
c0021fc7:	89 e5                	mov    ebp,esp
c0021fc9:	83 ec 10             	sub    esp,0x10
c0021fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fcf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021fd5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021fd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021fdb:	0f b6 d0             	movzx  edx,al
c0021fde:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021fe1:	89 10                	mov    DWORD PTR [eax],edx
c0021fe3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021fe6:	83 c0 10             	add    eax,0x10
c0021fe9:	8b 00                	mov    eax,DWORD PTR [eax]
c0021feb:	c9                   	leave  
c0021fec:	c3                   	ret    
c0021fed:	90                   	nop

c0021fee <IOAPIC::open(int, int, void*)>:
c0021fee:	55                   	push   ebp
c0021fef:	89 e5                	mov    ebp,esp
c0021ff1:	57                   	push   edi
c0021ff2:	56                   	push   esi
c0021ff3:	53                   	push   ebx
c0021ff4:	83 ec 0c             	sub    esp,0xc
c0021ff7:	83 ec 0c             	sub    esp,0xc
c0021ffa:	68 27 7c 02 c0       	push   0xc0027c27
c0021fff:	e8 cf b0 fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0022004:	83 c4 10             	add    esp,0x10
c0022007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002200a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002200d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022016:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002201c:	8b 14 85 20 95 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ae0]
c0022023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022026:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002202c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002202f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022035:	8b 14 85 a0 95 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6a60]
c002203c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002203f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022048:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002204e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022051:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022057:	0f b6 f8             	movzx  edi,al
c002205a:	89 d0                	mov    eax,edx
c002205c:	ba 00 00 00 00       	mov    edx,0x0
c0022061:	89 c1                	mov    ecx,eax
c0022063:	80 e5 ff             	and    ch,0xff
c0022066:	89 cb                	mov    ebx,ecx
c0022068:	0f b6 f2             	movzx  esi,dl
c002206b:	89 d8                	mov    eax,ebx
c002206d:	89 f2                	mov    edx,esi
c002206f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022072:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022075:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022079:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002207d:	83 e0 00             	and    eax,0x0
c0022080:	09 d0                	or     eax,edx
c0022082:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022089:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002208f:	8d 50 01             	lea    edx,[eax+0x1]
c0022092:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022095:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002209b:	0f b6 d0             	movzx  edx,al
c002209e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220a1:	83 c2 08             	add    edx,0x8
c00220a4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00220a8:	0f b6 c9             	movzx  ecx,cl
c00220ab:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00220b1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00220b5:	83 ec 08             	sub    esp,0x8
c00220b8:	6a 01                	push   0x1
c00220ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00220bd:	e8 04 ff ff ff       	call   c0021fc6 <IOAPIC::read(int)>
c00220c2:	83 c4 10             	add    esp,0x10
c00220c5:	c1 f8 10             	sar    eax,0x10
c00220c8:	0f b6 c0             	movzx  eax,al
c00220cb:	8d 50 01             	lea    edx,[eax+0x1]
c00220ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220d1:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00220d7:	b8 00 00 00 00       	mov    eax,0x0
c00220dc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00220df:	5b                   	pop    ebx
c00220e0:	5e                   	pop    esi
c00220e1:	5f                   	pop    edi
c00220e2:	5d                   	pop    ebp
c00220e3:	c3                   	ret    

c00220e4 <IOAPIC::write(int, int)>:
c00220e4:	55                   	push   ebp
c00220e5:	89 e5                	mov    ebp,esp
c00220e7:	83 ec 10             	sub    esp,0x10
c00220ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00220f3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00220f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00220f9:	0f b6 d0             	movzx  edx,al
c00220fc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00220ff:	89 10                	mov    DWORD PTR [eax],edx
c0022101:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022104:	8d 50 10             	lea    edx,[eax+0x10]
c0022107:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002210a:	89 02                	mov    DWORD PTR [edx],eax
c002210c:	90                   	nop
c002210d:	c9                   	leave  
c002210e:	c3                   	ret    
c002210f:	90                   	nop

c0022110 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0022110:	55                   	push   ebp
c0022111:	89 e5                	mov    ebp,esp
c0022113:	53                   	push   ebx
c0022114:	83 ec 2c             	sub    esp,0x2c
c0022117:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002211a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002211d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0022120:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0022123:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022126:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022129:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002212c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002212f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022132:	88 d8                	mov    al,bl
c0022134:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0022137:	88 c8                	mov    al,cl
c0022139:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002213c:	88 d0                	mov    al,dl
c002213e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0022141:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022145:	83 c0 08             	add    eax,0x8
c0022148:	01 c0                	add    eax,eax
c002214a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002214d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022151:	83 c0 08             	add    eax,0x8
c0022154:	01 c0                	add    eax,eax
c0022156:	40                   	inc    eax
c0022157:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002215a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002215d:	50                   	push   eax
c002215e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022161:	e8 60 fe ff ff       	call   c0021fc6 <IOAPIC::read(int)>
c0022166:	83 c4 08             	add    esp,0x8
c0022169:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002216c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0022173:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0022176:	c1 e0 18             	shl    eax,0x18
c0022179:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002217c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002217f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022182:	52                   	push   edx
c0022183:	50                   	push   eax
c0022184:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022187:	e8 58 ff ff ff       	call   c00220e4 <IOAPIC::write(int, int)>
c002218c:	83 c4 0c             	add    esp,0xc
c002218f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022192:	50                   	push   eax
c0022193:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022196:	e8 2b fe ff ff       	call   c0021fc6 <IOAPIC::read(int)>
c002219b:	83 c4 08             	add    esp,0x8
c002219e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00221a1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00221a8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00221af:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00221b6:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00221ba:	74 09                	je     c00221c5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00221bc:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00221c3:	eb 07                	jmp    c00221cc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00221c5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00221cc:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00221d0:	74 09                	je     c00221db <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00221d2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00221d9:	eb 07                	jmp    c00221e2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00221db:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00221e2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00221e9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00221ed:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00221f0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00221f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00221f6:	52                   	push   edx
c00221f7:	50                   	push   eax
c00221f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221fb:	e8 e4 fe ff ff       	call   c00220e4 <IOAPIC::write(int, int)>
c0022200:	83 c4 0c             	add    esp,0xc
c0022203:	90                   	nop
c0022204:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0022207:	c9                   	leave  
c0022208:	c3                   	ret    
c0022209:	90                   	nop

c002220a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002220a:	55                   	push   ebp
c002220b:	89 e5                	mov    ebp,esp
c002220d:	57                   	push   edi
c002220e:	56                   	push   esi
c002220f:	53                   	push   ebx
c0022210:	83 ec 2c             	sub    esp,0x2c
c0022213:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022216:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022219:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002221d:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0022221:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022225:	74 5a                	je     c0022281 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022227:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002222b:	7f 44                	jg     c0022271 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002222d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022230:	05 c0 82 02 c0       	add    eax,0xc00282c0
c0022235:	8a 00                	mov    al,BYTE PTR [eax]
c0022237:	0f b6 c0             	movzx  eax,al
c002223a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002223d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022240:	66 8b 84 00 c0 94 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6b40]
c0022248:	0f b7 c0             	movzx  eax,ax
c002224b:	83 e0 02             	and    eax,0x2
c002224e:	85 c0                	test   eax,eax
c0022250:	74 04                	je     c0022256 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0022252:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0022256:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022259:	66 8b 84 00 c0 94 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6b40]
c0022261:	0f b7 c0             	movzx  eax,ax
c0022264:	83 e0 08             	and    eax,0x8
c0022267:	85 c0                	test   eax,eax
c0022269:	74 16                	je     c0022281 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002226b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002226f:	eb 10                	jmp    c0022281 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022271:	83 ec 0c             	sub    esp,0xc
c0022274:	68 38 7c 02 c0       	push   0xc0027c38
c0022279:	e8 37 2f ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c002227e:	83 c4 10             	add    esp,0x10
c0022281:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0022285:	a1 20 ab 02 c0       	mov    eax,ds:0xc002ab20
c002228a:	83 ec 08             	sub    esp,0x8
c002228d:	50                   	push   eax
c002228e:	68 70 7c 02 c0       	push   0xc0027c70
c0022293:	e8 3b ae fe ff       	call   c000d0d3 <Dbg::kprintf(char const*, ...)>
c0022298:	83 c4 10             	add    esp,0x10
c002229b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00222a2:	a1 20 ab 02 c0       	mov    eax,ds:0xc002ab20
c00222a7:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00222aa:	7d 67                	jge    c0022313 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00222ac:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00222af:	8b 04 85 40 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd54c0]
c00222b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00222b9:	83 ec 08             	sub    esp,0x8
c00222bc:	52                   	push   edx
c00222bd:	50                   	push   eax
c00222be:	e8 d1 fc ff ff       	call   c0021f94 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00222c3:	83 c4 10             	add    esp,0x10
c00222c6:	84 c0                	test   al,al
c00222c8:	74 44                	je     c002230e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00222ca:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00222cd:	8b 1c 85 40 ab 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd54c0]
c00222d4:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00222d8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00222db:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00222df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00222e2:	83 c0 20             	add    eax,0x20
c00222e5:	0f b6 f0             	movzx  esi,al
c00222e8:	b8 00 00 00 00       	mov    eax,0x0
c00222ed:	99                   	cdq    
c00222ee:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00222f1:	0f b6 c9             	movzx  ecx,cl
c00222f4:	83 ec 04             	sub    esp,0x4
c00222f7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00222fa:	57                   	push   edi
c00222fb:	56                   	push   esi
c00222fc:	52                   	push   edx
c00222fd:	50                   	push   eax
c00222fe:	51                   	push   ecx
c00222ff:	53                   	push   ebx
c0022300:	e8 0b fe ff ff       	call   c0022110 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022305:	83 c4 20             	add    esp,0x20
c0022308:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002230c:	eb 05                	jmp    c0022313 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002230e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0022311:	eb 8f                	jmp    c00222a2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0022313:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0022316:	83 f0 01             	xor    eax,0x1
c0022319:	84 c0                	test   al,al
c002231b:	74 10                	je     c002232d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002231d:	83 ec 0c             	sub    esp,0xc
c0022320:	68 87 7c 02 c0       	push   0xc0027c87
c0022325:	e8 8b 2e ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c002232a:	83 c4 10             	add    esp,0x10
c002232d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022331:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0022338:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002233c:	7f 65                	jg     c00223a3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002233e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022341:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022344:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002234b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002234e:	01 ca                	add    edx,ecx
c0022350:	83 c2 54             	add    edx,0x54
c0022353:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022357:	85 c0                	test   eax,eax
c0022359:	75 43                	jne    c002239e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002235b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002235e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022361:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022368:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002236b:	01 ca                	add    edx,ecx
c002236d:	8d 4a 54             	lea    ecx,[edx+0x54]
c0022370:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022373:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002237a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002237d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022384:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022387:	01 ca                	add    edx,ecx
c0022389:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002238f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0022392:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022396:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022399:	83 e8 20             	sub    eax,0x20
c002239c:	eb 1a                	jmp    c00223b8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002239e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00223a1:	eb 95                	jmp    c0022338 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00223a3:	83 ec 0c             	sub    esp,0xc
c00223a6:	68 94 7c 02 c0       	push   0xc0027c94
c00223ab:	e8 05 2e ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00223b0:	83 c4 10             	add    esp,0x10
c00223b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00223b8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00223bb:	5b                   	pop    ebx
c00223bc:	5e                   	pop    esi
c00223bd:	5f                   	pop    edi
c00223be:	5d                   	pop    ebp
c00223bf:	c3                   	ret    

c00223c0 <PIC::disable()>:
c00223c0:	55                   	push   ebp
c00223c1:	89 e5                	mov    ebp,esp
c00223c3:	83 ec 10             	sub    esp,0x10
c00223c6:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00223cc:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00223d0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00223d3:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00223d7:	ee                   	out    dx,al
c00223d8:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00223de:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00223e2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00223e5:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00223e9:	ee                   	out    dx,al
c00223ea:	90                   	nop
c00223eb:	c9                   	leave  
c00223ec:	c3                   	ret    
c00223ed:	90                   	nop

c00223ee <PIC::close(int, int, void*)>:
c00223ee:	55                   	push   ebp
c00223ef:	89 e5                	mov    ebp,esp
c00223f1:	83 ec 08             	sub    esp,0x8
c00223f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00223f9:	83 c0 3c             	add    eax,0x3c
c00223fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00223fe:	83 ec 0c             	sub    esp,0xc
c0022401:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022404:	ff d0                	call   eax
c0022406:	83 c4 10             	add    esp,0x10
c0022409:	b8 00 00 00 00       	mov    eax,0x0
c002240e:	c9                   	leave  
c002240f:	c3                   	ret    

c0022410 <PIC::PIC()>:
c0022410:	83 ec 0c             	sub    esp,0xc
c0022413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022417:	83 ec 08             	sub    esp,0x8
c002241a:	68 40 7d 02 c0       	push   0xc0027d40
c002241f:	50                   	push   eax
c0022420:	e8 b5 cb fe ff       	call   c000efda <InterruptController::InterruptController(char const*)>
c0022425:	83 c4 10             	add    esp,0x10
c0022428:	ba 6c 7d 02 c0       	mov    edx,0xc0027d6c
c002242d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022431:	89 10                	mov    DWORD PTR [eax],edx
c0022433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022437:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002243d:	0f b6 d0             	movzx  edx,al
c0022440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022444:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002244b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002244f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022455:	0f b6 d0             	movzx  edx,al
c0022458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002245c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022465:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002246b:	8d 50 01             	lea    edx,[eax+0x1]
c002246e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022472:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022478:	0f b6 d0             	movzx  edx,al
c002247b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002247f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022483:	83 e1 3f             	and    ecx,0x3f
c0022486:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002248a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002248e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022494:	0f b6 d0             	movzx  edx,al
c0022497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002249b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00224a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224ac:	0f b6 d0             	movzx  edx,al
c00224af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00224b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224c2:	8d 50 01             	lea    edx,[eax+0x1]
c00224c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224c9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00224cf:	0f b6 d0             	movzx  edx,al
c00224d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224d6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00224da:	83 e1 3f             	and    ecx,0x3f
c00224dd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00224e1:	90                   	nop
c00224e2:	83 c4 0c             	add    esp,0xc
c00224e5:	c3                   	ret    

c00224e6 <PIC::ioWait()>:
c00224e6:	eb 00                	jmp    c00224e8 <PIC::ioWait()+0x2>
c00224e8:	eb 00                	jmp    c00224ea <PIC::ioWait()+0x4>
c00224ea:	90                   	nop
c00224eb:	c3                   	ret    

c00224ec <PIC::getIRQReg(int)>:
c00224ec:	55                   	push   ebp
c00224ed:	89 e5                	mov    ebp,esp
c00224ef:	83 ec 10             	sub    esp,0x10
c00224f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00224f5:	0f b6 c0             	movzx  eax,al
c00224f8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00224fe:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022501:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022504:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022508:	ee                   	out    dx,al
c0022509:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002250c:	0f b6 c0             	movzx  eax,al
c002250f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022515:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022518:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002251b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002251f:	ee                   	out    dx,al
c0022520:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022526:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002252a:	89 c2                	mov    edx,eax
c002252c:	ec                   	in     al,dx
c002252d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022530:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022533:	0f b6 c0             	movzx  eax,al
c0022536:	c1 e0 08             	shl    eax,0x8
c0022539:	89 c1                	mov    ecx,eax
c002253b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022541:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022545:	89 c2                	mov    edx,eax
c0022547:	ec                   	in     al,dx
c0022548:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002254b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002254e:	0f b6 c0             	movzx  eax,al
c0022551:	09 c8                	or     eax,ecx
c0022553:	c9                   	leave  
c0022554:	c3                   	ret    
c0022555:	90                   	nop

c0022556 <PIC::eoi(unsigned char)>:
c0022556:	55                   	push   ebp
c0022557:	89 e5                	mov    ebp,esp
c0022559:	83 ec 14             	sub    esp,0x14
c002255c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002255f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022562:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022566:	75 1e                	jne    c0022586 <PIC::eoi(unsigned char)+0x30>
c0022568:	6a 0b                	push   0xb
c002256a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002256d:	e8 7a ff ff ff       	call   c00224ec <PIC::getIRQReg(int)>
c0022572:	83 c4 08             	add    esp,0x8
c0022575:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0022579:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002257d:	25 80 00 00 00       	and    eax,0x80
c0022582:	85 c0                	test   eax,eax
c0022584:	74 5f                	je     c00225e5 <PIC::eoi(unsigned char)+0x8f>
c0022586:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002258a:	75 2d                	jne    c00225b9 <PIC::eoi(unsigned char)+0x63>
c002258c:	6a 0b                	push   0xb
c002258e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022591:	e8 56 ff ff ff       	call   c00224ec <PIC::getIRQReg(int)>
c0022596:	83 c4 08             	add    esp,0x8
c0022599:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002259d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225a0:	66 85 c0             	test   ax,ax
c00225a3:	78 14                	js     c00225b9 <PIC::eoi(unsigned char)+0x63>
c00225a5:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00225ab:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00225af:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00225b2:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00225b6:	ee                   	out    dx,al
c00225b7:	eb 2d                	jmp    c00225e6 <PIC::eoi(unsigned char)+0x90>
c00225b9:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00225bd:	76 12                	jbe    c00225d1 <PIC::eoi(unsigned char)+0x7b>
c00225bf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00225c5:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00225c9:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00225cc:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00225d0:	ee                   	out    dx,al
c00225d1:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00225d7:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00225db:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00225de:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00225e2:	ee                   	out    dx,al
c00225e3:	eb 01                	jmp    c00225e6 <PIC::eoi(unsigned char)+0x90>
c00225e5:	90                   	nop
c00225e6:	c9                   	leave  
c00225e7:	c3                   	ret    

c00225e8 <PIC::remap()>:
c00225e8:	55                   	push   ebp
c00225e9:	89 e5                	mov    ebp,esp
c00225eb:	83 ec 48             	sub    esp,0x48
c00225ee:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00225f5:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00225fc:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022602:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022605:	89 c2                	mov    edx,eax
c0022607:	ec                   	in     al,dx
c0022608:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002260b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002260e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022611:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022617:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002261a:	89 c2                	mov    edx,eax
c002261c:	ec                   	in     al,dx
c002261d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022620:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022623:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022626:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002262c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022630:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022633:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022636:	ee                   	out    dx,al
c0022637:	83 ec 0c             	sub    esp,0xc
c002263a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002263d:	e8 a4 fe ff ff       	call   c00224e6 <PIC::ioWait()>
c0022642:	83 c4 10             	add    esp,0x10
c0022645:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002264b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002264f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022652:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022655:	ee                   	out    dx,al
c0022656:	83 ec 0c             	sub    esp,0xc
c0022659:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002265c:	e8 85 fe ff ff       	call   c00224e6 <PIC::ioWait()>
c0022661:	83 c4 10             	add    esp,0x10
c0022664:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022667:	0f b6 c0             	movzx  eax,al
c002266a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022670:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022673:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022676:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022679:	ee                   	out    dx,al
c002267a:	83 ec 0c             	sub    esp,0xc
c002267d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022680:	e8 61 fe ff ff       	call   c00224e6 <PIC::ioWait()>
c0022685:	83 c4 10             	add    esp,0x10
c0022688:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002268b:	0f b6 c0             	movzx  eax,al
c002268e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0022694:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022697:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002269a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002269d:	ee                   	out    dx,al
c002269e:	83 ec 0c             	sub    esp,0xc
c00226a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226a4:	e8 3d fe ff ff       	call   c00224e6 <PIC::ioWait()>
c00226a9:	83 c4 10             	add    esp,0x10
c00226ac:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00226b2:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00226b6:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00226b9:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00226bc:	ee                   	out    dx,al
c00226bd:	83 ec 0c             	sub    esp,0xc
c00226c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226c3:	e8 1e fe ff ff       	call   c00224e6 <PIC::ioWait()>
c00226c8:	83 c4 10             	add    esp,0x10
c00226cb:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00226d1:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00226d5:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00226d8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00226db:	ee                   	out    dx,al
c00226dc:	83 ec 0c             	sub    esp,0xc
c00226df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226e2:	e8 ff fd ff ff       	call   c00224e6 <PIC::ioWait()>
c00226e7:	83 c4 10             	add    esp,0x10
c00226ea:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00226f0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00226f4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00226f7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00226fa:	ee                   	out    dx,al
c00226fb:	83 ec 0c             	sub    esp,0xc
c00226fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022701:	e8 e0 fd ff ff       	call   c00224e6 <PIC::ioWait()>
c0022706:	83 c4 10             	add    esp,0x10
c0022709:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002270f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022713:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022716:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022719:	ee                   	out    dx,al
c002271a:	83 ec 0c             	sub    esp,0xc
c002271d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022720:	e8 c1 fd ff ff       	call   c00224e6 <PIC::ioWait()>
c0022725:	83 c4 10             	add    esp,0x10
c0022728:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002272c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022732:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022735:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022738:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002273b:	ee                   	out    dx,al
c002273c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022740:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022746:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022749:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002274c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002274f:	ee                   	out    dx,al
c0022750:	90                   	nop
c0022751:	c9                   	leave  
c0022752:	c3                   	ret    
c0022753:	90                   	nop

c0022754 <PIC::open(int, int, void*)>:
c0022754:	55                   	push   ebp
c0022755:	89 e5                	mov    ebp,esp
c0022757:	83 ec 18             	sub    esp,0x18
c002275a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022760:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022764:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022767:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002276b:	ee                   	out    dx,al
c002276c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022772:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022776:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022779:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002277d:	ee                   	out    dx,al
c002277e:	83 ec 0c             	sub    esp,0xc
c0022781:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022784:	e8 5f fe ff ff       	call   c00225e8 <PIC::remap()>
c0022789:	83 c4 10             	add    esp,0x10
c002278c:	b8 00 00 00 00       	mov    eax,0x0
c0022791:	c9                   	leave  
c0022792:	c3                   	ret    
c0022793:	90                   	nop

c0022794 <APICTimer::close(int, int, void*)>:
c0022794:	b8 00 00 00 00       	mov    eax,0x0
c0022799:	c3                   	ret    
c002279a:	66 90                	xchg   ax,ax

c002279c <apicTimerHandler(regs*, void*)>:
c002279c:	83 ec 0c             	sub    esp,0xc
c002279f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00227a3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00227a5:	b8 10 27 00 00       	mov    eax,0x2710
c00227aa:	ba 00 00 00 00       	mov    edx,0x0
c00227af:	f7 f1                	div    ecx
c00227b1:	83 ec 0c             	sub    esp,0xc
c00227b4:	50                   	push   eax
c00227b5:	e8 4f e8 fe ff       	call   c0011009 <timerHandler(unsigned int)>
c00227ba:	83 c4 10             	add    esp,0x10
c00227bd:	90                   	nop
c00227be:	83 c4 0c             	add    esp,0xc
c00227c1:	c3                   	ret    
c00227c2:	66 90                	xchg   ax,ax

c00227c4 <APICTimer::write(int)>:
c00227c4:	83 ec 1c             	sub    esp,0x1c
c00227c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00227cf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00227d5:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00227da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00227e0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00227e6:	83 ec 0c             	sub    esp,0xc
c00227e9:	50                   	push   eax
c00227ea:	e8 e3 f4 ff ff       	call   c0021cd2 <APIC::getBase()>
c00227ef:	83 c4 10             	add    esp,0x10
c00227f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00227f6:	a1 ec 91 02 c0       	mov    eax,ds:0xc00291ec
c00227fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022803:	05 e0 03 00 00       	add    eax,0x3e0
c0022808:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002280e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022812:	05 80 03 00 00       	add    eax,0x380
c0022817:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002281d:	fb                   	sti    
c002281e:	66 90                	xchg   ax,ax
c0022820:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022824:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c002282a:	a1 ec 91 02 c0       	mov    eax,ds:0xc00291ec
c002282f:	39 c2                	cmp    edx,eax
c0022831:	76 05                	jbe    c0022838 <APICTimer::write(int)+0x74>
c0022833:	eb eb                	jmp    c0022820 <APICTimer::write(int)+0x5c>
c0022835:	8d 76 00             	lea    esi,[esi+0x0]
c0022838:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002283c:	05 20 03 00 00       	add    eax,0x320
c0022841:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022847:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002284b:	05 90 03 00 00       	add    eax,0x390
c0022850:	8b 00                	mov    eax,DWORD PTR [eax]
c0022852:	f7 d0                	not    eax
c0022854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022858:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002285c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022860:	ba 00 00 00 00       	mov    edx,0x0
c0022865:	f7 f1                	div    ecx
c0022867:	89 04 24             	mov    DWORD PTR [esp],eax
c002286a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002286e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022874:	0d 00 00 02 00       	or     eax,0x20000
c0022879:	89 c2                	mov    edx,eax
c002287b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002287f:	05 20 03 00 00       	add    eax,0x320
c0022884:	89 10                	mov    DWORD PTR [eax],edx
c0022886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002288a:	05 e0 03 00 00       	add    eax,0x3e0
c002288f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022895:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022899:	05 80 03 00 00       	add    eax,0x380
c002289e:	89 c2                	mov    edx,eax
c00228a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00228a3:	89 02                	mov    DWORD PTR [edx],eax
c00228a5:	90                   	nop
c00228a6:	83 c4 1c             	add    esp,0x1c
c00228a9:	c3                   	ret    
c00228aa:	66 90                	xchg   ax,ax

c00228ac <APICTimer::open(int, int, void*)>:
c00228ac:	57                   	push   edi
c00228ad:	56                   	push   esi
c00228ae:	53                   	push   ebx
c00228af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00228b5:	83 c0 24             	add    eax,0x24
c00228b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00228ba:	83 ec 08             	sub    esp,0x8
c00228bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228c5:	ff d0                	call   eax
c00228c7:	83 c4 10             	add    esp,0x10
c00228ca:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00228cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00228d5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00228db:	83 ec 0c             	sub    esp,0xc
c00228de:	50                   	push   eax
c00228df:	e8 ee f3 ff ff       	call   c0021cd2 <APIC::getBase()>
c00228e4:	83 c4 10             	add    esp,0x10
c00228e7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00228ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00228f7:	0f b6 f8             	movzx  edi,al
c00228fa:	89 d0                	mov    eax,edx
c00228fc:	ba 00 00 00 00       	mov    edx,0x0
c0022901:	89 c1                	mov    ecx,eax
c0022903:	80 e5 ff             	and    ch,0xff
c0022906:	89 cb                	mov    ebx,ecx
c0022908:	0f b6 f2             	movzx  esi,dl
c002290b:	89 d8                	mov    eax,ebx
c002290d:	89 f2                	mov    edx,esi
c002290f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022913:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022916:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002291a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002291e:	83 e0 00             	and    eax,0x0
c0022921:	09 d0                	or     eax,edx
c0022923:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002292b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022931:	8d 50 01             	lea    edx,[eax+0x1]
c0022934:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022938:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002293e:	0f b6 d0             	movzx  edx,al
c0022941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022945:	83 c2 08             	add    edx,0x8
c0022948:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002294c:	0f b6 c9             	movzx  ecx,cl
c002294f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022955:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002295d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022961:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002296f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022975:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022979:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002297f:	83 ec 0c             	sub    esp,0xc
c0022982:	51                   	push   ecx
c0022983:	6a 01                	push   0x1
c0022985:	68 9c 27 02 c0       	push   0xc002279c
c002298a:	52                   	push   edx
c002298b:	50                   	push   eax
c002298c:	e8 2d bc fe ff       	call   c000e5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022991:	83 c4 20             	add    esp,0x20
c0022994:	89 c2                	mov    edx,eax
c0022996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00229a0:	b8 00 00 00 00       	mov    eax,0x0
c00229a5:	5b                   	pop    ebx
c00229a6:	5e                   	pop    esi
c00229a7:	5f                   	pop    edi
c00229a8:	c3                   	ret    
c00229a9:	90                   	nop
c00229aa:	66 90                	xchg   ax,ax

c00229ac <APICTimer::APICTimer()>:
c00229ac:	83 ec 0c             	sub    esp,0xc
c00229af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b3:	83 ec 08             	sub    esp,0x8
c00229b6:	68 ac 7d 02 c0       	push   0xc0027dac
c00229bb:	50                   	push   eax
c00229bc:	e8 b7 e5 fe ff       	call   c0010f78 <Timer::Timer(char const*)>
c00229c1:	83 c4 10             	add    esp,0x10
c00229c4:	ba c0 7d 02 c0       	mov    edx,0xc0027dc0
c00229c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cd:	89 10                	mov    DWORD PTR [eax],edx
c00229cf:	90                   	nop
c00229d0:	83 c4 0c             	add    esp,0xc
c00229d3:	c3                   	ret    

c00229d4 <PIT::write(int)>:
c00229d4:	83 ec 10             	sub    esp,0x10
c00229d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00229db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00229df:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00229e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00229e9:	a3 64 ab 02 c0       	mov    ds:0xc002ab64,eax
c00229ee:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00229f3:	99                   	cdq    
c00229f4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00229f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00229fc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022a03:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022a08:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022a0c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022a11:	ee                   	out    dx,al
c0022a12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a16:	0f b6 c0             	movzx  eax,al
c0022a19:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022a20:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022a24:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022a28:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022a2d:	ee                   	out    dx,al
c0022a2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a32:	c1 f8 08             	sar    eax,0x8
c0022a35:	0f b6 c0             	movzx  eax,al
c0022a38:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022a3f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022a43:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022a47:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022a4c:	ee                   	out    dx,al
c0022a4d:	90                   	nop
c0022a4e:	83 c4 10             	add    esp,0x10
c0022a51:	c3                   	ret    
c0022a52:	66 90                	xchg   ax,ax

c0022a54 <pitHandler(regs*, void*)>:
c0022a54:	83 ec 0c             	sub    esp,0xc
c0022a57:	8b 0d 64 ab 02 c0    	mov    ecx,DWORD PTR ds:0xc002ab64
c0022a5d:	b8 10 27 00 00       	mov    eax,0x2710
c0022a62:	99                   	cdq    
c0022a63:	f7 f9                	idiv   ecx
c0022a65:	83 ec 0c             	sub    esp,0xc
c0022a68:	50                   	push   eax
c0022a69:	e8 9b e5 fe ff       	call   c0011009 <timerHandler(unsigned int)>
c0022a6e:	83 c4 10             	add    esp,0x10
c0022a71:	90                   	nop
c0022a72:	83 c4 0c             	add    esp,0xc
c0022a75:	c3                   	ret    
c0022a76:	66 90                	xchg   ax,ax

c0022a78 <PIT::open(int, int, void*)>:
c0022a78:	83 ec 0c             	sub    esp,0xc
c0022a7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a81:	83 c0 24             	add    eax,0x24
c0022a84:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a86:	83 ec 08             	sub    esp,0x8
c0022a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a91:	ff d0                	call   eax
c0022a93:	83 c4 10             	add    esp,0x10
c0022a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a9a:	83 ec 0c             	sub    esp,0xc
c0022a9d:	6a 00                	push   0x0
c0022a9f:	6a 01                	push   0x1
c0022aa1:	68 54 2a 02 c0       	push   0xc0022a54
c0022aa6:	6a 00                	push   0x0
c0022aa8:	50                   	push   eax
c0022aa9:	e8 10 bb fe ff       	call   c000e5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022aae:	83 c4 20             	add    esp,0x20
c0022ab1:	89 c2                	mov    edx,eax
c0022ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022abd:	b8 00 00 00 00       	mov    eax,0x0
c0022ac2:	83 c4 0c             	add    esp,0xc
c0022ac5:	c3                   	ret    
c0022ac6:	66 90                	xchg   ax,ax

c0022ac8 <PIT::close(int, int, void*)>:
c0022ac8:	83 ec 0c             	sub    esp,0xc
c0022acb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022acf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022add:	6a 01                	push   0x1
c0022adf:	68 54 2a 02 c0       	push   0xc0022a54
c0022ae4:	6a 00                	push   0x0
c0022ae6:	50                   	push   eax
c0022ae7:	e8 1c bb fe ff       	call   c000e608 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022aec:	83 c4 10             	add    esp,0x10
c0022aef:	b8 00 00 00 00       	mov    eax,0x0
c0022af4:	83 c4 0c             	add    esp,0xc
c0022af7:	c3                   	ret    

c0022af8 <PIT::PIT()>:
c0022af8:	83 ec 0c             	sub    esp,0xc
c0022afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aff:	83 ec 08             	sub    esp,0x8
c0022b02:	68 e8 7d 02 c0       	push   0xc0027de8
c0022b07:	50                   	push   eax
c0022b08:	e8 6b e4 fe ff       	call   c0010f78 <Timer::Timer(char const*)>
c0022b0d:	83 c4 10             	add    esp,0x10
c0022b10:	ba 10 7e 02 c0       	mov    edx,0xc0027e10
c0022b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b19:	89 10                	mov    DWORD PTR [eax],edx
c0022b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b25:	0f b6 d0             	movzx  edx,al
c0022b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b2c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b37:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b3d:	0f b6 d0             	movzx  edx,al
c0022b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b44:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b4d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b53:	8d 50 01             	lea    edx,[eax+0x1]
c0022b56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022b5a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022b60:	0f b6 d0             	movzx  edx,al
c0022b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b67:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022b6b:	83 e1 3f             	and    ecx,0x3f
c0022b6e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022b72:	90                   	nop
c0022b73:	83 c4 0c             	add    esp,0xc
c0022b76:	c3                   	ret    
c0022b77:	66 90                	xchg   ax,ax
c0022b79:	66 90                	xchg   ax,ax
c0022b7b:	66 90                	xchg   ax,ax
c0022b7d:	66 90                	xchg   ax,ax
c0022b7f:	90                   	nop

c0022b80 <avxDetect>:
c0022b80:	b8 01 00 00 00       	mov    eax,0x1
c0022b85:	0f a2                	cpuid  
c0022b87:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0022b8d:	74 15                	je     c0022ba4 <avxDetect.noAVX>
c0022b8f:	b8 01 00 00 00       	mov    eax,0x1
c0022b94:	0f a2                	cpuid  
c0022b96:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0022b9c:	74 06                	je     c0022ba4 <avxDetect.noAVX>
c0022b9e:	b8 01 00 00 00       	mov    eax,0x1
c0022ba3:	c3                   	ret    

c0022ba4 <avxDetect.noAVX>:
c0022ba4:	b8 00 00 00 00       	mov    eax,0x0
c0022ba9:	c3                   	ret    

c0022baa <avxSave>:
c0022baa:	53                   	push   ebx
c0022bab:	52                   	push   edx
c0022bac:	31 c0                	xor    eax,eax
c0022bae:	48                   	dec    eax
c0022baf:	89 c2                	mov    edx,eax
c0022bb1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022bb5:	0f ae 23             	xsave  [ebx]
c0022bb8:	5a                   	pop    edx
c0022bb9:	5b                   	pop    ebx
c0022bba:	c3                   	ret    

c0022bbb <avxLoad>:
c0022bbb:	53                   	push   ebx
c0022bbc:	52                   	push   edx
c0022bbd:	31 c0                	xor    eax,eax
c0022bbf:	48                   	dec    eax
c0022bc0:	89 c2                	mov    edx,eax
c0022bc2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022bc6:	0f ae 2b             	xrstor [ebx]
c0022bc9:	5a                   	pop    edx
c0022bca:	5b                   	pop    ebx
c0022bcb:	c3                   	ret    

c0022bcc <avxInit>:
c0022bcc:	e8 67 00 00 00       	call   c0022c38 <sseInit>
c0022bd1:	50                   	push   eax
c0022bd2:	51                   	push   ecx
c0022bd3:	0f 20 e0             	mov    eax,cr4
c0022bd6:	0d 00 00 04 00       	or     eax,0x40000
c0022bdb:	0f 22 e0             	mov    cr4,eax
c0022bde:	31 c9                	xor    ecx,ecx
c0022be0:	0f 01 d0             	xgetbv 
c0022be3:	0d 07 00 00 00       	or     eax,0x7
c0022be8:	0f 01 d1             	xsetbv 
c0022beb:	59                   	pop    ecx
c0022bec:	58                   	pop    eax
c0022bed:	c3                   	ret    

c0022bee <avxClose>:
c0022bee:	c3                   	ret    

c0022bef <wouldSheSayYes>:
c0022bef:	c3                   	ret    
c0022bf0:	49                   	dec    ecx
c0022bf1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022bf5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022bf9:	75 20                	jne    c0022c1b <absolutelyNoChanceInHell+0xb>
c0022bfb:	4e                   	dec    esi
c0022bfc:	79 61                	jns    c0022c5f <x87Detect+0x9>
c0022bfe:	68 2e 2e 2e 00       	push   0x2e2e2e
c0022c03:	66 90                	xchg   ax,ax
c0022c05:	66 90                	xchg   ax,ax
c0022c07:	66 90                	xchg   ax,ax
c0022c09:	66 90                	xchg   ax,ax
c0022c0b:	66 90                	xchg   ax,ax
c0022c0d:	66 90                	xchg   ax,ax
c0022c0f:	90                   	nop

c0022c10 <absolutelyNoChanceInHell>:
c0022c10:	b8 01 00 00 00       	mov    eax,0x1
c0022c15:	0f a2                	cpuid  
c0022c17:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022c1d:	74 06                	je     c0022c25 <sseDetect.noSSE>
c0022c1f:	b8 01 00 00 00       	mov    eax,0x1
c0022c24:	c3                   	ret    

c0022c25 <sseDetect.noSSE>:
c0022c25:	31 c0                	xor    eax,eax
c0022c27:	c3                   	ret    

c0022c28 <sseSave>:
c0022c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c2c:	0f ae 00             	fxsave [eax]
c0022c2f:	c3                   	ret    

c0022c30 <sseLoad>:
c0022c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c34:	0f ae 08             	fxrstor [eax]
c0022c37:	c3                   	ret    

c0022c38 <sseInit>:
c0022c38:	e8 42 00 00 00       	call   c0022c7f <x87Init>
c0022c3d:	0f 20 e0             	mov    eax,cr4
c0022c40:	66 0d 00 06          	or     ax,0x600
c0022c44:	0f 22 e0             	mov    cr4,eax
c0022c47:	c3                   	ret    

c0022c48 <sseClose>:
c0022c48:	c3                   	ret    
c0022c49:	66 90                	xchg   ax,ax
c0022c4b:	66 90                	xchg   ax,ax
c0022c4d:	66 90                	xchg   ax,ax
c0022c4f:	90                   	nop

c0022c50 <value_37F>:
c0022c50:	7f 03                	jg     c0022c55 <value_37A+0x1>

c0022c52 <value_37E>:
c0022c52:	7e 03                	jle    c0022c57 <x87Detect+0x1>

c0022c54 <value_37A>:
c0022c54:	7a 03                	jp     c0022c59 <x87Detect+0x3>

c0022c56 <x87Detect>:
c0022c56:	b8 01 00 00 00       	mov    eax,0x1
c0022c5b:	0f a2                	cpuid  
c0022c5d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022c63:	74 06                	je     c0022c6b <x87Detect.nox87>
c0022c65:	b8 01 00 00 00       	mov    eax,0x1
c0022c6a:	c3                   	ret    

c0022c6b <x87Detect.nox87>:
c0022c6b:	b8 00 00 00 00       	mov    eax,0x0
c0022c70:	c3                   	ret    

c0022c71 <x87Save>:
c0022c71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c75:	dd 30                	fnsave [eax]
c0022c77:	c3                   	ret    

c0022c78 <x87Load>:
c0022c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c7c:	dd 20                	frstor [eax]
c0022c7e:	c3                   	ret    

c0022c7f <x87Init>:
c0022c7f:	0f 20 c0             	mov    eax,cr0
c0022c82:	66 25 fb ff          	and    ax,0xfffb
c0022c86:	66 0d 22 00          	or     ax,0x22
c0022c8a:	0f 22 c0             	mov    cr0,eax
c0022c8d:	db e3                	fninit 
c0022c8f:	0f 06                	clts   
c0022c91:	d9 2d 54 2c 02 c0    	fldcw  WORD PTR ds:0xc0022c54
c0022c97:	c3                   	ret    

c0022c98 <x87Close>:
c0022c98:	c3                   	ret    
c0022c99:	66 90                	xchg   ax,ax
c0022c9b:	90                   	nop

c0022c9c <__do_global_ctors_aux>:
c0022c9c:	a1 38 3e 02 c0       	mov    eax,ds:0xc0023e38
c0022ca1:	83 f8 ff             	cmp    eax,0xffffffff
c0022ca4:	74 1a                	je     c0022cc0 <__do_global_ctors_aux+0x24>
c0022ca6:	55                   	push   ebp
c0022ca7:	89 e5                	mov    ebp,esp
c0022ca9:	53                   	push   ebx
c0022caa:	52                   	push   edx
c0022cab:	bb 38 3e 02 c0       	mov    ebx,0xc0023e38
c0022cb0:	ff d0                	call   eax
c0022cb2:	83 eb 04             	sub    ebx,0x4
c0022cb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022cb7:	83 f8 ff             	cmp    eax,0xffffffff
c0022cba:	75 f4                	jne    c0022cb0 <__do_global_ctors_aux+0x14>
c0022cbc:	58                   	pop    eax
c0022cbd:	5b                   	pop    ebx
c0022cbe:	5d                   	pop    ebp
c0022cbf:	c3                   	ret    
c0022cc0:	c3                   	ret    
c0022cc1:	66 90                	xchg   ax,ax
c0022cc3:	90                   	nop

c0022cc4 <__divdi3>:
c0022cc4:	55                   	push   ebp
c0022cc5:	57                   	push   edi
c0022cc6:	56                   	push   esi
c0022cc7:	53                   	push   ebx
c0022cc8:	83 ec 1c             	sub    esp,0x1c
c0022ccb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022ccf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022cd3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022cd6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022cda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022cde:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022ce2:	85 db                	test   ebx,ebx
c0022ce4:	0f 88 8e 00 00 00    	js     c0022d78 <__divdi3+0xb4>
c0022cea:	89 dd                	mov    ebp,ebx
c0022cec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022cf4:	89 d3                	mov    ebx,edx
c0022cf6:	85 d2                	test   edx,edx
c0022cf8:	79 0d                	jns    c0022d07 <__divdi3+0x43>
c0022cfa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022cfe:	f7 d8                	neg    eax
c0022d00:	83 d2 00             	adc    edx,0x0
c0022d03:	f7 da                	neg    edx
c0022d05:	89 d3                	mov    ebx,edx
c0022d07:	89 c7                	mov    edi,eax
c0022d09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022d0c:	85 db                	test   ebx,ebx
c0022d0e:	75 48                	jne    c0022d58 <__divdi3+0x94>
c0022d10:	39 ef                	cmp    edi,ebp
c0022d12:	76 24                	jbe    c0022d38 <__divdi3+0x74>
c0022d14:	89 ea                	mov    edx,ebp
c0022d16:	f7 f7                	div    edi
c0022d18:	89 c1                	mov    ecx,eax
c0022d1a:	31 f6                	xor    esi,esi
c0022d1c:	89 c8                	mov    eax,ecx
c0022d1e:	89 f2                	mov    edx,esi
c0022d20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022d24:	85 c9                	test   ecx,ecx
c0022d26:	74 07                	je     c0022d2f <__divdi3+0x6b>
c0022d28:	f7 d8                	neg    eax
c0022d2a:	83 d2 00             	adc    edx,0x0
c0022d2d:	f7 da                	neg    edx
c0022d2f:	83 c4 1c             	add    esp,0x1c
c0022d32:	5b                   	pop    ebx
c0022d33:	5e                   	pop    esi
c0022d34:	5f                   	pop    edi
c0022d35:	5d                   	pop    ebp
c0022d36:	c3                   	ret    
c0022d37:	90                   	nop
c0022d38:	85 ff                	test   edi,edi
c0022d3a:	75 0b                	jne    c0022d47 <__divdi3+0x83>
c0022d3c:	b8 01 00 00 00       	mov    eax,0x1
c0022d41:	31 d2                	xor    edx,edx
c0022d43:	f7 f3                	div    ebx
c0022d45:	89 c7                	mov    edi,eax
c0022d47:	31 d2                	xor    edx,edx
c0022d49:	89 e8                	mov    eax,ebp
c0022d4b:	f7 f7                	div    edi
c0022d4d:	89 c6                	mov    esi,eax
c0022d4f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022d52:	f7 f7                	div    edi
c0022d54:	89 c1                	mov    ecx,eax
c0022d56:	eb c4                	jmp    c0022d1c <__divdi3+0x58>
c0022d58:	39 eb                	cmp    ebx,ebp
c0022d5a:	77 3c                	ja     c0022d98 <__divdi3+0xd4>
c0022d5c:	0f bd f3             	bsr    esi,ebx
c0022d5f:	83 f6 1f             	xor    esi,0x1f
c0022d62:	75 40                	jne    c0022da4 <__divdi3+0xe0>
c0022d64:	39 eb                	cmp    ebx,ebp
c0022d66:	72 09                	jb     c0022d71 <__divdi3+0xad>
c0022d68:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022d6b:	0f 87 97 00 00 00    	ja     c0022e08 <__divdi3+0x144>
c0022d71:	b9 01 00 00 00       	mov    ecx,0x1
c0022d76:	eb a4                	jmp    c0022d1c <__divdi3+0x58>
c0022d78:	f7 d9                	neg    ecx
c0022d7a:	83 d3 00             	adc    ebx,0x0
c0022d7d:	f7 db                	neg    ebx
c0022d7f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022d82:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022d86:	89 dd                	mov    ebp,ebx
c0022d88:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022d90:	e9 5f ff ff ff       	jmp    c0022cf4 <__divdi3+0x30>
c0022d95:	8d 76 00             	lea    esi,[esi+0x0]
c0022d98:	31 f6                	xor    esi,esi
c0022d9a:	31 c9                	xor    ecx,ecx
c0022d9c:	e9 7b ff ff ff       	jmp    c0022d1c <__divdi3+0x58>
c0022da1:	8d 76 00             	lea    esi,[esi+0x0]
c0022da4:	b8 20 00 00 00       	mov    eax,0x20
c0022da9:	29 f0                	sub    eax,esi
c0022dab:	89 f1                	mov    ecx,esi
c0022dad:	d3 e3                	shl    ebx,cl
c0022daf:	89 fa                	mov    edx,edi
c0022db1:	88 c1                	mov    cl,al
c0022db3:	d3 ea                	shr    edx,cl
c0022db5:	09 da                	or     edx,ebx
c0022db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022dbb:	89 f1                	mov    ecx,esi
c0022dbd:	d3 e7                	shl    edi,cl
c0022dbf:	89 eb                	mov    ebx,ebp
c0022dc1:	88 c1                	mov    cl,al
c0022dc3:	d3 eb                	shr    ebx,cl
c0022dc5:	89 f1                	mov    ecx,esi
c0022dc7:	d3 e5                	shl    ebp,cl
c0022dc9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022dcc:	88 c1                	mov    cl,al
c0022dce:	d3 ea                	shr    edx,cl
c0022dd0:	09 d5                	or     ebp,edx
c0022dd2:	89 e8                	mov    eax,ebp
c0022dd4:	89 da                	mov    edx,ebx
c0022dd6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022dda:	89 d3                	mov    ebx,edx
c0022ddc:	89 c5                	mov    ebp,eax
c0022dde:	f7 e7                	mul    edi
c0022de0:	39 d3                	cmp    ebx,edx
c0022de2:	72 18                	jb     c0022dfc <__divdi3+0x138>
c0022de4:	74 0a                	je     c0022df0 <__divdi3+0x12c>
c0022de6:	89 e9                	mov    ecx,ebp
c0022de8:	31 f6                	xor    esi,esi
c0022dea:	e9 2d ff ff ff       	jmp    c0022d1c <__divdi3+0x58>
c0022def:	90                   	nop
c0022df0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022df3:	89 f1                	mov    ecx,esi
c0022df5:	d3 e7                	shl    edi,cl
c0022df7:	39 c7                	cmp    edi,eax
c0022df9:	73 eb                	jae    c0022de6 <__divdi3+0x122>
c0022dfb:	90                   	nop
c0022dfc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022dff:	31 f6                	xor    esi,esi
c0022e01:	e9 16 ff ff ff       	jmp    c0022d1c <__divdi3+0x58>
c0022e06:	66 90                	xchg   ax,ax
c0022e08:	31 c9                	xor    ecx,ecx
c0022e0a:	e9 0d ff ff ff       	jmp    c0022d1c <__divdi3+0x58>
c0022e0f:	90                   	nop

c0022e10 <__moddi3>:
c0022e10:	55                   	push   ebp
c0022e11:	57                   	push   edi
c0022e12:	56                   	push   esi
c0022e13:	53                   	push   ebx
c0022e14:	83 ec 2c             	sub    esp,0x2c
c0022e17:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022e1b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022e1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022e23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022e27:	85 db                	test   ebx,ebx
c0022e29:	0f 88 85 00 00 00    	js     c0022eb4 <__moddi3+0xa4>
c0022e2f:	89 de                	mov    esi,ebx
c0022e31:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022e39:	89 d7                	mov    edi,edx
c0022e3b:	85 d2                	test   edx,edx
c0022e3d:	79 09                	jns    c0022e48 <__moddi3+0x38>
c0022e3f:	f7 d8                	neg    eax
c0022e41:	83 d2 00             	adc    edx,0x0
c0022e44:	f7 da                	neg    edx
c0022e46:	89 d7                	mov    edi,edx
c0022e48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e4c:	89 cd                	mov    ebp,ecx
c0022e4e:	85 ff                	test   edi,edi
c0022e50:	75 52                	jne    c0022ea4 <__moddi3+0x94>
c0022e52:	89 c3                	mov    ebx,eax
c0022e54:	39 f0                	cmp    eax,esi
c0022e56:	76 24                	jbe    c0022e7c <__moddi3+0x6c>
c0022e58:	89 c8                	mov    eax,ecx
c0022e5a:	89 f2                	mov    edx,esi
c0022e5c:	f7 f3                	div    ebx
c0022e5e:	89 d6                	mov    esi,edx
c0022e60:	89 f0                	mov    eax,esi
c0022e62:	31 d2                	xor    edx,edx
c0022e64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e68:	85 c9                	test   ecx,ecx
c0022e6a:	74 07                	je     c0022e73 <__moddi3+0x63>
c0022e6c:	f7 d8                	neg    eax
c0022e6e:	83 d2 00             	adc    edx,0x0
c0022e71:	f7 da                	neg    edx
c0022e73:	83 c4 2c             	add    esp,0x2c
c0022e76:	5b                   	pop    ebx
c0022e77:	5e                   	pop    esi
c0022e78:	5f                   	pop    edi
c0022e79:	5d                   	pop    ebp
c0022e7a:	c3                   	ret    
c0022e7b:	90                   	nop
c0022e7c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022e80:	85 db                	test   ebx,ebx
c0022e82:	75 0d                	jne    c0022e91 <__moddi3+0x81>
c0022e84:	b8 01 00 00 00       	mov    eax,0x1
c0022e89:	31 d2                	xor    edx,edx
c0022e8b:	f7 f7                	div    edi
c0022e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e91:	89 f0                	mov    eax,esi
c0022e93:	31 d2                	xor    edx,edx
c0022e95:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022e99:	f7 f7                	div    edi
c0022e9b:	89 e8                	mov    eax,ebp
c0022e9d:	f7 f7                	div    edi
c0022e9f:	89 d6                	mov    esi,edx
c0022ea1:	eb bd                	jmp    c0022e60 <__moddi3+0x50>
c0022ea3:	90                   	nop
c0022ea4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022ea8:	39 f7                	cmp    edi,esi
c0022eaa:	76 20                	jbe    c0022ecc <__moddi3+0xbc>
c0022eac:	89 c8                	mov    eax,ecx
c0022eae:	89 f2                	mov    edx,esi
c0022eb0:	eb b2                	jmp    c0022e64 <__moddi3+0x54>
c0022eb2:	66 90                	xchg   ax,ax
c0022eb4:	f7 d9                	neg    ecx
c0022eb6:	83 d3 00             	adc    ebx,0x0
c0022eb9:	f7 db                	neg    ebx
c0022ebb:	89 de                	mov    esi,ebx
c0022ebd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022ec5:	e9 6f ff ff ff       	jmp    c0022e39 <__moddi3+0x29>
c0022eca:	66 90                	xchg   ax,ax
c0022ecc:	0f bd c7             	bsr    eax,edi
c0022ecf:	83 f0 1f             	xor    eax,0x1f
c0022ed2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022ed6:	75 24                	jne    c0022efc <__moddi3+0xec>
c0022ed8:	39 f7                	cmp    edi,esi
c0022eda:	72 06                	jb     c0022ee2 <__moddi3+0xd2>
c0022edc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022ee0:	77 0c                	ja     c0022eee <__moddi3+0xde>
c0022ee2:	89 e9                	mov    ecx,ebp
c0022ee4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022ee8:	19 fe                	sbb    esi,edi
c0022eea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022eee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022ef2:	89 f2                	mov    edx,esi
c0022ef4:	e9 6b ff ff ff       	jmp    c0022e64 <__moddi3+0x54>
c0022ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0022efc:	b8 20 00 00 00       	mov    eax,0x20
c0022f01:	89 c2                	mov    edx,eax
c0022f03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022f07:	29 da                	sub    edx,ebx
c0022f09:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022f0d:	88 d9                	mov    cl,bl
c0022f0f:	d3 e7                	shl    edi,cl
c0022f11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f15:	88 d1                	mov    cl,dl
c0022f17:	d3 e8                	shr    eax,cl
c0022f19:	09 c7                	or     edi,eax
c0022f1b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022f1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022f23:	89 d8                	mov    eax,ebx
c0022f25:	88 d9                	mov    cl,bl
c0022f27:	d3 e7                	shl    edi,cl
c0022f29:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022f2d:	89 f3                	mov    ebx,esi
c0022f2f:	88 d1                	mov    cl,dl
c0022f31:	d3 eb                	shr    ebx,cl
c0022f33:	89 c7                	mov    edi,eax
c0022f35:	88 c1                	mov    cl,al
c0022f37:	d3 e6                	shl    esi,cl
c0022f39:	89 e8                	mov    eax,ebp
c0022f3b:	88 d1                	mov    cl,dl
c0022f3d:	d3 e8                	shr    eax,cl
c0022f3f:	09 f0                	or     eax,esi
c0022f41:	89 f9                	mov    ecx,edi
c0022f43:	d3 e5                	shl    ebp,cl
c0022f45:	89 da                	mov    edx,ebx
c0022f47:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0022f4b:	89 d3                	mov    ebx,edx
c0022f4d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022f51:	89 c6                	mov    esi,eax
c0022f53:	89 d1                	mov    ecx,edx
c0022f55:	39 d3                	cmp    ebx,edx
c0022f57:	72 27                	jb     c0022f80 <__moddi3+0x170>
c0022f59:	74 21                	je     c0022f7c <__moddi3+0x16c>
c0022f5b:	29 f5                	sub    ebp,esi
c0022f5d:	19 cb                	sbb    ebx,ecx
c0022f5f:	89 de                	mov    esi,ebx
c0022f61:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022f65:	d3 e6                	shl    esi,cl
c0022f67:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022f6b:	89 f9                	mov    ecx,edi
c0022f6d:	d3 ed                	shr    ebp,cl
c0022f6f:	09 ee                	or     esi,ebp
c0022f71:	89 f0                	mov    eax,esi
c0022f73:	d3 eb                	shr    ebx,cl
c0022f75:	89 da                	mov    edx,ebx
c0022f77:	e9 e8 fe ff ff       	jmp    c0022e64 <__moddi3+0x54>
c0022f7c:	39 c5                	cmp    ebp,eax
c0022f7e:	73 db                	jae    c0022f5b <__moddi3+0x14b>
c0022f80:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022f84:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022f88:	89 d1                	mov    ecx,edx
c0022f8a:	89 c6                	mov    esi,eax
c0022f8c:	eb cd                	jmp    c0022f5b <__moddi3+0x14b>
c0022f8e:	66 90                	xchg   ax,ax

c0022f90 <__udivdi3>:
c0022f90:	55                   	push   ebp
c0022f91:	57                   	push   edi
c0022f92:	56                   	push   esi
c0022f93:	53                   	push   ebx
c0022f94:	83 ec 1c             	sub    esp,0x1c
c0022f97:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022f9b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022f9f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022fa3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022fa7:	85 d2                	test   edx,edx
c0022fa9:	75 41                	jne    c0022fec <__udivdi3+0x5c>
c0022fab:	39 f7                	cmp    edi,esi
c0022fad:	76 15                	jbe    c0022fc4 <__udivdi3+0x34>
c0022faf:	89 e8                	mov    eax,ebp
c0022fb1:	89 f2                	mov    edx,esi
c0022fb3:	f7 f7                	div    edi
c0022fb5:	31 db                	xor    ebx,ebx
c0022fb7:	89 da                	mov    edx,ebx
c0022fb9:	83 c4 1c             	add    esp,0x1c
c0022fbc:	5b                   	pop    ebx
c0022fbd:	5e                   	pop    esi
c0022fbe:	5f                   	pop    edi
c0022fbf:	5d                   	pop    ebp
c0022fc0:	c3                   	ret    
c0022fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0022fc4:	89 f9                	mov    ecx,edi
c0022fc6:	85 ff                	test   edi,edi
c0022fc8:	75 0b                	jne    c0022fd5 <__udivdi3+0x45>
c0022fca:	b8 01 00 00 00       	mov    eax,0x1
c0022fcf:	31 d2                	xor    edx,edx
c0022fd1:	f7 f7                	div    edi
c0022fd3:	89 c1                	mov    ecx,eax
c0022fd5:	31 d2                	xor    edx,edx
c0022fd7:	89 f0                	mov    eax,esi
c0022fd9:	f7 f1                	div    ecx
c0022fdb:	89 c3                	mov    ebx,eax
c0022fdd:	89 e8                	mov    eax,ebp
c0022fdf:	f7 f1                	div    ecx
c0022fe1:	89 da                	mov    edx,ebx
c0022fe3:	83 c4 1c             	add    esp,0x1c
c0022fe6:	5b                   	pop    ebx
c0022fe7:	5e                   	pop    esi
c0022fe8:	5f                   	pop    edi
c0022fe9:	5d                   	pop    ebp
c0022fea:	c3                   	ret    
c0022feb:	90                   	nop
c0022fec:	39 f2                	cmp    edx,esi
c0022fee:	77 1c                	ja     c002300c <__udivdi3+0x7c>
c0022ff0:	0f bd da             	bsr    ebx,edx
c0022ff3:	83 f3 1f             	xor    ebx,0x1f
c0022ff6:	75 24                	jne    c002301c <__udivdi3+0x8c>
c0022ff8:	39 f2                	cmp    edx,esi
c0022ffa:	72 08                	jb     c0023004 <__udivdi3+0x74>
c0022ffc:	39 ef                	cmp    edi,ebp
c0022ffe:	0f 87 84 00 00 00    	ja     c0023088 <__udivdi3+0xf8>
c0023004:	b8 01 00 00 00       	mov    eax,0x1
c0023009:	eb ac                	jmp    c0022fb7 <__udivdi3+0x27>
c002300b:	90                   	nop
c002300c:	31 db                	xor    ebx,ebx
c002300e:	31 c0                	xor    eax,eax
c0023010:	89 da                	mov    edx,ebx
c0023012:	83 c4 1c             	add    esp,0x1c
c0023015:	5b                   	pop    ebx
c0023016:	5e                   	pop    esi
c0023017:	5f                   	pop    edi
c0023018:	5d                   	pop    ebp
c0023019:	c3                   	ret    
c002301a:	66 90                	xchg   ax,ax
c002301c:	b8 20 00 00 00       	mov    eax,0x20
c0023021:	29 d8                	sub    eax,ebx
c0023023:	88 d9                	mov    cl,bl
c0023025:	d3 e2                	shl    edx,cl
c0023027:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002302b:	89 fa                	mov    edx,edi
c002302d:	88 c1                	mov    cl,al
c002302f:	d3 ea                	shr    edx,cl
c0023031:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023035:	09 d1                	or     ecx,edx
c0023037:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002303b:	88 d9                	mov    cl,bl
c002303d:	d3 e7                	shl    edi,cl
c002303f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023043:	89 f7                	mov    edi,esi
c0023045:	88 c1                	mov    cl,al
c0023047:	d3 ef                	shr    edi,cl
c0023049:	88 d9                	mov    cl,bl
c002304b:	d3 e6                	shl    esi,cl
c002304d:	89 ea                	mov    edx,ebp
c002304f:	88 c1                	mov    cl,al
c0023051:	d3 ea                	shr    edx,cl
c0023053:	09 d6                	or     esi,edx
c0023055:	89 f0                	mov    eax,esi
c0023057:	89 fa                	mov    edx,edi
c0023059:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002305d:	89 d7                	mov    edi,edx
c002305f:	89 c6                	mov    esi,eax
c0023061:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023065:	39 d7                	cmp    edi,edx
c0023067:	72 13                	jb     c002307c <__udivdi3+0xec>
c0023069:	74 09                	je     c0023074 <__udivdi3+0xe4>
c002306b:	89 f0                	mov    eax,esi
c002306d:	31 db                	xor    ebx,ebx
c002306f:	e9 43 ff ff ff       	jmp    c0022fb7 <__udivdi3+0x27>
c0023074:	88 d9                	mov    cl,bl
c0023076:	d3 e5                	shl    ebp,cl
c0023078:	39 c5                	cmp    ebp,eax
c002307a:	73 ef                	jae    c002306b <__udivdi3+0xdb>
c002307c:	8d 46 ff             	lea    eax,[esi-0x1]
c002307f:	31 db                	xor    ebx,ebx
c0023081:	e9 31 ff ff ff       	jmp    c0022fb7 <__udivdi3+0x27>
c0023086:	66 90                	xchg   ax,ax
c0023088:	31 c0                	xor    eax,eax
c002308a:	e9 28 ff ff ff       	jmp    c0022fb7 <__udivdi3+0x27>
c002308f:	90                   	nop

c0023090 <__umoddi3>:
c0023090:	55                   	push   ebp
c0023091:	57                   	push   edi
c0023092:	56                   	push   esi
c0023093:	53                   	push   ebx
c0023094:	83 ec 1c             	sub    esp,0x1c
c0023097:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002309b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002309f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00230a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230a7:	89 da                	mov    edx,ebx
c00230a9:	85 c0                	test   eax,eax
c00230ab:	75 37                	jne    c00230e4 <__umoddi3+0x54>
c00230ad:	39 df                	cmp    edi,ebx
c00230af:	76 13                	jbe    c00230c4 <__umoddi3+0x34>
c00230b1:	89 f0                	mov    eax,esi
c00230b3:	f7 f7                	div    edi
c00230b5:	89 d0                	mov    eax,edx
c00230b7:	31 d2                	xor    edx,edx
c00230b9:	83 c4 1c             	add    esp,0x1c
c00230bc:	5b                   	pop    ebx
c00230bd:	5e                   	pop    esi
c00230be:	5f                   	pop    edi
c00230bf:	5d                   	pop    ebp
c00230c0:	c3                   	ret    
c00230c1:	8d 76 00             	lea    esi,[esi+0x0]
c00230c4:	89 fd                	mov    ebp,edi
c00230c6:	85 ff                	test   edi,edi
c00230c8:	75 0b                	jne    c00230d5 <__umoddi3+0x45>
c00230ca:	b8 01 00 00 00       	mov    eax,0x1
c00230cf:	31 d2                	xor    edx,edx
c00230d1:	f7 f7                	div    edi
c00230d3:	89 c5                	mov    ebp,eax
c00230d5:	89 d8                	mov    eax,ebx
c00230d7:	31 d2                	xor    edx,edx
c00230d9:	f7 f5                	div    ebp
c00230db:	89 f0                	mov    eax,esi
c00230dd:	f7 f5                	div    ebp
c00230df:	89 d0                	mov    eax,edx
c00230e1:	eb d4                	jmp    c00230b7 <__umoddi3+0x27>
c00230e3:	90                   	nop
c00230e4:	89 f1                	mov    ecx,esi
c00230e6:	39 d8                	cmp    eax,ebx
c00230e8:	76 0a                	jbe    c00230f4 <__umoddi3+0x64>
c00230ea:	89 f0                	mov    eax,esi
c00230ec:	83 c4 1c             	add    esp,0x1c
c00230ef:	5b                   	pop    ebx
c00230f0:	5e                   	pop    esi
c00230f1:	5f                   	pop    edi
c00230f2:	5d                   	pop    ebp
c00230f3:	c3                   	ret    
c00230f4:	0f bd e8             	bsr    ebp,eax
c00230f7:	83 f5 1f             	xor    ebp,0x1f
c00230fa:	75 1c                	jne    c0023118 <__umoddi3+0x88>
c00230fc:	39 d8                	cmp    eax,ebx
c00230fe:	72 04                	jb     c0023104 <__umoddi3+0x74>
c0023100:	39 f7                	cmp    edi,esi
c0023102:	77 08                	ja     c002310c <__umoddi3+0x7c>
c0023104:	89 da                	mov    edx,ebx
c0023106:	29 fe                	sub    esi,edi
c0023108:	19 c2                	sbb    edx,eax
c002310a:	89 f1                	mov    ecx,esi
c002310c:	89 c8                	mov    eax,ecx
c002310e:	83 c4 1c             	add    esp,0x1c
c0023111:	5b                   	pop    ebx
c0023112:	5e                   	pop    esi
c0023113:	5f                   	pop    edi
c0023114:	5d                   	pop    ebp
c0023115:	c3                   	ret    
c0023116:	66 90                	xchg   ax,ax
c0023118:	ba 20 00 00 00       	mov    edx,0x20
c002311d:	29 ea                	sub    edx,ebp
c002311f:	89 e9                	mov    ecx,ebp
c0023121:	d3 e0                	shl    eax,cl
c0023123:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023127:	89 f8                	mov    eax,edi
c0023129:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002312d:	88 d1                	mov    cl,dl
c002312f:	d3 e8                	shr    eax,cl
c0023131:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023135:	09 c1                	or     ecx,eax
c0023137:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002313b:	89 e9                	mov    ecx,ebp
c002313d:	d3 e7                	shl    edi,cl
c002313f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023143:	89 d8                	mov    eax,ebx
c0023145:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023149:	88 d1                	mov    cl,dl
c002314b:	d3 e8                	shr    eax,cl
c002314d:	89 c7                	mov    edi,eax
c002314f:	89 e9                	mov    ecx,ebp
c0023151:	d3 e3                	shl    ebx,cl
c0023153:	89 f0                	mov    eax,esi
c0023155:	88 d1                	mov    cl,dl
c0023157:	d3 e8                	shr    eax,cl
c0023159:	09 d8                	or     eax,ebx
c002315b:	89 e9                	mov    ecx,ebp
c002315d:	d3 e6                	shl    esi,cl
c002315f:	89 f3                	mov    ebx,esi
c0023161:	89 fa                	mov    edx,edi
c0023163:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023167:	89 d1                	mov    ecx,edx
c0023169:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002316d:	89 c6                	mov    esi,eax
c002316f:	89 d7                	mov    edi,edx
c0023171:	39 d1                	cmp    ecx,edx
c0023173:	72 27                	jb     c002319c <__umoddi3+0x10c>
c0023175:	74 21                	je     c0023198 <__umoddi3+0x108>
c0023177:	89 ca                	mov    edx,ecx
c0023179:	29 f3                	sub    ebx,esi
c002317b:	19 fa                	sbb    edx,edi
c002317d:	89 d0                	mov    eax,edx
c002317f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0023183:	d3 e0                	shl    eax,cl
c0023185:	89 e9                	mov    ecx,ebp
c0023187:	d3 eb                	shr    ebx,cl
c0023189:	09 d8                	or     eax,ebx
c002318b:	d3 ea                	shr    edx,cl
c002318d:	83 c4 1c             	add    esp,0x1c
c0023190:	5b                   	pop    ebx
c0023191:	5e                   	pop    esi
c0023192:	5f                   	pop    edi
c0023193:	5d                   	pop    ebp
c0023194:	c3                   	ret    
c0023195:	8d 76 00             	lea    esi,[esi+0x0]
c0023198:	39 c3                	cmp    ebx,eax
c002319a:	73 db                	jae    c0023177 <__umoddi3+0xe7>
c002319c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00231a0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00231a4:	89 d7                	mov    edi,edx
c00231a6:	89 c6                	mov    esi,eax
c00231a8:	eb cd                	jmp    c0023177 <__umoddi3+0xe7>

Disassembly of section .init:

c00231aa <_init>:
c00231aa:	55                   	push   ebp
c00231ab:	89 e5                	mov    ebp,esp
c00231ad:	e8 66 cf fd ff       	call   c0000118 <frame_dummy>
c00231b2:	e8 e5 fa ff ff       	call   c0022c9c <__do_global_ctors_aux>
c00231b7:	5d                   	pop    ebp
c00231b8:	c3                   	ret    

Disassembly of section .fini:

c00231b9 <_fini>:
c00231b9:	55                   	push   ebp
c00231ba:	89 e5                	mov    ebp,esp
c00231bc:	e8 e7 ce fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00231c1:	5d                   	pop    ebp
c00231c2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00231c4 <Computer::~Computer()>:
c00231c4:	83 ec 0c             	sub    esp,0xc
c00231c7:	ba 40 49 02 c0       	mov    edx,0xc0024940
c00231cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231d0:	89 10                	mov    DWORD PTR [eax],edx
c00231d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231d6:	83 ec 0c             	sub    esp,0xc
c00231d9:	50                   	push   eax
c00231da:	e8 35 b3 fe ff       	call   c000e514 <Device::~Device()>
c00231df:	83 c4 10             	add    esp,0x10
c00231e2:	90                   	nop
c00231e3:	83 c4 0c             	add    esp,0xc
c00231e6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00231e8 <Computer::~Computer()>:
c00231e8:	83 ec 0c             	sub    esp,0xc
c00231eb:	83 ec 0c             	sub    esp,0xc
c00231ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231f2:	e8 cd ff ff ff       	call   c00231c4 <Computer::~Computer()>
c00231f7:	83 c4 10             	add    esp,0x10
c00231fa:	83 ec 08             	sub    esp,0x8
c00231fd:	68 ec 01 00 00       	push   0x1ec
c0023202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023206:	e8 e7 9d fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c002320b:	83 c4 10             	add    esp,0x10
c002320e:	83 c4 0c             	add    esp,0xc
c0023211:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0023212 <idleCommon()>:
c0023212:	83 ec 0c             	sub    esp,0xc
c0023215:	fa                   	cli    
c0023216:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c002321c:	e8 db 5c ff ff       	call   c0018efc <schedule()>
c0023221:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0023226:	48                   	dec    eax
c0023227:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c002322c:	75 01                	jne    c002322f <idleCommon()+0x1d>
c002322e:	fb                   	sti    
c002322f:	83 c4 0c             	add    esp,0xc
c0023232:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0023234 <LinkedList<UnixFile>::~LinkedList()>:
c0023234:	90                   	nop
c0023235:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0023236 <LinkedList<UnixFile>::LinkedList()>:
c0023236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002323a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023244:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002324b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002324f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002325a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023264:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002326b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002326f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023276:	90                   	nop
c0023277:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0023278 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0023278:	83 ec 0c             	sub    esp,0xc
c002327b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023280:	75 10                	jne    c0023292 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0023282:	83 ec 0c             	sub    esp,0xc
c0023285:	68 10 4d 02 c0       	push   0xc0024d10
c002328a:	e8 26 1f ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c002328f:	83 c4 10             	add    esp,0x10
c0023292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023296:	8b 00                	mov    eax,DWORD PTR [eax]
c0023298:	85 c0                	test   eax,eax
c002329a:	74 34                	je     c00232d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002329c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232a3:	85 c0                	test   eax,eax
c00232a5:	74 29                	je     c00232d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00232a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00232b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00232b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00232bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00232c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00232ce:	eb 65                	jmp    c0023335 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00232d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00232d6:	85 c0                	test   eax,eax
c00232d8:	75 4b                	jne    c0023325 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00232da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232e1:	85 c0                	test   eax,eax
c00232e3:	75 40                	jne    c0023325 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00232e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00232ed:	89 10                	mov    DWORD PTR [eax],edx
c00232ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00232f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00232fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023301:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002330c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002330f:	85 c0                	test   eax,eax
c0023311:	74 22                	je     c0023335 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023313:	83 ec 0c             	sub    esp,0xc
c0023316:	68 32 4d 02 c0       	push   0xc0024d32
c002331b:	e8 95 1e ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0023320:	83 c4 10             	add    esp,0x10
c0023323:	eb 10                	jmp    c0023335 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023325:	83 ec 0c             	sub    esp,0xc
c0023328:	68 3c 4d 02 c0       	push   0xc0024d3c
c002332d:	e8 83 1e ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0023332:	83 c4 10             	add    esp,0x10
c0023335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023339:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002333c:	8d 50 01             	lea    edx,[eax+0x1]
c002333f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023343:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023346:	90                   	nop
c0023347:	83 c4 0c             	add    esp,0xc
c002334a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002334c <LinkedList<UnixFile>::getFirstElement()>:
c002334c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023350:	8b 00                	mov    eax,DWORD PTR [eax]
c0023352:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0023354 <LinkedList<UnixFile>::removeFirst()>:
c0023354:	83 ec 0c             	sub    esp,0xc
c0023357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002335b:	8b 00                	mov    eax,DWORD PTR [eax]
c002335d:	85 c0                	test   eax,eax
c002335f:	75 12                	jne    c0023373 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0023361:	83 ec 0c             	sub    esp,0xc
c0023364:	68 48 4d 02 c0       	push   0xc0024d48
c0023369:	e8 47 1e ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c002336e:	83 c4 10             	add    esp,0x10
c0023371:	eb 7e                	jmp    c00233f1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0023373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023377:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002337a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002337d:	85 c0                	test   eax,eax
c002337f:	74 10                	je     c0023391 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0023381:	83 ec 0c             	sub    esp,0xc
c0023384:	68 93 4d 02 c0       	push   0xc0024d93
c0023389:	e8 27 1e ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c002338e:	83 c4 10             	add    esp,0x10
c0023391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023395:	8b 00                	mov    eax,DWORD PTR [eax]
c0023397:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002339a:	85 c0                	test   eax,eax
c002339c:	75 33                	jne    c00233d1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002339e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00233a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00233b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233ba:	83 f8 01             	cmp    eax,0x1
c00233bd:	74 21                	je     c00233e0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00233bf:	83 ec 0c             	sub    esp,0xc
c00233c2:	68 6c 4d 02 c0       	push   0xc0024d6c
c00233c7:	e8 e9 1d ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00233cc:	83 c4 10             	add    esp,0x10
c00233cf:	eb 0f                	jmp    c00233e0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00233d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00233d7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00233da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233de:	89 10                	mov    DWORD PTR [eax],edx
c00233e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233e7:	8d 50 ff             	lea    edx,[eax-0x1]
c00233ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00233f1:	83 c4 0c             	add    esp,0xc
c00233f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00233f6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00233f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00233fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233fd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00233fe <DriverlessDevice::~DriverlessDevice()>:
c00233fe:	ba bc 55 02 c0       	mov    edx,0xc00255bc
c0023403:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023407:	89 10                	mov    DWORD PTR [eax],edx
c0023409:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002340d:	50                   	push   eax
c002340e:	e8 01 b1 fe ff       	call   c000e514 <Device::~Device()>
c0023413:	83 c4 04             	add    esp,0x4
c0023416:	90                   	nop
c0023417:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0023418 <DriverlessDevice::~DriverlessDevice()>:
c0023418:	83 ec 0c             	sub    esp,0xc
c002341b:	83 ec 0c             	sub    esp,0xc
c002341e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023422:	e8 d7 ff ff ff       	call   c00233fe <DriverlessDevice::~DriverlessDevice()>
c0023427:	83 c4 10             	add    esp,0x10
c002342a:	83 ec 08             	sub    esp,0x8
c002342d:	68 58 01 00 00       	push   0x158
c0023432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023436:	e8 b7 9b fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c002343b:	83 c4 10             	add    esp,0x10
c002343e:	83 c4 0c             	add    esp,0xc
c0023441:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0023442 <LinkedList<Device>::addElement(Device*)>:
c0023442:	83 ec 0c             	sub    esp,0xc
c0023445:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002344a:	75 10                	jne    c002345c <LinkedList<Device>::addElement(Device*)+0x1a>
c002344c:	83 ec 0c             	sub    esp,0xc
c002344f:	68 10 4d 02 c0       	push   0xc0024d10
c0023454:	e8 5c 1d ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0023459:	83 c4 10             	add    esp,0x10
c002345c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023460:	8b 00                	mov    eax,DWORD PTR [eax]
c0023462:	85 c0                	test   eax,eax
c0023464:	74 3a                	je     c00234a0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0023466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002346a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002346d:	85 c0                	test   eax,eax
c002346f:	74 2f                	je     c00234a0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0023471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023475:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023478:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002347c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0023482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023486:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002348a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002348d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023491:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023494:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002349e:	eb 68                	jmp    c0023508 <LinkedList<Device>::addElement(Device*)+0xc6>
c00234a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00234a6:	85 c0                	test   eax,eax
c00234a8:	75 4e                	jne    c00234f8 <LinkedList<Device>::addElement(Device*)+0xb6>
c00234aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234b1:	85 c0                	test   eax,eax
c00234b3:	75 43                	jne    c00234f8 <LinkedList<Device>::addElement(Device*)+0xb6>
c00234b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234bd:	89 10                	mov    DWORD PTR [eax],edx
c00234bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00234ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234d1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00234db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234e2:	85 c0                	test   eax,eax
c00234e4:	74 22                	je     c0023508 <LinkedList<Device>::addElement(Device*)+0xc6>
c00234e6:	83 ec 0c             	sub    esp,0xc
c00234e9:	68 32 4d 02 c0       	push   0xc0024d32
c00234ee:	e8 c2 1c ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00234f3:	83 c4 10             	add    esp,0x10
c00234f6:	eb 10                	jmp    c0023508 <LinkedList<Device>::addElement(Device*)+0xc6>
c00234f8:	83 ec 0c             	sub    esp,0xc
c00234fb:	68 3c 4d 02 c0       	push   0xc0024d3c
c0023500:	e8 b0 1c ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0023505:	83 c4 10             	add    esp,0x10
c0023508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002350c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002350f:	8d 50 01             	lea    edx,[eax+0x1]
c0023512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023516:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023519:	90                   	nop
c002351a:	83 c4 0c             	add    esp,0xc
c002351d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002351e <LinkedList<Device>::LinkedList()>:
c002351e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023522:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002352c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023533:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023537:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002353e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023542:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002354c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023553:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023557:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002355e:	90                   	nop
c002355f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0023560 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0023560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023564:	8b 00                	mov    eax,DWORD PTR [eax]
c0023566:	85 c0                	test   eax,eax
c0023568:	75 0e                	jne    c0023578 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002356a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002356e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023571:	85 c0                	test   eax,eax
c0023573:	75 03                	jne    c0023578 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0023575:	b0 01                	mov    al,0x1
c0023577:	c3                   	ret    
c0023578:	b0 00                	mov    al,0x0
c002357a:	90                   	nop
c002357b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002357c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002357c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023580:	8b 00                	mov    eax,DWORD PTR [eax]
c0023582:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0023584 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0023584:	83 ec 0c             	sub    esp,0xc
c0023587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002358b:	8b 00                	mov    eax,DWORD PTR [eax]
c002358d:	85 c0                	test   eax,eax
c002358f:	75 17                	jne    c00235a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0023591:	83 ec 0c             	sub    esp,0xc
c0023594:	68 48 4d 02 c0       	push   0xc0024d48
c0023599:	e8 17 1c ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c002359e:	83 c4 10             	add    esp,0x10
c00235a1:	e9 92 00 00 00       	jmp    c0023638 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00235a6:	66 90                	xchg   ax,ax
c00235a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00235af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00235b2:	85 c0                	test   eax,eax
c00235b4:	0f 95 c0             	setne  al
c00235b7:	84 c0                	test   al,al
c00235b9:	74 11                	je     c00235cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00235bb:	83 ec 0c             	sub    esp,0xc
c00235be:	68 93 4d 02 c0       	push   0xc0024d93
c00235c3:	e8 ed 1b ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00235c8:	83 c4 10             	add    esp,0x10
c00235cb:	90                   	nop
c00235cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00235d2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00235d5:	85 c0                	test   eax,eax
c00235d7:	0f 94 c0             	sete   al
c00235da:	84 c0                	test   al,al
c00235dc:	74 36                	je     c0023614 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c00235de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00235e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00235f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00235fa:	83 f8 01             	cmp    eax,0x1
c00235fd:	74 25                	je     c0023624 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00235ff:	83 ec 0c             	sub    esp,0xc
c0023602:	68 6c 4d 02 c0       	push   0xc0024d6c
c0023607:	e8 a9 1b ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c002360c:	83 c4 10             	add    esp,0x10
c002360f:	eb 13                	jmp    c0023624 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0023611:	8d 76 00             	lea    esi,[esi+0x0]
c0023614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023618:	8b 00                	mov    eax,DWORD PTR [eax]
c002361a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002361d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023621:	89 10                	mov    DWORD PTR [eax],edx
c0023623:	90                   	nop
c0023624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023628:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002362b:	8d 50 ff             	lea    edx,[eax-0x1]
c002362e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023632:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023635:	8d 76 00             	lea    esi,[esi+0x0]
c0023638:	83 c4 0c             	add    esp,0xc
c002363b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002363c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002363c:	83 ec 0c             	sub    esp,0xc
c002363f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023644:	75 12                	jne    c0023658 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0023646:	83 ec 0c             	sub    esp,0xc
c0023649:	68 10 4d 02 c0       	push   0xc0024d10
c002364e:	e8 62 1b ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0023653:	83 c4 10             	add    esp,0x10
c0023656:	66 90                	xchg   ax,ax
c0023658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002365c:	8b 00                	mov    eax,DWORD PTR [eax]
c002365e:	85 c0                	test   eax,eax
c0023660:	74 36                	je     c0023698 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0023662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023666:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023669:	85 c0                	test   eax,eax
c002366b:	74 2b                	je     c0023698 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002366d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023671:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023674:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023678:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002367b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002367f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023683:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002368a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002368d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023694:	eb 6a                	jmp    c0023700 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0023696:	66 90                	xchg   ax,ax
c0023698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002369c:	8b 00                	mov    eax,DWORD PTR [eax]
c002369e:	85 c0                	test   eax,eax
c00236a0:	75 4e                	jne    c00236f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00236a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236a9:	85 c0                	test   eax,eax
c00236ab:	75 43                	jne    c00236f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00236ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00236b5:	89 10                	mov    DWORD PTR [eax],edx
c00236b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00236bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00236c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00236d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00236d7:	85 c0                	test   eax,eax
c00236d9:	74 25                	je     c0023700 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00236db:	83 ec 0c             	sub    esp,0xc
c00236de:	68 32 4d 02 c0       	push   0xc0024d32
c00236e3:	e8 cd 1a ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00236e8:	83 c4 10             	add    esp,0x10
c00236eb:	eb 13                	jmp    c0023700 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00236ed:	8d 76 00             	lea    esi,[esi+0x0]
c00236f0:	83 ec 0c             	sub    esp,0xc
c00236f3:	68 3c 4d 02 c0       	push   0xc0024d3c
c00236f8:	e8 b8 1a ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00236fd:	83 c4 10             	add    esp,0x10
c0023700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023704:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023707:	8d 50 01             	lea    edx,[eax+0x1]
c002370a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002370e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023711:	90                   	nop
c0023712:	83 c4 0c             	add    esp,0xc
c0023715:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0023718 <ACPI::~ACPI()>:
c0023718:	83 ec 0c             	sub    esp,0xc
c002371b:	ba e4 60 02 c0       	mov    edx,0xc00260e4
c0023720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023724:	89 10                	mov    DWORD PTR [eax],edx
c0023726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002372a:	83 ec 0c             	sub    esp,0xc
c002372d:	50                   	push   eax
c002372e:	e8 e1 ad fe ff       	call   c000e514 <Device::~Device()>
c0023733:	83 c4 10             	add    esp,0x10
c0023736:	90                   	nop
c0023737:	83 c4 0c             	add    esp,0xc
c002373a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002373c <ACPI::~ACPI()>:
c002373c:	83 ec 0c             	sub    esp,0xc
c002373f:	83 ec 0c             	sub    esp,0xc
c0023742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023746:	e8 cd ff ff ff       	call   c0023718 <ACPI::~ACPI()>
c002374b:	83 c4 10             	add    esp,0x10
c002374e:	83 ec 08             	sub    esp,0x8
c0023751:	68 64 12 00 00       	push   0x1264
c0023756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002375a:	e8 93 98 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c002375f:	83 c4 10             	add    esp,0x10
c0023762:	83 c4 0c             	add    esp,0xc
c0023765:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0023768 <LinkedList<Device>::~LinkedList()>:
c0023768:	90                   	nop
c0023769:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002376c <LinkedList<Device>::isEmpty()>:
c002376c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023770:	8b 00                	mov    eax,DWORD PTR [eax]
c0023772:	85 c0                	test   eax,eax
c0023774:	75 0e                	jne    c0023784 <LinkedList<Device>::isEmpty()+0x18>
c0023776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002377a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002377d:	85 c0                	test   eax,eax
c002377f:	75 03                	jne    c0023784 <LinkedList<Device>::isEmpty()+0x18>
c0023781:	b0 01                	mov    al,0x1
c0023783:	c3                   	ret    
c0023784:	b0 00                	mov    al,0x0
c0023786:	90                   	nop
c0023787:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0023788 <LinkedList<Device>::getFirstElement()>:
c0023788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002378c:	8b 00                	mov    eax,DWORD PTR [eax]
c002378e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0023790 <LinkedList<Device>::removeFirst()>:
c0023790:	83 ec 0c             	sub    esp,0xc
c0023793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023797:	8b 00                	mov    eax,DWORD PTR [eax]
c0023799:	85 c0                	test   eax,eax
c002379b:	75 17                	jne    c00237b4 <LinkedList<Device>::removeFirst()+0x24>
c002379d:	83 ec 0c             	sub    esp,0xc
c00237a0:	68 48 4d 02 c0       	push   0xc0024d48
c00237a5:	e8 0b 1a ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00237aa:	83 c4 10             	add    esp,0x10
c00237ad:	e9 92 00 00 00       	jmp    c0023844 <LinkedList<Device>::removeFirst()+0xb4>
c00237b2:	66 90                	xchg   ax,ax
c00237b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00237bb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00237c1:	85 c0                	test   eax,eax
c00237c3:	74 13                	je     c00237d8 <LinkedList<Device>::removeFirst()+0x48>
c00237c5:	83 ec 0c             	sub    esp,0xc
c00237c8:	68 93 4d 02 c0       	push   0xc0024d93
c00237cd:	e8 e3 19 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c00237d2:	83 c4 10             	add    esp,0x10
c00237d5:	8d 76 00             	lea    esi,[esi+0x0]
c00237d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00237de:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00237e4:	85 c0                	test   eax,eax
c00237e6:	75 34                	jne    c002381c <LinkedList<Device>::removeFirst()+0x8c>
c00237e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00237f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00237fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023801:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023804:	83 f8 01             	cmp    eax,0x1
c0023807:	74 27                	je     c0023830 <LinkedList<Device>::removeFirst()+0xa0>
c0023809:	83 ec 0c             	sub    esp,0xc
c002380c:	68 6c 4d 02 c0       	push   0xc0024d6c
c0023811:	e8 9f 19 ff ff       	call   c00151b5 <Krnl::panic(char const*)>
c0023816:	83 c4 10             	add    esp,0x10
c0023819:	eb 15                	jmp    c0023830 <LinkedList<Device>::removeFirst()+0xa0>
c002381b:	90                   	nop
c002381c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023820:	8b 00                	mov    eax,DWORD PTR [eax]
c0023822:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0023828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002382c:	89 10                	mov    DWORD PTR [eax],edx
c002382e:	66 90                	xchg   ax,ax
c0023830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023834:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023837:	8d 50 ff             	lea    edx,[eax-0x1]
c002383a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002383e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023841:	8d 76 00             	lea    esi,[esi+0x0]
c0023844:	83 c4 0c             	add    esp,0xc
c0023847:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0023848 <CPU::~CPU()>:
c0023848:	83 ec 0c             	sub    esp,0xc
c002384b:	ba 74 66 02 c0       	mov    edx,0xc0026674
c0023850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023854:	89 10                	mov    DWORD PTR [eax],edx
c0023856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002385a:	83 ec 0c             	sub    esp,0xc
c002385d:	50                   	push   eax
c002385e:	e8 b1 ac fe ff       	call   c000e514 <Device::~Device()>
c0023863:	83 c4 10             	add    esp,0x10
c0023866:	90                   	nop
c0023867:	83 c4 0c             	add    esp,0xc
c002386a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002386c <CPU::~CPU()>:
c002386c:	83 ec 0c             	sub    esp,0xc
c002386f:	83 ec 0c             	sub    esp,0xc
c0023872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023876:	e8 cd ff ff ff       	call   c0023848 <CPU::~CPU()>
c002387b:	83 c4 10             	add    esp,0x10
c002387e:	83 ec 08             	sub    esp,0x8
c0023881:	68 98 11 00 00       	push   0x1198
c0023886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002388a:	e8 63 97 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c002388f:	83 c4 10             	add    esp,0x10
c0023892:	83 c4 0c             	add    esp,0xc
c0023895:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0023898 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0023898:	90                   	nop
c0023899:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002389c <ThreadControlBlock::ThreadControlBlock()>:
c002389c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238a0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00238a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238ab:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00238b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238b6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00238bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238c1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00238c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238cc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00238d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238d7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00238db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238df:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00238e3:	90                   	nop
c00238e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00238e8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00238e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00238f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00238fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023901:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002390c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023916:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002391d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023921:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023928:	90                   	nop
c0023929:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002392c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002392c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023930:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023933:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023934 <Vm::_FPUState::_FPUState()>:
c0023934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023938:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002393f:	90                   	nop
c0023940:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023942 <PCI::~PCI()>:
c0023942:	83 ec 0c             	sub    esp,0xc
c0023945:	ba 90 74 02 c0       	mov    edx,0xc0027490
c002394a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002394e:	89 10                	mov    DWORD PTR [eax],edx
c0023950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023954:	83 ec 0c             	sub    esp,0xc
c0023957:	50                   	push   eax
c0023958:	e8 87 a5 fe ff       	call   c000dee4 <Bus::~Bus()>
c002395d:	83 c4 10             	add    esp,0x10
c0023960:	90                   	nop
c0023961:	83 c4 0c             	add    esp,0xc
c0023964:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0023966 <PCI::~PCI()>:
c0023966:	83 ec 0c             	sub    esp,0xc
c0023969:	83 ec 0c             	sub    esp,0xc
c002396c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023970:	e8 cd ff ff ff       	call   c0023942 <PCI::~PCI()>
c0023975:	83 c4 10             	add    esp,0x10
c0023978:	83 ec 08             	sub    esp,0x8
c002397b:	68 5c 01 00 00       	push   0x15c
c0023980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023984:	e8 69 96 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023989:	83 c4 10             	add    esp,0x10
c002398c:	83 c4 0c             	add    esp,0xc
c002398f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0023990 <IDE::~IDE()>:
c0023990:	83 ec 0c             	sub    esp,0xc
c0023993:	ba 60 75 02 c0       	mov    edx,0xc0027560
c0023998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002399c:	89 10                	mov    DWORD PTR [eax],edx
c002399e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239a2:	83 ec 0c             	sub    esp,0xc
c00239a5:	50                   	push   eax
c00239a6:	e8 81 b0 fe ff       	call   c000ea2c <HardDiskController::~HardDiskController()>
c00239ab:	83 c4 10             	add    esp,0x10
c00239ae:	90                   	nop
c00239af:	83 c4 0c             	add    esp,0xc
c00239b2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00239b4 <IDE::~IDE()>:
c00239b4:	83 ec 0c             	sub    esp,0xc
c00239b7:	83 ec 0c             	sub    esp,0xc
c00239ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239be:	e8 cd ff ff ff       	call   c0023990 <IDE::~IDE()>
c00239c3:	83 c4 10             	add    esp,0x10
c00239c6:	83 ec 08             	sub    esp,0x8
c00239c9:	68 70 02 00 00       	push   0x270
c00239ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239d2:	e8 1b 96 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c00239d7:	83 c4 10             	add    esp,0x10
c00239da:	83 c4 0c             	add    esp,0xc
c00239dd:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00239de <SATABus::~SATABus()>:
c00239de:	83 ec 0c             	sub    esp,0xc
c00239e1:	ba 2c 76 02 c0       	mov    edx,0xc002762c
c00239e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239ea:	89 10                	mov    DWORD PTR [eax],edx
c00239ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239f0:	83 ec 0c             	sub    esp,0xc
c00239f3:	50                   	push   eax
c00239f4:	e8 33 b0 fe ff       	call   c000ea2c <HardDiskController::~HardDiskController()>
c00239f9:	83 c4 10             	add    esp,0x10
c00239fc:	90                   	nop
c00239fd:	83 c4 0c             	add    esp,0xc
c0023a00:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023a02 <SATABus::~SATABus()>:
c0023a02:	83 ec 0c             	sub    esp,0xc
c0023a05:	83 ec 0c             	sub    esp,0xc
c0023a08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a0c:	e8 cd ff ff ff       	call   c00239de <SATABus::~SATABus()>
c0023a11:	83 c4 10             	add    esp,0x10
c0023a14:	83 ec 08             	sub    esp,0x8
c0023a17:	68 64 01 00 00       	push   0x164
c0023a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a20:	e8 cd 95 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023a25:	83 c4 10             	add    esp,0x10
c0023a28:	83 c4 0c             	add    esp,0xc
c0023a2b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023a2c <ATA::~ATA()>:
c0023a2c:	83 ec 0c             	sub    esp,0xc
c0023a2f:	ba a4 76 02 c0       	mov    edx,0xc00276a4
c0023a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a38:	89 10                	mov    DWORD PTR [eax],edx
c0023a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a3e:	83 ec 0c             	sub    esp,0xc
c0023a41:	50                   	push   eax
c0023a42:	e8 c7 b0 fe ff       	call   c000eb0e <PhysicalDisk::~PhysicalDisk()>
c0023a47:	83 c4 10             	add    esp,0x10
c0023a4a:	90                   	nop
c0023a4b:	83 c4 0c             	add    esp,0xc
c0023a4e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023a50 <ATA::~ATA()>:
c0023a50:	83 ec 0c             	sub    esp,0xc
c0023a53:	83 ec 0c             	sub    esp,0xc
c0023a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a5a:	e8 cd ff ff ff       	call   c0023a2c <ATA::~ATA()>
c0023a5f:	83 c4 10             	add    esp,0x10
c0023a62:	83 ec 08             	sub    esp,0x8
c0023a65:	68 7c 01 00 00       	push   0x17c
c0023a6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a6e:	e8 7f 95 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023a73:	83 c4 10             	add    esp,0x10
c0023a76:	83 c4 0c             	add    esp,0xc
c0023a79:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0023a7a <ATAPI::~ATAPI()>:
c0023a7a:	83 ec 0c             	sub    esp,0xc
c0023a7d:	ba 1c 77 02 c0       	mov    edx,0xc002771c
c0023a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a86:	89 10                	mov    DWORD PTR [eax],edx
c0023a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a8c:	83 ec 0c             	sub    esp,0xc
c0023a8f:	50                   	push   eax
c0023a90:	e8 79 b0 fe ff       	call   c000eb0e <PhysicalDisk::~PhysicalDisk()>
c0023a95:	83 c4 10             	add    esp,0x10
c0023a98:	90                   	nop
c0023a99:	83 c4 0c             	add    esp,0xc
c0023a9c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0023a9e <ATAPI::~ATAPI()>:
c0023a9e:	83 ec 0c             	sub    esp,0xc
c0023aa1:	83 ec 0c             	sub    esp,0xc
c0023aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023aa8:	e8 cd ff ff ff       	call   c0023a7a <ATAPI::~ATAPI()>
c0023aad:	83 c4 10             	add    esp,0x10
c0023ab0:	83 ec 08             	sub    esp,0x8
c0023ab3:	68 84 01 00 00       	push   0x184
c0023ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023abc:	e8 31 95 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023ac1:	83 c4 10             	add    esp,0x10
c0023ac4:	83 c4 0c             	add    esp,0xc
c0023ac7:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023ac8 <SATA::~SATA()>:
c0023ac8:	83 ec 0c             	sub    esp,0xc
c0023acb:	ba 58 79 02 c0       	mov    edx,0xc0027958
c0023ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ad4:	89 10                	mov    DWORD PTR [eax],edx
c0023ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ada:	83 ec 0c             	sub    esp,0xc
c0023add:	50                   	push   eax
c0023ade:	e8 2b b0 fe ff       	call   c000eb0e <PhysicalDisk::~PhysicalDisk()>
c0023ae3:	83 c4 10             	add    esp,0x10
c0023ae6:	90                   	nop
c0023ae7:	83 c4 0c             	add    esp,0xc
c0023aea:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023aec <SATA::~SATA()>:
c0023aec:	83 ec 0c             	sub    esp,0xc
c0023aef:	83 ec 0c             	sub    esp,0xc
c0023af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023af6:	e8 cd ff ff ff       	call   c0023ac8 <SATA::~SATA()>
c0023afb:	83 c4 10             	add    esp,0x10
c0023afe:	83 ec 08             	sub    esp,0x8
c0023b01:	68 7c 01 00 00       	push   0x17c
c0023b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b0a:	e8 e3 94 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023b0f:	83 c4 10             	add    esp,0x10
c0023b12:	83 c4 0c             	add    esp,0xc
c0023b15:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0023b16 <SATAPI::~SATAPI()>:
c0023b16:	83 ec 0c             	sub    esp,0xc
c0023b19:	ba c4 7a 02 c0       	mov    edx,0xc0027ac4
c0023b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b22:	89 10                	mov    DWORD PTR [eax],edx
c0023b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b28:	83 ec 0c             	sub    esp,0xc
c0023b2b:	50                   	push   eax
c0023b2c:	e8 dd af fe ff       	call   c000eb0e <PhysicalDisk::~PhysicalDisk()>
c0023b31:	83 c4 10             	add    esp,0x10
c0023b34:	90                   	nop
c0023b35:	83 c4 0c             	add    esp,0xc
c0023b38:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0023b3a <SATAPI::~SATAPI()>:
c0023b3a:	83 ec 0c             	sub    esp,0xc
c0023b3d:	83 ec 0c             	sub    esp,0xc
c0023b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b44:	e8 cd ff ff ff       	call   c0023b16 <SATAPI::~SATAPI()>
c0023b49:	83 c4 10             	add    esp,0x10
c0023b4c:	83 ec 08             	sub    esp,0x8
c0023b4f:	68 84 01 00 00       	push   0x184
c0023b54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b58:	e8 95 94 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023b5d:	83 c4 10             	add    esp,0x10
c0023b60:	83 c4 0c             	add    esp,0xc
c0023b63:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023b64 <AVX::~AVX()>:
c0023b64:	83 ec 0c             	sub    esp,0xc
c0023b67:	ba 04 7b 02 c0       	mov    edx,0xc0027b04
c0023b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b70:	89 10                	mov    DWORD PTR [eax],edx
c0023b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b76:	83 ec 0c             	sub    esp,0xc
c0023b79:	50                   	push   eax
c0023b7a:	e8 15 b0 fe ff       	call   c000eb94 <FPU::~FPU()>
c0023b7f:	83 c4 10             	add    esp,0x10
c0023b82:	90                   	nop
c0023b83:	83 c4 0c             	add    esp,0xc
c0023b86:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0023b88 <AVX::~AVX()>:
c0023b88:	83 ec 0c             	sub    esp,0xc
c0023b8b:	83 ec 0c             	sub    esp,0xc
c0023b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b92:	e8 cd ff ff ff       	call   c0023b64 <AVX::~AVX()>
c0023b97:	83 c4 10             	add    esp,0x10
c0023b9a:	83 ec 08             	sub    esp,0x8
c0023b9d:	68 58 01 00 00       	push   0x158
c0023ba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ba6:	e8 47 94 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023bab:	83 c4 10             	add    esp,0x10
c0023bae:	83 c4 0c             	add    esp,0xc
c0023bb1:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023bb4 <MMX::~MMX()>:
c0023bb4:	83 ec 0c             	sub    esp,0xc
c0023bb7:	ba 44 7b 02 c0       	mov    edx,0xc0027b44
c0023bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bc0:	89 10                	mov    DWORD PTR [eax],edx
c0023bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bc6:	83 ec 0c             	sub    esp,0xc
c0023bc9:	50                   	push   eax
c0023bca:	e8 c5 af fe ff       	call   c000eb94 <FPU::~FPU()>
c0023bcf:	83 c4 10             	add    esp,0x10
c0023bd2:	90                   	nop
c0023bd3:	83 c4 0c             	add    esp,0xc
c0023bd6:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0023bd8 <MMX::~MMX()>:
c0023bd8:	83 ec 0c             	sub    esp,0xc
c0023bdb:	83 ec 0c             	sub    esp,0xc
c0023bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023be2:	e8 cd ff ff ff       	call   c0023bb4 <MMX::~MMX()>
c0023be7:	83 c4 10             	add    esp,0x10
c0023bea:	83 ec 08             	sub    esp,0x8
c0023bed:	68 58 01 00 00       	push   0x158
c0023bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bf6:	e8 f7 93 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023bfb:	83 c4 10             	add    esp,0x10
c0023bfe:	83 c4 0c             	add    esp,0xc
c0023c01:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023c04 <SSE::~SSE()>:
c0023c04:	83 ec 0c             	sub    esp,0xc
c0023c07:	ba 84 7b 02 c0       	mov    edx,0xc0027b84
c0023c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c10:	89 10                	mov    DWORD PTR [eax],edx
c0023c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c16:	83 ec 0c             	sub    esp,0xc
c0023c19:	50                   	push   eax
c0023c1a:	e8 75 af fe ff       	call   c000eb94 <FPU::~FPU()>
c0023c1f:	83 c4 10             	add    esp,0x10
c0023c22:	90                   	nop
c0023c23:	83 c4 0c             	add    esp,0xc
c0023c26:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0023c28 <SSE::~SSE()>:
c0023c28:	83 ec 0c             	sub    esp,0xc
c0023c2b:	83 ec 0c             	sub    esp,0xc
c0023c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c32:	e8 cd ff ff ff       	call   c0023c04 <SSE::~SSE()>
c0023c37:	83 c4 10             	add    esp,0x10
c0023c3a:	83 ec 08             	sub    esp,0x8
c0023c3d:	68 58 01 00 00       	push   0x158
c0023c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c46:	e8 a7 93 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023c4b:	83 c4 10             	add    esp,0x10
c0023c4e:	83 c4 0c             	add    esp,0xc
c0023c51:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023c52 <x87::~x87()>:
c0023c52:	83 ec 0c             	sub    esp,0xc
c0023c55:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0023c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c5e:	89 10                	mov    DWORD PTR [eax],edx
c0023c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c64:	83 ec 0c             	sub    esp,0xc
c0023c67:	50                   	push   eax
c0023c68:	e8 27 af fe ff       	call   c000eb94 <FPU::~FPU()>
c0023c6d:	83 c4 10             	add    esp,0x10
c0023c70:	90                   	nop
c0023c71:	83 c4 0c             	add    esp,0xc
c0023c74:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0023c76 <x87::~x87()>:
c0023c76:	83 ec 0c             	sub    esp,0xc
c0023c79:	83 ec 0c             	sub    esp,0xc
c0023c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c80:	e8 cd ff ff ff       	call   c0023c52 <x87::~x87()>
c0023c85:	83 c4 10             	add    esp,0x10
c0023c88:	83 ec 08             	sub    esp,0x8
c0023c8b:	68 58 01 00 00       	push   0x158
c0023c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c94:	e8 59 93 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023c99:	83 c4 10             	add    esp,0x10
c0023c9c:	83 c4 0c             	add    esp,0xc
c0023c9f:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023ca0 <IOAPIC::~IOAPIC()>:
c0023ca0:	83 ec 0c             	sub    esp,0xc
c0023ca3:	ba 1c 7d 02 c0       	mov    edx,0xc0027d1c
c0023ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cac:	89 10                	mov    DWORD PTR [eax],edx
c0023cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cb2:	83 ec 0c             	sub    esp,0xc
c0023cb5:	50                   	push   eax
c0023cb6:	e8 59 a8 fe ff       	call   c000e514 <Device::~Device()>
c0023cbb:	83 c4 10             	add    esp,0x10
c0023cbe:	90                   	nop
c0023cbf:	83 c4 0c             	add    esp,0xc
c0023cc2:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023cc4 <IOAPIC::~IOAPIC()>:
c0023cc4:	83 ec 0c             	sub    esp,0xc
c0023cc7:	83 ec 0c             	sub    esp,0xc
c0023cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cce:	e8 cd ff ff ff       	call   c0023ca0 <IOAPIC::~IOAPIC()>
c0023cd3:	83 c4 10             	add    esp,0x10
c0023cd6:	83 ec 08             	sub    esp,0x8
c0023cd9:	68 68 01 00 00       	push   0x168
c0023cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ce2:	e8 0b 93 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023ce7:	83 c4 10             	add    esp,0x10
c0023cea:	83 c4 0c             	add    esp,0xc
c0023ced:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023cee <APIC::~APIC()>:
c0023cee:	83 ec 0c             	sub    esp,0xc
c0023cf1:	ba d4 7c 02 c0       	mov    edx,0xc0027cd4
c0023cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cfa:	89 10                	mov    DWORD PTR [eax],edx
c0023cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d00:	83 ec 0c             	sub    esp,0xc
c0023d03:	50                   	push   eax
c0023d04:	e8 77 b3 fe ff       	call   c000f080 <InterruptController::~InterruptController()>
c0023d09:	83 c4 10             	add    esp,0x10
c0023d0c:	90                   	nop
c0023d0d:	83 c4 0c             	add    esp,0xc
c0023d10:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023d12 <APIC::~APIC()>:
c0023d12:	83 ec 0c             	sub    esp,0xc
c0023d15:	83 ec 0c             	sub    esp,0xc
c0023d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d1c:	e8 cd ff ff ff       	call   c0023cee <APIC::~APIC()>
c0023d21:	83 c4 10             	add    esp,0x10
c0023d24:	83 ec 08             	sub    esp,0x8
c0023d27:	68 58 21 00 00       	push   0x2158
c0023d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d30:	e8 bd 92 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023d35:	83 c4 10             	add    esp,0x10
c0023d38:	83 c4 0c             	add    esp,0xc
c0023d3b:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023d3c <PIC::~PIC()>:
c0023d3c:	83 ec 0c             	sub    esp,0xc
c0023d3f:	ba 6c 7d 02 c0       	mov    edx,0xc0027d6c
c0023d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d48:	89 10                	mov    DWORD PTR [eax],edx
c0023d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d4e:	83 ec 0c             	sub    esp,0xc
c0023d51:	50                   	push   eax
c0023d52:	e8 29 b3 fe ff       	call   c000f080 <InterruptController::~InterruptController()>
c0023d57:	83 c4 10             	add    esp,0x10
c0023d5a:	90                   	nop
c0023d5b:	83 c4 0c             	add    esp,0xc
c0023d5e:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023d60 <PIC::~PIC()>:
c0023d60:	83 ec 0c             	sub    esp,0xc
c0023d63:	83 ec 0c             	sub    esp,0xc
c0023d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d6a:	e8 cd ff ff ff       	call   c0023d3c <PIC::~PIC()>
c0023d6f:	83 c4 10             	add    esp,0x10
c0023d72:	83 ec 08             	sub    esp,0x8
c0023d75:	68 58 21 00 00       	push   0x2158
c0023d7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d7e:	e8 6f 92 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023d83:	83 c4 10             	add    esp,0x10
c0023d86:	83 c4 0c             	add    esp,0xc
c0023d89:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023d8c <APICTimer::~APICTimer()>:
c0023d8c:	83 ec 0c             	sub    esp,0xc
c0023d8f:	ba c0 7d 02 c0       	mov    edx,0xc0027dc0
c0023d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d98:	89 10                	mov    DWORD PTR [eax],edx
c0023d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d9e:	83 ec 0c             	sub    esp,0xc
c0023da1:	50                   	push   eax
c0023da2:	e8 09 d2 fe ff       	call   c0010fb0 <Timer::~Timer()>
c0023da7:	83 c4 10             	add    esp,0x10
c0023daa:	90                   	nop
c0023dab:	83 c4 0c             	add    esp,0xc
c0023dae:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023db0 <APICTimer::~APICTimer()>:
c0023db0:	83 ec 0c             	sub    esp,0xc
c0023db3:	83 ec 0c             	sub    esp,0xc
c0023db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023dba:	e8 cd ff ff ff       	call   c0023d8c <APICTimer::~APICTimer()>
c0023dbf:	83 c4 10             	add    esp,0x10
c0023dc2:	83 ec 08             	sub    esp,0x8
c0023dc5:	68 60 01 00 00       	push   0x160
c0023dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023dce:	e8 1f 92 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023dd3:	83 c4 10             	add    esp,0x10
c0023dd6:	83 c4 0c             	add    esp,0xc
c0023dd9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023ddc <PIT::~PIT()>:
c0023ddc:	83 ec 0c             	sub    esp,0xc
c0023ddf:	ba 10 7e 02 c0       	mov    edx,0xc0027e10
c0023de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023de8:	89 10                	mov    DWORD PTR [eax],edx
c0023dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dee:	83 ec 0c             	sub    esp,0xc
c0023df1:	50                   	push   eax
c0023df2:	e8 b9 d1 fe ff       	call   c0010fb0 <Timer::~Timer()>
c0023df7:	83 c4 10             	add    esp,0x10
c0023dfa:	90                   	nop
c0023dfb:	83 c4 0c             	add    esp,0xc
c0023dfe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023e00 <PIT::~PIT()>:
c0023e00:	83 ec 0c             	sub    esp,0xc
c0023e03:	83 ec 0c             	sub    esp,0xc
c0023e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e0a:	e8 cd ff ff ff       	call   c0023ddc <PIT::~PIT()>
c0023e0f:	83 c4 10             	add    esp,0x10
c0023e12:	83 ec 08             	sub    esp,0x8
c0023e15:	68 5c 01 00 00       	push   0x15c
c0023e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e1e:	e8 cf 91 fe ff       	call   c000cff2 <operator delete(void*, unsigned long)>
c0023e23:	83 c4 10             	add    esp,0x10
c0023e26:	83 c4 0c             	add    esp,0xc
c0023e29:	c3                   	ret    
