
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c4 36 02 c0       	mov    eax,0xc00236c4
c0000025:	3d c4 36 02 c0       	cmp    eax,0xc00236c4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c4 36 02 c0       	push   0xc00236c4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c4 36 02 c0       	mov    eax,0xc00236c4
c0000051:	2d c4 36 02 c0       	sub    eax,0xc00236c4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c4 36 02 c0       	push   0xc00236c4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 0c fe 01 c0       	mov    ebx,0xc001fe0c
c0000097:	81 eb 08 fe 01 c0    	sub    ebx,0xc001fe08
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 08 fe 01 c0       	mov    esi,0xc001fe08
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c4 36 02 c0       	push   0xc00236c4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 c4 36 02 c0       	push   0xc00236c4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 53 50 01 00       	call   c0015300 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 31 50 01 00       	call   c0015300 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 3e 55 01 00       	call   c001582c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 fd 5b 01 00       	call   c0015ef4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 79 0e 01 00       	jmp    c00111f8 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 20 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe01e0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 20 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe01e0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 20 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe01e0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 20 fe 01 c0 04 	test   BYTE PTR [ecx-0x3ffe01e0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 20 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe01e0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 24 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe00dc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 fa 76 01 00       	jmp    c001949c <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 24 77 01 00       	jmp    c00194dc <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 45 77 01 00       	jmp    c001951c <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 80 00 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdff80]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 80 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdff80]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba e0 26 02 c0       	mov    edx,0xc00226e0
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 3c ff 01 c0       	mov    edx,0xc001ff3c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 42 ff 01 c0       	mov    eax,0xc001ff42
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 00 00 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0000]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 4b ff 01 c0       	mov    eax,0xc001ff4b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 80 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdff80]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 d0 ff 01 c0       	mov    eax,0xc001ffd0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb c0 ff 01 c0       	mov    ebx,0xc001ffc0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 a0 ff 01 c0       	mov    eax,0xc001ffa0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 b0 ff 01 c0       	mov    eax,0xc001ffb0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 52 ff 01 c0       	mov    edx,0xc001ff52
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 5e ff 01 c0       	mov    edx,0xc001ff5e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 72 ff 01 c0       	mov    edx,0xc001ff72
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c a0 03 02 c0 	mov    DWORD PTR [esp+0xc],0xc00203a0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 a0 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc00203a0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 a0 01 02 c0       	mov    eax,0xc00201a0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 e0 00 02 c0       	mov    eax,0xc00200e0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 a0 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff60]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 a0 04 02 c0       	push   0xc00204a0
c000611b:	e8 18 3d 01 00       	call   c0019e38 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ae 04 02 c0       	push   0xc00204ae
c0006153:	e8 e0 3c 01 00       	call   c0019e38 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 49 3c 01 00       	call   c0019ddc <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 bd 04 02 c0       	push   0xc00204bd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 c0 04 02 c0       	push   0xc00204c0
c0006812:	e8 21 36 01 00       	call   c0019e38 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 35 36 01 00       	call   c0019e54 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 c5 04 02 c0 	mov    DWORD PTR [esp],0xc00204c5
c000682c:	e8 07 36 01 00       	call   c0019e38 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 17 36 01 00       	call   c0019e54 <iso_kprintfd>
c000683d:	c7 04 24 cb 04 02 c0 	mov    DWORD PTR [esp],0xc00204cb
c0006844:	e8 ef 35 01 00       	call   c0019e38 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 ff 35 01 00       	call   c0019e54 <iso_kprintfd>
c0006855:	c7 04 24 d1 04 02 c0 	mov    DWORD PTR [esp],0xc00204d1
c000685c:	e8 d7 35 01 00       	call   c0019e38 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 e7 35 01 00       	call   c0019e54 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 bd 04 02 c0       	push   0xc00204bd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 da 04 02 c0       	push   0xc00204da
c0006a31:	e8 02 34 01 00       	call   c0019e38 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 e5 04 02 c0       	push   0xc00204e5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 ec 04 02 c0       	push   0xc00204ec
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 f3 04 02 c0       	push   0xc00204f3
c0006b48:	e8 eb 32 01 00       	call   c0019e38 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 fe 04 02 c0       	push   0xc00204fe
c0006b63:	e8 d0 32 01 00       	call   c0019e38 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 0d 9e 00 00       	call   c0010a7f <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 9f 5a 00 00       	call   c000c720 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 0f 05 02 c0       	push   0xc002050f
c0006cb2:	e8 7f 9e 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0006cd1:	50                   	push   eax
c0006cd2:	68 28 05 02 c0       	push   0xc0020528
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 79 e9 00 00       	call   c0015658 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 88 eb 00 00       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 90 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a490
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 64 63 01 c0       	push   0xc0016364
c0006d03:	52                   	push   edx
c0006d04:	e8 73 eb 00 00       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c0006d11:	68 24 06 02 c0       	push   0xc0020624
c0006d16:	e8 1b 9e 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 9f a6 00 00       	call   c00113c6 <KeInitRand()>
c0006d27:	e8 5b fa 00 00       	call   c0016787 <Vm::initialise8086()>
c0006d2c:	e8 e9 47 00 00       	call   c000b51a <Fs::initVFS()>
c0006d31:	c7 04 24 35 05 02 c0 	mov    DWORD PTR [esp],0xc0020535
c0006d38:	e8 f9 9d 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 24 06 02 c0       	push   0xc0020624
c0006d5c:	e8 d5 9d 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c0006d61:	e8 92 44 00 00       	call   c000b1f8 <KeInitialiseSymlinks()>
c0006d66:	e8 05 a3 00 00       	call   c0011070 <KeLoadSystemEnv()>
c0006d6b:	e8 62 a5 00 00       	call   c00112d2 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 4f 05 02 c0       	push   0xc002054f
c0006d7a:	68 58 05 02 c0       	push   0xc0020558
c0006d7f:	e8 20 cb 00 00       	call   c00138a4 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 f4 52 00 00       	call   c000c080 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 48 06 02 c0 	mov    DWORD PTR [esp],0xc0020648
c0006d93:	e8 9e 9d 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 74 59 00 00       	call   c000c71e <Device::loadDriversForAll()>
c0006daa:	c7 04 24 60 05 02 c0 	mov    DWORD PTR [esp],0xc0020560
c0006db1:	e8 80 9d 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 71 05 02 c0       	push   0xc0020571
c0006dc5:	e8 a4 e2 00 00       	call   c001506e <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 cc e4 00 00       	call   c001529f <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 00 ef 00 00       	call   c0015ce0 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 8d 05 02 c0       	push   0xc002058d
c0006df5:	50                   	push   eax
c0006df6:	e8 9f 59 00 00       	call   c000c79a <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 94 06 02 c0       	mov    edx,0xc0020694
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 11 7f 01 00       	call   c001ee06 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 61 90 00 00       	call   c000ff94 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 3a 90 00 00       	call   c000ff94 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 18 90 00 00       	call   c000ff94 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 f6 8f 00 00       	call   c000ff94 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 03 8f 00 00       	call   c000ff10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 de 8e 00 00       	call   c000ff10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 70 7d 01 00       	call   c001edc0 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 be 79 01 00       	call   c001ea30 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 f4 8e 00 00       	call   c000ff94 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 96 05 02 c0       	push   0xc0020596
c00070e2:	e8 26 a1 00 00       	call   c001120d <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 9c 05 02 c0       	push   0xc002059c
c000711e:	e8 ea a0 00 00       	call   c001120d <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 41 88 00 00       	jmp    c000f9ac <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 a2 05 02 c0       	push   0xc00205a2
c00071c3:	0f 94 05 20 2f 02 c0 	sete   BYTE PTR ds:0xc0022f20
c00071ca:	e8 67 99 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 3b 83 00 00       	call   c000f520 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 0e 54 00 00       	call   c000c602 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 ba 05 02 c0 	mov    DWORD PTR [esp],0xc00205ba
c000720d:	e8 24 99 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 24 8e 00 00       	call   c001004c <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 cb 53 00 00       	call   c000c602 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 68 06 02 c0       	push   0xc0020668
c0007254:	e8 dd 98 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c0007259:	e8 66 07 01 00       	call   c00179c4 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 d4 05 02 c0 	mov    DWORD PTR [esp],0xc00205d4
c0007265:	e8 cc 98 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 32 e7 00 00       	call   c00159a8 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 ef 05 02 c0       	push   0xc00205ef
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 00 06 02 c0       	push   0xc0020600
c00072ed:	e8 1b 9f 00 00       	call   c001120d <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 0d 06 02 c0       	push   0xc002060d
c0007302:	e8 06 9f 00 00       	call   c001120d <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 17 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020617
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 ec 9e 00 00       	jmp    c001120d <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007505:	48                   	dec    eax
c0007506:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 7d 01 01 00       	call   c0017690 <HalSystemIdle()>
c0007513:	e8 aa 7e 01 00       	call   c001f3c2 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 c0 ea 01 c0       	push   0xc001eac0
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 d0 ea 01 c0       	push   0xc001ead0
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 da ea 01 c0       	push   0xc001eada
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 e4 ea 01 c0       	push   0xc001eae4
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 ee ea 01 c0       	push   0xc001eaee
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 f8 ea 01 c0       	push   0xc001eaf8
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 02 eb 01 c0       	push   0xc001eb02
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 0c eb 01 c0       	push   0xc001eb0c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 16 eb 01 c0       	push   0xc001eb16
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 1e eb 01 c0       	push   0xc001eb1e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 28 eb 01 c0       	push   0xc001eb28
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 30 eb 01 c0       	push   0xc001eb30
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 38 eb 01 c0       	push   0xc001eb38
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 40 eb 01 c0       	push   0xc001eb40
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 5a eb 01 c0       	push   0xc001eb5a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 62 eb 01 c0       	push   0xc001eb62
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 6c eb 01 c0       	push   0xc001eb6c
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 76 eb 01 c0       	push   0xc001eb76
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 80 eb 01 c0       	push   0xc001eb80
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 1a ec 01 c0       	push   0xc001ec1a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 21 ec 01 c0       	push   0xc001ec21
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 0c ec 01 c0       	push   0xc001ec0c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 13 ec 01 c0       	push   0xc001ec13
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 8a eb 01 c0       	push   0xc001eb8a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 94 eb 01 c0       	push   0xc001eb94
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 9e eb 01 c0       	push   0xc001eb9e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 a8 eb 01 c0       	push   0xc001eba8
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 b2 eb 01 c0       	push   0xc001ebb2
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 bc eb 01 c0       	push   0xc001ebbc
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 c6 eb 01 c0       	push   0xc001ebc6
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 d0 eb 01 c0       	push   0xc001ebd0
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 da eb 01 c0       	push   0xc001ebda
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 e4 eb 01 c0       	push   0xc001ebe4
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 ee eb 01 c0       	push   0xc001ebee
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 f8 eb 01 c0       	push   0xc001ebf8
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 02 ec 01 c0       	push   0xc001ec02
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 5c ed 01 c0       	push   0xc001ed5c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 66 ed 01 c0       	push   0xc001ed66
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 70 ed 01 c0       	push   0xc001ed70
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 7a ed 01 c0       	push   0xc001ed7a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 84 ed 01 c0       	push   0xc001ed84
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 8e ed 01 c0       	push   0xc001ed8e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 98 ed 01 c0       	push   0xc001ed98
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 a2 ed 01 c0       	push   0xc001eda2
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 16 eb 01 c0       	push   0xc001eb16
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 10 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f10
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d 10 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f10
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 10 2f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022f10,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 10 2f 02 c0       	mov    eax,ds:0xc0022f10
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 b8 06 02 c0       	push   0xc00206b8
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 e8 06 02 c0       	push   0xc00206e8
c0007a27:	e8 e1 97 00 00       	call   c001120d <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 ed 06 02 c0       	push   0xc00206ed
c0007a3d:	e8 cb 97 00 00       	call   c001120d <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 68 a4 02 c0 01 	add    DWORD PTR ds:0xc002a468,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 f4 06 02 c0       	push   0xc00206f4
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 51 8f 00 00       	call   c0010aba <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 9f 8e 00 00       	call   c0010a29 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 ba 77 01 00       	call   c001f35a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 0c 07 02 c0       	push   0xc002070c
c0007c31:	e8 d7 95 00 00       	call   c001120d <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 0c 07 02 c0       	push   0xc002070c
c0007ca2:	e8 66 95 00 00       	call   c001120d <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 14 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f14
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 14 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f14
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 14 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f14
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 b1 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc00207b1
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 60 94 00 00       	jmp    c001120d <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 34 07 02 c0       	push   0xc0020734
c0007e31:	e8 d7 93 00 00       	call   c001120d <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 c7 07 02 c0       	push   0xc00207c7
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 64 07 02 c0       	push   0xc0020764
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 88 07 02 c0       	push   0xc0020788
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 ed 07 02 c0       	push   0xc00207ed
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 df 07 02 c0       	push   0xc00207df
c000813c:	e8 cc 90 00 00       	call   c001120d <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 4c 08 02 c0       	mov    edx,0xc002084c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 09 08 02 c0       	push   0xc0020809
c0008311:	e8 f7 8e 00 00       	call   c001120d <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000835a:	e8 6d d7 00 00       	call   c0015acc <schedule()>
c000835f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0008364:	48                   	dec    eax
c0008365:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 49 6e 01 00       	call   c001f240 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 26 08 02 c0       	push   0xc0020826
c000840c:	e8 fc 8d 00 00       	call   c001120d <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 4c 08 02 c0       	mov    edx,0xc002084c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 94 08 02 c0       	mov    edx,0xc0020894
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 e6 4f 00 00       	call   c000d4dc <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 68 03 01 00       	call   c0018884 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 40 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 40 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 f8 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd208]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 d0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd230]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 9a 00 01 00       	call   c0018718 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 f7 00 01 00       	jmp    c0018820 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 60 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020860
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 97 8a 00 00       	jmp    c001120d <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 54 37 00 00       	jmp    c000c027 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be 6e 08 02 c0       	mov    esi,0xc002086e
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 fe fb 00 00       	call   c0018820 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 94 08 02 c0       	mov    edx,0xc0020894
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 7f 08 02 c0       	push   0xc002087f
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 85 08 02 c0       	push   0xc0020885
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 5c 09 02 c0       	mov    edx,0xc002095c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 80 2f 02 c0       	mov    eax,ds:0xc0022f80
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 80 2f 02 c0    	mov    DWORD PTR ds:0xc0022f80,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 27 62 01 00       	call   c001f428 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba 78 09 02 c0       	mov    edx,0xc0020978
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 5c 09 02 c0       	mov    edx,0xc002095c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 27 61 01 00       	call   c001f4fc <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 1b 61 01 00       	call   c001f504 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 21 60 01 00       	call   c001f428 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 34 09 02 c0       	push   0xc0020934
c000942c:	e8 dc 7d 00 00       	call   c001120d <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba 78 09 02 c0       	mov    edx,0xc0020978
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 26 60 01 00       	call   c001f4fc <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 b3 60 01 00       	call   c001f5a6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 71 5e 01 00       	call   c001f3e6 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 0c 2f 02 c0       	push   0xc0022f0c
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 e4 f3 01 c0       	push   0xc001f3e4
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 88 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f88
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 88 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f88
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 84 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f84
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 84 2f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022f84,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 84 2f 02 c0    	mov    DWORD PTR ds:0xc0022f84,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 8c 09 02 c0       	push   0xc002098c
c0009689:	e8 7f 7b 00 00       	call   c001120d <KePanic(char const*)>
c000968e:	8b 35 84 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f84
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 84 2f 02 c0    	mov    DWORD PTR ds:0xc0022f84,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 84 2f 02 c0       	mov    eax,ds:0xc0022f84
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 84 2f 02 c0    	mov    DWORD PTR ds:0xc0022f84,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 84 2f 02 c0       	mov    ds:0xc0022f84,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 8c 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f8c
c000975f:	8b 0d 94 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f94
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 8c 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f8c
c000977a:	a1 90 2f 02 c0       	mov    eax,ds:0xc0022f90
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 90 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f90,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 20 0c 02 c0       	push   0xc0020c20
c00097c0:	e8 48 7a 00 00       	call   c001120d <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 37 0c 02 c0       	push   0xc0020c37
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 90 2f 02 c0    	mov    DWORD PTR ds:0xc0022f90,ebx
c0009864:	c6 05 98 2f 02 c0 43 	mov    BYTE PTR ds:0xc0022f98,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 94 2f 02 c0       	mov    ds:0xc0022f94,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 8c 2f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0022f8c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 90 2f 02 c0       	mov    eax,ds:0xc0022f90
c0009896:	f7 35 8c 2f 02 c0    	div    DWORD PTR ds:0xc0022f8c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 ac 09 02 c0       	push   0xc00209ac
c00098d1:	e8 37 79 00 00       	call   c001120d <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 4e 0c 02 c0       	push   0xc0020c4e
c00099a3:	e8 65 78 00 00       	call   c001120d <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 d0 09 02 c0 	mov    DWORD PTR [esp+0x30],0xc00209d0
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 02 78 00 00       	jmp    c001120d <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 6a 0c 02 c0       	push   0xc0020c6a
c0009a18:	e8 f0 77 00 00       	call   c001120d <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 86 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020c86
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 a6 77 00 00       	jmp    c001120d <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 f4 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209f4
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0009d10:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 18 0a 02 c0       	push   0xc0020a18
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 80 0a 02 c0       	push   0xc0020a80
c0009dad:	e8 5b 74 00 00       	call   c001120d <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 a4 0a 02 c0       	push   0xc0020aa4
c0009e99:	e8 6f 73 00 00       	call   c001120d <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 d0 0a 02 c0       	push   0xc0020ad0
c0009fed:	e8 1b 72 00 00       	call   c001120d <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 72 26 00 00       	call   c000c896 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 a0 0c 02 c0       	push   0xc0020ca0
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 98 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022f98
c000a2fd:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c000a304:	50                   	push   eax
c000a305:	e8 46 37 00 00       	call   c000da50 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 8c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f8c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 f4 0a 02 c0       	push   0xc0020af4
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 ae 0c 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020cae
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 d1 0c 02 c0       	push   0xc0020cd1
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 bf 0c 02 c0       	push   0xc0020cbf
c000a3db:	e8 2d 6e 00 00       	call   c001120d <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 d1 0c 02 c0       	push   0xc0020cd1
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 8c 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f8c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 98 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022f98
c000a47a:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c000a481:	50                   	push   eax
c000a482:	e8 5d 35 00 00       	call   c000d9e4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 8c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f8c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 e4 0c 02 c0       	push   0xc0020ce4
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 24 0b 02 c0       	push   0xc0020b24
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 44 0b 02 c0       	push   0xc0020b44
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 a4 0b 02 c0 	mov    DWORD PTR [esp],0xc0020ba4
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 f9 0c 02 c0       	push   0xc0020cf9
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 0d 0d 02 c0       	push   0xc0020d0d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 20 0d 02 c0       	push   0xc0020d20
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 2d 0d 02 c0       	push   0xc0020d2d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 46 0d 02 c0       	push   0xc0020d46
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 46 0d 02 c0       	push   0xc0020d46
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 4e 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d4e
c000a7f8:	e8 10 6a 00 00       	call   c001120d <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 66 0d 02 c0       	push   0xc0020d66
c000a80a:	e8 fe 69 00 00       	call   c001120d <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be 6f 08 02 c0       	mov    esi,0xc002086f
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 6e 08 02 c0       	mov    al,ds:0xc002086e
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 7c 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf284]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 cc 0e 02 c0       	push   0xc0020ecc
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 e0 0e 02 c0       	push   0xc0020ee0
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 ea 0e 02 c0       	push   0xc0020eea
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 f4 0e 02 c0       	push   0xc0020ef4
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 38 10 02 c0       	push   0xc0021038
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 fe 0e 02 c0       	push   0xc0020efe
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 58 10 02 c0       	push   0xc0021058
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 13 0f 02 c0       	push   0xc0020f13
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 2d 0f 02 c0       	push   0xc0020f2d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 a0 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd060]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 80 10 02 c0       	push   0xc0021080
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 38 10 02 c0       	push   0xc0021038
c000abb4:	e8 54 66 00 00       	call   c001120d <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 c8 10 02 c0       	push   0xc00210c8
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 c8 10 02 c0       	push   0xc00210c8
c000abe3:	e8 25 66 00 00       	call   c001120d <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 38 0f 02 c0       	push   0xc0020f38
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 38 0f 02 c0       	push   0xc0020f38
c000ac0f:	e8 f9 65 00 00       	call   c001120d <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 55 0f 02 c0       	push   0xc0020f55
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 55 0f 02 c0       	push   0xc0020f55
c000ac3b:	e8 cd 65 00 00       	call   c001120d <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 e8 10 02 c0       	push   0xc00210e8
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 e8 10 02 c0       	push   0xc00210e8
c000ac67:	e8 a1 65 00 00       	call   c001120d <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 0c 11 02 c0       	push   0xc002110c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 0c 11 02 c0       	push   0xc002110c
c000ac93:	e8 75 65 00 00       	call   c001120d <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 71 0f 02 c0       	push   0xc0020f71
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 71 0f 02 c0       	push   0xc0020f71
c000acbf:	e8 49 65 00 00       	call   c001120d <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 8d 0f 02 c0       	push   0xc0020f8d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 8d 0f 02 c0       	push   0xc0020f8d
c000aceb:	e8 1d 65 00 00       	call   c001120d <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 2c 11 02 c0       	push   0xc002112c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 2c 11 02 c0       	push   0xc002112c
c000ad17:	e8 f1 64 00 00       	call   c001120d <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 50 11 02 c0       	push   0xc0021150
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 50 11 02 c0       	push   0xc0021150
c000ad43:	e8 c5 64 00 00       	call   c001120d <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 fd 65 00 00       	call   c001135b <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 60 70 02 c0    	mov    ebp,DWORD PTR ds:0xc0027060
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 60 70 02 c0    	mov    DWORD PTR ds:0xc0027060,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 6f 11 02 c0       	push   0xc002116f
c000ad97:	e8 71 64 00 00       	call   c001120d <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000add7:	68 78 11 02 c0       	push   0xc0021178
c000addc:	50                   	push   eax
c000addd:	e8 18 09 00 00       	call   c000b6fa <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 96 11 02 c0       	push   0xc0021196
c000adf1:	e8 17 64 00 00       	call   c001120d <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 06                	push   0x6
c000adfd:	53                   	push   ebx
c000adfe:	e8 b3 09 00 00       	call   c000b7b6 <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 b0 11 02 c0       	push   0xc00211b0
c000ae12:	e8 f6 63 00 00       	call   c001120d <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 60 60 02 c0       	add    eax,0xc0026060
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 ca 11 02 c0       	push   0xc00211ca
c000ae59:	e8 af 63 00 00       	call   c001120d <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 9d 09 00 00       	call   c000b814 <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 60 60 02 c0       	add    eax,0xc0026060
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 60 60 02 c0       	add    eax,0xc0026060
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 0f             	cmp    eax,0xf
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KiIsSymlinkRegistered(char const*)>:
c000af04:	31 c0                	xor    eax,eax
c000af06:	31 d2                	xor    edx,edx
c000af08:	c3                   	ret    

c000af09 <KeDereferenceSymlink(char const*, char*)>:
c000af09:	55                   	push   ebp
c000af0a:	57                   	push   edi
c000af0b:	56                   	push   esi
c000af0c:	53                   	push   ebx
c000af0d:	83 ec 50             	sub    esp,0x50
c000af10:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000af14:	55                   	push   ebp
c000af15:	e8 ea ff ff ff       	call   c000af04 <KiIsSymlinkRegistered(char const*)>
c000af1a:	5b                   	pop    ebx
c000af1b:	5e                   	pop    esi
c000af1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af20:	09 d0                	or     eax,edx
c000af22:	75 07                	jne    c000af2b <KeDereferenceSymlink(char const*, char*)+0x22>
c000af24:	31 ed                	xor    ebp,ebp
c000af26:	e9 86 01 00 00       	jmp    c000b0b1 <KeDereferenceSymlink(char const*, char*)+0x1a8>
c000af2b:	83 ec 0c             	sub    esp,0xc
c000af2e:	89 d7                	mov    edi,edx
c000af30:	68 14 01 00 00       	push   0x114
c000af35:	e8 7c cb ff ff       	call   c0007ab6 <malloc>
c000af3a:	83 c4 0c             	add    esp,0xc
c000af3d:	89 c3                	mov    ebx,eax
c000af3f:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000af45:	55                   	push   ebp
c000af46:	50                   	push   eax
c000af47:	e8 ae 07 00 00       	call   c000b6fa <File::File(char const*, Process*)>
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	85 db                	test   ebx,ebx
c000af51:	0f 84 41 01 00 00    	je     c000b098 <KeDereferenceSymlink(char const*, char*)+0x18f>
c000af57:	51                   	push   ecx
c000af58:	51                   	push   ecx
c000af59:	6a 01                	push   0x1
c000af5b:	53                   	push   ebx
c000af5c:	e8 55 08 00 00       	call   c000b7b6 <File::open(FileOpenMode)>
c000af61:	83 c4 10             	add    esp,0x10
c000af64:	85 c0                	test   eax,eax
c000af66:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af68:	74 09                	je     c000af73 <KeDereferenceSymlink(char const*, char*)+0x6a>
c000af6a:	83 ec 0c             	sub    esp,0xc
c000af6d:	53                   	push   ebx
c000af6e:	e9 1f 01 00 00       	jmp    c000b092 <KeDereferenceSymlink(char const*, char*)+0x189>
c000af73:	83 ec 0c             	sub    esp,0xc
c000af76:	8d 74 24 28          	lea    esi,[esp+0x28]
c000af7a:	56                   	push   esi
c000af7b:	8d 6c 24 47          	lea    ebp,[esp+0x47]
c000af7f:	55                   	push   ebp
c000af80:	6a 00                	push   0x0
c000af82:	6a 08                	push   0x8
c000af84:	53                   	push   ebx
c000af85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000af88:	83 c4 20             	add    esp,0x20
c000af8b:	85 c0                	test   eax,eax
c000af8d:	0f 85 f1 00 00 00    	jne    c000b084 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000af93:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000af98:	0f 85 e6 00 00 00    	jne    c000b084 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000af9e:	52                   	push   edx
c000af9f:	52                   	push   edx
c000afa0:	68 e4 11 02 c0       	push   0xc00211e4
c000afa5:	55                   	push   ebp
c000afa6:	e8 a5 57 ff ff       	call   c0000750 <strcmp>
c000afab:	83 c4 10             	add    esp,0x10
c000afae:	89 c5                	mov    ebp,eax
c000afb0:	85 c0                	test   eax,eax
c000afb2:	0f 85 cc 00 00 00    	jne    c000b084 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000afb8:	83 ec 0c             	sub    esp,0xc
c000afbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afbd:	56                   	push   esi
c000afbe:	8d 4c 24 30          	lea    ecx,[esp+0x30]
c000afc2:	51                   	push   ecx
c000afc3:	6a 00                	push   0x0
c000afc5:	6a 08                	push   0x8
c000afc7:	53                   	push   ebx
c000afc8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afcb:	83 c4 20             	add    esp,0x20
c000afce:	85 c0                	test   eax,eax
c000afd0:	0f 85 ae 00 00 00    	jne    c000b084 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000afd6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000afdb:	0f 85 a3 00 00 00    	jne    c000b084 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000afe1:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c000afe5:	0f 85 39 ff ff ff    	jne    c000af24 <KeDereferenceSymlink(char const*, char*)+0x1b>
c000afeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afef:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000aff3:	0f 85 2b ff ff ff    	jne    c000af24 <KeDereferenceSymlink(char const*, char*)+0x1b>
c000aff9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b001:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b009:	50                   	push   eax
c000b00a:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c000b00e:	50                   	push   eax
c000b00f:	8d 44 24 30          	lea    eax,[esp+0x30]
c000b013:	50                   	push   eax
c000b014:	53                   	push   ebx
c000b015:	e8 9e 0a 00 00       	call   c000bab8 <File::stat(unsigned long long*, bool*)>
c000b01a:	83 c4 10             	add    esp,0x10
c000b01d:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000b022:	85 c0                	test   eax,eax
c000b024:	75 5e                	jne    c000b084 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b026:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b02a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000b02e:	b9 0f 00 00 00       	mov    ecx,0xf
c000b033:	89 c2                	mov    edx,eax
c000b035:	39 f1                	cmp    ecx,esi
c000b037:	19 fa                	sbb    edx,edi
c000b039:	73 49                	jae    c000b084 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b03b:	83 c6 f0             	add    esi,0xfffffff0
c000b03e:	b9 ff 00 00 00       	mov    ecx,0xff
c000b043:	83 d7 ff             	adc    edi,0xffffffff
c000b046:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000b04a:	39 f1                	cmp    ecx,esi
c000b04c:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c000b050:	19 f8                	sbb    eax,edi
c000b052:	72 44                	jb     c000b098 <KeDereferenceSymlink(char const*, char*)+0x18f>
c000b054:	83 ec 0c             	sub    esp,0xc
c000b057:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b059:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c000b05d:	51                   	push   ecx
c000b05e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000b062:	57                   	push   edi
c000b063:	56                   	push   esi
c000b064:	53                   	push   ebx
c000b065:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b068:	83 c4 20             	add    esp,0x20
c000b06b:	85 c0                	test   eax,eax
c000b06d:	75 15                	jne    c000b084 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b06f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b073:	89 c7                	mov    edi,eax
c000b075:	c1 ff 1f             	sar    edi,0x1f
c000b078:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
c000b07c:	75 06                	jne    c000b084 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b07e:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000b082:	74 19                	je     c000b09d <KeDereferenceSymlink(char const*, char*)+0x194>
c000b084:	83 ec 0c             	sub    esp,0xc
c000b087:	53                   	push   ebx
c000b088:	e8 87 07 00 00       	call   c000b814 <File::close()>
c000b08d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b08f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b092:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b095:	83 c4 10             	add    esp,0x10
c000b098:	83 cd ff             	or     ebp,0xffffffff
c000b09b:	eb 14                	jmp    c000b0b1 <KeDereferenceSymlink(char const*, char*)+0x1a8>
c000b09d:	83 ec 0c             	sub    esp,0xc
c000b0a0:	53                   	push   ebx
c000b0a1:	e8 6e 07 00 00       	call   c000b814 <File::close()>
c000b0a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0ae:	83 c4 10             	add    esp,0x10
c000b0b1:	83 c4 4c             	add    esp,0x4c
c000b0b4:	89 e8                	mov    eax,ebp
c000b0b6:	5b                   	pop    ebx
c000b0b7:	5e                   	pop    esi
c000b0b8:	5f                   	pop    edi
c000b0b9:	5d                   	pop    ebp
c000b0ba:	c3                   	ret    

c000b0bb <KeCreateSymlink(char const*, char const*)>:
c000b0bb:	55                   	push   ebp
c000b0bc:	57                   	push   edi
c000b0bd:	56                   	push   esi
c000b0be:	53                   	push   ebx
c000b0bf:	83 ec 38             	sub    esp,0x38
c000b0c2:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b0c6:	68 14 01 00 00       	push   0x114
c000b0cb:	e8 e6 c9 ff ff       	call   c0007ab6 <malloc>
c000b0d0:	83 c4 0c             	add    esp,0xc
c000b0d3:	89 c3                	mov    ebx,eax
c000b0d5:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000b0db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0df:	50                   	push   eax
c000b0e0:	e8 15 06 00 00       	call   c000b6fa <File::File(char const*, Process*)>
c000b0e5:	83 c4 10             	add    esp,0x10
c000b0e8:	b8 01 00 00 00       	mov    eax,0x1
c000b0ed:	85 db                	test   ebx,ebx
c000b0ef:	0f 84 fb 00 00 00    	je     c000b1f0 <KeCreateSymlink(char const*, char const*)+0x135>
c000b0f5:	52                   	push   edx
c000b0f6:	52                   	push   edx
c000b0f7:	6a 12                	push   0x12
c000b0f9:	53                   	push   ebx
c000b0fa:	e8 b7 06 00 00       	call   c000b7b6 <File::open(FileOpenMode)>
c000b0ff:	83 c4 10             	add    esp,0x10
c000b102:	85 c0                	test   eax,eax
c000b104:	74 0b                	je     c000b111 <KeCreateSymlink(char const*, char const*)+0x56>
c000b106:	83 ec 0c             	sub    esp,0xc
c000b109:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b10b:	53                   	push   ebx
c000b10c:	e9 d4 00 00 00       	jmp    c000b1e5 <KeCreateSymlink(char const*, char const*)+0x12a>
c000b111:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b115:	be 52 12 02 c0       	mov    esi,0xc0021252
c000b11a:	b9 09 00 00 00       	mov    ecx,0x9
c000b11f:	fc                   	cld    
c000b120:	83 ec 0c             	sub    esp,0xc
c000b123:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b125:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b129:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b12b:	56                   	push   esi
c000b12c:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b130:	52                   	push   edx
c000b131:	6a 00                	push   0x0
c000b133:	6a 08                	push   0x8
c000b135:	53                   	push   ebx
c000b136:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b139:	83 c4 20             	add    esp,0x20
c000b13c:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b141:	0f 85 90 00 00 00    	jne    c000b1d7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b147:	85 c0                	test   eax,eax
c000b149:	0f 85 88 00 00 00    	jne    c000b1d7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b14f:	e8 fc fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b15b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b15f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b161:	56                   	push   esi
c000b162:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b166:	52                   	push   edx
c000b167:	6a 00                	push   0x0
c000b169:	6a 08                	push   0x8
c000b16b:	53                   	push   ebx
c000b16c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b16f:	83 c4 20             	add    esp,0x20
c000b172:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b177:	75 5e                	jne    c000b1d7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b179:	85 c0                	test   eax,eax
c000b17b:	75 5a                	jne    c000b1d7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b17d:	83 ec 0c             	sub    esp,0xc
c000b180:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b182:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b185:	55                   	push   ebp
c000b186:	e8 e5 53 ff ff       	call   c0000570 <strlen>
c000b18b:	89 34 24             	mov    DWORD PTR [esp],esi
c000b18e:	31 d2                	xor    edx,edx
c000b190:	55                   	push   ebp
c000b191:	52                   	push   edx
c000b192:	50                   	push   eax
c000b193:	53                   	push   ebx
c000b194:	ff d7                	call   edi
c000b196:	83 c4 14             	add    esp,0x14
c000b199:	89 c6                	mov    esi,eax
c000b19b:	55                   	push   ebp
c000b19c:	e8 cf 53 ff ff       	call   c0000570 <strlen>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b1a8:	75 2d                	jne    c000b1d7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1aa:	85 f6                	test   esi,esi
c000b1ac:	75 29                	jne    c000b1d7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1ae:	50                   	push   eax
c000b1af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1b7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b1bb:	e8 d5 fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b1c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1c3:	e8 4c 06 00 00       	call   c000b814 <File::close()>
c000b1c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1d0:	83 c4 10             	add    esp,0x10
c000b1d3:	31 c0                	xor    eax,eax
c000b1d5:	eb 19                	jmp    c000b1f0 <KeCreateSymlink(char const*, char const*)+0x135>
c000b1d7:	83 ec 0c             	sub    esp,0xc
c000b1da:	53                   	push   ebx
c000b1db:	e8 34 06 00 00       	call   c000b814 <File::close()>
c000b1e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1e8:	83 c4 10             	add    esp,0x10
c000b1eb:	b8 01 00 00 00       	mov    eax,0x1
c000b1f0:	83 c4 2c             	add    esp,0x2c
c000b1f3:	5b                   	pop    ebx
c000b1f4:	5e                   	pop    esi
c000b1f5:	5f                   	pop    edi
c000b1f6:	5d                   	pop    ebp
c000b1f7:	c3                   	ret    

c000b1f8 <KeInitialiseSymlinks()>:
c000b1f8:	53                   	push   ebx
c000b1f9:	83 ec 10             	sub    esp,0x10
c000b1fc:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b206:	6a 00                	push   0x0
c000b208:	68 90 ae 00 c0       	push   0xc000ae90
c000b20d:	e8 39 58 00 00       	call   c0010a4b <KeRegisterAtexit(void (*)(void*), void*)>
c000b212:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b219:	e8 98 c8 ff ff       	call   c0007ab6 <malloc>
c000b21e:	83 c4 0c             	add    esp,0xc
c000b221:	89 c3                	mov    ebx,eax
c000b223:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000b229:	68 78 11 02 c0       	push   0xc0021178
c000b22e:	50                   	push   eax
c000b22f:	e8 c6 04 00 00       	call   c000b6fa <File::File(char const*, Process*)>
c000b234:	83 c4 10             	add    esp,0x10
c000b237:	85 db                	test   ebx,ebx
c000b239:	75 10                	jne    c000b24b <KeInitialiseSymlinks()+0x53>
c000b23b:	83 ec 0c             	sub    esp,0xc
c000b23e:	68 ec 11 02 c0       	push   0xc00211ec
c000b243:	e8 c5 5f 00 00       	call   c001120d <KePanic(char const*)>
c000b248:	83 c4 10             	add    esp,0x10
c000b24b:	83 ec 0c             	sub    esp,0xc
c000b24e:	53                   	push   ebx
c000b24f:	e8 26 08 00 00       	call   c000ba7a <File::exists()>
c000b254:	83 c4 10             	add    esp,0x10
c000b257:	84 c0                	test   al,al
c000b259:	75 2d                	jne    c000b288 <KeInitialiseSymlinks()+0x90>
c000b25b:	52                   	push   edx
c000b25c:	52                   	push   edx
c000b25d:	6a 12                	push   0x12
c000b25f:	53                   	push   ebx
c000b260:	e8 51 05 00 00       	call   c000b7b6 <File::open(FileOpenMode)>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	85 c0                	test   eax,eax
c000b26a:	74 10                	je     c000b27c <KeInitialiseSymlinks()+0x84>
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	68 09 12 02 c0       	push   0xc0021209
c000b274:	e8 94 5f 00 00       	call   c001120d <KePanic(char const*)>
c000b279:	83 c4 10             	add    esp,0x10
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	53                   	push   ebx
c000b280:	e8 8f 05 00 00       	call   c000b814 <File::close()>
c000b285:	83 c4 10             	add    esp,0x10
c000b288:	85 db                	test   ebx,ebx
c000b28a:	74 0c                	je     c000b298 <KeInitialiseSymlinks()+0xa0>
c000b28c:	83 ec 0c             	sub    esp,0xc
c000b28f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b291:	53                   	push   ebx
c000b292:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b295:	83 c4 10             	add    esp,0x10
c000b298:	50                   	push   eax
c000b299:	50                   	push   eax
c000b29a:	68 26 12 02 c0       	push   0xc0021226
c000b29f:	68 34 12 02 c0       	push   0xc0021234
c000b2a4:	e8 12 fe ff ff       	call   c000b0bb <KeCreateSymlink(char const*, char const*)>
c000b2a9:	83 c4 18             	add    esp,0x18
c000b2ac:	5b                   	pop    ebx
c000b2ad:	c3                   	ret    

c000b2ae <File::read(unsigned long long, void*, int*)>:
c000b2ae:	53                   	push   ebx
c000b2af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2b7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b2be:	83 f8 19             	cmp    eax,0x19
c000b2c1:	77 35                	ja     c000b2f8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2c3:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b2ca:	85 c0                	test   eax,eax
c000b2cc:	74 2a                	je     c000b2f8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2ce:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2d4:	85 c0                	test   eax,eax
c000b2d6:	74 20                	je     c000b2f8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2dc:	74 21                	je     c000b2ff <File::read(unsigned long long, void*, int*)+0x51>
c000b2de:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b2e4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b2ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b2f2:	5b                   	pop    ebx
c000b2f3:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b2f6:	ff e0                	jmp    eax
c000b2f8:	b8 0b 00 00 00       	mov    eax,0xb
c000b2fd:	eb 05                	jmp    c000b304 <File::read(unsigned long long, void*, int*)+0x56>
c000b2ff:	b8 05 00 00 00       	mov    eax,0x5
c000b304:	5b                   	pop    ebx
c000b305:	c3                   	ret    

c000b306 <File::write(unsigned long long, void*, int*)>:
c000b306:	53                   	push   ebx
c000b307:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b30b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b30f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b316:	83 f8 19             	cmp    eax,0x19
c000b319:	77 35                	ja     c000b350 <File::write(unsigned long long, void*, int*)+0x4a>
c000b31b:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b322:	85 c0                	test   eax,eax
c000b324:	74 2a                	je     c000b350 <File::write(unsigned long long, void*, int*)+0x4a>
c000b326:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b32c:	85 c0                	test   eax,eax
c000b32e:	74 20                	je     c000b350 <File::write(unsigned long long, void*, int*)+0x4a>
c000b330:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b334:	74 21                	je     c000b357 <File::write(unsigned long long, void*, int*)+0x51>
c000b336:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b338:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b33c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b346:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b34a:	5b                   	pop    ebx
c000b34b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b34e:	ff e0                	jmp    eax
c000b350:	b8 0b 00 00 00       	mov    eax,0xb
c000b355:	eb 05                	jmp    c000b35c <File::write(unsigned long long, void*, int*)+0x56>
c000b357:	b8 05 00 00 00       	mov    eax,0x5
c000b35c:	5b                   	pop    ebx
c000b35d:	c3                   	ret    

c000b35e <Directory::read(unsigned long long, void*, int*)>:
c000b35e:	53                   	push   ebx
c000b35f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b363:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b367:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b36e:	83 f8 19             	cmp    eax,0x19
c000b371:	77 35                	ja     c000b3a8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b373:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b37a:	85 c0                	test   eax,eax
c000b37c:	74 2a                	je     c000b3a8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b37e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b384:	85 c0                	test   eax,eax
c000b386:	74 20                	je     c000b3a8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b388:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b38c:	74 21                	je     c000b3af <Directory::read(unsigned long long, void*, int*)+0x51>
c000b38e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b390:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b394:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b39a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b39e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3a2:	5b                   	pop    ebx
c000b3a3:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b3a6:	ff e0                	jmp    eax
c000b3a8:	b8 0b 00 00 00       	mov    eax,0xb
c000b3ad:	eb 05                	jmp    c000b3b4 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b3af:	b8 05 00 00 00       	mov    eax,0x5
c000b3b4:	5b                   	pop    ebx
c000b3b5:	c3                   	ret    

c000b3b6 <Directory::write(unsigned long long, void*, int*)>:
c000b3b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3ba:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b3c1:	b8 0b 00 00 00       	mov    eax,0xb
c000b3c6:	83 fa 19             	cmp    edx,0x19
c000b3c9:	77 18                	ja     c000b3e3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3cb:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b3d2:	85 d2                	test   edx,edx
c000b3d4:	74 0d                	je     c000b3e3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3d6:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b3dd:	19 c0                	sbb    eax,eax
c000b3df:	83 e0 0a             	and    eax,0xa
c000b3e2:	40                   	inc    eax
c000b3e3:	c3                   	ret    

c000b3e4 <File::isAtty()>:
c000b3e4:	31 c0                	xor    eax,eax
c000b3e6:	c3                   	ret    
c000b3e7:	90                   	nop

c000b3e8 <Directory::isAtty()>:
c000b3e8:	31 c0                	xor    eax,eax
c000b3ea:	c3                   	ret    
c000b3eb:	90                   	nop

c000b3ec <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b3ec:	b8 0a 00 00 00       	mov    eax,0xa
c000b3f1:	c3                   	ret    

c000b3f2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b3f2:	b8 0a 00 00 00       	mov    eax,0xa
c000b3f7:	c3                   	ret    

c000b3f8 <Filesystem::allocateSwapfile(char const*, int)>:
c000b3f8:	31 c0                	xor    eax,eax
c000b3fa:	31 d2                	xor    edx,edx
c000b3fc:	c3                   	ret    
c000b3fd:	90                   	nop

c000b3fe <File::~File()>:
c000b3fe:	83 ec 0c             	sub    esp,0xc
c000b401:	ba d0 12 02 c0       	mov    edx,0xc00212d0
c000b406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40a:	89 10                	mov    DWORD PTR [eax],edx
c000b40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b410:	83 ec 0c             	sub    esp,0xc
c000b413:	50                   	push   eax
c000b414:	e8 8b df ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b419:	83 c4 10             	add    esp,0x10
c000b41c:	90                   	nop
c000b41d:	83 c4 0c             	add    esp,0xc
c000b420:	c3                   	ret    
c000b421:	90                   	nop

c000b422 <File::~File()>:
c000b422:	83 ec 0c             	sub    esp,0xc
c000b425:	83 ec 0c             	sub    esp,0xc
c000b428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b42c:	e8 cd ff ff ff       	call   c000b3fe <File::~File()>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	83 ec 08             	sub    esp,0x8
c000b437:	68 14 01 00 00       	push   0x114
c000b43c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b440:	e8 d3 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b445:	83 c4 10             	add    esp,0x10
c000b448:	83 c4 0c             	add    esp,0xc
c000b44b:	c3                   	ret    

c000b44c <Directory::~Directory()>:
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	ba ec 12 02 c0       	mov    edx,0xc00212ec
c000b454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b458:	89 10                	mov    DWORD PTR [eax],edx
c000b45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b45e:	83 ec 0c             	sub    esp,0xc
c000b461:	50                   	push   eax
c000b462:	e8 3d df ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b467:	83 c4 10             	add    esp,0x10
c000b46a:	90                   	nop
c000b46b:	83 c4 0c             	add    esp,0xc
c000b46e:	c3                   	ret    
c000b46f:	90                   	nop

c000b470 <Directory::~Directory()>:
c000b470:	83 ec 0c             	sub    esp,0xc
c000b473:	83 ec 0c             	sub    esp,0xc
c000b476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47a:	e8 cd ff ff ff       	call   c000b44c <Directory::~Directory()>
c000b47f:	83 c4 10             	add    esp,0x10
c000b482:	83 ec 08             	sub    esp,0x8
c000b485:	68 14 01 00 00       	push   0x114
c000b48a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b48e:	e8 85 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b493:	83 c4 10             	add    esp,0x10
c000b496:	83 c4 0c             	add    esp,0xc
c000b499:	c3                   	ret    

c000b49a <Filesystem::Filesystem()>:
c000b49a:	ba 64 12 02 c0       	mov    edx,0xc0021264
c000b49f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a3:	89 10                	mov    DWORD PTR [eax],edx
c000b4a5:	8b 15 64 70 02 c0    	mov    edx,DWORD PTR ds:0xc0027064
c000b4ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b4b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4b6:	a3 64 70 02 c0       	mov    ds:0xc0027064,eax
c000b4bb:	90                   	nop
c000b4bc:	c3                   	ret    
c000b4bd:	90                   	nop

c000b4be <Filesystem::~Filesystem()>:
c000b4be:	ba 64 12 02 c0       	mov    edx,0xc0021264
c000b4c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c7:	89 10                	mov    DWORD PTR [eax],edx
c000b4c9:	90                   	nop
c000b4ca:	c3                   	ret    
c000b4cb:	90                   	nop

c000b4cc <Filesystem::~Filesystem()>:
c000b4cc:	83 ec 0c             	sub    esp,0xc
c000b4cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4d3:	e8 e6 ff ff ff       	call   c000b4be <Filesystem::~Filesystem()>
c000b4d8:	83 c4 04             	add    esp,0x4
c000b4db:	83 ec 08             	sub    esp,0x8
c000b4de:	6a 08                	push   0x8
c000b4e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e4:	e8 2f f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4e9:	83 c4 10             	add    esp,0x10
c000b4ec:	83 c4 0c             	add    esp,0xc
c000b4ef:	c3                   	ret    

c000b4f0 <Fs::getcwd(Process*, char*, int)>:
c000b4f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b4f4:	31 c0                	xor    eax,eax
c000b4f6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b4f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b4fd:	7d 15                	jge    c000b514 <Fs::getcwd(Process*, char*, int)+0x24>
c000b4ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b503:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b50a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b50d:	84 c9                	test   cl,cl
c000b50f:	74 06                	je     c000b517 <Fs::getcwd(Process*, char*, int)+0x27>
c000b511:	40                   	inc    eax
c000b512:	eb e2                	jmp    c000b4f6 <Fs::getcwd(Process*, char*, int)+0x6>
c000b514:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b517:	31 c0                	xor    eax,eax
c000b519:	c3                   	ret    

c000b51a <Fs::initVFS()>:
c000b51a:	83 ec 18             	sub    esp,0x18
c000b51d:	6a 08                	push   0x8
c000b51f:	e8 92 c5 ff ff       	call   c0007ab6 <malloc>
c000b524:	89 04 24             	mov    DWORD PTR [esp],eax
c000b527:	e8 0c e1 00 00       	call   c0019638 <FAT::FAT()>
c000b52c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b533:	e8 7e c5 ff ff       	call   c0007ab6 <malloc>
c000b538:	89 04 24             	mov    DWORD PTR [esp],eax
c000b53b:	e8 24 f0 00 00       	call   c001a564 <ISO9660::ISO9660()>
c000b540:	83 c4 1c             	add    esp,0x1c
c000b543:	c3                   	ret    

c000b544 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b544:	55                   	push   ebp
c000b545:	57                   	push   edi
c000b546:	56                   	push   esi
c000b547:	53                   	push   ebx
c000b548:	81 ec 10 04 00 00    	sub    esp,0x410
c000b54e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000b555:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000b55c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000b563:	68 00 04 00 00       	push   0x400
c000b568:	6a 00                	push   0x0
c000b56a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000b56e:	56                   	push   esi
c000b56f:	e8 7c 4f ff ff       	call   c00004f0 <memset>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b57b:	75 0b                	jne    c000b588 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b57d:	50                   	push   eax
c000b57e:	50                   	push   eax
c000b57f:	57                   	push   edi
c000b580:	56                   	push   esi
c000b581:	e8 ba 50 ff ff       	call   c0000640 <strcpy>
c000b586:	eb 44                	jmp    c000b5cc <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000b588:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b58b:	83 f8 5c             	cmp    eax,0x5c
c000b58e:	74 05                	je     c000b595 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b590:	83 f8 2f             	cmp    eax,0x2f
c000b593:	75 18                	jne    c000b5ad <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000b595:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b598:	3c 60                	cmp    al,0x60
c000b59a:	7e 03                	jle    c000b59f <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b59c:	83 e8 20             	sub    eax,0x20
c000b59f:	88 04 24             	mov    BYTE PTR [esp],al
c000b5a2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b5a9:	50                   	push   eax
c000b5aa:	50                   	push   eax
c000b5ab:	eb 18                	jmp    c000b5c5 <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000b5ad:	50                   	push   eax
c000b5ae:	50                   	push   eax
c000b5af:	55                   	push   ebp
c000b5b0:	56                   	push   esi
c000b5b1:	e8 8a 50 ff ff       	call   c0000640 <strcpy>
c000b5b6:	5a                   	pop    edx
c000b5b7:	59                   	pop    ecx
c000b5b8:	68 fc 21 02 c0       	push   0xc00221fc
c000b5bd:	56                   	push   esi
c000b5be:	e8 7d 52 ff ff       	call   c0000840 <strcat>
c000b5c3:	5d                   	pop    ebp
c000b5c4:	58                   	pop    eax
c000b5c5:	57                   	push   edi
c000b5c6:	56                   	push   esi
c000b5c7:	e8 74 52 ff ff       	call   c0000840 <strcat>
c000b5cc:	83 c4 10             	add    esp,0x10
c000b5cf:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b5d2:	3c 60                	cmp    al,0x60
c000b5d4:	7e 03                	jle    c000b5d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000b5d6:	83 e8 20             	sub    eax,0x20
c000b5d9:	88 04 24             	mov    BYTE PTR [esp],al
c000b5dc:	88 03                	mov    BYTE PTR [ebx],al
c000b5de:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b5e5:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b5eb:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b5ef:	bf 03 00 00 00       	mov    edi,0x3
c000b5f4:	b8 03 00 00 00       	mov    eax,0x3
c000b5f9:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b5fd:	89 ea                	mov    edx,ebp
c000b5ff:	85 ed                	test   ebp,ebp
c000b601:	0f 84 97 00 00 00    	je     c000b69e <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000b607:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b60a:	83 fd 5c             	cmp    ebp,0x5c
c000b60d:	74 05                	je     c000b614 <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000b60f:	83 fd 2f             	cmp    ebp,0x2f
c000b612:	75 12                	jne    c000b626 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b614:	89 c5                	mov    ebp,eax
c000b616:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b61b:	74 09                	je     c000b626 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b61d:	40                   	inc    eax
c000b61e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b622:	89 cf                	mov    edi,ecx
c000b624:	eb d3                	jmp    c000b5f9 <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000b626:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b62b:	0f be ea             	movsx  ebp,dl
c000b62e:	75 5e                	jne    c000b68e <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b630:	83 fd 2e             	cmp    ebp,0x2e
c000b633:	75 59                	jne    c000b68e <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b635:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b639:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b63e:	74 18                	je     c000b658 <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000b640:	83 fd 2e             	cmp    ebp,0x2e
c000b643:	74 53                	je     c000b698 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b645:	89 f9                	mov    ecx,edi
c000b647:	41                   	inc    ecx
c000b648:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b64c:	83 fa 2f             	cmp    edx,0x2f
c000b64f:	74 f6                	je     c000b647 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b651:	83 fa 5c             	cmp    edx,0x5c
c000b654:	74 f1                	je     c000b647 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b656:	eb ca                	jmp    c000b622 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b658:	83 fd 2e             	cmp    ebp,0x2e
c000b65b:	74 3b                	je     c000b698 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b65d:	83 f8 03             	cmp    eax,0x3
c000b660:	74 c0                	je     c000b622 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b662:	41                   	inc    ecx
c000b663:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b667:	83 fa 2f             	cmp    edx,0x2f
c000b66a:	74 f6                	je     c000b662 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b66c:	83 fa 5c             	cmp    edx,0x5c
c000b66f:	74 f1                	je     c000b662 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b671:	48                   	dec    eax
c000b672:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b676:	75 06                	jne    c000b67e <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b678:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b67c:	eb f3                	jmp    c000b671 <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000b67e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b682:	74 07                	je     c000b68b <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000b684:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b688:	48                   	dec    eax
c000b689:	eb f3                	jmp    c000b67e <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b68b:	40                   	inc    eax
c000b68c:	eb 94                	jmp    c000b622 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b68e:	83 fd 2f             	cmp    ebp,0x2f
c000b691:	74 8f                	je     c000b622 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b693:	83 fd 5c             	cmp    ebp,0x5c
c000b696:	74 8a                	je     c000b622 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b698:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b69b:	40                   	inc    eax
c000b69c:	eb 84                	jmp    c000b622 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b69e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6a2:	83 ec 0c             	sub    esp,0xc
c000b6a5:	53                   	push   ebx
c000b6a6:	e8 c5 4e ff ff       	call   c0000570 <strlen>
c000b6ab:	83 c4 10             	add    esp,0x10
c000b6ae:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b6b3:	75 26                	jne    c000b6db <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b6b5:	83 ec 0c             	sub    esp,0xc
c000b6b8:	53                   	push   ebx
c000b6b9:	e8 b2 4e ff ff       	call   c0000570 <strlen>
c000b6be:	83 c4 10             	add    esp,0x10
c000b6c1:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b6c6:	74 26                	je     c000b6ee <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b6c8:	83 ec 0c             	sub    esp,0xc
c000b6cb:	53                   	push   ebx
c000b6cc:	e8 9f 4e ff ff       	call   c0000570 <strlen>
c000b6d1:	83 c4 10             	add    esp,0x10
c000b6d4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b6d9:	eb c7                	jmp    c000b6a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000b6db:	83 ec 0c             	sub    esp,0xc
c000b6de:	53                   	push   ebx
c000b6df:	e8 8c 4e ff ff       	call   c0000570 <strlen>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b6ec:	74 c7                	je     c000b6b5 <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000b6ee:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b6f4:	5b                   	pop    ebx
c000b6f5:	5e                   	pop    esi
c000b6f6:	5f                   	pop    edi
c000b6f7:	5d                   	pop    ebp
c000b6f8:	c3                   	ret    
c000b6f9:	90                   	nop

c000b6fa <File::File(char const*, Process*)>:
c000b6fa:	83 ec 0c             	sub    esp,0xc
c000b6fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b701:	83 ec 08             	sub    esp,0x8
c000b704:	6a 00                	push   0x0
c000b706:	50                   	push   eax
c000b707:	e8 b2 da ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b70c:	83 c4 10             	add    esp,0x10
c000b70f:	ba d0 12 02 c0       	mov    edx,0xc00212d0
c000b714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b718:	89 10                	mov    DWORD PTR [eax],edx
c000b71a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b71e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b728:	83 c0 0d             	add    eax,0xd
c000b72b:	83 ec 04             	sub    esp,0x4
c000b72e:	52                   	push   edx
c000b72f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b733:	50                   	push   eax
c000b734:	e8 0b fe ff ff       	call   c000b544 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b739:	83 c4 10             	add    esp,0x10
c000b73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b740:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b743:	83 e8 41             	sub    eax,0x41
c000b746:	88 c2                	mov    dl,al
c000b748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b756:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b764:	0f b6 c0             	movzx  eax,al
c000b767:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b76e:	85 c0                	test   eax,eax
c000b770:	74 3e                	je     c000b7b0 <File::File(char const*, Process*)+0xb6>
c000b772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b776:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b77c:	0f b6 c0             	movzx  eax,al
c000b77f:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b786:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b78c:	85 c0                	test   eax,eax
c000b78e:	75 20                	jne    c000b7b0 <File::File(char const*, Process*)+0xb6>
c000b790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b794:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b79a:	0f b6 c0             	movzx  eax,al
c000b79d:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b7a4:	83 ec 0c             	sub    esp,0xc
c000b7a7:	50                   	push   eax
c000b7a8:	e8 75 21 00 00       	call   c000d922 <LogicalDisk::mount()>
c000b7ad:	83 c4 10             	add    esp,0x10
c000b7b0:	90                   	nop
c000b7b1:	83 c4 0c             	add    esp,0xc
c000b7b4:	c3                   	ret    
c000b7b5:	90                   	nop

c000b7b6 <File::open(FileOpenMode)>:
c000b7b6:	53                   	push   ebx
c000b7b7:	b8 0b 00 00 00       	mov    eax,0xb
c000b7bc:	83 ec 08             	sub    esp,0x8
c000b7bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7c3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7ca:	83 fa 19             	cmp    edx,0x19
c000b7cd:	77 40                	ja     c000b80f <File::open(FileOpenMode)+0x59>
c000b7cf:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b7d6:	85 d2                	test   edx,edx
c000b7d8:	74 35                	je     c000b80f <File::open(FileOpenMode)+0x59>
c000b7da:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7e0:	85 d2                	test   edx,edx
c000b7e2:	74 2b                	je     c000b80f <File::open(FileOpenMode)+0x59>
c000b7e4:	b8 06 00 00 00       	mov    eax,0x6
c000b7e9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7ed:	75 20                	jne    c000b80f <File::open(FileOpenMode)+0x59>
c000b7ef:	8b 02                	mov    eax,DWORD PTR [edx]
c000b7f1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b7f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fb:	51                   	push   ecx
c000b7fc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7ff:	51                   	push   ecx
c000b800:	52                   	push   edx
c000b801:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b804:	83 c4 10             	add    esp,0x10
c000b807:	85 c0                	test   eax,eax
c000b809:	75 04                	jne    c000b80f <File::open(FileOpenMode)+0x59>
c000b80b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b80f:	83 c4 08             	add    esp,0x8
c000b812:	5b                   	pop    ebx
c000b813:	c3                   	ret    

c000b814 <File::close()>:
c000b814:	53                   	push   ebx
c000b815:	b8 0b 00 00 00       	mov    eax,0xb
c000b81a:	83 ec 08             	sub    esp,0x8
c000b81d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b821:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b828:	83 f9 19             	cmp    ecx,0x19
c000b82b:	77 41                	ja     c000b86e <File::close()+0x5a>
c000b82d:	8b 1c 8d e0 94 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b834:	85 db                	test   ebx,ebx
c000b836:	74 36                	je     c000b86e <File::close()+0x5a>
c000b838:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b83f:	74 2d                	je     c000b86e <File::close()+0x5a>
c000b841:	b8 05 00 00 00       	mov    eax,0x5
c000b846:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b84a:	74 22                	je     c000b86e <File::close()+0x5a>
c000b84c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b850:	8b 04 8d e0 94 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6b20]
c000b857:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b85d:	53                   	push   ebx
c000b85e:	53                   	push   ebx
c000b85f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b861:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b867:	50                   	push   eax
c000b868:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b86b:	83 c4 10             	add    esp,0x10
c000b86e:	83 c4 08             	add    esp,0x8
c000b871:	5b                   	pop    ebx
c000b872:	c3                   	ret    
c000b873:	90                   	nop

c000b874 <File::seek(unsigned long long)>:
c000b874:	56                   	push   esi
c000b875:	53                   	push   ebx
c000b876:	b8 0b 00 00 00       	mov    eax,0xb
c000b87b:	51                   	push   ecx
c000b87c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b880:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b884:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b88b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b88f:	83 fa 19             	cmp    edx,0x19
c000b892:	77 31                	ja     c000b8c5 <File::seek(unsigned long long)+0x51>
c000b894:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b89b:	85 d2                	test   edx,edx
c000b89d:	74 26                	je     c000b8c5 <File::seek(unsigned long long)+0x51>
c000b89f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8a5:	85 d2                	test   edx,edx
c000b8a7:	74 1c                	je     c000b8c5 <File::seek(unsigned long long)+0x51>
c000b8a9:	b8 05 00 00 00       	mov    eax,0x5
c000b8ae:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8b2:	74 11                	je     c000b8c5 <File::seek(unsigned long long)+0x51>
c000b8b4:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8b6:	53                   	push   ebx
c000b8b7:	51                   	push   ecx
c000b8b8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b8be:	52                   	push   edx
c000b8bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	5a                   	pop    edx
c000b8c6:	5b                   	pop    ebx
c000b8c7:	5e                   	pop    esi
c000b8c8:	c3                   	ret    
c000b8c9:	90                   	nop

c000b8ca <File::truncate(unsigned long long)>:
c000b8ca:	56                   	push   esi
c000b8cb:	53                   	push   ebx
c000b8cc:	b8 0b 00 00 00       	mov    eax,0xb
c000b8d1:	51                   	push   ecx
c000b8d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8da:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8e5:	83 fa 19             	cmp    edx,0x19
c000b8e8:	77 31                	ja     c000b91b <File::truncate(unsigned long long)+0x51>
c000b8ea:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b8f1:	85 d2                	test   edx,edx
c000b8f3:	74 26                	je     c000b91b <File::truncate(unsigned long long)+0x51>
c000b8f5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8fb:	85 d2                	test   edx,edx
c000b8fd:	74 1c                	je     c000b91b <File::truncate(unsigned long long)+0x51>
c000b8ff:	b8 05 00 00 00       	mov    eax,0x5
c000b904:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b908:	74 11                	je     c000b91b <File::truncate(unsigned long long)+0x51>
c000b90a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b90c:	53                   	push   ebx
c000b90d:	51                   	push   ecx
c000b90e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b914:	52                   	push   edx
c000b915:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b918:	83 c4 10             	add    esp,0x10
c000b91b:	5a                   	pop    edx
c000b91c:	5b                   	pop    ebx
c000b91d:	5e                   	pop    esi
c000b91e:	c3                   	ret    
c000b91f:	90                   	nop

c000b920 <File::tell(unsigned long long*)>:
c000b920:	83 ec 0c             	sub    esp,0xc
c000b923:	b8 0b 00 00 00       	mov    eax,0xb
c000b928:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b92c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b933:	83 fa 19             	cmp    edx,0x19
c000b936:	77 34                	ja     c000b96c <File::tell(unsigned long long*)+0x4c>
c000b938:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b93f:	85 d2                	test   edx,edx
c000b941:	74 29                	je     c000b96c <File::tell(unsigned long long*)+0x4c>
c000b943:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b949:	85 d2                	test   edx,edx
c000b94b:	74 1f                	je     c000b96c <File::tell(unsigned long long*)+0x4c>
c000b94d:	b8 05 00 00 00       	mov    eax,0x5
c000b952:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b956:	74 14                	je     c000b96c <File::tell(unsigned long long*)+0x4c>
c000b958:	50                   	push   eax
c000b959:	8b 02                	mov    eax,DWORD PTR [edx]
c000b95b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b95f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b965:	52                   	push   edx
c000b966:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	83 c4 0c             	add    esp,0xc
c000b96f:	c3                   	ret    

c000b970 <File::rewind()>:
c000b970:	83 ec 10             	sub    esp,0x10
c000b973:	6a 00                	push   0x0
c000b975:	6a 00                	push   0x0
c000b977:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b97b:	e8 f4 fe ff ff       	call   c000b874 <File::seek(unsigned long long)>
c000b980:	83 c4 1c             	add    esp,0x1c
c000b983:	c3                   	ret    

c000b984 <File::unlink()>:
c000b984:	83 ec 0c             	sub    esp,0xc
c000b987:	b8 0b 00 00 00       	mov    eax,0xb
c000b98c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b990:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b997:	83 f9 19             	cmp    ecx,0x19
c000b99a:	77 2f                	ja     c000b9cb <File::unlink()+0x47>
c000b99c:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b9a3:	85 c9                	test   ecx,ecx
c000b9a5:	74 24                	je     c000b9cb <File::unlink()+0x47>
c000b9a7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9ad:	85 c9                	test   ecx,ecx
c000b9af:	74 1a                	je     c000b9cb <File::unlink()+0x47>
c000b9b1:	b8 06 00 00 00       	mov    eax,0x6
c000b9b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9ba:	75 0f                	jne    c000b9cb <File::unlink()+0x47>
c000b9bc:	83 c2 0d             	add    edx,0xd
c000b9bf:	50                   	push   eax
c000b9c0:	50                   	push   eax
c000b9c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9c3:	52                   	push   edx
c000b9c4:	51                   	push   ecx
c000b9c5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b9c8:	83 c4 10             	add    esp,0x10
c000b9cb:	83 c4 0c             	add    esp,0xc
c000b9ce:	c3                   	ret    
c000b9cf:	90                   	nop

c000b9d0 <File::rename(char const*)>:
c000b9d0:	83 ec 0c             	sub    esp,0xc
c000b9d3:	b8 0b 00 00 00       	mov    eax,0xb
c000b9d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9e3:	83 f9 19             	cmp    ecx,0x19
c000b9e6:	77 32                	ja     c000ba1a <File::rename(char const*)+0x4a>
c000b9e8:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b9ef:	85 c9                	test   ecx,ecx
c000b9f1:	74 27                	je     c000ba1a <File::rename(char const*)+0x4a>
c000b9f3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9f9:	85 c9                	test   ecx,ecx
c000b9fb:	74 1d                	je     c000ba1a <File::rename(char const*)+0x4a>
c000b9fd:	b8 06 00 00 00       	mov    eax,0x6
c000ba02:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba06:	75 12                	jne    c000ba1a <File::rename(char const*)+0x4a>
c000ba08:	83 c2 0d             	add    edx,0xd
c000ba0b:	50                   	push   eax
c000ba0c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba12:	52                   	push   edx
c000ba13:	51                   	push   ecx
c000ba14:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ba17:	83 c4 10             	add    esp,0x10
c000ba1a:	83 c4 0c             	add    esp,0xc
c000ba1d:	c3                   	ret    

c000ba1e <File::chfatattr(unsigned char, unsigned char)>:
c000ba1e:	57                   	push   edi
c000ba1f:	b8 0b 00 00 00       	mov    eax,0xb
c000ba24:	56                   	push   esi
c000ba25:	53                   	push   ebx
c000ba26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba2a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ba2e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba35:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba39:	83 f9 19             	cmp    ecx,0x19
c000ba3c:	77 37                	ja     c000ba75 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba3e:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000ba45:	85 c9                	test   ecx,ecx
c000ba47:	74 2c                	je     c000ba75 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba49:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba4f:	85 c9                	test   ecx,ecx
c000ba51:	74 22                	je     c000ba75 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba53:	b8 06 00 00 00       	mov    eax,0x6
c000ba58:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba5c:	75 17                	jne    c000ba75 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba5e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ba60:	89 f0                	mov    eax,esi
c000ba62:	83 c2 0d             	add    edx,0xd
c000ba65:	0f b6 f0             	movzx  esi,al
c000ba68:	0f b6 db             	movzx  ebx,bl
c000ba6b:	56                   	push   esi
c000ba6c:	53                   	push   ebx
c000ba6d:	52                   	push   edx
c000ba6e:	51                   	push   ecx
c000ba6f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000ba72:	83 c4 10             	add    esp,0x10
c000ba75:	5b                   	pop    ebx
c000ba76:	5e                   	pop    esi
c000ba77:	5f                   	pop    edi
c000ba78:	c3                   	ret    
c000ba79:	90                   	nop

c000ba7a <File::exists()>:
c000ba7a:	83 ec 0c             	sub    esp,0xc
c000ba7d:	31 c0                	xor    eax,eax
c000ba7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba83:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba8a:	83 f9 19             	cmp    ecx,0x19
c000ba8d:	77 24                	ja     c000bab3 <File::exists()+0x39>
c000ba8f:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000ba96:	85 c9                	test   ecx,ecx
c000ba98:	74 19                	je     c000bab3 <File::exists()+0x39>
c000ba9a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000baa0:	85 c9                	test   ecx,ecx
c000baa2:	74 0f                	je     c000bab3 <File::exists()+0x39>
c000baa4:	83 c2 0d             	add    edx,0xd
c000baa7:	50                   	push   eax
c000baa8:	50                   	push   eax
c000baa9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000baab:	52                   	push   edx
c000baac:	51                   	push   ecx
c000baad:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bab0:	83 c4 10             	add    esp,0x10
c000bab3:	83 c4 0c             	add    esp,0xc
c000bab6:	c3                   	ret    
c000bab7:	90                   	nop

c000bab8 <File::stat(unsigned long long*, bool*)>:
c000bab8:	56                   	push   esi
c000bab9:	53                   	push   ebx
c000baba:	50                   	push   eax
c000babb:	b8 0b 00 00 00       	mov    eax,0xb
c000bac0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bac4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bac8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bacf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bad3:	83 f9 19             	cmp    ecx,0x19
c000bad6:	77 3d                	ja     c000bb15 <File::stat(unsigned long long*, bool*)+0x5d>
c000bad8:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000badf:	85 c9                	test   ecx,ecx
c000bae1:	74 32                	je     c000bb15 <File::stat(unsigned long long*, bool*)+0x5d>
c000bae3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bae9:	85 c9                	test   ecx,ecx
c000baeb:	74 28                	je     c000bb15 <File::stat(unsigned long long*, bool*)+0x5d>
c000baed:	8b 01                	mov    eax,DWORD PTR [ecx]
c000baef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000baf3:	74 13                	je     c000bb08 <File::stat(unsigned long long*, bool*)+0x50>
c000baf5:	83 ec 04             	sub    esp,0x4
c000baf8:	56                   	push   esi
c000baf9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000baff:	51                   	push   ecx
c000bb00:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bb03:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bb06:	eb 0a                	jmp    c000bb12 <File::stat(unsigned long long*, bool*)+0x5a>
c000bb08:	53                   	push   ebx
c000bb09:	83 c2 0d             	add    edx,0xd
c000bb0c:	56                   	push   esi
c000bb0d:	52                   	push   edx
c000bb0e:	51                   	push   ecx
c000bb0f:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	5a                   	pop    edx
c000bb16:	5b                   	pop    ebx
c000bb17:	5e                   	pop    esi
c000bb18:	c3                   	ret    

c000bb19 <Fs::setcwd(Process*, char*)>:
c000bb19:	55                   	push   ebp
c000bb1a:	57                   	push   edi
c000bb1b:	56                   	push   esi
c000bb1c:	53                   	push   ebx
c000bb1d:	81 ec 20 02 00 00    	sub    esp,0x220
c000bb23:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bb2a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bb30:	57                   	push   edi
c000bb31:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bb38:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bb3c:	56                   	push   esi
c000bb3d:	e8 02 fa ff ff       	call   c000b544 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bb42:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb45:	e8 26 4a ff ff       	call   c0000570 <strlen>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	83 f8 02             	cmp    eax,0x2
c000bb50:	77 15                	ja     c000bb67 <Fs::setcwd(Process*, char*)+0x4e>
c000bb52:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bb57:	83 eb 41             	sub    ebx,0x41
c000bb5a:	8b 04 9d e0 94 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6b20]
c000bb61:	85 c0                	test   eax,eax
c000bb63:	75 1c                	jne    c000bb81 <Fs::setcwd(Process*, char*)+0x68>
c000bb65:	eb 2f                	jmp    c000bb96 <Fs::setcwd(Process*, char*)+0x7d>
c000bb67:	83 ec 0c             	sub    esp,0xc
c000bb6a:	56                   	push   esi
c000bb6b:	e8 00 4a ff ff       	call   c0000570 <strlen>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	83 f8 03             	cmp    eax,0x3
c000bb76:	75 57                	jne    c000bbcf <Fs::setcwd(Process*, char*)+0xb6>
c000bb78:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bb7d:	75 50                	jne    c000bbcf <Fs::setcwd(Process*, char*)+0xb6>
c000bb7f:	eb d1                	jmp    c000bb52 <Fs::setcwd(Process*, char*)+0x39>
c000bb81:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bb88:	75 0c                	jne    c000bb96 <Fs::setcwd(Process*, char*)+0x7d>
c000bb8a:	83 ec 0c             	sub    esp,0xc
c000bb8d:	50                   	push   eax
c000bb8e:	e8 8f 1d 00 00       	call   c000d922 <LogicalDisk::mount()>
c000bb93:	83 c4 10             	add    esp,0x10
c000bb96:	b8 03 00 00 00       	mov    eax,0x3
c000bb9b:	83 fb 19             	cmp    ebx,0x19
c000bb9e:	0f 87 c6 00 00 00    	ja     c000bc6a <Fs::setcwd(Process*, char*)+0x151>
c000bba4:	8b 14 9d e0 94 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6b20]
c000bbab:	b8 05 00 00 00       	mov    eax,0x5
c000bbb0:	85 d2                	test   edx,edx
c000bbb2:	0f 84 b2 00 00 00    	je     c000bc6a <Fs::setcwd(Process*, char*)+0x151>
c000bbb8:	b8 06 00 00 00       	mov    eax,0x6
c000bbbd:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bbc4:	0f 85 92 00 00 00    	jne    c000bc5c <Fs::setcwd(Process*, char*)+0x143>
c000bbca:	e9 9b 00 00 00       	jmp    c000bc6a <Fs::setcwd(Process*, char*)+0x151>
c000bbcf:	83 ec 0c             	sub    esp,0xc
c000bbd2:	68 14 01 00 00       	push   0x114
c000bbd7:	e8 da be ff ff       	call   c0007ab6 <malloc>
c000bbdc:	83 c4 0c             	add    esp,0xc
c000bbdf:	89 c3                	mov    ebx,eax
c000bbe1:	55                   	push   ebp
c000bbe2:	56                   	push   esi
c000bbe3:	50                   	push   eax
c000bbe4:	e8 11 fb ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c000bbe9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bbee:	83 c4 0c             	add    esp,0xc
c000bbf1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bbf5:	50                   	push   eax
c000bbf6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bbfa:	50                   	push   eax
c000bbfb:	53                   	push   ebx
c000bbfc:	e8 b7 fe ff ff       	call   c000bab8 <File::stat(unsigned long long*, bool*)>
c000bc01:	83 c4 10             	add    esp,0x10
c000bc04:	83 f8 02             	cmp    eax,0x2
c000bc07:	74 27                	je     c000bc30 <Fs::setcwd(Process*, char*)+0x117>
c000bc09:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bc0e:	75 1c                	jne    c000bc2c <Fs::setcwd(Process*, char*)+0x113>
c000bc10:	b8 02 00 00 00       	mov    eax,0x2
c000bc15:	85 db                	test   ebx,ebx
c000bc17:	74 51                	je     c000bc6a <Fs::setcwd(Process*, char*)+0x151>
c000bc19:	83 ec 0c             	sub    esp,0xc
c000bc1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc1e:	53                   	push   ebx
c000bc1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	b8 02 00 00 00       	mov    eax,0x2
c000bc2a:	eb 3e                	jmp    c000bc6a <Fs::setcwd(Process*, char*)+0x151>
c000bc2c:	85 c0                	test   eax,eax
c000bc2e:	74 1c                	je     c000bc4c <Fs::setcwd(Process*, char*)+0x133>
c000bc30:	b8 01 00 00 00       	mov    eax,0x1
c000bc35:	85 db                	test   ebx,ebx
c000bc37:	74 31                	je     c000bc6a <Fs::setcwd(Process*, char*)+0x151>
c000bc39:	83 ec 0c             	sub    esp,0xc
c000bc3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc3e:	53                   	push   ebx
c000bc3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc42:	83 c4 10             	add    esp,0x10
c000bc45:	b8 01 00 00 00       	mov    eax,0x1
c000bc4a:	eb 1e                	jmp    c000bc6a <Fs::setcwd(Process*, char*)+0x151>
c000bc4c:	85 db                	test   ebx,ebx
c000bc4e:	74 0c                	je     c000bc5c <Fs::setcwd(Process*, char*)+0x143>
c000bc50:	83 ec 0c             	sub    esp,0xc
c000bc53:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc55:	53                   	push   ebx
c000bc56:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc59:	83 c4 10             	add    esp,0x10
c000bc5c:	50                   	push   eax
c000bc5d:	50                   	push   eax
c000bc5e:	56                   	push   esi
c000bc5f:	57                   	push   edi
c000bc60:	e8 db 49 ff ff       	call   c0000640 <strcpy>
c000bc65:	83 c4 10             	add    esp,0x10
c000bc68:	31 c0                	xor    eax,eax
c000bc6a:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bc70:	5b                   	pop    ebx
c000bc71:	5e                   	pop    esi
c000bc72:	5f                   	pop    edi
c000bc73:	5d                   	pop    ebp
c000bc74:	c3                   	ret    
c000bc75:	90                   	nop

c000bc76 <Directory::Directory(char const*, Process*)>:
c000bc76:	83 ec 0c             	sub    esp,0xc
c000bc79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc7d:	83 ec 08             	sub    esp,0x8
c000bc80:	6a 00                	push   0x0
c000bc82:	50                   	push   eax
c000bc83:	e8 36 d5 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bc88:	83 c4 10             	add    esp,0x10
c000bc8b:	ba ec 12 02 c0       	mov    edx,0xc00212ec
c000bc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc94:	89 10                	mov    DWORD PTR [eax],edx
c000bc96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc9a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca4:	83 c0 0d             	add    eax,0xd
c000bca7:	83 ec 04             	sub    esp,0x4
c000bcaa:	52                   	push   edx
c000bcab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcaf:	50                   	push   eax
c000bcb0:	e8 8f f8 ff ff       	call   c000b544 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bcb5:	83 c4 10             	add    esp,0x10
c000bcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcbc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bcbf:	83 e8 41             	sub    eax,0x41
c000bcc2:	88 c2                	mov    dl,al
c000bcc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bcce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcda:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bce0:	0f b6 c0             	movzx  eax,al
c000bce3:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcea:	85 c0                	test   eax,eax
c000bcec:	74 3e                	je     c000bd2c <Directory::Directory(char const*, Process*)+0xb6>
c000bcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcf8:	0f b6 c0             	movzx  eax,al
c000bcfb:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bd02:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bd08:	85 c0                	test   eax,eax
c000bd0a:	75 20                	jne    c000bd2c <Directory::Directory(char const*, Process*)+0xb6>
c000bd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd10:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd16:	0f b6 c0             	movzx  eax,al
c000bd19:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bd20:	83 ec 0c             	sub    esp,0xc
c000bd23:	50                   	push   eax
c000bd24:	e8 f9 1b 00 00       	call   c000d922 <LogicalDisk::mount()>
c000bd29:	83 c4 10             	add    esp,0x10
c000bd2c:	90                   	nop
c000bd2d:	83 c4 0c             	add    esp,0xc
c000bd30:	c3                   	ret    
c000bd31:	90                   	nop

c000bd32 <Directory::open()>:
c000bd32:	53                   	push   ebx
c000bd33:	b8 0b 00 00 00       	mov    eax,0xb
c000bd38:	83 ec 08             	sub    esp,0x8
c000bd3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd3f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bd46:	83 fa 19             	cmp    edx,0x19
c000bd49:	77 3d                	ja     c000bd88 <Directory::open()+0x56>
c000bd4b:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000bd52:	85 d2                	test   edx,edx
c000bd54:	74 32                	je     c000bd88 <Directory::open()+0x56>
c000bd56:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd5c:	85 d2                	test   edx,edx
c000bd5e:	74 28                	je     c000bd88 <Directory::open()+0x56>
c000bd60:	b8 06 00 00 00       	mov    eax,0x6
c000bd65:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bd69:	75 1d                	jne    c000bd88 <Directory::open()+0x56>
c000bd6b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bd71:	50                   	push   eax
c000bd72:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd74:	51                   	push   ecx
c000bd75:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bd78:	51                   	push   ecx
c000bd79:	52                   	push   edx
c000bd7a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bd7d:	83 c4 10             	add    esp,0x10
c000bd80:	85 c0                	test   eax,eax
c000bd82:	75 04                	jne    c000bd88 <Directory::open()+0x56>
c000bd84:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bd88:	83 c4 08             	add    esp,0x8
c000bd8b:	5b                   	pop    ebx
c000bd8c:	c3                   	ret    
c000bd8d:	90                   	nop

c000bd8e <Directory::close()>:
c000bd8e:	53                   	push   ebx
c000bd8f:	b8 0b 00 00 00       	mov    eax,0xb
c000bd94:	83 ec 08             	sub    esp,0x8
c000bd97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd9b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bda2:	83 f9 19             	cmp    ecx,0x19
c000bda5:	77 41                	ja     c000bde8 <Directory::close()+0x5a>
c000bda7:	8b 1c 8d e0 94 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bdae:	85 db                	test   ebx,ebx
c000bdb0:	74 36                	je     c000bde8 <Directory::close()+0x5a>
c000bdb2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bdb9:	74 2d                	je     c000bde8 <Directory::close()+0x5a>
c000bdbb:	b8 05 00 00 00       	mov    eax,0x5
c000bdc0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdc4:	74 22                	je     c000bde8 <Directory::close()+0x5a>
c000bdc6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bdca:	8b 04 8d e0 94 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6b20]
c000bdd1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bdd7:	53                   	push   ebx
c000bdd8:	53                   	push   ebx
c000bdd9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bddb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bde1:	50                   	push   eax
c000bde2:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bde5:	83 c4 10             	add    esp,0x10
c000bde8:	83 c4 08             	add    esp,0x8
c000bdeb:	5b                   	pop    ebx
c000bdec:	c3                   	ret    
c000bded:	90                   	nop

c000bdee <Directory::unlink()>:
c000bdee:	83 ec 0c             	sub    esp,0xc
c000bdf1:	b8 0b 00 00 00       	mov    eax,0xb
c000bdf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdfa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be01:	83 f9 19             	cmp    ecx,0x19
c000be04:	77 2f                	ja     c000be35 <Directory::unlink()+0x47>
c000be06:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000be0d:	85 c9                	test   ecx,ecx
c000be0f:	74 24                	je     c000be35 <Directory::unlink()+0x47>
c000be11:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be17:	85 c9                	test   ecx,ecx
c000be19:	74 1a                	je     c000be35 <Directory::unlink()+0x47>
c000be1b:	b8 06 00 00 00       	mov    eax,0x6
c000be20:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be24:	75 0f                	jne    c000be35 <Directory::unlink()+0x47>
c000be26:	83 c2 0d             	add    edx,0xd
c000be29:	50                   	push   eax
c000be2a:	50                   	push   eax
c000be2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be2d:	52                   	push   edx
c000be2e:	51                   	push   ecx
c000be2f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	83 c4 0c             	add    esp,0xc
c000be38:	c3                   	ret    
c000be39:	90                   	nop

c000be3a <Directory::rename(char const*)>:
c000be3a:	83 ec 0c             	sub    esp,0xc
c000be3d:	b8 0b 00 00 00       	mov    eax,0xb
c000be42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be4d:	83 f9 19             	cmp    ecx,0x19
c000be50:	77 32                	ja     c000be84 <Directory::rename(char const*)+0x4a>
c000be52:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000be59:	85 c9                	test   ecx,ecx
c000be5b:	74 27                	je     c000be84 <Directory::rename(char const*)+0x4a>
c000be5d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be63:	85 c9                	test   ecx,ecx
c000be65:	74 1d                	je     c000be84 <Directory::rename(char const*)+0x4a>
c000be67:	b8 06 00 00 00       	mov    eax,0x6
c000be6c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be70:	75 12                	jne    c000be84 <Directory::rename(char const*)+0x4a>
c000be72:	83 c2 0d             	add    edx,0xd
c000be75:	50                   	push   eax
c000be76:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be7c:	52                   	push   edx
c000be7d:	51                   	push   ecx
c000be7e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be81:	83 c4 10             	add    esp,0x10
c000be84:	83 c4 0c             	add    esp,0xc
c000be87:	c3                   	ret    

c000be88 <Directory::exists()>:
c000be88:	83 ec 0c             	sub    esp,0xc
c000be8b:	31 c0                	xor    eax,eax
c000be8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be91:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be98:	83 f9 19             	cmp    ecx,0x19
c000be9b:	77 24                	ja     c000bec1 <Directory::exists()+0x39>
c000be9d:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bea4:	85 c9                	test   ecx,ecx
c000bea6:	74 19                	je     c000bec1 <Directory::exists()+0x39>
c000bea8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000beae:	85 c9                	test   ecx,ecx
c000beb0:	74 0f                	je     c000bec1 <Directory::exists()+0x39>
c000beb2:	83 c2 0d             	add    edx,0xd
c000beb5:	50                   	push   eax
c000beb6:	50                   	push   eax
c000beb7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000beb9:	52                   	push   edx
c000beba:	51                   	push   ecx
c000bebb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bebe:	83 c4 10             	add    esp,0x10
c000bec1:	83 c4 0c             	add    esp,0xc
c000bec4:	c3                   	ret    
c000bec5:	90                   	nop

c000bec6 <Directory::read(dirent*)>:
c000bec6:	83 ec 1c             	sub    esp,0x1c
c000bec9:	b8 0b 00 00 00       	mov    eax,0xb
c000bece:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bed2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bed9:	83 f9 19             	cmp    ecx,0x19
c000bedc:	77 30                	ja     c000bf0e <Directory::read(dirent*)+0x48>
c000bede:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bee5:	85 c9                	test   ecx,ecx
c000bee7:	74 25                	je     c000bf0e <Directory::read(dirent*)+0x48>
c000bee9:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bef0:	74 1c                	je     c000bf0e <Directory::read(dirent*)+0x48>
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	8b 02                	mov    eax,DWORD PTR [edx]
c000bef7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000befb:	51                   	push   ecx
c000befc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf00:	6a 00                	push   0x0
c000bf02:	68 10 01 00 00       	push   0x110
c000bf07:	52                   	push   edx
c000bf08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf0b:	83 c4 20             	add    esp,0x20
c000bf0e:	83 c4 1c             	add    esp,0x1c
c000bf11:	c3                   	ret    

c000bf12 <Directory::create()>:
c000bf12:	83 ec 0c             	sub    esp,0xc
c000bf15:	b8 0b 00 00 00       	mov    eax,0xb
c000bf1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf25:	83 f9 19             	cmp    ecx,0x19
c000bf28:	77 2f                	ja     c000bf59 <Directory::create()+0x47>
c000bf2a:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bf31:	85 c9                	test   ecx,ecx
c000bf33:	74 24                	je     c000bf59 <Directory::create()+0x47>
c000bf35:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf3b:	85 c9                	test   ecx,ecx
c000bf3d:	74 1a                	je     c000bf59 <Directory::create()+0x47>
c000bf3f:	b8 06 00 00 00       	mov    eax,0x6
c000bf44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf48:	75 0f                	jne    c000bf59 <Directory::create()+0x47>
c000bf4a:	83 c2 0d             	add    edx,0xd
c000bf4d:	50                   	push   eax
c000bf4e:	50                   	push   eax
c000bf4f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf51:	52                   	push   edx
c000bf52:	51                   	push   ecx
c000bf53:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bf56:	83 c4 10             	add    esp,0x10
c000bf59:	83 c4 0c             	add    esp,0xc
c000bf5c:	c3                   	ret    
c000bf5d:	90                   	nop

c000bf5e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000bf5e:	b8 0a 00 00 00       	mov    eax,0xa
c000bf63:	c3                   	ret    

c000bf64 <Bus::Bus(char const*)>:
c000bf64:	83 ec 0c             	sub    esp,0xc
c000bf67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf6b:	83 ec 08             	sub    esp,0x8
c000bf6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf72:	50                   	push   eax
c000bf73:	e8 22 08 00 00       	call   c000c79a <Device::Device(char const*)>
c000bf78:	83 c4 10             	add    esp,0x10
c000bf7b:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000bf80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf84:	89 10                	mov    DWORD PTR [eax],edx
c000bf86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000bf94:	90                   	nop
c000bf95:	83 c4 0c             	add    esp,0xc
c000bf98:	c3                   	ret    
c000bf99:	90                   	nop
c000bf9a:	66 90                	xchg   ax,ax

c000bf9c <Bus::~Bus()>:
c000bf9c:	83 ec 0c             	sub    esp,0xc
c000bf9f:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000bfa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfa8:	89 10                	mov    DWORD PTR [eax],edx
c000bfaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfae:	83 ec 0c             	sub    esp,0xc
c000bfb1:	50                   	push   eax
c000bfb2:	e8 4d 05 00 00       	call   c000c504 <Device::~Device()>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	90                   	nop
c000bfbb:	83 c4 0c             	add    esp,0xc
c000bfbe:	c3                   	ret    
c000bfbf:	90                   	nop

c000bfc0 <Bus::~Bus()>:
c000bfc0:	83 ec 0c             	sub    esp,0xc
c000bfc3:	83 ec 0c             	sub    esp,0xc
c000bfc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfca:	e8 cd ff ff ff       	call   c000bf9c <Bus::~Bus()>
c000bfcf:	83 c4 10             	add    esp,0x10
c000bfd2:	83 ec 08             	sub    esp,0x8
c000bfd5:	68 58 01 00 00       	push   0x158
c000bfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfde:	e8 35 e8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000bfe3:	83 c4 10             	add    esp,0x10
c000bfe6:	83 c4 0c             	add    esp,0xc
c000bfe9:	c3                   	ret    

c000bfea <beepThread(void*)>:
c000bfea:	83 ec 0c             	sub    esp,0xc
c000bfed:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000bff2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bff6:	48                   	dec    eax
c000bff7:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000bffc:	75 01                	jne    c000bfff <beepThread(void*)+0x15>
c000bffe:	fb                   	sti    
c000bfff:	83 ec 0c             	sub    esp,0xc
c000c002:	6b c2 0a             	imul   eax,edx,0xa
c000c005:	50                   	push   eax
c000c006:	e8 f1 9d 00 00       	call   c0015dfc <milliTenthSleep(unsigned int)>
c000c00b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c012:	e8 40 bd 00 00       	call   c0017d57 <HalMakeBeep(int)>
c000c017:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c01f:	83 c4 1c             	add    esp,0x1c
c000c022:	e9 b9 9c 00 00       	jmp    c0015ce0 <blockTask(TaskState)>

c000c027 <Krnl::beep(int, int, bool)>:
c000c027:	56                   	push   esi
c000c028:	53                   	push   ebx
c000c029:	83 ec 10             	sub    esp,0x10
c000c02c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c030:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c038:	e8 1a bd 00 00       	call   c0017d57 <HalMakeBeep(int)>
c000c03d:	83 c4 10             	add    esp,0x10
c000c040:	89 f0                	mov    eax,esi
c000c042:	84 c0                	test   al,al
c000c044:	74 1e                	je     c000c064 <Krnl::beep(int, int, bool)+0x3d>
c000c046:	83 ec 0c             	sub    esp,0xc
c000c049:	6b db 0a             	imul   ebx,ebx,0xa
c000c04c:	53                   	push   ebx
c000c04d:	e8 aa 9d 00 00       	call   c0015dfc <milliTenthSleep(unsigned int)>
c000c052:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c05a:	83 c4 14             	add    esp,0x14
c000c05d:	5b                   	pop    ebx
c000c05e:	5e                   	pop    esi
c000c05f:	e9 f3 bc 00 00       	jmp    c0017d57 <HalMakeBeep(int)>
c000c064:	68 e6 00 00 00       	push   0xe6
c000c069:	53                   	push   ebx
c000c06a:	68 ea bf 00 c0       	push   0xc000bfea
c000c06f:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000c075:	e8 02 98 00 00       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c000c07a:	83 c4 14             	add    esp,0x14
c000c07d:	5b                   	pop    ebx
c000c07e:	5e                   	pop    esi
c000c07f:	c3                   	ret    

c000c080 <User::loadClockSettings(int)>:
c000c080:	53                   	push   ebx
c000c081:	83 ec 14             	sub    esp,0x14
c000c084:	68 14 01 00 00       	push   0x114
c000c089:	e8 28 ba ff ff       	call   c0007ab6 <malloc>
c000c08e:	83 c4 0c             	add    esp,0xc
c000c091:	89 c3                	mov    ebx,eax
c000c093:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000c099:	68 2c 13 02 c0       	push   0xc002132c
c000c09e:	50                   	push   eax
c000c09f:	e8 56 f6 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c000c0a4:	58                   	pop    eax
c000c0a5:	5a                   	pop    edx
c000c0a6:	6a 01                	push   0x1
c000c0a8:	53                   	push   ebx
c000c0a9:	e8 08 f7 ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c000c0ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c0b1:	e8 5e f7 ff ff       	call   c000b814 <File::close()>
c000c0b6:	83 c4 10             	add    esp,0x10
c000c0b9:	85 db                	test   ebx,ebx
c000c0bb:	74 0f                	je     c000c0cc <User::loadClockSettings(int)+0x4c>
c000c0bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0bf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c0c3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c0c6:	83 c4 08             	add    esp,0x8
c000c0c9:	5b                   	pop    ebx
c000c0ca:	ff e0                	jmp    eax
c000c0cc:	83 c4 08             	add    esp,0x8
c000c0cf:	5b                   	pop    ebx
c000c0d0:	c3                   	ret    
c000c0d1:	90                   	nop

c000c0d2 <Clock::Clock(char const*)>:
c000c0d2:	83 ec 0c             	sub    esp,0xc
c000c0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d9:	83 ec 08             	sub    esp,0x8
c000c0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e0:	50                   	push   eax
c000c0e1:	e8 b4 06 00 00       	call   c000c79a <Device::Device(char const*)>
c000c0e6:	83 c4 10             	add    esp,0x10
c000c0e9:	ba 54 13 02 c0       	mov    edx,0xc0021354
c000c0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f2:	89 10                	mov    DWORD PTR [eax],edx
c000c0f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c102:	90                   	nop
c000c103:	83 c4 0c             	add    esp,0xc
c000c106:	c3                   	ret    
c000c107:	90                   	nop

c000c108 <Clock::~Clock()>:
c000c108:	83 ec 0c             	sub    esp,0xc
c000c10b:	ba 54 13 02 c0       	mov    edx,0xc0021354
c000c110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c114:	89 10                	mov    DWORD PTR [eax],edx
c000c116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11a:	83 ec 0c             	sub    esp,0xc
c000c11d:	50                   	push   eax
c000c11e:	e8 e1 03 00 00       	call   c000c504 <Device::~Device()>
c000c123:	83 c4 10             	add    esp,0x10
c000c126:	90                   	nop
c000c127:	83 c4 0c             	add    esp,0xc
c000c12a:	c3                   	ret    
c000c12b:	90                   	nop

c000c12c <Clock::~Clock()>:
c000c12c:	83 ec 0c             	sub    esp,0xc
c000c12f:	83 ec 0c             	sub    esp,0xc
c000c132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c136:	e8 cd ff ff ff       	call   c000c108 <Clock::~Clock()>
c000c13b:	83 c4 10             	add    esp,0x10
c000c13e:	83 ec 08             	sub    esp,0x8
c000c141:	68 58 01 00 00       	push   0x158
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	e8 c9 e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c14f:	83 c4 10             	add    esp,0x10
c000c152:	83 c4 0c             	add    esp,0xc
c000c155:	c3                   	ret    

c000c156 <Clock::timeInSecondsLocal()>:
c000c156:	53                   	push   ebx
c000c157:	83 ec 14             	sub    esp,0x14
c000c15a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c15e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c160:	50                   	push   eax
c000c161:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c164:	0f b6 0d 68 70 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027068
c000c16b:	03 0d 6c 70 02 c0    	add    ecx,DWORD PTR ds:0xc002706c
c000c171:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c177:	89 cb                	mov    ebx,ecx
c000c179:	c1 fb 1f             	sar    ebx,0x1f
c000c17c:	01 c8                	add    eax,ecx
c000c17e:	11 da                	adc    edx,ebx
c000c180:	83 c4 10             	add    esp,0x10
c000c183:	31 c9                	xor    ecx,ecx
c000c185:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c18c:	74 05                	je     c000c193 <Clock::timeInSecondsLocal()+0x3d>
c000c18e:	b9 08 07 00 00       	mov    ecx,0x708
c000c193:	31 db                	xor    ebx,ebx
c000c195:	01 c8                	add    eax,ecx
c000c197:	11 da                	adc    edx,ebx
c000c199:	83 c4 08             	add    esp,0x8
c000c19c:	5b                   	pop    ebx
c000c19d:	c3                   	ret    

c000c19e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c19e:	57                   	push   edi
c000c19f:	56                   	push   esi
c000c1a0:	53                   	push   ebx
c000c1a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c1a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c1af:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c1b2:	0f b6 05 68 70 02 c0 	movzx  eax,BYTE PTR ds:0xc0027068
c000c1b9:	03 05 6c 70 02 c0    	add    eax,DWORD PTR ds:0xc002706c
c000c1bf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c1c5:	99                   	cdq    
c000c1c6:	29 c6                	sub    esi,eax
c000c1c8:	19 d7                	sbb    edi,edx
c000c1ca:	89 f0                	mov    eax,esi
c000c1cc:	89 fa                	mov    edx,edi
c000c1ce:	31 f6                	xor    esi,esi
c000c1d0:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c1d7:	74 05                	je     c000c1de <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c1d9:	be 08 07 00 00       	mov    esi,0x708
c000c1de:	31 ff                	xor    edi,edi
c000c1e0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c1e4:	29 f0                	sub    eax,esi
c000c1e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1ea:	19 fa                	sbb    edx,edi
c000c1ec:	89 d8                	mov    eax,ebx
c000c1ee:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1f2:	5b                   	pop    ebx
c000c1f3:	5e                   	pop    esi
c000c1f4:	5f                   	pop    edi
c000c1f5:	ff e0                	jmp    eax

c000c1f7 <datetimeToSeconds(datetime_t)>:
c000c1f7:	55                   	push   ebp
c000c1f8:	57                   	push   edi
c000c1f9:	56                   	push   esi
c000c1fa:	53                   	push   ebx
c000c1fb:	83 ec 0c             	sub    esp,0xc
c000c1fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c202:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c206:	89 d6                	mov    esi,edx
c000c208:	0f b6 c7             	movzx  eax,bh
c000c20b:	c1 ee 10             	shr    esi,0x10
c000c20e:	6b e8 3c             	imul   ebp,eax,0x3c
c000c211:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c217:	0f b6 ce             	movzx  ecx,dh
c000c21a:	89 df                	mov    edi,ebx
c000c21c:	49                   	dec    ecx
c000c21d:	c1 ef 10             	shr    edi,0x10
c000c220:	0f b6 db             	movzx  ebx,bl
c000c223:	89 f8                	mov    eax,edi
c000c225:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c22b:	0f b6 f8             	movzx  edi,al
c000c22e:	0f b6 d2             	movzx  edx,dl
c000c231:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c235:	01 d8                	add    eax,ebx
c000c237:	0f b7 de             	movzx  ebx,si
c000c23a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c23d:	c1 f8 1f             	sar    eax,0x1f
c000c240:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c244:	0f b6 c1             	movzx  eax,cl
c000c247:	8b 0c 85 a0 13 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdec60]
c000c24e:	83 f8 01             	cmp    eax,0x1
c000c251:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c255:	76 27                	jbe    c000c27e <datetimeToSeconds(datetime_t)+0x87>
c000c257:	83 e6 03             	and    esi,0x3
c000c25a:	75 22                	jne    c000c27e <datetimeToSeconds(datetime_t)+0x87>
c000c25c:	31 d2                	xor    edx,edx
c000c25e:	be 64 00 00 00       	mov    esi,0x64
c000c263:	89 d8                	mov    eax,ebx
c000c265:	f7 f6                	div    esi
c000c267:	85 d2                	test   edx,edx
c000c269:	75 12                	jne    c000c27d <datetimeToSeconds(datetime_t)+0x86>
c000c26b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c271:	be 90 01 00 00       	mov    esi,0x190
c000c276:	99                   	cdq    
c000c277:	f7 fe                	idiv   esi
c000c279:	85 d2                	test   edx,edx
c000c27b:	75 01                	jne    c000c27e <datetimeToSeconds(datetime_t)+0x87>
c000c27d:	41                   	inc    ecx
c000c27e:	83 fb 46             	cmp    ebx,0x46
c000c281:	76 48                	jbe    c000c2cb <datetimeToSeconds(datetime_t)+0xd4>
c000c283:	be 46 00 00 00       	mov    esi,0x46
c000c288:	bf 64 00 00 00       	mov    edi,0x64
c000c28d:	bd 90 01 00 00       	mov    ebp,0x190
c000c292:	b8 6d 01 00 00       	mov    eax,0x16d
c000c297:	f7 c6 03 00 00 00    	test   esi,0x3
c000c29d:	75 23                	jne    c000c2c2 <datetimeToSeconds(datetime_t)+0xcb>
c000c29f:	89 f0                	mov    eax,esi
c000c2a1:	99                   	cdq    
c000c2a2:	f7 ff                	idiv   edi
c000c2a4:	b8 6e 01 00 00       	mov    eax,0x16e
c000c2a9:	85 d2                	test   edx,edx
c000c2ab:	75 15                	jne    c000c2c2 <datetimeToSeconds(datetime_t)+0xcb>
c000c2ad:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c2b3:	99                   	cdq    
c000c2b4:	f7 fd                	idiv   ebp
c000c2b6:	83 fa 01             	cmp    edx,0x1
c000c2b9:	19 c0                	sbb    eax,eax
c000c2bb:	f7 d0                	not    eax
c000c2bd:	05 6e 01 00 00       	add    eax,0x16e
c000c2c2:	01 c1                	add    ecx,eax
c000c2c4:	46                   	inc    esi
c000c2c5:	39 de                	cmp    esi,ebx
c000c2c7:	7c c9                	jl     c000c292 <datetimeToSeconds(datetime_t)+0x9b>
c000c2c9:	eb 34                	jmp    c000c2ff <datetimeToSeconds(datetime_t)+0x108>
c000c2cb:	74 32                	je     c000c2ff <datetimeToSeconds(datetime_t)+0x108>
c000c2cd:	b8 45 00 00 00       	mov    eax,0x45
c000c2d2:	89 c2                	mov    edx,eax
c000c2d4:	83 e2 03             	and    edx,0x3
c000c2d7:	39 d8                	cmp    eax,ebx
c000c2d9:	7e 0f                	jle    c000c2ea <datetimeToSeconds(datetime_t)+0xf3>
c000c2db:	83 fa 01             	cmp    edx,0x1
c000c2de:	19 d2                	sbb    edx,edx
c000c2e0:	48                   	dec    eax
c000c2e1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c2e8:	eb e8                	jmp    c000c2d2 <datetimeToSeconds(datetime_t)+0xdb>
c000c2ea:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2ef:	85 d2                	test   edx,edx
c000c2f1:	75 0a                	jne    c000c2fd <datetimeToSeconds(datetime_t)+0x106>
c000c2f3:	83 fb 01             	cmp    ebx,0x1
c000c2f6:	19 c0                	sbb    eax,eax
c000c2f8:	05 6e 01 00 00       	add    eax,0x16e
c000c2fd:	29 c1                	sub    ecx,eax
c000c2ff:	b8 80 51 01 00       	mov    eax,0x15180
c000c304:	f7 e9                	imul   ecx
c000c306:	03 04 24             	add    eax,DWORD PTR [esp]
c000c309:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c30d:	83 c4 0c             	add    esp,0xc
c000c310:	5b                   	pop    ebx
c000c311:	5e                   	pop    esi
c000c312:	5f                   	pop    edi
c000c313:	5d                   	pop    ebp
c000c314:	c3                   	ret    
c000c315:	90                   	nop

c000c316 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c316:	57                   	push   edi
c000c317:	56                   	push   esi
c000c318:	53                   	push   ebx
c000c319:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c31d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c31f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c322:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c32a:	e8 c8 fe ff ff       	call   c000c1f7 <datetimeToSeconds(datetime_t)>
c000c32f:	59                   	pop    ecx
c000c330:	0f b6 0d 68 70 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027068
c000c337:	5b                   	pop    ebx
c000c338:	03 0d 6c 70 02 c0    	add    ecx,DWORD PTR ds:0xc002706c
c000c33e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c344:	89 cb                	mov    ebx,ecx
c000c346:	c1 fb 1f             	sar    ebx,0x1f
c000c349:	29 c8                	sub    eax,ecx
c000c34b:	19 da                	sbb    edx,ebx
c000c34d:	31 c9                	xor    ecx,ecx
c000c34f:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c356:	74 05                	je     c000c35d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c358:	b9 08 07 00 00       	mov    ecx,0x708
c000c35d:	31 db                	xor    ebx,ebx
c000c35f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c363:	29 c8                	sub    eax,ecx
c000c365:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c369:	19 da                	sbb    edx,ebx
c000c36b:	89 f8                	mov    eax,edi
c000c36d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c371:	5b                   	pop    ebx
c000c372:	5e                   	pop    esi
c000c373:	5f                   	pop    edi
c000c374:	ff e0                	jmp    eax

c000c376 <secondsToDatetime(unsigned long long)>:
c000c376:	55                   	push   ebp
c000c377:	57                   	push   edi
c000c378:	56                   	push   esi
c000c379:	53                   	push   ebx
c000c37a:	83 ec 1c             	sub    esp,0x1c
c000c37d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c381:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c385:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c389:	6a 00                	push   0x0
c000c38b:	68 80 51 01 00       	push   0x15180
c000c390:	55                   	push   ebp
c000c391:	57                   	push   edi
c000c392:	e8 a9 2d 01 00       	call   c001f140 <__udivdi3>
c000c397:	83 c4 10             	add    esp,0x10
c000c39a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c3a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3a4:	6a 00                	push   0x0
c000c3a6:	68 80 51 01 00       	push   0x15180
c000c3ab:	55                   	push   ebp
c000c3ac:	57                   	push   edi
c000c3ad:	bf 10 0e 00 00       	mov    edi,0xe10
c000c3b2:	e8 89 2e 01 00       	call   c001f240 <__umoddi3>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	99                   	cdq    
c000c3bb:	f7 ff                	idiv   edi
c000c3bd:	bf 3c 00 00 00       	mov    edi,0x3c
c000c3c2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c3c5:	89 d0                	mov    eax,edx
c000c3c7:	99                   	cdq    
c000c3c8:	f7 ff                	idiv   edi
c000c3ca:	85 db                	test   ebx,ebx
c000c3cc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c3cf:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c3d2:	79 11                	jns    c000c3e5 <secondsToDatetime(unsigned long long)+0x6f>
c000c3d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3d8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c3de:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3e3:	eb 07                	jmp    c000c3ec <secondsToDatetime(unsigned long long)+0x76>
c000c3e5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3ea:	89 d8                	mov    eax,ebx
c000c3ec:	bf b4 05 00 00       	mov    edi,0x5b4
c000c3f1:	99                   	cdq    
c000c3f2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c3f7:	f7 f9                	idiv   ecx
c000c3f9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c3fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c402:	31 d2                	xor    edx,edx
c000c404:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c40c:	01 c3                	add    ebx,eax
c000c40e:	89 d8                	mov    eax,ebx
c000c410:	f7 f1                	div    ecx
c000c412:	31 d2                	xor    edx,edx
c000c414:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c417:	89 d8                	mov    eax,ebx
c000c419:	f7 f7                	div    edi
c000c41b:	31 d2                	xor    edx,edx
c000c41d:	29 c1                	sub    ecx,eax
c000c41f:	89 d8                	mov    eax,ebx
c000c421:	f7 f5                	div    ebp
c000c423:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c428:	29 c1                	sub    ecx,eax
c000c42a:	31 d2                	xor    edx,edx
c000c42c:	89 c8                	mov    eax,ecx
c000c42e:	f7 f5                	div    ebp
c000c430:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c435:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c439:	31 d2                	xor    edx,edx
c000c43b:	89 c8                	mov    eax,ecx
c000c43d:	f7 f5                	div    ebp
c000c43f:	31 d2                	xor    edx,edx
c000c441:	01 c3                	add    ebx,eax
c000c443:	89 c8                	mov    eax,ecx
c000c445:	f7 f7                	div    edi
c000c447:	bf 99 00 00 00       	mov    edi,0x99
c000c44c:	29 c3                	sub    ebx,eax
c000c44e:	31 d2                	xor    edx,edx
c000c450:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c458:	29 c3                	sub    ebx,eax
c000c45a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c45d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c460:	bb 05 00 00 00       	mov    ebx,0x5
c000c465:	83 c1 02             	add    ecx,0x2
c000c468:	89 c8                	mov    eax,ecx
c000c46a:	f7 f7                	div    edi
c000c46c:	31 d2                	xor    edx,edx
c000c46e:	89 c7                	mov    edi,eax
c000c470:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c476:	83 c0 02             	add    eax,0x2
c000c479:	f7 f3                	div    ebx
c000c47b:	89 eb                	mov    ebx,ebp
c000c47d:	29 c3                	sub    ebx,eax
c000c47f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c485:	88 1e                	mov    BYTE PTR [esi],bl
c000c487:	19 c0                	sbb    eax,eax
c000c489:	31 d2                	xor    edx,edx
c000c48b:	83 e0 0c             	and    eax,0xc
c000c48e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c492:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c49a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c49e:	83 f9 01             	cmp    ecx,0x1
c000c4a1:	0f 96 c2             	setbe  dl
c000c4a4:	41                   	inc    ecx
c000c4a5:	01 d0                	add    eax,edx
c000c4a7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c4aa:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c4ae:	83 c4 1c             	add    esp,0x1c
c000c4b1:	89 f0                	mov    eax,esi
c000c4b3:	5b                   	pop    ebx
c000c4b4:	5e                   	pop    esi
c000c4b5:	5f                   	pop    edi
c000c4b6:	5d                   	pop    ebp
c000c4b7:	c2 04 00             	ret    0x4

c000c4ba <Clock::timeInDatetimeLocal()>:
c000c4ba:	53                   	push   ebx
c000c4bb:	83 ec 14             	sub    esp,0x14
c000c4be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c4c6:	e8 8b fc ff ff       	call   c000c156 <Clock::timeInSecondsLocal()>
c000c4cb:	83 c4 0c             	add    esp,0xc
c000c4ce:	52                   	push   edx
c000c4cf:	50                   	push   eax
c000c4d0:	53                   	push   ebx
c000c4d1:	e8 a0 fe ff ff       	call   c000c376 <secondsToDatetime(unsigned long long)>
c000c4d6:	89 d8                	mov    eax,ebx
c000c4d8:	83 c4 14             	add    esp,0x14
c000c4db:	5b                   	pop    ebx
c000c4dc:	c2 04 00             	ret    0x4
c000c4df:	90                   	nop

c000c4e0 <Device::hibernate()>:
c000c4e0:	c3                   	ret    
c000c4e1:	90                   	nop

c000c4e2 <Device::wake()>:
c000c4e2:	c3                   	ret    
c000c4e3:	90                   	nop

c000c4e4 <Device::detect()>:
c000c4e4:	c3                   	ret    
c000c4e5:	90                   	nop

c000c4e6 <Device::disableLegacy()>:
c000c4e6:	c3                   	ret    
c000c4e7:	90                   	nop

c000c4e8 <Device::powerSaving(PowerSavingLevel)>:
c000c4e8:	c3                   	ret    
c000c4e9:	90                   	nop

c000c4ea <DriverlessDevice::close(int, int, void*)>:
c000c4ea:	31 c0                	xor    eax,eax
c000c4ec:	c3                   	ret    
c000c4ed:	90                   	nop

c000c4ee <DriverlessDevice::detect()>:
c000c4ee:	c3                   	ret    
c000c4ef:	90                   	nop

c000c4f0 <DriverlessDevice::open(int, int, void*)>:
c000c4f0:	83 ec 18             	sub    esp,0x18
c000c4f3:	68 d0 13 02 c0       	push   0xc00213d0
c000c4f8:	e8 10 4d 00 00       	call   c001120d <KePanic(char const*)>
c000c4fd:	83 c8 ff             	or     eax,0xffffffff
c000c500:	83 c4 1c             	add    esp,0x1c
c000c503:	c3                   	ret    

c000c504 <Device::~Device()>:
c000c504:	ba 30 14 02 c0       	mov    edx,0xc0021430
c000c509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c50d:	89 10                	mov    DWORD PTR [eax],edx
c000c50f:	90                   	nop
c000c510:	c3                   	ret    
c000c511:	90                   	nop

c000c512 <Device::~Device()>:
c000c512:	83 ec 0c             	sub    esp,0xc
c000c515:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c519:	e8 e6 ff ff ff       	call   c000c504 <Device::~Device()>
c000c51e:	83 c4 04             	add    esp,0x4
c000c521:	83 ec 08             	sub    esp,0x8
c000c524:	68 58 01 00 00       	push   0x158
c000c529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52d:	e8 e6 e2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c532:	83 c4 10             	add    esp,0x10
c000c535:	83 c4 0c             	add    esp,0xc
c000c538:	c3                   	ret    
c000c539:	90                   	nop

c000c53a <Device::findAndLoadDriver()>:
c000c53a:	c7 44 24 04 ee 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213ee
c000c542:	e9 fe e3 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c547:	90                   	nop

c000c548 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c548:	57                   	push   edi
c000c549:	b9 09 00 00 00       	mov    ecx,0x9
c000c54e:	56                   	push   esi
c000c54f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c553:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c557:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c561:	81 c7 18 01 00 00    	add    edi,0x118
c000c567:	fc                   	cld    
c000c568:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c56a:	5e                   	pop    esi
c000c56b:	5f                   	pop    edi
c000c56c:	c3                   	ret    
c000c56d:	90                   	nop

c000c56e <Device::preOpenACPI(void*, char*, char*)>:
c000c56e:	57                   	push   edi
c000c56f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c574:	56                   	push   esi
c000c575:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c579:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c57d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c587:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c58d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c593:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c597:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c599:	b9 0e 00 00 00       	mov    ecx,0xe
c000c59e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c5a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c5a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5aa:	5e                   	pop    esi
c000c5ab:	5f                   	pop    edi
c000c5ac:	c3                   	ret    
c000c5ad:	90                   	nop

c000c5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5ae:	53                   	push   ebx
c000c5af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c5bf:	0f b6 c0             	movzx  eax,al
c000c5c2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c5c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5ce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5d2:	5b                   	pop    ebx
c000c5d3:	e9 a8 05 00 00       	jmp    c000cb80 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c5d8 <Device::getParent()>:
c000c5d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5dc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c5e2:	c3                   	ret    
c000c5e3:	90                   	nop

c000c5e4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c5e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5ec:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c5f1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5fd:	e9 e6 06 00 00       	jmp    c000cce8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c602 <Device::addChild(Device*)>:
c000c602:	53                   	push   ebx
c000c603:	83 ec 08             	sub    esp,0x8
c000c606:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c60a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c60e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c614:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c61a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c61c:	85 d2                	test   edx,edx
c000c61e:	74 04                	je     c000c624 <Device::addChild(Device*)+0x22>
c000c620:	89 d3                	mov    ebx,edx
c000c622:	eb f6                	jmp    c000c61a <Device::addChild(Device*)+0x18>
c000c624:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c627:	83 ec 0c             	sub    esp,0xc
c000c62a:	6a 08                	push   0x8
c000c62c:	e8 85 b4 ff ff       	call   c0007ab6 <malloc>
c000c631:	89 03                	mov    DWORD PTR [ebx],eax
c000c633:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c639:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c640:	83 c4 18             	add    esp,0x18
c000c643:	5b                   	pop    ebx
c000c644:	c3                   	ret    
c000c645:	90                   	nop

c000c646 <Device::removeAllChildren()>:
c000c646:	56                   	push   esi
c000c647:	53                   	push   ebx
c000c648:	52                   	push   edx
c000c649:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c64d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c653:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c656:	74 17                	je     c000c66f <Device::removeAllChildren()+0x29>
c000c658:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c65b:	85 c0                	test   eax,eax
c000c65d:	74 0c                	je     c000c66b <Device::removeAllChildren()+0x25>
c000c65f:	83 ec 0c             	sub    esp,0xc
c000c662:	8b 10                	mov    edx,DWORD PTR [eax]
c000c664:	50                   	push   eax
c000c665:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c668:	83 c4 10             	add    esp,0x10
c000c66b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c66d:	eb e4                	jmp    c000c653 <Device::removeAllChildren()+0xd>
c000c66f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c675:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c67b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c681:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c688:	58                   	pop    eax
c000c689:	5b                   	pop    ebx
c000c68a:	5e                   	pop    esi
c000c68b:	c3                   	ret    

c000c68c <Device::hibernateAll()>:
c000c68c:	53                   	push   ebx
c000c68d:	83 ec 14             	sub    esp,0x14
c000c690:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c694:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c696:	53                   	push   ebx
c000c697:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c69a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6a0:	83 c4 10             	add    esp,0x10
c000c6a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6a6:	74 0f                	je     c000c6b7 <Device::hibernateAll()+0x2b>
c000c6a8:	83 ec 0c             	sub    esp,0xc
c000c6ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6ae:	e8 d9 ff ff ff       	call   c000c68c <Device::hibernateAll()>
c000c6b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6b5:	eb e9                	jmp    c000c6a0 <Device::hibernateAll()+0x14>
c000c6b7:	83 c4 08             	add    esp,0x8
c000c6ba:	5b                   	pop    ebx
c000c6bb:	c3                   	ret    

c000c6bc <Device::wakeAll()>:
c000c6bc:	53                   	push   ebx
c000c6bd:	83 ec 14             	sub    esp,0x14
c000c6c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6c6:	53                   	push   ebx
c000c6c7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c6ca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6d0:	83 c4 10             	add    esp,0x10
c000c6d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6d6:	74 0f                	je     c000c6e7 <Device::wakeAll()+0x2b>
c000c6d8:	83 ec 0c             	sub    esp,0xc
c000c6db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6de:	e8 d9 ff ff ff       	call   c000c6bc <Device::wakeAll()>
c000c6e3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6e5:	eb e9                	jmp    c000c6d0 <Device::wakeAll()+0x14>
c000c6e7:	83 c4 08             	add    esp,0x8
c000c6ea:	5b                   	pop    ebx
c000c6eb:	c3                   	ret    

c000c6ec <Device::detectAll()>:
c000c6ec:	53                   	push   ebx
c000c6ed:	83 ec 14             	sub    esp,0x14
c000c6f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6f6:	53                   	push   ebx
c000c6f7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c6fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c700:	83 c4 10             	add    esp,0x10
c000c703:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c706:	74 0f                	je     c000c717 <Device::detectAll()+0x2b>
c000c708:	83 ec 0c             	sub    esp,0xc
c000c70b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c70e:	e8 d9 ff ff ff       	call   c000c6ec <Device::detectAll()>
c000c713:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c715:	eb e9                	jmp    c000c700 <Device::detectAll()+0x14>
c000c717:	83 c4 08             	add    esp,0x8
c000c71a:	5b                   	pop    ebx
c000c71b:	c3                   	ret    

c000c71c <Device::disableLegacyAll()>:
c000c71c:	c3                   	ret    
c000c71d:	90                   	nop

c000c71e <Device::loadDriversForAll()>:
c000c71e:	c3                   	ret    
c000c71f:	90                   	nop

c000c720 <Device::closeAll()>:
c000c720:	53                   	push   ebx
c000c721:	83 ec 08             	sub    esp,0x8
c000c724:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c728:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c72a:	6a 00                	push   0x0
c000c72c:	6a 00                	push   0x0
c000c72e:	6a 00                	push   0x0
c000c730:	53                   	push   ebx
c000c731:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c734:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c73a:	83 c4 10             	add    esp,0x10
c000c73d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c740:	74 0f                	je     c000c751 <Device::closeAll()+0x31>
c000c742:	83 ec 0c             	sub    esp,0xc
c000c745:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c748:	e8 d3 ff ff ff       	call   c000c720 <Device::closeAll()>
c000c74d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c74f:	eb e9                	jmp    c000c73a <Device::closeAll()+0x1a>
c000c751:	83 c4 08             	add    esp,0x8
c000c754:	5b                   	pop    ebx
c000c755:	c3                   	ret    

c000c756 <Device::powerSavingAll(PowerSavingLevel)>:
c000c756:	56                   	push   esi
c000c757:	53                   	push   ebx
c000c758:	83 ec 0c             	sub    esp,0xc
c000c75b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c75f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c763:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c765:	56                   	push   esi
c000c766:	53                   	push   ebx
c000c767:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c76a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c776:	74 0f                	je     c000c787 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c778:	52                   	push   edx
c000c779:	52                   	push   edx
c000c77a:	56                   	push   esi
c000c77b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c77e:	e8 d3 ff ff ff       	call   c000c756 <Device::powerSavingAll(PowerSavingLevel)>
c000c783:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c785:	eb e9                	jmp    c000c770 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c787:	58                   	pop    eax
c000c788:	5b                   	pop    ebx
c000c789:	5e                   	pop    esi
c000c78a:	c3                   	ret    
c000c78b:	90                   	nop

c000c78c <Device::setName(char const*)>:
c000c78c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c794:	e9 a7 3e ff ff       	jmp    c0000640 <strcpy>
c000c799:	90                   	nop

c000c79a <Device::Device(char const*)>:
c000c79a:	83 ec 1c             	sub    esp,0x1c
c000c79d:	ba 30 14 02 c0       	mov    edx,0xc0021430
c000c7a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7a6:	89 10                	mov    DWORD PTR [eax],edx
c000c7a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ac:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c7b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ba:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c7c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7c8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c7d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7d6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c7e0:	83 ec 08             	sub    esp,0x8
c000c7e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7eb:	e8 9c ff ff ff       	call   c000c78c <Device::setName(char const*)>
c000c7f0:	83 c4 10             	add    esp,0x10
c000c7f3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c7fb:	83 ec 0c             	sub    esp,0xc
c000c7fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c802:	e8 af b2 ff ff       	call   c0007ab6 <malloc>
c000c807:	83 c4 10             	add    esp,0x10
c000c80a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c810:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c817:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c81b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c821:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c825:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c82b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c831:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c835:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c83b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c846:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c84d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c851:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c85c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c86a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c874:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c878:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c886:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c890:	90                   	nop
c000c891:	83 c4 1c             	add    esp,0x1c
c000c894:	c3                   	ret    
c000c895:	90                   	nop

c000c896 <Device::getName()>:
c000c896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c89a:	05 d0 00 00 00       	add    eax,0xd0
c000c89f:	c3                   	ret    

c000c8a0 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c8a0:	83 ec 0c             	sub    esp,0xc
c000c8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a7:	83 ec 08             	sub    esp,0x8
c000c8aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ae:	50                   	push   eax
c000c8af:	e8 e6 fe ff ff       	call   c000c79a <Device::Device(char const*)>
c000c8b4:	83 c4 10             	add    esp,0x10
c000c8b7:	ba 5c 14 02 c0       	mov    edx,0xc002145c
c000c8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8c0:	89 10                	mov    DWORD PTR [eax],edx
c000c8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8c6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c8d0:	90                   	nop
c000c8d1:	83 c4 0c             	add    esp,0xc
c000c8d4:	c3                   	ret    
c000c8d5:	90                   	nop

c000c8d6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c8d6:	57                   	push   edi
c000c8d7:	56                   	push   esi
c000c8d8:	53                   	push   ebx
c000c8d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8dd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c8e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8e5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c8eb:	75 0c                	jne    c000c8f9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c8ed:	52                   	push   edx
c000c8ee:	52                   	push   edx
c000c8ef:	53                   	push   ebx
c000c8f0:	56                   	push   esi
c000c8f1:	e8 fc 2c 01 00       	call   c001f5f2 <LinkedList<Device>::addElement(Device*)>
c000c8f6:	83 c4 10             	add    esp,0x10
c000c8f9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c902:	74 12                	je     c000c916 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c904:	50                   	push   eax
c000c905:	57                   	push   edi
c000c906:	56                   	push   esi
c000c907:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c90a:	e8 c7 ff ff ff       	call   c000c8d6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c90f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c911:	83 c4 10             	add    esp,0x10
c000c914:	eb e9                	jmp    c000c8ff <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c916:	5b                   	pop    ebx
c000c917:	5e                   	pop    esi
c000c918:	5f                   	pop    edi
c000c919:	c3                   	ret    

c000c91a <getDevicesOfType(DeviceType)>:
c000c91a:	53                   	push   ebx
c000c91b:	83 ec 14             	sub    esp,0x14
c000c91e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c922:	53                   	push   ebx
c000c923:	e8 a6 2d 01 00       	call   c001f6ce <LinkedList<Device>::LinkedList()>
c000c928:	83 c4 0c             	add    esp,0xc
c000c92b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c92f:	53                   	push   ebx
c000c930:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c936:	e8 9b ff ff ff       	call   c000c8d6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c93b:	89 d8                	mov    eax,ebx
c000c93d:	83 c4 18             	add    esp,0x18
c000c940:	5b                   	pop    ebx
c000c941:	c2 04 00             	ret    0x4

c000c944 <HardDiskController::HardDiskController(char const*)>:
c000c944:	83 ec 0c             	sub    esp,0xc
c000c947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c94b:	83 ec 08             	sub    esp,0x8
c000c94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c952:	50                   	push   eax
c000c953:	e8 42 fe ff ff       	call   c000c79a <Device::Device(char const*)>
c000c958:	83 c4 10             	add    esp,0x10
c000c95b:	ba 88 14 02 c0       	mov    edx,0xc0021488
c000c960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c964:	89 10                	mov    DWORD PTR [eax],edx
c000c966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c96a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c974:	90                   	nop
c000c975:	83 c4 0c             	add    esp,0xc
c000c978:	c3                   	ret    
c000c979:	90                   	nop
c000c97a:	66 90                	xchg   ax,ax

c000c97c <HardDiskController::~HardDiskController()>:
c000c97c:	83 ec 0c             	sub    esp,0xc
c000c97f:	ba 88 14 02 c0       	mov    edx,0xc0021488
c000c984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c988:	89 10                	mov    DWORD PTR [eax],edx
c000c98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c98e:	83 ec 0c             	sub    esp,0xc
c000c991:	50                   	push   eax
c000c992:	e8 6d fb ff ff       	call   c000c504 <Device::~Device()>
c000c997:	83 c4 10             	add    esp,0x10
c000c99a:	90                   	nop
c000c99b:	83 c4 0c             	add    esp,0xc
c000c99e:	c3                   	ret    
c000c99f:	90                   	nop

c000c9a0 <HardDiskController::~HardDiskController()>:
c000c9a0:	83 ec 0c             	sub    esp,0xc
c000c9a3:	83 ec 0c             	sub    esp,0xc
c000c9a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9aa:	e8 cd ff ff ff       	call   c000c97c <HardDiskController::~HardDiskController()>
c000c9af:	83 c4 10             	add    esp,0x10
c000c9b2:	83 ec 08             	sub    esp,0x8
c000c9b5:	68 58 01 00 00       	push   0x158
c000c9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9be:	e8 55 de ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c9c3:	83 c4 10             	add    esp,0x10
c000c9c6:	83 c4 0c             	add    esp,0xc
c000c9c9:	c3                   	ret    

c000c9ca <PhysicalDisk::eject()>:
c000c9ca:	83 c8 ff             	or     eax,0xffffffff
c000c9cd:	c3                   	ret    

c000c9ce <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c9ce:	83 ec 0c             	sub    esp,0xc
c000c9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d5:	83 ec 08             	sub    esp,0x8
c000c9d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9dc:	50                   	push   eax
c000c9dd:	e8 b8 fd ff ff       	call   c000c79a <Device::Device(char const*)>
c000c9e2:	83 c4 10             	add    esp,0x10
c000c9e5:	ba b4 14 02 c0       	mov    edx,0xc00214b4
c000c9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ee:	89 10                	mov    DWORD PTR [eax],edx
c000c9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ff:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ca06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca0a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ca14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca1c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ca22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca26:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ca30:	90                   	nop
c000ca31:	83 c4 0c             	add    esp,0xc
c000ca34:	c3                   	ret    
c000ca35:	90                   	nop

c000ca36 <PhysicalDisk::startCache()>:
c000ca36:	56                   	push   esi
c000ca37:	53                   	push   ebx
c000ca38:	83 ec 10             	sub    esp,0x10
c000ca3b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca3f:	6a 44                	push   0x44
c000ca41:	e8 70 b0 ff ff       	call   c0007ab6 <malloc>
c000ca46:	89 c6                	mov    esi,eax
c000ca48:	58                   	pop    eax
c000ca49:	5a                   	pop    edx
c000ca4a:	53                   	push   ebx
c000ca4b:	56                   	push   esi
c000ca4c:	e8 7b 17 00 00       	call   c000e1cc <VCache::VCache(PhysicalDisk*)>
c000ca51:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ca57:	83 c4 14             	add    esp,0x14
c000ca5a:	5b                   	pop    ebx
c000ca5b:	5e                   	pop    esi
c000ca5c:	c3                   	ret    
c000ca5d:	90                   	nop

c000ca5e <PhysicalDisk::~PhysicalDisk()>:
c000ca5e:	83 ec 0c             	sub    esp,0xc
c000ca61:	ba b4 14 02 c0       	mov    edx,0xc00214b4
c000ca66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca6a:	89 10                	mov    DWORD PTR [eax],edx
c000ca6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca70:	83 ec 0c             	sub    esp,0xc
c000ca73:	50                   	push   eax
c000ca74:	e8 8b fa ff ff       	call   c000c504 <Device::~Device()>
c000ca79:	83 c4 10             	add    esp,0x10
c000ca7c:	90                   	nop
c000ca7d:	83 c4 0c             	add    esp,0xc
c000ca80:	c3                   	ret    
c000ca81:	90                   	nop

c000ca82 <PhysicalDisk::~PhysicalDisk()>:
c000ca82:	83 ec 0c             	sub    esp,0xc
c000ca85:	83 ec 0c             	sub    esp,0xc
c000ca88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8c:	e8 cd ff ff ff       	call   c000ca5e <PhysicalDisk::~PhysicalDisk()>
c000ca91:	83 c4 10             	add    esp,0x10
c000ca94:	83 ec 08             	sub    esp,0x8
c000ca97:	68 6c 01 00 00       	push   0x16c
c000ca9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caa0:	e8 73 dd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000caa5:	83 c4 10             	add    esp,0x10
c000caa8:	83 c4 0c             	add    esp,0xc
c000caab:	c3                   	ret    

c000caac <int_handler>:
c000caac:	55                   	push   ebp
c000caad:	57                   	push   edi
c000caae:	56                   	push   esi
c000caaf:	53                   	push   ebx
c000cab0:	83 ec 0c             	sub    esp,0xc
c000cab3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cab7:	80 3d 28 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c28,0x0
c000cabe:	74 0b                	je     c000cacb <int_handler+0x1f>
c000cac0:	fa                   	cli    
c000cac1:	f4                   	hlt    
c000cac2:	80 3d 28 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c28,0x0
c000cac9:	75 f5                	jne    c000cac0 <int_handler+0x14>
c000cacb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cace:	8d 46 e0             	lea    eax,[esi-0x20]
c000cad1:	83 f8 17             	cmp    eax,0x17
c000cad4:	76 40                	jbe    c000cb16 <int_handler+0x6a>
c000cad6:	c1 e6 04             	shl    esi,0x4
c000cad9:	31 db                	xor    ebx,ebx
c000cadb:	8d ae 80 80 02 c0    	lea    ebp,[esi-0x3ffd7f80]
c000cae1:	81 c6 80 70 02 c0    	add    esi,0xc0027080
c000cae7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000caeb:	85 c0                	test   eax,eax
c000caed:	74 13                	je     c000cb02 <int_handler+0x56>
c000caef:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000caf2:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000caf6:	74 2c                	je     c000cb24 <int_handler+0x78>
c000caf8:	83 ec 08             	sub    esp,0x8
c000cafb:	52                   	push   edx
c000cafc:	57                   	push   edi
c000cafd:	ff d0                	call   eax
c000caff:	83 c4 10             	add    esp,0x10
c000cb02:	83 c3 01             	add    ebx,0x1
c000cb05:	83 fb 04             	cmp    ebx,0x4
c000cb08:	75 dd                	jne    c000cae7 <int_handler+0x3b>
c000cb0a:	83 c4 0c             	add    esp,0xc
c000cb0d:	31 c0                	xor    eax,eax
c000cb0f:	5b                   	pop    ebx
c000cb10:	31 d2                	xor    edx,edx
c000cb12:	5e                   	pop    esi
c000cb13:	5f                   	pop    edi
c000cb14:	5d                   	pop    ebp
c000cb15:	c3                   	ret    
c000cb16:	83 ec 0c             	sub    esp,0xc
c000cb19:	50                   	push   eax
c000cb1a:	e8 75 b2 00 00       	call   c0017d94 <HalEndOfInterrupt(int)>
c000cb1f:	83 c4 10             	add    esp,0x10
c000cb22:	eb b2                	jmp    c000cad6 <int_handler+0x2a>
c000cb24:	83 ec 08             	sub    esp,0x8
c000cb27:	52                   	push   edx
c000cb28:	57                   	push   edi
c000cb29:	ff d0                	call   eax
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	83 c4 0c             	add    esp,0xc
c000cb31:	5b                   	pop    ebx
c000cb32:	5e                   	pop    esi
c000cb33:	5f                   	pop    edi
c000cb34:	5d                   	pop    ebp
c000cb35:	c3                   	ret    

c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cb36:	56                   	push   esi
c000cb37:	31 c0                	xor    eax,eax
c000cb39:	53                   	push   ebx
c000cb3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb42:	89 ca                	mov    edx,ecx
c000cb44:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb48:	c1 e2 04             	shl    edx,0x4
c000cb4b:	83 bc 82 80 80 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd7f80],0x0
c000cb53:	74 17                	je     c000cb6c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cb55:	83 c0 01             	add    eax,0x1
c000cb58:	83 f8 04             	cmp    eax,0x4
c000cb5b:	75 ee                	jne    c000cb4b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cb5d:	c7 44 24 0c e4 14 02 c0 	mov    DWORD PTR [esp+0xc],0xc00214e4
c000cb65:	5b                   	pop    ebx
c000cb66:	5e                   	pop    esi
c000cb67:	e9 a1 46 00 00       	jmp    c001120d <KePanic(char const*)>
c000cb6c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cb6f:	89 1c 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],ebx
c000cb76:	89 34 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],esi
c000cb7d:	5b                   	pop    ebx
c000cb7e:	5e                   	pop    esi
c000cb7f:	c3                   	ret    

c000cb80 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cb80:	57                   	push   edi
c000cb81:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cb87:	56                   	push   esi
c000cb88:	53                   	push   ebx
c000cb89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cb91:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cb98:	74 54                	je     c000cbee <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cb9a:	89 c7                	mov    edi,eax
c000cb9c:	84 c0                	test   al,al
c000cb9e:	74 1d                	je     c000cbbd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cba0:	83 fe 0f             	cmp    esi,0xf
c000cba3:	0f 8f d5 00 00 00    	jg     c000cc7e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cba9:	0f b6 b6 c8 2f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd038]
c000cbb0:	0f b7 bc 36 20 98 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd67e0]
c000cbb8:	d1 ef                	shr    edi,1
c000cbba:	83 e7 01             	and    edi,0x1
c000cbbd:	83 ec 08             	sub    esp,0x8
c000cbc0:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c000cbc5:	31 db                	xor    ebx,ebx
c000cbc7:	50                   	push   eax
c000cbc8:	68 f1 14 02 c0       	push   0xc00214f1
c000cbcd:	e8 73 dd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cbd2:	83 c4 10             	add    esp,0x10
c000cbd5:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c000cbda:	85 c0                	test   eax,eax
c000cbdc:	7f 55                	jg     c000cc33 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cbde:	83 ec 0c             	sub    esp,0xc
c000cbe1:	68 08 15 02 c0       	push   0xc0021508
c000cbe6:	e8 22 46 00 00       	call   c001120d <KePanic(char const*)>
c000cbeb:	83 c4 10             	add    esp,0x10
c000cbee:	8d 7e 20             	lea    edi,[esi+0x20]
c000cbf1:	89 f8                	mov    eax,edi
c000cbf3:	31 d2                	xor    edx,edx
c000cbf5:	c1 e0 04             	shl    eax,0x4
c000cbf8:	8b 8c 90 80 80 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd7f80]
c000cbff:	85 c9                	test   ecx,ecx
c000cc01:	0f 84 8e 00 00 00    	je     c000cc95 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cc07:	83 c2 01             	add    edx,0x1
c000cc0a:	83 fa 04             	cmp    edx,0x4
c000cc0d:	75 e9                	jne    c000cbf8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cc0f:	83 ec 0c             	sub    esp,0xc
c000cc12:	68 5c 15 02 c0       	push   0xc002155c
c000cc17:	e8 f1 45 00 00       	call   c001120d <KePanic(char const*)>
c000cc1c:	83 c4 10             	add    esp,0x10
c000cc1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cc24:	5b                   	pop    ebx
c000cc25:	5e                   	pop    esi
c000cc26:	5f                   	pop    edi
c000cc27:	c3                   	ret    
c000cc28:	83 c3 01             	add    ebx,0x1
c000cc2b:	39 1d 60 ae 02 c0    	cmp    DWORD PTR ds:0xc002ae60,ebx
c000cc31:	7e ab                	jle    c000cbde <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cc33:	83 ec 08             	sub    esp,0x8
c000cc36:	8b 04 9d 80 ae 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5180]
c000cc3d:	56                   	push   esi
c000cc3e:	50                   	push   eax
c000cc3f:	e8 da 18 01 00       	call   c001e51e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cc44:	83 c4 10             	add    esp,0x10
c000cc47:	84 c0                	test   al,al
c000cc49:	74 dd                	je     c000cc28 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cc4b:	83 ec 04             	sub    esp,0x4
c000cc4e:	89 f8                	mov    eax,edi
c000cc50:	8b 1c 9d 80 ae 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5180]
c000cc57:	0f b6 f8             	movzx  edi,al
c000cc5a:	57                   	push   edi
c000cc5b:	8d 7e 20             	lea    edi,[esi+0x20]
c000cc5e:	6a 00                	push   0x0
c000cc60:	89 f8                	mov    eax,edi
c000cc62:	0f b6 c0             	movzx  eax,al
c000cc65:	50                   	push   eax
c000cc66:	89 f0                	mov    eax,esi
c000cc68:	6a 00                	push   0x0
c000cc6a:	0f b6 c0             	movzx  eax,al
c000cc6d:	6a 00                	push   0x0
c000cc6f:	50                   	push   eax
c000cc70:	53                   	push   ebx
c000cc71:	e8 14 1a 01 00       	call   c001e68a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cc76:	83 c4 20             	add    esp,0x20
c000cc79:	e9 73 ff ff ff       	jmp    c000cbf1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000cc7e:	83 ec 0c             	sub    esp,0xc
c000cc81:	31 ff                	xor    edi,edi
c000cc83:	68 24 15 02 c0       	push   0xc0021524
c000cc88:	e8 80 45 00 00       	call   c001120d <KePanic(char const*)>
c000cc8d:	83 c4 10             	add    esp,0x10
c000cc90:	e9 28 ff ff ff       	jmp    c000cbbd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cc95:	8d 04 ba             	lea    eax,[edx+edi*4]
c000cc98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cc9c:	89 14 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],edx
c000cca3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cca7:	5b                   	pop    ebx
c000cca8:	89 14 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],edx
c000ccaf:	89 f0                	mov    eax,esi
c000ccb1:	5e                   	pop    esi
c000ccb2:	5f                   	pop    edi
c000ccb3:	c3                   	ret    

c000ccb4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ccb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccb8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ccbc:	c1 e0 04             	shl    eax,0x4
c000ccbf:	8d 50 10             	lea    edx,[eax+0x10]
c000ccc2:	39 88 80 80 02 c0    	cmp    DWORD PTR [eax-0x3ffd7f80],ecx
c000ccc8:	74 08                	je     c000ccd2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ccca:	83 c0 04             	add    eax,0x4
c000cccd:	39 d0                	cmp    eax,edx
c000cccf:	75 f1                	jne    c000ccc2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ccd1:	c3                   	ret    
c000ccd2:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000ccdc:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000cce6:	eb e2                	jmp    c000ccca <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cce8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cce8:	53                   	push   ebx
c000cce9:	83 ec 08             	sub    esp,0x8
c000ccec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ccf0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ccf5:	74 0e                	je     c000cd05 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ccf7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ccfc:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cd03:	75 37                	jne    c000cd3c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000cd05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd09:	83 c0 20             	add    eax,0x20
c000cd0c:	c1 e0 04             	shl    eax,0x4
c000cd0f:	8d 50 10             	lea    edx,[eax+0x10]
c000cd12:	39 98 80 80 02 c0    	cmp    DWORD PTR [eax-0x3ffd7f80],ebx
c000cd18:	74 0c                	je     c000cd26 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000cd1a:	83 c0 04             	add    eax,0x4
c000cd1d:	39 d0                	cmp    eax,edx
c000cd1f:	75 f1                	jne    c000cd12 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000cd21:	83 c4 08             	add    esp,0x8
c000cd24:	5b                   	pop    ebx
c000cd25:	c3                   	ret    
c000cd26:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cd30:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000cd3a:	eb de                	jmp    c000cd1a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000cd3c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000cd41:	7f 11                	jg     c000cd54 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000cd43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd47:	0f b6 80 c8 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd038]
c000cd4e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd52:	eb b1                	jmp    c000cd05 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cd54:	83 ec 0c             	sub    esp,0xc
c000cd57:	68 15 15 02 c0       	push   0xc0021515
c000cd5c:	e8 ac 44 00 00       	call   c001120d <KePanic(char const*)>
c000cd61:	83 c4 10             	add    esp,0x10
c000cd64:	eb 9f                	jmp    c000cd05 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000cd66 <setupINTS()>:
c000cd66:	31 c0                	xor    eax,eax
c000cd68:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cd72:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000cd7c:	c7 80 84 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f7c],0x0
c000cd86:	c7 80 84 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f7c],0x0
c000cd90:	c7 80 88 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f78],0x0
c000cd9a:	c7 80 88 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f78],0x0
c000cda4:	c7 80 8c 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f74],0x0
c000cdae:	c7 80 8c 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f74],0x0
c000cdb8:	83 c0 10             	add    eax,0x10
c000cdbb:	3d 00 10 00 00       	cmp    eax,0x1000
c000cdc0:	75 a6                	jne    c000cd68 <setupINTS()+0x2>
c000cdc2:	c3                   	ret    

c000cdc3 <convertLegacyIRQNumber(int)>:
c000cdc3:	83 ec 0c             	sub    esp,0xc
c000cdc6:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd0:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cdd7:	74 0c                	je     c000cde5 <convertLegacyIRQNumber(int)+0x22>
c000cdd9:	83 f8 0f             	cmp    eax,0xf
c000cddc:	7f 0b                	jg     c000cde9 <convertLegacyIRQNumber(int)+0x26>
c000cdde:	0f b6 80 c8 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd038]
c000cde5:	83 c4 0c             	add    esp,0xc
c000cde8:	c3                   	ret    
c000cde9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cded:	83 ec 0c             	sub    esp,0xc
c000cdf0:	68 24 15 02 c0       	push   0xc0021524
c000cdf5:	e8 13 44 00 00       	call   c001120d <KePanic(char const*)>
c000cdfa:	83 c4 10             	add    esp,0x10
c000cdfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce01:	83 c4 0c             	add    esp,0xc
c000ce04:	c3                   	ret    
c000ce05:	90                   	nop

c000ce06 <startGUI(void*)>:
c000ce06:	55                   	push   ebp
c000ce07:	89 e5                	mov    ebp,esp
c000ce09:	53                   	push   ebx
c000ce0a:	83 ec 04             	sub    esp,0x4
c000ce0d:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce12:	83 e8 01             	sub    eax,0x1
c000ce15:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000ce1a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce1f:	85 c0                	test   eax,eax
c000ce21:	75 01                	jne    c000ce24 <startGUI(void*)+0x1e>
c000ce23:	fb                   	sti    
c000ce24:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce2a:	83 ec 08             	sub    esp,0x8
c000ce2d:	6a 01                	push   0x1
c000ce2f:	68 81 15 02 c0       	push   0xc0021581
c000ce34:	e8 35 82 00 00       	call   c001506e <Thr::loadDLL(char const*, bool)>
c000ce39:	83 c4 10             	add    esp,0x10
c000ce3c:	83 ec 08             	sub    esp,0x8
c000ce3f:	53                   	push   ebx
c000ce40:	50                   	push   eax
c000ce41:	e8 59 84 00 00       	call   c001529f <Thr::executeDLL(unsigned long, void*)>
c000ce46:	83 c4 10             	add    esp,0x10
c000ce49:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce4f:	83 ec 08             	sub    esp,0x8
c000ce52:	6a 01                	push   0x1
c000ce54:	68 9b 15 02 c0       	push   0xc002159b
c000ce59:	e8 10 82 00 00       	call   c001506e <Thr::loadDLL(char const*, bool)>
c000ce5e:	83 c4 10             	add    esp,0x10
c000ce61:	83 ec 08             	sub    esp,0x8
c000ce64:	53                   	push   ebx
c000ce65:	50                   	push   eax
c000ce66:	e8 34 84 00 00       	call   c001529f <Thr::executeDLL(unsigned long, void*)>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	90                   	nop
c000ce6f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ce72:	c9                   	leave  
c000ce73:	c3                   	ret    

c000ce74 <startGUIVESA(void*)>:
c000ce74:	55                   	push   ebp
c000ce75:	89 e5                	mov    ebp,esp
c000ce77:	53                   	push   ebx
c000ce78:	83 ec 04             	sub    esp,0x4
c000ce7b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce80:	83 e8 01             	sub    eax,0x1
c000ce83:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000ce88:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce8d:	85 c0                	test   eax,eax
c000ce8f:	75 01                	jne    c000ce92 <startGUIVESA(void*)+0x1e>
c000ce91:	fb                   	sti    
c000ce92:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce98:	83 ec 08             	sub    esp,0x8
c000ce9b:	6a 01                	push   0x1
c000ce9d:	68 b9 15 02 c0       	push   0xc00215b9
c000cea2:	e8 c7 81 00 00       	call   c001506e <Thr::loadDLL(char const*, bool)>
c000cea7:	83 c4 10             	add    esp,0x10
c000ceaa:	83 ec 08             	sub    esp,0x8
c000cead:	53                   	push   ebx
c000ceae:	50                   	push   eax
c000ceaf:	e8 eb 83 00 00       	call   c001529f <Thr::executeDLL(unsigned long, void*)>
c000ceb4:	83 c4 10             	add    esp,0x10
c000ceb7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cebd:	83 ec 08             	sub    esp,0x8
c000cec0:	6a 01                	push   0x1
c000cec2:	68 9b 15 02 c0       	push   0xc002159b
c000cec7:	e8 a2 81 00 00       	call   c001506e <Thr::loadDLL(char const*, bool)>
c000cecc:	83 c4 10             	add    esp,0x10
c000cecf:	83 ec 08             	sub    esp,0x8
c000ced2:	53                   	push   ebx
c000ced3:	50                   	push   eax
c000ced4:	e8 c6 83 00 00       	call   c001529f <Thr::executeDLL(unsigned long, void*)>
c000ced9:	83 c4 10             	add    esp,0x10
c000cedc:	90                   	nop
c000cedd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cee0:	c9                   	leave  
c000cee1:	c3                   	ret    

c000cee2 <sendKeyToTerminal(unsigned char)>:
c000cee2:	55                   	push   ebp
c000cee3:	89 e5                	mov    ebp,esp
c000cee5:	83 ec 28             	sub    esp,0x28
c000cee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ceeb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000ceee:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cef3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cef7:	83 ec 08             	sub    esp,0x8
c000cefa:	52                   	push   edx
c000cefb:	50                   	push   eax
c000cefc:	e8 b5 be ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000cf01:	83 c4 10             	add    esp,0x10
c000cf04:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf08:	83 f8 0a             	cmp    eax,0xa
c000cf0b:	74 16                	je     c000cf23 <sendKeyToTerminal(unsigned char)+0x41>
c000cf0d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf11:	83 f8 03             	cmp    eax,0x3
c000cf14:	74 0d                	je     c000cf23 <sendKeyToTerminal(unsigned char)+0x41>
c000cf16:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf1a:	83 f8 1c             	cmp    eax,0x1c
c000cf1d:	0f 85 97 00 00 00    	jne    c000cfba <sendKeyToTerminal(unsigned char)+0xd8>
c000cf23:	fa                   	cli    
c000cf24:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf29:	83 c0 01             	add    eax,0x1
c000cf2c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cf31:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf36:	83 c0 01             	add    eax,0x1
c000cf39:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000cf3e:	a1 80 90 02 c0       	mov    eax,ds:0xc0029080
c000cf43:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf46:	c7 05 80 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029080,0x0
c000cf50:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000cf54:	74 1f                	je     c000cf75 <sendKeyToTerminal(unsigned char)+0x93>
c000cf56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf59:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000cf5c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000cf62:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf65:	83 ec 0c             	sub    esp,0xc
c000cf68:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cf6b:	e8 74 90 00 00       	call   c0015fe4 <unblockTask(ThreadControlBlock*)>
c000cf70:	83 c4 10             	add    esp,0x10
c000cf73:	eb db                	jmp    c000cf50 <sendKeyToTerminal(unsigned char)+0x6e>
c000cf75:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf7a:	83 e8 01             	sub    eax,0x1
c000cf7d:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000cf82:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf87:	85 c0                	test   eax,eax
c000cf89:	75 18                	jne    c000cfa3 <sendKeyToTerminal(unsigned char)+0xc1>
c000cf8b:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c000cf90:	85 c0                	test   eax,eax
c000cf92:	74 0f                	je     c000cfa3 <sendKeyToTerminal(unsigned char)+0xc1>
c000cf94:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c000cf9e:	e8 29 8b 00 00       	call   c0015acc <schedule()>
c000cfa3:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cfa8:	83 e8 01             	sub    eax,0x1
c000cfab:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cfb0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cfb5:	85 c0                	test   eax,eax
c000cfb7:	75 01                	jne    c000cfba <sendKeyToTerminal(unsigned char)+0xd8>
c000cfb9:	fb                   	sti    
c000cfba:	90                   	nop
c000cfbb:	c9                   	leave  
c000cfbc:	c3                   	ret    

c000cfbd <sendKeyboardToken(KeyboardToken)>:
c000cfbd:	55                   	push   ebp
c000cfbe:	89 e5                	mov    ebp,esp
c000cfc0:	83 ec 18             	sub    esp,0x18
c000cfc3:	e8 95 42 00 00       	call   c001125d <KeUserIOReceived()>
c000cfc8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000cfcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfce:	0f b7 c0             	movzx  eax,ax
c000cfd1:	83 f2 01             	xor    edx,0x1
c000cfd4:	88 90 a0 90 02 c0    	mov    BYTE PTR [eax-0x3ffd6f60],dl
c000cfda:	a1 88 90 02 c0       	mov    eax,ds:0xc0029088
c000cfdf:	85 c0                	test   eax,eax
c000cfe1:	74 24                	je     c000d007 <sendKeyboardToken(KeyboardToken)+0x4a>
c000cfe3:	8b 0d 88 90 02 c0    	mov    ecx,DWORD PTR ds:0xc0029088
c000cfe9:	83 ec 04             	sub    esp,0x4
c000cfec:	68 a0 90 02 c0       	push   0xc00290a0
c000cff1:	83 ec 08             	sub    esp,0x8
c000cff4:	89 e2                	mov    edx,esp
c000cff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cff9:	89 02                	mov    DWORD PTR [edx],eax
c000cffb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cffe:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d002:	ff d1                	call   ecx
c000d004:	83 c4 10             	add    esp,0x10
c000d007:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d00b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d00e:	a0 a8 94 02 c0       	mov    al,ds:0xc00294a8
c000d013:	0f b6 d2             	movzx  edx,dl
c000d016:	0f b6 c0             	movzx  eax,al
c000d019:	39 c2                	cmp    edx,eax
c000d01b:	74 1c                	je     c000d039 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d01d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d020:	a2 a8 94 02 c0       	mov    ds:0xc00294a8,al
c000d025:	a0 a8 94 02 c0       	mov    al,ds:0xc00294a8
c000d02a:	0f b6 c0             	movzx  eax,al
c000d02d:	83 ec 0c             	sub    esp,0xc
c000d030:	50                   	push   eax
c000d031:	e8 cc b4 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d036:	83 c4 10             	add    esp,0x10
c000d039:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d03c:	0f b6 c0             	movzx  eax,al
c000d03f:	85 c0                	test   eax,eax
c000d041:	0f 84 da 00 00 00    	je     c000d121 <sendKeyboardToken(KeyboardToken)+0x164>
c000d047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d04a:	0f b7 c0             	movzx  eax,ax
c000d04d:	3d 18 03 00 00       	cmp    eax,0x318
c000d052:	75 06                	jne    c000d05a <sendKeyboardToken(KeyboardToken)+0x9d>
c000d054:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d05a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d05d:	0f b7 c0             	movzx  eax,ax
c000d060:	3d 19 03 00 00       	cmp    eax,0x319
c000d065:	75 06                	jne    c000d06d <sendKeyboardToken(KeyboardToken)+0xb0>
c000d067:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d06d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d070:	0f b7 c0             	movzx  eax,ax
c000d073:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d078:	75 06                	jne    c000d080 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d07a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d080:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d083:	0f b7 c0             	movzx  eax,ax
c000d086:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d08b:	75 06                	jne    c000d093 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d08d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d096:	0f b7 c0             	movzx  eax,ax
c000d099:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d09e:	75 06                	jne    c000d0a6 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d0a0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d0a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0a9:	0f b7 c0             	movzx  eax,ax
c000d0ac:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d0b1:	75 06                	jne    c000d0b9 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d0b3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d0b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0bc:	0f b7 c0             	movzx  eax,ax
c000d0bf:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d0c4:	75 06                	jne    c000d0cc <sendKeyboardToken(KeyboardToken)+0x10f>
c000d0c6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d0cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0cf:	0f b7 c0             	movzx  eax,ax
c000d0d2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d0d7:	75 06                	jne    c000d0df <sendKeyboardToken(KeyboardToken)+0x122>
c000d0d9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d0df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0e2:	0f b7 c0             	movzx  eax,ax
c000d0e5:	3d 20 03 00 00       	cmp    eax,0x320
c000d0ea:	75 06                	jne    c000d0f2 <sendKeyboardToken(KeyboardToken)+0x135>
c000d0ec:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d0f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0f5:	0f b7 c0             	movzx  eax,ax
c000d0f8:	3d 21 03 00 00       	cmp    eax,0x321
c000d0fd:	75 06                	jne    c000d105 <sendKeyboardToken(KeyboardToken)+0x148>
c000d0ff:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d108:	0f b7 c0             	movzx  eax,ax
c000d10b:	3d 22 03 00 00       	cmp    eax,0x322
c000d110:	0f 85 f1 00 00 00    	jne    c000d207 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d116:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d11c:	e9 e6 00 00 00       	jmp    c000d207 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d124:	0f b7 c0             	movzx  eax,ax
c000d127:	3d 18 03 00 00       	cmp    eax,0x318
c000d12c:	75 0a                	jne    c000d138 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d12e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d134:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d13b:	0f b7 c0             	movzx  eax,ax
c000d13e:	3d 19 03 00 00       	cmp    eax,0x319
c000d143:	75 0a                	jne    c000d14f <sendKeyboardToken(KeyboardToken)+0x192>
c000d145:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d14b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d14f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d152:	0f b7 c0             	movzx  eax,ax
c000d155:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d15a:	75 0a                	jne    c000d166 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d15c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d162:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d169:	0f b7 c0             	movzx  eax,ax
c000d16c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d171:	75 0a                	jne    c000d17d <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d173:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d179:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d17d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d180:	0f b7 c0             	movzx  eax,ax
c000d183:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d188:	75 0a                	jne    c000d194 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d18a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d190:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d197:	0f b7 c0             	movzx  eax,ax
c000d19a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d19f:	75 0a                	jne    c000d1ab <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d1a1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1a7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ae:	0f b7 c0             	movzx  eax,ax
c000d1b1:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1b6:	75 0a                	jne    c000d1c2 <sendKeyboardToken(KeyboardToken)+0x205>
c000d1b8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d1be:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c5:	0f b7 c0             	movzx  eax,ax
c000d1c8:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1cd:	75 0a                	jne    c000d1d9 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d1cf:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d1d5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1dc:	0f b7 c0             	movzx  eax,ax
c000d1df:	3d 20 03 00 00       	cmp    eax,0x320
c000d1e4:	75 0a                	jne    c000d1f0 <sendKeyboardToken(KeyboardToken)+0x233>
c000d1e6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d1ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f3:	0f b7 c0             	movzx  eax,ax
c000d1f6:	3d 21 03 00 00       	cmp    eax,0x321
c000d1fb:	75 0a                	jne    c000d207 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d1fd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d203:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d20a:	0f b7 c0             	movzx  eax,ax
c000d20d:	3d 00 02 00 00       	cmp    eax,0x200
c000d212:	75 2f                	jne    c000d243 <sendKeyboardToken(KeyboardToken)+0x286>
c000d214:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c000d219:	83 f0 01             	xor    eax,0x1
c000d21c:	0f b6 c0             	movzx  eax,al
c000d21f:	85 c0                	test   eax,eax
c000d221:	74 20                	je     c000d243 <sendKeyboardToken(KeyboardToken)+0x286>
c000d223:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000d228:	6a 01                	push   0x1
c000d22a:	6a 00                	push   0x0
c000d22c:	68 06 ce 00 c0       	push   0xc000ce06
c000d231:	50                   	push   eax
c000d232:	e8 45 86 00 00       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c000d237:	83 c4 10             	add    esp,0x10
c000d23a:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c000d241:	eb 3a                	jmp    c000d27d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d246:	0f b7 c0             	movzx  eax,ax
c000d249:	3d 01 02 00 00       	cmp    eax,0x201
c000d24e:	75 2d                	jne    c000d27d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d250:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c000d255:	83 f0 01             	xor    eax,0x1
c000d258:	0f b6 c0             	movzx  eax,al
c000d25b:	85 c0                	test   eax,eax
c000d25d:	74 1e                	je     c000d27d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d25f:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000d264:	6a 01                	push   0x1
c000d266:	6a 00                	push   0x0
c000d268:	68 74 ce 00 c0       	push   0xc000ce74
c000d26d:	50                   	push   eax
c000d26e:	e8 09 86 00 00       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c000d273:	83 c4 10             	add    esp,0x10
c000d276:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c000d27d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d280:	0f b7 c0             	movzx  eax,ax
c000d283:	3d 25 03 00 00       	cmp    eax,0x325
c000d288:	75 06                	jne    c000d290 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d28a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d293:	0f b7 c0             	movzx  eax,ax
c000d296:	3d 24 03 00 00       	cmp    eax,0x324
c000d29b:	75 06                	jne    c000d2a3 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d29d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d2a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a6:	0f b7 c0             	movzx  eax,ax
c000d2a9:	3d 23 03 00 00       	cmp    eax,0x323
c000d2ae:	75 06                	jne    c000d2b6 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d2b0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d2b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b9:	0f b7 c0             	movzx  eax,ax
c000d2bc:	3d 26 03 00 00       	cmp    eax,0x326
c000d2c1:	75 06                	jne    c000d2c9 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d2c3:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d2c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2cc:	0f b7 c0             	movzx  eax,ax
c000d2cf:	3d 27 03 00 00       	cmp    eax,0x327
c000d2d4:	75 06                	jne    c000d2dc <sendKeyboardToken(KeyboardToken)+0x31f>
c000d2d6:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2df:	0f b7 c0             	movzx  eax,ax
c000d2e2:	3d 22 03 00 00       	cmp    eax,0x322
c000d2e7:	75 06                	jne    c000d2ef <sendKeyboardToken(KeyboardToken)+0x332>
c000d2e9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d2ef:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d2f3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d2f6:	83 f0 01             	xor    eax,0x1
c000d2f9:	0f b6 c0             	movzx  eax,al
c000d2fc:	85 c0                	test   eax,eax
c000d2fe:	74 7c                	je     c000d37c <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d300:	a0 a1 91 02 c0       	mov    al,ds:0xc00291a1
c000d305:	0f b6 c0             	movzx  eax,al
c000d308:	85 c0                	test   eax,eax
c000d30a:	74 43                	je     c000d34f <sendKeyboardToken(KeyboardToken)+0x392>
c000d30c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d310:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d314:	85 c0                	test   eax,eax
c000d316:	74 2b                	je     c000d343 <sendKeyboardToken(KeyboardToken)+0x386>
c000d318:	8b 15 a4 94 02 c0    	mov    edx,DWORD PTR ds:0xc00294a4
c000d31e:	89 d0                	mov    eax,edx
c000d320:	c1 e0 02             	shl    eax,0x2
c000d323:	01 d0                	add    eax,edx
c000d325:	01 c0                	add    eax,eax
c000d327:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c000d32c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d32f:	0f b7 c0             	movzx  eax,ax
c000d332:	8d 50 d0             	lea    edx,[eax-0x30]
c000d335:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d33a:	01 d0                	add    eax,edx
c000d33c:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c000d341:	eb 71                	jmp    c000d3b4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d343:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d34d:	eb 65                	jmp    c000d3b4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d34f:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d354:	85 c0                	test   eax,eax
c000d356:	74 18                	je     c000d370 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d358:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d35d:	0f b6 c0             	movzx  eax,al
c000d360:	83 ec 0c             	sub    esp,0xc
c000d363:	50                   	push   eax
c000d364:	e8 79 fb ff ff       	call   c000cee2 <sendKeyToTerminal(unsigned char)>
c000d369:	83 c4 10             	add    esp,0x10
c000d36c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d370:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d37a:	eb 38                	jmp    c000d3b4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d37c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d37f:	0f b7 c0             	movzx  eax,ax
c000d382:	3d 01 01 00 00       	cmp    eax,0x101
c000d387:	75 2b                	jne    c000d3b4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d389:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d38e:	85 c0                	test   eax,eax
c000d390:	74 18                	je     c000d3aa <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d392:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d397:	0f b6 c0             	movzx  eax,al
c000d39a:	83 ec 0c             	sub    esp,0xc
c000d39d:	50                   	push   eax
c000d39e:	e8 3f fb ff ff       	call   c000cee2 <sendKeyToTerminal(unsigned char)>
c000d3a3:	83 c4 10             	add    esp,0x10
c000d3a6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3aa:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d3b4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d3b7:	83 f0 01             	xor    eax,0x1
c000d3ba:	0f b6 c0             	movzx  eax,al
c000d3bd:	85 c0                	test   eax,eax
c000d3bf:	74 5a                	je     c000d41b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3c1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d3c4:	83 f0 01             	xor    eax,0x1
c000d3c7:	0f b6 c0             	movzx  eax,al
c000d3ca:	85 c0                	test   eax,eax
c000d3cc:	74 4d                	je     c000d41b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3ce:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000d3d3:	83 f0 01             	xor    eax,0x1
c000d3d6:	0f b6 c0             	movzx  eax,al
c000d3d9:	85 c0                	test   eax,eax
c000d3db:	74 3e                	je     c000d41b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e0:	0f b7 c0             	movzx  eax,ax
c000d3e3:	83 f8 1f             	cmp    eax,0x1f
c000d3e6:	76 0b                	jbe    c000d3f3 <sendKeyboardToken(KeyboardToken)+0x436>
c000d3e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3eb:	0f b7 c0             	movzx  eax,ax
c000d3ee:	83 f8 7e             	cmp    eax,0x7e
c000d3f1:	76 16                	jbe    c000d409 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d3f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f6:	0f b7 c0             	movzx  eax,ax
c000d3f9:	83 f8 0a             	cmp    eax,0xa
c000d3fc:	74 0b                	je     c000d409 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d3fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d401:	0f b7 c0             	movzx  eax,ax
c000d404:	83 f8 08             	cmp    eax,0x8
c000d407:	75 12                	jne    c000d41b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d40c:	0f b6 c0             	movzx  eax,al
c000d40f:	83 ec 0c             	sub    esp,0xc
c000d412:	50                   	push   eax
c000d413:	e8 ca fa ff ff       	call   c000cee2 <sendKeyToTerminal(unsigned char)>
c000d418:	83 c4 10             	add    esp,0x10
c000d41b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d41e:	83 f0 01             	xor    eax,0x1
c000d421:	0f b6 c0             	movzx  eax,al
c000d424:	85 c0                	test   eax,eax
c000d426:	74 5d                	je     c000d485 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d428:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d42b:	83 f0 01             	xor    eax,0x1
c000d42e:	0f b6 c0             	movzx  eax,al
c000d431:	85 c0                	test   eax,eax
c000d433:	74 50                	je     c000d485 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d435:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000d43a:	0f b6 c0             	movzx  eax,al
c000d43d:	85 c0                	test   eax,eax
c000d43f:	74 44                	je     c000d485 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d444:	0f b7 c0             	movzx  eax,ax
c000d447:	83 f8 3f             	cmp    eax,0x3f
c000d44a:	76 39                	jbe    c000d485 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d44c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d44f:	0f b7 c0             	movzx  eax,ax
c000d452:	83 f8 7f             	cmp    eax,0x7f
c000d455:	77 2e                	ja     c000d485 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d45a:	88 c2                	mov    dl,al
c000d45c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d45f:	0f b7 c0             	movzx  eax,ax
c000d462:	83 f8 5f             	cmp    eax,0x5f
c000d465:	76 04                	jbe    c000d46b <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d467:	b0 20                	mov    al,0x20
c000d469:	eb 02                	jmp    c000d46d <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d46b:	b0 00                	mov    al,0x0
c000d46d:	89 d1                	mov    ecx,edx
c000d46f:	29 c1                	sub    ecx,eax
c000d471:	89 c8                	mov    eax,ecx
c000d473:	83 e8 40             	sub    eax,0x40
c000d476:	0f b6 c0             	movzx  eax,al
c000d479:	83 ec 0c             	sub    esp,0xc
c000d47c:	50                   	push   eax
c000d47d:	e8 60 fa ff ff       	call   c000cee2 <sendKeyToTerminal(unsigned char)>
c000d482:	83 c4 10             	add    esp,0x10
c000d485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d488:	0f b7 c0             	movzx  eax,ax
c000d48b:	3d 00 03 00 00       	cmp    eax,0x300
c000d490:	75 12                	jne    c000d4a4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d492:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d495:	83 f0 01             	xor    eax,0x1
c000d498:	0f b6 c0             	movzx  eax,al
c000d49b:	85 c0                	test   eax,eax
c000d49d:	74 05                	je     c000d4a4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d49f:	e8 5f b0 ff ff       	call   c0008503 <doTerminalCycle()>
c000d4a4:	90                   	nop
c000d4a5:	c9                   	leave  
c000d4a6:	c3                   	ret    

c000d4a7 <clearInternalKeybuffer(VgaText*)>:
c000d4a7:	55                   	push   ebp
c000d4a8:	89 e5                	mov    ebp,esp
c000d4aa:	83 ec 08             	sub    esp,0x8
c000d4ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b0:	05 02 01 00 00       	add    eax,0x102
c000d4b5:	83 ec 0c             	sub    esp,0xc
c000d4b8:	50                   	push   eax
c000d4b9:	e8 b2 30 ff ff       	call   c0000570 <strlen>
c000d4be:	83 c4 10             	add    esp,0x10
c000d4c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d4c4:	81 c2 02 01 00 00    	add    edx,0x102
c000d4ca:	83 ec 04             	sub    esp,0x4
c000d4cd:	50                   	push   eax
c000d4ce:	6a 00                	push   0x0
c000d4d0:	52                   	push   edx
c000d4d1:	e8 1a 30 ff ff       	call   c00004f0 <memset>
c000d4d6:	83 c4 10             	add    esp,0x10
c000d4d9:	90                   	nop
c000d4da:	c9                   	leave  
c000d4db:	c3                   	ret    

c000d4dc <readKeyboard(VgaText*, char*, unsigned long)>:
c000d4dc:	55                   	push   ebp
c000d4dd:	89 e5                	mov    ebp,esp
c000d4df:	83 ec 18             	sub    esp,0x18
c000d4e2:	a1 88 90 02 c0       	mov    eax,ds:0xc0029088
c000d4e7:	85 c0                	test   eax,eax
c000d4e9:	74 2a                	je     c000d515 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d4eb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d4f1:	8b 0d 88 90 02 c0    	mov    ecx,DWORD PTR ds:0xc0029088
c000d4f7:	83 ec 04             	sub    esp,0x4
c000d4fa:	68 a0 90 02 c0       	push   0xc00290a0
c000d4ff:	83 ec 08             	sub    esp,0x8
c000d502:	89 e2                	mov    edx,esp
c000d504:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d507:	89 02                	mov    DWORD PTR [edx],eax
c000d509:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d50c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d510:	ff d1                	call   ecx
c000d512:	83 c4 10             	add    esp,0x10
c000d515:	fb                   	sti    
c000d516:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d51d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d521:	0f 84 0d 01 00 00    	je     c000d634 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d530:	0f be c0             	movsx  eax,al
c000d533:	85 c0                	test   eax,eax
c000d535:	75 2c                	jne    c000d563 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d537:	fa                   	cli    
c000d538:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d53d:	83 c0 01             	add    eax,0x1
c000d540:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000d545:	e8 82 85 00 00       	call   c0015acc <schedule()>
c000d54a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d54f:	83 e8 01             	sub    eax,0x1
c000d552:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000d557:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d55c:	85 c0                	test   eax,eax
c000d55e:	75 c7                	jne    c000d527 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d560:	fb                   	sti    
c000d561:	eb c4                	jmp    c000d527 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d563:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d566:	8d 50 01             	lea    edx,[eax+0x1]
c000d569:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d56c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d56f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d575:	88 10                	mov    BYTE PTR [eax],dl
c000d577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d57a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d580:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d583:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d587:	83 f8 03             	cmp    eax,0x3
c000d58a:	75 1e                	jne    c000d5aa <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d58c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d591:	8b 00                	mov    eax,DWORD PTR [eax]
c000d593:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d596:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d59c:	83 ec 08             	sub    esp,0x8
c000d59f:	6a 02                	push   0x2
c000d5a1:	50                   	push   eax
c000d5a2:	e8 07 41 00 00       	call   c00116ae <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5a7:	83 c4 10             	add    esp,0x10
c000d5aa:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5ae:	83 f8 1c             	cmp    eax,0x1c
c000d5b1:	75 1e                	jne    c000d5d1 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d5b3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5bd:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5c3:	83 ec 08             	sub    esp,0x8
c000d5c6:	6a 09                	push   0x9
c000d5c8:	50                   	push   eax
c000d5c9:	e8 e0 40 00 00       	call   c00116ae <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5ce:	83 c4 10             	add    esp,0x10
c000d5d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d4:	05 02 01 00 00       	add    eax,0x102
c000d5d9:	83 ec 0c             	sub    esp,0xc
c000d5dc:	50                   	push   eax
c000d5dd:	e8 8e 2f ff ff       	call   c0000570 <strlen>
c000d5e2:	83 c4 10             	add    esp,0x10
c000d5e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5e8:	81 c2 02 01 00 00    	add    edx,0x102
c000d5ee:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d5f1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5f4:	81 c2 02 01 00 00    	add    edx,0x102
c000d5fa:	83 ec 04             	sub    esp,0x4
c000d5fd:	50                   	push   eax
c000d5fe:	51                   	push   ecx
c000d5ff:	52                   	push   edx
c000d600:	e8 cb 2d ff ff       	call   c00003d0 <memmove>
c000d605:	83 c4 10             	add    esp,0x10
c000d608:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d60c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d610:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d614:	83 f8 0a             	cmp    eax,0xa
c000d617:	74 16                	je     c000d62f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d619:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d61d:	83 f8 03             	cmp    eax,0x3
c000d620:	74 0d                	je     c000d62f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d622:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d626:	83 f8 1c             	cmp    eax,0x1c
c000d629:	0f 85 ee fe ff ff    	jne    c000d51d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d62f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d632:	eb 03                	jmp    c000d637 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d634:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d637:	c9                   	leave  
c000d638:	c3                   	ret    
c000d639:	90                   	nop

c000d63a <Keyboard::Keyboard(char const*)>:
c000d63a:	83 ec 0c             	sub    esp,0xc
c000d63d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d641:	83 ec 08             	sub    esp,0x8
c000d644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d648:	50                   	push   eax
c000d649:	e8 4c f1 ff ff       	call   c000c79a <Device::Device(char const*)>
c000d64e:	83 c4 10             	add    esp,0x10
c000d651:	ba dc 15 02 c0       	mov    edx,0xc00215dc
c000d656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d65a:	89 10                	mov    DWORD PTR [eax],edx
c000d65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d660:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d66a:	c6 05 84 90 02 c0 01 	mov    BYTE PTR ds:0xc0029084,0x1
c000d671:	90                   	nop
c000d672:	83 c4 0c             	add    esp,0xc
c000d675:	c3                   	ret    

c000d676 <Keyboard::~Keyboard()>:
c000d676:	83 ec 0c             	sub    esp,0xc
c000d679:	ba dc 15 02 c0       	mov    edx,0xc00215dc
c000d67e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d682:	89 10                	mov    DWORD PTR [eax],edx
c000d684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d688:	83 ec 0c             	sub    esp,0xc
c000d68b:	50                   	push   eax
c000d68c:	e8 73 ee ff ff       	call   c000c504 <Device::~Device()>
c000d691:	83 c4 10             	add    esp,0x10
c000d694:	90                   	nop
c000d695:	83 c4 0c             	add    esp,0xc
c000d698:	c3                   	ret    
c000d699:	90                   	nop

c000d69a <Keyboard::~Keyboard()>:
c000d69a:	83 ec 0c             	sub    esp,0xc
c000d69d:	83 ec 0c             	sub    esp,0xc
c000d6a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6a4:	e8 cd ff ff ff       	call   c000d676 <Keyboard::~Keyboard()>
c000d6a9:	83 c4 10             	add    esp,0x10
c000d6ac:	83 ec 08             	sub    esp,0x8
c000d6af:	68 5c 01 00 00       	push   0x15c
c000d6b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b8:	e8 5b d1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d6bd:	83 c4 10             	add    esp,0x10
c000d6c0:	83 c4 0c             	add    esp,0xc
c000d6c3:	c3                   	ret    

c000d6c4 <LogicalDisk::close(int, int, void*)>:
c000d6c4:	83 c8 ff             	or     eax,0xffffffff
c000d6c7:	c3                   	ret    

c000d6c8 <LogicalDisk::~LogicalDisk()>:
c000d6c8:	83 ec 0c             	sub    esp,0xc
c000d6cb:	ba 54 16 02 c0       	mov    edx,0xc0021654
c000d6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d4:	89 10                	mov    DWORD PTR [eax],edx
c000d6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6da:	83 ec 0c             	sub    esp,0xc
c000d6dd:	50                   	push   eax
c000d6de:	e8 21 ee ff ff       	call   c000c504 <Device::~Device()>
c000d6e3:	83 c4 10             	add    esp,0x10
c000d6e6:	90                   	nop
c000d6e7:	83 c4 0c             	add    esp,0xc
c000d6ea:	c3                   	ret    
c000d6eb:	90                   	nop

c000d6ec <LogicalDisk::~LogicalDisk()>:
c000d6ec:	83 ec 0c             	sub    esp,0xc
c000d6ef:	83 ec 0c             	sub    esp,0xc
c000d6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6f6:	e8 cd ff ff ff       	call   c000d6c8 <LogicalDisk::~LogicalDisk()>
c000d6fb:	83 c4 10             	add    esp,0x10
c000d6fe:	83 ec 08             	sub    esp,0x8
c000d701:	68 78 01 00 00       	push   0x178
c000d706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70a:	e8 09 d1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	83 c4 0c             	add    esp,0xc
c000d715:	c3                   	ret    

c000d716 <LogicalDisk::open(int, int, void*)>:
c000d716:	83 ec 18             	sub    esp,0x18
c000d719:	68 08 16 02 c0       	push   0xc0021608
c000d71e:	e8 ea 3a 00 00       	call   c001120d <KePanic(char const*)>
c000d723:	83 c8 ff             	or     eax,0xffffffff
c000d726:	83 c4 1c             	add    esp,0x1c
c000d729:	c3                   	ret    

c000d72a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d72a:	53                   	push   ebx
c000d72b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d72f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d733:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d737:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d73d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d743:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d749:	77 10                	ja     c000d75b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d74b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d751:	89 d3                	mov    ebx,edx
c000d753:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d759:	72 05                	jb     c000d760 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d75b:	83 c8 ff             	or     eax,0xffffffff
c000d75e:	89 c2                	mov    edx,eax
c000d760:	5b                   	pop    ebx
c000d761:	c3                   	ret    

c000d762 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d762:	56                   	push   esi
c000d763:	83 c8 ff             	or     eax,0xffffffff
c000d766:	53                   	push   ebx
c000d767:	89 c2                	mov    edx,eax
c000d769:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d76d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d771:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d775:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d77b:	77 27                	ja     c000d7a4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d77d:	89 d8                	mov    eax,ebx
c000d77f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d785:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d78b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d790:	89 c2                	mov    edx,eax
c000d792:	73 10                	jae    c000d7a4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d794:	89 c8                	mov    eax,ecx
c000d796:	89 da                	mov    edx,ebx
c000d798:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d79e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d7a4:	5b                   	pop    ebx
c000d7a5:	5e                   	pop    esi
c000d7a6:	c3                   	ret    
c000d7a7:	90                   	nop

c000d7a8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d7a8:	83 ec 1c             	sub    esp,0x1c
c000d7ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d7c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ce:	83 ec 08             	sub    esp,0x8
c000d7d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d7d5:	50                   	push   eax
c000d7d6:	e8 bf ef ff ff       	call   c000c79a <Device::Device(char const*)>
c000d7db:	83 c4 10             	add    esp,0x10
c000d7de:	ba 54 16 02 c0       	mov    edx,0xc0021654
c000d7e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e7:	89 10                	mov    DWORD PTR [eax],edx
c000d7e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ed:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d7f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d7ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d803:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d80a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d80e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d818:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d81c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d820:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d824:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d82a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d830:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d834:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d837:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d83b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d841:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d84b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d84f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d859:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d863:	90                   	nop
c000d864:	83 c4 1c             	add    esp,0x1c
c000d867:	c3                   	ret    

c000d868 <LogicalDisk::assignDriveLetter()>:
c000d868:	55                   	push   ebp
c000d869:	57                   	push   edi
c000d86a:	56                   	push   esi
c000d86b:	53                   	push   ebx
c000d86c:	83 ec 14             	sub    esp,0x14
c000d86f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d873:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d879:	b0 41                	mov    al,0x41
c000d87b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d881:	84 d2                	test   dl,dl
c000d883:	75 02                	jne    c000d887 <LogicalDisk::assignDriveLetter()+0x1f>
c000d885:	b0 43                	mov    al,0x43
c000d887:	8b 3d c0 94 02 c0    	mov    edi,DWORD PTR ds:0xc00294c0
c000d88d:	0f b6 ca             	movzx  ecx,dl
c000d890:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d894:	0f be e8             	movsx  ebp,al
c000d897:	8b 3d c4 94 02 c0    	mov    edi,DWORD PTR ds:0xc00294c4
c000d89d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d8a1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d8a5:	3c 43                	cmp    al,0x43
c000d8a7:	75 10                	jne    c000d8b9 <LogicalDisk::assignDriveLetter()+0x51>
c000d8a9:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d8b0:	75 5a                	jne    c000d90c <LogicalDisk::assignDriveLetter()+0xa4>
c000d8b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d8b7:	75 53                	jne    c000d90c <LogicalDisk::assignDriveLetter()+0xa4>
c000d8b9:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d8bc:	ba 01 00 00 00       	mov    edx,0x1
c000d8c1:	89 34 24             	mov    DWORD PTR [esp],esi
c000d8c4:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d8c7:	d3 e2                	shl    edx,cl
c000d8c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d8cd:	89 d7                	mov    edi,edx
c000d8cf:	89 d6                	mov    esi,edx
c000d8d1:	c1 ff 1f             	sar    edi,0x1f
c000d8d4:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d8d8:	21 f9                	and    ecx,edi
c000d8da:	09 d1                	or     ecx,edx
c000d8dc:	75 2e                	jne    c000d90c <LogicalDisk::assignDriveLetter()+0xa4>
c000d8de:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d8e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d8e6:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d8ec:	09 f2                	or     edx,esi
c000d8ee:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d8f1:	89 15 c0 94 02 c0    	mov    DWORD PTR ds:0xc00294c0,edx
c000d8f7:	89 1c b5 e0 94 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6b20],ebx
c000d8fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d902:	09 fa                	or     edx,edi
c000d904:	89 15 c4 94 02 c0    	mov    DWORD PTR ds:0xc00294c4,edx
c000d90a:	eb 0d                	jmp    c000d919 <LogicalDisk::assignDriveLetter()+0xb1>
c000d90c:	8d 50 01             	lea    edx,[eax+0x1]
c000d90f:	45                   	inc    ebp
c000d910:	88 d0                	mov    al,dl
c000d912:	80 fa 5b             	cmp    dl,0x5b
c000d915:	75 8e                	jne    c000d8a5 <LogicalDisk::assignDriveLetter()+0x3d>
c000d917:	31 c0                	xor    eax,eax
c000d919:	83 c4 14             	add    esp,0x14
c000d91c:	5b                   	pop    ebx
c000d91d:	5e                   	pop    esi
c000d91e:	5f                   	pop    edi
c000d91f:	5d                   	pop    ebp
c000d920:	c3                   	ret    
c000d921:	90                   	nop

c000d922 <LogicalDisk::mount()>:
c000d922:	56                   	push   esi
c000d923:	53                   	push   ebx
c000d924:	53                   	push   ebx
c000d925:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d929:	8b 1d 64 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027064
c000d92f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d939:	85 db                	test   ebx,ebx
c000d93b:	74 27                	je     c000d964 <LogicalDisk::mount()+0x42>
c000d93d:	51                   	push   ecx
c000d93e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d945:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d947:	83 e8 41             	sub    eax,0x41
c000d94a:	50                   	push   eax
c000d94b:	56                   	push   esi
c000d94c:	53                   	push   ebx
c000d94d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d950:	83 c4 10             	add    esp,0x10
c000d953:	84 c0                	test   al,al
c000d955:	74 08                	je     c000d95f <LogicalDisk::mount()+0x3d>
c000d957:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d95d:	eb 07                	jmp    c000d966 <LogicalDisk::mount()+0x44>
c000d95f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d962:	eb d5                	jmp    c000d939 <LogicalDisk::mount()+0x17>
c000d964:	31 c0                	xor    eax,eax
c000d966:	5a                   	pop    edx
c000d967:	5b                   	pop    ebx
c000d968:	5e                   	pop    esi
c000d969:	c3                   	ret    

c000d96a <LogicalDisk::unmount()>:
c000d96a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d96e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d978:	c3                   	ret    
c000d979:	90                   	nop

c000d97a <LogicalDisk::eject()>:
c000d97a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d97e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d984:	8b 10                	mov    edx,DWORD PTR [eax]
c000d986:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d98a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d98d:	90                   	nop

c000d98e <LogicalDisk::unassignDriveLetter()>:
c000d98e:	57                   	push   edi
c000d98f:	56                   	push   esi
c000d990:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d994:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d99b:	85 c9                	test   ecx,ecx
c000d99d:	75 0f                	jne    c000d9ae <LogicalDisk::unassignDriveLetter()+0x20>
c000d99f:	c7 44 24 0c 2c 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc002162c
c000d9a7:	5e                   	pop    esi
c000d9a8:	5f                   	pop    edi
c000d9a9:	e9 5f 38 00 00       	jmp    c001120d <KePanic(char const*)>
c000d9ae:	83 e9 41             	sub    ecx,0x41
c000d9b1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d9b8:	b8 01 00 00 00       	mov    eax,0x1
c000d9bd:	c7 04 8d e0 94 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6b20],0x0
c000d9c8:	d3 e0                	shl    eax,cl
c000d9ca:	89 c7                	mov    edi,eax
c000d9cc:	f7 d0                	not    eax
c000d9ce:	c1 ff 1f             	sar    edi,0x1f
c000d9d1:	21 05 c0 94 02 c0    	and    DWORD PTR ds:0xc00294c0,eax
c000d9d7:	89 fe                	mov    esi,edi
c000d9d9:	f7 d6                	not    esi
c000d9db:	21 35 c4 94 02 c0    	and    DWORD PTR ds:0xc00294c4,esi
c000d9e1:	5e                   	pop    esi
c000d9e2:	5f                   	pop    edi
c000d9e3:	c3                   	ret    

c000d9e4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d9e4:	57                   	push   edi
c000d9e5:	56                   	push   esi
c000d9e6:	53                   	push   ebx
c000d9e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9ef:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d9f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9f7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d9fd:	77 41                	ja     c000da40 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d9ff:	99                   	cdq    
c000da00:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da06:	01 c8                	add    eax,ecx
c000da08:	11 da                	adc    edx,ebx
c000da0a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da10:	19 d7                	sbb    edi,edx
c000da12:	72 33                	jb     c000da47 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000da14:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da1a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da20:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da24:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da28:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da2e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da38:	5b                   	pop    ebx
c000da39:	5e                   	pop    esi
c000da3a:	5f                   	pop    edi
c000da3b:	e9 c6 0a 00 00       	jmp    c000e506 <VCache::read(unsigned long long, int, void*)>
c000da40:	b8 05 00 00 00       	mov    eax,0x5
c000da45:	eb 05                	jmp    c000da4c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000da47:	b8 07 00 00 00       	mov    eax,0x7
c000da4c:	5b                   	pop    ebx
c000da4d:	5e                   	pop    esi
c000da4e:	5f                   	pop    edi
c000da4f:	c3                   	ret    

c000da50 <LogicalDisk::write(unsigned long long, int, void*)>:
c000da50:	57                   	push   edi
c000da51:	56                   	push   esi
c000da52:	53                   	push   ebx
c000da53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da63:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da69:	77 41                	ja     c000daac <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000da6b:	99                   	cdq    
c000da6c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da72:	01 c8                	add    eax,ecx
c000da74:	11 da                	adc    edx,ebx
c000da76:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da7c:	19 d7                	sbb    edi,edx
c000da7e:	72 33                	jb     c000dab3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000da80:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da86:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da8c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da90:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da94:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da9a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000daa0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000daa4:	5b                   	pop    ebx
c000daa5:	5e                   	pop    esi
c000daa6:	5f                   	pop    edi
c000daa7:	e9 6c 09 00 00       	jmp    c000e418 <VCache::write(unsigned long long, int, void*)>
c000daac:	b8 05 00 00 00       	mov    eax,0x5
c000dab1:	eb 05                	jmp    c000dab8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dab3:	b8 07 00 00 00       	mov    eax,0x7
c000dab8:	5b                   	pop    ebx
c000dab9:	5e                   	pop    esi
c000daba:	5f                   	pop    edi
c000dabb:	c3                   	ret    

c000dabc <Mouse::Mouse(char const*)>:
c000dabc:	83 ec 0c             	sub    esp,0xc
c000dabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac3:	83 ec 08             	sub    esp,0x8
c000dac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daca:	50                   	push   eax
c000dacb:	e8 ca ec ff ff       	call   c000c79a <Device::Device(char const*)>
c000dad0:	83 c4 10             	add    esp,0x10
c000dad3:	ba 80 16 02 c0       	mov    edx,0xc0021680
c000dad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dadc:	89 10                	mov    DWORD PTR [eax],edx
c000dade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000daec:	90                   	nop
c000daed:	83 c4 0c             	add    esp,0xc
c000daf0:	c3                   	ret    
c000daf1:	90                   	nop
c000daf2:	66 90                	xchg   ax,ax

c000daf4 <Mouse::~Mouse()>:
c000daf4:	83 ec 0c             	sub    esp,0xc
c000daf7:	ba 80 16 02 c0       	mov    edx,0xc0021680
c000dafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db00:	89 10                	mov    DWORD PTR [eax],edx
c000db02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db06:	83 ec 0c             	sub    esp,0xc
c000db09:	50                   	push   eax
c000db0a:	e8 f5 e9 ff ff       	call   c000c504 <Device::~Device()>
c000db0f:	83 c4 10             	add    esp,0x10
c000db12:	90                   	nop
c000db13:	83 c4 0c             	add    esp,0xc
c000db16:	c3                   	ret    
c000db17:	90                   	nop

c000db18 <Mouse::~Mouse()>:
c000db18:	83 ec 0c             	sub    esp,0xc
c000db1b:	83 ec 0c             	sub    esp,0xc
c000db1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db22:	e8 cd ff ff ff       	call   c000daf4 <Mouse::~Mouse()>
c000db27:	83 c4 10             	add    esp,0x10
c000db2a:	83 ec 08             	sub    esp,0x8
c000db2d:	68 58 01 00 00       	push   0x158
c000db32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db36:	e8 dd cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000db3b:	83 c4 10             	add    esp,0x10
c000db3e:	83 c4 0c             	add    esp,0xc
c000db41:	c3                   	ret    

c000db42 <NIC::getMAC()>:
c000db42:	31 c0                	xor    eax,eax
c000db44:	31 d2                	xor    edx,edx
c000db46:	c3                   	ret    
c000db47:	90                   	nop

c000db48 <NIC::write(int, unsigned char*, int*)>:
c000db48:	b8 01 00 00 00       	mov    eax,0x1
c000db4d:	c3                   	ret    

c000db4e <NIC::NIC(char const*)>:
c000db4e:	83 ec 0c             	sub    esp,0xc
c000db51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db55:	83 ec 08             	sub    esp,0x8
c000db58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db5c:	50                   	push   eax
c000db5d:	e8 38 ec ff ff       	call   c000c79a <Device::Device(char const*)>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	ba ac 16 02 c0       	mov    edx,0xc00216ac
c000db6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6e:	89 10                	mov    DWORD PTR [eax],edx
c000db70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db74:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000db7e:	90                   	nop
c000db7f:	83 c4 0c             	add    esp,0xc
c000db82:	c3                   	ret    
c000db83:	90                   	nop

c000db84 <NIC::~NIC()>:
c000db84:	83 ec 0c             	sub    esp,0xc
c000db87:	ba ac 16 02 c0       	mov    edx,0xc00216ac
c000db8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db90:	89 10                	mov    DWORD PTR [eax],edx
c000db92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db96:	83 ec 0c             	sub    esp,0xc
c000db99:	50                   	push   eax
c000db9a:	e8 65 e9 ff ff       	call   c000c504 <Device::~Device()>
c000db9f:	83 c4 10             	add    esp,0x10
c000dba2:	90                   	nop
c000dba3:	83 c4 0c             	add    esp,0xc
c000dba6:	c3                   	ret    
c000dba7:	90                   	nop

c000dba8 <NIC::~NIC()>:
c000dba8:	83 ec 0c             	sub    esp,0xc
c000dbab:	83 ec 0c             	sub    esp,0xc
c000dbae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb2:	e8 cd ff ff ff       	call   c000db84 <NIC::~NIC()>
c000dbb7:	83 c4 10             	add    esp,0x10
c000dbba:	83 ec 08             	sub    esp,0x8
c000dbbd:	68 58 01 00 00       	push   0x158
c000dbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc6:	e8 4d cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	83 c4 0c             	add    esp,0xc
c000dbd1:	c3                   	ret    

c000dbd2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbd2:	55                   	push   ebp
c000dbd3:	57                   	push   edi
c000dbd4:	56                   	push   esi
c000dbd5:	53                   	push   ebx
c000dbd6:	81 ec 28 01 00 00    	sub    esp,0x128
c000dbdc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dbe3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dbea:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dbf1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dbf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbfc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc00:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc07:	e8 8a ec ff ff       	call   c000c896 <Device::getName()>
c000dc0c:	5a                   	pop    edx
c000dc0d:	59                   	pop    ecx
c000dc0e:	50                   	push   eax
c000dc0f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dc13:	55                   	push   ebp
c000dc14:	e8 27 2a ff ff       	call   c0000640 <strcpy>
c000dc19:	5b                   	pop    ebx
c000dc1a:	58                   	pop    eax
c000dc1b:	68 d8 16 02 c0       	push   0xc00216d8
c000dc20:	55                   	push   ebp
c000dc21:	e8 1a 2c ff ff       	call   c0000840 <strcat>
c000dc26:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dc2d:	e8 84 9e ff ff       	call   c0007ab6 <malloc>
c000dc32:	83 c4 0c             	add    esp,0xc
c000dc35:	89 c3                	mov    ebx,eax
c000dc37:	57                   	push   edi
c000dc38:	56                   	push   esi
c000dc39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc41:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dc48:	55                   	push   ebp
c000dc49:	50                   	push   eax
c000dc4a:	e8 59 fb ff ff       	call   c000d7a8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dc4f:	83 c4 14             	add    esp,0x14
c000dc52:	53                   	push   ebx
c000dc53:	e8 10 fc ff ff       	call   c000d868 <LogicalDisk::assignDriveLetter()>
c000dc58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc5b:	e8 c2 fc ff ff       	call   c000d922 <LogicalDisk::mount()>
c000dc60:	58                   	pop    eax
c000dc61:	5a                   	pop    edx
c000dc62:	53                   	push   ebx
c000dc63:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc6a:	e8 93 e9 ff ff       	call   c000c602 <Device::addChild(Device*)>
c000dc6f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dc75:	5b                   	pop    ebx
c000dc76:	5e                   	pop    esi
c000dc77:	5f                   	pop    edi
c000dc78:	5d                   	pop    ebp
c000dc79:	c3                   	ret    

c000dc7a <createPartitionsForDisk(PhysicalDisk*)>:
c000dc7a:	55                   	push   ebp
c000dc7b:	57                   	push   edi
c000dc7c:	56                   	push   esi
c000dc7d:	53                   	push   ebx
c000dc7e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dc84:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dc8b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dc91:	3d 00 02 00 00       	cmp    eax,0x200
c000dc96:	74 27                	je     c000dcbf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dc98:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dc9e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dca4:	83 ec 10             	sub    esp,0x10
c000dca7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dcab:	99                   	cdq    
c000dcac:	c1 e6 0a             	shl    esi,0xa
c000dcaf:	52                   	push   edx
c000dcb0:	89 fd                	mov    ebp,edi
c000dcb2:	50                   	push   eax
c000dcb3:	55                   	push   ebp
c000dcb4:	56                   	push   esi
c000dcb5:	e8 86 14 01 00       	call   c001f140 <__udivdi3>
c000dcba:	e9 b9 00 00 00       	jmp    c000dd78 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dcbf:	83 ec 0c             	sub    esp,0xc
c000dcc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcc4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dcc8:	56                   	push   esi
c000dcc9:	6a 01                	push   0x1
c000dccb:	6a 00                	push   0x0
c000dccd:	6a 00                	push   0x0
c000dccf:	53                   	push   ebx
c000dcd0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dcd3:	83 c4 20             	add    esp,0x20
c000dcd6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dcde:	75 0a                	jne    c000dcea <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dce0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dce8:	74 2c                	je     c000dd16 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dcea:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dcf0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dcf6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dcfc:	83 ec 10             	sub    esp,0x10
c000dcff:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd03:	89 f7                	mov    edi,esi
c000dd05:	c1 e0 0a             	shl    eax,0xa
c000dd08:	c1 ff 1f             	sar    edi,0x1f
c000dd0b:	57                   	push   edi
c000dd0c:	56                   	push   esi
c000dd0d:	52                   	push   edx
c000dd0e:	50                   	push   eax
c000dd0f:	e8 2c 14 01 00       	call   c001f140 <__udivdi3>
c000dd14:	eb 62                	jmp    c000dd78 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd16:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dd1d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dd24:	89 cf                	mov    edi,ecx
c000dd26:	83 e2 7f             	and    edx,0x7f
c000dd29:	83 e7 7f             	and    edi,0x7f
c000dd2c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dd33:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dd36:	83 e0 7f             	and    eax,0x7f
c000dd39:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dd3c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000dd43:	83 e0 7f             	and    eax,0x7f
c000dd46:	01 d0                	add    eax,edx
c000dd48:	89 c5                	mov    ebp,eax
c000dd4a:	84 c0                	test   al,al
c000dd4c:	74 41                	je     c000dd8f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dd4e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd54:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd5a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd60:	83 ec 10             	sub    esp,0x10
c000dd63:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd67:	89 f7                	mov    edi,esi
c000dd69:	c1 e0 0a             	shl    eax,0xa
c000dd6c:	c1 ff 1f             	sar    edi,0x1f
c000dd6f:	57                   	push   edi
c000dd70:	56                   	push   esi
c000dd71:	52                   	push   edx
c000dd72:	50                   	push   eax
c000dd73:	e8 c8 13 01 00       	call   c001f140 <__udivdi3>
c000dd78:	83 c4 14             	add    esp,0x14
c000dd7b:	52                   	push   edx
c000dd7c:	50                   	push   eax
c000dd7d:	6a 00                	push   0x0
c000dd7f:	6a 00                	push   0x0
c000dd81:	53                   	push   ebx
c000dd82:	e8 4b fe ff ff       	call   c000dbd2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd87:	83 c4 20             	add    esp,0x20
c000dd8a:	e9 73 01 00 00       	jmp    c000df02 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000dd8f:	89 f0                	mov    eax,esi
c000dd91:	31 c9                	xor    ecx,ecx
c000dd93:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dd9a:	75 02                	jne    c000dd9e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dd9c:	89 cd                	mov    ebp,ecx
c000dd9e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000dda5:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ddac:	c1 e2 08             	shl    edx,0x8
c000ddaf:	c1 e6 10             	shl    esi,0x10
c000ddb2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ddba:	09 f2                	or     edx,esi
c000ddbc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ddc4:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ddcb:	83 c0 10             	add    eax,0x10
c000ddce:	09 f2                	or     edx,esi
c000ddd0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ddd7:	c1 e6 18             	shl    esi,0x18
c000ddda:	09 f2                	or     edx,esi
c000dddc:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000dde3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000dde7:	c1 e6 10             	shl    esi,0x10
c000ddea:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ddf1:	c1 e2 08             	shl    edx,0x8
c000ddf4:	09 f2                	or     edx,esi
c000ddf6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ddfd:	09 f2                	or     edx,esi
c000ddff:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000de06:	c1 e6 18             	shl    esi,0x18
c000de09:	09 f2                	or     edx,esi
c000de0b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000de0f:	41                   	inc    ecx
c000de10:	83 f9 04             	cmp    ecx,0x4
c000de13:	0f 85 7a ff ff ff    	jne    c000dd93 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000de19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de1d:	83 f0 01             	xor    eax,0x1
c000de20:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000de24:	75 4f                	jne    c000de75 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de2a:	83 f0 01             	xor    eax,0x1
c000de2d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000de31:	75 42                	jne    c000de75 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de33:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000de3b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de43:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de49:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de4f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de55:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de59:	89 f7                	mov    edi,esi
c000de5b:	c1 e0 0a             	shl    eax,0xa
c000de5e:	c1 ff 1f             	sar    edi,0x1f
c000de61:	57                   	push   edi
c000de62:	56                   	push   esi
c000de63:	52                   	push   edx
c000de64:	50                   	push   eax
c000de65:	e8 d6 12 01 00       	call   c001f140 <__udivdi3>
c000de6a:	83 c4 10             	add    esp,0x10
c000de6d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de75:	89 e8                	mov    eax,ebp
c000de77:	0f b6 e8             	movzx  ebp,al
c000de7a:	85 ed                	test   ebp,ebp
c000de7c:	74 50                	je     c000dece <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000de7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de82:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de86:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de8a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000de8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de96:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000de9a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000de9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dea2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000deaa:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000deae:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000deb2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000deb6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000deba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000debe:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000dec2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dec6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000deca:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000dece:	31 ed                	xor    ebp,ebp
c000ded0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000ded4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000ded8:	89 f8                	mov    eax,edi
c000deda:	09 f0                	or     eax,esi
c000dedc:	74 1e                	je     c000defc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000dede:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dee2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dee6:	89 d1                	mov    ecx,edx
c000dee8:	09 c1                	or     ecx,eax
c000deea:	74 10                	je     c000defc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	57                   	push   edi
c000def0:	56                   	push   esi
c000def1:	52                   	push   edx
c000def2:	50                   	push   eax
c000def3:	53                   	push   ebx
c000def4:	e8 d9 fc ff ff       	call   c000dbd2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000def9:	83 c4 20             	add    esp,0x20
c000defc:	45                   	inc    ebp
c000defd:	83 fd 04             	cmp    ebp,0x4
c000df00:	75 ce                	jne    c000ded0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000df02:	81 c4 5c 02 00 00    	add    esp,0x25c
c000df08:	5b                   	pop    ebx
c000df09:	5e                   	pop    esi
c000df0a:	5f                   	pop    edi
c000df0b:	5d                   	pop    ebp
c000df0c:	c3                   	ret    
c000df0d:	66 90                	xchg   ax,ax
c000df0f:	90                   	nop

c000df10 <Serial::Serial(char const*)>:
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df17:	83 ec 08             	sub    esp,0x8
c000df1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1e:	50                   	push   eax
c000df1f:	e8 76 e8 ff ff       	call   c000c79a <Device::Device(char const*)>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	ba ec 16 02 c0       	mov    edx,0xc00216ec
c000df2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df30:	89 10                	mov    DWORD PTR [eax],edx
c000df32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df36:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000df40:	90                   	nop
c000df41:	83 c4 0c             	add    esp,0xc
c000df44:	c3                   	ret    
c000df45:	90                   	nop
c000df46:	66 90                	xchg   ax,ax

c000df48 <Serial::~Serial()>:
c000df48:	83 ec 0c             	sub    esp,0xc
c000df4b:	ba ec 16 02 c0       	mov    edx,0xc00216ec
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	89 10                	mov    DWORD PTR [eax],edx
c000df56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5a:	83 ec 0c             	sub    esp,0xc
c000df5d:	50                   	push   eax
c000df5e:	e8 a1 e5 ff ff       	call   c000c504 <Device::~Device()>
c000df63:	83 c4 10             	add    esp,0x10
c000df66:	90                   	nop
c000df67:	83 c4 0c             	add    esp,0xc
c000df6a:	c3                   	ret    
c000df6b:	90                   	nop

c000df6c <Serial::~Serial()>:
c000df6c:	83 ec 0c             	sub    esp,0xc
c000df6f:	83 ec 0c             	sub    esp,0xc
c000df72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df76:	e8 cd ff ff ff       	call   c000df48 <Serial::~Serial()>
c000df7b:	83 c4 10             	add    esp,0x10
c000df7e:	83 ec 08             	sub    esp,0x8
c000df81:	68 58 01 00 00       	push   0x158
c000df86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8a:	e8 89 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df8f:	83 c4 10             	add    esp,0x10
c000df92:	83 c4 0c             	add    esp,0xc
c000df95:	c3                   	ret    
c000df96:	66 90                	xchg   ax,ax

c000df98 <Timer::Timer(char const*)>:
c000df98:	83 ec 0c             	sub    esp,0xc
c000df9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9f:	83 ec 08             	sub    esp,0x8
c000dfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa6:	50                   	push   eax
c000dfa7:	e8 ee e7 ff ff       	call   c000c79a <Device::Device(char const*)>
c000dfac:	83 c4 10             	add    esp,0x10
c000dfaf:	ba 30 17 02 c0       	mov    edx,0xc0021730
c000dfb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb8:	89 10                	mov    DWORD PTR [eax],edx
c000dfba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbe:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000dfc8:	90                   	nop
c000dfc9:	83 c4 0c             	add    esp,0xc
c000dfcc:	c3                   	ret    
c000dfcd:	90                   	nop
c000dfce:	66 90                	xchg   ax,ax

c000dfd0 <Timer::~Timer()>:
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	ba 30 17 02 c0       	mov    edx,0xc0021730
c000dfd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfdc:	89 10                	mov    DWORD PTR [eax],edx
c000dfde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe2:	83 ec 0c             	sub    esp,0xc
c000dfe5:	50                   	push   eax
c000dfe6:	e8 19 e5 ff ff       	call   c000c504 <Device::~Device()>
c000dfeb:	83 c4 10             	add    esp,0x10
c000dfee:	90                   	nop
c000dfef:	83 c4 0c             	add    esp,0xc
c000dff2:	c3                   	ret    
c000dff3:	90                   	nop

c000dff4 <Timer::~Timer()>:
c000dff4:	83 ec 0c             	sub    esp,0xc
c000dff7:	83 ec 0c             	sub    esp,0xc
c000dffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffe:	e8 cd ff ff ff       	call   c000dfd0 <Timer::~Timer()>
c000e003:	83 c4 10             	add    esp,0x10
c000e006:	83 ec 08             	sub    esp,0x8
c000e009:	68 5c 01 00 00       	push   0x15c
c000e00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e012:	e8 01 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e017:	83 c4 10             	add    esp,0x10
c000e01a:	83 c4 0c             	add    esp,0xc
c000e01d:	c3                   	ret    

c000e01e <Timer::read()>:
c000e01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e022:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e028:	c3                   	ret    

c000e029 <setupTimer(int)>:
c000e029:	53                   	push   ebx
c000e02a:	83 ec 14             	sub    esp,0x14
c000e02d:	68 5c 01 00 00       	push   0x15c
c000e032:	e8 7f 9a ff ff       	call   c0007ab6 <malloc>
c000e037:	89 04 24             	mov    DWORD PTR [esp],eax
c000e03a:	89 c3                	mov    ebx,eax
c000e03c:	e8 67 09 01 00       	call   c001e9a8 <PIT::PIT()>
c000e041:	58                   	pop    eax
c000e042:	5a                   	pop    edx
c000e043:	53                   	push   ebx
c000e044:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e04a:	e8 b3 e5 ff ff       	call   c000c602 <Device::addChild(Device*)>
c000e04f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e051:	6a 00                	push   0x0
c000e053:	6a 00                	push   0x0
c000e055:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e059:	53                   	push   ebx
c000e05a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e05d:	89 d8                	mov    eax,ebx
c000e05f:	83 c4 28             	add    esp,0x28
c000e062:	5b                   	pop    ebx
c000e063:	c3                   	ret    

c000e064 <timerHandler(unsigned int)>:
c000e064:	56                   	push   esi
c000e065:	53                   	push   ebx
c000e066:	51                   	push   ecx
c000e067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06b:	01 05 4c 95 02 c0    	add    DWORD PTR ds:0xc002954c,eax
c000e071:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e078:	0f 84 4a 01 00 00    	je     c000e1c8 <timerHandler(unsigned int)+0x164>
c000e07e:	fa                   	cli    
c000e07f:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000e085:	83 ec 0c             	sub    esp,0xc
c000e088:	ff 05 64 a4 02 c0    	inc    DWORD PTR ds:0xc002a464
c000e08e:	68 78 a4 02 c0       	push   0xc002a478
c000e093:	e8 78 16 01 00       	call   c001f710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e098:	83 c4 10             	add    esp,0x10
c000e09b:	84 c0                	test   al,al
c000e09d:	0f 85 a1 00 00 00    	jne    c000e144 <timerHandler(unsigned int)+0xe0>
c000e0a3:	83 ec 0c             	sub    esp,0xc
c000e0a6:	68 78 a4 02 c0       	push   0xc002a478
c000e0ab:	e8 7c 16 01 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0b0:	83 c4 10             	add    esp,0x10
c000e0b3:	89 c6                	mov    esi,eax
c000e0b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e0b8:	83 ec 0c             	sub    esp,0xc
c000e0bb:	68 78 a4 02 c0       	push   0xc002a478
c000e0c0:	e8 67 16 01 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0c5:	c7 04 24 78 a4 02 c0 	mov    DWORD PTR [esp],0xc002a478
c000e0cc:	89 c3                	mov    ebx,eax
c000e0ce:	e8 61 16 01 00       	call   c001f734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e0d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e0d6:	83 c4 10             	add    esp,0x10
c000e0d9:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c000e0df:	77 23                	ja     c000e104 <timerHandler(unsigned int)+0xa0>
c000e0e1:	83 ec 0c             	sub    esp,0xc
c000e0e4:	53                   	push   ebx
c000e0e5:	e8 fa 7e 00 00       	call   c0015fe4 <unblockTask(ThreadControlBlock*)>
c000e0ea:	83 c4 10             	add    esp,0x10
c000e0ed:	39 de                	cmp    esi,ebx
c000e0ef:	75 27                	jne    c000e118 <timerHandler(unsigned int)+0xb4>
c000e0f1:	83 ec 0c             	sub    esp,0xc
c000e0f4:	68 78 a4 02 c0       	push   0xc002a478
c000e0f9:	e8 2e 16 01 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0fe:	89 c6                	mov    esi,eax
c000e100:	eb 12                	jmp    c000e114 <timerHandler(unsigned int)+0xb0>
c000e102:	66 90                	xchg   ax,ax
c000e104:	52                   	push   edx
c000e105:	52                   	push   edx
c000e106:	53                   	push   ebx
c000e107:	68 78 a4 02 c0       	push   0xc002a478
c000e10c:	e8 df 16 01 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e111:	8d 76 00             	lea    esi,[esi+0x0]
c000e114:	83 c4 10             	add    esp,0x10
c000e117:	90                   	nop
c000e118:	83 ec 0c             	sub    esp,0xc
c000e11b:	68 78 a4 02 c0       	push   0xc002a478
c000e120:	e8 eb 15 01 00       	call   c001f710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	84 c0                	test   al,al
c000e12a:	75 18                	jne    c000e144 <timerHandler(unsigned int)+0xe0>
c000e12c:	83 ec 0c             	sub    esp,0xc
c000e12f:	68 78 a4 02 c0       	push   0xc002a478
c000e134:	e8 f3 15 01 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e139:	83 c4 10             	add    esp,0x10
c000e13c:	39 f0                	cmp    eax,esi
c000e13e:	0f 85 74 ff ff ff    	jne    c000e0b8 <timerHandler(unsigned int)+0x54>
c000e144:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e149:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e14d:	74 41                	je     c000e190 <timerHandler(unsigned int)+0x12c>
c000e14f:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e156:	74 38                	je     c000e190 <timerHandler(unsigned int)+0x12c>
c000e158:	fa                   	cli    
c000e159:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000e15f:	a1 4c 95 02 c0       	mov    eax,ds:0xc002954c
c000e164:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e16a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e16d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e173:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e176:	72 08                	jb     c000e180 <timerHandler(unsigned int)+0x11c>
c000e178:	e8 4f 79 00 00       	call   c0015acc <schedule()>
c000e17d:	8d 76 00             	lea    esi,[esi+0x0]
c000e180:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000e185:	48                   	dec    eax
c000e186:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000e18b:	75 03                	jne    c000e190 <timerHandler(unsigned int)+0x12c>
c000e18d:	fb                   	sti    
c000e18e:	66 90                	xchg   ax,ax
c000e190:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000e195:	48                   	dec    eax
c000e196:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000e19b:	75 1b                	jne    c000e1b8 <timerHandler(unsigned int)+0x154>
c000e19d:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c000e1a4:	74 12                	je     c000e1b8 <timerHandler(unsigned int)+0x154>
c000e1a6:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c000e1b0:	e8 17 79 00 00       	call   c0015acc <schedule()>
c000e1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1b8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000e1bd:	48                   	dec    eax
c000e1be:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000e1c3:	75 03                	jne    c000e1c8 <timerHandler(unsigned int)+0x164>
c000e1c5:	fb                   	sti    
c000e1c6:	66 90                	xchg   ax,ax
c000e1c8:	58                   	pop    eax
c000e1c9:	5b                   	pop    ebx
c000e1ca:	5e                   	pop    esi
c000e1cb:	c3                   	ret    

c000e1cc <VCache::VCache(PhysicalDisk*)>:
c000e1cc:	53                   	push   ebx
c000e1cd:	83 ec 18             	sub    esp,0x18
c000e1d0:	ba 60 17 02 c0       	mov    edx,0xc0021760
c000e1d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d9:	89 10                	mov    DWORD PTR [eax],edx
c000e1db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1df:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e1e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1ea:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e1f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e1fc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e203:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e207:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e20e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e219:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e224:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e22c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e233:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e23a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e23e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e246:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e24e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e256:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e25d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e265:	83 ec 0c             	sub    esp,0xc
c000e268:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e26c:	e8 45 98 ff ff       	call   c0007ab6 <malloc>
c000e271:	83 c4 10             	add    esp,0x10
c000e274:	89 c3                	mov    ebx,eax
c000e276:	83 ec 0c             	sub    esp,0xc
c000e279:	53                   	push   ebx
c000e27a:	e8 e9 75 00 00       	call   c0015868 <Mutex::Mutex()>
c000e27f:	83 c4 10             	add    esp,0x10
c000e282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e286:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e28d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e291:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e298:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e29f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2a3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e2a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2b4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e2ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2c0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e2c4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e2c7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e2ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ce:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e2d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2d6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2dc:	05 00 02 00 00       	add    eax,0x200
c000e2e1:	c1 e0 03             	shl    eax,0x3
c000e2e4:	83 ec 0c             	sub    esp,0xc
c000e2e7:	50                   	push   eax
c000e2e8:	e8 c9 97 ff ff       	call   c0007ab6 <malloc>
c000e2ed:	83 c4 10             	add    esp,0x10
c000e2f0:	89 c2                	mov    edx,eax
c000e2f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e2f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2fd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e308:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e30c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e310:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e316:	89 d0                	mov    eax,edx
c000e318:	c1 e0 02             	shl    eax,0x2
c000e31b:	01 d0                	add    eax,edx
c000e31d:	c1 e0 04             	shl    eax,0x4
c000e320:	83 ec 0c             	sub    esp,0xc
c000e323:	50                   	push   eax
c000e324:	e8 8d 97 ff ff       	call   c0007ab6 <malloc>
c000e329:	83 c4 10             	add    esp,0x10
c000e32c:	89 c2                	mov    edx,eax
c000e32e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e332:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e335:	90                   	nop
c000e336:	83 c4 18             	add    esp,0x18
c000e339:	5b                   	pop    ebx
c000e33a:	c3                   	ret    
c000e33b:	90                   	nop

c000e33c <VCache::invalidateReadBuffer()>:
c000e33c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e340:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e346:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e34a:	c3                   	ret    
c000e34b:	90                   	nop

c000e34c <VCache::writeWriteBuffer()>:
c000e34c:	53                   	push   ebx
c000e34d:	83 ec 08             	sub    esp,0x8
c000e350:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e354:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e358:	74 1e                	je     c000e378 <VCache::writeWriteBuffer()+0x2c>
c000e35a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e35d:	83 ec 0c             	sub    esp,0xc
c000e360:	8b 10                	mov    edx,DWORD PTR [eax]
c000e362:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e365:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e368:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e36b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e36e:	50                   	push   eax
c000e36f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e372:	83 c4 20             	add    esp,0x20
c000e375:	8d 76 00             	lea    esi,[esi+0x0]
c000e378:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e37f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e386:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e38a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e391:	83 c4 08             	add    esp,0x8
c000e394:	5b                   	pop    ebx
c000e395:	c3                   	ret    
c000e396:	66 90                	xchg   ax,ax

c000e398 <VCache::~VCache()>:
c000e398:	83 ec 0c             	sub    esp,0xc
c000e39b:	ba 60 17 02 c0       	mov    edx,0xc0021760
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	89 10                	mov    DWORD PTR [eax],edx
c000e3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3aa:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e3ad:	0f b6 c0             	movzx  eax,al
c000e3b0:	85 c0                	test   eax,eax
c000e3b2:	74 10                	je     c000e3c4 <VCache::~VCache()+0x2c>
c000e3b4:	83 ec 0c             	sub    esp,0xc
c000e3b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3bb:	e8 8c ff ff ff       	call   c000e34c <VCache::writeWriteBuffer()>
c000e3c0:	83 c4 10             	add    esp,0x10
c000e3c3:	90                   	nop
c000e3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e3cb:	83 ec 0c             	sub    esp,0xc
c000e3ce:	50                   	push   eax
c000e3cf:	e8 f2 96 ff ff       	call   c0007ac6 <free>
c000e3d4:	83 c4 10             	add    esp,0x10
c000e3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e3de:	83 ec 0c             	sub    esp,0xc
c000e3e1:	50                   	push   eax
c000e3e2:	e8 df 96 ff ff       	call   c0007ac6 <free>
c000e3e7:	83 c4 10             	add    esp,0x10
c000e3ea:	90                   	nop
c000e3eb:	83 c4 0c             	add    esp,0xc
c000e3ee:	c3                   	ret    
c000e3ef:	90                   	nop

c000e3f0 <VCache::~VCache()>:
c000e3f0:	83 ec 0c             	sub    esp,0xc
c000e3f3:	83 ec 0c             	sub    esp,0xc
c000e3f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3fa:	e8 99 ff ff ff       	call   c000e398 <VCache::~VCache()>
c000e3ff:	83 c4 10             	add    esp,0x10
c000e402:	83 ec 08             	sub    esp,0x8
c000e405:	6a 44                	push   0x44
c000e407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e40b:	e8 08 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e410:	83 c4 10             	add    esp,0x10
c000e413:	83 c4 0c             	add    esp,0xc
c000e416:	c3                   	ret    
c000e417:	90                   	nop

c000e418 <VCache::write(unsigned long long, int, void*)>:
c000e418:	55                   	push   ebp
c000e419:	57                   	push   edi
c000e41a:	56                   	push   esi
c000e41b:	53                   	push   ebx
c000e41c:	83 ec 1c             	sub    esp,0x1c
c000e41f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e423:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e427:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e42b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e42f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e433:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e437:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e43b:	74 07                	je     c000e444 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e43d:	53                   	push   ebx
c000e43e:	e8 f9 fe ff ff       	call   c000e33c <VCache::invalidateReadBuffer()>
c000e443:	58                   	pop    eax
c000e444:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e448:	74 62                	je     c000e4ac <VCache::write(unsigned long long, int, void*)+0x94>
c000e44a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e44d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e451:	99                   	cdq    
c000e452:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e456:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e459:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e45c:	31 c1                	xor    ecx,eax
c000e45e:	89 d0                	mov    eax,edx
c000e460:	89 ca                	mov    edx,ecx
c000e462:	31 e8                	xor    eax,ebp
c000e464:	09 c2                	or     edx,eax
c000e466:	75 38                	jne    c000e4a0 <VCache::write(unsigned long long, int, void*)+0x88>
c000e468:	83 ff 01             	cmp    edi,0x1
c000e46b:	75 33                	jne    c000e4a0 <VCache::write(unsigned long long, int, void*)+0x88>
c000e46d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e470:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e474:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e47a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e47d:	0f af c8             	imul   ecx,eax
c000e480:	01 cf                	add    edi,ecx
c000e482:	89 c1                	mov    ecx,eax
c000e484:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e486:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e489:	40                   	inc    eax
c000e48a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e48d:	83 f8 50             	cmp    eax,0x50
c000e490:	75 6a                	jne    c000e4fc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e492:	83 ec 0c             	sub    esp,0xc
c000e495:	53                   	push   ebx
c000e496:	e8 b1 fe ff ff       	call   c000e34c <VCache::writeWriteBuffer()>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	eb 5c                	jmp    c000e4fc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e4a0:	83 ec 0c             	sub    esp,0xc
c000e4a3:	53                   	push   ebx
c000e4a4:	e8 a3 fe ff ff       	call   c000e34c <VCache::writeWriteBuffer()>
c000e4a9:	83 c4 10             	add    esp,0x10
c000e4ac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4af:	83 ff 4f             	cmp    edi,0x4f
c000e4b2:	7f 20                	jg     c000e4d4 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e4b4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e4b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e4bb:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e4be:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e4c1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e4c5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e4c8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e4ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4d0:	eb 2a                	jmp    c000e4fc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e4d2:	66 90                	xchg   ax,ax
c000e4d4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4d6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e4da:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e4de:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4e2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e4e6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e4ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e4ee:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e4f1:	83 c4 1c             	add    esp,0x1c
c000e4f4:	5b                   	pop    ebx
c000e4f5:	5e                   	pop    esi
c000e4f6:	5f                   	pop    edi
c000e4f7:	5d                   	pop    ebp
c000e4f8:	ff e0                	jmp    eax
c000e4fa:	66 90                	xchg   ax,ax
c000e4fc:	83 c4 1c             	add    esp,0x1c
c000e4ff:	31 c0                	xor    eax,eax
c000e501:	5b                   	pop    ebx
c000e502:	5e                   	pop    esi
c000e503:	5f                   	pop    edi
c000e504:	5d                   	pop    ebp
c000e505:	c3                   	ret    

c000e506 <VCache::read(unsigned long long, int, void*)>:
c000e506:	55                   	push   ebp
c000e507:	57                   	push   edi
c000e508:	56                   	push   esi
c000e509:	53                   	push   ebx
c000e50a:	83 ec 1c             	sub    esp,0x1c
c000e50d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e511:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e515:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e519:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e51d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e521:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e525:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e529:	74 0d                	je     c000e538 <VCache::read(unsigned long long, int, void*)+0x32>
c000e52b:	83 ec 0c             	sub    esp,0xc
c000e52e:	57                   	push   edi
c000e52f:	e8 18 fe ff ff       	call   c000e34c <VCache::writeWriteBuffer()>
c000e534:	83 c4 10             	add    esp,0x10
c000e537:	90                   	nop
c000e538:	83 fd 01             	cmp    ebp,0x1
c000e53b:	0f 85 93 00 00 00    	jne    c000e5d4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e541:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e544:	89 04 24             	mov    DWORD PTR [esp],eax
c000e547:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e54e:	0f 85 80 00 00 00    	jne    c000e5d4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e554:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e557:	89 e9                	mov    ecx,ebp
c000e559:	f7 d9                	neg    ecx
c000e55b:	89 c8                	mov    eax,ecx
c000e55d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e561:	c1 f8 1f             	sar    eax,0x1f
c000e564:	21 d9                	and    ecx,ebx
c000e566:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e56a:	89 c8                	mov    eax,ecx
c000e56c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e570:	21 f1                	and    ecx,esi
c000e572:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e576:	89 ca                	mov    edx,ecx
c000e578:	74 2e                	je     c000e5a8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e57a:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e57d:	75 29                	jne    c000e5a8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e57f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e582:	75 24                	jne    c000e5a8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e584:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e587:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e58d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e590:	8d 70 ff             	lea    esi,[eax-0x1]
c000e593:	21 f3                	and    ebx,esi
c000e595:	0f af d9             	imul   ebx,ecx
c000e598:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e59b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e59f:	89 de                	mov    esi,ebx
c000e5a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5a3:	31 c0                	xor    eax,eax
c000e5a5:	eb 61                	jmp    c000e608 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5a7:	90                   	nop
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e5af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e5b3:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e5b6:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e5b9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e5bb:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e5be:	55                   	push   ebp
c000e5bf:	52                   	push   edx
c000e5c0:	50                   	push   eax
c000e5c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e5c8:	83 c4 20             	add    esp,0x20
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	75 39                	jne    c000e608 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5cf:	eb b3                	jmp    c000e584 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5d4:	83 ec 0c             	sub    esp,0xc
c000e5d7:	57                   	push   edi
c000e5d8:	e8 5f fd ff ff       	call   c000e33c <VCache::invalidateReadBuffer()>
c000e5dd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e5e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5e4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5e6:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e5ea:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e5ee:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e5f2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e5f6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e5fa:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e5fd:	83 c4 2c             	add    esp,0x2c
c000e600:	5b                   	pop    ebx
c000e601:	5e                   	pop    esi
c000e602:	5f                   	pop    edi
c000e603:	5d                   	pop    ebp
c000e604:	ff e0                	jmp    eax
c000e606:	66 90                	xchg   ax,ax
c000e608:	83 c4 1c             	add    esp,0x1c
c000e60b:	5b                   	pop    ebx
c000e60c:	5e                   	pop    esi
c000e60d:	5f                   	pop    edi
c000e60e:	5d                   	pop    ebp
c000e60f:	c3                   	ret    

c000e610 <Video::putrect(int, int, int, int, unsigned int)>:
c000e610:	55                   	push   ebp
c000e611:	57                   	push   edi
c000e612:	56                   	push   esi
c000e613:	53                   	push   ebx
c000e614:	83 ec 1c             	sub    esp,0x1c
c000e617:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e61b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e61f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e623:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e627:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e62b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e62f:	01 df                	add    edi,ebx
c000e631:	39 fb                	cmp    ebx,edi
c000e633:	7d 1f                	jge    c000e654 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e635:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e639:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e63d:	7d 12                	jge    c000e651 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e63f:	8b 16                	mov    edx,DWORD PTR [esi]
c000e641:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e645:	53                   	push   ebx
c000e646:	55                   	push   ebp
c000e647:	45                   	inc    ebp
c000e648:	56                   	push   esi
c000e649:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e64c:	83 c4 10             	add    esp,0x10
c000e64f:	eb e8                	jmp    c000e639 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e651:	43                   	inc    ebx
c000e652:	eb dd                	jmp    c000e631 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e654:	83 c4 1c             	add    esp,0x1c
c000e657:	5b                   	pop    ebx
c000e658:	5e                   	pop    esi
c000e659:	5f                   	pop    edi
c000e65a:	5d                   	pop    ebp
c000e65b:	c3                   	ret    

c000e65c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e65c:	55                   	push   ebp
c000e65d:	57                   	push   edi
c000e65e:	31 ff                	xor    edi,edi
c000e660:	56                   	push   esi
c000e661:	53                   	push   ebx
c000e662:	83 ec 1c             	sub    esp,0x1c
c000e665:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e669:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e66d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e674:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e679:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e67d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e681:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e685:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e688:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e68c:	01 f9                	add    ecx,edi
c000e68e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e692:	7d 2f                	jge    c000e6c3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e694:	31 f6                	xor    esi,esi
c000e696:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e69a:	01 f2                	add    edx,esi
c000e69c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e6a0:	7d 1a                	jge    c000e6bc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e6a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e6a5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e6a8:	46                   	inc    esi
c000e6a9:	51                   	push   ecx
c000e6aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e6ae:	52                   	push   edx
c000e6af:	55                   	push   ebp
c000e6b0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e6b3:	83 c4 10             	add    esp,0x10
c000e6b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6ba:	eb da                	jmp    c000e696 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e6bc:	47                   	inc    edi
c000e6bd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e6c1:	eb c5                	jmp    c000e688 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e6c3:	83 c4 1c             	add    esp,0x1c
c000e6c6:	5b                   	pop    ebx
c000e6c7:	5e                   	pop    esi
c000e6c8:	5f                   	pop    edi
c000e6c9:	5d                   	pop    ebp
c000e6ca:	c3                   	ret    
c000e6cb:	90                   	nop

c000e6cc <Video::blit(unsigned int*, int, int, int, int)>:
c000e6cc:	55                   	push   ebp
c000e6cd:	57                   	push   edi
c000e6ce:	56                   	push   esi
c000e6cf:	53                   	push   ebx
c000e6d0:	83 ec 1c             	sub    esp,0x1c
c000e6d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e6db:	85 c0                	test   eax,eax
c000e6dd:	79 02                	jns    c000e6e1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e6df:	31 c0                	xor    eax,eax
c000e6e1:	c1 e0 02             	shl    eax,0x2
c000e6e4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e6e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6f0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e6f4:	39 d8                	cmp    eax,ebx
c000e6f6:	7e 49                	jle    c000e741 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e6f8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e6fe:	7c 41                	jl     c000e741 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e700:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e704:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e708:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e70c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e710:	39 f9                	cmp    ecx,edi
c000e712:	7e 22                	jle    c000e736 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e714:	83 c5 04             	add    ebp,0x4
c000e717:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e71d:	7c 14                	jl     c000e733 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e71f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e721:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e724:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e728:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e72c:	56                   	push   esi
c000e72d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e730:	83 c4 10             	add    esp,0x10
c000e733:	47                   	inc    edi
c000e734:	eb d2                	jmp    c000e708 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e736:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e73a:	43                   	inc    ebx
c000e73b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e73f:	eb ab                	jmp    c000e6ec <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e741:	83 c4 1c             	add    esp,0x1c
c000e744:	5b                   	pop    ebx
c000e745:	5e                   	pop    esi
c000e746:	5f                   	pop    edi
c000e747:	5d                   	pop    ebp
c000e748:	c3                   	ret    
c000e749:	90                   	nop

c000e74a <Video::clearScreen(unsigned int)>:
c000e74a:	57                   	push   edi
c000e74b:	56                   	push   esi
c000e74c:	53                   	push   ebx
c000e74d:	31 db                	xor    ebx,ebx
c000e74f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e753:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e759:	7e 1f                	jle    c000e77a <Video::clearScreen(unsigned int)+0x30>
c000e75b:	31 ff                	xor    edi,edi
c000e75d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e763:	7e 12                	jle    c000e777 <Video::clearScreen(unsigned int)+0x2d>
c000e765:	8b 06                	mov    eax,DWORD PTR [esi]
c000e767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e76b:	53                   	push   ebx
c000e76c:	57                   	push   edi
c000e76d:	47                   	inc    edi
c000e76e:	56                   	push   esi
c000e76f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e772:	83 c4 10             	add    esp,0x10
c000e775:	eb e6                	jmp    c000e75d <Video::clearScreen(unsigned int)+0x13>
c000e777:	43                   	inc    ebx
c000e778:	eb d9                	jmp    c000e753 <Video::clearScreen(unsigned int)+0x9>
c000e77a:	5b                   	pop    ebx
c000e77b:	5e                   	pop    esi
c000e77c:	5f                   	pop    edi
c000e77d:	c3                   	ret    

c000e77e <Video::putpixel(int, int, unsigned int)>:
c000e77e:	c7 44 24 04 68 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021768
c000e786:	e9 82 2a 00 00       	jmp    c001120d <KePanic(char const*)>
c000e78b:	90                   	nop

c000e78c <Video::readPixelApprox(int, int)>:
c000e78c:	83 ec 18             	sub    esp,0x18
c000e78f:	68 89 17 02 c0       	push   0xc0021789
c000e794:	e8 74 2a 00 00       	call   c001120d <KePanic(char const*)>
c000e799:	31 c0                	xor    eax,eax
c000e79b:	83 c4 1c             	add    esp,0x1c
c000e79e:	c3                   	ret    
c000e79f:	90                   	nop

c000e7a0 <Video::Video(char const*)>:
c000e7a0:	83 ec 0c             	sub    esp,0xc
c000e7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a7:	83 ec 08             	sub    esp,0x8
c000e7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ae:	50                   	push   eax
c000e7af:	e8 e6 df ff ff       	call   c000c79a <Device::Device(char const*)>
c000e7b4:	83 c4 10             	add    esp,0x10
c000e7b7:	ba 04 18 02 c0       	mov    edx,0xc0021804
c000e7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c0:	89 10                	mov    DWORD PTR [eax],edx
c000e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e7d0:	90                   	nop
c000e7d1:	83 c4 0c             	add    esp,0xc
c000e7d4:	c3                   	ret    
c000e7d5:	90                   	nop

c000e7d6 <Video::~Video()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	ba 04 18 02 c0       	mov    edx,0xc0021804
c000e7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e2:	89 10                	mov    DWORD PTR [eax],edx
c000e7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e8:	83 ec 0c             	sub    esp,0xc
c000e7eb:	50                   	push   eax
c000e7ec:	e8 13 dd ff ff       	call   c000c504 <Device::~Device()>
c000e7f1:	83 c4 10             	add    esp,0x10
c000e7f4:	90                   	nop
c000e7f5:	83 c4 0c             	add    esp,0xc
c000e7f8:	c3                   	ret    
c000e7f9:	90                   	nop

c000e7fa <Video::~Video()>:
c000e7fa:	83 ec 0c             	sub    esp,0xc
c000e7fd:	83 ec 0c             	sub    esp,0xc
c000e800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e804:	e8 cd ff ff ff       	call   c000e7d6 <Video::~Video()>
c000e809:	83 c4 10             	add    esp,0x10
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	68 64 01 00 00       	push   0x164
c000e814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e818:	e8 fb bf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e81d:	83 c4 10             	add    esp,0x10
c000e820:	83 c4 0c             	add    esp,0xc
c000e823:	c3                   	ret    

c000e824 <Video::isMonochrome()>:
c000e824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e828:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e82e:	c3                   	ret    
c000e82f:	90                   	nop

c000e830 <Video::getWidth()>:
c000e830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e834:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e83a:	c3                   	ret    
c000e83b:	90                   	nop

c000e83c <Video::getHeight()>:
c000e83c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e840:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e846:	c3                   	ret    
c000e847:	90                   	nop

c000e848 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e848:	55                   	push   ebp
c000e849:	57                   	push   edi
c000e84a:	56                   	push   esi
c000e84b:	53                   	push   ebx
c000e84c:	83 ec 2c             	sub    esp,0x2c
c000e84f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e853:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e857:	83 f8 01             	cmp    eax,0x1
c000e85a:	19 c9                	sbb    ecx,ecx
c000e85c:	31 db                	xor    ebx,ebx
c000e85e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e862:	89 cd                	mov    ebp,ecx
c000e864:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e86c:	f7 d5                	not    ebp
c000e86e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e874:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e878:	01 d8                	add    eax,ebx
c000e87a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e87e:	56                   	push   esi
c000e87f:	e8 b8 ff ff ff       	call   c000e83c <Video::getHeight()>
c000e884:	59                   	pop    ecx
c000e885:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e889:	7e 70                	jle    c000e8fb <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e88b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e88f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e893:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e896:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e89a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e89e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e8a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8a9:	89 f8                	mov    eax,edi
c000e8ab:	83 c0 20             	add    eax,0x20
c000e8ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e8b2:	56                   	push   esi
c000e8b3:	e8 78 ff ff ff       	call   c000e830 <Video::getWidth()>
c000e8b8:	5a                   	pop    edx
c000e8b9:	39 c7                	cmp    edi,eax
c000e8bb:	7d 34                	jge    c000e8f1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e8bd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e8c2:	74 05                	je     c000e8c9 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e8c4:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8c6:	55                   	push   ebp
c000e8c7:	eb 0d                	jmp    c000e8d6 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e8c9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e8ce:	74 12                	je     c000e8e2 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e8d0:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e8da:	57                   	push   edi
c000e8db:	56                   	push   esi
c000e8dc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8df:	83 c4 10             	add    esp,0x10
c000e8e2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e8e6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e8ea:	47                   	inc    edi
c000e8eb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e8ef:	75 c1                	jne    c000e8b2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e8f1:	43                   	inc    ebx
c000e8f2:	83 fb 20             	cmp    ebx,0x20
c000e8f5:	0f 85 79 ff ff ff    	jne    c000e874 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e8fb:	83 c4 2c             	add    esp,0x2c
c000e8fe:	5b                   	pop    ebx
c000e8ff:	5e                   	pop    esi
c000e900:	5f                   	pop    edi
c000e901:	5d                   	pop    ebp
c000e902:	c3                   	ret    
c000e903:	90                   	nop

c000e904 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e904:	55                   	push   ebp
c000e905:	57                   	push   edi
c000e906:	56                   	push   esi
c000e907:	53                   	push   ebx
c000e908:	83 ec 28             	sub    esp,0x28
c000e90b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e90f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e913:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e917:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e91b:	c1 e6 08             	shl    esi,0x8
c000e91e:	01 c6                	add    esi,eax
c000e920:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e924:	c1 e0 08             	shl    eax,0x8
c000e927:	01 d0                	add    eax,edx
c000e929:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e92d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e931:	0f af c6             	imul   eax,esi
c000e934:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e93b:	50                   	push   eax
c000e93c:	e8 75 91 ff ff       	call   c0007ab6 <malloc>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	89 c7                	mov    edi,eax
c000e946:	85 c0                	test   eax,eax
c000e948:	75 10                	jne    c000e95a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e94a:	83 ec 0c             	sub    esp,0xc
c000e94d:	68 b4 17 02 c0       	push   0xc00217b4
c000e952:	e8 b6 28 00 00       	call   c001120d <KePanic(char const*)>
c000e957:	83 c4 10             	add    esp,0x10
c000e95a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e95e:	ba 12 00 00 00       	mov    edx,0x12
c000e963:	85 c0                	test   eax,eax
c000e965:	74 11                	je     c000e978 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e967:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e96b:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e96f:	c1 fa 03             	sar    edx,0x3
c000e972:	0f af d1             	imul   edx,ecx
c000e975:	83 c2 12             	add    edx,0x12
c000e978:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e97c:	74 04                	je     c000e982 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e97e:	85 f6                	test   esi,esi
c000e980:	75 12                	jne    c000e994 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e982:	83 ec 0c             	sub    esp,0xc
c000e985:	68 c4 17 02 c0       	push   0xc00217c4
c000e98a:	e8 b6 bf ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000e98f:	e9 b8 00 00 00       	jmp    c000ea4c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e994:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e998:	83 f9 02             	cmp    ecx,0x2
c000e99b:	0f 85 96 00 00 00    	jne    c000ea37 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e9a1:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e9a6:	75 0e                	jne    c000e9b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9a8:	85 c0                	test   eax,eax
c000e9aa:	75 0a                	jne    c000e9b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9ac:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e9af:	83 e8 18             	sub    eax,0x18
c000e9b2:	a8 f7                	test   al,0xf7
c000e9b4:	74 0a                	je     c000e9c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e9b6:	83 ec 0c             	sub    esp,0xc
c000e9b9:	68 d9 17 02 c0       	push   0xc00217d9
c000e9be:	eb 7f                	jmp    c000ea3f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e9c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e9c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e9d0:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e9d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e9dc:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e9e0:	75 0c                	jne    c000e9ee <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e9e2:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e9e7:	c1 e0 18             	shl    eax,0x18
c000e9ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9ee:	45                   	inc    ebp
c000e9ef:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e9f4:	c1 e1 10             	shl    ecx,0x10
c000e9f7:	89 c8                	mov    eax,ecx
c000e9f9:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e9fe:	c1 e1 08             	shl    ecx,0x8
c000ea01:	09 c1                	or     ecx,eax
c000ea03:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ea07:	09 c1                	or     ecx,eax
c000ea09:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ea0d:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ea11:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ea15:	c1 f8 03             	sar    eax,0x3
c000ea18:	01 c2                	add    edx,eax
c000ea1a:	89 e8                	mov    eax,ebp
c000ea1c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ea20:	39 c6                	cmp    esi,eax
c000ea22:	7f b0                	jg     c000e9d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ea24:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ea28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ea2f:	7e 22                	jle    c000ea53 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ea31:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ea35:	eb 99                	jmp    c000e9d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ea37:	50                   	push   eax
c000ea38:	50                   	push   eax
c000ea39:	51                   	push   ecx
c000ea3a:	68 e7 17 02 c0       	push   0xc00217e7
c000ea3f:	e8 01 bf ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ea44:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ea47:	e8 7a 90 ff ff       	call   c0007ac6 <free>
c000ea4c:	83 c4 10             	add    esp,0x10
c000ea4f:	31 ff                	xor    edi,edi
c000ea51:	eb 0f                	jmp    c000ea62 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ea53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea57:	89 30                	mov    DWORD PTR [eax],esi
c000ea59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea5d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ea60:	89 30                	mov    DWORD PTR [eax],esi
c000ea62:	83 c4 1c             	add    esp,0x1c
c000ea65:	89 f8                	mov    eax,edi
c000ea67:	5b                   	pop    ebx
c000ea68:	5e                   	pop    esi
c000ea69:	5f                   	pop    edi
c000ea6a:	5d                   	pop    ebp
c000ea6b:	c3                   	ret    

c000ea6c <Video::putTGA(int, int, unsigned char*, int)>:
c000ea6c:	55                   	push   ebp
c000ea6d:	57                   	push   edi
c000ea6e:	56                   	push   esi
c000ea6f:	53                   	push   ebx
c000ea70:	83 ec 28             	sub    esp,0x28
c000ea73:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ea77:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea7b:	50                   	push   eax
c000ea7c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea80:	50                   	push   eax
c000ea81:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ea85:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ea89:	56                   	push   esi
c000ea8a:	e8 75 fe ff ff       	call   c000e904 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ea8f:	83 c4 20             	add    esp,0x20
c000ea92:	85 c0                	test   eax,eax
c000ea94:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea98:	74 35                	je     c000eacf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ea9a:	89 c7                	mov    edi,eax
c000ea9c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eaa0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eaa4:	39 d8                	cmp    eax,ebx
c000eaa6:	7e 27                	jle    c000eacf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eaa8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eaac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eab0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000eab4:	39 e8                	cmp    eax,ebp
c000eab6:	7e 14                	jle    c000eacc <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eab8:	8b 06                	mov    eax,DWORD PTR [esi]
c000eaba:	83 c7 04             	add    edi,0x4
c000eabd:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eac0:	53                   	push   ebx
c000eac1:	55                   	push   ebp
c000eac2:	45                   	inc    ebp
c000eac3:	56                   	push   esi
c000eac4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eac7:	83 c4 10             	add    esp,0x10
c000eaca:	eb e0                	jmp    c000eaac <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eacc:	43                   	inc    ebx
c000eacd:	eb cd                	jmp    c000ea9c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eacf:	83 c4 1c             	add    esp,0x1c
c000ead2:	5b                   	pop    ebx
c000ead3:	5e                   	pop    esi
c000ead4:	5f                   	pop    edi
c000ead5:	5d                   	pop    ebp
c000ead6:	c3                   	ret    
c000ead7:	90                   	nop

c000ead8 <ACPI::close(int, int, void*)>:
c000ead8:	83 ec 1c             	sub    esp,0x1c
c000eadb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eae3:	74 0b                	je     c000eaf0 <ACPI::close(int, int, void*)+0x18>
c000eae5:	b8 00 00 00 00       	mov    eax,0x0
c000eaea:	e9 99 00 00 00       	jmp    c000eb88 <ACPI::close(int, int, void*)+0xb0>
c000eaef:	90                   	nop
c000eaf0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eaf5:	75 29                	jne    c000eb20 <ACPI::close(int, int, void*)+0x48>
c000eaf7:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000eafc:	85 c0                	test   eax,eax
c000eafe:	74 08                	je     c000eb08 <ACPI::close(int, int, void*)+0x30>
c000eb00:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000eb05:	ff d0                	call   eax
c000eb07:	90                   	nop
c000eb08:	83 ec 0c             	sub    esp,0xc
c000eb0b:	68 48 18 02 c0       	push   0xc0021848
c000eb10:	e8 f8 26 00 00       	call   c001120d <KePanic(char const*)>
c000eb15:	83 c4 10             	add    esp,0x10
c000eb18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb1d:	eb 69                	jmp    c000eb88 <ACPI::close(int, int, void*)+0xb0>
c000eb1f:	90                   	nop
c000eb20:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eb25:	75 59                	jne    c000eb80 <ACPI::close(int, int, void*)+0xa8>
c000eb27:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000eb2c:	85 c0                	test   eax,eax
c000eb2e:	74 08                	je     c000eb38 <ACPI::close(int, int, void*)+0x60>
c000eb30:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000eb35:	ff d0                	call   eax
c000eb37:	90                   	nop
c000eb38:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eb3d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb45:	83 e0 02             	and    eax,0x2
c000eb48:	74 1e                	je     c000eb68 <ACPI::close(int, int, void*)+0x90>
c000eb4a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eb51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb55:	89 c2                	mov    edx,eax
c000eb57:	ec                   	in     al,dx
c000eb58:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb5c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eb60:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb64:	eb da                	jmp    c000eb40 <ACPI::close(int, int, void*)+0x68>
c000eb66:	66 90                	xchg   ax,ax
c000eb68:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eb6f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eb74:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eb78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb7c:	ee                   	out    dx,al
c000eb7d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb80:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb85:	8d 76 00             	lea    esi,[esi+0x0]
c000eb88:	83 c4 1c             	add    esp,0x1c
c000eb8b:	c3                   	ret    

c000eb8c <findRSDP()>:
c000eb8c:	83 ec 1c             	sub    esp,0x1c
c000eb8f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb94:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eb9a:	83 e0 04             	and    eax,0x4
c000eb9d:	0f b6 c0             	movzx  eax,al
c000eba0:	85 c0                	test   eax,eax
c000eba2:	75 08                	jne    c000ebac <findRSDP()+0x20>
c000eba4:	b8 00 00 00 00       	mov    eax,0x0
c000eba9:	eb 75                	jmp    c000ec20 <findRSDP()+0x94>
c000ebab:	90                   	nop
c000ebac:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ebb1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ebb6:	7f 1c                	jg     c000ebd4 <findRSDP()+0x48>
c000ebb8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebbd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebc3:	83 e2 fb             	and    edx,0xfffffffb
c000ebc6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ebcc:	b8 00 00 00 00       	mov    eax,0x0
c000ebd1:	eb 4d                	jmp    c000ec20 <findRSDP()+0x94>
c000ebd3:	90                   	nop
c000ebd4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ebdc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ebe4:	77 32                	ja     c000ec18 <findRSDP()+0x8c>
c000ebe6:	83 ec 04             	sub    esp,0x4
c000ebe9:	6a 08                	push   0x8
c000ebeb:	68 e3 18 02 c0       	push   0xc00218e3
c000ebf0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ebf4:	e8 87 17 ff ff       	call   c0000380 <memcmp>
c000ebf9:	83 c4 10             	add    esp,0x10
c000ebfc:	85 c0                	test   eax,eax
c000ebfe:	0f 94 c0             	sete   al
c000ec01:	0f b6 c0             	movzx  eax,al
c000ec04:	85 c0                	test   eax,eax
c000ec06:	74 08                	je     c000ec10 <findRSDP()+0x84>
c000ec08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec0c:	eb 12                	jmp    c000ec20 <findRSDP()+0x94>
c000ec0e:	66 90                	xchg   ax,ax
c000ec10:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ec15:	eb c5                	jmp    c000ebdc <findRSDP()+0x50>
c000ec17:	90                   	nop
c000ec18:	b8 00 00 00 00       	mov    eax,0x0
c000ec1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec20:	83 c4 1c             	add    esp,0x1c
c000ec23:	c3                   	ret    

c000ec24 <loadACPITables(unsigned char*)>:
c000ec24:	57                   	push   edi
c000ec25:	56                   	push   esi
c000ec26:	53                   	push   ebx
c000ec27:	83 ec 60             	sub    esp,0x60
c000ec2a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec2f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec35:	83 e0 04             	and    eax,0x4
c000ec38:	0f b6 c0             	movzx  eax,al
c000ec3b:	85 c0                	test   eax,eax
c000ec3d:	0f 84 41 02 00 00    	je     c000ee84 <loadACPITables(unsigned char*)+0x260>
c000ec43:	a0 80 97 02 c0       	mov    al,ds:0xc0029780
c000ec48:	0f b6 c0             	movzx  eax,al
c000ec4b:	85 c0                	test   eax,eax
c000ec4d:	74 79                	je     c000ecc8 <loadACPITables(unsigned char*)+0xa4>
c000ec4f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec53:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ec57:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec5e:	83 e8 24             	sub    eax,0x24
c000ec61:	c1 e8 03             	shr    eax,0x3
c000ec64:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ec68:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ec70:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ec74:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ec78:	0f 8d ba 00 00 00    	jge    c000ed38 <loadACPITables(unsigned char*)+0x114>
c000ec7e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec82:	83 c0 24             	add    eax,0x24
c000ec85:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ec89:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec8d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ec91:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ec95:	c1 e0 03             	shl    eax,0x3
c000ec98:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ec9c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eca0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000eca3:	8b 00                	mov    eax,DWORD PTR [eax]
c000eca5:	89 c1                	mov    ecx,eax
c000eca7:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ecac:	8d 50 01             	lea    edx,[eax+0x1]
c000ecaf:	89 15 6c 95 02 c0    	mov    DWORD PTR ds:0xc002956c,edx
c000ecb5:	89 ca                	mov    edx,ecx
c000ecb7:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ecbe:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ecc3:	eb ab                	jmp    c000ec70 <loadACPITables(unsigned char*)+0x4c>
c000ecc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecc8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000eccc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ecd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ecd7:	83 e8 24             	sub    eax,0x24
c000ecda:	c1 e8 02             	shr    eax,0x2
c000ecdd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ece1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ece9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecec:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ecf0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ecf4:	7d 42                	jge    c000ed38 <loadACPITables(unsigned char*)+0x114>
c000ecf6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecfa:	83 c0 24             	add    eax,0x24
c000ecfd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ed01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed05:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ed09:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed0d:	c1 e0 02             	shl    eax,0x2
c000ed10:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ed14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed18:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ed1a:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ed1f:	8d 50 01             	lea    edx,[eax+0x1]
c000ed22:	89 15 6c 95 02 c0    	mov    DWORD PTR ds:0xc002956c,edx
c000ed28:	89 ca                	mov    edx,ecx
c000ed2a:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ed31:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ed36:	eb b4                	jmp    c000ecec <loadACPITables(unsigned char*)+0xc8>
c000ed38:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ed40:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ed45:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ed49:	0f 8d 39 01 00 00    	jge    c000ee88 <loadACPITables(unsigned char*)+0x264>
c000ed4f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed53:	8b 04 c5 84 95 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6a7c]
c000ed5a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ed5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed62:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed6a:	25 ff 0f 00 00       	and    eax,0xfff
c000ed6f:	89 c6                	mov    esi,eax
c000ed71:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ed77:	83 ec 0c             	sub    esp,0xc
c000ed7a:	6a 01                	push   0x1
c000ed7c:	e8 8c a8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ed81:	83 c4 10             	add    esp,0x10
c000ed84:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ed88:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ed8e:	83 ec 0c             	sub    esp,0xc
c000ed91:	6a 01                	push   0x1
c000ed93:	6a 01                	push   0x1
c000ed95:	50                   	push   eax
c000ed96:	52                   	push   edx
c000ed97:	53                   	push   ebx
c000ed98:	e8 7d b1 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed9d:	83 c4 20             	add    esp,0x20
c000eda0:	09 f0                	or     eax,esi
c000eda2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eda6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000edaa:	c1 e0 03             	shl    eax,0x3
c000edad:	05 80 95 02 c0       	add    eax,0xc0029580
c000edb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000edbe:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000edc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000edca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000edce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edd2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edd6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edda:	89 c6                	mov    esi,eax
c000eddc:	89 d7                	mov    edi,edx
c000edde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ede0:	89 c8                	mov    eax,ecx
c000ede2:	89 fa                	mov    edx,edi
c000ede4:	89 f3                	mov    ebx,esi
c000ede6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000edea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000edee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000edf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edf9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000edfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee01:	05 00 10 00 00       	add    eax,0x1000
c000ee06:	c1 e8 0c             	shr    eax,0xc
c000ee09:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ee0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ee15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee19:	25 ff 0f 00 00       	and    eax,0xfff
c000ee1e:	89 c6                	mov    esi,eax
c000ee20:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee26:	83 ec 0c             	sub    esp,0xc
c000ee29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee2d:	e8 db a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ee32:	83 c4 10             	add    esp,0x10
c000ee35:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee39:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee3f:	83 ec 0c             	sub    esp,0xc
c000ee42:	6a 01                	push   0x1
c000ee44:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ee48:	50                   	push   eax
c000ee49:	52                   	push   edx
c000ee4a:	53                   	push   ebx
c000ee4b:	e8 ca b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee50:	83 c4 20             	add    esp,0x20
c000ee53:	09 f0                	or     eax,esi
c000ee55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee5d:	83 ec 0c             	sub    esp,0xc
c000ee60:	50                   	push   eax
c000ee61:	e8 c5 aa ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000ee66:	83 c4 10             	add    esp,0x10
c000ee69:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee71:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ee78:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ee7d:	e9 be fe ff ff       	jmp    c000ed40 <loadACPITables(unsigned char*)+0x11c>
c000ee82:	66 90                	xchg   ax,ax
c000ee84:	90                   	nop
c000ee85:	8d 76 00             	lea    esi,[esi+0x0]
c000ee88:	83 c4 60             	add    esp,0x60
c000ee8b:	5b                   	pop    ebx
c000ee8c:	5e                   	pop    esi
c000ee8d:	5f                   	pop    edi
c000ee8e:	c3                   	ret    
c000ee8f:	90                   	nop

c000ee90 <findRSDT(unsigned char*)>:
c000ee90:	57                   	push   edi
c000ee91:	56                   	push   esi
c000ee92:	53                   	push   ebx
c000ee93:	83 ec 50             	sub    esp,0x50
c000ee96:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ee9b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eea1:	83 e0 04             	and    eax,0x4
c000eea4:	0f b6 c0             	movzx  eax,al
c000eea7:	85 c0                	test   eax,eax
c000eea9:	75 0d                	jne    c000eeb8 <findRSDT(unsigned char*)+0x28>
c000eeab:	b8 00 00 00 00       	mov    eax,0x0
c000eeb0:	e9 2b 01 00 00       	jmp    c000efe0 <findRSDT(unsigned char*)+0x150>
c000eeb5:	8d 76 00             	lea    esi,[esi+0x0]
c000eeb8:	89 e0                	mov    eax,esp
c000eeba:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eebe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eec2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000eec6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000eece:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eed2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eed6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eeda:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000eede:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eee2:	89 c6                	mov    esi,eax
c000eee4:	89 d7                	mov    edi,edx
c000eee6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eee8:	89 c8                	mov    eax,ecx
c000eeea:	89 fa                	mov    edx,edi
c000eeec:	89 f3                	mov    ebx,esi
c000eeee:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000eef2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000eef6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000eefa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eefe:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000ef02:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef12:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef1a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef1e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef22:	25 ff 0f 00 00       	and    eax,0xfff
c000ef27:	89 c6                	mov    esi,eax
c000ef29:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef2f:	83 ec 0c             	sub    esp,0xc
c000ef32:	6a 02                	push   0x2
c000ef34:	e8 d4 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef39:	83 c4 10             	add    esp,0x10
c000ef3c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ef40:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef46:	83 ec 0c             	sub    esp,0xc
c000ef49:	6a 01                	push   0x1
c000ef4b:	6a 02                	push   0x2
c000ef4d:	50                   	push   eax
c000ef4e:	52                   	push   edx
c000ef4f:	53                   	push   ebx
c000ef50:	e8 c5 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef55:	83 c4 20             	add    esp,0x20
c000ef58:	09 f0                	or     eax,esi
c000ef5a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef5e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef62:	25 ff 0f 00 00       	and    eax,0xfff
c000ef67:	89 c6                	mov    esi,eax
c000ef69:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef6f:	83 ec 0c             	sub    esp,0xc
c000ef72:	6a 02                	push   0x2
c000ef74:	e8 94 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef79:	83 c4 10             	add    esp,0x10
c000ef7c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ef80:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef86:	83 ec 0c             	sub    esp,0xc
c000ef89:	6a 01                	push   0x1
c000ef8b:	6a 02                	push   0x2
c000ef8d:	50                   	push   eax
c000ef8e:	52                   	push   edx
c000ef8f:	53                   	push   ebx
c000ef90:	e8 85 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef95:	83 c4 20             	add    esp,0x20
c000ef98:	09 f0                	or     eax,esi
c000ef9a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef9e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efa3:	85 c0                	test   eax,eax
c000efa5:	75 11                	jne    c000efb8 <findRSDT(unsigned char*)+0x128>
c000efa7:	c6 05 80 97 02 c0 00 	mov    BYTE PTR ds:0xc0029780,0x0
c000efae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efb2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efb6:	eb 24                	jmp    c000efdc <findRSDT(unsigned char*)+0x14c>
c000efb8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efbd:	83 f8 02             	cmp    eax,0x2
c000efc0:	75 12                	jne    c000efd4 <findRSDT(unsigned char*)+0x144>
c000efc2:	c6 05 80 97 02 c0 01 	mov    BYTE PTR ds:0xc0029780,0x1
c000efc9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000efcd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efd1:	eb 09                	jmp    c000efdc <findRSDT(unsigned char*)+0x14c>
c000efd3:	90                   	nop
c000efd4:	b8 00 00 00 00       	mov    eax,0x0
c000efd9:	eb 05                	jmp    c000efe0 <findRSDT(unsigned char*)+0x150>
c000efdb:	90                   	nop
c000efdc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000efe0:	83 c4 50             	add    esp,0x50
c000efe3:	5b                   	pop    ebx
c000efe4:	5e                   	pop    esi
c000efe5:	5f                   	pop    edi
c000efe6:	c3                   	ret    
c000efe7:	90                   	nop

c000efe8 <findDataTable(unsigned char*, char*)>:
c000efe8:	83 ec 1c             	sub    esp,0x1c
c000efeb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eff0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eff6:	83 e0 04             	and    eax,0x4
c000eff9:	0f b6 c0             	movzx  eax,al
c000effc:	85 c0                	test   eax,eax
c000effe:	75 08                	jne    c000f008 <findDataTable(unsigned char*, char*)+0x20>
c000f000:	b8 00 00 00 00       	mov    eax,0x0
c000f005:	eb 5d                	jmp    c000f064 <findDataTable(unsigned char*, char*)+0x7c>
c000f007:	90                   	nop
c000f008:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f010:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000f015:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f019:	7d 41                	jge    c000f05c <findDataTable(unsigned char*, char*)+0x74>
c000f01b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f01f:	c1 e0 03             	shl    eax,0x3
c000f022:	05 80 95 02 c0       	add    eax,0xc0029580
c000f027:	83 ec 04             	sub    esp,0x4
c000f02a:	6a 04                	push   0x4
c000f02c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f030:	50                   	push   eax
c000f031:	e8 4a 13 ff ff       	call   c0000380 <memcmp>
c000f036:	83 c4 10             	add    esp,0x10
c000f039:	85 c0                	test   eax,eax
c000f03b:	0f 94 c0             	sete   al
c000f03e:	0f b6 c0             	movzx  eax,al
c000f041:	85 c0                	test   eax,eax
c000f043:	74 0f                	je     c000f054 <findDataTable(unsigned char*, char*)+0x6c>
c000f045:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f049:	8b 04 c5 84 95 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6a7c]
c000f050:	eb 12                	jmp    c000f064 <findDataTable(unsigned char*, char*)+0x7c>
c000f052:	66 90                	xchg   ax,ax
c000f054:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f059:	eb b5                	jmp    c000f010 <findDataTable(unsigned char*, char*)+0x28>
c000f05b:	90                   	nop
c000f05c:	b8 00 00 00 00       	mov    eax,0x0
c000f061:	8d 76 00             	lea    esi,[esi+0x0]
c000f064:	83 c4 1c             	add    esp,0x1c
c000f067:	c3                   	ret    

c000f068 <scanMADT()>:
c000f068:	53                   	push   ebx
c000f069:	83 ec 38             	sub    esp,0x38
c000f06c:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f071:	25 00 04 00 00       	and    eax,0x400
c000f076:	74 14                	je     c000f08c <scanMADT()+0x24>
c000f078:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f07d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f083:	83 e2 fb             	and    edx,0xfffffffb
c000f086:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f08c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f091:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f097:	83 e0 04             	and    eax,0x4
c000f09a:	0f b6 c0             	movzx  eax,al
c000f09d:	85 c0                	test   eax,eax
c000f09f:	0f 84 6b 04 00 00    	je     c000f510 <scanMADT()+0x4a8>
c000f0a5:	e8 e2 fa ff ff       	call   c000eb8c <findRSDP()>
c000f0aa:	a3 8c 97 02 c0       	mov    ds:0xc002978c,eax
c000f0af:	a1 8c 97 02 c0       	mov    eax,ds:0xc002978c
c000f0b4:	85 c0                	test   eax,eax
c000f0b6:	75 1c                	jne    c000f0d4 <scanMADT()+0x6c>
c000f0b8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0bd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0c3:	83 e2 fb             	and    edx,0xfffffffb
c000f0c6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0cc:	e9 47 04 00 00       	jmp    c000f518 <scanMADT()+0x4b0>
c000f0d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d4:	a1 8c 97 02 c0       	mov    eax,ds:0xc002978c
c000f0d9:	83 ec 0c             	sub    esp,0xc
c000f0dc:	50                   	push   eax
c000f0dd:	e8 ae fd ff ff       	call   c000ee90 <findRSDT(unsigned char*)>
c000f0e2:	83 c4 10             	add    esp,0x10
c000f0e5:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000f0ea:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f0ef:	85 c0                	test   eax,eax
c000f0f1:	75 19                	jne    c000f10c <scanMADT()+0xa4>
c000f0f3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0f8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0fe:	83 e2 fb             	and    edx,0xfffffffb
c000f101:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f107:	e9 0c 04 00 00       	jmp    c000f518 <scanMADT()+0x4b0>
c000f10c:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f111:	83 ec 0c             	sub    esp,0xc
c000f114:	50                   	push   eax
c000f115:	e8 0a fb ff ff       	call   c000ec24 <loadACPITables(unsigned char*)>
c000f11a:	83 c4 10             	add    esp,0x10
c000f11d:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f122:	83 ec 08             	sub    esp,0x8
c000f125:	68 ec 18 02 c0       	push   0xc00218ec
c000f12a:	50                   	push   eax
c000f12b:	e8 b8 fe ff ff       	call   c000efe8 <findDataTable(unsigned char*, char*)>
c000f130:	83 c4 10             	add    esp,0x10
c000f133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f137:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f13c:	75 1a                	jne    c000f158 <scanMADT()+0xf0>
c000f13e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f143:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f149:	83 e2 fe             	and    edx,0xfffffffe
c000f14c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f152:	e9 c1 03 00 00       	jmp    c000f518 <scanMADT()+0x4b0>
c000f157:	90                   	nop
c000f158:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f160:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f164:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f167:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f16b:	0f 87 a7 03 00 00    	ja     c000f518 <scanMADT()+0x4b0>
c000f171:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f179:	0f 87 99 03 00 00    	ja     c000f518 <scanMADT()+0x4b0>
c000f17f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f183:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f18b:	8d 50 01             	lea    edx,[eax+0x1]
c000f18e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f192:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f196:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f19a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f19e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1a2:	8d 50 01             	lea    edx,[eax+0x1]
c000f1a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1ad:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1b1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f1b5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f1ba:	83 f8 02             	cmp    eax,0x2
c000f1bd:	0f 86 51 03 00 00    	jbe    c000f514 <scanMADT()+0x4ac>
c000f1c3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f1c8:	85 c0                	test   eax,eax
c000f1ca:	75 58                	jne    c000f224 <scanMADT()+0x1bc>
c000f1cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1d0:	8d 50 01             	lea    edx,[eax+0x1]
c000f1d3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1d7:	8a 15 80 99 02 c0    	mov    dl,BYTE PTR ds:0xc0029980
c000f1dd:	0f b6 d2             	movzx  edx,dl
c000f1e0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f1e4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f1e8:	88 82 c0 99 02 c0    	mov    BYTE PTR [edx-0x3ffd6640],al
c000f1ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1f2:	8d 50 01             	lea    edx,[eax+0x1]
c000f1f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1f9:	8a 15 80 99 02 c0    	mov    dl,BYTE PTR ds:0xc0029980
c000f1ff:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f202:	88 0d 80 99 02 c0    	mov    BYTE PTR ds:0xc0029980,cl
c000f208:	0f b6 d2             	movzx  edx,dl
c000f20b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f20f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f213:	88 82 a0 99 02 c0    	mov    BYTE PTR [edx-0x3ffd6660],al
c000f219:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f21e:	e9 d9 02 00 00       	jmp    c000f4fc <scanMADT()+0x494>
c000f223:	90                   	nop
c000f224:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f229:	83 f8 01             	cmp    eax,0x1
c000f22c:	0f 85 1a 01 00 00    	jne    c000f34c <scanMADT()+0x2e4>
c000f232:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f236:	8d 50 01             	lea    edx,[eax+0x1]
c000f239:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f23d:	8a 15 40 98 02 c0    	mov    dl,BYTE PTR ds:0xc0029840
c000f243:	0f b6 d2             	movzx  edx,dl
c000f246:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f24a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f24e:	88 82 60 98 02 c0    	mov    BYTE PTR [edx-0x3ffd67a0],al
c000f254:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f259:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f25d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f261:	01 d0                	add    eax,edx
c000f263:	83 c0 2c             	add    eax,0x2c
c000f266:	8a 00                	mov    al,BYTE PTR [eax]
c000f268:	0f b6 d0             	movzx  edx,al
c000f26b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f26f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f272:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f276:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f27a:	0f b6 c0             	movzx  eax,al
c000f27d:	c1 e0 08             	shl    eax,0x8
c000f280:	89 d1                	mov    ecx,edx
c000f282:	09 c1                	or     ecx,eax
c000f284:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f288:	8d 50 02             	lea    edx,[eax+0x2]
c000f28b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f28f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f293:	0f b6 c0             	movzx  eax,al
c000f296:	c1 e0 10             	shl    eax,0x10
c000f299:	09 c1                	or     ecx,eax
c000f29b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f29f:	8d 50 03             	lea    edx,[eax+0x3]
c000f2a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2aa:	0f b6 c0             	movzx  eax,al
c000f2ad:	c1 e0 18             	shl    eax,0x18
c000f2b0:	09 c1                	or     ecx,eax
c000f2b2:	89 ca                	mov    edx,ecx
c000f2b4:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f2b9:	0f b6 c0             	movzx  eax,al
c000f2bc:	89 14 85 80 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6780],edx
c000f2c3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f2c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2d0:	01 d0                	add    eax,edx
c000f2d2:	83 c0 2c             	add    eax,0x2c
c000f2d5:	8a 00                	mov    al,BYTE PTR [eax]
c000f2d7:	0f b6 d0             	movzx  edx,al
c000f2da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2de:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2e5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f2e9:	0f b6 c0             	movzx  eax,al
c000f2ec:	c1 e0 08             	shl    eax,0x8
c000f2ef:	89 d1                	mov    ecx,edx
c000f2f1:	09 c1                	or     ecx,eax
c000f2f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2f7:	8d 50 02             	lea    edx,[eax+0x2]
c000f2fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2fe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f302:	0f b6 c0             	movzx  eax,al
c000f305:	c1 e0 10             	shl    eax,0x10
c000f308:	09 c1                	or     ecx,eax
c000f30a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f30e:	8d 50 03             	lea    edx,[eax+0x3]
c000f311:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f315:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f319:	0f b6 c0             	movzx  eax,al
c000f31c:	c1 e0 18             	shl    eax,0x18
c000f31f:	09 c1                	or     ecx,eax
c000f321:	89 ca                	mov    edx,ecx
c000f323:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f328:	0f b6 c0             	movzx  eax,al
c000f32b:	89 14 85 00 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6700],edx
c000f332:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f337:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f33c:	83 c0 01             	add    eax,0x1
c000f33f:	a2 40 98 02 c0       	mov    ds:0xc0029840,al
c000f344:	e9 b3 01 00 00       	jmp    c000f4fc <scanMADT()+0x494>
c000f349:	8d 76 00             	lea    esi,[esi+0x0]
c000f34c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f351:	83 f8 02             	cmp    eax,0x2
c000f354:	0f 85 ea 00 00 00    	jne    c000f444 <scanMADT()+0x3dc>
c000f35a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f35e:	8d 50 01             	lea    edx,[eax+0x1]
c000f361:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f365:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f369:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f36d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f371:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f375:	8d 50 01             	lea    edx,[eax+0x1]
c000f378:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f37c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f380:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f384:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f388:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f38c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f390:	01 d0                	add    eax,edx
c000f392:	83 c0 2c             	add    eax,0x2c
c000f395:	8a 00                	mov    al,BYTE PTR [eax]
c000f397:	0f b6 d0             	movzx  edx,al
c000f39a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f39e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3a5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3a9:	0f b6 c0             	movzx  eax,al
c000f3ac:	c1 e0 08             	shl    eax,0x8
c000f3af:	89 d1                	mov    ecx,edx
c000f3b1:	09 c1                	or     ecx,eax
c000f3b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3b7:	8d 50 02             	lea    edx,[eax+0x2]
c000f3ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3c2:	0f b6 c0             	movzx  eax,al
c000f3c5:	c1 e0 10             	shl    eax,0x10
c000f3c8:	09 c1                	or     ecx,eax
c000f3ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ce:	8d 50 03             	lea    edx,[eax+0x3]
c000f3d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3d5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3d9:	0f b6 c0             	movzx  eax,al
c000f3dc:	c1 e0 18             	shl    eax,0x18
c000f3df:	09 c8                	or     eax,ecx
c000f3e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f3e5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3f2:	01 d0                	add    eax,edx
c000f3f4:	83 c0 2c             	add    eax,0x2c
c000f3f7:	8a 00                	mov    al,BYTE PTR [eax]
c000f3f9:	0f b6 c0             	movzx  eax,al
c000f3fc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f400:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f403:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f407:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f40b:	0f b6 d2             	movzx  edx,dl
c000f40e:	c1 e2 08             	shl    edx,0x8
c000f411:	09 d0                	or     eax,edx
c000f413:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f418:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f41d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f422:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f426:	88 90 c8 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd038],dl
c000f42c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f431:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f436:	66 89 84 12 20 98 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd67e0],ax
c000f43e:	e9 b9 00 00 00       	jmp    c000f4fc <scanMADT()+0x494>
c000f443:	90                   	nop
c000f444:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f449:	83 f8 04             	cmp    eax,0x4
c000f44c:	0f 85 9a 00 00 00    	jne    c000f4ec <scanMADT()+0x484>
c000f452:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f456:	8d 50 01             	lea    edx,[eax+0x1]
c000f459:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f45d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f461:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f465:	0f b6 c0             	movzx  eax,al
c000f468:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f46c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f470:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f474:	01 d0                	add    eax,edx
c000f476:	83 c0 2c             	add    eax,0x2c
c000f479:	8a 00                	mov    al,BYTE PTR [eax]
c000f47b:	0f b6 d0             	movzx  edx,al
c000f47e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f482:	8d 48 01             	lea    ecx,[eax+0x1]
c000f485:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f489:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f48d:	0f b6 c0             	movzx  eax,al
c000f490:	c1 e0 08             	shl    eax,0x8
c000f493:	09 d0                	or     eax,edx
c000f495:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f499:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f49e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4a2:	8d 50 01             	lea    edx,[eax+0x1]
c000f4a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4ad:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4b1:	0f b6 c0             	movzx  eax,al
c000f4b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4bc:	c1 e0 08             	shl    eax,0x8
c000f4bf:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f4c3:	89 c1                	mov    ecx,eax
c000f4c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4c9:	c1 e0 18             	shl    eax,0x18
c000f4cc:	89 c3                	mov    ebx,eax
c000f4ce:	a1 90 97 02 c0       	mov    eax,ds:0xc0029790
c000f4d3:	8d 50 01             	lea    edx,[eax+0x1]
c000f4d6:	89 15 90 97 02 c0    	mov    DWORD PTR ds:0xc0029790,edx
c000f4dc:	09 d9                	or     ecx,ebx
c000f4de:	89 ca                	mov    edx,ecx
c000f4e0:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c000f4e7:	eb 13                	jmp    c000f4fc <scanMADT()+0x494>
c000f4e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4ec:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4f1:	83 f8 05             	cmp    eax,0x5
c000f4f4:	75 06                	jne    c000f4fc <scanMADT()+0x494>
c000f4f6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f4fb:	90                   	nop
c000f4fc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f501:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f505:	01 d0                	add    eax,edx
c000f507:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f50b:	e9 50 fc ff ff       	jmp    c000f160 <scanMADT()+0xf8>
c000f510:	90                   	nop
c000f511:	eb 05                	jmp    c000f518 <scanMADT()+0x4b0>
c000f513:	90                   	nop
c000f514:	90                   	nop
c000f515:	8d 76 00             	lea    esi,[esi+0x0]
c000f518:	83 c4 38             	add    esp,0x38
c000f51b:	5b                   	pop    ebx
c000f51c:	c3                   	ret    
c000f51d:	90                   	nop
c000f51e:	66 90                	xchg   ax,ax

c000f520 <ACPI::ACPI()>:
c000f520:	83 ec 0c             	sub    esp,0xc
c000f523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f527:	83 ec 08             	sub    esp,0x8
c000f52a:	68 f1 18 02 c0       	push   0xc00218f1
c000f52f:	50                   	push   eax
c000f530:	e8 65 d2 ff ff       	call   c000c79a <Device::Device(char const*)>
c000f535:	83 c4 10             	add    esp,0x10
c000f538:	ba 44 1a 02 c0       	mov    edx,0xc0021a44
c000f53d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f541:	89 10                	mov    DWORD PTR [eax],edx
c000f543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f547:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f552:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f560:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f56a:	e8 f9 fa ff ff       	call   c000f068 <scanMADT()>
c000f56f:	90                   	nop
c000f570:	83 c4 0c             	add    esp,0xc
c000f573:	c3                   	ret    

c000f574 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f574:	83 ec 2c             	sub    esp,0x2c
c000f577:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f57b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f57f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f583:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f587:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f58c:	88 d0                	mov    al,dl
c000f58e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f592:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f597:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f59f:	90                   	nop
c000f5a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5a4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f5aa:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f5ae:	0f 8d b0 00 00 00    	jge    c000f664 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f5b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5bc:	83 c2 2a             	add    edx,0x2a
c000f5bf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f5c3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f5c8:	0f b7 c0             	movzx  eax,ax
c000f5cb:	39 c2                	cmp    edx,eax
c000f5cd:	0f 85 85 00 00 00    	jne    c000f658 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f5d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5db:	83 c2 2a             	add    edx,0x2a
c000f5de:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f5e2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f5e7:	0f b6 c0             	movzx  eax,al
c000f5ea:	39 c2                	cmp    edx,eax
c000f5ec:	75 6a                	jne    c000f658 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f5ee:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f5f3:	85 c0                	test   eax,eax
c000f5f5:	74 3d                	je     c000f634 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f5f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5ff:	83 c2 2a             	add    edx,0x2a
c000f602:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f606:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f60a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f60d:	39 c2                	cmp    edx,eax
c000f60f:	74 13                	je     c000f624 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f611:	83 ec 0c             	sub    esp,0xc
c000f614:	68 6c 18 02 c0       	push   0xc002186c
c000f619:	e8 ef 1b 00 00       	call   c001120d <KePanic(char const*)>
c000f61e:	83 c4 10             	add    esp,0x10
c000f621:	8d 76 00             	lea    esi,[esi+0x0]
c000f624:	83 ec 0c             	sub    esp,0xc
c000f627:	68 f6 18 02 c0       	push   0xc00218f6
c000f62c:	e8 dc 1b 00 00       	call   c001120d <KePanic(char const*)>
c000f631:	83 c4 10             	add    esp,0x10
c000f634:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f638:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f63c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f640:	83 c2 2a             	add    edx,0x2a
c000f643:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f647:	8b 02                	mov    eax,DWORD PTR [edx]
c000f649:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f64c:	89 01                	mov    DWORD PTR [ecx],eax
c000f64e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f651:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f656:	66 90                	xchg   ax,ax
c000f658:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f65d:	e9 3e ff ff ff       	jmp    c000f5a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f662:	66 90                	xchg   ax,ax
c000f664:	90                   	nop
c000f665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f669:	83 c4 2c             	add    esp,0x2c
c000f66c:	c2 04 00             	ret    0x4
c000f66f:	90                   	nop

c000f670 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f670:	83 ec 1c             	sub    esp,0x1c
c000f673:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f677:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f67b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f67f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f684:	88 c8                	mov    al,cl
c000f686:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f68a:	88 d0                	mov    al,dl
c000f68c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f694:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f69a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f69e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6a1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f6a5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f6a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ad:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f6b7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f6ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f6be:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f6c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6c7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6cd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f6d1:	83 c0 01             	add    eax,0x1
c000f6d4:	88 c1                	mov    cl,al
c000f6d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6da:	83 c2 2a             	add    edx,0x2a
c000f6dd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f6e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ef:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6f6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f6fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6fe:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f704:	8d 50 01             	lea    edx,[eax+0x1]
c000f707:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f70b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f711:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f715:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f71b:	3d 00 02 00 00       	cmp    eax,0x200
c000f720:	75 12                	jne    c000f734 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f722:	83 ec 0c             	sub    esp,0xc
c000f725:	68 05 19 02 c0       	push   0xc0021905
c000f72a:	e8 de 1a 00 00       	call   c001120d <KePanic(char const*)>
c000f72f:	83 c4 10             	add    esp,0x10
c000f732:	66 90                	xchg   ax,ax
c000f734:	90                   	nop
c000f735:	83 c4 1c             	add    esp,0x1c
c000f738:	c3                   	ret    
c000f739:	90                   	nop
c000f73a:	66 90                	xchg   ax,ax

c000f73c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f73c:	b8 00 00 00 00       	mov    eax,0x0
c000f741:	c3                   	ret    
c000f742:	66 90                	xchg   ax,ax

c000f744 <ACPI::detectPCI()>:
c000f744:	53                   	push   ebx
c000f745:	83 ec 28             	sub    esp,0x28
c000f748:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f74d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f752:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f757:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f75d:	83 e0 04             	and    eax,0x4
c000f760:	0f b6 c0             	movzx  eax,al
c000f763:	85 c0                	test   eax,eax
c000f765:	74 2d                	je     c000f794 <ACPI::detectPCI()+0x50>
c000f767:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f76c:	83 ec 08             	sub    esp,0x8
c000f76f:	68 22 19 02 c0       	push   0xc0021922
c000f774:	50                   	push   eax
c000f775:	e8 6e f8 ff ff       	call   c000efe8 <findDataTable(unsigned char*, char*)>
c000f77a:	83 c4 10             	add    esp,0x10
c000f77d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f781:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f786:	74 0c                	je     c000f794 <ACPI::detectPCI()+0x50>
c000f788:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f78d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f792:	66 90                	xchg   ax,ax
c000f794:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f79c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7a0:	8a 00                	mov    al,BYTE PTR [eax]
c000f7a2:	0f b6 c0             	movzx  eax,al
c000f7a5:	83 f8 01             	cmp    eax,0x1
c000f7a8:	75 0e                	jne    c000f7b8 <ACPI::detectPCI()+0x74>
c000f7aa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7af:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7b4:	eb 2e                	jmp    c000f7e4 <ACPI::detectPCI()+0xa0>
c000f7b6:	66 90                	xchg   ax,ax
c000f7b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7bc:	8a 00                	mov    al,BYTE PTR [eax]
c000f7be:	0f b6 c0             	movzx  eax,al
c000f7c1:	83 f8 02             	cmp    eax,0x2
c000f7c4:	75 1e                	jne    c000f7e4 <ACPI::detectPCI()+0xa0>
c000f7c6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7cb:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f7d0:	85 c0                	test   eax,eax
c000f7d2:	74 10                	je     c000f7e4 <ACPI::detectPCI()+0xa0>
c000f7d4:	83 ec 0c             	sub    esp,0xc
c000f7d7:	68 9c 18 02 c0       	push   0xc002189c
c000f7dc:	e8 2c 1a 00 00       	call   c001120d <KePanic(char const*)>
c000f7e1:	83 c4 10             	add    esp,0x10
c000f7e4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f7e8:	83 f0 01             	xor    eax,0x1
c000f7eb:	0f b6 c0             	movzx  eax,al
c000f7ee:	85 c0                	test   eax,eax
c000f7f0:	74 46                	je     c000f838 <ACPI::detectPCI()+0xf4>
c000f7f2:	e8 39 09 ff ff       	call   c0000130 <manualPCIProbe>
c000f7f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f7fb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f800:	75 0e                	jne    c000f810 <ACPI::detectPCI()+0xcc>
c000f802:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f807:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f80c:	eb 2a                	jmp    c000f838 <ACPI::detectPCI()+0xf4>
c000f80e:	66 90                	xchg   ax,ax
c000f810:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f815:	75 21                	jne    c000f838 <ACPI::detectPCI()+0xf4>
c000f817:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f81c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f821:	85 c0                	test   eax,eax
c000f823:	74 13                	je     c000f838 <ACPI::detectPCI()+0xf4>
c000f825:	83 ec 0c             	sub    esp,0xc
c000f828:	68 9c 18 02 c0       	push   0xc002189c
c000f82d:	e8 db 19 00 00       	call   c001120d <KePanic(char const*)>
c000f832:	83 c4 10             	add    esp,0x10
c000f835:	8d 76 00             	lea    esi,[esi+0x0]
c000f838:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f83d:	85 c0                	test   eax,eax
c000f83f:	0f 84 87 00 00 00    	je     c000f8cc <ACPI::detectPCI()+0x188>
c000f845:	83 ec 0c             	sub    esp,0xc
c000f848:	68 27 19 02 c0       	push   0xc0021927
c000f84d:	e8 e4 12 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c000f852:	83 c4 10             	add    esp,0x10
c000f855:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f85d:	83 ec 0c             	sub    esp,0xc
c000f860:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f864:	e8 4d 82 ff ff       	call   c0007ab6 <malloc>
c000f869:	83 c4 10             	add    esp,0x10
c000f86c:	89 c3                	mov    ebx,eax
c000f86e:	83 ec 0c             	sub    esp,0xc
c000f871:	53                   	push   ebx
c000f872:	e8 2d b3 00 00       	call   c001aba4 <PCI::PCI()>
c000f877:	83 c4 10             	add    esp,0x10
c000f87a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f87e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f882:	83 ec 08             	sub    esp,0x8
c000f885:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f889:	50                   	push   eax
c000f88a:	e8 73 cd ff ff       	call   c000c602 <Device::addChild(Device*)>
c000f88f:	83 c4 10             	add    esp,0x10
c000f892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f896:	8b 00                	mov    eax,DWORD PTR [eax]
c000f898:	83 c0 08             	add    eax,0x8
c000f89b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f8a2:	85 d2                	test   edx,edx
c000f8a4:	74 0a                	je     c000f8b0 <ACPI::detectPCI()+0x16c>
c000f8a6:	ba 01 00 00 00       	mov    edx,0x1
c000f8ab:	eb 0b                	jmp    c000f8b8 <ACPI::detectPCI()+0x174>
c000f8ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f8b0:	ba 02 00 00 00       	mov    edx,0x2
c000f8b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8b8:	6a 00                	push   0x0
c000f8ba:	6a 00                	push   0x0
c000f8bc:	52                   	push   edx
c000f8bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8c1:	ff d0                	call   eax
c000f8c3:	83 c4 10             	add    esp,0x10
c000f8c6:	e9 91 00 00 00       	jmp    c000f95c <ACPI::detectPCI()+0x218>
c000f8cb:	90                   	nop
c000f8cc:	83 ec 0c             	sub    esp,0xc
c000f8cf:	68 3f 19 02 c0       	push   0xc002193f
c000f8d4:	e8 5d 12 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c000f8d9:	83 c4 10             	add    esp,0x10
c000f8dc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f8e3:	83 ec 0c             	sub    esp,0xc
c000f8e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8ea:	e8 c7 81 ff ff       	call   c0007ab6 <malloc>
c000f8ef:	83 c4 10             	add    esp,0x10
c000f8f2:	89 c3                	mov    ebx,eax
c000f8f4:	83 ec 0c             	sub    esp,0xc
c000f8f7:	53                   	push   ebx
c000f8f8:	e8 41 be 00 00       	call   c001b73e <IDE::IDE()>
c000f8fd:	83 c4 10             	add    esp,0x10
c000f900:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f904:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f908:	83 ec 08             	sub    esp,0x8
c000f90b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f90f:	50                   	push   eax
c000f910:	e8 ed cc ff ff       	call   c000c602 <Device::addChild(Device*)>
c000f915:	83 c4 10             	add    esp,0x10
c000f918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f91c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f92a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f933:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f937:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f940:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f944:	8b 00                	mov    eax,DWORD PTR [eax]
c000f946:	83 c0 08             	add    eax,0x8
c000f949:	8b 00                	mov    eax,DWORD PTR [eax]
c000f94b:	6a 00                	push   0x0
c000f94d:	6a 00                	push   0x0
c000f94f:	6a 00                	push   0x0
c000f951:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f955:	ff d0                	call   eax
c000f957:	83 c4 10             	add    esp,0x10
c000f95a:	66 90                	xchg   ax,ax
c000f95c:	90                   	nop
c000f95d:	83 c4 28             	add    esp,0x28
c000f960:	5b                   	pop    ebx
c000f961:	c3                   	ret    
c000f962:	66 90                	xchg   ax,ax

c000f964 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f964:	83 ec 1c             	sub    esp,0x1c
c000f967:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f96b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f96e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f972:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f977:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f97c:	83 ec 08             	sub    esp,0x8
c000f97f:	52                   	push   edx
c000f980:	50                   	push   eax
c000f981:	e8 f2 77 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000f986:	83 c4 10             	add    esp,0x10
c000f989:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f98d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f992:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f997:	83 ec 04             	sub    esp,0x4
c000f99a:	6a 01                	push   0x1
c000f99c:	52                   	push   edx
c000f99d:	50                   	push   eax
c000f99e:	e8 ef 78 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f9a3:	83 c4 10             	add    esp,0x10
c000f9a6:	90                   	nop
c000f9a7:	83 c4 1c             	add    esp,0x1c
c000f9aa:	c3                   	ret    
c000f9ab:	90                   	nop

c000f9ac <ACPI::sleep()>:
c000f9ac:	83 ec 0c             	sub    esp,0xc
c000f9af:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000f9b4:	85 c0                	test   eax,eax
c000f9b6:	74 08                	je     c000f9c0 <ACPI::sleep()+0x14>
c000f9b8:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000f9bd:	ff d0                	call   eax
c000f9bf:	90                   	nop
c000f9c0:	90                   	nop
c000f9c1:	83 c4 0c             	add    esp,0xc
c000f9c4:	c3                   	ret    
c000f9c5:	90                   	nop
c000f9c6:	66 90                	xchg   ax,ax

c000f9c8 <ACPI::open(int, int, void*)>:
c000f9c8:	57                   	push   edi
c000f9c9:	56                   	push   esi
c000f9ca:	53                   	push   ebx
c000f9cb:	81 ec 70 01 00 00    	sub    esp,0x170
c000f9d1:	83 ec 0c             	sub    esp,0xc
c000f9d4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f9db:	e8 64 fd ff ff       	call   c000f744 <ACPI::detectPCI()>
c000f9e0:	83 c4 10             	add    esp,0x10
c000f9e3:	83 ec 0c             	sub    esp,0xc
c000f9e6:	68 c4 18 02 c0       	push   0xc00218c4
c000f9eb:	e8 46 11 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c000f9f0:	83 c4 10             	add    esp,0x10
c000f9f3:	b8 4c 05 00 00       	mov    eax,0x54c
c000f9f8:	8a 00                	mov    al,BYTE PTR [eax]
c000f9fa:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fa01:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fa09:	83 f8 01             	cmp    eax,0x1
c000fa0c:	75 12                	jne    c000fa20 <ACPI::open(int, int, void*)+0x58>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 34 12 02 c0       	push   0xc0021234
c000fa16:	e8 d9 4b 00 00       	call   c00145f4 <Thr::loadKernelSymbolTable(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	eb 34                	jmp    c000fa54 <ACPI::open(int, int, void*)+0x8c>
c000fa20:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fa28:	3d bb 00 00 00       	cmp    eax,0xbb
c000fa2d:	75 15                	jne    c000fa44 <ACPI::open(int, int, void*)+0x7c>
c000fa2f:	83 ec 0c             	sub    esp,0xc
c000fa32:	68 54 19 02 c0       	push   0xc0021954
c000fa37:	e8 b8 4b 00 00       	call   c00145f4 <Thr::loadKernelSymbolTable(char const*)>
c000fa3c:	83 c4 10             	add    esp,0x10
c000fa3f:	eb 13                	jmp    c000fa54 <ACPI::open(int, int, void*)+0x8c>
c000fa41:	8d 76 00             	lea    esi,[esi+0x0]
c000fa44:	83 ec 0c             	sub    esp,0xc
c000fa47:	68 72 19 02 c0       	push   0xc0021972
c000fa4c:	e8 bc 17 00 00       	call   c001120d <KePanic(char const*)>
c000fa51:	83 c4 10             	add    esp,0x10
c000fa54:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fa5c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fa67:	83 ec 0c             	sub    esp,0xc
c000fa6a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fa71:	e8 40 80 ff ff       	call   c0007ab6 <malloc>
c000fa76:	83 c4 10             	add    esp,0x10
c000fa79:	89 c3                	mov    ebx,eax
c000fa7b:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fa80:	83 ec 04             	sub    esp,0x4
c000fa83:	50                   	push   eax
c000fa84:	68 8c 19 02 c0       	push   0xc002198c
c000fa89:	53                   	push   ebx
c000fa8a:	e8 6b bc ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c000fa8f:	83 c4 10             	add    esp,0x10
c000fa92:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fa99:	83 ec 08             	sub    esp,0x8
c000fa9c:	6a 01                	push   0x1
c000fa9e:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000faa5:	e8 0c bd ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c000faaa:	83 c4 10             	add    esp,0x10
c000faad:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fab4:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fabc:	75 16                	jne    c000fad4 <ACPI::open(int, int, void*)+0x10c>
c000fabe:	83 ec 0c             	sub    esp,0xc
c000fac1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fac8:	e8 47 bd ff ff       	call   c000b814 <File::close()>
c000facd:	83 c4 10             	add    esp,0x10
c000fad0:	eb 0a                	jmp    c000fadc <ACPI::open(int, int, void*)+0x114>
c000fad2:	66 90                	xchg   ax,ax
c000fad4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fadc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fae4:	74 1e                	je     c000fb04 <ACPI::open(int, int, void*)+0x13c>
c000fae6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000faed:	8b 00                	mov    eax,DWORD PTR [eax]
c000faef:	83 c0 08             	add    eax,0x8
c000faf2:	8b 00                	mov    eax,DWORD PTR [eax]
c000faf4:	83 ec 0c             	sub    esp,0xc
c000faf7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fafe:	ff d0                	call   eax
c000fb00:	83 c4 10             	add    esp,0x10
c000fb03:	90                   	nop
c000fb04:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fb0b:	83 f0 01             	xor    eax,0x1
c000fb0e:	0f b6 c0             	movzx  eax,al
c000fb11:	85 c0                	test   eax,eax
c000fb13:	74 43                	je     c000fb58 <ACPI::open(int, int, void*)+0x190>
c000fb15:	83 ec 0c             	sub    esp,0xc
c000fb18:	68 aa 19 02 c0       	push   0xc00219aa
c000fb1d:	e8 14 10 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c000fb22:	83 c4 10             	add    esp,0x10
c000fb25:	83 ec 04             	sub    esp,0x4
c000fb28:	6a 0c                	push   0xc
c000fb2a:	68 c5 19 02 c0       	push   0xc00219c5
c000fb2f:	68 d6 19 02 c0       	push   0xc00219d6
c000fb34:	e8 6b 3d 00 00       	call   c00138a4 <Reg::readIntWithDefault(char*, char*, int)>
c000fb39:	83 c4 10             	add    esp,0x10
c000fb3c:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fb43:	83 ec 0c             	sub    esp,0xc
c000fb46:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fb4d:	e8 ea 9c ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fb52:	83 c4 10             	add    esp,0x10
c000fb55:	8d 76 00             	lea    esi,[esi+0x0]
c000fb58:	83 ec 0c             	sub    esp,0xc
c000fb5b:	68 35 05 02 c0       	push   0xc0020535
c000fb60:	e8 d1 0f 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c000fb65:	83 c4 10             	add    esp,0x10
c000fb68:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fb6f:	83 ec 08             	sub    esp,0x8
c000fb72:	6a 13                	push   0x13
c000fb74:	50                   	push   eax
c000fb75:	e8 a0 cd ff ff       	call   c000c91a <getDevicesOfType(DeviceType)>
c000fb7a:	83 c4 0c             	add    esp,0xc
c000fb7d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb80:	83 ec 0c             	sub    esp,0xc
c000fb83:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fb8a:	50                   	push   eax
c000fb8b:	e8 90 fd 00 00       	call   c001f920 <LinkedList<Device>::isEmpty()>
c000fb90:	83 c4 10             	add    esp,0x10
c000fb93:	83 f0 01             	xor    eax,0x1
c000fb96:	0f b6 c0             	movzx  eax,al
c000fb99:	85 c0                	test   eax,eax
c000fb9b:	0f 84 47 01 00 00    	je     c000fce8 <ACPI::open(int, int, void*)+0x320>
c000fba1:	83 ec 0c             	sub    esp,0xc
c000fba4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fbab:	50                   	push   eax
c000fbac:	e8 8b fd 00 00       	call   c001f93c <LinkedList<Device>::getFirstElement()>
c000fbb1:	83 c4 10             	add    esp,0x10
c000fbb4:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fbbb:	83 ec 0c             	sub    esp,0xc
c000fbbe:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fbc5:	50                   	push   eax
c000fbc6:	e8 79 fd 00 00       	call   c001f944 <LinkedList<Device>::removeFirst()>
c000fbcb:	83 c4 10             	add    esp,0x10
c000fbce:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fbd5:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fbdc:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fbe3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fbe7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fbed:	ba 09 00 00 00       	mov    edx,0x9
c000fbf2:	fc                   	cld    
c000fbf3:	89 c7                	mov    edi,eax
c000fbf5:	89 de                	mov    esi,ebx
c000fbf7:	89 d1                	mov    ecx,edx
c000fbf9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fbfb:	83 ec 08             	sub    esp,0x8
c000fbfe:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fc02:	50                   	push   eax
c000fc03:	83 ec 24             	sub    esp,0x24
c000fc06:	89 e0                	mov    eax,esp
c000fc08:	89 c3                	mov    ebx,eax
c000fc0a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fc0e:	ba 09 00 00 00       	mov    edx,0x9
c000fc13:	89 df                	mov    edi,ebx
c000fc15:	89 c6                	mov    esi,eax
c000fc17:	89 d1                	mov    ecx,edx
c000fc19:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc1b:	e8 6e b4 00 00       	call   c001b08e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fc20:	83 c4 30             	add    esp,0x30
c000fc23:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fc2a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fc32:	0f 84 48 ff ff ff    	je     c000fb80 <ACPI::open(int, int, void*)+0x1b8>
c000fc38:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fc43:	83 ec 0c             	sub    esp,0xc
c000fc46:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc4d:	e8 64 7e ff ff       	call   c0007ab6 <malloc>
c000fc52:	83 c4 10             	add    esp,0x10
c000fc55:	89 c3                	mov    ebx,eax
c000fc57:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fc5c:	83 ec 04             	sub    esp,0x4
c000fc5f:	50                   	push   eax
c000fc60:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fc67:	53                   	push   ebx
c000fc68:	e8 8d ba ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c000fc6d:	83 c4 10             	add    esp,0x10
c000fc70:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fc77:	83 ec 0c             	sub    esp,0xc
c000fc7a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fc81:	e8 f4 bd ff ff       	call   c000ba7a <File::exists()>
c000fc86:	83 c4 10             	add    esp,0x10
c000fc89:	0f b6 c0             	movzx  eax,al
c000fc8c:	85 c0                	test   eax,eax
c000fc8e:	74 28                	je     c000fcb8 <ACPI::open(int, int, void*)+0x2f0>
c000fc90:	83 ec 08             	sub    esp,0x8
c000fc93:	6a 01                	push   0x1
c000fc95:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fc9c:	e8 cd 53 00 00       	call   c001506e <Thr::loadDLL(char const*, bool)>
c000fca1:	83 c4 10             	add    esp,0x10
c000fca4:	83 ec 08             	sub    esp,0x8
c000fca7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fcae:	50                   	push   eax
c000fcaf:	e8 eb 55 00 00       	call   c001529f <Thr::executeDLL(unsigned long, void*)>
c000fcb4:	83 c4 10             	add    esp,0x10
c000fcb7:	90                   	nop
c000fcb8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fcc0:	0f 84 ba fe ff ff    	je     c000fb80 <ACPI::open(int, int, void*)+0x1b8>
c000fcc6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fccd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fccf:	83 c0 08             	add    eax,0x8
c000fcd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd4:	83 ec 0c             	sub    esp,0xc
c000fcd7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fcde:	ff d0                	call   eax
c000fce0:	83 c4 10             	add    esp,0x10
c000fce3:	e9 98 fe ff ff       	jmp    c000fb80 <ACPI::open(int, int, void*)+0x1b8>
c000fce8:	83 ec 0c             	sub    esp,0xc
c000fceb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fcf2:	50                   	push   eax
c000fcf3:	e8 24 fc 00 00       	call   c001f91c <LinkedList<Device>::~LinkedList()>
c000fcf8:	83 c4 10             	add    esp,0x10
c000fcfb:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fd01:	83 ec 08             	sub    esp,0x8
c000fd04:	6a 01                	push   0x1
c000fd06:	68 dd 19 02 c0       	push   0xc00219dd
c000fd0b:	e8 5e 53 00 00       	call   c001506e <Thr::loadDLL(char const*, bool)>
c000fd10:	83 c4 10             	add    esp,0x10
c000fd13:	83 ec 08             	sub    esp,0x8
c000fd16:	53                   	push   ebx
c000fd17:	50                   	push   eax
c000fd18:	e8 82 55 00 00       	call   c001529f <Thr::executeDLL(unsigned long, void*)>
c000fd1d:	83 c4 10             	add    esp,0x10
c000fd20:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fd25:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fd2b:	83 e0 04             	and    eax,0x4
c000fd2e:	0f b6 c0             	movzx  eax,al
c000fd31:	85 c0                	test   eax,eax
c000fd33:	0f 84 1b 01 00 00    	je     c000fe54 <ACPI::open(int, int, void*)+0x48c>
c000fd39:	83 ec 0c             	sub    esp,0xc
c000fd3c:	68 fa 19 02 c0       	push   0xc00219fa
c000fd41:	e8 f0 0d 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c000fd46:	83 c4 10             	add    esp,0x10
c000fd49:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fd54:	83 ec 0c             	sub    esp,0xc
c000fd57:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000fd5e:	e8 53 7d ff ff       	call   c0007ab6 <malloc>
c000fd63:	83 c4 10             	add    esp,0x10
c000fd66:	89 c3                	mov    ebx,eax
c000fd68:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fd6d:	83 ec 04             	sub    esp,0x4
c000fd70:	50                   	push   eax
c000fd71:	68 17 1a 02 c0       	push   0xc0021a17
c000fd76:	53                   	push   ebx
c000fd77:	e8 7e b9 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c000fd7c:	83 c4 10             	add    esp,0x10
c000fd7f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000fd86:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fd8e:	74 20                	je     c000fdb0 <ACPI::open(int, int, void*)+0x3e8>
c000fd90:	83 ec 0c             	sub    esp,0xc
c000fd93:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fd9a:	e8 db bc ff ff       	call   c000ba7a <File::exists()>
c000fd9f:	83 c4 10             	add    esp,0x10
c000fda2:	0f b6 c0             	movzx  eax,al
c000fda5:	85 c0                	test   eax,eax
c000fda7:	74 07                	je     c000fdb0 <ACPI::open(int, int, void*)+0x3e8>
c000fda9:	b0 01                	mov    al,0x1
c000fdab:	eb 07                	jmp    c000fdb4 <ACPI::open(int, int, void*)+0x3ec>
c000fdad:	8d 76 00             	lea    esi,[esi+0x0]
c000fdb0:	b0 00                	mov    al,0x0
c000fdb2:	66 90                	xchg   ax,ax
c000fdb4:	0f b6 c0             	movzx  eax,al
c000fdb7:	85 c0                	test   eax,eax
c000fdb9:	74 25                	je     c000fde0 <ACPI::open(int, int, void*)+0x418>
c000fdbb:	83 ec 08             	sub    esp,0x8
c000fdbe:	6a 01                	push   0x1
c000fdc0:	68 17 1a 02 c0       	push   0xc0021a17
c000fdc5:	e8 a4 52 00 00       	call   c001506e <Thr::loadDLL(char const*, bool)>
c000fdca:	83 c4 10             	add    esp,0x10
c000fdcd:	83 ec 08             	sub    esp,0x8
c000fdd0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000fdd7:	50                   	push   eax
c000fdd8:	e8 c2 54 00 00       	call   c001529f <Thr::executeDLL(unsigned long, void*)>
c000fddd:	83 c4 10             	add    esp,0x10
c000fde0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fde8:	74 2a                	je     c000fe14 <ACPI::open(int, int, void*)+0x44c>
c000fdea:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fdf2:	74 20                	je     c000fe14 <ACPI::open(int, int, void*)+0x44c>
c000fdf4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000fdfb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdfd:	83 c0 08             	add    eax,0x8
c000fe00:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe02:	83 ec 0c             	sub    esp,0xc
c000fe05:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fe0c:	ff d0                	call   eax
c000fe0e:	83 c4 10             	add    esp,0x10
c000fe11:	8d 76 00             	lea    esi,[esi+0x0]
c000fe14:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000fe19:	83 ec 08             	sub    esp,0x8
c000fe1c:	68 34 1a 02 c0       	push   0xc0021a34
c000fe21:	50                   	push   eax
c000fe22:	e8 c1 f1 ff ff       	call   c000efe8 <findDataTable(unsigned char*, char*)>
c000fe27:	83 c4 10             	add    esp,0x10
c000fe2a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000fe31:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000fe39:	74 19                	je     c000fe54 <ACPI::open(int, int, void*)+0x48c>
c000fe3b:	83 ec 08             	sub    esp,0x8
c000fe3e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fe45:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe4c:	e8 13 fb ff ff       	call   c000f964 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	b8 00 00 00 00       	mov    eax,0x0
c000fe59:	81 c4 70 01 00 00    	add    esp,0x170
c000fe5f:	5b                   	pop    ebx
c000fe60:	5e                   	pop    esi
c000fe61:	5f                   	pop    edi
c000fe62:	c3                   	ret    
c000fe63:	90                   	nop

c000fe64 <CPU::close(int, int, void*)>:
c000fe64:	31 c0                	xor    eax,eax
c000fe66:	c3                   	ret    
c000fe67:	90                   	nop

c000fe68 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fe68:	60                   	pusha  
c000fe69:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe75:	9c                   	pushf  
c000fe76:	fa                   	cli    
c000fe77:	0f 09                	wbinvd 
c000fe79:	0f 30                	wrmsr  
c000fe7b:	9d                   	popf   
c000fe7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe80:	89 02                	mov    DWORD PTR [edx],eax
c000fe82:	61                   	popa   
c000fe83:	c3                   	ret    

c000fe84 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fe84:	60                   	pusha  
c000fe85:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe89:	9c                   	pushf  
c000fe8a:	fa                   	cli    
c000fe8b:	0f 09                	wbinvd 
c000fe8d:	31 c0                	xor    eax,eax
c000fe8f:	31 d2                	xor    edx,edx
c000fe91:	0f 32                	rdmsr  
c000fe93:	9d                   	popf   
c000fe94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe98:	89 02                	mov    DWORD PTR [edx],eax
c000fe9a:	61                   	popa   
c000fe9b:	c3                   	ret    

c000fe9c <CPU::AMD_K6_writeback(int, int, int)>:
c000fe9c:	56                   	push   esi
c000fe9d:	53                   	push   ebx
c000fe9e:	83 ec 10             	sub    esp,0x10
c000fea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fea5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000feaa:	75 5d                	jne    c000ff09 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000feac:	83 f8 08             	cmp    eax,0x8
c000feaf:	75 09                	jne    c000feba <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000feb1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000feb6:	7e 13                	jle    c000fecb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000feb8:	eb 30                	jmp    c000feea <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000feba:	83 f8 06             	cmp    eax,0x6
c000febd:	7c 4a                	jl     c000ff09 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000febf:	83 f8 07             	cmp    eax,0x7
c000fec2:	7e 07                	jle    c000fecb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fec4:	83 f8 09             	cmp    eax,0x9
c000fec7:	74 21                	je     c000feea <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fec9:	eb 3e                	jmp    c000ff09 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fecb:	89 e6                	mov    esi,esp
c000fecd:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000fed3:	56                   	push   esi
c000fed4:	c1 eb 15             	shr    ebx,0x15
c000fed7:	68 82 00 00 c0       	push   0xc0000082
c000fedc:	83 e3 7e             	and    ebx,0x7e
c000fedf:	e8 a0 ff ff ff       	call   c000fe84 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fee4:	56                   	push   esi
c000fee5:	6a 00                	push   0x0
c000fee7:	53                   	push   ebx
c000fee8:	eb 12                	jmp    c000fefc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000feea:	89 e3                	mov    ebx,esp
c000feec:	53                   	push   ebx
c000feed:	68 82 00 00 c0       	push   0xc0000082
c000fef2:	e8 8d ff ff ff       	call   c000fe84 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fef7:	53                   	push   ebx
c000fef8:	6a 00                	push   0x0
c000fefa:	6a 00                	push   0x0
c000fefc:	68 82 00 00 c0       	push   0xc0000082
c000ff01:	e8 62 ff ff ff       	call   c000fe68 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ff06:	83 c4 18             	add    esp,0x18
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	5b                   	pop    ebx
c000ff0d:	5e                   	pop    esi
c000ff0e:	c3                   	ret    
c000ff0f:	90                   	nop

c000ff10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ff10:	55                   	push   ebp
c000ff11:	57                   	push   edi
c000ff12:	56                   	push   esi
c000ff13:	53                   	push   ebx
c000ff14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff18:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ff1c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff20:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ff24:	39 05 d8 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fd8,eax
c000ff2a:	75 23                	jne    c000ff4f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ff2c:	a1 ec 99 02 c0       	mov    eax,ds:0xc00299ec
c000ff31:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff35:	89 06                	mov    DWORD PTR [esi],eax
c000ff37:	a1 e8 99 02 c0       	mov    eax,ds:0xc00299e8
c000ff3c:	89 07                	mov    DWORD PTR [edi],eax
c000ff3e:	a1 e4 99 02 c0       	mov    eax,ds:0xc00299e4
c000ff43:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff46:	a1 e0 99 02 c0       	mov    eax,ds:0xc00299e0
c000ff4b:	89 02                	mov    DWORD PTR [edx],eax
c000ff4d:	eb 3f                	jmp    c000ff8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ff4f:	31 c9                	xor    ecx,ecx
c000ff51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff55:	0f a2                	cpuid  
c000ff57:	89 06                	mov    DWORD PTR [esi],eax
c000ff59:	89 1f                	mov    DWORD PTR [edi],ebx
c000ff5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff5f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ff62:	89 10                	mov    DWORD PTR [eax],edx
c000ff64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff68:	a3 d8 2f 02 c0       	mov    ds:0xc0022fd8,eax
c000ff6d:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff6f:	a3 ec 99 02 c0       	mov    ds:0xc00299ec,eax
c000ff74:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff76:	a3 e8 99 02 c0       	mov    ds:0xc00299e8,eax
c000ff7b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff7e:	a3 e4 99 02 c0       	mov    ds:0xc00299e4,eax
c000ff83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff87:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff89:	a3 e0 99 02 c0       	mov    ds:0xc00299e0,eax
c000ff8e:	5b                   	pop    ebx
c000ff8f:	5e                   	pop    esi
c000ff90:	5f                   	pop    edi
c000ff91:	5d                   	pop    ebp
c000ff92:	c3                   	ret    
c000ff93:	90                   	nop

c000ff94 <CPU::cpuidCheckEDX(unsigned int)>:
c000ff94:	83 ec 10             	sub    esp,0x10
c000ff97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff9b:	50                   	push   eax
c000ff9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffa0:	50                   	push   eax
c000ffa1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffa5:	50                   	push   eax
c000ffa6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffaa:	50                   	push   eax
c000ffab:	6a 01                	push   0x1
c000ffad:	e8 5e ff ff ff       	call   c000ff10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffb6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000ffba:	0f 95 c0             	setne  al
c000ffbd:	83 c4 24             	add    esp,0x24
c000ffc0:	c3                   	ret    
c000ffc1:	90                   	nop

c000ffc2 <CPU::cpuidCheckECX(unsigned int)>:
c000ffc2:	83 ec 10             	sub    esp,0x10
c000ffc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffc9:	50                   	push   eax
c000ffca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffce:	50                   	push   eax
c000ffcf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffd3:	50                   	push   eax
c000ffd4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffd8:	50                   	push   eax
c000ffd9:	6a 01                	push   0x1
c000ffdb:	e8 30 ff ff ff       	call   c000ff10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffe0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffe4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ffe8:	0f 95 c0             	setne  al
c000ffeb:	83 c4 24             	add    esp,0x24
c000ffee:	c3                   	ret    
c000ffef:	90                   	nop

c000fff0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000fff0:	83 ec 10             	sub    esp,0x10
c000fff3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fff7:	50                   	push   eax
c000fff8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fffc:	50                   	push   eax
c000fffd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010001:	50                   	push   eax
c0010002:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010006:	50                   	push   eax
c0010007:	6a 07                	push   0x7
c0010009:	e8 02 ff ff ff       	call   c000ff10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001000e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010012:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010016:	0f 95 c0             	setne  al
c0010019:	83 c4 24             	add    esp,0x24
c001001c:	c3                   	ret    
c001001d:	90                   	nop

c001001e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001001e:	83 ec 10             	sub    esp,0x10
c0010021:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010025:	50                   	push   eax
c0010026:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001002a:	50                   	push   eax
c001002b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001002f:	50                   	push   eax
c0010030:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010034:	50                   	push   eax
c0010035:	6a 07                	push   0x7
c0010037:	e8 d4 fe ff ff       	call   c000ff10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001003c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010040:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010044:	0f 95 c0             	setne  al
c0010047:	83 c4 24             	add    esp,0x24
c001004a:	c3                   	ret    
c001004b:	90                   	nop

c001004c <CPU::CPU()>:
c001004c:	83 ec 0c             	sub    esp,0xc
c001004f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010053:	83 ec 08             	sub    esp,0x8
c0010056:	68 59 1b 02 c0       	push   0xc0021b59
c001005b:	50                   	push   eax
c001005c:	e8 39 c7 ff ff       	call   c000c79a <Device::Device(char const*)>
c0010061:	83 c4 10             	add    esp,0x10
c0010064:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c0010069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001006d:	89 10                	mov    DWORD PTR [eax],edx
c001006f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010073:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001007d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010081:	05 78 01 00 00       	add    eax,0x178
c0010086:	83 ec 0c             	sub    esp,0xc
c0010089:	50                   	push   eax
c001008a:	e8 cd 72 ff ff       	call   c000735c <GDT::GDT()>
c001008f:	83 c4 10             	add    esp,0x10
c0010092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010096:	05 7c 09 00 00       	add    eax,0x97c
c001009b:	83 ec 0c             	sub    esp,0xc
c001009e:	50                   	push   eax
c001009f:	e8 08 75 ff ff       	call   c00075ac <IDT::IDT()>
c00100a4:	83 c4 10             	add    esp,0x10
c00100a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ab:	05 7c 11 00 00       	add    eax,0x117c
c00100b0:	83 ec 0c             	sub    esp,0xc
c00100b3:	50                   	push   eax
c00100b4:	e8 8b 8e ff ff       	call   c0008f44 <TSS::TSS()>
c00100b9:	83 c4 10             	add    esp,0x10
c00100bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00100c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100cb:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00100d5:	90                   	nop
c00100d6:	83 c4 0c             	add    esp,0xc
c00100d9:	c3                   	ret    

c00100da <CPU::displayFeatures()>:
c00100da:	c3                   	ret    
c00100db:	90                   	nop

c00100dc <CPU::detectFeatures()>:
c00100dc:	55                   	push   ebp
c00100dd:	57                   	push   edi
c00100de:	56                   	push   esi
c00100df:	53                   	push   ebx
c00100e0:	83 ec 30             	sub    esp,0x30
c00100e3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00100e7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00100f1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00100f8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00100fe:	6a 0d                	push   0xd
c0010100:	6a 00                	push   0x0
c0010102:	55                   	push   ebp
c0010103:	e8 e8 03 ff ff       	call   c00004f0 <memset>
c0010108:	83 c4 10             	add    esp,0x10
c001010b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010110:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010117:	0f 84 db 05 00 00    	je     c00106f8 <CPU::detectFeatures()+0x61c>
c001011d:	83 ec 0c             	sub    esp,0xc
c0010120:	89 ef                	mov    edi,ebp
c0010122:	6a 10                	push   0x10
c0010124:	e8 6b fe ff ff       	call   c000ff94 <CPU::cpuidCheckEDX(unsigned int)>
c0010129:	83 e0 01             	and    eax,0x1
c001012c:	8d 14 00             	lea    edx,[eax+eax*1]
c001012f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010135:	83 e0 fd             	and    eax,0xfffffffd
c0010138:	09 d0                	or     eax,edx
c001013a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010140:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010147:	e8 48 fe ff ff       	call   c000ff94 <CPU::cpuidCheckEDX(unsigned int)>
c001014c:	83 e0 01             	and    eax,0x1
c001014f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010156:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001015c:	83 e0 fb             	and    eax,0xfffffffb
c001015f:	09 d0                	or     eax,edx
c0010161:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010167:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001016e:	e8 21 fe ff ff       	call   c000ff94 <CPU::cpuidCheckEDX(unsigned int)>
c0010173:	83 e0 01             	and    eax,0x1
c0010176:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001017d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010183:	83 e0 f7             	and    eax,0xfffffff7
c0010186:	09 d0                	or     eax,edx
c0010188:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001018e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010195:	e8 fa fd ff ff       	call   c000ff94 <CPU::cpuidCheckEDX(unsigned int)>
c001019a:	83 e0 01             	and    eax,0x1
c001019d:	c1 e0 04             	shl    eax,0x4
c00101a0:	89 c2                	mov    edx,eax
c00101a2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101a8:	83 e0 ef             	and    eax,0xffffffef
c00101ab:	09 d0                	or     eax,edx
c00101ad:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101b3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00101ba:	e8 d5 fd ff ff       	call   c000ff94 <CPU::cpuidCheckEDX(unsigned int)>
c00101bf:	83 e0 01             	and    eax,0x1
c00101c2:	c1 e0 05             	shl    eax,0x5
c00101c5:	89 c2                	mov    edx,eax
c00101c7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101cd:	83 e0 df             	and    eax,0xffffffdf
c00101d0:	09 d0                	or     eax,edx
c00101d2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101d8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00101df:	e8 b0 fd ff ff       	call   c000ff94 <CPU::cpuidCheckEDX(unsigned int)>
c00101e4:	83 e0 01             	and    eax,0x1
c00101e7:	8d 14 00             	lea    edx,[eax+eax*1]
c00101ea:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00101f0:	83 e0 fd             	and    eax,0xfffffffd
c00101f3:	09 d0                	or     eax,edx
c00101f5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00101fb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010202:	e8 8d fd ff ff       	call   c000ff94 <CPU::cpuidCheckEDX(unsigned int)>
c0010207:	83 e0 01             	and    eax,0x1
c001020a:	c1 e0 06             	shl    eax,0x6
c001020d:	89 c2                	mov    edx,eax
c001020f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010215:	83 e0 bf             	and    eax,0xffffffbf
c0010218:	09 d0                	or     eax,edx
c001021a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010220:	58                   	pop    eax
c0010221:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010225:	50                   	push   eax
c0010226:	8d 44 24 28          	lea    eax,[esp+0x28]
c001022a:	50                   	push   eax
c001022b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001022f:	56                   	push   esi
c0010230:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010234:	50                   	push   eax
c0010235:	6a 00                	push   0x0
c0010237:	e8 d4 fc ff ff       	call   c000ff10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001023c:	b8 04 00 00 00       	mov    eax,0x4
c0010241:	89 c1                	mov    ecx,eax
c0010243:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010245:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001024b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001024f:	89 c1                	mov    ecx,eax
c0010251:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010253:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010259:	8d 74 24 38          	lea    esi,[esp+0x38]
c001025d:	89 c1                	mov    ecx,eax
c001025f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010261:	83 c4 18             	add    esp,0x18
c0010264:	68 68 1a 02 c0       	push   0xc0021a68
c0010269:	55                   	push   ebp
c001026a:	e8 e1 04 ff ff       	call   c0000750 <strcmp>
c001026f:	83 c4 10             	add    esp,0x10
c0010272:	85 c0                	test   eax,eax
c0010274:	75 0f                	jne    c0010285 <CPU::detectFeatures()+0x1a9>
c0010276:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010280:	e9 22 02 00 00       	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c0010285:	50                   	push   eax
c0010286:	50                   	push   eax
c0010287:	68 75 1a 02 c0       	push   0xc0021a75
c001028c:	55                   	push   ebp
c001028d:	e8 be 04 ff ff       	call   c0000750 <strcmp>
c0010292:	83 c4 10             	add    esp,0x10
c0010295:	85 c0                	test   eax,eax
c0010297:	74 dd                	je     c0010276 <CPU::detectFeatures()+0x19a>
c0010299:	50                   	push   eax
c001029a:	50                   	push   eax
c001029b:	68 82 1a 02 c0       	push   0xc0021a82
c00102a0:	55                   	push   ebp
c00102a1:	e8 aa 04 ff ff       	call   c0000750 <strcmp>
c00102a6:	83 c4 10             	add    esp,0x10
c00102a9:	85 c0                	test   eax,eax
c00102ab:	74 2a                	je     c00102d7 <CPU::detectFeatures()+0x1fb>
c00102ad:	50                   	push   eax
c00102ae:	50                   	push   eax
c00102af:	68 8f 1a 02 c0       	push   0xc0021a8f
c00102b4:	55                   	push   ebp
c00102b5:	e8 96 04 ff ff       	call   c0000750 <strcmp>
c00102ba:	83 c4 10             	add    esp,0x10
c00102bd:	85 c0                	test   eax,eax
c00102bf:	74 16                	je     c00102d7 <CPU::detectFeatures()+0x1fb>
c00102c1:	50                   	push   eax
c00102c2:	50                   	push   eax
c00102c3:	68 9c 1a 02 c0       	push   0xc0021a9c
c00102c8:	55                   	push   ebp
c00102c9:	e8 82 04 ff ff       	call   c0000750 <strcmp>
c00102ce:	83 c4 10             	add    esp,0x10
c00102d1:	85 c0                	test   eax,eax
c00102d3:	74 48                	je     c001031d <CPU::detectFeatures()+0x241>
c00102d5:	eb 0f                	jmp    c00102e6 <CPU::detectFeatures()+0x20a>
c00102d7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00102e1:	e9 c1 01 00 00       	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c00102e6:	50                   	push   eax
c00102e7:	50                   	push   eax
c00102e8:	68 a9 1a 02 c0       	push   0xc0021aa9
c00102ed:	55                   	push   ebp
c00102ee:	e8 5d 04 ff ff       	call   c0000750 <strcmp>
c00102f3:	83 c4 10             	add    esp,0x10
c00102f6:	85 c0                	test   eax,eax
c00102f8:	74 23                	je     c001031d <CPU::detectFeatures()+0x241>
c00102fa:	57                   	push   edi
c00102fb:	57                   	push   edi
c00102fc:	68 b6 1a 02 c0       	push   0xc0021ab6
c0010301:	55                   	push   ebp
c0010302:	e8 49 04 ff ff       	call   c0000750 <strcmp>
c0010307:	83 c4 10             	add    esp,0x10
c001030a:	85 c0                	test   eax,eax
c001030c:	75 1e                	jne    c001032c <CPU::detectFeatures()+0x250>
c001030e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010318:	e9 8a 01 00 00       	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c001031d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010327:	e9 7b 01 00 00       	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c001032c:	56                   	push   esi
c001032d:	56                   	push   esi
c001032e:	68 c3 1a 02 c0       	push   0xc0021ac3
c0010333:	55                   	push   ebp
c0010334:	e8 17 04 ff ff       	call   c0000750 <strcmp>
c0010339:	83 c4 10             	add    esp,0x10
c001033c:	85 c0                	test   eax,eax
c001033e:	75 0f                	jne    c001034f <CPU::detectFeatures()+0x273>
c0010340:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001034a:	e9 58 01 00 00       	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c001034f:	51                   	push   ecx
c0010350:	51                   	push   ecx
c0010351:	68 82 1a 02 c0       	push   0xc0021a82
c0010356:	55                   	push   ebp
c0010357:	e8 f4 03 ff ff       	call   c0000750 <strcmp>
c001035c:	83 c4 10             	add    esp,0x10
c001035f:	85 c0                	test   eax,eax
c0010361:	75 0f                	jne    c0010372 <CPU::detectFeatures()+0x296>
c0010363:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001036d:	e9 35 01 00 00       	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c0010372:	52                   	push   edx
c0010373:	52                   	push   edx
c0010374:	68 d0 1a 02 c0       	push   0xc0021ad0
c0010379:	55                   	push   ebp
c001037a:	e8 d1 03 ff ff       	call   c0000750 <strcmp>
c001037f:	83 c4 10             	add    esp,0x10
c0010382:	85 c0                	test   eax,eax
c0010384:	75 0f                	jne    c0010395 <CPU::detectFeatures()+0x2b9>
c0010386:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010390:	e9 12 01 00 00       	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c0010395:	50                   	push   eax
c0010396:	50                   	push   eax
c0010397:	68 dd 1a 02 c0       	push   0xc0021add
c001039c:	55                   	push   ebp
c001039d:	e8 ae 03 ff ff       	call   c0000750 <strcmp>
c00103a2:	83 c4 10             	add    esp,0x10
c00103a5:	85 c0                	test   eax,eax
c00103a7:	75 0f                	jne    c00103b8 <CPU::detectFeatures()+0x2dc>
c00103a9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00103b3:	e9 ef 00 00 00       	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c00103b8:	50                   	push   eax
c00103b9:	50                   	push   eax
c00103ba:	68 ea 1a 02 c0       	push   0xc0021aea
c00103bf:	55                   	push   ebp
c00103c0:	e8 8b 03 ff ff       	call   c0000750 <strcmp>
c00103c5:	83 c4 10             	add    esp,0x10
c00103c8:	85 c0                	test   eax,eax
c00103ca:	75 0f                	jne    c00103db <CPU::detectFeatures()+0x2ff>
c00103cc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00103d6:	e9 cc 00 00 00       	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c00103db:	50                   	push   eax
c00103dc:	50                   	push   eax
c00103dd:	68 f7 1a 02 c0       	push   0xc0021af7
c00103e2:	55                   	push   ebp
c00103e3:	e8 68 03 ff ff       	call   c0000750 <strcmp>
c00103e8:	83 c4 10             	add    esp,0x10
c00103eb:	85 c0                	test   eax,eax
c00103ed:	75 0f                	jne    c00103fe <CPU::detectFeatures()+0x322>
c00103ef:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00103f9:	e9 a9 00 00 00       	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c00103fe:	50                   	push   eax
c00103ff:	50                   	push   eax
c0010400:	68 04 1b 02 c0       	push   0xc0021b04
c0010405:	55                   	push   ebp
c0010406:	e8 45 03 ff ff       	call   c0000750 <strcmp>
c001040b:	83 c4 10             	add    esp,0x10
c001040e:	85 c0                	test   eax,eax
c0010410:	75 0f                	jne    c0010421 <CPU::detectFeatures()+0x345>
c0010412:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001041c:	e9 86 00 00 00       	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c0010421:	50                   	push   eax
c0010422:	50                   	push   eax
c0010423:	68 11 1b 02 c0       	push   0xc0021b11
c0010428:	55                   	push   ebp
c0010429:	e8 22 03 ff ff       	call   c0000750 <strcmp>
c001042e:	83 c4 10             	add    esp,0x10
c0010431:	85 c0                	test   eax,eax
c0010433:	75 0c                	jne    c0010441 <CPU::detectFeatures()+0x365>
c0010435:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001043f:	eb 66                	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c0010441:	50                   	push   eax
c0010442:	50                   	push   eax
c0010443:	68 1e 1b 02 c0       	push   0xc0021b1e
c0010448:	55                   	push   ebp
c0010449:	e8 02 03 ff ff       	call   c0000750 <strcmp>
c001044e:	83 c4 10             	add    esp,0x10
c0010451:	85 c0                	test   eax,eax
c0010453:	75 0c                	jne    c0010461 <CPU::detectFeatures()+0x385>
c0010455:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001045f:	eb 46                	jmp    c00104a7 <CPU::detectFeatures()+0x3cb>
c0010461:	57                   	push   edi
c0010462:	57                   	push   edi
c0010463:	68 2b 1b 02 c0       	push   0xc0021b2b
c0010468:	55                   	push   ebp
c0010469:	e8 e2 02 ff ff       	call   c0000750 <strcmp>
c001046e:	83 c4 10             	add    esp,0x10
c0010471:	85 c0                	test   eax,eax
c0010473:	74 e0                	je     c0010455 <CPU::detectFeatures()+0x379>
c0010475:	56                   	push   esi
c0010476:	56                   	push   esi
c0010477:	68 38 1b 02 c0       	push   0xc0021b38
c001047c:	55                   	push   ebp
c001047d:	e8 ce 02 ff ff       	call   c0000750 <strcmp>
c0010482:	83 c4 10             	add    esp,0x10
c0010485:	85 c0                	test   eax,eax
c0010487:	74 cc                	je     c0010455 <CPU::detectFeatures()+0x379>
c0010489:	51                   	push   ecx
c001048a:	51                   	push   ecx
c001048b:	68 45 1b 02 c0       	push   0xc0021b45
c0010490:	55                   	push   ebp
c0010491:	e8 ba 02 ff ff       	call   c0000750 <strcmp>
c0010496:	83 c4 10             	add    esp,0x10
c0010499:	85 c0                	test   eax,eax
c001049b:	74 b8                	je     c0010455 <CPU::detectFeatures()+0x379>
c001049d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00104a7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00104ac:	0f 86 be 00 00 00    	jbe    c0010570 <CPU::detectFeatures()+0x494>
c00104b2:	83 ec 0c             	sub    esp,0xc
c00104b5:	68 80 00 00 00       	push   0x80
c00104ba:	e8 31 fb ff ff       	call   c000fff0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00104bf:	83 e0 01             	and    eax,0x1
c00104c2:	c1 e0 06             	shl    eax,0x6
c00104c5:	89 c2                	mov    edx,eax
c00104c7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104cd:	83 e0 bf             	and    eax,0xffffffbf
c00104d0:	09 d0                	or     eax,edx
c00104d2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104d8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00104df:	e8 0c fb ff ff       	call   c000fff0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00104e4:	83 e0 01             	and    eax,0x1
c00104e7:	c1 e0 04             	shl    eax,0x4
c00104ea:	89 c2                	mov    edx,eax
c00104ec:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00104f2:	83 e0 ef             	and    eax,0xffffffef
c00104f5:	09 d0                	or     eax,edx
c00104f7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00104fd:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010504:	e8 e7 fa ff ff       	call   c000fff0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010509:	89 c2                	mov    edx,eax
c001050b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010511:	c1 e2 07             	shl    edx,0x7
c0010514:	83 e0 7f             	and    eax,0x7f
c0010517:	09 d0                	or     eax,edx
c0010519:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001051f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010526:	e8 f3 fa ff ff       	call   c001001e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001052b:	83 e0 01             	and    eax,0x1
c001052e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010535:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001053b:	83 e0 f7             	and    eax,0xfffffff7
c001053e:	09 d0                	or     eax,edx
c0010540:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010546:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001054d:	e8 cc fa ff ff       	call   c001001e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010552:	83 c4 10             	add    esp,0x10
c0010555:	83 e0 01             	and    eax,0x1
c0010558:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001055f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010565:	83 e0 fb             	and    eax,0xfffffffb
c0010568:	09 d0                	or     eax,edx
c001056a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010570:	83 ec 0c             	sub    esp,0xc
c0010573:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010577:	50                   	push   eax
c0010578:	8d 44 24 28          	lea    eax,[esp+0x28]
c001057c:	50                   	push   eax
c001057d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010581:	57                   	push   edi
c0010582:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010586:	56                   	push   esi
c0010587:	6a 01                	push   0x1
c0010589:	e8 82 f9 ff ff       	call   c000ff10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001058e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010592:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010598:	89 c1                	mov    ecx,eax
c001059a:	83 e2 f0             	and    edx,0xfffffff0
c001059d:	83 e1 0f             	and    ecx,0xf
c00105a0:	09 ca                	or     edx,ecx
c00105a2:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00105a8:	89 c2                	mov    edx,eax
c00105aa:	c1 ea 04             	shr    edx,0x4
c00105ad:	83 e2 0f             	and    edx,0xf
c00105b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00105b4:	89 d1                	mov    ecx,edx
c00105b6:	83 c4 20             	add    esp,0x20
c00105b9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00105bf:	c1 e1 06             	shl    ecx,0x6
c00105c2:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00105c8:	09 ca                	or     edx,ecx
c00105ca:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00105d1:	89 c2                	mov    edx,eax
c00105d3:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00105d9:	c1 ea 08             	shr    edx,0x8
c00105dc:	83 e1 3f             	and    ecx,0x3f
c00105df:	83 e2 0f             	and    edx,0xf
c00105e2:	89 d5                	mov    ebp,edx
c00105e4:	83 e5 03             	and    ebp,0x3
c00105e7:	c1 e5 06             	shl    ebp,0x6
c00105ea:	09 e9                	or     ecx,ebp
c00105ec:	89 d5                	mov    ebp,edx
c00105ee:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00105f4:	c1 ed 02             	shr    ebp,0x2
c00105f7:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00105fd:	83 e1 c0             	and    ecx,0xffffffc0
c0010600:	09 e9                	or     ecx,ebp
c0010602:	89 c5                	mov    ebp,eax
c0010604:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001060a:	c1 ed 08             	shr    ebp,0x8
c001060d:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010613:	83 e5 30             	and    ebp,0x30
c0010616:	83 e1 cf             	and    ecx,0xffffffcf
c0010619:	09 e9                	or     ecx,ebp
c001061b:	83 fa 06             	cmp    edx,0x6
c001061e:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010624:	74 05                	je     c001062b <CPU::detectFeatures()+0x54f>
c0010626:	83 fa 0f             	cmp    edx,0xf
c0010629:	75 64                	jne    c001068f <CPU::detectFeatures()+0x5b3>
c001062b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010631:	89 c1                	mov    ecx,eax
c0010633:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010639:	c1 e9 10             	shr    ecx,0x10
c001063c:	c1 e1 04             	shl    ecx,0x4
c001063f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010643:	0f b6 c9             	movzx  ecx,cl
c0010646:	c1 e1 06             	shl    ecx,0x6
c0010649:	09 e9                	or     ecx,ebp
c001064b:	83 fa 0f             	cmp    edx,0xf
c001064e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010655:	75 38                	jne    c001068f <CPU::detectFeatures()+0x5b3>
c0010657:	c1 e8 14             	shr    eax,0x14
c001065a:	83 c0 0f             	add    eax,0xf
c001065d:	0f b6 c0             	movzx  eax,al
c0010660:	89 c2                	mov    edx,eax
c0010662:	c1 e8 02             	shr    eax,0x2
c0010665:	83 e2 03             	and    edx,0x3
c0010668:	89 d1                	mov    ecx,edx
c001066a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010670:	c1 e1 06             	shl    ecx,0x6
c0010673:	83 e2 3f             	and    edx,0x3f
c0010676:	09 ca                	or     edx,ecx
c0010678:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001067e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010684:	83 e2 c0             	and    edx,0xffffffc0
c0010687:	09 d0                	or     eax,edx
c0010689:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001068f:	83 ec 0c             	sub    esp,0xc
c0010692:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010698:	83 c8 07             	or     eax,0x7
c001069b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106a1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106a5:	50                   	push   eax
c00106a6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00106aa:	55                   	push   ebp
c00106ab:	57                   	push   edi
c00106ac:	56                   	push   esi
c00106ad:	68 00 00 00 80       	push   0x80000000
c00106b2:	e8 59 f8 ff ff       	call   c000ff10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106b7:	83 c4 20             	add    esp,0x20
c00106ba:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00106c2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00106c6:	76 1e                	jbe    c00106e6 <CPU::detectFeatures()+0x60a>
c00106c8:	83 ec 0c             	sub    esp,0xc
c00106cb:	50                   	push   eax
c00106cc:	55                   	push   ebp
c00106cd:	57                   	push   edi
c00106ce:	56                   	push   esi
c00106cf:	68 01 00 00 80       	push   0x80000001
c00106d4:	e8 37 f8 ff ff       	call   c000ff10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106d9:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00106e3:	83 c4 20             	add    esp,0x20
c00106e6:	52                   	push   edx
c00106e7:	52                   	push   edx
c00106e8:	68 51 1b 02 c0       	push   0xc0021b51
c00106ed:	53                   	push   ebx
c00106ee:	e8 99 c0 ff ff       	call   c000c78c <Device::setName(char const*)>
c00106f3:	83 c4 10             	add    esp,0x10
c00106f6:	eb 69                	jmp    c0010761 <CPU::detectFeatures()+0x685>
c00106f8:	50                   	push   eax
c00106f9:	50                   	push   eax
c00106fa:	68 b6 1a 02 c0       	push   0xc0021ab6
c00106ff:	55                   	push   ebp
c0010700:	e8 3b ff fe ff       	call   c0000640 <strcpy>
c0010705:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001070f:	e8 af fa fe ff       	call   c00001c3 <is486>
c0010714:	83 c4 10             	add    esp,0x10
c0010717:	85 c0                	test   eax,eax
c0010719:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001071f:	74 1f                	je     c0010740 <CPU::detectFeatures()+0x664>
c0010721:	83 c8 07             	or     eax,0x7
c0010724:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001072a:	0f 20 c0             	mov    eax,cr0
c001072d:	83 e0 14             	and    eax,0x14
c0010730:	83 f8 04             	cmp    eax,0x4
c0010733:	75 10                	jne    c0010745 <CPU::detectFeatures()+0x669>
c0010735:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001073b:	83 e0 fd             	and    eax,0xfffffffd
c001073e:	eb 1b                	jmp    c001075b <CPU::detectFeatures()+0x67f>
c0010740:	83 e0 f8             	and    eax,0xfffffff8
c0010743:	eb df                	jmp    c0010724 <CPU::detectFeatures()+0x648>
c0010745:	e8 54 fa fe ff       	call   c000019e <hasLegacyFPU>
c001074a:	83 e0 01             	and    eax,0x1
c001074d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010750:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010756:	83 e0 fd             	and    eax,0xfffffffd
c0010759:	09 d0                	or     eax,edx
c001075b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010761:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010768:	74 17                	je     c0010781 <CPU::detectFeatures()+0x6a5>
c001076a:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010770:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010776:	83 c8 10             	or     eax,0x10
c0010779:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001077f:	eb 20                	jmp    c00107a1 <CPU::detectFeatures()+0x6c5>
c0010781:	e8 18 fa fe ff       	call   c000019e <hasLegacyFPU>
c0010786:	83 e0 01             	and    eax,0x1
c0010789:	8d 14 00             	lea    edx,[eax+eax*1]
c001078c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010792:	83 e0 fd             	and    eax,0xfffffffd
c0010795:	09 d0                	or     eax,edx
c0010797:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001079d:	a8 02                	test   al,0x2
c001079f:	75 c9                	jne    c001076a <CPU::detectFeatures()+0x68e>
c00107a1:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00107a8:	83 c4 2c             	add    esp,0x2c
c00107ab:	5b                   	pop    ebx
c00107ac:	5e                   	pop    esi
c00107ad:	5f                   	pop    edi
c00107ae:	5d                   	pop    ebp
c00107af:	c3                   	ret    

c00107b0 <CPU::setupSMEP()>:
c00107b0:	0f 20 e0             	mov    eax,cr4
c00107b3:	0d 00 00 10 00       	or     eax,0x100000
c00107b8:	0f 22 e0             	mov    cr4,eax
c00107bb:	c3                   	ret    

c00107bc <CPU::setupUMIP()>:
c00107bc:	0f 20 e0             	mov    eax,cr4
c00107bf:	80 cc 08             	or     ah,0x8
c00107c2:	0f 22 e0             	mov    cr4,eax
c00107c5:	c3                   	ret    

c00107c6 <CPU::setupTSC()>:
c00107c6:	0f 20 e0             	mov    eax,cr4
c00107c9:	83 c8 04             	or     eax,0x4
c00107cc:	0f 22 e0             	mov    cr4,eax
c00107cf:	c3                   	ret    

c00107d0 <CPU::setupLargePages()>:
c00107d0:	0f 20 e0             	mov    eax,cr4
c00107d3:	83 c8 10             	or     eax,0x10
c00107d6:	0f 22 e0             	mov    cr4,eax
c00107d9:	c3                   	ret    

c00107da <CPU::setupPAT()>:
c00107da:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00107df:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00107e6:	74 2c                	je     c0010814 <CPU::setupPAT()+0x3a>
c00107e8:	53                   	push   ebx
c00107e9:	83 ec 10             	sub    esp,0x10
c00107ec:	68 77 02 00 00       	push   0x277
c00107f1:	50                   	push   eax
c00107f2:	e8 c9 68 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00107f7:	83 e2 f8             	and    edx,0xfffffff8
c00107fa:	83 ca 01             	or     edx,0x1
c00107fd:	52                   	push   edx
c00107fe:	50                   	push   eax
c00107ff:	68 77 02 00 00       	push   0x277
c0010804:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001080a:	e8 dd 68 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c001080f:	83 c4 28             	add    esp,0x28
c0010812:	5b                   	pop    ebx
c0010813:	c3                   	ret    
c0010814:	c3                   	ret    
c0010815:	90                   	nop

c0010816 <CPU::setupMTRR()>:
c0010816:	c3                   	ret    
c0010817:	90                   	nop

c0010818 <CPU::setupGlobalPages()>:
c0010818:	0f 20 e0             	mov    eax,cr4
c001081b:	0c 80                	or     al,0x80
c001081d:	0f 22 e0             	mov    cr4,eax
c0010820:	c3                   	ret    
c0010821:	90                   	nop

c0010822 <CPU::allowUsermodeDataAccess()>:
c0010822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010826:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001082d:	74 03                	je     c0010832 <CPU::allowUsermodeDataAccess()+0x10>
c001082f:	0f 01 cb             	stac   
c0010832:	c3                   	ret    
c0010833:	90                   	nop

c0010834 <CPU::prohibitUsermodeDataAccess()>:
c0010834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010838:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001083f:	74 03                	je     c0010844 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010841:	0f 01 ca             	clac   
c0010844:	c3                   	ret    
c0010845:	90                   	nop

c0010846 <CPU::setupSMAP()>:
c0010846:	0f 20 e0             	mov    eax,cr4
c0010849:	0d 00 00 20 00       	or     eax,0x200000
c001084e:	0f 22 e0             	mov    cr4,eax
c0010851:	eb e1                	jmp    c0010834 <CPU::prohibitUsermodeDataAccess()>
c0010853:	90                   	nop

c0010854 <CPU::setupFeatures()>:
c0010854:	53                   	push   ebx
c0010855:	83 ec 08             	sub    esp,0x8
c0010858:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001085c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010863:	74 18                	je     c001087d <CPU::setupFeatures()+0x29>
c0010865:	83 ec 0c             	sub    esp,0xc
c0010868:	68 5d 1b 02 c0       	push   0xc0021b5d
c001086d:	e8 d3 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010872:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010875:	e8 42 ff ff ff       	call   c00107bc <CPU::setupUMIP()>
c001087a:	83 c4 10             	add    esp,0x10
c001087d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010884:	74 18                	je     c001089e <CPU::setupFeatures()+0x4a>
c0010886:	83 ec 0c             	sub    esp,0xc
c0010889:	68 67 1b 02 c0       	push   0xc0021b67
c001088e:	e8 b2 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010893:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010896:	e8 2b ff ff ff       	call   c00107c6 <CPU::setupTSC()>
c001089b:	83 c4 10             	add    esp,0x10
c001089e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00108a5:	74 18                	je     c00108bf <CPU::setupFeatures()+0x6b>
c00108a7:	83 ec 0c             	sub    esp,0xc
c00108aa:	68 70 1b 02 c0       	push   0xc0021b70
c00108af:	e8 91 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108b7:	e8 14 ff ff ff       	call   c00107d0 <CPU::setupLargePages()>
c00108bc:	83 c4 10             	add    esp,0x10
c00108bf:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00108c6:	74 18                	je     c00108e0 <CPU::setupFeatures()+0x8c>
c00108c8:	83 ec 0c             	sub    esp,0xc
c00108cb:	68 79 1b 02 c0       	push   0xc0021b79
c00108d0:	e8 70 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108d8:	e8 3b ff ff ff       	call   c0010818 <CPU::setupGlobalPages()>
c00108dd:	83 c4 10             	add    esp,0x10
c00108e0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00108e7:	74 18                	je     c0010901 <CPU::setupFeatures()+0xad>
c00108e9:	83 ec 0c             	sub    esp,0xc
c00108ec:	68 8b 1b 02 c0       	push   0xc0021b8b
c00108f1:	e8 4f a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108f9:	e8 dc fe ff ff       	call   c00107da <CPU::setupPAT()>
c00108fe:	83 c4 10             	add    esp,0x10
c0010901:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010908:	74 11                	je     c001091b <CPU::setupFeatures()+0xc7>
c001090a:	c7 44 24 10 94 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021b94
c0010912:	83 c4 08             	add    esp,0x8
c0010915:	5b                   	pop    ebx
c0010916:	e9 2a a0 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c001091b:	83 c4 08             	add    esp,0x8
c001091e:	5b                   	pop    ebx
c001091f:	c3                   	ret    

c0010920 <CPU::open(int, int, void*)>:
c0010920:	55                   	push   ebp
c0010921:	57                   	push   edi
c0010922:	56                   	push   esi
c0010923:	53                   	push   ebx
c0010924:	83 ec 18             	sub    esp,0x18
c0010927:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001092b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001092f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010933:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010939:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001093f:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010945:	50                   	push   eax
c0010946:	e8 73 6a ff ff       	call   c00073be <GDT::setup()>
c001094b:	83 c4 0c             	add    esp,0xc
c001094e:	6a 00                	push   0x0
c0010950:	68 ef be ad de       	push   0xdeadbeef
c0010955:	55                   	push   ebp
c0010956:	e8 2d 86 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c001095b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001095e:	e8 05 86 ff ff       	call   c0008f68 <TSS::flush()>
c0010963:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010969:	89 04 24             	mov    DWORD PTR [esp],eax
c001096c:	e8 b1 6c ff ff       	call   c0007622 <IDT::setup()>
c0010971:	b8 00 04 00 00       	mov    eax,0x400
c0010976:	0f 23 f8             	mov    db7,eax
c0010979:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010983:	e8 37 74 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010988:	83 c4 10             	add    esp,0x10
c001098b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010991:	85 f6                	test   esi,esi
c0010993:	89 38                	mov    DWORD PTR [eax],edi
c0010995:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001099b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001099e:	74 10                	je     c00109b0 <CPU::open(int, int, void*)+0x90>
c00109a0:	50                   	push   eax
c00109a1:	50                   	push   eax
c00109a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00109a8:	56                   	push   esi
c00109a9:	e8 00 8f ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c00109ae:	eb 0d                	jmp    c00109bd <CPU::open(int, int, void*)+0x9d>
c00109b0:	83 ec 0c             	sub    esp,0xc
c00109b3:	68 9e 1b 02 c0       	push   0xc0021b9e
c00109b8:	e8 50 08 00 00       	call   c001120d <KePanic(char const*)>
c00109bd:	83 c4 10             	add    esp,0x10
c00109c0:	83 ec 0c             	sub    esp,0xc
c00109c3:	68 ac 1b 02 c0       	push   0xc0021bac
c00109c8:	e8 69 01 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c00109cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109d0:	e8 07 f7 ff ff       	call   c00100dc <CPU::detectFeatures()>
c00109d5:	c7 04 24 cf 1b 02 c0 	mov    DWORD PTR [esp],0xc0021bcf
c00109dc:	e8 55 01 00 00       	call   c0010b36 <KeSetBootMessage(char const*)>
c00109e1:	e8 bb 71 00 00       	call   c0017ba1 <HalInitialise()>
c00109e6:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c00109eb:	83 e0 10             	and    eax,0x10
c00109ee:	83 f8 01             	cmp    eax,0x1
c00109f1:	19 c0                	sbb    eax,eax
c00109f3:	83 e0 46             	and    eax,0x46
c00109f6:	83 c0 1e             	add    eax,0x1e
c00109f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00109fc:	e8 28 d6 ff ff       	call   c000e029 <setupTimer(int)>
c0010a01:	83 c4 10             	add    esp,0x10
c0010a04:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010a0a:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010a11:	74 0c                	je     c0010a1f <CPU::open(int, int, void*)+0xff>
c0010a13:	83 ec 0c             	sub    esp,0xc
c0010a16:	53                   	push   ebx
c0010a17:	e8 38 fe ff ff       	call   c0010854 <CPU::setupFeatures()>
c0010a1c:	83 c4 10             	add    esp,0x10
c0010a1f:	83 c4 0c             	add    esp,0xc
c0010a22:	31 c0                	xor    eax,eax
c0010a24:	5b                   	pop    ebx
c0010a25:	5e                   	pop    esi
c0010a26:	5f                   	pop    edi
c0010a27:	5d                   	pop    ebp
c0010a28:	c3                   	ret    

c0010a29 <KeInitialiseAtexit()>:
c0010a29:	83 ec 10             	sub    esp,0x10
c0010a2c:	c7 05 00 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a00,0x0
c0010a36:	68 00 01 00 00       	push   0x100
c0010a3b:	6a 00                	push   0x0
c0010a3d:	68 20 9b 02 c0       	push   0xc0029b20
c0010a42:	e8 a9 fa fe ff       	call   c00004f0 <memset>
c0010a47:	83 c4 1c             	add    esp,0x1c
c0010a4a:	c3                   	ret    

c0010a4b <KeRegisterAtexit(void (*)(void*), void*)>:
c0010a4b:	a1 00 9a 02 c0       	mov    eax,ds:0xc0029a00
c0010a50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010a54:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c0010a5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a5f:	89 14 85 20 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65e0],edx
c0010a66:	40                   	inc    eax
c0010a67:	a3 00 9a 02 c0       	mov    ds:0xc0029a00,eax
c0010a6c:	83 f8 3f             	cmp    eax,0x3f
c0010a6f:	7e 0d                	jle    c0010a7e <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010a71:	c7 44 24 04 10 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c10
c0010a79:	e9 8f 07 00 00       	jmp    c001120d <KePanic(char const*)>
c0010a7e:	c3                   	ret    

c0010a7f <KeExecuteAtexit()>:
c0010a7f:	53                   	push   ebx
c0010a80:	31 db                	xor    ebx,ebx
c0010a82:	83 ec 08             	sub    esp,0x8
c0010a85:	39 1d 00 9a 02 c0    	cmp    DWORD PTR ds:0xc0029a00,ebx
c0010a8b:	7e 28                	jle    c0010ab5 <KeExecuteAtexit()+0x36>
c0010a8d:	8b 04 9d 20 9b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd64e0]
c0010a94:	85 c0                	test   eax,eax
c0010a96:	74 1a                	je     c0010ab2 <KeExecuteAtexit()+0x33>
c0010a98:	83 ec 0c             	sub    esp,0xc
c0010a9b:	ff 34 9d 20 9a 02 c0 	push   DWORD PTR [ebx*4-0x3ffd65e0]
c0010aa2:	ff d0                	call   eax
c0010aa4:	c7 04 9d 20 9b 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd64e0],0x0
c0010aaf:	83 c4 10             	add    esp,0x10
c0010ab2:	43                   	inc    ebx
c0010ab3:	eb d0                	jmp    c0010a85 <KeExecuteAtexit()+0x6>
c0010ab5:	83 c4 08             	add    esp,0x8
c0010ab8:	5b                   	pop    ebx
c0010ab9:	c3                   	ret    

c0010aba <KeDisplaySplashScreen()>:
c0010aba:	55                   	push   ebp
c0010abb:	bd 05 00 00 00       	mov    ebp,0x5
c0010ac0:	57                   	push   edi
c0010ac1:	bf 0a 00 00 00       	mov    edi,0xa
c0010ac6:	56                   	push   esi
c0010ac7:	31 f6                	xor    esi,esi
c0010ac9:	53                   	push   ebx
c0010aca:	31 db                	xor    ebx,ebx
c0010acc:	83 ec 0c             	sub    esp,0xc
c0010acf:	0f b6 96 e0 2f 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd020]
c0010ad6:	89 d0                	mov    eax,edx
c0010ad8:	85 d2                	test   edx,edx
c0010ada:	74 52                	je     c0010b2e <KeDisplaySplashScreen()+0x74>
c0010adc:	80 bb 16 30 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcfea],0xdb
c0010ae3:	75 13                	jne    c0010af8 <KeDisplaySplashScreen()+0x3e>
c0010ae5:	0f b6 8b 15 30 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcfeb]
c0010aec:	83 e1 fe             	and    ecx,0xfffffffe
c0010aef:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010af5:	75 01                	jne    c0010af8 <KeDisplaySplashScreen()+0x3e>
c0010af7:	47                   	inc    edi
c0010af8:	83 fa 0d             	cmp    edx,0xd
c0010afb:	74 28                	je     c0010b25 <KeDisplaySplashScreen()+0x6b>
c0010afd:	83 fa 0a             	cmp    edx,0xa
c0010b00:	75 0a                	jne    c0010b0c <KeDisplaySplashScreen()+0x52>
c0010b02:	45                   	inc    ebp
c0010b03:	bf 0a 00 00 00       	mov    edi,0xa
c0010b08:	31 db                	xor    ebx,ebx
c0010b0a:	eb 19                	jmp    c0010b25 <KeDisplaySplashScreen()+0x6b>
c0010b0c:	83 ec 0c             	sub    esp,0xc
c0010b0f:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010b12:	55                   	push   ebp
c0010b13:	0f be c0             	movsx  eax,al
c0010b16:	52                   	push   edx
c0010b17:	43                   	inc    ebx
c0010b18:	6a 00                	push   0x0
c0010b1a:	6a 0e                	push   0xe
c0010b1c:	50                   	push   eax
c0010b1d:	e8 fe 7c 00 00       	call   c0018820 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010b22:	83 c4 20             	add    esp,0x20
c0010b25:	46                   	inc    esi
c0010b26:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010b2c:	75 a1                	jne    c0010acf <KeDisplaySplashScreen()+0x15>
c0010b2e:	83 c4 0c             	add    esp,0xc
c0010b31:	5b                   	pop    ebx
c0010b32:	5e                   	pop    esi
c0010b33:	5f                   	pop    edi
c0010b34:	5d                   	pop    ebp
c0010b35:	c3                   	ret    

c0010b36 <KeSetBootMessage(char const*)>:
c0010b36:	57                   	push   edi
c0010b37:	56                   	push   esi
c0010b38:	53                   	push   ebx
c0010b39:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010b3f:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010b46:	68 9e 00 00 00       	push   0x9e
c0010b4b:	6a 00                	push   0x0
c0010b4d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010b51:	56                   	push   esi
c0010b52:	e8 99 f9 fe ff       	call   c00004f0 <memset>
c0010b57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b5a:	e8 11 fa fe ff       	call   c0000570 <strlen>
c0010b5f:	ba 50 00 00 00       	mov    edx,0x50
c0010b64:	83 c4 10             	add    esp,0x10
c0010b67:	29 c2                	sub    edx,eax
c0010b69:	31 c9                	xor    ecx,ecx
c0010b6b:	83 e2 fe             	and    edx,0xfffffffe
c0010b6e:	01 f2                	add    edx,esi
c0010b70:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010b75:	84 c0                	test   al,al
c0010b77:	74 0a                	je     c0010b83 <KeSetBootMessage(char const*)+0x4d>
c0010b79:	80 cc 0f             	or     ah,0xf
c0010b7c:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010b80:	41                   	inc    ecx
c0010b81:	eb ed                	jmp    c0010b70 <KeSetBootMessage(char const*)+0x3a>
c0010b83:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010b88:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010b8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b8f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010b95:	5b                   	pop    ebx
c0010b96:	5e                   	pop    esi
c0010b97:	5f                   	pop    edi
c0010b98:	c3                   	ret    
c0010b99:	66 90                	xchg   ax,ax
c0010b9b:	90                   	nop

c0010b9c <Krnl::handlePowerButton()>:
c0010b9c:	83 ec 0c             	sub    esp,0xc
c0010b9f:	e8 c4 06 00 00       	call   c0011268 <KeHandlePowerButton()>
c0010ba4:	90                   	nop
c0010ba5:	83 c4 0c             	add    esp,0xc
c0010ba8:	c3                   	ret    
c0010ba9:	8d 76 00             	lea    esi,[esi+0x0]

c0010bac <Krnl::handleSleepButton()>:
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	e8 e9 06 00 00       	call   c001129d <KeHandleSleepButton()>
c0010bb4:	90                   	nop
c0010bb5:	83 c4 0c             	add    esp,0xc
c0010bb8:	c3                   	ret    
c0010bb9:	90                   	nop

c0010bba <EnvVarContainer::getEnv(char const*)>:
c0010bba:	57                   	push   edi
c0010bbb:	56                   	push   esi
c0010bbc:	53                   	push   ebx
c0010bbd:	31 db                	xor    ebx,ebx
c0010bbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010bc3:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010bc5:	7e 2b                	jle    c0010bf2 <EnvVarContainer::getEnv(char const*)+0x38>
c0010bc7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010bce:	50                   	push   eax
c0010bcf:	50                   	push   eax
c0010bd0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010bd3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010bd6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010bda:	e8 71 fb fe ff       	call   c0000750 <strcmp>
c0010bdf:	83 c4 10             	add    esp,0x10
c0010be2:	85 c0                	test   eax,eax
c0010be4:	75 09                	jne    c0010bef <EnvVarContainer::getEnv(char const*)+0x35>
c0010be6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010be9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010bed:	eb 05                	jmp    c0010bf4 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010bef:	43                   	inc    ebx
c0010bf0:	eb d1                	jmp    c0010bc3 <EnvVarContainer::getEnv(char const*)+0x9>
c0010bf2:	31 c0                	xor    eax,eax
c0010bf4:	5b                   	pop    ebx
c0010bf5:	5e                   	pop    esi
c0010bf6:	5f                   	pop    edi
c0010bf7:	c3                   	ret    

c0010bf8 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010bf8:	55                   	push   ebp
c0010bf9:	57                   	push   edi
c0010bfa:	56                   	push   esi
c0010bfb:	53                   	push   ebx
c0010bfc:	83 ec 28             	sub    esp,0x28
c0010bff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010c03:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010c07:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010c0b:	56                   	push   esi
c0010c0c:	e8 5f f9 fe ff       	call   c0000570 <strlen>
c0010c11:	40                   	inc    eax
c0010c12:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c15:	e8 9c 6e ff ff       	call   c0007ab6 <malloc>
c0010c1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010c21:	e8 4a f9 fe ff       	call   c0000570 <strlen>
c0010c26:	40                   	inc    eax
c0010c27:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c2a:	e8 87 6e ff ff       	call   c0007ab6 <malloc>
c0010c2f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c36:	e8 35 f9 fe ff       	call   c0000570 <strlen>
c0010c3b:	83 c4 0c             	add    esp,0xc
c0010c3e:	40                   	inc    eax
c0010c3f:	50                   	push   eax
c0010c40:	6a 00                	push   0x0
c0010c42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010c46:	e8 a5 f8 fe ff       	call   c00004f0 <memset>
c0010c4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c4e:	e8 1d f9 fe ff       	call   c0000570 <strlen>
c0010c53:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c57:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c5f:	89 de                	mov    esi,ebx
c0010c61:	e8 0a f9 fe ff       	call   c0000570 <strlen>
c0010c66:	83 c4 0c             	add    esp,0xc
c0010c69:	40                   	inc    eax
c0010c6a:	50                   	push   eax
c0010c6b:	6a 00                	push   0x0
c0010c6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c71:	e8 7a f8 fe ff       	call   c00004f0 <memset>
c0010c76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c79:	e8 f2 f8 fe ff       	call   c0000570 <strlen>
c0010c7e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c82:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c87:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010c8a:	40                   	inc    eax
c0010c8b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010c8e:	c1 e0 03             	shl    eax,0x3
c0010c91:	5a                   	pop    edx
c0010c92:	59                   	pop    ecx
c0010c93:	50                   	push   eax
c0010c94:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010c97:	e8 06 6e ff ff       	call   c0007aa2 <realloc>
c0010c9c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010ca0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010ca3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010ca6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010caa:	b9 08 00 00 00       	mov    ecx,0x8
c0010caf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cb1:	83 c4 2c             	add    esp,0x2c
c0010cb4:	5b                   	pop    ebx
c0010cb5:	5e                   	pop    esi
c0010cb6:	5f                   	pop    edi
c0010cb7:	5d                   	pop    ebp
c0010cb8:	c3                   	ret    
c0010cb9:	90                   	nop

c0010cba <EnvVarContainer::deleteEnv(char const*)>:
c0010cba:	c3                   	ret    
c0010cbb:	90                   	nop

c0010cbc <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010cbc:	55                   	push   ebp
c0010cbd:	57                   	push   edi
c0010cbe:	56                   	push   esi
c0010cbf:	53                   	push   ebx
c0010cc0:	81 ec 38 01 00 00    	sub    esp,0x138
c0010cc6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010ccd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010cd4:	68 14 01 00 00       	push   0x114
c0010cd9:	e8 d8 6d ff ff       	call   c0007ab6 <malloc>
c0010cde:	83 c4 0c             	add    esp,0xc
c0010ce1:	89 c3                	mov    ebx,eax
c0010ce3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010ce6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010ced:	50                   	push   eax
c0010cee:	e8 07 aa ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c0010cf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cf6:	e8 7f ad ff ff       	call   c000ba7a <File::exists()>
c0010cfb:	83 c4 10             	add    esp,0x10
c0010cfe:	84 c0                	test   al,al
c0010d00:	75 31                	jne    c0010d33 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010d02:	50                   	push   eax
c0010d03:	50                   	push   eax
c0010d04:	6a 12                	push   0x12
c0010d06:	53                   	push   ebx
c0010d07:	e8 aa aa ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c0010d0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010d11:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d14:	e8 57 f8 fe ff       	call   c0000570 <strlen>
c0010d19:	5a                   	pop    edx
c0010d1a:	31 d2                	xor    edx,edx
c0010d1c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010d20:	51                   	push   ecx
c0010d21:	56                   	push   esi
c0010d22:	52                   	push   edx
c0010d23:	50                   	push   eax
c0010d24:	53                   	push   ebx
c0010d25:	ff d7                	call   edi
c0010d27:	83 c4 14             	add    esp,0x14
c0010d2a:	53                   	push   ebx
c0010d2b:	e8 e4 aa ff ff       	call   c000b814 <File::close()>
c0010d30:	83 c4 10             	add    esp,0x10
c0010d33:	56                   	push   esi
c0010d34:	31 f6                	xor    esi,esi
c0010d36:	68 00 01 00 00       	push   0x100
c0010d3b:	6a 00                	push   0x0
c0010d3d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010d41:	50                   	push   eax
c0010d42:	e8 a9 f7 fe ff       	call   c00004f0 <memset>
c0010d47:	5f                   	pop    edi
c0010d48:	58                   	pop    eax
c0010d49:	6a 01                	push   0x1
c0010d4b:	53                   	push   ebx
c0010d4c:	e8 65 aa ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c0010d51:	83 c4 10             	add    esp,0x10
c0010d54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010d5c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010d64:	83 ec 0c             	sub    esp,0xc
c0010d67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d69:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010d6d:	51                   	push   ecx
c0010d6e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010d72:	52                   	push   edx
c0010d73:	6a 00                	push   0x0
c0010d75:	6a 01                	push   0x1
c0010d77:	53                   	push   ebx
c0010d78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010d7b:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010d80:	83 c4 20             	add    esp,0x20
c0010d83:	89 c2                	mov    edx,eax
c0010d85:	85 c0                	test   eax,eax
c0010d87:	0f 84 36 01 00 00    	je     c0010ec3 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010d8d:	83 f8 0d             	cmp    eax,0xd
c0010d90:	0f 84 22 01 00 00    	je     c0010eb8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010d96:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010d9b:	0f 84 f0 00 00 00    	je     c0010e91 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010da1:	83 f8 0a             	cmp    eax,0xa
c0010da4:	74 13                	je     c0010db9 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010da6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010dab:	74 0c                	je     c0010db9 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010dad:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010db3:	0f 8e f6 00 00 00    	jle    c0010eaf <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010db9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dbd:	83 ec 0c             	sub    esp,0xc
c0010dc0:	8d 78 01             	lea    edi,[eax+0x1]
c0010dc3:	57                   	push   edi
c0010dc4:	e8 ed 6c ff ff       	call   c0007ab6 <malloc>
c0010dc9:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010dcd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010dd1:	8d 56 04             	lea    edx,[esi+0x4]
c0010dd4:	89 14 24             	mov    DWORD PTR [esp],edx
c0010dd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010ddb:	e8 d6 6c ff ff       	call   c0007ab6 <malloc>
c0010de0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010de4:	83 c4 0c             	add    esp,0xc
c0010de7:	57                   	push   edi
c0010de8:	6a 00                	push   0x0
c0010dea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010dee:	e8 fd f6 fe ff       	call   c00004f0 <memset>
c0010df3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010df7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010dfb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010dff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e01:	83 c4 0c             	add    esp,0xc
c0010e04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010e08:	52                   	push   edx
c0010e09:	6a 00                	push   0x0
c0010e0b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e0f:	e8 dc f6 fe ff       	call   c00004f0 <memset>
c0010e14:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e18:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010e1c:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e1f:	e8 4c f7 fe ff       	call   c0000570 <strlen>
c0010e24:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010e28:	89 c1                	mov    ecx,eax
c0010e2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e2c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e2f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010e32:	40                   	inc    eax
c0010e33:	83 c4 10             	add    esp,0x10
c0010e36:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010e39:	85 d2                	test   edx,edx
c0010e3b:	75 0c                	jne    c0010e49 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010e3d:	83 ec 0c             	sub    esp,0xc
c0010e40:	6a 08                	push   0x8
c0010e42:	e8 6f 6c ff ff       	call   c0007ab6 <malloc>
c0010e47:	eb 0c                	jmp    c0010e55 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010e49:	c1 e0 03             	shl    eax,0x3
c0010e4c:	51                   	push   ecx
c0010e4d:	51                   	push   ecx
c0010e4e:	50                   	push   eax
c0010e4f:	52                   	push   edx
c0010e50:	e8 4d 6c ff ff       	call   c0007aa2 <realloc>
c0010e55:	83 c4 10             	add    esp,0x10
c0010e58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010e5b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010e5e:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010e61:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010e65:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010e69:	b9 08 00 00 00       	mov    ecx,0x8
c0010e6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e70:	31 f6                	xor    esi,esi
c0010e72:	50                   	push   eax
c0010e73:	68 00 01 00 00       	push   0x100
c0010e78:	6a 00                	push   0x0
c0010e7a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010e7e:	50                   	push   eax
c0010e7f:	e8 6c f6 fe ff       	call   c00004f0 <memset>
c0010e84:	83 c4 10             	add    esp,0x10
c0010e87:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e8f:	eb 27                	jmp    c0010eb8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e91:	83 f8 3d             	cmp    eax,0x3d
c0010e94:	74 1e                	je     c0010eb4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010e96:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e9c:	7f 07                	jg     c0010ea5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010e9e:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0010ea2:	46                   	inc    esi
c0010ea3:	eb 13                	jmp    c0010eb8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010ea5:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010ead:	eb 09                	jmp    c0010eb8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010eaf:	83 f8 3d             	cmp    eax,0x3d
c0010eb2:	75 ea                	jne    c0010e9e <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010eb4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010eb8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010ebd:	0f 85 99 fe ff ff    	jne    c0010d5c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010ec3:	83 ec 0c             	sub    esp,0xc
c0010ec6:	53                   	push   ebx
c0010ec7:	e8 48 a9 ff ff       	call   c000b814 <File::close()>
c0010ecc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ece:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ed1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ed4:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010eda:	5b                   	pop    ebx
c0010edb:	5e                   	pop    esi
c0010edc:	5f                   	pop    edi
c0010edd:	5d                   	pop    ebp
c0010ede:	c3                   	ret    
c0010edf:	90                   	nop

c0010ee0 <EnvVarContainer::__loadSystem()>:
c0010ee0:	83 ec 10             	sub    esp,0x10
c0010ee3:	68 40 31 02 c0       	push   0xc0023140
c0010ee8:	68 29 1c 02 c0       	push   0xc0021c29
c0010eed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ef1:	e8 c6 fd ff ff       	call   c0010cbc <EnvVarContainer::loadFrom(char const*, char const*)>
c0010ef6:	83 c4 1c             	add    esp,0x1c
c0010ef9:	c3                   	ret    

c0010efa <EnvVarContainer::__loadUser()>:
c0010efa:	c3                   	ret    
c0010efb:	90                   	nop

c0010efc <EnvVarContainer::EnvVarContainer(Process*)>:
c0010efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010f06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f1c:	90                   	nop
c0010f1d:	c3                   	ret    

c0010f1e <EnvVarContainer::~EnvVarContainer()>:
c0010f1e:	83 ec 0c             	sub    esp,0xc
c0010f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f28:	85 c0                	test   eax,eax
c0010f2a:	74 1d                	je     c0010f49 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f30:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f32:	85 c0                	test   eax,eax
c0010f34:	74 13                	je     c0010f49 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f3d:	83 ec 0c             	sub    esp,0xc
c0010f40:	50                   	push   eax
c0010f41:	e8 80 6b ff ff       	call   c0007ac6 <free>
c0010f46:	83 c4 10             	add    esp,0x10
c0010f49:	90                   	nop
c0010f4a:	83 c4 0c             	add    esp,0xc
c0010f4d:	c3                   	ret    

c0010f4e <KeGetEnv(Process*, char const*)>:
c0010f4e:	53                   	push   ebx
c0010f4f:	83 ec 08             	sub    esp,0x8
c0010f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f56:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f5a:	39 05 90 a4 02 c0    	cmp    DWORD PTR ds:0xc002a490,eax
c0010f60:	74 04                	je     c0010f66 <KeGetEnv(Process*, char const*)+0x18>
c0010f62:	85 c0                	test   eax,eax
c0010f64:	75 0b                	jne    c0010f71 <KeGetEnv(Process*, char const*)+0x23>
c0010f66:	a1 20 9c 02 c0       	mov    eax,ds:0xc0029c20
c0010f6b:	85 c0                	test   eax,eax
c0010f6d:	75 19                	jne    c0010f88 <KeGetEnv(Process*, char const*)+0x3a>
c0010f6f:	eb 27                	jmp    c0010f98 <KeGetEnv(Process*, char const*)+0x4a>
c0010f71:	52                   	push   edx
c0010f72:	52                   	push   edx
c0010f73:	53                   	push   ebx
c0010f74:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010f7a:	e8 3b fc ff ff       	call   c0010bba <EnvVarContainer::getEnv(char const*)>
c0010f7f:	83 c4 10             	add    esp,0x10
c0010f82:	85 c0                	test   eax,eax
c0010f84:	75 28                	jne    c0010fae <KeGetEnv(Process*, char const*)+0x60>
c0010f86:	eb de                	jmp    c0010f66 <KeGetEnv(Process*, char const*)+0x18>
c0010f88:	52                   	push   edx
c0010f89:	52                   	push   edx
c0010f8a:	53                   	push   ebx
c0010f8b:	50                   	push   eax
c0010f8c:	e8 29 fc ff ff       	call   c0010bba <EnvVarContainer::getEnv(char const*)>
c0010f91:	83 c4 10             	add    esp,0x10
c0010f94:	85 c0                	test   eax,eax
c0010f96:	75 16                	jne    c0010fae <KeGetEnv(Process*, char const*)+0x60>
c0010f98:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010f9c:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c0010fa1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010fa5:	83 c4 08             	add    esp,0x8
c0010fa8:	5b                   	pop    ebx
c0010fa9:	e9 0c fc ff ff       	jmp    c0010bba <EnvVarContainer::getEnv(char const*)>
c0010fae:	83 c4 08             	add    esp,0x8
c0010fb1:	5b                   	pop    ebx
c0010fb2:	c3                   	ret    

c0010fb3 <KeSetEnvSystem(char const*, char const*)>:
c0010fb3:	83 ec 10             	sub    esp,0x10
c0010fb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fbe:	ff 35 24 9c 02 c0    	push   DWORD PTR ds:0xc0029c24
c0010fc4:	e8 2f fc ff ff       	call   c0010bf8 <EnvVarContainer::setEnv(char const*, char const*)>
c0010fc9:	83 c4 1c             	add    esp,0x1c
c0010fcc:	c3                   	ret    

c0010fcd <KeSetEnvUser(char const*, char const*)>:
c0010fcd:	a1 20 9c 02 c0       	mov    eax,ds:0xc0029c20
c0010fd2:	85 c0                	test   eax,eax
c0010fd4:	74 15                	je     c0010feb <KeSetEnvUser(char const*, char const*)+0x1e>
c0010fd6:	83 ec 10             	sub    esp,0x10
c0010fd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fdd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fe1:	50                   	push   eax
c0010fe2:	e8 11 fc ff ff       	call   c0010bf8 <EnvVarContainer::setEnv(char const*, char const*)>
c0010fe7:	83 c4 1c             	add    esp,0x1c
c0010fea:	c3                   	ret    
c0010feb:	c3                   	ret    

c0010fec <KeSetEnvProcess(Process*, char const*, char const*)>:
c0010fec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ff0:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010ff6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ffa:	e9 f9 fb ff ff       	jmp    c0010bf8 <EnvVarContainer::setEnv(char const*, char const*)>

c0010fff <KeDeleteEnvSystem(char const*)>:
c0010fff:	c3                   	ret    

c0011000 <KeDeleteEnvUser(char const*)>:
c0011000:	c3                   	ret    

c0011001 <KeDeleteEnvProcess(Process*, char const*)>:
c0011001:	c3                   	ret    

c0011002 <KeNewProcessEnv(Process*)>:
c0011002:	83 ec 28             	sub    esp,0x28
c0011005:	6a 0c                	push   0xc
c0011007:	e8 aa 6a ff ff       	call   c0007ab6 <malloc>
c001100c:	5a                   	pop    edx
c001100d:	59                   	pop    ecx
c001100e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011012:	50                   	push   eax
c0011013:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011017:	e8 e0 fe ff ff       	call   c0010efc <EnvVarContainer::EnvVarContainer(Process*)>
c001101c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011020:	83 c4 2c             	add    esp,0x2c
c0011023:	c3                   	ret    

c0011024 <KeCopyProcessEnv(Process*, Process*)>:
c0011024:	57                   	push   edi
c0011025:	56                   	push   esi
c0011026:	53                   	push   ebx
c0011027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001102b:	83 ec 0c             	sub    esp,0xc
c001102e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011034:	6a 0c                	push   0xc
c0011036:	e8 7b 6a ff ff       	call   c0007ab6 <malloc>
c001103b:	89 c3                	mov    ebx,eax
c001103d:	58                   	pop    eax
c001103e:	5a                   	pop    edx
c001103f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011043:	53                   	push   ebx
c0011044:	e8 b3 fe ff ff       	call   c0010efc <EnvVarContainer::EnvVarContainer(Process*)>
c0011049:	8b 07                	mov    eax,DWORD PTR [edi]
c001104b:	89 03                	mov    DWORD PTR [ebx],eax
c001104d:	c1 e0 03             	shl    eax,0x3
c0011050:	89 04 24             	mov    DWORD PTR [esp],eax
c0011053:	e8 5e 6a ff ff       	call   c0007ab6 <malloc>
c0011058:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001105b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001105d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011060:	c1 e1 03             	shl    ecx,0x3
c0011063:	89 c7                	mov    edi,eax
c0011065:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011067:	83 c4 10             	add    esp,0x10
c001106a:	89 d8                	mov    eax,ebx
c001106c:	5b                   	pop    ebx
c001106d:	5e                   	pop    esi
c001106e:	5f                   	pop    edi
c001106f:	c3                   	ret    

c0011070 <KeLoadSystemEnv()>:
c0011070:	53                   	push   ebx
c0011071:	83 ec 14             	sub    esp,0x14
c0011074:	6a 0c                	push   0xc
c0011076:	e8 3b 6a ff ff       	call   c0007ab6 <malloc>
c001107b:	89 c3                	mov    ebx,eax
c001107d:	58                   	pop    eax
c001107e:	5a                   	pop    edx
c001107f:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0011085:	53                   	push   ebx
c0011086:	e8 71 fe ff ff       	call   c0010efc <EnvVarContainer::EnvVarContainer(Process*)>
c001108b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001108e:	89 1d 24 9c 02 c0    	mov    DWORD PTR ds:0xc0029c24,ebx
c0011094:	e8 47 fe ff ff       	call   c0010ee0 <EnvVarContainer::__loadSystem()>
c0011099:	83 c4 18             	add    esp,0x18
c001109c:	5b                   	pop    ebx
c001109d:	c3                   	ret    

c001109e <KeLoadUserEnv()>:
c001109e:	53                   	push   ebx
c001109f:	83 ec 14             	sub    esp,0x14
c00110a2:	6a 0c                	push   0xc
c00110a4:	e8 0d 6a ff ff       	call   c0007ab6 <malloc>
c00110a9:	89 c3                	mov    ebx,eax
c00110ab:	58                   	pop    eax
c00110ac:	5a                   	pop    edx
c00110ad:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c00110b3:	53                   	push   ebx
c00110b4:	e8 43 fe ff ff       	call   c0010efc <EnvVarContainer::EnvVarContainer(Process*)>
c00110b9:	89 1d 20 9c 02 c0    	mov    DWORD PTR ds:0xc0029c20,ebx
c00110bf:	83 c4 18             	add    esp,0x18
c00110c2:	5b                   	pop    ebx
c00110c3:	c3                   	ret    

c00110c4 <KeFlushEnv()>:
c00110c4:	c3                   	ret    

c00110c5 <KeGetProcessTotalEnvCount(Process*)>:
c00110c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110c9:	8b 15 20 9c 02 c0    	mov    edx,DWORD PTR ds:0xc0029c20
c00110cf:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00110d5:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c00110da:	8b 00                	mov    eax,DWORD PTR [eax]
c00110dc:	03 01                	add    eax,DWORD PTR [ecx]
c00110de:	85 d2                	test   edx,edx
c00110e0:	74 02                	je     c00110e4 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00110e2:	03 02                	add    eax,DWORD PTR [edx]
c00110e4:	c3                   	ret    

c00110e5 <KeGetProcessEnvPair(Process*, int)>:
c00110e5:	57                   	push   edi
c00110e6:	56                   	push   esi
c00110e7:	8b 35 20 9c 02 c0    	mov    esi,DWORD PTR ds:0xc0029c20
c00110ed:	53                   	push   ebx
c00110ee:	85 f6                	test   esi,esi
c00110f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110f8:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00110fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011102:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011104:	75 16                	jne    c001111c <KeGetProcessEnvPair(Process*, int)+0x37>
c0011106:	39 c2                	cmp    edx,eax
c0011108:	7c 16                	jl     c0011120 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001110a:	8b 0d 24 9c 02 c0    	mov    ecx,DWORD PTR ds:0xc0029c24
c0011110:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011112:	01 c6                	add    esi,eax
c0011114:	39 d6                	cmp    esi,edx
c0011116:	7e 3c                	jle    c0011154 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011118:	29 c2                	sub    edx,eax
c001111a:	eb 04                	jmp    c0011120 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001111c:	39 c2                	cmp    edx,eax
c001111e:	7d 05                	jge    c0011125 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011120:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011123:	eb 20                	jmp    c0011145 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011125:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011127:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001112a:	39 d1                	cmp    ecx,edx
c001112c:	7e 04                	jle    c0011132 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001112e:	29 c2                	sub    edx,eax
c0011130:	eb 10                	jmp    c0011142 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011132:	8b 35 24 9c 02 c0    	mov    esi,DWORD PTR ds:0xc0029c24
c0011138:	03 0e                	add    ecx,DWORD PTR [esi]
c001113a:	39 d1                	cmp    ecx,edx
c001113c:	7e 16                	jle    c0011154 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001113e:	29 c2                	sub    edx,eax
c0011140:	29 fa                	sub    edx,edi
c0011142:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011145:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011148:	8b 02                	mov    eax,DWORD PTR [edx]
c001114a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001114d:	89 03                	mov    DWORD PTR [ebx],eax
c001114f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011152:	eb 1d                	jmp    c0011171 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011154:	83 ec 0c             	sub    esp,0xc
c0011157:	68 4b 1c 02 c0       	push   0xc0021c4b
c001115c:	e8 ac 00 00 00       	call   c001120d <KePanic(char const*)>
c0011161:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011167:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001116e:	83 c4 10             	add    esp,0x10
c0011171:	89 d8                	mov    eax,ebx
c0011173:	5b                   	pop    ebx
c0011174:	5e                   	pop    esi
c0011175:	5f                   	pop    edi
c0011176:	c2 04 00             	ret    0x4

c0011179 <CPU::current()>:
c0011179:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001117e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011184:	c3                   	ret    

c0011185 <operator new(unsigned long)>:
c0011185:	e9 2c 69 ff ff       	jmp    c0007ab6 <malloc>

c001118a <operator delete(void*)>:
c001118a:	e9 47 69 ff ff       	jmp    c0007ad6 <rfree>

c001118f <disableIRQs()>:
c001118f:	fa                   	cli    
c0011190:	c3                   	ret    

c0011191 <enableIRQs()>:
c0011191:	fb                   	sti    
c0011192:	c3                   	ret    

c0011193 <lockScheduler()>:
c0011193:	fa                   	cli    
c0011194:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001119a:	c3                   	ret    

c001119b <unlockScheduler()>:
c001119b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00111a0:	48                   	dec    eax
c00111a1:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00111a6:	75 01                	jne    c00111a9 <unlockScheduler()+0xe>
c00111a8:	fb                   	sti    
c00111a9:	c3                   	ret    

c00111aa <lockStuff()>:
c00111aa:	fa                   	cli    
c00111ab:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00111b1:	ff 05 64 a4 02 c0    	inc    DWORD PTR ds:0xc002a464
c00111b7:	c3                   	ret    

c00111b8 <unlockStuff()>:
c00111b8:	83 ec 0c             	sub    esp,0xc
c00111bb:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c00111c0:	48                   	dec    eax
c00111c1:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c00111c6:	75 18                	jne    c00111e0 <unlockStuff()+0x28>
c00111c8:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c00111cf:	74 0f                	je     c00111e0 <unlockStuff()+0x28>
c00111d1:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c00111db:	e8 ec 48 00 00       	call   c0015acc <schedule()>
c00111e0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00111e5:	48                   	dec    eax
c00111e6:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00111eb:	75 01                	jne    c00111ee <unlockStuff()+0x36>
c00111ed:	fb                   	sti    
c00111ee:	83 c4 0c             	add    esp,0xc
c00111f1:	c3                   	ret    

c00111f2 <Virt::getAKernelVAS()>:
c00111f2:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c00111f7:	c3                   	ret    

c00111f8 <__not_memcpy>:
c00111f8:	57                   	push   edi
c00111f9:	56                   	push   esi
c00111fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011202:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011206:	89 c7                	mov    edi,eax
c0011208:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001120a:	5e                   	pop    esi
c001120b:	5f                   	pop    edi
c001120c:	c3                   	ret    

c001120d <KePanic(char const*)>:
c001120d:	c6 05 28 9c 02 c0 01 	mov    BYTE PTR ds:0xc0029c28,0x1
c0011214:	e9 59 68 00 00       	jmp    c0017a72 <HalPanic(char const*)>

c0011219 <KePowerThread(void*)>:
c0011219:	83 ec 0c             	sub    esp,0xc
c001121c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011221:	48                   	dec    eax
c0011222:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0011227:	75 01                	jne    c001122a <KePowerThread(void*)+0x11>
c0011229:	fb                   	sti    
c001122a:	83 ec 0c             	sub    esp,0xc
c001122d:	c6 05 40 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c40,0x0
c0011234:	6a 0a                	push   0xa
c0011236:	e8 d5 4b 00 00       	call   c0015e10 <sleep(unsigned int)>
c001123b:	83 05 84 9c 02 c0 0a 	add    DWORD PTR ds:0xc0029c84,0xa
c0011242:	83 c4 10             	add    esp,0x10
c0011245:	eb e3                	jmp    c001122a <KePowerThread(void*)+0x11>

c0011247 <KeChangePowerSettings(PowerSettings)>:
c0011247:	57                   	push   edi
c0011248:	b9 09 00 00 00       	mov    ecx,0x9
c001124d:	56                   	push   esi
c001124e:	bf 60 9c 02 c0       	mov    edi,0xc0029c60
c0011253:	fc                   	cld    
c0011254:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011258:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001125a:	5e                   	pop    esi
c001125b:	5f                   	pop    edi
c001125c:	c3                   	ret    

c001125d <KeUserIOReceived()>:
c001125d:	c7 05 84 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c84,0x0
c0011267:	c3                   	ret    

c0011268 <KeHandlePowerButton()>:
c0011268:	83 ec 0c             	sub    esp,0xc
c001126b:	a1 60 9c 02 c0       	mov    eax,ds:0xc0029c60
c0011270:	83 f8 02             	cmp    eax,0x2
c0011273:	75 10                	jne    c0011285 <KeHandlePowerButton()+0x1d>
c0011275:	83 ec 0c             	sub    esp,0xc
c0011278:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001127e:	e8 a5 5e ff ff       	call   c0007128 <Computer::shutdown()>
c0011283:	eb 11                	jmp    c0011296 <KeHandlePowerButton()+0x2e>
c0011285:	48                   	dec    eax
c0011286:	75 11                	jne    c0011299 <KeHandlePowerButton()+0x31>
c0011288:	83 ec 0c             	sub    esp,0xc
c001128b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011291:	e8 c2 5e ff ff       	call   c0007158 <Computer::sleep()>
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	83 c4 0c             	add    esp,0xc
c001129c:	c3                   	ret    

c001129d <KeHandleSleepButton()>:
c001129d:	83 ec 0c             	sub    esp,0xc
c00112a0:	a1 64 9c 02 c0       	mov    eax,ds:0xc0029c64
c00112a5:	83 f8 02             	cmp    eax,0x2
c00112a8:	75 10                	jne    c00112ba <KeHandleSleepButton()+0x1d>
c00112aa:	83 ec 0c             	sub    esp,0xc
c00112ad:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112b3:	e8 70 5e ff ff       	call   c0007128 <Computer::shutdown()>
c00112b8:	eb 11                	jmp    c00112cb <KeHandleSleepButton()+0x2e>
c00112ba:	48                   	dec    eax
c00112bb:	75 11                	jne    c00112ce <KeHandleSleepButton()+0x31>
c00112bd:	83 ec 0c             	sub    esp,0xc
c00112c0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112c6:	e8 8d 5e ff ff       	call   c0007158 <Computer::sleep()>
c00112cb:	83 c4 10             	add    esp,0x10
c00112ce:	83 c4 0c             	add    esp,0xc
c00112d1:	c3                   	ret    

c00112d2 <KeSetupPowerManager()>:
c00112d2:	83 ec 0c             	sub    esp,0xc
c00112d5:	c7 05 84 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c84,0x0
c00112df:	68 f0 00 00 00       	push   0xf0
c00112e4:	c6 05 40 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c40,0x0
c00112eb:	6a 00                	push   0x0
c00112ed:	68 19 12 01 c0       	push   0xc0011219
c00112f2:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c00112f8:	e8 7f 45 00 00       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c00112fd:	c7 05 60 9c 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029c60,0x2
c0011307:	c7 05 64 9c 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029c64,0x1
c0011311:	c7 05 68 9c 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029c68,0x3
c001131b:	c7 05 6c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c6c,0x0
c0011325:	c7 05 78 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c78,0x0
c001132f:	c7 05 70 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c70,0x0
c0011339:	c7 05 7c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c7c,0x0
c0011343:	c7 05 74 9c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029c74,0x3c
c001134d:	c7 05 80 9c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x3c
c0011357:	83 c4 1c             	add    esp,0x1c
c001135a:	c3                   	ret    

c001135b <KeRand()>:
c001135b:	69 05 88 9c 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0029c88,0x2875
c0011365:	69 0d 8c 9c 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0029c8c,0xa2e7b175
c001136f:	53                   	push   ebx
c0011370:	01 c1                	add    ecx,eax
c0011372:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011377:	f7 25 88 9c 02 c0    	mul    DWORD PTR ds:0xc0029c88
c001137d:	01 ca                	add    edx,ecx
c001137f:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011384:	83 d2 00             	adc    edx,0x0
c0011387:	a3 88 9c 02 c0       	mov    ds:0xc0029c88,eax
c001138c:	0f b7 da             	movzx  ebx,dx
c001138f:	89 da                	mov    edx,ebx
c0011391:	89 1d 8c 9c 02 c0    	mov    DWORD PTR ds:0xc0029c8c,ebx
c0011397:	0f ac d0 0e          	shrd   eax,edx,0xe
c001139b:	5b                   	pop    ebx
c001139c:	c3                   	ret    

c001139d <KeSeedRand(unsigned int)>:
c001139d:	53                   	push   ebx
c001139e:	83 ec 08             	sub    esp,0x8
c00113a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113a5:	e8 e7 69 00 00       	call   c0017d91 <HalGetRand()>
c00113aa:	c7 05 8c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c8c,0x0
c00113b4:	31 d8                	xor    eax,ebx
c00113b6:	a3 88 9c 02 c0       	mov    ds:0xc0029c88,eax
c00113bb:	e8 9b ff ff ff       	call   c001135b <KeRand()>
c00113c0:	83 c4 08             	add    esp,0x8
c00113c3:	5b                   	pop    ebx
c00113c4:	eb 95                	jmp    c001135b <KeRand()>

c00113c6 <KeInitRand()>:
c00113c6:	83 ec 0c             	sub    esp,0xc
c00113c9:	e8 b8 67 00 00       	call   c0017b86 <HalQueryPerformanceCounter()>
c00113ce:	0f 20 da             	mov    edx,cr3
c00113d1:	0f 22 da             	mov    cr3,edx
c00113d4:	0f 20 da             	mov    edx,cr3
c00113d7:	0f 22 da             	mov    cr3,edx
c00113da:	0f 20 da             	mov    edx,cr3
c00113dd:	0f 22 da             	mov    cr3,edx
c00113e0:	0f 20 da             	mov    edx,cr3
c00113e3:	0f 22 da             	mov    cr3,edx
c00113e6:	83 ec 0c             	sub    esp,0xc
c00113e9:	35 03 8a 95 38       	xor    eax,0x38958a03
c00113ee:	50                   	push   eax
c00113ef:	e8 a9 ff ff ff       	call   c001139d <KeSeedRand(unsigned int)>
c00113f4:	83 c4 1c             	add    esp,0x1c
c00113f7:	c3                   	ret    

c00113f8 <KeResolveCompatibilitySymbol(char*)>:
c00113f8:	83 ec 0c             	sub    esp,0xc
c00113fb:	83 ec 08             	sub    esp,0x8
c00113fe:	68 65 1c 02 c0       	push   0xc0021c65
c0011403:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011407:	e8 44 f3 fe ff       	call   c0000750 <strcmp>
c001140c:	83 c4 10             	add    esp,0x10
c001140f:	85 c0                	test   eax,eax
c0011411:	0f 94 c0             	sete   al
c0011414:	0f b6 c0             	movzx  eax,al
c0011417:	85 c0                	test   eax,eax
c0011419:	74 0d                	je     c0011428 <KeResolveCompatibilitySymbol(char*)+0x30>
c001141b:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0011420:	e9 8b 01 00 00       	jmp    c00115b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011425:	8d 76 00             	lea    esi,[esi+0x0]
c0011428:	83 ec 08             	sub    esp,0x8
c001142b:	68 6e 1c 02 c0       	push   0xc0021c6e
c0011430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011434:	e8 17 f3 fe ff       	call   c0000750 <strcmp>
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	85 c0                	test   eax,eax
c001143e:	0f 94 c0             	sete   al
c0011441:	0f b6 c0             	movzx  eax,al
c0011444:	85 c0                	test   eax,eax
c0011446:	74 0c                	je     c0011454 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011448:	b8 40 f1 01 c0       	mov    eax,0xc001f140
c001144d:	e9 5e 01 00 00       	jmp    c00115b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011452:	66 90                	xchg   ax,ax
c0011454:	83 ec 08             	sub    esp,0x8
c0011457:	68 78 1c 02 c0       	push   0xc0021c78
c001145c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011460:	e8 eb f2 fe ff       	call   c0000750 <strcmp>
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	85 c0                	test   eax,eax
c001146a:	0f 94 c0             	sete   al
c001146d:	0f b6 c0             	movzx  eax,al
c0011470:	85 c0                	test   eax,eax
c0011472:	74 0c                	je     c0011480 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011474:	b8 74 ee 01 c0       	mov    eax,0xc001ee74
c0011479:	e9 32 01 00 00       	jmp    c00115b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001147e:	66 90                	xchg   ax,ax
c0011480:	83 ec 08             	sub    esp,0x8
c0011483:	68 81 1c 02 c0       	push   0xc0021c81
c0011488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001148c:	e8 bf f2 fe ff       	call   c0000750 <strcmp>
c0011491:	83 c4 10             	add    esp,0x10
c0011494:	85 c0                	test   eax,eax
c0011496:	0f 94 c0             	sete   al
c0011499:	0f b6 c0             	movzx  eax,al
c001149c:	85 c0                	test   eax,eax
c001149e:	74 0c                	je     c00114ac <KeResolveCompatibilitySymbol(char*)+0xb4>
c00114a0:	b8 0d 12 01 c0       	mov    eax,0xc001120d
c00114a5:	e9 06 01 00 00       	jmp    c00115b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114aa:	66 90                	xchg   ax,ax
c00114ac:	83 ec 08             	sub    esp,0x8
c00114af:	68 94 1c 02 c0       	push   0xc0021c94
c00114b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114b8:	e8 93 f2 fe ff       	call   c0000750 <strcmp>
c00114bd:	83 c4 10             	add    esp,0x10
c00114c0:	85 c0                	test   eax,eax
c00114c2:	0f 94 c0             	sete   al
c00114c5:	0f b6 c0             	movzx  eax,al
c00114c8:	85 c0                	test   eax,eax
c00114ca:	74 0c                	je     c00114d8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00114cc:	b8 36 0b 01 c0       	mov    eax,0xc0010b36
c00114d1:	e9 da 00 00 00       	jmp    c00115b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114d6:	66 90                	xchg   ax,ax
c00114d8:	83 ec 08             	sub    esp,0x8
c00114db:	68 b1 1c 02 c0       	push   0xc0021cb1
c00114e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e4:	e8 67 f2 fe ff       	call   c0000750 <strcmp>
c00114e9:	83 c4 10             	add    esp,0x10
c00114ec:	85 c0                	test   eax,eax
c00114ee:	0f 94 c0             	sete   al
c00114f1:	0f b6 c0             	movzx  eax,al
c00114f4:	85 c0                	test   eax,eax
c00114f6:	74 0c                	je     c0011504 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00114f8:	b8 40 f2 01 c0       	mov    eax,0xc001f240
c00114fd:	e9 ae 00 00 00       	jmp    c00115b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011502:	66 90                	xchg   ax,ax
c0011504:	83 ec 08             	sub    esp,0x8
c0011507:	68 bb 1c 02 c0       	push   0xc0021cbb
c001150c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011510:	e8 3b f2 fe ff       	call   c0000750 <strcmp>
c0011515:	83 c4 10             	add    esp,0x10
c0011518:	85 c0                	test   eax,eax
c001151a:	0f 94 c0             	sete   al
c001151d:	0f b6 c0             	movzx  eax,al
c0011520:	85 c0                	test   eax,eax
c0011522:	74 0c                	je     c0011530 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011524:	b8 c0 ef 01 c0       	mov    eax,0xc001efc0
c0011529:	e9 82 00 00 00       	jmp    c00115b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001152e:	66 90                	xchg   ax,ax
c0011530:	83 ec 08             	sub    esp,0x8
c0011533:	68 c4 1c 02 c0       	push   0xc0021cc4
c0011538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001153c:	e8 0f f2 fe ff       	call   c0000750 <strcmp>
c0011541:	83 c4 10             	add    esp,0x10
c0011544:	85 c0                	test   eax,eax
c0011546:	0f 94 c0             	sete   al
c0011549:	0f b6 c0             	movzx  eax,al
c001154c:	85 c0                	test   eax,eax
c001154e:	74 08                	je     c0011558 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011550:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011555:	eb 59                	jmp    c00115b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011557:	90                   	nop
c0011558:	83 ec 08             	sub    esp,0x8
c001155b:	68 dc 1c 02 c0       	push   0xc0021cdc
c0011560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011564:	e8 e7 f1 fe ff       	call   c0000750 <strcmp>
c0011569:	83 c4 10             	add    esp,0x10
c001156c:	85 c0                	test   eax,eax
c001156e:	0f 94 c0             	sete   al
c0011571:	0f b6 c0             	movzx  eax,al
c0011574:	85 c0                	test   eax,eax
c0011576:	74 08                	je     c0011580 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011578:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c001157d:	eb 31                	jmp    c00115b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001157f:	90                   	nop
c0011580:	83 ec 08             	sub    esp,0x8
c0011583:	68 e9 1c 02 c0       	push   0xc0021ce9
c0011588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001158c:	e8 bf f1 fe ff       	call   c0000750 <strcmp>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	85 c0                	test   eax,eax
c0011596:	0f 94 c0             	sete   al
c0011599:	0f b6 c0             	movzx  eax,al
c001159c:	85 c0                	test   eax,eax
c001159e:	74 08                	je     c00115a8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00115a0:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c00115a5:	eb 09                	jmp    c00115b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115a7:	90                   	nop
c00115a8:	b8 00 00 00 00       	mov    eax,0x0
c00115ad:	8d 76 00             	lea    esi,[esi+0x0]
c00115b0:	83 c4 0c             	add    esp,0xc
c00115b3:	c3                   	ret    

c00115b4 <KiSigKill(int)>:
c00115b4:	83 ec 0c             	sub    esp,0xc
c00115b7:	6a 00                	push   0x0
c00115b9:	6a 00                	push   0x0
c00115bb:	6a ff                	push   0xffffffff
c00115bd:	6a 01                	push   0x1
c00115bf:	e8 8e 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00115c4:	83 c4 1c             	add    esp,0x1c
c00115c7:	c3                   	ret    

c00115c8 <KiDefaultSignalHandlerIgnore(int)>:
c00115c8:	c3                   	ret    

c00115c9 <KiDefaultSignalHandlerPause(int)>:
c00115c9:	57                   	push   edi
c00115ca:	b9 07 00 00 00       	mov    ecx,0x7
c00115cf:	56                   	push   esi
c00115d0:	be 32 1d 02 c0       	mov    esi,0xc0021d32
c00115d5:	83 ec 24             	sub    esp,0x24
c00115d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00115dc:	fc                   	cld    
c00115dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00115df:	8d 44 24 04          	lea    eax,[esp+0x4]
c00115e3:	50                   	push   eax
c00115e4:	6a 00                	push   0x0
c00115e6:	6a 00                	push   0x0
c00115e8:	6a 27                	push   0x27
c00115ea:	e8 63 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00115ef:	83 c4 34             	add    esp,0x34
c00115f2:	5e                   	pop    esi
c00115f3:	5f                   	pop    edi
c00115f4:	c3                   	ret    

c00115f5 <KiDefaultSignalHandlerResume(int)>:
c00115f5:	57                   	push   edi
c00115f6:	b9 1d 00 00 00       	mov    ecx,0x1d
c00115fb:	56                   	push   esi
c00115fc:	be 4e 1d 02 c0       	mov    esi,0xc0021d4e
c0011601:	83 ec 24             	sub    esp,0x24
c0011604:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011608:	fc                   	cld    
c0011609:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001160b:	8d 44 24 03          	lea    eax,[esp+0x3]
c001160f:	50                   	push   eax
c0011610:	6a 00                	push   0x0
c0011612:	6a 00                	push   0x0
c0011614:	6a 27                	push   0x27
c0011616:	e8 37 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001161b:	83 c4 34             	add    esp,0x34
c001161e:	5e                   	pop    esi
c001161f:	5f                   	pop    edi
c0011620:	c3                   	ret    

c0011621 <KeDeinitSignals(SigHandlerBlock*)>:
c0011621:	e9 a0 64 ff ff       	jmp    c0007ac6 <free>

c0011626 <KeInitSignals()>:
c0011626:	53                   	push   ebx
c0011627:	83 ec 14             	sub    esp,0x14
c001162a:	68 c8 00 00 00       	push   0xc8
c001162f:	e8 82 64 ff ff       	call   c0007ab6 <malloc>
c0011634:	83 c4 0c             	add    esp,0xc
c0011637:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011641:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001164b:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011652:	89 c3                	mov    ebx,eax
c0011654:	6a 20                	push   0x20
c0011656:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001165c:	6a 00                	push   0x0
c001165e:	50                   	push   eax
c001165f:	e8 8c ee fe ff       	call   c00004f0 <memset>
c0011664:	83 c4 0c             	add    esp,0xc
c0011667:	6a 44                	push   0x44
c0011669:	6a 00                	push   0x0
c001166b:	53                   	push   ebx
c001166c:	e8 7f ee fe ff       	call   c00004f0 <memset>
c0011671:	89 d8                	mov    eax,ebx
c0011673:	83 c4 18             	add    esp,0x18
c0011676:	5b                   	pop    ebx
c0011677:	c3                   	ret    

c0011678 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011678:	53                   	push   ebx
c0011679:	b8 01 00 00 00       	mov    eax,0x1
c001167e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011682:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011686:	83 f9 10             	cmp    ecx,0x10
c0011689:	7f 21                	jg     c00116ac <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001168b:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001168e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011692:	89 03                	mov    DWORD PTR [ebx],eax
c0011694:	b8 01 00 00 00       	mov    eax,0x1
c0011699:	d3 e0                	shl    eax,cl
c001169b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001169f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00116a2:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00116aa:	31 c0                	xor    eax,eax
c00116ac:	5b                   	pop    ebx
c00116ad:	c3                   	ret    

c00116ae <KeRaiseSignal(SigHandlerBlock*, int)>:
c00116ae:	55                   	push   ebp
c00116af:	57                   	push   edi
c00116b0:	bf 08 00 00 00       	mov    edi,0x8
c00116b5:	56                   	push   esi
c00116b6:	53                   	push   ebx
c00116b7:	83 ec 18             	sub    esp,0x18
c00116ba:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00116be:	68 6b 1d 02 c0       	push   0xc0021d6b
c00116c3:	e8 7d 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00116c8:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00116cf:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00116d5:	83 c4 10             	add    esp,0x10
c00116d8:	31 c9                	xor    ecx,ecx
c00116da:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00116de:	99                   	cdq    
c00116df:	f7 ff                	idiv   edi
c00116e1:	8d 42 24             	lea    eax,[edx+0x24]
c00116e4:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00116e8:	85 f6                	test   esi,esi
c00116ea:	75 1a                	jne    c0011706 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00116ec:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00116f0:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00116f4:	50                   	push   eax
c00116f5:	50                   	push   eax
c00116f6:	52                   	push   edx
c00116f7:	68 7c 1d 02 c0       	push   0xc0021d7c
c00116fc:	e8 44 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011701:	83 c4 10             	add    esp,0x10
c0011704:	eb 1b                	jmp    c0011721 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011706:	41                   	inc    ecx
c0011707:	83 f9 08             	cmp    ecx,0x8
c001170a:	75 ce                	jne    c00116da <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001170c:	83 ec 0c             	sub    esp,0xc
c001170f:	be 01 00 00 00       	mov    esi,0x1
c0011714:	68 9d 1d 02 c0       	push   0xc0021d9d
c0011719:	e8 27 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	83 c4 0c             	add    esp,0xc
c0011724:	89 f0                	mov    eax,esi
c0011726:	5b                   	pop    ebx
c0011727:	5e                   	pop    esi
c0011728:	5f                   	pop    edi
c0011729:	5d                   	pop    ebp
c001172a:	c3                   	ret    

c001172b <KeCheckSignal(SigHandlerBlock*, int*)>:
c001172b:	55                   	push   ebp
c001172c:	57                   	push   edi
c001172d:	56                   	push   esi
c001172e:	53                   	push   ebx
c001172f:	51                   	push   ecx
c0011730:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011734:	85 db                	test   ebx,ebx
c0011736:	0f 84 bc 00 00 00    	je     c00117f8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001173c:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011743:	0f 84 af 00 00 00    	je     c00117f8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011749:	31 c9                	xor    ecx,ecx
c001174b:	bf 08 00 00 00       	mov    edi,0x8
c0011750:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011756:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011759:	99                   	cdq    
c001175a:	f7 ff                	idiv   edi
c001175c:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011763:	85 ed                	test   ebp,ebp
c0011765:	0f 84 9e 00 00 00    	je     c0011809 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c001176b:	89 e9                	mov    ecx,ebp
c001176d:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011773:	bf 01 00 00 00       	mov    edi,0x1
c0011778:	89 04 24             	mov    DWORD PTR [esp],eax
c001177b:	d3 e7                	shl    edi,cl
c001177d:	31 c9                	xor    ecx,ecx
c001177f:	b8 01 00 00 00       	mov    eax,0x1
c0011784:	d3 e0                	shl    eax,cl
c0011786:	85 04 24             	test   DWORD PTR [esp],eax
c0011789:	74 06                	je     c0011791 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c001178b:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001178f:	75 67                	jne    c00117f8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011791:	41                   	inc    ecx
c0011792:	83 f9 11             	cmp    ecx,0x11
c0011795:	75 e8                	jne    c001177f <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011797:	46                   	inc    esi
c0011798:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001179b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00117a1:	09 f8                	or     eax,edi
c00117a3:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00117ae:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00117b4:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00117bb:	31 c0                	xor    eax,eax
c00117bd:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00117c5:	74 09                	je     c00117d0 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00117c7:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00117ce:	eb 06                	jmp    c00117d6 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00117d0:	40                   	inc    eax
c00117d1:	83 f8 08             	cmp    eax,0x8
c00117d4:	75 e7                	jne    c00117bd <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00117d6:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00117d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00117dd:	83 fd 09             	cmp    ebp,0x9
c00117e0:	89 2a                	mov    DWORD PTR [edx],ebp
c00117e2:	75 07                	jne    c00117eb <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00117e4:	b8 b4 15 01 c0       	mov    eax,0xc00115b4
c00117e9:	eb 31                	jmp    c001181c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117eb:	83 f8 01             	cmp    eax,0x1
c00117ee:	75 0c                	jne    c00117fc <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00117f0:	f7 d7                	not    edi
c00117f2:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00117f8:	31 c0                	xor    eax,eax
c00117fa:	eb 20                	jmp    c001181c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117fc:	85 c0                	test   eax,eax
c00117fe:	75 1c                	jne    c001181c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011800:	8b 04 ad a0 31 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdce60]
c0011807:	eb 13                	jmp    c001181c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011809:	46                   	inc    esi
c001180a:	41                   	inc    ecx
c001180b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011811:	83 f9 08             	cmp    ecx,0x8
c0011814:	0f 85 36 ff ff ff    	jne    c0011750 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c001181a:	eb dc                	jmp    c00117f8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001181c:	5a                   	pop    edx
c001181d:	5b                   	pop    ebx
c001181e:	5e                   	pop    esi
c001181f:	5f                   	pop    edi
c0011820:	5d                   	pop    ebp
c0011821:	c3                   	ret    

c0011822 <KiCheckSignalZ>:
c0011822:	83 ec 10             	sub    esp,0x10
c0011825:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011829:	50                   	push   eax
c001182a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001182f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011832:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011838:	e8 ee fe ff ff       	call   c001172b <KeCheckSignal(SigHandlerBlock*, int*)>
c001183d:	5a                   	pop    edx
c001183e:	31 d2                	xor    edx,edx
c0011840:	59                   	pop    ecx
c0011841:	85 c0                	test   eax,eax
c0011843:	74 19                	je     c001185e <KiCheckSignalZ+0x3c>
c0011845:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001184b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001184e:	89 02                	mov    DWORD PTR [edx],eax
c0011850:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011857:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001185b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001185e:	89 d0                	mov    eax,edx
c0011860:	83 c4 10             	add    esp,0x10
c0011863:	c3                   	ret    

c0011864 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011864:	56                   	push   esi
c0011865:	53                   	push   ebx
c0011866:	bb 01 00 00 00       	mov    ebx,0x1
c001186b:	52                   	push   edx
c001186c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011870:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011874:	d3 e3                	shl    ebx,cl
c0011876:	83 f9 10             	cmp    ecx,0x10
c0011879:	7f 08                	jg     c0011883 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001187b:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011881:	75 10                	jne    c0011893 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011883:	83 ec 0c             	sub    esp,0xc
c0011886:	68 ae 1d 02 c0       	push   0xc0021dae
c001188b:	e8 7d f9 ff ff       	call   c001120d <KePanic(char const*)>
c0011890:	83 c4 10             	add    esp,0x10
c0011893:	f7 d3                	not    ebx
c0011895:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001189b:	58                   	pop    eax
c001189c:	5b                   	pop    ebx
c001189d:	5e                   	pop    esi
c001189e:	c3                   	ret    

c001189f <KiFinishSignalZ>:
c001189f:	53                   	push   ebx
c00118a0:	83 ec 10             	sub    esp,0x10
c00118a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00118a7:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00118aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118b2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00118b8:	e8 a7 ff ff ff       	call   c0011864 <KeCompleteSignal(SigHandlerBlock*, int)>
c00118bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00118c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00118ca:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00118d1:	83 c4 18             	add    esp,0x18
c00118d4:	5b                   	pop    ebx
c00118d5:	c3                   	ret    

c00118d6 <SysSeekDir(regs*)>:
c00118d6:	31 c0                	xor    eax,eax
c00118d8:	31 d2                	xor    edx,edx
c00118da:	c3                   	ret    

c00118db <SysTellDir(regs*)>:
c00118db:	31 c0                	xor    eax,eax
c00118dd:	31 d2                	xor    edx,edx
c00118df:	c3                   	ret    

c00118e0 <SysVerify(regs*)>:
c00118e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e4:	31 d2                	xor    edx,edx
c00118e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118e9:	c3                   	ret    

c00118ea <SysGetArgc(regs*)>:
c00118ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118f2:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00118f8:	89 c2                	mov    edx,eax
c00118fa:	c1 fa 1f             	sar    edx,0x1f
c00118fd:	c3                   	ret    

c00118fe <SysTTYName(regs*)>:
c00118fe:	b8 01 00 00 00       	mov    eax,0x1
c0011903:	31 d2                	xor    edx,edx
c0011905:	c3                   	ret    

c0011906 <SysFormatDisk(regs*)>:
c0011906:	56                   	push   esi
c0011907:	53                   	push   ebx
c0011908:	83 ec 04             	sub    esp,0x4
c001190b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001190f:	8b 1d 64 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027064
c0011915:	eb 28                	jmp    c001193f <SysFormatDisk(regs*)+0x39>
c0011917:	83 ec 0c             	sub    esp,0xc
c001191a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001191d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011920:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011922:	51                   	push   ecx
c0011923:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011926:	51                   	push   ecx
c0011927:	50                   	push   eax
c0011928:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c001192f:	50                   	push   eax
c0011930:	53                   	push   ebx
c0011931:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011934:	83 c4 20             	add    esp,0x20
c0011937:	83 f8 08             	cmp    eax,0x8
c001193a:	75 14                	jne    c0011950 <SysFormatDisk(regs*)+0x4a>
c001193c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001193f:	85 db                	test   ebx,ebx
c0011941:	75 d4                	jne    c0011917 <SysFormatDisk(regs*)+0x11>
c0011943:	83 c4 04             	add    esp,0x4
c0011946:	b8 03 00 00 00       	mov    eax,0x3
c001194b:	31 d2                	xor    edx,edx
c001194d:	5b                   	pop    ebx
c001194e:	5e                   	pop    esi
c001194f:	c3                   	ret    
c0011950:	85 c0                	test   eax,eax
c0011952:	74 1f                	je     c0011973 <SysFormatDisk(regs*)+0x6d>
c0011954:	83 f8 09             	cmp    eax,0x9
c0011957:	74 0d                	je     c0011966 <SysFormatDisk(regs*)+0x60>
c0011959:	83 c4 04             	add    esp,0x4
c001195c:	b8 02 00 00 00       	mov    eax,0x2
c0011961:	31 d2                	xor    edx,edx
c0011963:	5b                   	pop    ebx
c0011964:	5e                   	pop    esi
c0011965:	c3                   	ret    
c0011966:	83 c4 04             	add    esp,0x4
c0011969:	b8 01 00 00 00       	mov    eax,0x1
c001196e:	31 d2                	xor    edx,edx
c0011970:	5b                   	pop    ebx
c0011971:	5e                   	pop    esi
c0011972:	c3                   	ret    
c0011973:	83 c4 04             	add    esp,0x4
c0011976:	31 c0                	xor    eax,eax
c0011978:	31 d2                	xor    edx,edx
c001197a:	5b                   	pop    ebx
c001197b:	5e                   	pop    esi
c001197c:	c3                   	ret    

c001197d <SysSetDiskVolumeLabel(regs*)>:
c001197d:	56                   	push   esi
c001197e:	53                   	push   ebx
c001197f:	83 ec 04             	sub    esp,0x4
c0011982:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011986:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011989:	83 f8 19             	cmp    eax,0x19
c001198c:	77 33                	ja     c00119c1 <SysSetDiskVolumeLabel(regs*)+0x44>
c001198e:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c0011995:	85 c9                	test   ecx,ecx
c0011997:	74 28                	je     c00119c1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011999:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001199c:	85 db                	test   ebx,ebx
c001199e:	74 21                	je     c00119c1 <SysSetDiskVolumeLabel(regs*)+0x44>
c00119a0:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00119a6:	85 d2                	test   edx,edx
c00119a8:	74 17                	je     c00119c1 <SysSetDiskVolumeLabel(regs*)+0x44>
c00119aa:	8b 32                	mov    esi,DWORD PTR [edx]
c00119ac:	53                   	push   ebx
c00119ad:	50                   	push   eax
c00119ae:	51                   	push   ecx
c00119af:	52                   	push   edx
c00119b0:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00119b3:	83 c4 10             	add    esp,0x10
c00119b6:	89 c2                	mov    edx,eax
c00119b8:	83 c4 04             	add    esp,0x4
c00119bb:	c1 fa 1f             	sar    edx,0x1f
c00119be:	5b                   	pop    ebx
c00119bf:	5e                   	pop    esi
c00119c0:	c3                   	ret    
c00119c1:	83 c4 04             	add    esp,0x4
c00119c4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119ce:	5b                   	pop    ebx
c00119cf:	5e                   	pop    esi
c00119d0:	c3                   	ret    

c00119d1 <SysGetDiskVolumeLabel(regs*)>:
c00119d1:	57                   	push   edi
c00119d2:	56                   	push   esi
c00119d3:	53                   	push   ebx
c00119d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119d8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00119db:	83 fa 19             	cmp    edx,0x19
c00119de:	77 3c                	ja     c0011a1c <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119e0:	8b 0c 95 e0 94 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6b20]
c00119e7:	85 c9                	test   ecx,ecx
c00119e9:	74 31                	je     c0011a1c <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119eb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00119ee:	85 db                	test   ebx,ebx
c00119f0:	74 2a                	je     c0011a1c <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119f2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00119f5:	85 f6                	test   esi,esi
c00119f7:	74 23                	je     c0011a1c <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119f9:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00119ff:	85 c0                	test   eax,eax
c0011a01:	74 19                	je     c0011a1c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a03:	83 ec 0c             	sub    esp,0xc
c0011a06:	8b 38                	mov    edi,DWORD PTR [eax]
c0011a08:	56                   	push   esi
c0011a09:	53                   	push   ebx
c0011a0a:	52                   	push   edx
c0011a0b:	51                   	push   ecx
c0011a0c:	50                   	push   eax
c0011a0d:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011a10:	83 c4 20             	add    esp,0x20
c0011a13:	89 c2                	mov    edx,eax
c0011a15:	5b                   	pop    ebx
c0011a16:	c1 fa 1f             	sar    edx,0x1f
c0011a19:	5e                   	pop    esi
c0011a1a:	5f                   	pop    edi
c0011a1b:	c3                   	ret    
c0011a1c:	5b                   	pop    ebx
c0011a1d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a22:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a27:	5e                   	pop    esi
c0011a28:	5f                   	pop    edi
c0011a29:	c3                   	ret    

c0011a2a <SysShutdown(regs*)>:
c0011a2a:	83 ec 0c             	sub    esp,0xc
c0011a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a31:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a34:	85 c0                	test   eax,eax
c0011a36:	74 18                	je     c0011a50 <SysShutdown(regs*)+0x26>
c0011a38:	83 f8 01             	cmp    eax,0x1
c0011a3b:	74 38                	je     c0011a75 <SysShutdown(regs*)+0x4b>
c0011a3d:	83 f8 02             	cmp    eax,0x2
c0011a40:	74 24                	je     c0011a66 <SysShutdown(regs*)+0x3c>
c0011a42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a4c:	83 c4 0c             	add    esp,0xc
c0011a4f:	c3                   	ret    
c0011a50:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a55:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a57:	6a 00                	push   0x0
c0011a59:	6a 00                	push   0x0
c0011a5b:	6a 00                	push   0x0
c0011a5d:	50                   	push   eax
c0011a5e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011a61:	83 c4 10             	add    esp,0x10
c0011a64:	eb dc                	jmp    c0011a42 <SysShutdown(regs*)+0x18>
c0011a66:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a6d:	6a 00                	push   0x0
c0011a6f:	6a 00                	push   0x0
c0011a71:	6a 01                	push   0x1
c0011a73:	eb e8                	jmp    c0011a5d <SysShutdown(regs*)+0x33>
c0011a75:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c0011a7a:	85 c0                	test   eax,eax
c0011a7c:	74 02                	je     c0011a80 <SysShutdown(regs*)+0x56>
c0011a7e:	ff d0                	call   eax
c0011a80:	31 c0                	xor    eax,eax
c0011a82:	31 d2                	xor    edx,edx
c0011a84:	83 c4 0c             	add    esp,0xc
c0011a87:	c3                   	ret    

c0011a88 <SysRealpath(regs*)>:
c0011a88:	83 ec 0c             	sub    esp,0xc
c0011a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a8f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011a92:	85 d2                	test   edx,edx
c0011a94:	74 07                	je     c0011a9d <SysRealpath(regs*)+0x15>
c0011a96:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011a99:	85 c0                	test   eax,eax
c0011a9b:	75 0b                	jne    c0011aa8 <SysRealpath(regs*)+0x20>
c0011a9d:	b8 01 00 00 00       	mov    eax,0x1
c0011aa2:	31 d2                	xor    edx,edx
c0011aa4:	83 c4 0c             	add    esp,0xc
c0011aa7:	c3                   	ret    
c0011aa8:	83 ec 04             	sub    esp,0x4
c0011aab:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011ab1:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011ab4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011aba:	51                   	push   ecx
c0011abb:	52                   	push   edx
c0011abc:	50                   	push   eax
c0011abd:	e8 82 9a ff ff       	call   c000b544 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011ac2:	83 c4 10             	add    esp,0x10
c0011ac5:	31 c0                	xor    eax,eax
c0011ac7:	31 d2                	xor    edx,edx
c0011ac9:	83 c4 0c             	add    esp,0xc
c0011acc:	c3                   	ret    

c0011acd <SysReadDir(regs*)>:
c0011acd:	53                   	push   ebx
c0011ace:	83 ec 18             	sub    esp,0x18
c0011ad1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ad5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ad8:	83 f8 02             	cmp    eax,0x2
c0011adb:	76 61                	jbe    c0011b3e <SysReadDir(regs*)+0x71>
c0011add:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ae4:	77 49                	ja     c0011b2f <SysReadDir(regs*)+0x62>
c0011ae6:	83 ec 0c             	sub    esp,0xc
c0011ae9:	50                   	push   eax
c0011aea:	e8 c4 79 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011aef:	83 c4 10             	add    esp,0x10
c0011af2:	85 c0                	test   eax,eax
c0011af4:	74 39                	je     c0011b2f <SysReadDir(regs*)+0x62>
c0011af6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011afe:	83 ec 0c             	sub    esp,0xc
c0011b01:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b03:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011b07:	51                   	push   ecx
c0011b08:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011b0b:	51                   	push   ecx
c0011b0c:	6a 00                	push   0x0
c0011b0e:	68 10 01 00 00       	push   0x110
c0011b13:	50                   	push   eax
c0011b14:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b17:	83 c4 20             	add    esp,0x20
c0011b1a:	85 c0                	test   eax,eax
c0011b1c:	74 29                	je     c0011b47 <SysReadDir(regs*)+0x7a>
c0011b1e:	83 f8 07             	cmp    eax,0x7
c0011b21:	74 1b                	je     c0011b3e <SysReadDir(regs*)+0x71>
c0011b23:	b8 02 00 00 00       	mov    eax,0x2
c0011b28:	31 d2                	xor    edx,edx
c0011b2a:	83 c4 18             	add    esp,0x18
c0011b2d:	5b                   	pop    ebx
c0011b2e:	c3                   	ret    
c0011b2f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b34:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b39:	83 c4 18             	add    esp,0x18
c0011b3c:	5b                   	pop    ebx
c0011b3d:	c3                   	ret    
c0011b3e:	b8 01 00 00 00       	mov    eax,0x1
c0011b43:	31 d2                	xor    edx,edx
c0011b45:	eb e3                	jmp    c0011b2a <SysReadDir(regs*)+0x5d>
c0011b47:	31 c0                	xor    eax,eax
c0011b49:	31 d2                	xor    edx,edx
c0011b4b:	eb dd                	jmp    c0011b2a <SysReadDir(regs*)+0x5d>

c0011b4d <SysIsATTY(regs*)>:
c0011b4d:	83 ec 0c             	sub    esp,0xc
c0011b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b54:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b57:	83 f8 02             	cmp    eax,0x2
c0011b5a:	76 07                	jbe    c0011b63 <SysIsATTY(regs*)+0x16>
c0011b5c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b61:	75 26                	jne    c0011b89 <SysIsATTY(regs*)+0x3c>
c0011b63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b71:	85 c0                	test   eax,eax
c0011b73:	74 24                	je     c0011b99 <SysIsATTY(regs*)+0x4c>
c0011b75:	83 ec 0c             	sub    esp,0xc
c0011b78:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b7a:	50                   	push   eax
c0011b7b:	ff 12                	call   DWORD PTR [edx]
c0011b7d:	31 d2                	xor    edx,edx
c0011b7f:	0f b6 c0             	movzx  eax,al
c0011b82:	83 c4 10             	add    esp,0x10
c0011b85:	83 c4 0c             	add    esp,0xc
c0011b88:	c3                   	ret    
c0011b89:	83 ec 0c             	sub    esp,0xc
c0011b8c:	50                   	push   eax
c0011b8d:	e8 21 79 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011b92:	83 c4 10             	add    esp,0x10
c0011b95:	85 c0                	test   eax,eax
c0011b97:	75 dc                	jne    c0011b75 <SysIsATTY(regs*)+0x28>
c0011b99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b9e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ba3:	83 c4 0c             	add    esp,0xc
c0011ba6:	c3                   	ret    

c0011ba7 <SysSeek(regs*)>:
c0011ba7:	53                   	push   ebx
c0011ba8:	83 ec 08             	sub    esp,0x8
c0011bab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011baf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bb2:	8d 50 fd             	lea    edx,[eax-0x3]
c0011bb5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011bbb:	77 32                	ja     c0011bef <SysSeek(regs*)+0x48>
c0011bbd:	83 ec 0c             	sub    esp,0xc
c0011bc0:	50                   	push   eax
c0011bc1:	e8 ed 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011bc6:	83 c4 0c             	add    esp,0xc
c0011bc9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011bcc:	31 db                	xor    ebx,ebx
c0011bce:	53                   	push   ebx
c0011bcf:	51                   	push   ecx
c0011bd0:	50                   	push   eax
c0011bd1:	e8 9e 9c ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0011bd6:	83 c4 10             	add    esp,0x10
c0011bd9:	85 c0                	test   eax,eax
c0011bdb:	0f 95 c0             	setne  al
c0011bde:	31 d2                	xor    edx,edx
c0011be0:	0f b6 c0             	movzx  eax,al
c0011be3:	f7 d8                	neg    eax
c0011be5:	83 d2 00             	adc    edx,0x0
c0011be8:	83 c4 08             	add    esp,0x8
c0011beb:	f7 da                	neg    edx
c0011bed:	5b                   	pop    ebx
c0011bee:	c3                   	ret    
c0011bef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bf4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bf9:	83 c4 08             	add    esp,0x8
c0011bfc:	5b                   	pop    ebx
c0011bfd:	c3                   	ret    

c0011bfe <SysTell(regs*)>:
c0011bfe:	53                   	push   ebx
c0011bff:	83 ec 08             	sub    esp,0x8
c0011c02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c09:	83 f8 02             	cmp    eax,0x2
c0011c0c:	76 4e                	jbe    c0011c5c <SysTell(regs*)+0x5e>
c0011c0e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c13:	76 19                	jbe    c0011c2e <SysTell(regs*)+0x30>
c0011c15:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c18:	31 d2                	xor    edx,edx
c0011c1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c20:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c27:	31 c0                	xor    eax,eax
c0011c29:	83 c4 08             	add    esp,0x8
c0011c2c:	5b                   	pop    ebx
c0011c2d:	c3                   	ret    
c0011c2e:	83 ec 0c             	sub    esp,0xc
c0011c31:	50                   	push   eax
c0011c32:	e8 7c 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c37:	5a                   	pop    edx
c0011c38:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011c3b:	59                   	pop    ecx
c0011c3c:	53                   	push   ebx
c0011c3d:	50                   	push   eax
c0011c3e:	e8 dd 9c ff ff       	call   c000b920 <File::tell(unsigned long long*)>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	85 c0                	test   eax,eax
c0011c48:	0f 95 c0             	setne  al
c0011c4b:	31 d2                	xor    edx,edx
c0011c4d:	0f b6 c0             	movzx  eax,al
c0011c50:	f7 d8                	neg    eax
c0011c52:	83 d2 00             	adc    edx,0x0
c0011c55:	83 c4 08             	add    esp,0x8
c0011c58:	f7 da                	neg    edx
c0011c5a:	5b                   	pop    ebx
c0011c5b:	c3                   	ret    
c0011c5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c61:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c66:	83 c4 08             	add    esp,0x8
c0011c69:	5b                   	pop    ebx
c0011c6a:	c3                   	ret    

c0011c6b <SysSize(regs*)>:
c0011c6b:	53                   	push   ebx
c0011c6c:	83 ec 18             	sub    esp,0x18
c0011c6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c73:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c76:	83 f8 02             	cmp    eax,0x2
c0011c79:	76 54                	jbe    c0011ccf <SysSize(regs*)+0x64>
c0011c7b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c80:	76 19                	jbe    c0011c9b <SysSize(regs*)+0x30>
c0011c82:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c85:	31 d2                	xor    edx,edx
c0011c87:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c8d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c94:	31 c0                	xor    eax,eax
c0011c96:	83 c4 18             	add    esp,0x18
c0011c99:	5b                   	pop    ebx
c0011c9a:	c3                   	ret    
c0011c9b:	83 ec 0c             	sub    esp,0xc
c0011c9e:	50                   	push   eax
c0011c9f:	e8 0f 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011ca4:	83 c4 0c             	add    esp,0xc
c0011ca7:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011cab:	52                   	push   edx
c0011cac:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011caf:	52                   	push   edx
c0011cb0:	50                   	push   eax
c0011cb1:	e8 02 9e ff ff       	call   c000bab8 <File::stat(unsigned long long*, bool*)>
c0011cb6:	83 c4 10             	add    esp,0x10
c0011cb9:	85 c0                	test   eax,eax
c0011cbb:	0f 95 c0             	setne  al
c0011cbe:	31 d2                	xor    edx,edx
c0011cc0:	0f b6 c0             	movzx  eax,al
c0011cc3:	f7 d8                	neg    eax
c0011cc5:	83 d2 00             	adc    edx,0x0
c0011cc8:	83 c4 18             	add    esp,0x18
c0011ccb:	f7 da                	neg    edx
c0011ccd:	5b                   	pop    ebx
c0011cce:	c3                   	ret    
c0011ccf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cd4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cd9:	83 c4 18             	add    esp,0x18
c0011cdc:	5b                   	pop    ebx
c0011cdd:	c3                   	ret    

c0011cde <SysSizeFromFilename(regs*)>:
c0011cde:	57                   	push   edi
c0011cdf:	56                   	push   esi
c0011ce0:	53                   	push   ebx
c0011ce1:	83 ec 20             	sub    esp,0x20
c0011ce4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011ce8:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011ceb:	83 fb 02             	cmp    ebx,0x2
c0011cee:	0f 86 8a 00 00 00    	jbe    c0011d7e <SysSizeFromFilename(regs*)+0xa0>
c0011cf4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011cfa:	76 1b                	jbe    c0011d17 <SysSizeFromFilename(regs*)+0x39>
c0011cfc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011cff:	31 d2                	xor    edx,edx
c0011d01:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d0e:	83 c4 20             	add    esp,0x20
c0011d11:	31 c0                	xor    eax,eax
c0011d13:	5b                   	pop    ebx
c0011d14:	5e                   	pop    esi
c0011d15:	5f                   	pop    edi
c0011d16:	c3                   	ret    
c0011d17:	83 ec 0c             	sub    esp,0xc
c0011d1a:	68 14 01 00 00       	push   0x114
c0011d1f:	e8 92 5d ff ff       	call   c0007ab6 <malloc>
c0011d24:	83 c4 0c             	add    esp,0xc
c0011d27:	89 c7                	mov    edi,eax
c0011d29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d31:	50                   	push   eax
c0011d32:	53                   	push   ebx
c0011d33:	57                   	push   edi
c0011d34:	e8 c1 99 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c0011d39:	83 c4 0c             	add    esp,0xc
c0011d3c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011d40:	50                   	push   eax
c0011d41:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011d44:	52                   	push   edx
c0011d45:	57                   	push   edi
c0011d46:	e8 6d 9d ff ff       	call   c000bab8 <File::stat(unsigned long long*, bool*)>
c0011d4b:	83 c4 10             	add    esp,0x10
c0011d4e:	85 ff                	test   edi,edi
c0011d50:	74 14                	je     c0011d66 <SysSizeFromFilename(regs*)+0x88>
c0011d52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d56:	8b 17                	mov    edx,DWORD PTR [edi]
c0011d58:	83 ec 0c             	sub    esp,0xc
c0011d5b:	57                   	push   edi
c0011d5c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011d5f:	83 c4 10             	add    esp,0x10
c0011d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d66:	85 c0                	test   eax,eax
c0011d68:	0f 95 c0             	setne  al
c0011d6b:	31 d2                	xor    edx,edx
c0011d6d:	0f b6 c0             	movzx  eax,al
c0011d70:	f7 d8                	neg    eax
c0011d72:	83 d2 00             	adc    edx,0x0
c0011d75:	83 c4 20             	add    esp,0x20
c0011d78:	f7 da                	neg    edx
c0011d7a:	5b                   	pop    ebx
c0011d7b:	5e                   	pop    esi
c0011d7c:	5f                   	pop    edi
c0011d7d:	c3                   	ret    
c0011d7e:	83 c4 20             	add    esp,0x20
c0011d81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d86:	5b                   	pop    ebx
c0011d87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d8c:	5e                   	pop    esi
c0011d8d:	5f                   	pop    edi
c0011d8e:	c3                   	ret    

c0011d8f <SysClose(regs*)>:
c0011d8f:	53                   	push   ebx
c0011d90:	83 ec 08             	sub    esp,0x8
c0011d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d9a:	83 f8 02             	cmp    eax,0x2
c0011d9d:	76 41                	jbe    c0011de0 <SysClose(regs*)+0x51>
c0011d9f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011da5:	83 fa 01             	cmp    edx,0x1
c0011da8:	76 2d                	jbe    c0011dd7 <SysClose(regs*)+0x48>
c0011daa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011daf:	77 2f                	ja     c0011de0 <SysClose(regs*)+0x51>
c0011db1:	83 ec 0c             	sub    esp,0xc
c0011db4:	50                   	push   eax
c0011db5:	e8 f9 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011dba:	89 c3                	mov    ebx,eax
c0011dbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dbf:	e8 50 9a ff ff       	call   c000b814 <File::close()>
c0011dc4:	83 c4 10             	add    esp,0x10
c0011dc7:	85 db                	test   ebx,ebx
c0011dc9:	74 0c                	je     c0011dd7 <SysClose(regs*)+0x48>
c0011dcb:	83 ec 0c             	sub    esp,0xc
c0011dce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011dd0:	53                   	push   ebx
c0011dd1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011dd4:	83 c4 10             	add    esp,0x10
c0011dd7:	31 c0                	xor    eax,eax
c0011dd9:	31 d2                	xor    edx,edx
c0011ddb:	83 c4 08             	add    esp,0x8
c0011dde:	5b                   	pop    ebx
c0011ddf:	c3                   	ret    
c0011de0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011de5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dea:	83 c4 08             	add    esp,0x8
c0011ded:	5b                   	pop    ebx
c0011dee:	c3                   	ret    

c0011def <SysOpenDir(regs*)>:
c0011def:	56                   	push   esi
c0011df0:	53                   	push   ebx
c0011df1:	83 ec 04             	sub    esp,0x4
c0011df4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011df8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011dfb:	85 c9                	test   ecx,ecx
c0011dfd:	74 5d                	je     c0011e5c <SysOpenDir(regs*)+0x6d>
c0011dff:	83 ec 0c             	sub    esp,0xc
c0011e02:	68 14 01 00 00       	push   0x114
c0011e07:	e8 aa 5c ff ff       	call   c0007ab6 <malloc>
c0011e0c:	83 c4 0c             	add    esp,0xc
c0011e0f:	89 c6                	mov    esi,eax
c0011e11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e19:	50                   	push   eax
c0011e1a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e1d:	52                   	push   edx
c0011e1e:	56                   	push   esi
c0011e1f:	e8 52 9e ff ff       	call   c000bc76 <Directory::Directory(char const*, Process*)>
c0011e24:	83 c4 10             	add    esp,0x10
c0011e27:	85 f6                	test   esi,esi
c0011e29:	74 31                	je     c0011e5c <SysOpenDir(regs*)+0x6d>
c0011e2b:	83 ec 0c             	sub    esp,0xc
c0011e2e:	56                   	push   esi
c0011e2f:	e8 fe 9e ff ff       	call   c000bd32 <Directory::open()>
c0011e34:	83 c4 10             	add    esp,0x10
c0011e37:	85 c0                	test   eax,eax
c0011e39:	75 21                	jne    c0011e5c <SysOpenDir(regs*)+0x6d>
c0011e3b:	83 ec 0c             	sub    esp,0xc
c0011e3e:	56                   	push   esi
c0011e3f:	e8 72 73 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0011e44:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e47:	83 c4 10             	add    esp,0x10
c0011e4a:	89 02                	mov    DWORD PTR [edx],eax
c0011e4c:	c1 f8 1f             	sar    eax,0x1f
c0011e4f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e52:	83 c4 04             	add    esp,0x4
c0011e55:	31 c0                	xor    eax,eax
c0011e57:	31 d2                	xor    edx,edx
c0011e59:	5b                   	pop    ebx
c0011e5a:	5e                   	pop    esi
c0011e5b:	c3                   	ret    
c0011e5c:	83 c4 04             	add    esp,0x4
c0011e5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e64:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e69:	5b                   	pop    ebx
c0011e6a:	5e                   	pop    esi
c0011e6b:	c3                   	ret    

c0011e6c <SysMakeDir(regs*)>:
c0011e6c:	56                   	push   esi
c0011e6d:	53                   	push   ebx
c0011e6e:	83 ec 10             	sub    esp,0x10
c0011e71:	68 14 01 00 00       	push   0x114
c0011e76:	e8 3b 5c ff ff       	call   c0007ab6 <malloc>
c0011e7b:	83 c4 0c             	add    esp,0xc
c0011e7e:	89 c3                	mov    ebx,eax
c0011e80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e88:	50                   	push   eax
c0011e89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e8d:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011e90:	52                   	push   edx
c0011e91:	53                   	push   ebx
c0011e92:	e8 df 9d ff ff       	call   c000bc76 <Directory::Directory(char const*, Process*)>
c0011e97:	83 c4 10             	add    esp,0x10
c0011e9a:	85 db                	test   ebx,ebx
c0011e9c:	74 2c                	je     c0011eca <SysMakeDir(regs*)+0x5e>
c0011e9e:	83 ec 0c             	sub    esp,0xc
c0011ea1:	53                   	push   ebx
c0011ea2:	e8 6b a0 ff ff       	call   c000bf12 <Directory::create()>
c0011ea7:	89 c6                	mov    esi,eax
c0011ea9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011eab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011eae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011eb1:	83 c4 10             	add    esp,0x10
c0011eb4:	31 c0                	xor    eax,eax
c0011eb6:	85 f6                	test   esi,esi
c0011eb8:	0f 95 c0             	setne  al
c0011ebb:	31 d2                	xor    edx,edx
c0011ebd:	f7 d8                	neg    eax
c0011ebf:	83 d2 00             	adc    edx,0x0
c0011ec2:	83 c4 04             	add    esp,0x4
c0011ec5:	f7 da                	neg    edx
c0011ec7:	5b                   	pop    ebx
c0011ec8:	5e                   	pop    esi
c0011ec9:	c3                   	ret    
c0011eca:	83 c4 04             	add    esp,0x4
c0011ecd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ed2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ed7:	5b                   	pop    ebx
c0011ed8:	5e                   	pop    esi
c0011ed9:	c3                   	ret    

c0011eda <SysCloseDir(regs*)>:
c0011eda:	53                   	push   ebx
c0011edb:	83 ec 08             	sub    esp,0x8
c0011ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ee2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ee5:	8d 50 fd             	lea    edx,[eax-0x3]
c0011ee8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011eee:	77 2f                	ja     c0011f1f <SysCloseDir(regs*)+0x45>
c0011ef0:	83 ec 0c             	sub    esp,0xc
c0011ef3:	50                   	push   eax
c0011ef4:	e8 ba 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011ef9:	89 c3                	mov    ebx,eax
c0011efb:	89 04 24             	mov    DWORD PTR [esp],eax
c0011efe:	e8 8b 9e ff ff       	call   c000bd8e <Directory::close()>
c0011f03:	83 c4 10             	add    esp,0x10
c0011f06:	85 db                	test   ebx,ebx
c0011f08:	74 0c                	je     c0011f16 <SysCloseDir(regs*)+0x3c>
c0011f0a:	83 ec 0c             	sub    esp,0xc
c0011f0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f0f:	53                   	push   ebx
c0011f10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f13:	83 c4 10             	add    esp,0x10
c0011f16:	31 c0                	xor    eax,eax
c0011f18:	31 d2                	xor    edx,edx
c0011f1a:	83 c4 08             	add    esp,0x8
c0011f1d:	5b                   	pop    ebx
c0011f1e:	c3                   	ret    
c0011f1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f24:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f29:	83 c4 08             	add    esp,0x8
c0011f2c:	5b                   	pop    ebx
c0011f2d:	c3                   	ret    

c0011f2e <SysWait(regs*)>:
c0011f2e:	83 ec 10             	sub    esp,0x10
c0011f31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f35:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f38:	52                   	push   edx
c0011f39:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011f3c:	51                   	push   ecx
c0011f3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f40:	50                   	push   eax
c0011f41:	e8 d2 3d 00 00       	call   c0015d18 <waitTask(int, int*, int)>
c0011f46:	83 c4 1c             	add    esp,0x1c
c0011f49:	89 c2                	mov    edx,eax
c0011f4b:	c1 fa 1f             	sar    edx,0x1f
c0011f4e:	c3                   	ret    

c0011f4f <SysNotImpl(regs*)>:
c0011f4f:	83 ec 18             	sub    esp,0x18
c0011f52:	68 bf 1d 02 c0       	push   0xc0021dbf
c0011f57:	e8 b1 f2 ff ff       	call   c001120d <KePanic(char const*)>
c0011f5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f61:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f66:	83 c4 1c             	add    esp,0x1c
c0011f69:	c3                   	ret    

c0011f6a <SysPanic(regs*)>:
c0011f6a:	83 ec 18             	sub    esp,0x18
c0011f6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f71:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f74:	50                   	push   eax
c0011f75:	e8 93 f2 ff ff       	call   c001120d <KePanic(char const*)>
c0011f7a:	b8 01 00 00 00       	mov    eax,0x1
c0011f7f:	31 d2                	xor    edx,edx
c0011f81:	83 c4 1c             	add    esp,0x1c
c0011f84:	c3                   	ret    

c0011f85 <SysRmdir(regs*)>:
c0011f85:	56                   	push   esi
c0011f86:	53                   	push   ebx
c0011f87:	83 ec 20             	sub    esp,0x20
c0011f8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f8e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011f91:	68 14 01 00 00       	push   0x114
c0011f96:	e8 1b 5b ff ff       	call   c0007ab6 <malloc>
c0011f9b:	83 c4 0c             	add    esp,0xc
c0011f9e:	89 c3                	mov    ebx,eax
c0011fa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fa5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fa8:	50                   	push   eax
c0011fa9:	56                   	push   esi
c0011faa:	53                   	push   ebx
c0011fab:	e8 4a 97 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c0011fb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fb3:	e8 cc 99 ff ff       	call   c000b984 <File::unlink()>
c0011fb8:	83 c4 10             	add    esp,0x10
c0011fbb:	85 db                	test   ebx,ebx
c0011fbd:	74 14                	je     c0011fd3 <SysRmdir(regs*)+0x4e>
c0011fbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fc3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011fc5:	83 ec 0c             	sub    esp,0xc
c0011fc8:	53                   	push   ebx
c0011fc9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011fcc:	83 c4 10             	add    esp,0x10
c0011fcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fd3:	85 c0                	test   eax,eax
c0011fd5:	0f 95 c0             	setne  al
c0011fd8:	31 d2                	xor    edx,edx
c0011fda:	0f b6 c0             	movzx  eax,al
c0011fdd:	f7 d8                	neg    eax
c0011fdf:	83 d2 00             	adc    edx,0x0
c0011fe2:	83 c4 14             	add    esp,0x14
c0011fe5:	f7 da                	neg    edx
c0011fe7:	5b                   	pop    ebx
c0011fe8:	5e                   	pop    esi
c0011fe9:	c3                   	ret    

c0011fea <SysUnlink(regs*)>:
c0011fea:	56                   	push   esi
c0011feb:	53                   	push   ebx
c0011fec:	83 ec 20             	sub    esp,0x20
c0011fef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ff3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011ff6:	68 14 01 00 00       	push   0x114
c0011ffb:	e8 b6 5a ff ff       	call   c0007ab6 <malloc>
c0012000:	83 c4 0c             	add    esp,0xc
c0012003:	89 c3                	mov    ebx,eax
c0012005:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001200a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001200d:	50                   	push   eax
c001200e:	56                   	push   esi
c001200f:	53                   	push   ebx
c0012010:	e8 e5 96 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c0012015:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012018:	e8 67 99 ff ff       	call   c000b984 <File::unlink()>
c001201d:	83 c4 10             	add    esp,0x10
c0012020:	85 db                	test   ebx,ebx
c0012022:	74 14                	je     c0012038 <SysUnlink(regs*)+0x4e>
c0012024:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012028:	8b 13                	mov    edx,DWORD PTR [ebx]
c001202a:	83 ec 0c             	sub    esp,0xc
c001202d:	53                   	push   ebx
c001202e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012031:	83 c4 10             	add    esp,0x10
c0012034:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012038:	85 c0                	test   eax,eax
c001203a:	0f 95 c0             	setne  al
c001203d:	31 d2                	xor    edx,edx
c001203f:	0f b6 c0             	movzx  eax,al
c0012042:	f7 d8                	neg    eax
c0012044:	83 d2 00             	adc    edx,0x0
c0012047:	83 c4 14             	add    esp,0x14
c001204a:	f7 da                	neg    edx
c001204c:	5b                   	pop    ebx
c001204d:	5e                   	pop    esi
c001204e:	c3                   	ret    

c001204f <SysGetArgv(regs*)>:
c001204f:	83 ec 0c             	sub    esp,0xc
c0012052:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012056:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012059:	85 c0                	test   eax,eax
c001205b:	78 2c                	js     c0012089 <SysGetArgv(regs*)+0x3a>
c001205d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012063:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012066:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001206c:	7d 1b                	jge    c0012089 <SysGetArgv(regs*)+0x3a>
c001206e:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012075:	85 c0                	test   eax,eax
c0012077:	74 18                	je     c0012091 <SysGetArgv(regs*)+0x42>
c0012079:	83 ec 08             	sub    esp,0x8
c001207c:	50                   	push   eax
c001207d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012080:	50                   	push   eax
c0012081:	e8 ba e5 fe ff       	call   c0000640 <strcpy>
c0012086:	83 c4 10             	add    esp,0x10
c0012089:	31 c0                	xor    eax,eax
c001208b:	31 d2                	xor    edx,edx
c001208d:	83 c4 0c             	add    esp,0xc
c0012090:	c3                   	ret    
c0012091:	b8 01 00 00 00       	mov    eax,0x1
c0012096:	31 d2                	xor    edx,edx
c0012098:	83 c4 0c             	add    esp,0xc
c001209b:	c3                   	ret    

c001209c <SysUSleep(regs*)>:
c001209c:	83 ec 1c             	sub    esp,0x1c
c001209f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00120a3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00120a6:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00120a9:	6a 00                	push   0x0
c00120ab:	6a 64                	push   0x64
c00120ad:	52                   	push   edx
c00120ae:	50                   	push   eax
c00120af:	e8 8c d0 00 00       	call   c001f140 <__udivdi3>
c00120b4:	83 c4 14             	add    esp,0x14
c00120b7:	50                   	push   eax
c00120b8:	e8 3f 3d 00 00       	call   c0015dfc <milliTenthSleep(unsigned int)>
c00120bd:	31 c0                	xor    eax,eax
c00120bf:	31 d2                	xor    edx,edx
c00120c1:	83 c4 1c             	add    esp,0x1c
c00120c4:	c3                   	ret    

c00120c5 <SysSpawn(regs*)>:
c00120c5:	56                   	push   esi
c00120c6:	53                   	push   ebx
c00120c7:	83 ec 04             	sub    esp,0x4
c00120ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120ce:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120d1:	85 f6                	test   esi,esi
c00120d3:	75 0a                	jne    c00120df <SysSpawn(regs*)+0x1a>
c00120d5:	83 c4 04             	add    esp,0x4
c00120d8:	31 c0                	xor    eax,eax
c00120da:	31 d2                	xor    edx,edx
c00120dc:	5b                   	pop    ebx
c00120dd:	5e                   	pop    esi
c00120de:	c3                   	ret    
c00120df:	83 ec 0c             	sub    esp,0xc
c00120e2:	68 24 07 00 00       	push   0x724
c00120e7:	e8 ca 59 ff ff       	call   c0007ab6 <malloc>
c00120ec:	83 c4 10             	add    esp,0x10
c00120ef:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00120f2:	89 c6                	mov    esi,eax
c00120f4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120f7:	85 c9                	test   ecx,ecx
c00120f9:	75 39                	jne    c0012134 <SysSpawn(regs*)+0x6f>
c00120fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012100:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012103:	52                   	push   edx
c0012104:	50                   	push   eax
c0012105:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012108:	50                   	push   eax
c0012109:	56                   	push   esi
c001210a:	e8 3d 33 00 00       	call   c001544c <Process::Process(char const*, Process*, char**)>
c001210f:	83 c4 10             	add    esp,0x10
c0012112:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012119:	75 ba                	jne    c00120d5 <SysSpawn(regs*)+0x10>
c001211b:	83 ec 0c             	sub    esp,0xc
c001211e:	56                   	push   esi
c001211f:	e8 64 38 00 00       	call   c0015988 <Process::createUserThread()>
c0012124:	8b 06                	mov    eax,DWORD PTR [esi]
c0012126:	83 c4 10             	add    esp,0x10
c0012129:	89 c2                	mov    edx,eax
c001212b:	83 c4 04             	add    esp,0x4
c001212e:	c1 fa 1f             	sar    edx,0x1f
c0012131:	5b                   	pop    ebx
c0012132:	5e                   	pop    esi
c0012133:	c3                   	ret    
c0012134:	31 c0                	xor    eax,eax
c0012136:	eb cb                	jmp    c0012103 <SysSpawn(regs*)+0x3e>

c0012138 <SysGetEnv(regs*)>:
c0012138:	57                   	push   edi
c0012139:	56                   	push   esi
c001213a:	53                   	push   ebx
c001213b:	83 ec 1c             	sub    esp,0x1c
c001213e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012142:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012147:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001214a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001214d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012150:	51                   	push   ecx
c0012151:	e8 6f ef ff ff       	call   c00110c5 <KeGetProcessTotalEnvCount(Process*)>
c0012156:	83 c4 10             	add    esp,0x10
c0012159:	39 c7                	cmp    edi,eax
c001215b:	7c 14                	jl     c0012171 <SysGetEnv(regs*)+0x39>
c001215d:	85 f6                	test   esi,esi
c001215f:	75 0b                	jne    c001216c <SysGetEnv(regs*)+0x34>
c0012161:	83 c4 10             	add    esp,0x10
c0012164:	31 c0                	xor    eax,eax
c0012166:	5b                   	pop    ebx
c0012167:	31 d2                	xor    edx,edx
c0012169:	5e                   	pop    esi
c001216a:	5f                   	pop    edi
c001216b:	c3                   	ret    
c001216c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001216f:	eb f0                	jmp    c0012161 <SysGetEnv(regs*)+0x29>
c0012171:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012175:	83 ec 04             	sub    esp,0x4
c0012178:	57                   	push   edi
c0012179:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001217f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012182:	57                   	push   edi
c0012183:	50                   	push   eax
c0012184:	e8 5c ef ff ff       	call   c00110e5 <KeGetProcessEnvPair(Process*, int)>
c0012189:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001218c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012190:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012194:	83 c4 0c             	add    esp,0xc
c0012197:	85 d2                	test   edx,edx
c0012199:	75 23                	jne    c00121be <SysGetEnv(regs*)+0x86>
c001219b:	83 ec 0c             	sub    esp,0xc
c001219e:	50                   	push   eax
c001219f:	e8 cc e3 fe ff       	call   c0000570 <strlen>
c00121a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121a7:	89 c3                	mov    ebx,eax
c00121a9:	e8 c2 e3 fe ff       	call   c0000570 <strlen>
c00121ae:	83 c4 10             	add    esp,0x10
c00121b1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00121b5:	83 c4 10             	add    esp,0x10
c00121b8:	31 d2                	xor    edx,edx
c00121ba:	5b                   	pop    ebx
c00121bb:	5e                   	pop    esi
c00121bc:	5f                   	pop    edi
c00121bd:	c3                   	ret    
c00121be:	83 ec 08             	sub    esp,0x8
c00121c1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121c4:	50                   	push   eax
c00121c5:	56                   	push   esi
c00121c6:	e8 75 e4 fe ff       	call   c0000640 <strcpy>
c00121cb:	58                   	pop    eax
c00121cc:	5a                   	pop    edx
c00121cd:	68 d9 1d 02 c0       	push   0xc0021dd9
c00121d2:	56                   	push   esi
c00121d3:	e8 68 e6 fe ff       	call   c0000840 <strcat>
c00121d8:	59                   	pop    ecx
c00121d9:	5b                   	pop    ebx
c00121da:	57                   	push   edi
c00121db:	56                   	push   esi
c00121dc:	e8 5f e6 fe ff       	call   c0000840 <strcat>
c00121e1:	83 c4 10             	add    esp,0x10
c00121e4:	e9 78 ff ff ff       	jmp    c0012161 <SysGetEnv(regs*)+0x29>

c00121e9 <SysSetFatAttrib(regs*)>:
c00121e9:	57                   	push   edi
c00121ea:	56                   	push   esi
c00121eb:	53                   	push   ebx
c00121ec:	83 ec 1c             	sub    esp,0x1c
c00121ef:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00121f3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00121f6:	68 14 01 00 00       	push   0x114
c00121fb:	e8 b6 58 ff ff       	call   c0007ab6 <malloc>
c0012200:	83 c4 0c             	add    esp,0xc
c0012203:	89 c3                	mov    ebx,eax
c0012205:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001220a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001220d:	50                   	push   eax
c001220e:	57                   	push   edi
c001220f:	53                   	push   ebx
c0012210:	e8 e5 94 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c0012215:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012218:	83 c4 0c             	add    esp,0xc
c001221b:	0f b6 d4             	movzx  edx,ah
c001221e:	0f b6 c0             	movzx  eax,al
c0012221:	52                   	push   edx
c0012222:	50                   	push   eax
c0012223:	53                   	push   ebx
c0012224:	e8 f5 97 ff ff       	call   c000ba1e <File::chfatattr(unsigned char, unsigned char)>
c0012229:	83 c4 10             	add    esp,0x10
c001222c:	85 db                	test   ebx,ebx
c001222e:	74 14                	je     c0012244 <SysSetFatAttrib(regs*)+0x5b>
c0012230:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012234:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012236:	83 ec 0c             	sub    esp,0xc
c0012239:	53                   	push   ebx
c001223a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001223d:	83 c4 10             	add    esp,0x10
c0012240:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012244:	85 c0                	test   eax,eax
c0012246:	0f 95 c0             	setne  al
c0012249:	31 d2                	xor    edx,edx
c001224b:	0f b6 c0             	movzx  eax,al
c001224e:	f7 d8                	neg    eax
c0012250:	83 d2 00             	adc    edx,0x0
c0012253:	83 c4 10             	add    esp,0x10
c0012256:	f7 da                	neg    edx
c0012258:	5b                   	pop    ebx
c0012259:	5e                   	pop    esi
c001225a:	5f                   	pop    edi
c001225b:	c3                   	ret    

c001225c <SysPipe(regs*)>:
c001225c:	57                   	push   edi
c001225d:	56                   	push   esi
c001225e:	53                   	push   ebx
c001225f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012263:	83 ec 0c             	sub    esp,0xc
c0012266:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012269:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001226c:	6a 20                	push   0x20
c001226e:	e8 43 58 ff ff       	call   c0007ab6 <malloc>
c0012273:	89 c3                	mov    ebx,eax
c0012275:	58                   	pop    eax
c0012276:	5a                   	pop    edx
c0012277:	68 00 50 00 00       	push   0x5000
c001227c:	53                   	push   ebx
c001227d:	e8 a6 61 ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012282:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012285:	e8 2c 6f ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001228a:	89 07                	mov    DWORD PTR [edi],eax
c001228c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001228f:	e8 22 6f ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012294:	83 c4 10             	add    esp,0x10
c0012297:	89 06                	mov    DWORD PTR [esi],eax
c0012299:	31 d2                	xor    edx,edx
c001229b:	5b                   	pop    ebx
c001229c:	31 c0                	xor    eax,eax
c001229e:	5e                   	pop    esi
c001229f:	5f                   	pop    edi
c00122a0:	c3                   	ret    

c00122a1 <SysGetUnixTime(regs*)>:
c00122a1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00122a6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00122ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122b0:	e9 a1 9e ff ff       	jmp    c000c156 <Clock::timeInSecondsLocal()>

c00122b5 <string_ends_with(char const*, char const*)>:
c00122b5:	57                   	push   edi
c00122b6:	56                   	push   esi
c00122b7:	53                   	push   ebx
c00122b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122bc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00122c0:	83 ec 0c             	sub    esp,0xc
c00122c3:	53                   	push   ebx
c00122c4:	e8 a7 e2 fe ff       	call   c0000570 <strlen>
c00122c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00122cc:	89 c6                	mov    esi,eax
c00122ce:	e8 9d e2 fe ff       	call   c0000570 <strlen>
c00122d3:	83 c4 10             	add    esp,0x10
c00122d6:	39 c6                	cmp    esi,eax
c00122d8:	7d 06                	jge    c00122e0 <string_ends_with(char const*, char const*)+0x2b>
c00122da:	5b                   	pop    ebx
c00122db:	31 c0                	xor    eax,eax
c00122dd:	5e                   	pop    esi
c00122de:	5f                   	pop    edi
c00122df:	c3                   	ret    
c00122e0:	83 ec 08             	sub    esp,0x8
c00122e3:	29 c6                	sub    esi,eax
c00122e5:	57                   	push   edi
c00122e6:	01 f3                	add    ebx,esi
c00122e8:	53                   	push   ebx
c00122e9:	e8 62 e4 fe ff       	call   c0000750 <strcmp>
c00122ee:	83 c4 10             	add    esp,0x10
c00122f1:	85 c0                	test   eax,eax
c00122f3:	5b                   	pop    ebx
c00122f4:	0f 94 c0             	sete   al
c00122f7:	5e                   	pop    esi
c00122f8:	0f b6 c0             	movzx  eax,al
c00122fb:	5f                   	pop    edi
c00122fc:	c3                   	ret    

c00122fd <SysOpen(regs*)>:
c00122fd:	56                   	push   esi
c00122fe:	53                   	push   ebx
c00122ff:	81 ec 04 01 00 00    	sub    esp,0x104
c0012305:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001230c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001230f:	85 c0                	test   eax,eax
c0012311:	0f 84 bd 01 00 00    	je     c00124d4 <SysOpen(regs*)+0x1d7>
c0012317:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001231a:	85 c0                	test   eax,eax
c001231c:	0f 84 b2 01 00 00    	je     c00124d4 <SysOpen(regs*)+0x1d7>
c0012322:	83 ec 04             	sub    esp,0x4
c0012325:	68 db 1d 02 c0       	push   0xc0021ddb
c001232a:	50                   	push   eax
c001232b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001232f:	56                   	push   esi
c0012330:	e8 0f 92 ff ff       	call   c000b544 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012335:	89 34 24             	mov    DWORD PTR [esp],esi
c0012338:	e8 33 e2 fe ff       	call   c0000570 <strlen>
c001233d:	83 c4 10             	add    esp,0x10
c0012340:	83 e8 01             	sub    eax,0x1
c0012343:	74 21                	je     c0012366 <SysOpen(regs*)+0x69>
c0012345:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012349:	eb 12                	jmp    c001235d <SysOpen(regs*)+0x60>
c001234b:	83 fa 3a             	cmp    edx,0x3a
c001234e:	74 12                	je     c0012362 <SysOpen(regs*)+0x65>
c0012350:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012354:	83 e8 01             	sub    eax,0x1
c0012357:	74 0d                	je     c0012366 <SysOpen(regs*)+0x69>
c0012359:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001235d:	83 fa 2e             	cmp    edx,0x2e
c0012360:	75 e9                	jne    c001234b <SysOpen(regs*)+0x4e>
c0012362:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012366:	83 ec 08             	sub    esp,0x8
c0012369:	68 df 1d 02 c0       	push   0xc0021ddf
c001236e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012371:	50                   	push   eax
c0012372:	e8 3e ff ff ff       	call   c00122b5 <string_ends_with(char const*, char const*)>
c0012377:	83 c4 10             	add    esp,0x10
c001237a:	85 c0                	test   eax,eax
c001237c:	74 1d                	je     c001239b <SysOpen(regs*)+0x9e>
c001237e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012381:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012387:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001238e:	81 c4 04 01 00 00    	add    esp,0x104
c0012394:	31 c0                	xor    eax,eax
c0012396:	31 d2                	xor    edx,edx
c0012398:	5b                   	pop    ebx
c0012399:	5e                   	pop    esi
c001239a:	c3                   	ret    
c001239b:	83 ec 08             	sub    esp,0x8
c001239e:	68 e4 1d 02 c0       	push   0xc0021de4
c00123a3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123a6:	50                   	push   eax
c00123a7:	e8 09 ff ff ff       	call   c00122b5 <string_ends_with(char const*, char const*)>
c00123ac:	83 c4 10             	add    esp,0x10
c00123af:	85 c0                	test   eax,eax
c00123b1:	75 cb                	jne    c001237e <SysOpen(regs*)+0x81>
c00123b3:	83 ec 08             	sub    esp,0x8
c00123b6:	68 e0 1d 02 c0       	push   0xc0021de0
c00123bb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123be:	50                   	push   eax
c00123bf:	e8 8c e3 fe ff       	call   c0000750 <strcmp>
c00123c4:	83 c4 10             	add    esp,0x10
c00123c7:	85 c0                	test   eax,eax
c00123c9:	74 b3                	je     c001237e <SysOpen(regs*)+0x81>
c00123cb:	83 ec 08             	sub    esp,0x8
c00123ce:	68 df 1d 02 c0       	push   0xc0021ddf
c00123d3:	56                   	push   esi
c00123d4:	e8 dc fe ff ff       	call   c00122b5 <string_ends_with(char const*, char const*)>
c00123d9:	83 c4 10             	add    esp,0x10
c00123dc:	85 c0                	test   eax,eax
c00123de:	75 9e                	jne    c001237e <SysOpen(regs*)+0x81>
c00123e0:	83 ec 08             	sub    esp,0x8
c00123e3:	68 e9 1d 02 c0       	push   0xc0021de9
c00123e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123eb:	50                   	push   eax
c00123ec:	e8 c4 fe ff ff       	call   c00122b5 <string_ends_with(char const*, char const*)>
c00123f1:	83 c4 10             	add    esp,0x10
c00123f4:	85 c0                	test   eax,eax
c00123f6:	0f 85 eb 00 00 00    	jne    c00124e7 <SysOpen(regs*)+0x1ea>
c00123fc:	83 ec 08             	sub    esp,0x8
c00123ff:	68 ee 1d 02 c0       	push   0xc0021dee
c0012404:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012407:	50                   	push   eax
c0012408:	e8 a8 fe ff ff       	call   c00122b5 <string_ends_with(char const*, char const*)>
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	85 c0                	test   eax,eax
c0012412:	0f 85 cf 00 00 00    	jne    c00124e7 <SysOpen(regs*)+0x1ea>
c0012418:	83 ec 08             	sub    esp,0x8
c001241b:	68 ea 1d 02 c0       	push   0xc0021dea
c0012420:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012423:	51                   	push   ecx
c0012424:	e8 27 e3 fe ff       	call   c0000750 <strcmp>
c0012429:	83 c4 10             	add    esp,0x10
c001242c:	85 c0                	test   eax,eax
c001242e:	0f 84 b3 00 00 00    	je     c00124e7 <SysOpen(regs*)+0x1ea>
c0012434:	83 ec 08             	sub    esp,0x8
c0012437:	68 e9 1d 02 c0       	push   0xc0021de9
c001243c:	56                   	push   esi
c001243d:	e8 73 fe ff ff       	call   c00122b5 <string_ends_with(char const*, char const*)>
c0012442:	83 c4 10             	add    esp,0x10
c0012445:	85 c0                	test   eax,eax
c0012447:	0f 85 9a 00 00 00    	jne    c00124e7 <SysOpen(regs*)+0x1ea>
c001244d:	83 ec 0c             	sub    esp,0xc
c0012450:	68 14 01 00 00       	push   0x114
c0012455:	e8 5c 56 ff ff       	call   c0007ab6 <malloc>
c001245a:	83 c4 0c             	add    esp,0xc
c001245d:	89 c6                	mov    esi,eax
c001245f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012464:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012467:	50                   	push   eax
c0012468:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001246b:	52                   	push   edx
c001246c:	56                   	push   esi
c001246d:	e8 88 92 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c0012472:	83 c4 10             	add    esp,0x10
c0012475:	85 f6                	test   esi,esi
c0012477:	74 5b                	je     c00124d4 <SysOpen(regs*)+0x1d7>
c0012479:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001247c:	0f b6 c2             	movzx  eax,dl
c001247f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012482:	89 d0                	mov    eax,edx
c0012484:	83 e0 01             	and    eax,0x1
c0012487:	f6 c2 02             	test   dl,0x2
c001248a:	74 03                	je     c001248f <SysOpen(regs*)+0x192>
c001248c:	83 c8 02             	or     eax,0x2
c001248f:	f6 c2 04             	test   dl,0x4
c0012492:	74 03                	je     c0012497 <SysOpen(regs*)+0x19a>
c0012494:	83 c8 04             	or     eax,0x4
c0012497:	f6 c2 08             	test   dl,0x8
c001249a:	74 03                	je     c001249f <SysOpen(regs*)+0x1a2>
c001249c:	83 c8 0a             	or     eax,0xa
c001249f:	80 e2 10             	and    dl,0x10
c00124a2:	74 03                	je     c00124a7 <SysOpen(regs*)+0x1aa>
c00124a4:	83 c8 12             	or     eax,0x12
c00124a7:	83 ec 08             	sub    esp,0x8
c00124aa:	50                   	push   eax
c00124ab:	56                   	push   esi
c00124ac:	e8 05 93 ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c00124b1:	83 c4 10             	add    esp,0x10
c00124b4:	85 c0                	test   eax,eax
c00124b6:	75 1c                	jne    c00124d4 <SysOpen(regs*)+0x1d7>
c00124b8:	83 ec 0c             	sub    esp,0xc
c00124bb:	56                   	push   esi
c00124bc:	e8 f5 6c ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00124c1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00124c4:	83 c4 10             	add    esp,0x10
c00124c7:	89 02                	mov    DWORD PTR [edx],eax
c00124c9:	c1 f8 1f             	sar    eax,0x1f
c00124cc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00124cf:	e9 ba fe ff ff       	jmp    c001238e <SysOpen(regs*)+0x91>
c00124d4:	81 c4 04 01 00 00    	add    esp,0x104
c00124da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124e4:	5b                   	pop    ebx
c00124e5:	5e                   	pop    esi
c00124e6:	c3                   	ret    
c00124e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00124ea:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00124f0:	e9 92 fe ff ff       	jmp    c0012387 <SysOpen(regs*)+0x8a>

c00124f5 <KeSystemCall(regs*, void*)>:
c00124f5:	53                   	push   ebx
c00124f6:	83 ec 08             	sub    esp,0x8
c00124f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124fd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012500:	83 f8 3b             	cmp    eax,0x3b
c0012503:	77 16                	ja     c001251b <KeSystemCall(regs*, void*)+0x26>
c0012505:	8b 14 85 00 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce00]
c001250c:	85 d2                	test   edx,edx
c001250e:	74 0b                	je     c001251b <KeSystemCall(regs*, void*)+0x26>
c0012510:	83 ec 0c             	sub    esp,0xc
c0012513:	53                   	push   ebx
c0012514:	ff d2                	call   edx
c0012516:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012519:	eb 0d                	jmp    c0012528 <KeSystemCall(regs*, void*)+0x33>
c001251b:	52                   	push   edx
c001251c:	52                   	push   edx
c001251d:	50                   	push   eax
c001251e:	68 f3 1d 02 c0       	push   0xc0021df3
c0012523:	e8 1d 84 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012528:	83 c4 10             	add    esp,0x10
c001252b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012530:	31 d2                	xor    edx,edx
c0012532:	83 c4 08             	add    esp,0x8
c0012535:	5b                   	pop    ebx
c0012536:	c3                   	ret    
c0012537:	90                   	nop

c0012538 <KeSwitchEndian16(unsigned short)>:
c0012538:	83 ec 04             	sub    esp,0x4
c001253b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001253f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012543:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012547:	c1 f8 08             	sar    eax,0x8
c001254a:	89 c2                	mov    edx,eax
c001254c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012550:	c1 e0 08             	shl    eax,0x8
c0012553:	09 d0                	or     eax,edx
c0012555:	83 c4 04             	add    esp,0x4
c0012558:	c3                   	ret    
c0012559:	8d 76 00             	lea    esi,[esi+0x0]

c001255c <KeSwitchEndian32(unsigned int)>:
c001255c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012560:	c1 e8 18             	shr    eax,0x18
c0012563:	89 c2                	mov    edx,eax
c0012565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012569:	c1 e0 08             	shl    eax,0x8
c001256c:	25 00 00 ff 00       	and    eax,0xff0000
c0012571:	09 c2                	or     edx,eax
c0012573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012577:	c1 e8 08             	shr    eax,0x8
c001257a:	25 00 ff 00 00       	and    eax,0xff00
c001257f:	09 c2                	or     edx,eax
c0012581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012585:	c1 e0 18             	shl    eax,0x18
c0012588:	09 d0                	or     eax,edx
c001258a:	c3                   	ret    
c001258b:	90                   	nop

c001258c <EthernetCRC32(unsigned char*, int)>:
c001258c:	83 ec 10             	sub    esp,0x10
c001258f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012594:	75 0a                	jne    c00125a0 <EthernetCRC32(unsigned char*, int)+0x14>
c0012596:	b8 00 00 00 00       	mov    eax,0x0
c001259b:	e9 8c 00 00 00       	jmp    c001262c <EthernetCRC32(unsigned char*, int)+0xa0>
c00125a0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00125a5:	7f 09                	jg     c00125b0 <EthernetCRC32(unsigned char*, int)+0x24>
c00125a7:	b8 00 00 00 00       	mov    eax,0x0
c00125ac:	eb 7e                	jmp    c001262c <EthernetCRC32(unsigned char*, int)+0xa0>
c00125ae:	66 90                	xchg   ax,ax
c00125b0:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00125b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00125c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125c4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00125c8:	7d 5a                	jge    c0012624 <EthernetCRC32(unsigned char*, int)+0x98>
c00125ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00125ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125d2:	01 d0                	add    eax,edx
c00125d4:	8a 00                	mov    al,BYTE PTR [eax]
c00125d6:	0f b6 c0             	movzx  eax,al
c00125d9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00125dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00125e5:	8d 76 00             	lea    esi,[esi+0x0]
c00125e8:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00125ed:	7f 2d                	jg     c001261c <EthernetCRC32(unsigned char*, int)+0x90>
c00125ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125f3:	83 e0 01             	and    eax,0x1
c00125f6:	74 10                	je     c0012608 <EthernetCRC32(unsigned char*, int)+0x7c>
c00125f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125fc:	d1 e8                	shr    eax,1
c00125fe:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012603:	eb 0b                	jmp    c0012610 <EthernetCRC32(unsigned char*, int)+0x84>
c0012605:	8d 76 00             	lea    esi,[esi+0x0]
c0012608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001260c:	d1 e8                	shr    eax,1
c001260e:	66 90                	xchg   ax,ax
c0012610:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012614:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012619:	eb cd                	jmp    c00125e8 <EthernetCRC32(unsigned char*, int)+0x5c>
c001261b:	90                   	nop
c001261c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012621:	eb 9d                	jmp    c00125c0 <EthernetCRC32(unsigned char*, int)+0x34>
c0012623:	90                   	nop
c0012624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012628:	f7 d0                	not    eax
c001262a:	66 90                	xchg   ax,ax
c001262c:	83 c4 10             	add    esp,0x10
c001262f:	c3                   	ret    

c0012630 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012630:	83 ec 2c             	sub    esp,0x2c
c0012633:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012637:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001263c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012640:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012644:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012648:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001264b:	0f b7 c0             	movzx  eax,ax
c001264e:	3d 06 08 00 00       	cmp    eax,0x806
c0012653:	75 13                	jne    c0012668 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012655:	83 ec 0c             	sub    esp,0xc
c0012658:	68 07 1e 02 c0       	push   0xc0021e07
c001265d:	e8 e3 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012662:	83 c4 10             	add    esp,0x10
c0012665:	eb 25                	jmp    c001268c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012667:	90                   	nop
c0012668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001266c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001266f:	0f b7 c0             	movzx  eax,ax
c0012672:	3d 00 08 00 00       	cmp    eax,0x800
c0012677:	75 13                	jne    c001268c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012679:	83 ec 0c             	sub    esp,0xc
c001267c:	68 1d 1e 02 c0       	push   0xc0021e1d
c0012681:	e8 bf 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012686:	83 c4 10             	add    esp,0x10
c0012689:	8d 76 00             	lea    esi,[esi+0x0]
c001268c:	90                   	nop
c001268d:	83 c4 2c             	add    esp,0x2c
c0012690:	c3                   	ret    

c0012691 <CmOpen(char const*)>:
c0012691:	57                   	push   edi
c0012692:	56                   	push   esi
c0012693:	53                   	push   ebx
c0012694:	83 ec 1c             	sub    esp,0x1c
c0012697:	6a 30                	push   0x30
c0012699:	e8 18 54 ff ff       	call   c0007ab6 <malloc>
c001269e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00126a5:	89 c3                	mov    ebx,eax
c00126a7:	e8 0a 54 ff ff       	call   c0007ab6 <malloc>
c00126ac:	83 c4 0c             	add    esp,0xc
c00126af:	89 c6                	mov    esi,eax
c00126b1:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c00126b7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00126bb:	50                   	push   eax
c00126bc:	e8 39 90 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c00126c1:	83 c4 0c             	add    esp,0xc
c00126c4:	89 33                	mov    DWORD PTR [ebx],esi
c00126c6:	8d 44 24 07          	lea    eax,[esp+0x7]
c00126ca:	50                   	push   eax
c00126cb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00126cf:	50                   	push   eax
c00126d0:	56                   	push   esi
c00126d1:	e8 e2 93 ff ff       	call   c000bab8 <File::stat(unsigned long long*, bool*)>
c00126d6:	5a                   	pop    edx
c00126d7:	59                   	pop    ecx
c00126d8:	6a 01                	push   0x1
c00126da:	ff 33                	push   DWORD PTR [ebx]
c00126dc:	e8 d5 90 ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c00126e1:	5e                   	pop    esi
c00126e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126e6:	e8 cb 53 ff ff       	call   c0007ab6 <malloc>
c00126eb:	5a                   	pop    edx
c00126ec:	89 c7                	mov    edi,eax
c00126ee:	8d 74 24 10          	lea    esi,[esp+0x10]
c00126f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00126f6:	56                   	push   esi
c00126f7:	57                   	push   edi
c00126f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012700:	50                   	push   eax
c0012701:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012704:	83 c4 14             	add    esp,0x14
c0012707:	ff 33                	push   DWORD PTR [ebx]
c0012709:	e8 06 91 ff ff       	call   c000b814 <File::close()>
c001270e:	59                   	pop    ecx
c001270f:	58                   	pop    eax
c0012710:	6a 13                	push   0x13
c0012712:	ff 33                	push   DWORD PTR [ebx]
c0012714:	e8 9d 90 ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c0012719:	8b 03                	mov    eax,DWORD PTR [ebx]
c001271b:	8b 10                	mov    edx,DWORD PTR [eax]
c001271d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012720:	57                   	push   edi
c0012721:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012725:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012729:	50                   	push   eax
c001272a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001272d:	83 c4 14             	add    esp,0x14
c0012730:	57                   	push   edi
c0012731:	e8 90 53 ff ff       	call   c0007ac6 <free>
c0012736:	83 c4 10             	add    esp,0x10
c0012739:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001273c:	75 10                	jne    c001274e <CmOpen(char const*)+0xbd>
c001273e:	83 ec 0c             	sub    esp,0xc
c0012741:	68 32 1e 02 c0       	push   0xc0021e32
c0012746:	e8 c2 ea ff ff       	call   c001120d <KePanic(char const*)>
c001274b:	83 c4 10             	add    esp,0x10
c001274e:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012751:	50                   	push   eax
c0012752:	6a 00                	push   0x0
c0012754:	6a 00                	push   0x0
c0012756:	ff 33                	push   DWORD PTR [ebx]
c0012758:	e8 17 91 ff ff       	call   c000b874 <File::seek(unsigned long long)>
c001275d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001275f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012761:	89 34 24             	mov    DWORD PTR [esp],esi
c0012764:	57                   	push   edi
c0012765:	6a 00                	push   0x0
c0012767:	6a 2b                	push   0x2b
c0012769:	50                   	push   eax
c001276a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001276d:	83 c4 1c             	add    esp,0x1c
c0012770:	6a 00                	push   0x0
c0012772:	6a 00                	push   0x0
c0012774:	ff 33                	push   DWORD PTR [ebx]
c0012776:	e8 f9 90 ff ff       	call   c000b874 <File::seek(unsigned long long)>
c001277b:	83 c4 0c             	add    esp,0xc
c001277e:	6a 08                	push   0x8
c0012780:	68 43 1e 02 c0       	push   0xc0021e43
c0012785:	57                   	push   edi
c0012786:	e8 f5 db fe ff       	call   c0000380 <memcmp>
c001278b:	83 c4 10             	add    esp,0x10
c001278e:	85 c0                	test   eax,eax
c0012790:	74 10                	je     c00127a2 <CmOpen(char const*)+0x111>
c0012792:	83 ec 0c             	sub    esp,0xc
c0012795:	68 4c 1e 02 c0       	push   0xc0021e4c
c001279a:	e8 6e ea ff ff       	call   c001120d <KePanic(char const*)>
c001279f:	83 c4 10             	add    esp,0x10
c00127a2:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00127a6:	89 d8                	mov    eax,ebx
c00127a8:	83 c4 10             	add    esp,0x10
c00127ab:	5b                   	pop    ebx
c00127ac:	5e                   	pop    esi
c00127ad:	5f                   	pop    edi
c00127ae:	c3                   	ret    

c00127af <CmClose(Reghive_Tag*)>:
c00127af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127b3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00127b7:	74 0b                	je     c00127c4 <CmClose(Reghive_Tag*)+0x15>
c00127b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00127bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127bf:	e9 50 90 ff ff       	jmp    c000b814 <File::close()>
c00127c4:	c3                   	ret    

c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00127c5:	53                   	push   ebx
c00127c6:	83 ec 18             	sub    esp,0x18
c00127c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00127cd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00127d1:	74 29                	je     c00127fc <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00127d3:	50                   	push   eax
c00127d4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00127d9:	99                   	cdq    
c00127da:	52                   	push   edx
c00127db:	50                   	push   eax
c00127dc:	ff 33                	push   DWORD PTR [ebx]
c00127de:	e8 91 90 ff ff       	call   c000b874 <File::seek(unsigned long long)>
c00127e3:	5a                   	pop    edx
c00127e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127e6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00127ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00127ec:	51                   	push   ecx
c00127ed:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00127f1:	6a 00                	push   0x0
c00127f3:	6a 2b                	push   0x2b
c00127f5:	50                   	push   eax
c00127f6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127f9:	83 c4 20             	add    esp,0x20
c00127fc:	83 c4 18             	add    esp,0x18
c00127ff:	5b                   	pop    ebx
c0012800:	c3                   	ret    

c0012801 <CmGetString(Reghive_Tag*, int, char*)>:
c0012801:	55                   	push   ebp
c0012802:	57                   	push   edi
c0012803:	56                   	push   esi
c0012804:	53                   	push   ebx
c0012805:	31 db                	xor    ebx,ebx
c0012807:	83 ec 70             	sub    esp,0x70
c001280a:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012811:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012815:	50                   	push   eax
c0012816:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001281d:	55                   	push   ebp
c001281e:	e8 a2 ff ff ff       	call   c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012823:	83 c4 10             	add    esp,0x10
c0012826:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001282b:	c1 e0 08             	shl    eax,0x8
c001282e:	89 c2                	mov    edx,eax
c0012830:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012835:	09 d0                	or     eax,edx
c0012837:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c001283c:	c1 e0 08             	shl    eax,0x8
c001283f:	09 d0                	or     eax,edx
c0012841:	74 25                	je     c0012868 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012843:	6b fb 0d             	imul   edi,ebx,0xd
c0012846:	52                   	push   edx
c0012847:	8d 54 24 39          	lea    edx,[esp+0x39]
c001284b:	52                   	push   edx
c001284c:	50                   	push   eax
c001284d:	55                   	push   ebp
c001284e:	e8 72 ff ff ff       	call   c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012853:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012857:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c001285e:	b9 27 00 00 00       	mov    ecx,0x27
c0012863:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012865:	83 c4 10             	add    esp,0x10
c0012868:	83 c3 03             	add    ebx,0x3
c001286b:	83 fb 15             	cmp    ebx,0x15
c001286e:	75 b6                	jne    c0012826 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012870:	83 c4 6c             	add    esp,0x6c
c0012873:	5b                   	pop    ebx
c0012874:	5e                   	pop    esi
c0012875:	5f                   	pop    edi
c0012876:	5d                   	pop    ebp
c0012877:	c3                   	ret    

c0012878 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012878:	83 ec 40             	sub    esp,0x40
c001287b:	8d 44 24 09          	lea    eax,[esp+0x9]
c001287f:	50                   	push   eax
c0012880:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012884:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012888:	e8 38 ff ff ff       	call   c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001288d:	83 c4 10             	add    esp,0x10
c0012890:	83 c8 ff             	or     eax,0xffffffff
c0012893:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012898:	75 19                	jne    c00128b3 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001289a:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001289f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00128a4:	c1 e0 08             	shl    eax,0x8
c00128a7:	09 c2                	or     edx,eax
c00128a9:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00128ae:	c1 e0 10             	shl    eax,0x10
c00128b1:	09 d0                	or     eax,edx
c00128b3:	83 c4 3c             	add    esp,0x3c
c00128b6:	c3                   	ret    

c00128b7 <CmGetNext(Reghive_Tag*, int)>:
c00128b7:	83 ec 40             	sub    esp,0x40
c00128ba:	8d 44 24 09          	lea    eax,[esp+0x9]
c00128be:	50                   	push   eax
c00128bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128c7:	e8 f9 fe ff ff       	call   c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128cc:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00128d1:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00128d6:	c1 e0 08             	shl    eax,0x8
c00128d9:	09 c2                	or     edx,eax
c00128db:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00128e0:	83 c4 4c             	add    esp,0x4c
c00128e3:	c1 e0 10             	shl    eax,0x10
c00128e6:	09 d0                	or     eax,edx
c00128e8:	c3                   	ret    

c00128e9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00128e9:	53                   	push   ebx
c00128ea:	83 ec 18             	sub    esp,0x18
c00128ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00128f1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128f5:	74 29                	je     c0012920 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00128f7:	50                   	push   eax
c00128f8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00128fd:	99                   	cdq    
c00128fe:	52                   	push   edx
c00128ff:	50                   	push   eax
c0012900:	ff 33                	push   DWORD PTR [ebx]
c0012902:	e8 6d 8f ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0012907:	5a                   	pop    edx
c0012908:	8b 03                	mov    eax,DWORD PTR [ebx]
c001290a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001290e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012910:	51                   	push   ecx
c0012911:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012915:	6a 00                	push   0x0
c0012917:	6a 2b                	push   0x2b
c0012919:	50                   	push   eax
c001291a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001291d:	83 c4 20             	add    esp,0x20
c0012920:	83 c4 18             	add    esp,0x18
c0012923:	5b                   	pop    ebx
c0012924:	c3                   	ret    

c0012925 <CmFreeExtent(Reghive_Tag*, int)>:
c0012925:	53                   	push   ebx
c0012926:	83 ec 3c             	sub    esp,0x3c
c0012929:	6a 2b                	push   0x2b
c001292b:	6a 00                	push   0x0
c001292d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012931:	53                   	push   ebx
c0012932:	e8 b9 db fe ff       	call   c00004f0 <memset>
c0012937:	83 c4 0c             	add    esp,0xc
c001293a:	53                   	push   ebx
c001293b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001293f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012943:	e8 a1 ff ff ff       	call   c00128e9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012948:	83 c4 48             	add    esp,0x48
c001294b:	5b                   	pop    ebx
c001294c:	c3                   	ret    

c001294d <CmUpdateHeader(Reghive_Tag*)>:
c001294d:	83 ec 0c             	sub    esp,0xc
c0012950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012954:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012958:	74 10                	je     c001296a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001295a:	52                   	push   edx
c001295b:	8d 50 05             	lea    edx,[eax+0x5]
c001295e:	52                   	push   edx
c001295f:	6a 00                	push   0x0
c0012961:	50                   	push   eax
c0012962:	e8 82 ff ff ff       	call   c00128e9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012967:	83 c4 10             	add    esp,0x10
c001296a:	83 c4 0c             	add    esp,0xc
c001296d:	c3                   	ret    

c001296e <CmExpand(Reghive_Tag*, int)>:
c001296e:	57                   	push   edi
c001296f:	56                   	push   esi
c0012970:	83 ce ff             	or     esi,0xffffffff
c0012973:	53                   	push   ebx
c0012974:	83 ec 30             	sub    esp,0x30
c0012977:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001297b:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001297f:	74 5f                	je     c00129e0 <CmExpand(Reghive_Tag*, int)+0x72>
c0012981:	31 d2                	xor    edx,edx
c0012983:	31 f6                	xor    esi,esi
c0012985:	50                   	push   eax
c0012986:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c001298a:	52                   	push   edx
c001298b:	50                   	push   eax
c001298c:	ff 33                	push   DWORD PTR [ebx]
c001298e:	e8 e1 8e ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0012993:	83 c4 0c             	add    esp,0xc
c0012996:	6a 2b                	push   0x2b
c0012998:	6a 00                	push   0x0
c001299a:	8d 7c 24 11          	lea    edi,[esp+0x11]
c001299e:	57                   	push   edi
c001299f:	e8 4c db fe ff       	call   c00004f0 <memset>
c00129a4:	83 c4 10             	add    esp,0x10
c00129a7:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00129ab:	7d 1b                	jge    c00129c8 <CmExpand(Reghive_Tag*, int)+0x5a>
c00129ad:	83 ec 0c             	sub    esp,0xc
c00129b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129b2:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00129b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00129b8:	46                   	inc    esi
c00129b9:	51                   	push   ecx
c00129ba:	57                   	push   edi
c00129bb:	6a 00                	push   0x0
c00129bd:	6a 2b                	push   0x2b
c00129bf:	50                   	push   eax
c00129c0:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00129c3:	83 c4 20             	add    esp,0x20
c00129c6:	eb df                	jmp    c00129a7 <CmExpand(Reghive_Tag*, int)+0x39>
c00129c8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00129cc:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00129cf:	83 ec 0c             	sub    esp,0xc
c00129d2:	01 f2                	add    edx,esi
c00129d4:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00129d7:	53                   	push   ebx
c00129d8:	e8 70 ff ff ff       	call   c001294d <CmUpdateHeader(Reghive_Tag*)>
c00129dd:	83 c4 10             	add    esp,0x10
c00129e0:	83 c4 30             	add    esp,0x30
c00129e3:	89 f0                	mov    eax,esi
c00129e5:	5b                   	pop    ebx
c00129e6:	5e                   	pop    esi
c00129e7:	5f                   	pop    edi
c00129e8:	c3                   	ret    

c00129e9 <CmFindUnusedExtent(Reghive_Tag*)>:
c00129e9:	55                   	push   ebp
c00129ea:	57                   	push   edi
c00129eb:	56                   	push   esi
c00129ec:	53                   	push   ebx
c00129ed:	83 cb ff             	or     ebx,0xffffffff
c00129f0:	83 ec 1c             	sub    esp,0x1c
c00129f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00129f7:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00129fb:	74 68                	je     c0012a65 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00129fd:	be 2b 00 00 00       	mov    esi,0x2b
c0012a02:	51                   	push   ecx
c0012a03:	31 ff                	xor    edi,edi
c0012a05:	6a 00                	push   0x0
c0012a07:	31 db                	xor    ebx,ebx
c0012a09:	6a 00                	push   0x0
c0012a0b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012a0e:	e8 61 8e ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0012a13:	83 c4 10             	add    esp,0x10
c0012a16:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012a19:	76 3b                	jbe    c0012a56 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012a1b:	83 ec 0c             	sub    esp,0xc
c0012a1e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a21:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a25:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a27:	51                   	push   ecx
c0012a28:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012a2c:	51                   	push   ecx
c0012a2d:	6a 00                	push   0x0
c0012a2f:	6a 01                	push   0x1
c0012a31:	50                   	push   eax
c0012a32:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012a35:	83 c4 20             	add    esp,0x20
c0012a38:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012a3d:	74 26                	je     c0012a65 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a3f:	43                   	inc    ebx
c0012a40:	52                   	push   edx
c0012a41:	57                   	push   edi
c0012a42:	56                   	push   esi
c0012a43:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012a46:	e8 29 8e ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0012a4b:	83 c6 2b             	add    esi,0x2b
c0012a4e:	83 d7 00             	adc    edi,0x0
c0012a51:	83 c4 10             	add    esp,0x10
c0012a54:	eb c0                	jmp    c0012a16 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012a56:	50                   	push   eax
c0012a57:	50                   	push   eax
c0012a58:	6a 40                	push   0x40
c0012a5a:	55                   	push   ebp
c0012a5b:	e8 0e ff ff ff       	call   c001296e <CmExpand(Reghive_Tag*, int)>
c0012a60:	83 c4 10             	add    esp,0x10
c0012a63:	89 c3                	mov    ebx,eax
c0012a65:	83 c4 1c             	add    esp,0x1c
c0012a68:	89 d8                	mov    eax,ebx
c0012a6a:	5b                   	pop    ebx
c0012a6b:	5e                   	pop    esi
c0012a6c:	5f                   	pop    edi
c0012a6d:	5d                   	pop    ebp
c0012a6e:	c3                   	ret    

c0012a6f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012a6f:	55                   	push   ebp
c0012a70:	57                   	push   edi
c0012a71:	56                   	push   esi
c0012a72:	53                   	push   ebx
c0012a73:	81 ec 88 00 00 00    	sub    esp,0x88
c0012a79:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012a80:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a87:	e8 5d ff ff ff       	call   c00129e9 <CmFindUnusedExtent(Reghive_Tag*)>
c0012a8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a90:	83 c4 0c             	add    esp,0xc
c0012a93:	6a 2b                	push   0x2b
c0012a95:	6a 00                	push   0x0
c0012a97:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012a9b:	55                   	push   ebp
c0012a9c:	e8 4f da fe ff       	call   c00004f0 <memset>
c0012aa1:	83 c4 10             	add    esp,0x10
c0012aa4:	85 db                	test   ebx,ebx
c0012aa6:	74 12                	je     c0012aba <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012aa8:	51                   	push   ecx
c0012aa9:	55                   	push   ebp
c0012aaa:	53                   	push   ebx
c0012aab:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ab2:	e8 0e fd ff ff       	call   c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ab7:	83 c4 10             	add    esp,0x10
c0012aba:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012abe:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012ac5:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012aca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012acc:	85 db                	test   ebx,ebx
c0012ace:	74 49                	je     c0012b19 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012ad0:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012ad5:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012ada:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ade:	c1 e0 08             	shl    eax,0x8
c0012ae1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012ae7:	09 c8                	or     eax,ecx
c0012ae9:	74 11                	je     c0012afc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012aeb:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012aef:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012af3:	c1 e8 10             	shr    eax,0x10
c0012af6:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012afa:	eb 0f                	jmp    c0012b0b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012afc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012b01:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b06:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b0b:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012b0f:	c1 ea 08             	shr    edx,0x8
c0012b12:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012b17:	eb 0f                	jmp    c0012b28 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012b19:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012b1e:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b23:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b28:	52                   	push   edx
c0012b29:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012b2d:	50                   	push   eax
c0012b2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b32:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b39:	e8 ab fd ff ff       	call   c00128e9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b3e:	83 c4 10             	add    esp,0x10
c0012b41:	85 db                	test   ebx,ebx
c0012b43:	74 12                	je     c0012b57 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012b45:	50                   	push   eax
c0012b46:	55                   	push   ebp
c0012b47:	53                   	push   ebx
c0012b48:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b4f:	e8 95 fd ff ff       	call   c00128e9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b54:	83 c4 10             	add    esp,0x10
c0012b57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b5b:	83 c4 7c             	add    esp,0x7c
c0012b5e:	5b                   	pop    ebx
c0012b5f:	5e                   	pop    esi
c0012b60:	5f                   	pop    edi
c0012b61:	5d                   	pop    ebp
c0012b62:	c3                   	ret    

c0012b63 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012b63:	55                   	push   ebp
c0012b64:	57                   	push   edi
c0012b65:	56                   	push   esi
c0012b66:	53                   	push   ebx
c0012b67:	bb 27 00 00 00       	mov    ebx,0x27
c0012b6c:	81 ec 88 00 00 00    	sub    esp,0x88
c0012b72:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012b79:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012b80:	e8 eb d9 fe ff       	call   c0000570 <strlen>
c0012b85:	8d 48 26             	lea    ecx,[eax+0x26]
c0012b88:	89 c8                	mov    eax,ecx
c0012b8a:	99                   	cdq    
c0012b8b:	f7 fb                	idiv   ebx
c0012b8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012b91:	83 c4 10             	add    esp,0x10
c0012b94:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012b9a:	7e 10                	jle    c0012bac <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012b9c:	83 ec 0c             	sub    esp,0xc
c0012b9f:	68 5d 1e 02 c0       	push   0xc0021e5d
c0012ba4:	e8 64 e6 ff ff       	call   c001120d <KePanic(char const*)>
c0012ba9:	83 c4 10             	add    esp,0x10
c0012bac:	31 ff                	xor    edi,edi
c0012bae:	50                   	push   eax
c0012baf:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012bb3:	53                   	push   ebx
c0012bb4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012bbb:	56                   	push   esi
c0012bbc:	e8 04 fc ff ff       	call   c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012bc1:	83 c4 10             	add    esp,0x10
c0012bc4:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012bc8:	89 d0                	mov    eax,edx
c0012bca:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012bce:	c1 e0 08             	shl    eax,0x8
c0012bd1:	09 c2                	or     edx,eax
c0012bd3:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012bd7:	c1 e2 08             	shl    edx,0x8
c0012bda:	09 c2                	or     edx,eax
c0012bdc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012be0:	7e 76                	jle    c0012c58 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012be2:	85 d2                	test   edx,edx
c0012be4:	75 25                	jne    c0012c0b <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012be6:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012beb:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012bef:	50                   	push   eax
c0012bf0:	6a 00                	push   0x0
c0012bf2:	6a 00                	push   0x0
c0012bf4:	56                   	push   esi
c0012bf5:	e8 75 fe ff ff       	call   c0012a6f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012bfa:	83 c4 10             	add    esp,0x10
c0012bfd:	89 c2                	mov    edx,eax
c0012bff:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012c02:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012c05:	c1 f8 10             	sar    eax,0x10
c0012c08:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012c0b:	55                   	push   ebp
c0012c0c:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012c10:	55                   	push   ebp
c0012c11:	52                   	push   edx
c0012c12:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012c16:	56                   	push   esi
c0012c17:	e8 a9 fb ff ff       	call   c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c1c:	83 c4 0c             	add    esp,0xc
c0012c1f:	6a 27                	push   0x27
c0012c21:	6a 00                	push   0x0
c0012c23:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c27:	51                   	push   ecx
c0012c28:	e8 c3 d8 fe ff       	call   c00004f0 <memset>
c0012c2d:	83 c4 0c             	add    esp,0xc
c0012c30:	6b c7 27             	imul   eax,edi,0x27
c0012c33:	6a 27                	push   0x27
c0012c35:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012c3c:	50                   	push   eax
c0012c3d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c41:	51                   	push   ecx
c0012c42:	e8 39 da fe ff       	call   c0000680 <strncpy>
c0012c47:	83 c4 0c             	add    esp,0xc
c0012c4a:	55                   	push   ebp
c0012c4b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c4f:	52                   	push   edx
c0012c50:	56                   	push   esi
c0012c51:	e8 93 fc ff ff       	call   c00128e9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c56:	eb 19                	jmp    c0012c71 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012c58:	85 d2                	test   edx,edx
c0012c5a:	74 18                	je     c0012c74 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012c5c:	51                   	push   ecx
c0012c5d:	51                   	push   ecx
c0012c5e:	52                   	push   edx
c0012c5f:	56                   	push   esi
c0012c60:	e8 c0 fc ff ff       	call   c0012925 <CmFreeExtent(Reghive_Tag*, int)>
c0012c65:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012c69:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012c6d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012c71:	83 c4 10             	add    esp,0x10
c0012c74:	47                   	inc    edi
c0012c75:	83 c3 03             	add    ebx,0x3
c0012c78:	83 ff 07             	cmp    edi,0x7
c0012c7b:	0f 85 43 ff ff ff    	jne    c0012bc4 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012c81:	50                   	push   eax
c0012c82:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012c86:	50                   	push   eax
c0012c87:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c8e:	56                   	push   esi
c0012c8f:	e8 55 fc ff ff       	call   c00128e9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c94:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012c9a:	5b                   	pop    ebx
c0012c9b:	5e                   	pop    esi
c0012c9c:	5f                   	pop    edi
c0012c9d:	5d                   	pop    ebp
c0012c9e:	c3                   	ret    

c0012c9f <CmGetMatch(char*, char*, bool, bool*)>:
c0012c9f:	56                   	push   esi
c0012ca0:	53                   	push   ebx
c0012ca1:	50                   	push   eax
c0012ca2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ca6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012cab:	74 25                	je     c0012cd2 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012cad:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012cb0:	31 db                	xor    ebx,ebx
c0012cb2:	50                   	push   eax
c0012cb3:	50                   	push   eax
c0012cb4:	8d 04 9d 00 33 02 c0 	lea    eax,[ebx*4-0x3ffdcd00]
c0012cbb:	50                   	push   eax
c0012cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cc0:	e8 8b da fe ff       	call   c0000750 <strcmp>
c0012cc5:	83 c4 10             	add    esp,0x10
c0012cc8:	85 c0                	test   eax,eax
c0012cca:	74 2e                	je     c0012cfa <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012ccc:	43                   	inc    ebx
c0012ccd:	83 fb 3f             	cmp    ebx,0x3f
c0012cd0:	75 e0                	jne    c0012cb2 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012cd2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012cd5:	31 db                	xor    ebx,ebx
c0012cd7:	8d 04 9d 00 33 02 c0 	lea    eax,[ebx*4-0x3ffdcd00]
c0012cde:	51                   	push   ecx
c0012cdf:	51                   	push   ecx
c0012ce0:	50                   	push   eax
c0012ce1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ce5:	e8 66 da fe ff       	call   c0000750 <strcmp>
c0012cea:	83 c4 10             	add    esp,0x10
c0012ced:	85 c0                	test   eax,eax
c0012cef:	74 09                	je     c0012cfa <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012cf1:	43                   	inc    ebx
c0012cf2:	83 fb 3f             	cmp    ebx,0x3f
c0012cf5:	75 e0                	jne    c0012cd7 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012cf7:	83 cb ff             	or     ebx,0xffffffff
c0012cfa:	89 d8                	mov    eax,ebx
c0012cfc:	5a                   	pop    edx
c0012cfd:	5b                   	pop    ebx
c0012cfe:	5e                   	pop    esi
c0012cff:	c3                   	ret    

c0012d00 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012d00:	55                   	push   ebp
c0012d01:	31 c0                	xor    eax,eax
c0012d03:	57                   	push   edi
c0012d04:	56                   	push   esi
c0012d05:	53                   	push   ebx
c0012d06:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d0a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d0e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012d10:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012d14:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012d17:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012d1b:	83 fd 1f             	cmp    ebp,0x1f
c0012d1e:	7f 0b                	jg     c0012d2b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012d20:	0f b6 c2             	movzx  eax,dl
c0012d23:	d3 e0                	shl    eax,cl
c0012d25:	09 07                	or     DWORD PTR [edi],eax
c0012d27:	b0 01                	mov    al,0x1
c0012d29:	01 33                	add    DWORD PTR [ebx],esi
c0012d2b:	5b                   	pop    ebx
c0012d2c:	5e                   	pop    esi
c0012d2d:	5f                   	pop    edi
c0012d2e:	5d                   	pop    ebp
c0012d2f:	c3                   	ret    

c0012d30 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012d30:	57                   	push   edi
c0012d31:	56                   	push   esi
c0012d32:	53                   	push   ebx
c0012d33:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012d37:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012d3b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012d3f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d43:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012d45:	7c 17                	jl     c0012d5e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012d47:	8b 17                	mov    edx,DWORD PTR [edi]
c0012d49:	b8 01 00 00 00       	mov    eax,0x1
c0012d4e:	d3 e0                	shl    eax,cl
c0012d50:	48                   	dec    eax
c0012d51:	21 d0                	and    eax,edx
c0012d53:	d3 ea                	shr    edx,cl
c0012d55:	89 17                	mov    DWORD PTR [edi],edx
c0012d57:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012d59:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d5c:	eb 05                	jmp    c0012d63 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012d5e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d61:	31 c0                	xor    eax,eax
c0012d63:	5b                   	pop    ebx
c0012d64:	5e                   	pop    esi
c0012d65:	5f                   	pop    edi
c0012d66:	c3                   	ret    

c0012d67 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012d67:	83 ec 40             	sub    esp,0x40
c0012d6a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012d6e:	50                   	push   eax
c0012d6f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d73:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d77:	e8 49 fa ff ff       	call   c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d7c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012d80:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012d84:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012d88:	89 10                	mov    DWORD PTR [eax],edx
c0012d8a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012d8d:	83 c4 4c             	add    esp,0x4c
c0012d90:	c3                   	ret    

c0012d91 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012d91:	55                   	push   ebp
c0012d92:	57                   	push   edi
c0012d93:	56                   	push   esi
c0012d94:	53                   	push   ebx
c0012d95:	83 ec 40             	sub    esp,0x40
c0012d98:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012d9c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012da0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012da4:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012da8:	53                   	push   ebx
c0012da9:	56                   	push   esi
c0012daa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012dae:	e8 12 fa ff ff       	call   c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012db3:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012db7:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012dbb:	83 c4 0c             	add    esp,0xc
c0012dbe:	53                   	push   ebx
c0012dbf:	56                   	push   esi
c0012dc0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012dc4:	e8 20 fb ff ff       	call   c00128e9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012dc9:	83 c4 4c             	add    esp,0x4c
c0012dcc:	5b                   	pop    ebx
c0012dcd:	5e                   	pop    esi
c0012dce:	5f                   	pop    edi
c0012dcf:	5d                   	pop    ebp
c0012dd0:	c3                   	ret    

c0012dd1 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012dd1:	55                   	push   ebp
c0012dd2:	57                   	push   edi
c0012dd3:	56                   	push   esi
c0012dd4:	31 f6                	xor    esi,esi
c0012dd6:	53                   	push   ebx
c0012dd7:	31 db                	xor    ebx,ebx
c0012dd9:	83 ec 40             	sub    esp,0x40
c0012ddc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012de4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012dec:	6a 12                	push   0x12
c0012dee:	68 ee 00 00 00       	push   0xee
c0012df3:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012df7:	e8 f4 d6 fe ff       	call   c00004f0 <memset>
c0012dfc:	83 c4 10             	add    esp,0x10
c0012dff:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012e03:	6a 08                	push   0x8
c0012e05:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e09:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012e0d:	50                   	push   eax
c0012e0e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012e12:	55                   	push   ebp
c0012e13:	57                   	push   edi
c0012e14:	e8 e7 fe ff ff       	call   c0012d00 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012e19:	83 c4 10             	add    esp,0x10
c0012e1c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012e20:	50                   	push   eax
c0012e21:	6a 06                	push   0x6
c0012e23:	55                   	push   ebp
c0012e24:	57                   	push   edi
c0012e25:	e8 06 ff ff ff       	call   c0012d30 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012e2a:	83 c4 10             	add    esp,0x10
c0012e2d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012e32:	74 07                	je     c0012e3b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012e34:	46                   	inc    esi
c0012e35:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012e39:	eb e1                	jmp    c0012e1c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012e3b:	43                   	inc    ebx
c0012e3c:	83 fb 12             	cmp    ebx,0x12
c0012e3f:	75 c2                	jne    c0012e03 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012e41:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e45:	31 db                	xor    ebx,ebx
c0012e47:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012e4a:	50                   	push   eax
c0012e4b:	50                   	push   eax
c0012e4c:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012e51:	43                   	inc    ebx
c0012e52:	8d 04 85 00 33 02 c0 	lea    eax,[eax*4-0x3ffdcd00]
c0012e59:	50                   	push   eax
c0012e5a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012e5e:	e8 dd d9 fe ff       	call   c0000840 <strcat>
c0012e63:	83 c4 10             	add    esp,0x10
c0012e66:	83 fb 18             	cmp    ebx,0x18
c0012e69:	75 df                	jne    c0012e4a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012e6b:	83 c4 3c             	add    esp,0x3c
c0012e6e:	31 c0                	xor    eax,eax
c0012e70:	5b                   	pop    ebx
c0012e71:	5e                   	pop    esi
c0012e72:	5f                   	pop    edi
c0012e73:	5d                   	pop    ebp
c0012e74:	c3                   	ret    

c0012e75 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012e75:	83 ec 40             	sub    esp,0x40
c0012e78:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e7c:	50                   	push   eax
c0012e7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e85:	e8 3b f9 ff ff       	call   c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e8a:	58                   	pop    eax
c0012e8b:	5a                   	pop    edx
c0012e8c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012e90:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012e94:	50                   	push   eax
c0012e95:	e8 37 ff ff ff       	call   c0012dd1 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012e9a:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012e9f:	83 c4 4c             	add    esp,0x4c
c0012ea2:	c3                   	ret    

c0012ea3 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012ea3:	55                   	push   ebp
c0012ea4:	57                   	push   edi
c0012ea5:	56                   	push   esi
c0012ea6:	53                   	push   ebx
c0012ea7:	31 db                	xor    ebx,ebx
c0012ea9:	83 ec 70             	sub    esp,0x70
c0012eac:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012eb3:	6a 30                	push   0x30
c0012eb5:	6a 00                	push   0x0
c0012eb7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012ebb:	56                   	push   esi
c0012ebc:	e8 2f d6 fe ff       	call   c00004f0 <memset>
c0012ec1:	83 c4 10             	add    esp,0x10
c0012ec4:	83 ec 0c             	sub    esp,0xc
c0012ec7:	57                   	push   edi
c0012ec8:	e8 a3 d6 fe ff       	call   c0000570 <strlen>
c0012ecd:	83 c4 10             	add    esp,0x10
c0012ed0:	39 d8                	cmp    eax,ebx
c0012ed2:	76 16                	jbe    c0012eea <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012ed4:	83 ec 0c             	sub    esp,0xc
c0012ed7:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012edb:	50                   	push   eax
c0012edc:	e8 4f da fe ff       	call   c0000930 <toupper>
c0012ee1:	83 c4 10             	add    esp,0x10
c0012ee4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012ee7:	43                   	inc    ebx
c0012ee8:	eb da                	jmp    c0012ec4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012eea:	31 f6                	xor    esi,esi
c0012eec:	52                   	push   edx
c0012eed:	31 ff                	xor    edi,edi
c0012eef:	6a 18                	push   0x18
c0012ef1:	6a 3f                	push   0x3f
c0012ef3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ef7:	50                   	push   eax
c0012ef8:	e8 f3 d5 fe ff       	call   c00004f0 <memset>
c0012efd:	83 c4 10             	add    esp,0x10
c0012f00:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012f04:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012f08:	84 c0                	test   al,al
c0012f0a:	0f 84 b0 00 00 00    	je     c0012fc0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012f10:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012f14:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012f19:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012f1d:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012f22:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012f25:	83 ec 0c             	sub    esp,0xc
c0012f28:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012f2c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012f30:	53                   	push   ebx
c0012f31:	e8 3a d6 fe ff       	call   c0000570 <strlen>
c0012f36:	83 c4 10             	add    esp,0x10
c0012f39:	85 c0                	test   eax,eax
c0012f3b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f3f:	74 0b                	je     c0012f4c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012f41:	50                   	push   eax
c0012f42:	6a 01                	push   0x1
c0012f44:	53                   	push   ebx
c0012f45:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012f49:	50                   	push   eax
c0012f4a:	eb 0a                	jmp    c0012f56 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012f4c:	50                   	push   eax
c0012f4d:	6a 00                	push   0x0
c0012f4f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012f53:	50                   	push   eax
c0012f54:	6a 00                	push   0x0
c0012f56:	e8 44 fd ff ff       	call   c0012c9f <CmGetMatch(char*, char*, bool, bool*)>
c0012f5b:	83 c4 10             	add    esp,0x10
c0012f5e:	83 f8 ff             	cmp    eax,0xffffffff
c0012f61:	75 1a                	jne    c0012f7d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012f63:	83 ec 0c             	sub    esp,0xc
c0012f66:	68 72 1e 02 c0       	push   0xc0021e72
c0012f6b:	e8 9d e2 ff ff       	call   c001120d <KePanic(char const*)>
c0012f70:	83 c4 10             	add    esp,0x10
c0012f73:	b8 02 00 00 00       	mov    eax,0x2
c0012f78:	e9 bc 00 00 00       	jmp    c0013039 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012f7d:	83 ff 18             	cmp    edi,0x18
c0012f80:	75 1a                	jne    c0012f9c <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012f82:	83 ec 0c             	sub    esp,0xc
c0012f85:	68 87 1e 02 c0       	push   0xc0021e87
c0012f8a:	e8 7e e2 ff ff       	call   c001120d <KePanic(char const*)>
c0012f8f:	83 c4 10             	add    esp,0x10
c0012f92:	b8 01 00 00 00       	mov    eax,0x1
c0012f97:	e9 9d 00 00 00       	jmp    c0013039 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012f9c:	47                   	inc    edi
c0012f9d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fa2:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012fa6:	74 02                	je     c0012faa <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012fa8:	89 ee                	mov    esi,ebp
c0012faa:	83 ec 0c             	sub    esp,0xc
c0012fad:	53                   	push   ebx
c0012fae:	e8 bd d5 fe ff       	call   c0000570 <strlen>
c0012fb3:	83 c4 10             	add    esp,0x10
c0012fb6:	85 c0                	test   eax,eax
c0012fb8:	74 06                	je     c0012fc0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012fba:	46                   	inc    esi
c0012fbb:	e9 40 ff ff ff       	jmp    c0012f00 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012fc0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012fc8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012fd0:	31 f6                	xor    esi,esi
c0012fd2:	50                   	push   eax
c0012fd3:	31 ff                	xor    edi,edi
c0012fd5:	6a 12                	push   0x12
c0012fd7:	68 ee 00 00 00       	push   0xee
c0012fdc:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012fe3:	e8 08 d5 fe ff       	call   c00004f0 <memset>
c0012fe8:	83 c4 10             	add    esp,0x10
c0012feb:	83 fe 17             	cmp    esi,0x17
c0012fee:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012ff2:	7e 26                	jle    c001301a <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0012ff4:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012ff8:	50                   	push   eax
c0012ff9:	6a 08                	push   0x8
c0012ffb:	55                   	push   ebp
c0012ffc:	53                   	push   ebx
c0012ffd:	e8 2e fd ff ff       	call   c0012d30 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013002:	83 c4 10             	add    esp,0x10
c0013005:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001300a:	74 26                	je     c0013032 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c001300c:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013013:	4e                   	dec    esi
c0013014:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013017:	47                   	inc    edi
c0013018:	eb 1c                	jmp    c0013036 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001301a:	6a 06                	push   0x6
c001301c:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013021:	50                   	push   eax
c0013022:	55                   	push   ebp
c0013023:	53                   	push   ebx
c0013024:	e8 d7 fc ff ff       	call   c0012d00 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013029:	83 c4 10             	add    esp,0x10
c001302c:	84 c0                	test   al,al
c001302e:	75 06                	jne    c0013036 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013030:	eb c2                	jmp    c0012ff4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0013032:	31 c0                	xor    eax,eax
c0013034:	eb 03                	jmp    c0013039 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013036:	46                   	inc    esi
c0013037:	eb b2                	jmp    c0012feb <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0013039:	83 c4 6c             	add    esp,0x6c
c001303c:	5b                   	pop    ebx
c001303d:	5e                   	pop    esi
c001303e:	5f                   	pop    edi
c001303f:	5d                   	pop    ebp
c0013040:	c3                   	ret    

c0013041 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013041:	53                   	push   ebx
c0013042:	83 ec 3c             	sub    esp,0x3c
c0013045:	6a 2b                	push   0x2b
c0013047:	6a 00                	push   0x0
c0013049:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001304d:	53                   	push   ebx
c001304e:	e8 9d d4 fe ff       	call   c00004f0 <memset>
c0013053:	58                   	pop    eax
c0013054:	5a                   	pop    edx
c0013055:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013059:	50                   	push   eax
c001305a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001305e:	e8 40 fe ff ff       	call   c0012ea3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013063:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013068:	83 c4 0c             	add    esp,0xc
c001306b:	6a 15                	push   0x15
c001306d:	6a 00                	push   0x0
c001306f:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013073:	50                   	push   eax
c0013074:	e8 77 d4 fe ff       	call   c00004f0 <memset>
c0013079:	53                   	push   ebx
c001307a:	6a 00                	push   0x0
c001307c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013080:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013084:	e8 e6 f9 ff ff       	call   c0012a6f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013089:	83 c4 58             	add    esp,0x58
c001308c:	5b                   	pop    ebx
c001308d:	c3                   	ret    

c001308e <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001308e:	56                   	push   esi
c001308f:	53                   	push   ebx
c0013090:	83 ec 48             	sub    esp,0x48
c0013093:	6a 12                	push   0x12
c0013095:	68 ff 00 00 00       	push   0xff
c001309a:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001309e:	56                   	push   esi
c001309f:	e8 4c d4 fe ff       	call   c00004f0 <memset>
c00130a4:	5a                   	pop    edx
c00130a5:	59                   	pop    ecx
c00130a6:	56                   	push   esi
c00130a7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00130ab:	e8 f3 fd ff ff       	call   c0012ea3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130b0:	83 c4 10             	add    esp,0x10
c00130b3:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00130b7:	85 db                	test   ebx,ebx
c00130b9:	74 42                	je     c00130fd <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00130bb:	50                   	push   eax
c00130bc:	8d 44 24 19          	lea    eax,[esp+0x19]
c00130c0:	50                   	push   eax
c00130c1:	53                   	push   ebx
c00130c2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130c6:	e8 fa f6 ff ff       	call   c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130cb:	83 c4 0c             	add    esp,0xc
c00130ce:	6a 12                	push   0x12
c00130d0:	8d 44 24 21          	lea    eax,[esp+0x21]
c00130d4:	50                   	push   eax
c00130d5:	56                   	push   esi
c00130d6:	e8 a5 d2 fe ff       	call   c0000380 <memcmp>
c00130db:	83 c4 10             	add    esp,0x10
c00130de:	85 c0                	test   eax,eax
c00130e0:	74 1e                	je     c0013100 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00130e2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00130e7:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00130ec:	c1 e3 08             	shl    ebx,0x8
c00130ef:	09 d8                	or     eax,ebx
c00130f1:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00130f6:	c1 e3 10             	shl    ebx,0x10
c00130f9:	09 c3                	or     ebx,eax
c00130fb:	eb ba                	jmp    c00130b7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00130fd:	83 cb ff             	or     ebx,0xffffffff
c0013100:	89 d8                	mov    eax,ebx
c0013102:	83 c4 44             	add    esp,0x44
c0013105:	5b                   	pop    ebx
c0013106:	5e                   	pop    esi
c0013107:	c3                   	ret    

c0013108 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013108:	57                   	push   edi
c0013109:	56                   	push   esi
c001310a:	53                   	push   ebx
c001310b:	83 ec 34             	sub    esp,0x34
c001310e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013112:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013116:	6a 2b                	push   0x2b
c0013118:	6a 00                	push   0x0
c001311a:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001311e:	53                   	push   ebx
c001311f:	e8 cc d3 fe ff       	call   c00004f0 <memset>
c0013124:	58                   	pop    eax
c0013125:	5a                   	pop    edx
c0013126:	8d 44 24 11          	lea    eax,[esp+0x11]
c001312a:	50                   	push   eax
c001312b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001312f:	e8 6f fd ff ff       	call   c0012ea3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013134:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0013138:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001313c:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013140:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013144:	53                   	push   ebx
c0013145:	6a 00                	push   0x0
c0013147:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001314b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001314f:	e8 1b f9 ff ff       	call   c0012a6f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013154:	83 c4 50             	add    esp,0x50
c0013157:	5b                   	pop    ebx
c0013158:	5e                   	pop    esi
c0013159:	5f                   	pop    edi
c001315a:	c3                   	ret    

c001315b <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001315b:	55                   	push   ebp
c001315c:	57                   	push   edi
c001315d:	56                   	push   esi
c001315e:	53                   	push   ebx
c001315f:	83 ec 40             	sub    esp,0x40
c0013162:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013166:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001316a:	6a 2b                	push   0x2b
c001316c:	6a 00                	push   0x0
c001316e:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013172:	56                   	push   esi
c0013173:	e8 78 d3 fe ff       	call   c00004f0 <memset>
c0013178:	5f                   	pop    edi
c0013179:	89 ef                	mov    edi,ebp
c001317b:	58                   	pop    eax
c001317c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013180:	50                   	push   eax
c0013181:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013185:	e8 19 fd ff ff       	call   c0012ea3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001318a:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001318f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013194:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013199:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001319e:	83 c4 10             	add    esp,0x10
c00131a1:	85 ed                	test   ebp,ebp
c00131a3:	74 14                	je     c00131b9 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00131a5:	51                   	push   ecx
c00131a6:	51                   	push   ecx
c00131a7:	57                   	push   edi
c00131a8:	53                   	push   ebx
c00131a9:	e8 09 f7 ff ff       	call   c00128b7 <CmGetNext(Reghive_Tag*, int)>
c00131ae:	83 c4 10             	add    esp,0x10
c00131b1:	85 c0                	test   eax,eax
c00131b3:	74 04                	je     c00131b9 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00131b5:	89 c7                	mov    edi,eax
c00131b7:	eb e8                	jmp    c00131a1 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00131b9:	56                   	push   esi
c00131ba:	6a 00                	push   0x0
c00131bc:	57                   	push   edi
c00131bd:	53                   	push   ebx
c00131be:	e8 ac f8 ff ff       	call   c0012a6f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131c3:	83 c4 0c             	add    esp,0xc
c00131c6:	89 c7                	mov    edi,eax
c00131c8:	56                   	push   esi
c00131c9:	50                   	push   eax
c00131ca:	53                   	push   ebx
c00131cb:	e8 f5 f5 ff ff       	call   c00127c5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131d0:	58                   	pop    eax
c00131d1:	5a                   	pop    edx
c00131d2:	6a 6c                	push   0x6c
c00131d4:	6a 00                	push   0x0
c00131d6:	6a 00                	push   0x0
c00131d8:	68 98 1e 02 c0       	push   0xc0021e98
c00131dd:	57                   	push   edi
c00131de:	53                   	push   ebx
c00131df:	e8 24 ff ff ff       	call   c0013108 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00131e4:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00131e8:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00131ec:	c1 e8 10             	shr    eax,0x10
c00131ef:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00131f3:	83 c4 1c             	add    esp,0x1c
c00131f6:	56                   	push   esi
c00131f7:	57                   	push   edi
c00131f8:	53                   	push   ebx
c00131f9:	e8 eb f6 ff ff       	call   c00128e9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131fe:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013203:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013208:	c1 e0 08             	shl    eax,0x8
c001320b:	09 c2                	or     edx,eax
c001320d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013212:	83 c4 4c             	add    esp,0x4c
c0013215:	c1 e0 10             	shl    eax,0x10
c0013218:	5b                   	pop    ebx
c0013219:	09 d0                	or     eax,edx
c001321b:	5e                   	pop    esi
c001321c:	5f                   	pop    edi
c001321d:	5d                   	pop    ebp
c001321e:	c3                   	ret    

c001321f <zStrtok(char*, char const*)>:
c001321f:	55                   	push   ebp
c0013220:	57                   	push   edi
c0013221:	56                   	push   esi
c0013222:	53                   	push   ebx
c0013223:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013227:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001322b:	85 db                	test   ebx,ebx
c001322d:	74 2f                	je     c001325e <zStrtok(char*, char const*)+0x3f>
c001322f:	85 c0                	test   eax,eax
c0013231:	75 09                	jne    c001323c <zStrtok(char*, char const*)+0x1d>
c0013233:	a1 90 9c 02 c0       	mov    eax,ds:0xc0029c90
c0013238:	85 c0                	test   eax,eax
c001323a:	74 50                	je     c001328c <zStrtok(char*, char const*)+0x6d>
c001323c:	31 c9                	xor    ecx,ecx
c001323e:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013242:	74 03                	je     c0013247 <zStrtok(char*, char const*)+0x28>
c0013244:	41                   	inc    ecx
c0013245:	eb f7                	jmp    c001323e <zStrtok(char*, char const*)+0x1f>
c0013247:	31 d2                	xor    edx,edx
c0013249:	39 ca                	cmp    edx,ecx
c001324b:	74 15                	je     c0013262 <zStrtok(char*, char const*)+0x43>
c001324d:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013251:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013254:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013257:	39 ee                	cmp    esi,ebp
c0013259:	74 13                	je     c001326e <zStrtok(char*, char const*)+0x4f>
c001325b:	42                   	inc    edx
c001325c:	eb eb                	jmp    c0013249 <zStrtok(char*, char const*)+0x2a>
c001325e:	31 c0                	xor    eax,eax
c0013260:	eb 2a                	jmp    c001328c <zStrtok(char*, char const*)+0x6d>
c0013262:	c7 05 90 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c90,0x0
c001326c:	eb 1e                	jmp    c001328c <zStrtok(char*, char const*)+0x6d>
c001326e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013271:	39 ce                	cmp    esi,ecx
c0013273:	75 0a                	jne    c001327f <zStrtok(char*, char const*)+0x60>
c0013275:	40                   	inc    eax
c0013276:	a3 90 9c 02 c0       	mov    ds:0xc0029c90,eax
c001327b:	89 d8                	mov    eax,ebx
c001327d:	eb 0d                	jmp    c001328c <zStrtok(char*, char const*)+0x6d>
c001327f:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013283:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013286:	89 15 90 9c 02 c0    	mov    DWORD PTR ds:0xc0029c90,edx
c001328c:	5b                   	pop    ebx
c001328d:	5e                   	pop    esi
c001328e:	5f                   	pop    edi
c001328f:	5d                   	pop    ebp
c0013290:	c3                   	ret    

c0013291 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013291:	57                   	push   edi
c0013292:	56                   	push   esi
c0013293:	53                   	push   ebx
c0013294:	81 ec 08 01 00 00    	sub    esp,0x108
c001329a:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00132a1:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00132a8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00132ac:	53                   	push   ebx
c00132ad:	e8 8e d3 fe ff       	call   c0000640 <strcpy>
c00132b2:	59                   	pop    ecx
c00132b3:	5e                   	pop    esi
c00132b4:	68 fc 21 02 c0       	push   0xc00221fc
c00132b9:	53                   	push   ebx
c00132ba:	bb 01 00 00 00       	mov    ebx,0x1
c00132bf:	e8 5b ff ff ff       	call   c001321f <zStrtok(char*, char const*)>
c00132c4:	83 c4 10             	add    esp,0x10
c00132c7:	85 c0                	test   eax,eax
c00132c9:	74 3b                	je     c0013306 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132cb:	52                   	push   edx
c00132cc:	50                   	push   eax
c00132cd:	6a 01                	push   0x1
c00132cf:	57                   	push   edi
c00132d0:	e8 b9 fd ff ff       	call   c001308e <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00132d5:	59                   	pop    ecx
c00132d6:	89 c3                	mov    ebx,eax
c00132d8:	5e                   	pop    esi
c00132d9:	68 fc 21 02 c0       	push   0xc00221fc
c00132de:	6a 00                	push   0x0
c00132e0:	e8 3a ff ff ff       	call   c001321f <zStrtok(char*, char const*)>
c00132e5:	83 c4 10             	add    esp,0x10
c00132e8:	89 c6                	mov    esi,eax
c00132ea:	85 c0                	test   eax,eax
c00132ec:	74 18                	je     c0013306 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132ee:	52                   	push   edx
c00132ef:	52                   	push   edx
c00132f0:	53                   	push   ebx
c00132f1:	57                   	push   edi
c00132f2:	e8 81 f5 ff ff       	call   c0012878 <CmEnterDirectory(Reghive_Tag*, int)>
c00132f7:	83 c4 10             	add    esp,0x10
c00132fa:	89 c3                	mov    ebx,eax
c00132fc:	83 f8 ff             	cmp    eax,0xffffffff
c00132ff:	74 05                	je     c0013306 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013301:	50                   	push   eax
c0013302:	56                   	push   esi
c0013303:	53                   	push   ebx
c0013304:	eb c9                	jmp    c00132cf <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013306:	81 c4 00 01 00 00    	add    esp,0x100
c001330c:	89 d8                	mov    eax,ebx
c001330e:	5b                   	pop    ebx
c001330f:	5e                   	pop    esi
c0013310:	5f                   	pop    edi
c0013311:	c3                   	ret    

c0013312 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013312:	55                   	push   ebp
c0013313:	57                   	push   edi
c0013314:	56                   	push   esi
c0013315:	53                   	push   ebx
c0013316:	83 ec 5c             	sub    esp,0x5c
c0013319:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c001331d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013321:	85 db                	test   ebx,ebx
c0013323:	0f 8e 84 00 00 00    	jle    c00133ad <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013329:	31 ed                	xor    ebp,ebp
c001332b:	57                   	push   edi
c001332c:	6a 32                	push   0x32
c001332e:	6a 00                	push   0x0
c0013330:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013334:	57                   	push   edi
c0013335:	e8 b6 d1 fe ff       	call   c00004f0 <memset>
c001333a:	83 c4 0c             	add    esp,0xc
c001333d:	57                   	push   edi
c001333e:	53                   	push   ebx
c001333f:	56                   	push   esi
c0013340:	e8 30 fb ff ff       	call   c0012e75 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013345:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013349:	83 c4 10             	add    esp,0x10
c001334c:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013350:	7d 13                	jge    c0013365 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013352:	83 ec 0c             	sub    esp,0xc
c0013355:	45                   	inc    ebp
c0013356:	68 a3 25 02 c0       	push   0xc00225a3
c001335b:	e8 e5 75 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013360:	83 c4 10             	add    esp,0x10
c0013363:	eb e7                	jmp    c001334c <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013365:	51                   	push   ecx
c0013366:	57                   	push   edi
c0013367:	53                   	push   ebx
c0013368:	68 9e 1e 02 c0       	push   0xc0021e9e
c001336d:	e8 d3 75 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013372:	83 c4 10             	add    esp,0x10
c0013375:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001337a:	75 1e                	jne    c001339a <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001337c:	52                   	push   edx
c001337d:	52                   	push   edx
c001337e:	53                   	push   ebx
c001337f:	56                   	push   esi
c0013380:	e8 f3 f4 ff ff       	call   c0012878 <CmEnterDirectory(Reghive_Tag*, int)>
c0013385:	83 c4 0c             	add    esp,0xc
c0013388:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001338c:	8d 51 04             	lea    edx,[ecx+0x4]
c001338f:	52                   	push   edx
c0013390:	50                   	push   eax
c0013391:	56                   	push   esi
c0013392:	e8 7b ff ff ff       	call   c0013312 <CmDisplayTree(Reghive_Tag*, int, int)>
c0013397:	83 c4 10             	add    esp,0x10
c001339a:	50                   	push   eax
c001339b:	50                   	push   eax
c001339c:	53                   	push   ebx
c001339d:	56                   	push   esi
c001339e:	e8 14 f5 ff ff       	call   c00128b7 <CmGetNext(Reghive_Tag*, int)>
c00133a3:	83 c4 10             	add    esp,0x10
c00133a6:	89 c3                	mov    ebx,eax
c00133a8:	e9 74 ff ff ff       	jmp    c0013321 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00133ad:	83 c4 5c             	add    esp,0x5c
c00133b0:	5b                   	pop    ebx
c00133b1:	5e                   	pop    esi
c00133b2:	5f                   	pop    edi
c00133b3:	5d                   	pop    ebp
c00133b4:	c3                   	ret    

c00133b5 <CmSplitFinalSlashInPlace(char*)>:
c00133b5:	53                   	push   ebx
c00133b6:	83 ec 14             	sub    esp,0x14
c00133b9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00133bd:	53                   	push   ebx
c00133be:	e8 ad d1 fe ff       	call   c0000570 <strlen>
c00133c3:	83 c4 10             	add    esp,0x10
c00133c6:	48                   	dec    eax
c00133c7:	85 c0                	test   eax,eax
c00133c9:	74 15                	je     c00133e0 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00133cb:	8d 14 03             	lea    edx,[ebx+eax*1]
c00133ce:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133d2:	75 09                	jne    c00133dd <CmSplitFinalSlashInPlace(char*)+0x28>
c00133d4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00133d7:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00133db:	eb 05                	jmp    c00133e2 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00133dd:	48                   	dec    eax
c00133de:	eb e7                	jmp    c00133c7 <CmSplitFinalSlashInPlace(char*)+0x12>
c00133e0:	31 c0                	xor    eax,eax
c00133e2:	83 c4 08             	add    esp,0x8
c00133e5:	5b                   	pop    ebx
c00133e6:	c3                   	ret    

c00133e7 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00133e7:	55                   	push   ebp
c00133e8:	57                   	push   edi
c00133e9:	56                   	push   esi
c00133ea:	53                   	push   ebx
c00133eb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00133f1:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00133f8:	8a 13                	mov    dl,BYTE PTR [ebx]
c00133fa:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00133fd:	80 fa 40             	cmp    dl,0x40
c0013400:	75 1c                	jne    c001341e <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013402:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013405:	85 c9                	test   ecx,ecx
c0013407:	0f 84 09 01 00 00    	je     c0013516 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001340d:	8d 43 01             	lea    eax,[ebx+0x1]
c0013410:	83 f9 3a             	cmp    ecx,0x3a
c0013413:	74 04                	je     c0013419 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013415:	89 c3                	mov    ebx,eax
c0013417:	eb e9                	jmp    c0013402 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013419:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001341c:	89 c3                	mov    ebx,eax
c001341e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013422:	50                   	push   eax
c0013423:	6a 40                	push   0x40
c0013425:	6a 00                	push   0x0
c0013427:	8d 44 24 24          	lea    eax,[esp+0x24]
c001342b:	50                   	push   eax
c001342c:	e8 bf d0 fe ff       	call   c00004f0 <memset>
c0013431:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013438:	31 c0                	xor    eax,eax
c001343a:	83 c4 10             	add    esp,0x10
c001343d:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013442:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013445:	89 d1                	mov    ecx,edx
c0013447:	85 d2                	test   edx,edx
c0013449:	0f 84 c7 00 00 00    	je     c0013516 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001344f:	3d c7 00 00 00       	cmp    eax,0xc7
c0013454:	0f 8f bc 00 00 00    	jg     c0013516 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001345a:	83 fa 0a             	cmp    edx,0xa
c001345d:	0f 85 a4 00 00 00    	jne    c0013507 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013463:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013468:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c001346d:	89 c8                	mov    eax,ecx
c001346f:	a8 df                	test   al,0xdf
c0013471:	0f 94 c2             	sete   dl
c0013474:	83 f9 23             	cmp    ecx,0x23
c0013477:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001347c:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013480:	80 e2 01             	and    dl,0x1
c0013483:	75 4a                	jne    c00134cf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013485:	83 e8 09             	sub    eax,0x9
c0013488:	3c 01                	cmp    al,0x1
c001348a:	76 43                	jbe    c00134cf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001348c:	83 f9 5b             	cmp    ecx,0x5b
c001348f:	75 42                	jne    c00134d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013491:	83 fe 40             	cmp    esi,0x40
c0013494:	75 39                	jne    c00134cf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013496:	83 ec 0c             	sub    esp,0xc
c0013499:	8d 54 24 65          	lea    edx,[esp+0x65]
c001349d:	52                   	push   edx
c001349e:	e8 cd d0 fe ff       	call   c0000570 <strlen>
c00134a3:	83 c4 10             	add    esp,0x10
c00134a6:	83 f8 3f             	cmp    eax,0x3f
c00134a9:	77 6b                	ja     c0013516 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00134ab:	50                   	push   eax
c00134ac:	50                   	push   eax
c00134ad:	8d 54 24 61          	lea    edx,[esp+0x61]
c00134b1:	52                   	push   edx
c00134b2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00134b6:	52                   	push   edx
c00134b7:	e8 84 d1 fe ff       	call   c0000640 <strcpy>
c00134bc:	58                   	pop    eax
c00134bd:	8d 54 24 24          	lea    edx,[esp+0x24]
c00134c1:	52                   	push   edx
c00134c2:	e8 a9 d0 fe ff       	call   c0000570 <strlen>
c00134c7:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00134cc:	83 c4 10             	add    esp,0x10
c00134cf:	31 d2                	xor    edx,edx
c00134d1:	eb 3b                	jmp    c001350e <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c00134d3:	83 fe 40             	cmp    esi,0x40
c00134d6:	74 06                	je     c00134de <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c00134d8:	8d 44 24 58          	lea    eax,[esp+0x58]
c00134dc:	eb 20                	jmp    c00134fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c00134de:	50                   	push   eax
c00134df:	50                   	push   eax
c00134e0:	55                   	push   ebp
c00134e1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134e5:	50                   	push   eax
c00134e6:	e8 65 d2 fe ff       	call   c0000750 <strcmp>
c00134eb:	83 c4 10             	add    esp,0x10
c00134ee:	85 c0                	test   eax,eax
c00134f0:	75 dd                	jne    c00134cf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00134f2:	eb e4                	jmp    c00134d8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00134f4:	8d 50 01             	lea    edx,[eax+0x1]
c00134f7:	83 f9 3d             	cmp    ecx,0x3d
c00134fa:	74 1e                	je     c001351a <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c00134fc:	89 d0                	mov    eax,edx
c00134fe:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013501:	85 c9                	test   ecx,ecx
c0013503:	75 ef                	jne    c00134f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013505:	eb 0f                	jmp    c0013516 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013507:	8d 50 01             	lea    edx,[eax+0x1]
c001350a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001350e:	47                   	inc    edi
c001350f:	89 d0                	mov    eax,edx
c0013511:	e9 2c ff ff ff       	jmp    c0013442 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013516:	31 c0                	xor    eax,eax
c0013518:	eb 33                	jmp    c001354d <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c001351a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001351e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013521:	50                   	push   eax
c0013522:	50                   	push   eax
c0013523:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013527:	50                   	push   eax
c0013528:	53                   	push   ebx
c0013529:	e8 22 d2 fe ff       	call   c0000750 <strcmp>
c001352e:	83 c4 10             	add    esp,0x10
c0013531:	85 c0                	test   eax,eax
c0013533:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013537:	75 96                	jne    c00134cf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013539:	51                   	push   ecx
c001353a:	51                   	push   ecx
c001353b:	52                   	push   edx
c001353c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013543:	e8 f8 d0 fe ff       	call   c0000640 <strcpy>
c0013548:	83 c4 10             	add    esp,0x10
c001354b:	b0 01                	mov    al,0x1
c001354d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013553:	5b                   	pop    ebx
c0013554:	5e                   	pop    esi
c0013555:	5f                   	pop    edi
c0013556:	5d                   	pop    ebp
c0013557:	c3                   	ret    

c0013558 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013558:	57                   	push   edi
c0013559:	56                   	push   esi
c001355a:	53                   	push   ebx
c001355b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013561:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013568:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001356f:	53                   	push   ebx
c0013570:	e8 fb cf fe ff       	call   c0000570 <strlen>
c0013575:	89 34 24             	mov    DWORD PTR [esp],esi
c0013578:	89 c7                	mov    edi,eax
c001357a:	e8 f1 cf fe ff       	call   c0000570 <strlen>
c001357f:	83 c4 10             	add    esp,0x10
c0013582:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013586:	3d ff 00 00 00       	cmp    eax,0xff
c001358b:	0f 87 d3 00 00 00    	ja     c0013664 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013591:	57                   	push   edi
c0013592:	57                   	push   edi
c0013593:	56                   	push   esi
c0013594:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013598:	56                   	push   esi
c0013599:	e8 a2 d0 fe ff       	call   c0000640 <strcpy>
c001359e:	58                   	pop    eax
c001359f:	5a                   	pop    edx
c00135a0:	68 fc 21 02 c0       	push   0xc00221fc
c00135a5:	56                   	push   esi
c00135a6:	e8 95 d2 fe ff       	call   c0000840 <strcat>
c00135ab:	59                   	pop    ecx
c00135ac:	5f                   	pop    edi
c00135ad:	53                   	push   ebx
c00135ae:	56                   	push   esi
c00135af:	e8 8c d2 fe ff       	call   c0000840 <strcat>
c00135b4:	58                   	pop    eax
c00135b5:	5a                   	pop    edx
c00135b6:	68 a8 1e 02 c0       	push   0xc0021ea8
c00135bb:	56                   	push   esi
c00135bc:	e8 7f d2 fe ff       	call   c0000840 <strcat>
c00135c1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00135c8:	e8 e9 44 ff ff       	call   c0007ab6 <malloc>
c00135cd:	83 c4 0c             	add    esp,0xc
c00135d0:	89 c3                	mov    ebx,eax
c00135d2:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c00135d8:	56                   	push   esi
c00135d9:	50                   	push   eax
c00135da:	e8 1b 81 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	85 db                	test   ebx,ebx
c00135e4:	74 7e                	je     c0013664 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00135e6:	51                   	push   ecx
c00135e7:	51                   	push   ecx
c00135e8:	6a 01                	push   0x1
c00135ea:	53                   	push   ebx
c00135eb:	e8 c6 81 ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c00135f0:	83 c4 10             	add    esp,0x10
c00135f3:	85 c0                	test   eax,eax
c00135f5:	74 08                	je     c00135ff <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00135f7:	83 ec 0c             	sub    esp,0xc
c00135fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135fc:	53                   	push   ebx
c00135fd:	eb 5f                	jmp    c001365e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00135ff:	52                   	push   edx
c0013600:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013604:	50                   	push   eax
c0013605:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013609:	50                   	push   eax
c001360a:	53                   	push   ebx
c001360b:	e8 a8 84 ff ff       	call   c000bab8 <File::stat(unsigned long long*, bool*)>
c0013610:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013614:	83 c4 10             	add    esp,0x10
c0013617:	89 c1                	mov    ecx,eax
c0013619:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001361d:	74 31                	je     c0013650 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001361f:	83 ec 0c             	sub    esp,0xc
c0013622:	50                   	push   eax
c0013623:	e8 8e 44 ff ff       	call   c0007ab6 <malloc>
c0013628:	89 c6                	mov    esi,eax
c001362a:	58                   	pop    eax
c001362b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001362d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013631:	52                   	push   edx
c0013632:	56                   	push   esi
c0013633:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013637:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001363b:	53                   	push   ebx
c001363c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001363f:	83 c4 20             	add    esp,0x20
c0013642:	85 c0                	test   eax,eax
c0013644:	75 0a                	jne    c0013650 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013646:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001364a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001364e:	74 18                	je     c0013668 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013650:	83 ec 0c             	sub    esp,0xc
c0013653:	53                   	push   ebx
c0013654:	e8 bb 81 ff ff       	call   c000b814 <File::close()>
c0013659:	8b 03                	mov    eax,DWORD PTR [ebx]
c001365b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001365e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013661:	83 c4 10             	add    esp,0x10
c0013664:	31 c0                	xor    eax,eax
c0013666:	eb 3b                	jmp    c00136a3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013668:	83 ec 0c             	sub    esp,0xc
c001366b:	53                   	push   ebx
c001366c:	e8 a3 81 ff ff       	call   c000b814 <File::close()>
c0013671:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013673:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013676:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013679:	83 c4 0c             	add    esp,0xc
c001367c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013683:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001368a:	56                   	push   esi
c001368b:	e8 57 fd ff ff       	call   c00133e7 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013690:	89 34 24             	mov    DWORD PTR [esp],esi
c0013693:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013697:	e8 2a 44 ff ff       	call   c0007ac6 <free>
c001369c:	83 c4 10             	add    esp,0x10
c001369f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00136a3:	81 c4 20 01 00 00    	add    esp,0x120
c00136a9:	5b                   	pop    ebx
c00136aa:	5e                   	pop    esi
c00136ab:	5f                   	pop    edi
c00136ac:	c3                   	ret    

c00136ad <Reg::getLine(char*, char*, char*)>:
c00136ad:	57                   	push   edi
c00136ae:	56                   	push   esi
c00136af:	53                   	push   ebx
c00136b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136b8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136bc:	57                   	push   edi
c00136bd:	56                   	push   esi
c00136be:	53                   	push   ebx
c00136bf:	68 ad 1e 02 c0       	push   0xc0021ead
c00136c4:	e8 8f fe ff ff       	call   c0013558 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136c9:	83 c4 10             	add    esp,0x10
c00136cc:	84 c0                	test   al,al
c00136ce:	75 10                	jne    c00136e0 <Reg::getLine(char*, char*, char*)+0x33>
c00136d0:	57                   	push   edi
c00136d1:	56                   	push   esi
c00136d2:	53                   	push   ebx
c00136d3:	68 d2 1e 02 c0       	push   0xc0021ed2
c00136d8:	e8 7b fe ff ff       	call   c0013558 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136dd:	83 c4 10             	add    esp,0x10
c00136e0:	5b                   	pop    ebx
c00136e1:	5e                   	pop    esi
c00136e2:	5f                   	pop    edi
c00136e3:	c3                   	ret    

c00136e4 <Reg::readInt(char*, char*, int*)>:
c00136e4:	55                   	push   ebp
c00136e5:	57                   	push   edi
c00136e6:	56                   	push   esi
c00136e7:	53                   	push   ebx
c00136e8:	81 ec f0 00 00 00    	sub    esp,0xf0
c00136ee:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00136f2:	55                   	push   ebp
c00136f3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136fa:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013701:	e8 a7 ff ff ff       	call   c00136ad <Reg::getLine(char*, char*, char*)>
c0013706:	83 c4 10             	add    esp,0x10
c0013709:	84 c0                	test   al,al
c001370b:	0f 84 b6 00 00 00    	je     c00137c7 <Reg::readInt(char*, char*, int*)+0xe3>
c0013711:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013716:	83 fa 2b             	cmp    edx,0x2b
c0013719:	74 0c                	je     c0013727 <Reg::readInt(char*, char*, int*)+0x43>
c001371b:	83 fa 2d             	cmp    edx,0x2d
c001371e:	75 0e                	jne    c001372e <Reg::readInt(char*, char*, int*)+0x4a>
c0013720:	ba 01 00 00 00       	mov    edx,0x1
c0013725:	eb 0b                	jmp    c0013732 <Reg::readInt(char*, char*, int*)+0x4e>
c0013727:	ba 01 00 00 00       	mov    edx,0x1
c001372c:	eb 02                	jmp    c0013730 <Reg::readInt(char*, char*, int*)+0x4c>
c001372e:	31 d2                	xor    edx,edx
c0013730:	31 c0                	xor    eax,eax
c0013732:	be 0a 00 00 00       	mov    esi,0xa
c0013737:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001373c:	75 21                	jne    c001375f <Reg::readInt(char*, char*, int*)+0x7b>
c001373e:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013743:	83 f9 78             	cmp    ecx,0x78
c0013746:	75 0a                	jne    c0013752 <Reg::readInt(char*, char*, int*)+0x6e>
c0013748:	83 c2 02             	add    edx,0x2
c001374b:	be 10 00 00 00       	mov    esi,0x10
c0013750:	eb 0d                	jmp    c001375f <Reg::readInt(char*, char*, int*)+0x7b>
c0013752:	83 f9 62             	cmp    ecx,0x62
c0013755:	75 08                	jne    c001375f <Reg::readInt(char*, char*, int*)+0x7b>
c0013757:	83 c2 02             	add    edx,0x2
c001375a:	be 02 00 00 00       	mov    esi,0x2
c001375f:	01 d5                	add    ebp,edx
c0013761:	31 d2                	xor    edx,edx
c0013763:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013767:	83 f9 0d             	cmp    ecx,0xd
c001376a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001376e:	0f 94 c3             	sete   bl
c0013771:	85 c9                	test   ecx,ecx
c0013773:	89 df                	mov    edi,ebx
c0013775:	0f 94 c3             	sete   bl
c0013778:	09 df                	or     edi,ebx
c001377a:	89 fb                	mov    ebx,edi
c001377c:	83 e7 01             	and    edi,0x1
c001377f:	75 35                	jne    c00137b6 <Reg::readInt(char*, char*, int*)+0xd2>
c0013781:	0f af d6             	imul   edx,esi
c0013784:	83 fe 10             	cmp    esi,0x10
c0013787:	75 26                	jne    c00137af <Reg::readInt(char*, char*, int*)+0xcb>
c0013789:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001378d:	83 ef 41             	sub    edi,0x41
c0013790:	89 fb                	mov    ebx,edi
c0013792:	80 fb 05             	cmp    bl,0x5
c0013795:	77 06                	ja     c001379d <Reg::readInt(char*, char*, int*)+0xb9>
c0013797:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c001379b:	eb 16                	jmp    c00137b3 <Reg::readInt(char*, char*, int*)+0xcf>
c001379d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00137a1:	83 eb 61             	sub    ebx,0x61
c00137a4:	80 fb 05             	cmp    bl,0x5
c00137a7:	77 06                	ja     c00137af <Reg::readInt(char*, char*, int*)+0xcb>
c00137a9:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00137ad:	eb 04                	jmp    c00137b3 <Reg::readInt(char*, char*, int*)+0xcf>
c00137af:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00137b3:	45                   	inc    ebp
c00137b4:	eb ad                	jmp    c0013763 <Reg::readInt(char*, char*, int*)+0x7f>
c00137b6:	84 c0                	test   al,al
c00137b8:	74 02                	je     c00137bc <Reg::readInt(char*, char*, int*)+0xd8>
c00137ba:	f7 da                	neg    edx
c00137bc:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00137c3:	89 10                	mov    DWORD PTR [eax],edx
c00137c5:	88 d8                	mov    al,bl
c00137c7:	81 c4 ec 00 00 00    	add    esp,0xec
c00137cd:	5b                   	pop    ebx
c00137ce:	5e                   	pop    esi
c00137cf:	5f                   	pop    edi
c00137d0:	5d                   	pop    ebp
c00137d1:	c3                   	ret    

c00137d2 <Reg::readString(char*, char*, char*, int)>:
c00137d2:	57                   	push   edi
c00137d3:	56                   	push   esi
c00137d4:	53                   	push   ebx
c00137d5:	81 ec d4 00 00 00    	sub    esp,0xd4
c00137db:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00137e2:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00137e6:	57                   	push   edi
c00137e7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137ee:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137f5:	e8 b3 fe ff ff       	call   c00136ad <Reg::getLine(char*, char*, char*)>
c00137fa:	83 c4 10             	add    esp,0x10
c00137fd:	89 c6                	mov    esi,eax
c00137ff:	84 c0                	test   al,al
c0013801:	74 44                	je     c0013847 <Reg::readString(char*, char*, char*, int)+0x75>
c0013803:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001380a:	31 c0                	xor    eax,eax
c001380c:	4a                   	dec    edx
c001380d:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013810:	84 c9                	test   cl,cl
c0013812:	74 0f                	je     c0013823 <Reg::readString(char*, char*, char*, int)+0x51>
c0013814:	39 c2                	cmp    edx,eax
c0013816:	7e 0b                	jle    c0013823 <Reg::readString(char*, char*, char*, int)+0x51>
c0013818:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001381b:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013820:	40                   	inc    eax
c0013821:	eb ea                	jmp    c001380d <Reg::readString(char*, char*, char*, int)+0x3b>
c0013823:	83 ec 0c             	sub    esp,0xc
c0013826:	53                   	push   ebx
c0013827:	e8 44 cd fe ff       	call   c0000570 <strlen>
c001382c:	83 c4 10             	add    esp,0x10
c001382f:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013834:	75 11                	jne    c0013847 <Reg::readString(char*, char*, char*, int)+0x75>
c0013836:	83 ec 0c             	sub    esp,0xc
c0013839:	53                   	push   ebx
c001383a:	e8 31 cd fe ff       	call   c0000570 <strlen>
c001383f:	83 c4 10             	add    esp,0x10
c0013842:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013847:	81 c4 d0 00 00 00    	add    esp,0xd0
c001384d:	89 f0                	mov    eax,esi
c001384f:	5b                   	pop    ebx
c0013850:	5e                   	pop    esi
c0013851:	5f                   	pop    edi
c0013852:	c3                   	ret    

c0013853 <Reg::readBool(char*, char*, bool*)>:
c0013853:	83 ec 20             	sub    esp,0x20
c0013856:	8d 44 24 10          	lea    eax,[esp+0x10]
c001385a:	50                   	push   eax
c001385b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001385f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013863:	e8 7c fe ff ff       	call   c00136e4 <Reg::readInt(char*, char*, int*)>
c0013868:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001386d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013871:	0f 95 02             	setne  BYTE PTR [edx]
c0013874:	83 c4 2c             	add    esp,0x2c
c0013877:	c3                   	ret    

c0013878 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013878:	53                   	push   ebx
c0013879:	83 ec 1c             	sub    esp,0x1c
c001387c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013880:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013884:	50                   	push   eax
c0013885:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013889:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001388d:	e8 c1 ff ff ff       	call   c0013853 <Reg::readBool(char*, char*, bool*)>
c0013892:	83 c4 10             	add    esp,0x10
c0013895:	84 c0                	test   al,al
c0013897:	74 04                	je     c001389d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013899:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001389d:	88 d8                	mov    al,bl
c001389f:	83 c4 18             	add    esp,0x18
c00138a2:	5b                   	pop    ebx
c00138a3:	c3                   	ret    

c00138a4 <Reg::readIntWithDefault(char*, char*, int)>:
c00138a4:	53                   	push   ebx
c00138a5:	83 ec 1c             	sub    esp,0x1c
c00138a8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00138ac:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138b0:	50                   	push   eax
c00138b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138b9:	e8 26 fe ff ff       	call   c00136e4 <Reg::readInt(char*, char*, int*)>
c00138be:	83 c4 10             	add    esp,0x10
c00138c1:	84 c0                	test   al,al
c00138c3:	74 04                	je     c00138c9 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00138c5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00138c9:	89 d8                	mov    eax,ebx
c00138cb:	83 c4 18             	add    esp,0x18
c00138ce:	5b                   	pop    ebx
c00138cf:	c3                   	ret    

c00138d0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00138d0:	57                   	push   edi
c00138d1:	56                   	push   esi
c00138d2:	56                   	push   esi
c00138d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00138d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00138db:	56                   	push   esi
c00138dc:	57                   	push   edi
c00138dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138e5:	e8 e8 fe ff ff       	call   c00137d2 <Reg::readString(char*, char*, char*, int)>
c00138ea:	83 c4 10             	add    esp,0x10
c00138ed:	84 c0                	test   al,al
c00138ef:	75 1a                	jne    c001390b <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00138f1:	51                   	push   ecx
c00138f2:	56                   	push   esi
c00138f3:	6a 00                	push   0x0
c00138f5:	57                   	push   edi
c00138f6:	e8 f5 cb fe ff       	call   c00004f0 <memset>
c00138fb:	8d 4e ff             	lea    ecx,[esi-0x1]
c00138fe:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013904:	83 c4 10             	add    esp,0x10
c0013907:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001390b:	89 f8                	mov    eax,edi
c001390d:	5a                   	pop    edx
c001390e:	5e                   	pop    esi
c001390f:	5f                   	pop    edi
c0013910:	c3                   	ret    

c0013911 <SysEject(regs*)>:
c0013911:	83 ec 0c             	sub    esp,0xc
c0013914:	83 ca ff             	or     edx,0xffffffff
c0013917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001391e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013923:	83 e9 41             	sub    ecx,0x41
c0013926:	83 f9 19             	cmp    ecx,0x19
c0013929:	77 18                	ja     c0013943 <SysEject(regs*)+0x32>
c001392b:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c0013932:	85 c9                	test   ecx,ecx
c0013934:	74 0d                	je     c0013943 <SysEject(regs*)+0x32>
c0013936:	83 ec 0c             	sub    esp,0xc
c0013939:	51                   	push   ecx
c001393a:	e8 3b a0 ff ff       	call   c000d97a <LogicalDisk::eject()>
c001393f:	83 c4 10             	add    esp,0x10
c0013942:	99                   	cdq    
c0013943:	83 c4 0c             	add    esp,0xc
c0013946:	c3                   	ret    

c0013947 <SysExit(regs*)>:
c0013947:	83 ec 18             	sub    esp,0x18
c001394a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001394e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013951:	e8 16 2b 00 00       	call   c001646c <terminateTask(int)>
c0013956:	83 c8 ff             	or     eax,0xffffffff
c0013959:	83 c4 1c             	add    esp,0x1c
c001395c:	89 c2                	mov    edx,eax
c001395e:	c3                   	ret    

c001395f <SysGetCwd(regs*)>:
c001395f:	83 ec 10             	sub    esp,0x10
c0013962:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013966:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013969:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001396c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013971:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013974:	e8 77 7b ff ff       	call   c000b4f0 <Fs::getcwd(Process*, char*, int)>
c0013979:	83 c4 1c             	add    esp,0x1c
c001397c:	99                   	cdq    
c001397d:	c3                   	ret    

c001397e <SysGetPID(regs*)>:
c001397e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013983:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013986:	8b 00                	mov    eax,DWORD PTR [eax]
c0013988:	99                   	cdq    
c0013989:	c3                   	ret    

c001398a <SysGetRAMData(regs*)>:
c001398a:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013990:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c001399a:	99                   	cdq    
c001399b:	f7 f9                	idiv   ecx
c001399d:	c1 e0 18             	shl    eax,0x18
c00139a0:	09 c8                	or     eax,ecx
c00139a2:	99                   	cdq    
c00139a3:	c3                   	ret    

c00139a4 <SysGetVGAPtr(regs*)>:
c00139a4:	55                   	push   ebp
c00139a5:	57                   	push   edi
c00139a6:	56                   	push   esi
c00139a7:	53                   	push   ebx
c00139a8:	83 ec 18             	sub    esp,0x18
c00139ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00139af:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00139b2:	e8 81 25 00 00       	call   c0015f38 <Thr::processFromPID(int)>
c00139b7:	83 c4 10             	add    esp,0x10
c00139ba:	89 c1                	mov    ecx,eax
c00139bc:	b8 01 00 00 00       	mov    eax,0x1
c00139c1:	85 c9                	test   ecx,ecx
c00139c3:	74 57                	je     c0013a1c <SysGetVGAPtr(regs*)+0x78>
c00139c5:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00139cb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00139cf:	74 0c                	je     c00139dd <SysGetVGAPtr(regs*)+0x39>
c00139d1:	83 ec 0c             	sub    esp,0xc
c00139d4:	55                   	push   ebp
c00139d5:	e8 7f 4d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00139da:	83 c4 10             	add    esp,0x10
c00139dd:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00139e0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00139e3:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00139e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139ea:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00139ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139f0:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00139f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139f9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00139fc:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013a02:	50                   	push   eax
c0013a03:	50                   	push   eax
c0013a04:	68 ed 1e 02 c0       	push   0xc0021eed
c0013a09:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a0c:	05 a8 0f 00 00       	add    eax,0xfa8
c0013a11:	50                   	push   eax
c0013a12:	e8 29 cc fe ff       	call   c0000640 <strcpy>
c0013a17:	83 c4 10             	add    esp,0x10
c0013a1a:	31 c0                	xor    eax,eax
c0013a1c:	83 c4 0c             	add    esp,0xc
c0013a1f:	31 d2                	xor    edx,edx
c0013a21:	5b                   	pop    ebx
c0013a22:	5e                   	pop    esi
c0013a23:	5f                   	pop    edi
c0013a24:	5d                   	pop    ebp
c0013a25:	c3                   	ret    
c0013a26:	66 90                	xchg   ax,ax

c0013a28 <SysKill(regs*)>:
c0013a28:	53                   	push   ebx
c0013a29:	83 ec 08             	sub    esp,0x8
c0013a2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a30:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013a34:	75 16                	jne    c0013a4c <SysKill(regs*)+0x24>
c0013a36:	83 ec 0c             	sub    esp,0xc
c0013a39:	68 f7 1e 02 c0       	push   0xc0021ef7
c0013a3e:	e8 ca d7 ff ff       	call   c001120d <KePanic(char const*)>
c0013a43:	83 c4 10             	add    esp,0x10
c0013a46:	e9 89 00 00 00       	jmp    c0013ad4 <SysKill(regs*)+0xac>
c0013a4b:	90                   	nop
c0013a4c:	83 ec 0c             	sub    esp,0xc
c0013a4f:	68 84 a4 02 c0       	push   0xc002a484
c0013a54:	e8 d3 bc 00 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a59:	8d 76 00             	lea    esi,[esi+0x0]
c0013a5c:	83 c4 10             	add    esp,0x10
c0013a5f:	85 c0                	test   eax,eax
c0013a61:	74 19                	je     c0013a7c <SysKill(regs*)+0x54>
c0013a63:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a66:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a69:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a6b:	74 33                	je     c0013aa0 <SysKill(regs*)+0x78>
c0013a6d:	52                   	push   edx
c0013a6e:	52                   	push   edx
c0013a6f:	50                   	push   eax
c0013a70:	68 84 a4 02 c0       	push   0xc002a484
c0013a75:	e8 d2 bf 00 00       	call   c001fa4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013a7a:	eb e0                	jmp    c0013a5c <SysKill(regs*)+0x34>
c0013a7c:	83 ec 0c             	sub    esp,0xc
c0013a7f:	68 78 a4 02 c0       	push   0xc002a478
c0013a84:	e8 a3 bc 00 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a89:	8d 76 00             	lea    esi,[esi+0x0]
c0013a8c:	83 c4 10             	add    esp,0x10
c0013a8f:	85 c0                	test   eax,eax
c0013a91:	74 41                	je     c0013ad4 <SysKill(regs*)+0xac>
c0013a93:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a96:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a99:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a9b:	75 27                	jne    c0013ac4 <SysKill(regs*)+0x9c>
c0013a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa0:	51                   	push   ecx
c0013aa1:	51                   	push   ecx
c0013aa2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013aa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013aaa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013aad:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013ab3:	e8 f6 db ff ff       	call   c00116ae <KeRaiseSignal(SigHandlerBlock*, int)>
c0013ab8:	83 c4 10             	add    esp,0x10
c0013abb:	31 c0                	xor    eax,eax
c0013abd:	31 d2                	xor    edx,edx
c0013abf:	eb 1b                	jmp    c0013adc <SysKill(regs*)+0xb4>
c0013ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ac4:	52                   	push   edx
c0013ac5:	52                   	push   edx
c0013ac6:	50                   	push   eax
c0013ac7:	68 78 a4 02 c0       	push   0xc002a478
c0013acc:	e8 7b bf 00 00       	call   c001fa4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ad1:	eb b9                	jmp    c0013a8c <SysKill(regs*)+0x64>
c0013ad3:	90                   	nop
c0013ad4:	83 c8 ff             	or     eax,0xffffffff
c0013ad7:	89 c2                	mov    edx,eax
c0013ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0013adc:	83 c4 08             	add    esp,0x8
c0013adf:	5b                   	pop    ebx
c0013ae0:	c3                   	ret    

c0013ae1 <SysLoadDLL(regs*)>:
c0013ae1:	56                   	push   esi
c0013ae2:	53                   	push   ebx
c0013ae3:	31 d2                	xor    edx,edx
c0013ae5:	51                   	push   ecx
c0013ae6:	b8 01 00 00 00       	mov    eax,0x1
c0013aeb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013aef:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013af3:	0f 84 8c 00 00 00    	je     c0013b85 <SysLoadDLL(regs*)+0xa4>
c0013af9:	83 ec 0c             	sub    esp,0xc
c0013afc:	68 14 01 00 00       	push   0x114
c0013b01:	e8 b0 3f ff ff       	call   c0007ab6 <malloc>
c0013b06:	83 c4 0c             	add    esp,0xc
c0013b09:	89 c3                	mov    ebx,eax
c0013b0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b10:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b13:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b16:	53                   	push   ebx
c0013b17:	e8 de 7b ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c0013b1c:	83 c4 10             	add    esp,0x10
c0013b1f:	31 d2                	xor    edx,edx
c0013b21:	b8 02 00 00 00       	mov    eax,0x2
c0013b26:	85 db                	test   ebx,ebx
c0013b28:	74 5b                	je     c0013b85 <SysLoadDLL(regs*)+0xa4>
c0013b2a:	83 ec 0c             	sub    esp,0xc
c0013b2d:	53                   	push   ebx
c0013b2e:	e8 47 7f ff ff       	call   c000ba7a <File::exists()>
c0013b33:	83 c4 10             	add    esp,0x10
c0013b36:	84 c0                	test   al,al
c0013b38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b3a:	75 11                	jne    c0013b4d <SysLoadDLL(regs*)+0x6c>
c0013b3c:	83 ec 0c             	sub    esp,0xc
c0013b3f:	53                   	push   ebx
c0013b40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b43:	83 c4 10             	add    esp,0x10
c0013b46:	b8 03 00 00 00       	mov    eax,0x3
c0013b4b:	eb 36                	jmp    c0013b83 <SysLoadDLL(regs*)+0xa2>
c0013b4d:	83 ec 0c             	sub    esp,0xc
c0013b50:	53                   	push   ebx
c0013b51:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b54:	58                   	pop    eax
c0013b55:	5a                   	pop    edx
c0013b56:	6a 00                	push   0x0
c0013b58:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b5b:	e8 0e 15 00 00       	call   c001506e <Thr::loadDLL(char const*, bool)>
c0013b60:	83 c4 10             	add    esp,0x10
c0013b63:	89 c1                	mov    ecx,eax
c0013b65:	31 d2                	xor    edx,edx
c0013b67:	b8 04 00 00 00       	mov    eax,0x4
c0013b6c:	85 c9                	test   ecx,ecx
c0013b6e:	74 15                	je     c0013b85 <SysLoadDLL(regs*)+0xa4>
c0013b70:	53                   	push   ebx
c0013b71:	53                   	push   ebx
c0013b72:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013b78:	51                   	push   ecx
c0013b79:	e8 21 17 00 00       	call   c001529f <Thr::executeDLL(unsigned long, void*)>
c0013b7e:	83 c4 10             	add    esp,0x10
c0013b81:	31 c0                	xor    eax,eax
c0013b83:	31 d2                	xor    edx,edx
c0013b85:	59                   	pop    ecx
c0013b86:	5b                   	pop    ebx
c0013b87:	5e                   	pop    esi
c0013b88:	c3                   	ret    

c0013b89 <SysRead(regs*)>:
c0013b89:	57                   	push   edi
c0013b8a:	56                   	push   esi
c0013b8b:	53                   	push   ebx
c0013b8c:	83 ec 10             	sub    esp,0x10
c0013b8f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b96:	83 f8 02             	cmp    eax,0x2
c0013b99:	77 10                	ja     c0013bab <SysRead(regs*)+0x22>
c0013b9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ba0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ba3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013ba9:	eb 0e                	jmp    c0013bb9 <SysRead(regs*)+0x30>
c0013bab:	83 ec 0c             	sub    esp,0xc
c0013bae:	50                   	push   eax
c0013baf:	e8 ff 58 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013bb4:	83 c4 10             	add    esp,0x10
c0013bb7:	89 c1                	mov    ecx,eax
c0013bb9:	83 c8 ff             	or     eax,0xffffffff
c0013bbc:	85 c9                	test   ecx,ecx
c0013bbe:	89 c2                	mov    edx,eax
c0013bc0:	74 28                	je     c0013bea <SysRead(regs*)+0x61>
c0013bc2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013bca:	31 ff                	xor    edi,edi
c0013bcc:	83 ec 0c             	sub    esp,0xc
c0013bcf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bd1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013bd5:	52                   	push   edx
c0013bd6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013bd9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013bdc:	57                   	push   edi
c0013bdd:	56                   	push   esi
c0013bde:	51                   	push   ecx
c0013bdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013be2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013be6:	83 c4 20             	add    esp,0x20
c0013be9:	99                   	cdq    
c0013bea:	83 c4 10             	add    esp,0x10
c0013bed:	5b                   	pop    ebx
c0013bee:	5e                   	pop    esi
c0013bef:	5f                   	pop    edi
c0013bf0:	c3                   	ret    

c0013bf1 <SysRegisterSignal(regs*)>:
c0013bf1:	83 ec 18             	sub    esp,0x18
c0013bf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bf8:	6a 00                	push   0x0
c0013bfa:	6a 00                	push   0x0
c0013bfc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013bff:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013c02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c0a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013c10:	e8 63 da ff ff       	call   c0011678 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013c15:	83 c4 2c             	add    esp,0x2c
c0013c18:	99                   	cdq    
c0013c19:	c3                   	ret    

c0013c1a <SysRegistryGetTypeFromPath(regs*)>:
c0013c1a:	57                   	push   edi
c0013c1b:	56                   	push   esi
c0013c1c:	53                   	push   ebx
c0013c1d:	81 ec 38 01 00 00    	sub    esp,0x138
c0013c23:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013c2a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c2d:	68 18 1f 02 c0       	push   0xc0021f18
c0013c32:	e8 0e 6d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013c37:	5a                   	pop    edx
c0013c38:	59                   	pop    ecx
c0013c39:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c3c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c3f:	e8 4d f6 ff ff       	call   c0013291 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013c44:	5f                   	pop    edi
c0013c45:	89 c6                	mov    esi,eax
c0013c47:	5a                   	pop    edx
c0013c48:	50                   	push   eax
c0013c49:	68 38 1f 02 c0       	push   0xc0021f38
c0013c4e:	e8 f2 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013c53:	83 c4 10             	add    esp,0x10
c0013c56:	85 f6                	test   esi,esi
c0013c58:	74 28                	je     c0013c82 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013c5a:	50                   	push   eax
c0013c5b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013c5f:	57                   	push   edi
c0013c60:	56                   	push   esi
c0013c61:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c64:	e8 0c f2 ff ff       	call   c0012e75 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013c69:	83 c4 0c             	add    esp,0xc
c0013c6c:	89 c3                	mov    ebx,eax
c0013c6e:	57                   	push   edi
c0013c6f:	50                   	push   eax
c0013c70:	68 40 1f 02 c0       	push   0xc0021f40
c0013c75:	e8 cb 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013c7a:	89 d8                	mov    eax,ebx
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	99                   	cdq    
c0013c80:	eb 05                	jmp    c0013c87 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013c82:	83 c8 ff             	or     eax,0xffffffff
c0013c85:	89 c2                	mov    edx,eax
c0013c87:	81 c4 30 01 00 00    	add    esp,0x130
c0013c8d:	5b                   	pop    ebx
c0013c8e:	5e                   	pop    esi
c0013c8f:	5f                   	pop    edi
c0013c90:	c3                   	ret    

c0013c91 <SysRegistryReadExtent(regs*)>:
c0013c91:	83 ec 1c             	sub    esp,0x1c
c0013c94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c98:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013c9b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013c9e:	85 c0                	test   eax,eax
c0013ca0:	79 1f                	jns    c0013cc1 <SysRegistryReadExtent(regs*)+0x30>
c0013ca2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013ca7:	52                   	push   edx
c0013ca8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013cac:	52                   	push   edx
c0013cad:	50                   	push   eax
c0013cae:	51                   	push   ecx
c0013caf:	e8 b3 f0 ff ff       	call   c0012d67 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013cb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013cbc:	83 c4 10             	add    esp,0x10
c0013cbf:	eb 14                	jmp    c0013cd5 <SysRegistryReadExtent(regs*)+0x44>
c0013cc1:	83 ec 04             	sub    esp,0x4
c0013cc4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013cc7:	50                   	push   eax
c0013cc8:	51                   	push   ecx
c0013cc9:	e8 33 eb ff ff       	call   c0012801 <CmGetString(Reghive_Tag*, int, char*)>
c0013cce:	83 c4 10             	add    esp,0x10
c0013cd1:	31 c0                	xor    eax,eax
c0013cd3:	31 d2                	xor    edx,edx
c0013cd5:	83 c4 1c             	add    esp,0x1c
c0013cd8:	c3                   	ret    

c0013cd9 <SysRegistryPathToExtentLookup(regs*)>:
c0013cd9:	53                   	push   ebx
c0013cda:	83 ec 10             	sub    esp,0x10
c0013cdd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ce1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ce4:	68 56 1f 02 c0       	push   0xc0021f56
c0013ce9:	e8 57 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013cee:	58                   	pop    eax
c0013cef:	5a                   	pop    edx
c0013cf0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cf3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cf6:	e8 96 f5 ff ff       	call   c0013291 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013cfb:	83 c4 18             	add    esp,0x18
c0013cfe:	99                   	cdq    
c0013cff:	5b                   	pop    ebx
c0013d00:	c3                   	ret    

c0013d01 <SysRegistryEnterDirectory(regs*)>:
c0013d01:	53                   	push   ebx
c0013d02:	83 ec 10             	sub    esp,0x10
c0013d05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d09:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d0c:	68 79 1f 02 c0       	push   0xc0021f79
c0013d11:	e8 2f 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d16:	58                   	pop    eax
c0013d17:	5a                   	pop    edx
c0013d18:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d1b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d1e:	e8 55 eb ff ff       	call   c0012878 <CmEnterDirectory(Reghive_Tag*, int)>
c0013d23:	83 c4 18             	add    esp,0x18
c0013d26:	99                   	cdq    
c0013d27:	5b                   	pop    ebx
c0013d28:	c3                   	ret    

c0013d29 <SysRegistryGetNext(regs*)>:
c0013d29:	53                   	push   ebx
c0013d2a:	83 ec 10             	sub    esp,0x10
c0013d2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d31:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d34:	68 97 1f 02 c0       	push   0xc0021f97
c0013d39:	e8 07 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d3e:	58                   	pop    eax
c0013d3f:	5a                   	pop    edx
c0013d40:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d43:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d46:	e8 6c eb ff ff       	call   c00128b7 <CmGetNext(Reghive_Tag*, int)>
c0013d4b:	83 c4 18             	add    esp,0x18
c0013d4e:	99                   	cdq    
c0013d4f:	5b                   	pop    ebx
c0013d50:	c3                   	ret    

c0013d51 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013d51:	57                   	push   edi
c0013d52:	56                   	push   esi
c0013d53:	53                   	push   ebx
c0013d54:	81 ec 34 01 00 00    	sub    esp,0x134
c0013d5a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013d61:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013d65:	57                   	push   edi
c0013d66:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013d69:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d6c:	e8 04 f1 ff ff       	call   c0012e75 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013d71:	89 c3                	mov    ebx,eax
c0013d73:	58                   	pop    eax
c0013d74:	5a                   	pop    edx
c0013d75:	57                   	push   edi
c0013d76:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013d79:	e8 c2 c8 fe ff       	call   c0000640 <strcpy>
c0013d7e:	89 d8                	mov    eax,ebx
c0013d80:	81 c4 40 01 00 00    	add    esp,0x140
c0013d86:	99                   	cdq    
c0013d87:	5b                   	pop    ebx
c0013d88:	5e                   	pop    esi
c0013d89:	5f                   	pop    edi
c0013d8a:	c3                   	ret    

c0013d8b <SysRegistryOpen(regs*)>:
c0013d8b:	83 ec 18             	sub    esp,0x18
c0013d8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d92:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d95:	e8 f7 e8 ff ff       	call   c0012691 <CmOpen(char const*)>
c0013d9a:	83 c4 1c             	add    esp,0x1c
c0013d9d:	99                   	cdq    
c0013d9e:	c3                   	ret    

c0013d9f <SysRegistryClose(regs*)>:
c0013d9f:	83 ec 18             	sub    esp,0x18
c0013da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013da6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013da9:	e8 01 ea ff ff       	call   c00127af <CmClose(Reghive_Tag*)>
c0013dae:	31 c0                	xor    eax,eax
c0013db0:	31 d2                	xor    edx,edx
c0013db2:	83 c4 1c             	add    esp,0x1c
c0013db5:	c3                   	ret    

c0013db6 <SysSbrk(regs*)>:
c0013db6:	56                   	push   esi
c0013db7:	53                   	push   ebx
c0013db8:	50                   	push   eax
c0013db9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013dc2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013dc5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013dc8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013dce:	85 db                	test   ebx,ebx
c0013dd0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013dd3:	74 02                	je     c0013dd7 <SysSbrk(regs*)+0x21>
c0013dd5:	79 06                	jns    c0013ddd <SysSbrk(regs*)+0x27>
c0013dd7:	89 f0                	mov    eax,esi
c0013dd9:	31 d2                	xor    edx,edx
c0013ddb:	eb 2a                	jmp    c0013e07 <SysSbrk(regs*)+0x51>
c0013ddd:	83 c8 ff             	or     eax,0xffffffff
c0013de0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013de6:	89 c2                	mov    edx,eax
c0013de8:	77 1d                	ja     c0013e07 <SysSbrk(regs*)+0x51>
c0013dea:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013df0:	50                   	push   eax
c0013df1:	c1 ea 0c             	shr    edx,0xc
c0013df4:	68 07 0c 00 00       	push   0xc07
c0013df9:	52                   	push   edx
c0013dfa:	51                   	push   ecx
c0013dfb:	e8 24 60 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0013e00:	89 f0                	mov    eax,esi
c0013e02:	31 d2                	xor    edx,edx
c0013e04:	83 c4 10             	add    esp,0x10
c0013e07:	59                   	pop    ecx
c0013e08:	5b                   	pop    ebx
c0013e09:	5e                   	pop    esi
c0013e0a:	c3                   	ret    

c0013e0b <SysSetCwd(regs*)>:
c0013e0b:	83 ec 14             	sub    esp,0x14
c0013e0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e12:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e1a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e1d:	e8 f7 7c ff ff       	call   c000bb19 <Fs::setcwd(Process*, char*)>
c0013e22:	83 c4 1c             	add    esp,0x1c
c0013e25:	99                   	cdq    
c0013e26:	c3                   	ret    

c0013e27 <SysSetTime(regs*)>:
c0013e27:	55                   	push   ebp
c0013e28:	31 c9                	xor    ecx,ecx
c0013e2a:	57                   	push   edi
c0013e2b:	bd 0c 00 00 00       	mov    ebp,0xc
c0013e30:	56                   	push   esi
c0013e31:	53                   	push   ebx
c0013e32:	31 db                	xor    ebx,ebx
c0013e34:	83 ec 10             	sub    esp,0x10
c0013e37:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e3b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013e3e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e41:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013e44:	89 c2                	mov    edx,eax
c0013e46:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013e4c:	83 e2 1f             	and    edx,0x1f
c0013e4f:	c1 e7 10             	shl    edi,0x10
c0013e52:	42                   	inc    edx
c0013e53:	c1 e8 05             	shr    eax,0x5
c0013e56:	88 d1                	mov    cl,dl
c0013e58:	31 d2                	xor    edx,edx
c0013e5a:	f7 f5                	div    ebp
c0013e5c:	89 dd                	mov    ebp,ebx
c0013e5e:	88 d5                	mov    ch,dl
c0013e60:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013e66:	0f b7 c1             	movzx  eax,cx
c0013e69:	31 d2                	xor    edx,edx
c0013e6b:	09 f8                	or     eax,edi
c0013e6d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013e72:	89 c1                	mov    ecx,eax
c0013e74:	89 f0                	mov    eax,esi
c0013e76:	f7 f7                	div    edi
c0013e78:	c1 e2 10             	shl    edx,0x10
c0013e7b:	09 d5                	or     ebp,edx
c0013e7d:	31 d2                	xor    edx,edx
c0013e7f:	89 eb                	mov    ebx,ebp
c0013e81:	f7 f7                	div    edi
c0013e83:	bf 10 0e 00 00       	mov    edi,0xe10
c0013e88:	88 d7                	mov    bh,dl
c0013e8a:	89 f0                	mov    eax,esi
c0013e8c:	31 d2                	xor    edx,edx
c0013e8e:	f7 f7                	div    edi
c0013e90:	bf 18 00 00 00       	mov    edi,0x18
c0013e95:	31 d2                	xor    edx,edx
c0013e97:	f7 f7                	div    edi
c0013e99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013e9e:	88 d3                	mov    bl,dl
c0013ea0:	53                   	push   ebx
c0013ea1:	51                   	push   ecx
c0013ea2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013ea8:	e8 69 84 ff ff       	call   c000c316 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013ead:	83 c4 1c             	add    esp,0x1c
c0013eb0:	83 f0 01             	xor    eax,0x1
c0013eb3:	5b                   	pop    ebx
c0013eb4:	0f b6 c0             	movzx  eax,al
c0013eb7:	5e                   	pop    esi
c0013eb8:	31 d2                	xor    edx,edx
c0013eba:	5f                   	pop    edi
c0013ebb:	5d                   	pop    ebp
c0013ebc:	c3                   	ret    

c0013ebd <SysTimezone(regs*)>:
c0013ebd:	53                   	push   ebx
c0013ebe:	83 ec 08             	sub    esp,0x8
c0013ec1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ec5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013ec9:	75 17                	jne    c0013ee2 <SysTimezone(regs*)+0x25>
c0013ecb:	83 ec 0c             	sub    esp,0xc
c0013ece:	68 ae 1f 02 c0       	push   0xc0021fae
c0013ed3:	e8 6d 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013ed8:	83 c8 ff             	or     eax,0xffffffff
c0013edb:	83 c4 10             	add    esp,0x10
c0013ede:	89 c2                	mov    edx,eax
c0013ee0:	eb 20                	jmp    c0013f02 <SysTimezone(regs*)+0x45>
c0013ee2:	83 ec 0c             	sub    esp,0xc
c0013ee5:	68 c3 1f 02 c0       	push   0xc0021fc3
c0013eea:	e8 56 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013eef:	58                   	pop    eax
c0013ef0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ef3:	e8 88 81 ff ff       	call   c000c080 <User::loadClockSettings(int)>
c0013ef8:	83 c4 10             	add    esp,0x10
c0013efb:	b8 01 00 00 00       	mov    eax,0x1
c0013f00:	31 d2                	xor    edx,edx
c0013f02:	83 c4 08             	add    esp,0x8
c0013f05:	5b                   	pop    ebx
c0013f06:	c3                   	ret    

c0013f07 <SysTruncate(regs*)>:
c0013f07:	55                   	push   ebp
c0013f08:	57                   	push   edi
c0013f09:	31 ff                	xor    edi,edi
c0013f0b:	56                   	push   esi
c0013f0c:	53                   	push   ebx
c0013f0d:	83 ec 0c             	sub    esp,0xc
c0013f10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f14:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f17:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013f1a:	89 ce                	mov    esi,ecx
c0013f1c:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013f20:	0f 84 9a 00 00 00    	je     c0013fc0 <SysTruncate(regs*)+0xb9>
c0013f26:	83 ec 0c             	sub    esp,0xc
c0013f29:	68 14 01 00 00       	push   0x114
c0013f2e:	e8 83 3b ff ff       	call   c0007ab6 <malloc>
c0013f33:	83 c4 0c             	add    esp,0xc
c0013f36:	89 c3                	mov    ebx,eax
c0013f38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f3d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f40:	55                   	push   ebp
c0013f41:	53                   	push   ebx
c0013f42:	e8 b3 77 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c0013f47:	83 c4 10             	add    esp,0x10
c0013f4a:	31 d2                	xor    edx,edx
c0013f4c:	b8 03 00 00 00       	mov    eax,0x3
c0013f51:	85 db                	test   ebx,ebx
c0013f53:	0f 84 a2 00 00 00    	je     c0013ffb <SysTruncate(regs*)+0xf4>
c0013f59:	51                   	push   ecx
c0013f5a:	51                   	push   ecx
c0013f5b:	6a 02                	push   0x2
c0013f5d:	53                   	push   ebx
c0013f5e:	e8 53 78 ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	85 c0                	test   eax,eax
c0013f68:	74 13                	je     c0013f7d <SysTruncate(regs*)+0x76>
c0013f6a:	83 ec 0c             	sub    esp,0xc
c0013f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f6f:	53                   	push   ebx
c0013f70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f73:	83 c4 10             	add    esp,0x10
c0013f76:	b8 04 00 00 00       	mov    eax,0x4
c0013f7b:	eb 7c                	jmp    c0013ff9 <SysTruncate(regs*)+0xf2>
c0013f7d:	52                   	push   edx
c0013f7e:	57                   	push   edi
c0013f7f:	56                   	push   esi
c0013f80:	53                   	push   ebx
c0013f81:	e8 44 79 ff ff       	call   c000b8ca <File::truncate(unsigned long long)>
c0013f86:	83 c4 10             	add    esp,0x10
c0013f89:	85 c0                	test   eax,eax
c0013f8b:	74 1b                	je     c0013fa8 <SysTruncate(regs*)+0xa1>
c0013f8d:	83 ec 0c             	sub    esp,0xc
c0013f90:	53                   	push   ebx
c0013f91:	e8 7e 78 ff ff       	call   c000b814 <File::close()>
c0013f96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f9e:	83 c4 10             	add    esp,0x10
c0013fa1:	b8 05 00 00 00       	mov    eax,0x5
c0013fa6:	eb 51                	jmp    c0013ff9 <SysTruncate(regs*)+0xf2>
c0013fa8:	83 ec 0c             	sub    esp,0xc
c0013fab:	53                   	push   ebx
c0013fac:	e8 63 78 ff ff       	call   c000b814 <File::close()>
c0013fb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fb6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013fb9:	83 c4 10             	add    esp,0x10
c0013fbc:	31 c0                	xor    eax,eax
c0013fbe:	eb 39                	jmp    c0013ff9 <SysTruncate(regs*)+0xf2>
c0013fc0:	31 d2                	xor    edx,edx
c0013fc2:	b8 01 00 00 00       	mov    eax,0x1
c0013fc7:	83 fd 02             	cmp    ebp,0x2
c0013fca:	7e 2f                	jle    c0013ffb <SysTruncate(regs*)+0xf4>
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	51                   	push   ecx
c0013fd0:	e8 de 54 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013fd5:	83 c4 10             	add    esp,0x10
c0013fd8:	89 c1                	mov    ecx,eax
c0013fda:	31 d2                	xor    edx,edx
c0013fdc:	b8 02 00 00 00       	mov    eax,0x2
c0013fe1:	85 c9                	test   ecx,ecx
c0013fe3:	74 16                	je     c0013ffb <SysTruncate(regs*)+0xf4>
c0013fe5:	50                   	push   eax
c0013fe6:	57                   	push   edi
c0013fe7:	56                   	push   esi
c0013fe8:	51                   	push   ecx
c0013fe9:	e8 dc 78 ff ff       	call   c000b8ca <File::truncate(unsigned long long)>
c0013fee:	83 c4 10             	add    esp,0x10
c0013ff1:	85 c0                	test   eax,eax
c0013ff3:	0f 95 c0             	setne  al
c0013ff6:	0f b6 c0             	movzx  eax,al
c0013ff9:	31 d2                	xor    edx,edx
c0013ffb:	83 c4 0c             	add    esp,0xc
c0013ffe:	5b                   	pop    ebx
c0013fff:	5e                   	pop    esi
c0014000:	5f                   	pop    edi
c0014001:	5d                   	pop    ebp
c0014002:	c3                   	ret    

c0014003 <SysWrite(regs*)>:
c0014003:	57                   	push   edi
c0014004:	56                   	push   esi
c0014005:	53                   	push   ebx
c0014006:	83 ec 10             	sub    esp,0x10
c0014009:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001400d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014010:	83 f8 02             	cmp    eax,0x2
c0014013:	77 10                	ja     c0014025 <SysWrite(regs*)+0x22>
c0014015:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001401a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001401d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014023:	eb 0e                	jmp    c0014033 <SysWrite(regs*)+0x30>
c0014025:	83 ec 0c             	sub    esp,0xc
c0014028:	50                   	push   eax
c0014029:	e8 85 54 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001402e:	83 c4 10             	add    esp,0x10
c0014031:	89 c1                	mov    ecx,eax
c0014033:	83 c8 ff             	or     eax,0xffffffff
c0014036:	85 c9                	test   ecx,ecx
c0014038:	89 c2                	mov    edx,eax
c001403a:	74 28                	je     c0014064 <SysWrite(regs*)+0x61>
c001403c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014044:	31 ff                	xor    edi,edi
c0014046:	83 ec 0c             	sub    esp,0xc
c0014049:	8b 01                	mov    eax,DWORD PTR [ecx]
c001404b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001404f:	52                   	push   edx
c0014050:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014053:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014056:	57                   	push   edi
c0014057:	56                   	push   esi
c0014058:	51                   	push   ecx
c0014059:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001405c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014060:	83 c4 20             	add    esp,0x20
c0014063:	99                   	cdq    
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	5b                   	pop    ebx
c0014068:	5e                   	pop    esi
c0014069:	5f                   	pop    edi
c001406a:	c3                   	ret    

c001406b <SysWsbe(regs*)>:
c001406b:	57                   	push   edi
c001406c:	b9 0b 00 00 00       	mov    ecx,0xb
c0014071:	56                   	push   esi
c0014072:	be 02 20 02 c0       	mov    esi,0xc0022002
c0014077:	53                   	push   ebx
c0014078:	83 ec 30             	sub    esp,0x30
c001407b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001407f:	fc                   	cld    
c0014080:	83 ec 0c             	sub    esp,0xc
c0014083:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014085:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014089:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001408e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014091:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014097:	8b 06                	mov    eax,DWORD PTR [esi]
c0014099:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001409c:	57                   	push   edi
c001409d:	e8 ce c4 fe ff       	call   c0000570 <strlen>
c00140a2:	5a                   	pop    edx
c00140a3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00140a7:	52                   	push   edx
c00140a8:	31 d2                	xor    edx,edx
c00140aa:	57                   	push   edi
c00140ab:	52                   	push   edx
c00140ac:	50                   	push   eax
c00140ad:	56                   	push   esi
c00140ae:	ff d3                	call   ebx
c00140b0:	83 c4 14             	add    esp,0x14
c00140b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00140b7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00140ba:	e8 ad 23 00 00       	call   c001646c <terminateTask(int)>
c00140bf:	83 c4 40             	add    esp,0x40
c00140c2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00140c7:	5b                   	pop    ebx
c00140c8:	31 d2                	xor    edx,edx
c00140ca:	5e                   	pop    esi
c00140cb:	5f                   	pop    edi
c00140cc:	c3                   	ret    

c00140cd <SysYield(regs*)>:
c00140cd:	83 ec 0c             	sub    esp,0xc
c00140d0:	fa                   	cli    
c00140d1:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00140d7:	e8 f0 19 00 00       	call   c0015acc <schedule()>
c00140dc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00140e1:	48                   	dec    eax
c00140e2:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00140e7:	75 01                	jne    c00140ea <SysYield(regs*)+0x1d>
c00140e9:	fb                   	sti    
c00140ea:	31 c0                	xor    eax,eax
c00140ec:	31 d2                	xor    edx,edx
c00140ee:	83 c4 0c             	add    esp,0xc
c00140f1:	c3                   	ret    

c00140f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00140f2:	55                   	push   ebp
c00140f3:	57                   	push   edi
c00140f4:	56                   	push   esi
c00140f5:	53                   	push   ebx
c00140f6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00140fc:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014104:	0f 95 c0             	setne  al
c0014107:	31 d2                	xor    edx,edx
c0014109:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014111:	0f 94 c2             	sete   dl
c0014114:	85 c2                	test   edx,eax
c0014116:	74 34                	je     c001414c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014118:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014123:	74 27                	je     c001414c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014125:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001412c:	05 00 10 00 00       	add    eax,0x1000
c0014131:	89 c1                	mov    ecx,eax
c0014133:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014138:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001413e:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014145:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001414c:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014153:	83 ec 0c             	sub    esp,0xc
c0014156:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001415c:	6a 01                	push   0x1
c001415e:	e8 aa 54 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0014163:	83 c4 10             	add    esp,0x10
c0014166:	89 c3                	mov    ebx,eax
c0014168:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001416e:	0f 86 25 01 00 00    	jbe    c0014299 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014174:	c1 ee 0c             	shr    esi,0xc
c0014177:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001417e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014182:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001418a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014195:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001419c:	29 ef                	sub    edi,ebp
c001419e:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00141a2:	0f 83 f8 00 00 00    	jae    c00142a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00141a8:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00141ae:	76 05                	jbe    c00141b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00141b0:	bf 00 10 00 00       	mov    edi,0x1000
c00141b5:	83 ec 0c             	sub    esp,0xc
c00141b8:	31 d2                	xor    edx,edx
c00141ba:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00141c1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141c7:	50                   	push   eax
c00141c8:	8d 74 24 30          	lea    esi,[esp+0x30]
c00141cc:	56                   	push   esi
c00141cd:	52                   	push   edx
c00141ce:	57                   	push   edi
c00141cf:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00141d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141d9:	83 c4 20             	add    esp,0x20
c00141dc:	85 c0                	test   eax,eax
c00141de:	75 06                	jne    c00141e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00141e0:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00141e4:	74 13                	je     c00141f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00141e6:	83 ec 0c             	sub    esp,0xc
c00141e9:	53                   	push   ebx
c00141ea:	e8 3c 57 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00141ef:	83 c4 10             	add    esp,0x10
c00141f2:	31 c0                	xor    eax,eax
c00141f4:	e9 7c 01 00 00       	jmp    c0014375 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00141f9:	fa                   	cli    
c00141fa:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0014200:	e8 ba 3b ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014205:	6a 07                	push   0x7
c0014207:	89 c7                	mov    edi,eax
c0014209:	53                   	push   ebx
c001420a:	50                   	push   eax
c001420b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014210:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014213:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014219:	e8 02 5b ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001421e:	83 c4 0c             	add    esp,0xc
c0014221:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014228:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001422e:	6a 00                	push   0x0
c0014230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014235:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014238:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001423e:	e8 43 59 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014243:	58                   	pop    eax
c0014244:	5a                   	pop    edx
c0014245:	68 07 0c 00 00       	push   0xc07
c001424a:	55                   	push   ebp
c001424b:	57                   	push   edi
c001424c:	89 df                	mov    edi,ebx
c001424e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014255:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001425b:	6a 00                	push   0x0
c001425d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014262:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014265:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001426b:	e8 02 5d ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014270:	b9 00 10 00 00       	mov    ecx,0x1000
c0014275:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014277:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001427c:	83 c4 20             	add    esp,0x20
c001427f:	48                   	dec    eax
c0014280:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0014285:	85 c0                	test   eax,eax
c0014287:	75 01                	jne    c001428a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0014289:	fb                   	sti    
c001428a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014290:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014294:	e9 f1 fe ff ff       	jmp    c001418a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014299:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00142a0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00142a7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00142ad:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00142b3:	0f 86 ae 00 00 00    	jbe    c0014367 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00142b9:	fa                   	cli    
c00142ba:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00142c0:	c1 ee 0c             	shr    esi,0xc
c00142c3:	51                   	push   ecx
c00142c4:	31 ff                	xor    edi,edi
c00142c6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00142cd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142d3:	6a 00                	push   0x0
c00142d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142dd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142e3:	e8 9e 58 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00142e8:	83 c4 10             	add    esp,0x10
c00142eb:	e8 cf 3a ff ff       	call   c0007dbf <Phys::allocatePage()>
c00142f0:	47                   	inc    edi
c00142f1:	6a 07                	push   0x7
c00142f3:	53                   	push   ebx
c00142f4:	50                   	push   eax
c00142f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00142ff:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014302:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014308:	e8 13 5a ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001430d:	58                   	pop    eax
c001430e:	5a                   	pop    edx
c001430f:	68 07 0c 00 00       	push   0xc07
c0014314:	55                   	push   ebp
c0014315:	81 c5 00 10 00 00    	add    ebp,0x1000
c001431b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001431f:	50                   	push   eax
c0014320:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014327:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001432d:	6a 00                	push   0x0
c001432f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014334:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014337:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001433d:	e8 30 5c ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014342:	83 c4 1c             	add    esp,0x1c
c0014345:	68 00 10 00 00       	push   0x1000
c001434a:	6a 00                	push   0x0
c001434c:	53                   	push   ebx
c001434d:	e8 9e c1 fe ff       	call   c00004f0 <memset>
c0014352:	83 c4 10             	add    esp,0x10
c0014355:	39 fe                	cmp    esi,edi
c0014357:	77 92                	ja     c00142eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014359:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001435e:	48                   	dec    eax
c001435f:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0014364:	75 01                	jne    c0014367 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014366:	fb                   	sti    
c0014367:	83 ec 0c             	sub    esp,0xc
c001436a:	53                   	push   ebx
c001436b:	e8 bb 55 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014370:	83 c4 10             	add    esp,0x10
c0014373:	b0 01                	mov    al,0x1
c0014375:	81 c4 2c 10 00 00    	add    esp,0x102c
c001437b:	5b                   	pop    ebx
c001437c:	5e                   	pop    esi
c001437d:	5f                   	pop    edi
c001437e:	5d                   	pop    ebp
c001437f:	c3                   	ret    

c0014380 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014380:	55                   	push   ebp
c0014381:	57                   	push   edi
c0014382:	56                   	push   esi
c0014383:	53                   	push   ebx
c0014384:	83 ec 48             	sub    esp,0x48
c0014387:	68 14 01 00 00       	push   0x114
c001438c:	e8 25 37 ff ff       	call   c0007ab6 <malloc>
c0014391:	83 c4 0c             	add    esp,0xc
c0014394:	89 c6                	mov    esi,eax
c0014396:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001439a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001439e:	50                   	push   eax
c001439f:	e8 56 73 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c00143a4:	58                   	pop    eax
c00143a5:	5a                   	pop    edx
c00143a6:	6a 01                	push   0x1
c00143a8:	56                   	push   esi
c00143a9:	e8 08 74 ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c00143ae:	83 c4 10             	add    esp,0x10
c00143b1:	85 c0                	test   eax,eax
c00143b3:	0f 85 43 01 00 00    	jne    c00144fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00143b9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00143c1:	83 ec 0c             	sub    esp,0xc
c00143c4:	6a 34                	push   0x34
c00143c6:	e8 eb 36 ff ff       	call   c0007ab6 <malloc>
c00143cb:	89 c3                	mov    ebx,eax
c00143cd:	58                   	pop    eax
c00143ce:	8b 06                	mov    eax,DWORD PTR [esi]
c00143d0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00143d4:	57                   	push   edi
c00143d5:	53                   	push   ebx
c00143d6:	6a 00                	push   0x0
c00143d8:	6a 34                	push   0x34
c00143da:	56                   	push   esi
c00143db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143de:	83 c4 20             	add    esp,0x20
c00143e1:	85 c0                	test   eax,eax
c00143e3:	0f 85 13 01 00 00    	jne    c00144fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00143e9:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00143ef:	0f 85 07 01 00 00    	jne    c00144fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00143f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00143f8:	85 c0                	test   eax,eax
c00143fa:	0f 84 fc 00 00 00    	je     c00144fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014400:	31 d2                	xor    edx,edx
c0014402:	55                   	push   ebp
c0014403:	52                   	push   edx
c0014404:	50                   	push   eax
c0014405:	56                   	push   esi
c0014406:	e8 69 74 ff ff       	call   c000b874 <File::seek(unsigned long long)>
c001440b:	83 c4 10             	add    esp,0x10
c001440e:	85 c0                	test   eax,eax
c0014410:	0f 85 e6 00 00 00    	jne    c00144fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014416:	83 ec 0c             	sub    esp,0xc
c0014419:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001441c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014420:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014424:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014428:	0f af c2             	imul   eax,edx
c001442b:	50                   	push   eax
c001442c:	e8 85 36 ff ff       	call   c0007ab6 <malloc>
c0014431:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014433:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014437:	89 3c 24             	mov    DWORD PTR [esp],edi
c001443a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001443e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014442:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014446:	0f af c2             	imul   eax,edx
c0014449:	99                   	cdq    
c001444a:	52                   	push   edx
c001444b:	50                   	push   eax
c001444c:	56                   	push   esi
c001444d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014450:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014453:	83 c4 20             	add    esp,0x20
c0014456:	85 c0                	test   eax,eax
c0014458:	0f 84 9e 00 00 00    	je     c00144fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001445e:	31 d2                	xor    edx,edx
c0014460:	51                   	push   ecx
c0014461:	52                   	push   edx
c0014462:	50                   	push   eax
c0014463:	56                   	push   esi
c0014464:	e8 0b 74 ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0014469:	83 c4 10             	add    esp,0x10
c001446c:	85 c0                	test   eax,eax
c001446e:	0f 85 88 00 00 00    	jne    c00144fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014474:	83 ec 0c             	sub    esp,0xc
c0014477:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001447b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001447f:	31 ed                	xor    ebp,ebp
c0014481:	0f af c2             	imul   eax,edx
c0014484:	50                   	push   eax
c0014485:	e8 2c 36 ff ff       	call   c0007ab6 <malloc>
c001448a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001448c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014490:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014493:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014497:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001449b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001449f:	0f af c2             	imul   eax,edx
c00144a2:	99                   	cdq    
c00144a3:	52                   	push   edx
c00144a4:	50                   	push   eax
c00144a5:	56                   	push   esi
c00144a6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144a9:	83 c4 20             	add    esp,0x20
c00144ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144b4:	0f b7 fd             	movzx  edi,bp
c00144b7:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00144bb:	73 7d                	jae    c001453a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c00144bd:	c1 e7 05             	shl    edi,0x5
c00144c0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00144c4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00144c7:	75 6b                	jne    c0014534 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00144c9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00144cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144d0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00144d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144d7:	52                   	push   edx
c00144d8:	31 d2                	xor    edx,edx
c00144da:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00144dd:	52                   	push   edx
c00144de:	50                   	push   eax
c00144df:	56                   	push   esi
c00144e0:	e8 8f 73 ff ff       	call   c000b874 <File::seek(unsigned long long)>
c00144e5:	83 c4 10             	add    esp,0x10
c00144e8:	85 c0                	test   eax,eax
c00144ea:	74 17                	je     c0014503 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c00144ec:	83 ec 0c             	sub    esp,0xc
c00144ef:	68 2e 20 02 c0       	push   0xc002202e
c00144f4:	e8 4c 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00144f9:	83 c4 10             	add    esp,0x10
c00144fc:	31 c0                	xor    eax,eax
c00144fe:	e9 87 00 00 00       	jmp    c001458a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014503:	83 ec 0c             	sub    esp,0xc
c0014506:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014509:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001450c:	50                   	push   eax
c001450d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014511:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014515:	56                   	push   esi
c0014516:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001451a:	e8 d3 fb ff ff       	call   c00140f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001451f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014523:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014527:	83 c4 20             	add    esp,0x20
c001452a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001452e:	73 04                	jae    c0014534 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014530:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014534:	45                   	inc    ebp
c0014535:	e9 7a ff ff ff       	jmp    c00144b4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001453a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001453e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014546:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001454c:	83 ec 0c             	sub    esp,0xc
c001454f:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014555:	25 00 f0 ff ff       	and    eax,0xfffff000
c001455a:	05 00 10 00 00       	add    eax,0x1000
c001455f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014566:	e8 5b 35 ff ff       	call   c0007ac6 <free>
c001456b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001456e:	e8 53 35 ff ff       	call   c0007ac6 <free>
c0014573:	58                   	pop    eax
c0014574:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014578:	e8 49 35 ff ff       	call   c0007ac6 <free>
c001457d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014580:	e8 8f 72 ff ff       	call   c000b814 <File::close()>
c0014585:	83 c4 10             	add    esp,0x10
c0014588:	b0 01                	mov    al,0x1
c001458a:	83 c4 3c             	add    esp,0x3c
c001458d:	5b                   	pop    ebx
c001458e:	5e                   	pop    esi
c001458f:	5f                   	pop    edi
c0014590:	5d                   	pop    ebp
c0014591:	c3                   	ret    

c0014592 <Thr::runtimeReferenceHelper()>:
c0014592:	83 ec 18             	sub    esp,0x18
c0014595:	68 36 20 02 c0       	push   0xc0022036
c001459a:	e8 a6 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001459f:	fa                   	cli    
c00145a0:	83 c4 10             	add    esp,0x10
c00145a3:	eb fe                	jmp    c00145a3 <Thr::runtimeReferenceHelper()+0x11>

c00145a5 <Thr::getAddressOfKernelSymbol(char const*)>:
c00145a5:	57                   	push   edi
c00145a6:	56                   	push   esi
c00145a7:	53                   	push   ebx
c00145a8:	31 db                	xor    ebx,ebx
c00145aa:	39 1d 40 a4 02 c0    	cmp    DWORD PTR ds:0xc002a440,ebx
c00145b0:	7e 3c                	jle    c00145ee <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00145b2:	8b 34 9d c0 a3 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5c40]
c00145b9:	31 ff                	xor    edi,edi
c00145bb:	39 3c 9d c0 a2 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd5d40],edi
c00145c2:	7e 27                	jle    c00145eb <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00145c4:	50                   	push   eax
c00145c5:	50                   	push   eax
c00145c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145ca:	8b 06                	mov    eax,DWORD PTR [esi]
c00145cc:	03 04 9d 40 a3 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd5cc0]
c00145d3:	50                   	push   eax
c00145d4:	e8 77 c1 fe ff       	call   c0000750 <strcmp>
c00145d9:	83 c4 10             	add    esp,0x10
c00145dc:	85 c0                	test   eax,eax
c00145de:	75 05                	jne    c00145e5 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00145e0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00145e3:	eb 0b                	jmp    c00145f0 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00145e5:	83 c6 10             	add    esi,0x10
c00145e8:	47                   	inc    edi
c00145e9:	eb d0                	jmp    c00145bb <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00145eb:	43                   	inc    ebx
c00145ec:	eb bc                	jmp    c00145aa <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00145ee:	31 c0                	xor    eax,eax
c00145f0:	5b                   	pop    ebx
c00145f1:	5e                   	pop    esi
c00145f2:	5f                   	pop    edi
c00145f3:	c3                   	ret    

c00145f4 <Thr::loadKernelSymbolTable(char const*)>:
c00145f4:	55                   	push   ebp
c00145f5:	57                   	push   edi
c00145f6:	56                   	push   esi
c00145f7:	53                   	push   ebx
c00145f8:	83 ec 68             	sub    esp,0x68
c00145fb:	8b 35 90 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a490
c0014601:	68 14 01 00 00       	push   0x114
c0014606:	e8 ab 34 ff ff       	call   c0007ab6 <malloc>
c001460b:	83 c4 0c             	add    esp,0xc
c001460e:	89 c3                	mov    ebx,eax
c0014610:	56                   	push   esi
c0014611:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014615:	50                   	push   eax
c0014616:	e8 df 70 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c001461b:	5e                   	pop    esi
c001461c:	5f                   	pop    edi
c001461d:	6a 01                	push   0x1
c001461f:	53                   	push   ebx
c0014620:	e8 91 71 ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c0014625:	83 c4 10             	add    esp,0x10
c0014628:	85 c0                	test   eax,eax
c001462a:	74 0a                	je     c0014636 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001462c:	83 ec 0c             	sub    esp,0xc
c001462f:	68 58 20 02 c0       	push   0xc0022058
c0014634:	eb 34                	jmp    c001466a <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014636:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001463e:	83 ec 0c             	sub    esp,0xc
c0014641:	6a 34                	push   0x34
c0014643:	e8 6e 34 ff ff       	call   c0007ab6 <malloc>
c0014648:	59                   	pop    ecx
c0014649:	89 c7                	mov    edi,eax
c001464b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001464f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014651:	56                   	push   esi
c0014652:	57                   	push   edi
c0014653:	6a 00                	push   0x0
c0014655:	6a 34                	push   0x34
c0014657:	53                   	push   ebx
c0014658:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001465b:	83 c4 20             	add    esp,0x20
c001465e:	85 c0                	test   eax,eax
c0014660:	74 17                	je     c0014679 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014662:	83 ec 0c             	sub    esp,0xc
c0014665:	68 6f 20 02 c0       	push   0xc002206f
c001466a:	e8 9e cb ff ff       	call   c001120d <KePanic(char const*)>
c001466f:	83 c4 10             	add    esp,0x10
c0014672:	31 c0                	xor    eax,eax
c0014674:	e9 31 02 00 00       	jmp    c00148aa <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014679:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001467f:	75 e1                	jne    c0014662 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014681:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014684:	85 c0                	test   eax,eax
c0014686:	74 da                	je     c0014662 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014688:	52                   	push   edx
c0014689:	31 d2                	xor    edx,edx
c001468b:	52                   	push   edx
c001468c:	50                   	push   eax
c001468d:	53                   	push   ebx
c001468e:	e8 e1 71 ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0014693:	83 c4 10             	add    esp,0x10
c0014696:	85 c0                	test   eax,eax
c0014698:	75 c8                	jne    c0014662 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001469a:	83 ec 0c             	sub    esp,0xc
c001469d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00146a1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00146a5:	31 ed                	xor    ebp,ebp
c00146a7:	0f af c2             	imul   eax,edx
c00146aa:	50                   	push   eax
c00146ab:	e8 06 34 ff ff       	call   c0007ab6 <malloc>
c00146b0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00146b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146b6:	89 34 24             	mov    DWORD PTR [esp],esi
c00146b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146bd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00146c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00146c5:	0f af c2             	imul   eax,edx
c00146c8:	99                   	cdq    
c00146c9:	52                   	push   edx
c00146ca:	50                   	push   eax
c00146cb:	53                   	push   ebx
c00146cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146cf:	83 c4 20             	add    esp,0x20
c00146d2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00146da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00146e2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00146ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146f2:	0f b7 f5             	movzx  esi,bp
c00146f5:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00146f9:	0f 83 a7 00 00 00    	jae    c00147a6 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00146ff:	6b f6 28             	imul   esi,esi,0x28
c0014702:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014706:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014709:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001470d:	50                   	push   eax
c001470e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014712:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014716:	8b 16                	mov    edx,DWORD PTR [esi]
c0014718:	6b c0 28             	imul   eax,eax,0x28
c001471b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001471f:	89 d0                	mov    eax,edx
c0014721:	31 d2                	xor    edx,edx
c0014723:	52                   	push   edx
c0014724:	50                   	push   eax
c0014725:	53                   	push   ebx
c0014726:	e8 49 71 ff ff       	call   c000b874 <File::seek(unsigned long long)>
c001472b:	83 c4 0c             	add    esp,0xc
c001472e:	6a 20                	push   0x20
c0014730:	6a 00                	push   0x0
c0014732:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014736:	52                   	push   edx
c0014737:	e8 b4 bd fe ff       	call   c00004f0 <memset>
c001473c:	58                   	pop    eax
c001473d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001473f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014743:	51                   	push   ecx
c0014744:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014748:	52                   	push   edx
c0014749:	6a 00                	push   0x0
c001474b:	6a 1f                	push   0x1f
c001474d:	53                   	push   ebx
c001474e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014751:	83 c4 18             	add    esp,0x18
c0014754:	68 86 20 02 c0       	push   0xc0022086
c0014759:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001475d:	52                   	push   edx
c001475e:	e8 ed bf fe ff       	call   c0000750 <strcmp>
c0014763:	83 c4 10             	add    esp,0x10
c0014766:	85 c0                	test   eax,eax
c0014768:	75 0f                	jne    c0014779 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001476a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001476d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014771:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014775:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014779:	50                   	push   eax
c001477a:	50                   	push   eax
c001477b:	68 8e 20 02 c0       	push   0xc002208e
c0014780:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014784:	50                   	push   eax
c0014785:	e8 c6 bf fe ff       	call   c0000750 <strcmp>
c001478a:	83 c4 10             	add    esp,0x10
c001478d:	85 c0                	test   eax,eax
c001478f:	75 0f                	jne    c00147a0 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014791:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014794:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014798:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001479c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147a0:	45                   	inc    ebp
c00147a1:	e9 4c ff ff ff       	jmp    c00146f2 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00147a6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00147ab:	75 10                	jne    c00147bd <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00147ad:	83 ec 0c             	sub    esp,0xc
c00147b0:	68 96 20 02 c0       	push   0xc0022096
c00147b5:	e8 53 ca ff ff       	call   c001120d <KePanic(char const*)>
c00147ba:	83 c4 10             	add    esp,0x10
c00147bd:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00147c2:	75 10                	jne    c00147d4 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00147c4:	83 ec 0c             	sub    esp,0xc
c00147c7:	68 96 20 02 c0       	push   0xc0022096
c00147cc:	e8 3c ca ff ff       	call   c001120d <KePanic(char const*)>
c00147d1:	83 c4 10             	add    esp,0x10
c00147d4:	31 d2                	xor    edx,edx
c00147d6:	50                   	push   eax
c00147d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147db:	52                   	push   edx
c00147dc:	50                   	push   eax
c00147dd:	53                   	push   ebx
c00147de:	e8 91 70 ff ff       	call   c000b874 <File::seek(unsigned long long)>
c00147e3:	5a                   	pop    edx
c00147e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147e8:	e8 c9 32 ff ff       	call   c0007ab6 <malloc>
c00147ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147f5:	31 c9                	xor    ecx,ecx
c00147f7:	5e                   	pop    esi
c00147f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147fa:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00147fe:	55                   	push   ebp
c00147ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014803:	51                   	push   ecx
c0014804:	52                   	push   edx
c0014805:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014809:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001480d:	53                   	push   ebx
c001480e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014811:	83 c4 14             	add    esp,0x14
c0014814:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014818:	e8 99 32 ff ff       	call   c0007ab6 <malloc>
c001481d:	89 c6                	mov    esi,eax
c001481f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014821:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014824:	56                   	push   esi
c0014825:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014829:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001482d:	51                   	push   ecx
c001482e:	52                   	push   edx
c001482f:	53                   	push   ebx
c0014830:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014833:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014837:	8b 15 40 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a440
c001483d:	83 c4 1c             	add    esp,0x1c
c0014840:	c1 e8 04             	shr    eax,0x4
c0014843:	89 04 95 c0 a2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5d40],eax
c001484a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001484e:	31 d2                	xor    edx,edx
c0014850:	52                   	push   edx
c0014851:	50                   	push   eax
c0014852:	53                   	push   ebx
c0014853:	e8 1c 70 ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0014858:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001485a:	31 d2                	xor    edx,edx
c001485c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001485f:	56                   	push   esi
c0014860:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014864:	52                   	push   edx
c0014865:	50                   	push   eax
c0014866:	53                   	push   ebx
c0014867:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001486a:	83 c4 14             	add    esp,0x14
c001486d:	53                   	push   ebx
c001486e:	e8 a1 6f ff ff       	call   c000b814 <File::close()>
c0014873:	5d                   	pop    ebp
c0014874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014878:	e8 49 32 ff ff       	call   c0007ac6 <free>
c001487d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014880:	e8 41 32 ff ff       	call   c0007ac6 <free>
c0014885:	a1 40 a4 02 c0       	mov    eax,ds:0xc002a440
c001488a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001488e:	8d 50 01             	lea    edx,[eax+0x1]
c0014891:	89 0c 85 c0 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5c40],ecx
c0014898:	89 34 85 40 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5cc0],esi
c001489f:	89 15 40 a4 02 c0    	mov    DWORD PTR ds:0xc002a440,edx
c00148a5:	83 c4 10             	add    esp,0x10
c00148a8:	b0 01                	mov    al,0x1
c00148aa:	83 c4 5c             	add    esp,0x5c
c00148ad:	5b                   	pop    ebx
c00148ae:	5e                   	pop    esi
c00148af:	5f                   	pop    edi
c00148b0:	5d                   	pop    ebp
c00148b1:	c3                   	ret    

c00148b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00148b2:	55                   	push   ebp
c00148b3:	57                   	push   edi
c00148b4:	56                   	push   esi
c00148b5:	53                   	push   ebx
c00148b6:	81 ec 68 03 00 00    	sub    esp,0x368
c00148bc:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00148c3:	8b 1d 90 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a490
c00148c9:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00148cd:	68 14 01 00 00       	push   0x114
c00148d2:	e8 df 31 ff ff       	call   c0007ab6 <malloc>
c00148d7:	83 c4 0c             	add    esp,0xc
c00148da:	89 c5                	mov    ebp,eax
c00148dc:	53                   	push   ebx
c00148dd:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00148e4:	50                   	push   eax
c00148e5:	e8 10 6e ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c00148ea:	5e                   	pop    esi
c00148eb:	5f                   	pop    edi
c00148ec:	6a 01                	push   0x1
c00148ee:	55                   	push   ebp
c00148ef:	e8 c2 6e ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c00148f4:	83 c4 10             	add    esp,0x10
c00148f7:	85 c0                	test   eax,eax
c00148f9:	0f 85 aa 06 00 00    	jne    c0014fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00148ff:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014907:	83 ec 0c             	sub    esp,0xc
c001490a:	6a 34                	push   0x34
c001490c:	e8 a5 31 ff ff       	call   c0007ab6 <malloc>
c0014911:	5b                   	pop    ebx
c0014912:	89 c7                	mov    edi,eax
c0014914:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014918:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001491b:	53                   	push   ebx
c001491c:	57                   	push   edi
c001491d:	6a 00                	push   0x0
c001491f:	6a 34                	push   0x34
c0014921:	55                   	push   ebp
c0014922:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014925:	83 c4 20             	add    esp,0x20
c0014928:	85 c0                	test   eax,eax
c001492a:	0f 85 79 06 00 00    	jne    c0014fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014930:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014936:	0f 85 6d 06 00 00    	jne    c0014fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001493c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001493f:	85 c0                	test   eax,eax
c0014941:	0f 84 62 06 00 00    	je     c0014fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014947:	31 d2                	xor    edx,edx
c0014949:	51                   	push   ecx
c001494a:	52                   	push   edx
c001494b:	50                   	push   eax
c001494c:	55                   	push   ebp
c001494d:	e8 22 6f ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0014952:	83 c4 10             	add    esp,0x10
c0014955:	85 c0                	test   eax,eax
c0014957:	0f 85 4c 06 00 00    	jne    c0014fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001495d:	83 ec 0c             	sub    esp,0xc
c0014960:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014963:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014967:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001496b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001496f:	0f af c2             	imul   eax,edx
c0014972:	50                   	push   eax
c0014973:	e8 3e 31 ff ff       	call   c0007ab6 <malloc>
c0014978:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001497b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001497f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014982:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014986:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001498a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001498e:	0f af c2             	imul   eax,edx
c0014991:	99                   	cdq    
c0014992:	52                   	push   edx
c0014993:	50                   	push   eax
c0014994:	55                   	push   ebp
c0014995:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014998:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001499b:	83 c4 20             	add    esp,0x20
c001499e:	85 c0                	test   eax,eax
c00149a0:	0f 84 03 06 00 00    	je     c0014fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00149a6:	52                   	push   edx
c00149a7:	31 d2                	xor    edx,edx
c00149a9:	52                   	push   edx
c00149aa:	50                   	push   eax
c00149ab:	55                   	push   ebp
c00149ac:	e8 c3 6e ff ff       	call   c000b874 <File::seek(unsigned long long)>
c00149b1:	83 c4 10             	add    esp,0x10
c00149b4:	85 c0                	test   eax,eax
c00149b6:	0f 85 ed 05 00 00    	jne    c0014fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00149bc:	83 ec 0c             	sub    esp,0xc
c00149bf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00149c3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00149c7:	31 f6                	xor    esi,esi
c00149c9:	0f af c2             	imul   eax,edx
c00149cc:	50                   	push   eax
c00149cd:	e8 e4 30 ff ff       	call   c0007ab6 <malloc>
c00149d2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00149d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00149d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149e0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00149e4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00149e8:	0f af c2             	imul   eax,edx
c00149eb:	99                   	cdq    
c00149ec:	52                   	push   edx
c00149ed:	50                   	push   eax
c00149ee:	55                   	push   ebp
c00149ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149f2:	83 c4 20             	add    esp,0x20
c00149f5:	0f b7 de             	movzx  ebx,si
c00149f8:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00149fc:	0f 83 87 00 00 00    	jae    c0014a89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014a02:	c1 e3 05             	shl    ebx,0x5
c0014a05:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014a09:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014a0c:	75 75                	jne    c0014a83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014a0e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014a11:	31 d2                	xor    edx,edx
c0014a13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a17:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014a1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a1e:	50                   	push   eax
c0014a1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014a22:	52                   	push   edx
c0014a23:	50                   	push   eax
c0014a24:	55                   	push   ebp
c0014a25:	e8 4a 6e ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0014a2a:	83 c4 10             	add    esp,0x10
c0014a2d:	85 c0                	test   eax,eax
c0014a2f:	0f 85 74 05 00 00    	jne    c0014fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a35:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014a3c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014a3f:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014a43:	31 d2                	xor    edx,edx
c0014a45:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a49:	83 ec 0c             	sub    esp,0xc
c0014a4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a50:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a57:	50                   	push   eax
c0014a58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a60:	52                   	push   edx
c0014a61:	50                   	push   eax
c0014a62:	55                   	push   ebp
c0014a63:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a66:	83 c4 1c             	add    esp,0x1c
c0014a69:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014a6c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014a6f:	50                   	push   eax
c0014a70:	6a 00                	push   0x0
c0014a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a76:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014a7a:	50                   	push   eax
c0014a7b:	e8 70 ba fe ff       	call   c00004f0 <memset>
c0014a80:	83 c4 10             	add    esp,0x10
c0014a83:	46                   	inc    esi
c0014a84:	e9 6c ff ff ff       	jmp    c00149f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014a89:	53                   	push   ebx
c0014a8a:	31 db                	xor    ebx,ebx
c0014a8c:	68 00 01 00 00       	push   0x100
c0014a91:	6a 00                	push   0x0
c0014a93:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014a97:	50                   	push   eax
c0014a98:	e8 53 ba fe ff       	call   c00004f0 <memset>
c0014a9d:	83 c4 0c             	add    esp,0xc
c0014aa0:	68 00 01 00 00       	push   0x100
c0014aa5:	6a 00                	push   0x0
c0014aa7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014aae:	50                   	push   eax
c0014aaf:	e8 3c ba fe ff       	call   c00004f0 <memset>
c0014ab4:	83 c4 10             	add    esp,0x10
c0014ab7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014abf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014ac7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014acf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014ad7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014adf:	0f b7 f3             	movzx  esi,bx
c0014ae2:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014ae6:	0f 83 2d 01 00 00    	jae    c0014c19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014aec:	6b f6 28             	imul   esi,esi,0x28
c0014aef:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014af3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014afa:	52                   	push   edx
c0014afb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014aff:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014b03:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b05:	6b d2 28             	imul   edx,edx,0x28
c0014b08:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014b0c:	31 d2                	xor    edx,edx
c0014b0e:	52                   	push   edx
c0014b0f:	50                   	push   eax
c0014b10:	55                   	push   ebp
c0014b11:	e8 5e 6d ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0014b16:	83 c4 0c             	add    esp,0xc
c0014b19:	6a 20                	push   0x20
c0014b1b:	6a 00                	push   0x0
c0014b1d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b24:	51                   	push   ecx
c0014b25:	e8 c6 b9 fe ff       	call   c00004f0 <memset>
c0014b2a:	59                   	pop    ecx
c0014b2b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b2e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014b32:	52                   	push   edx
c0014b33:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014b3a:	51                   	push   ecx
c0014b3b:	6a 00                	push   0x0
c0014b3d:	6a 1f                	push   0x1f
c0014b3f:	55                   	push   ebp
c0014b40:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b43:	83 c4 1c             	add    esp,0x1c
c0014b46:	6a 09                	push   0x9
c0014b48:	68 b0 20 02 c0       	push   0xc00220b0
c0014b4d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b54:	51                   	push   ecx
c0014b55:	e8 26 b8 fe ff       	call   c0000380 <memcmp>
c0014b5a:	83 c4 10             	add    esp,0x10
c0014b5d:	85 c0                	test   eax,eax
c0014b5f:	75 21                	jne    c0014b82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014b61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014b69:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014b6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014b71:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014b74:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014b7b:	89 d0                	mov    eax,edx
c0014b7d:	40                   	inc    eax
c0014b7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b82:	50                   	push   eax
c0014b83:	6a 09                	push   0x9
c0014b85:	68 ba 20 02 c0       	push   0xc00220ba
c0014b8a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b91:	50                   	push   eax
c0014b92:	e8 e9 b7 fe ff       	call   c0000380 <memcmp>
c0014b97:	83 c4 10             	add    esp,0x10
c0014b9a:	85 c0                	test   eax,eax
c0014b9c:	75 21                	jne    c0014bbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014b9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ba2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014ba6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014baa:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014bae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014bb1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014bb8:	89 d0                	mov    eax,edx
c0014bba:	40                   	inc    eax
c0014bbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bbf:	50                   	push   eax
c0014bc0:	50                   	push   eax
c0014bc1:	68 86 20 02 c0       	push   0xc0022086
c0014bc6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bcd:	50                   	push   eax
c0014bce:	e8 7d bb fe ff       	call   c0000750 <strcmp>
c0014bd3:	83 c4 10             	add    esp,0x10
c0014bd6:	85 c0                	test   eax,eax
c0014bd8:	75 0f                	jne    c0014be9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014bda:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014bdd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014be1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014be5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014be9:	50                   	push   eax
c0014bea:	50                   	push   eax
c0014beb:	68 8e 20 02 c0       	push   0xc002208e
c0014bf0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bf7:	50                   	push   eax
c0014bf8:	e8 53 bb fe ff       	call   c0000750 <strcmp>
c0014bfd:	83 c4 10             	add    esp,0x10
c0014c00:	85 c0                	test   eax,eax
c0014c02:	75 0f                	jne    c0014c13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014c04:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c0f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014c13:	43                   	inc    ebx
c0014c14:	e9 c6 fe ff ff       	jmp    c0014adf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014c19:	31 d2                	xor    edx,edx
c0014c1b:	50                   	push   eax
c0014c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c20:	52                   	push   edx
c0014c21:	50                   	push   eax
c0014c22:	55                   	push   ebp
c0014c23:	e8 4c 6c ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0014c28:	58                   	pop    eax
c0014c29:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c2d:	e8 84 2e ff ff       	call   c0007ab6 <malloc>
c0014c32:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c35:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014c39:	31 d2                	xor    edx,edx
c0014c3b:	58                   	pop    eax
c0014c3c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014c40:	53                   	push   ebx
c0014c41:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014c45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014c49:	52                   	push   edx
c0014c4a:	50                   	push   eax
c0014c4b:	55                   	push   ebp
c0014c4c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c4f:	83 c4 14             	add    esp,0x14
c0014c52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c56:	e8 5b 2e ff ff       	call   c0007ab6 <malloc>
c0014c5b:	31 d2                	xor    edx,edx
c0014c5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014c61:	83 c4 0c             	add    esp,0xc
c0014c64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014c68:	52                   	push   edx
c0014c69:	50                   	push   eax
c0014c6a:	55                   	push   ebp
c0014c6b:	e8 04 6c ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0014c70:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c73:	31 d2                	xor    edx,edx
c0014c75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014c80:	52                   	push   edx
c0014c81:	50                   	push   eax
c0014c82:	55                   	push   ebp
c0014c83:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c86:	83 c4 20             	add    esp,0x20
c0014c89:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014c8e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014c9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c9e:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014ca2:	0f 84 05 03 00 00    	je     c0014fad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014ca8:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014caf:	31 d2                	xor    edx,edx
c0014cb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014cb5:	c1 e8 03             	shr    eax,0x3
c0014cb8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014cbc:	51                   	push   ecx
c0014cbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cc1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014cc5:	52                   	push   edx
c0014cc6:	50                   	push   eax
c0014cc7:	55                   	push   ebp
c0014cc8:	e8 a7 6b ff ff       	call   c000b874 <File::seek(unsigned long long)>
c0014ccd:	5b                   	pop    ebx
c0014cce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cd2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014cd9:	e8 d8 2d ff ff       	call   c0007ab6 <malloc>
c0014cde:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ce1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ce5:	31 d2                	xor    edx,edx
c0014ce7:	5e                   	pop    esi
c0014ce8:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014cec:	50                   	push   eax
c0014ced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cf1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014cf5:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014cfc:	52                   	push   edx
c0014cfd:	50                   	push   eax
c0014cfe:	55                   	push   ebp
c0014cff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d02:	83 c4 20             	add    esp,0x20
c0014d05:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014d0d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014d11:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014d15:	0f 8d 76 02 00 00    	jge    c0014f91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014d1b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014d1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d23:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014d28:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014d2b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d33:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014d37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d3b:	c1 e8 08             	shr    eax,0x8
c0014d3e:	89 c6                	mov    esi,eax
c0014d40:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014d44:	c1 e6 04             	shl    esi,0x4
c0014d47:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014d4b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014d4e:	85 db                	test   ebx,ebx
c0014d50:	0f 85 b3 00 00 00    	jne    c0014e09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014d56:	83 ec 0c             	sub    esp,0xc
c0014d59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d5d:	03 06                	add    eax,DWORD PTR [esi]
c0014d5f:	50                   	push   eax
c0014d60:	e8 40 f8 ff ff       	call   c00145a5 <Thr::getAddressOfKernelSymbol(char const*)>
c0014d65:	83 c4 10             	add    esp,0x10
c0014d68:	89 c3                	mov    ebx,eax
c0014d6a:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014d6f:	85 c0                	test   eax,eax
c0014d71:	0f 85 92 00 00 00    	jne    c0014e09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014d77:	83 ec 0c             	sub    esp,0xc
c0014d7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d7e:	03 06                	add    eax,DWORD PTR [esi]
c0014d80:	50                   	push   eax
c0014d81:	e8 72 c6 ff ff       	call   c00113f8 <KeResolveCompatibilitySymbol(char*)>
c0014d86:	83 c4 10             	add    esp,0x10
c0014d89:	89 c3                	mov    ebx,eax
c0014d8b:	85 c0                	test   eax,eax
c0014d8d:	75 7a                	jne    c0014e09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014d8f:	51                   	push   ecx
c0014d90:	51                   	push   ecx
c0014d91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d95:	03 06                	add    eax,DWORD PTR [esi]
c0014d97:	50                   	push   eax
c0014d98:	68 c4 20 02 c0       	push   0xc00220c4
c0014d9d:	e8 a3 5b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014da2:	58                   	pop    eax
c0014da3:	5a                   	pop    edx
c0014da4:	68 de 20 02 c0       	push   0xc00220de
c0014da9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014db0:	50                   	push   eax
c0014db1:	e8 8a b8 fe ff       	call   c0000640 <strcpy>
c0014db6:	59                   	pop    ecx
c0014db7:	58                   	pop    eax
c0014db8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014dbc:	03 06                	add    eax,DWORD PTR [esi]
c0014dbe:	50                   	push   eax
c0014dbf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014dc6:	50                   	push   eax
c0014dc7:	e8 74 ba fe ff       	call   c0000840 <strcat>
c0014dcc:	58                   	pop    eax
c0014dcd:	5a                   	pop    edx
c0014dce:	68 74 21 02 c0       	push   0xc0022174
c0014dd3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014dda:	50                   	push   eax
c0014ddb:	e8 60 ba fe ff       	call   c0000840 <strcat>
c0014de0:	83 c4 10             	add    esp,0x10
c0014de3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014de8:	0f 84 5d 01 00 00    	je     c0014f4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014dee:	83 ec 0c             	sub    esp,0xc
c0014df1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014df8:	50                   	push   eax
c0014df9:	e8 0f c4 ff ff       	call   c001120d <KePanic(char const*)>
c0014dfe:	83 c4 10             	add    esp,0x10
c0014e01:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014e05:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014e09:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014e0e:	83 f8 01             	cmp    eax,0x1
c0014e11:	0f 85 8f 00 00 00    	jne    c0014ea6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014e17:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014e1e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014e22:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014e26:	01 ce                	add    esi,ecx
c0014e28:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014e30:	0f 94 c0             	sete   al
c0014e33:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014e3b:	0f 94 c2             	sete   dl
c0014e3e:	09 c2                	or     edx,eax
c0014e40:	8b 06                	mov    eax,DWORD PTR [esi]
c0014e42:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014e47:	0f b6 d2             	movzx  edx,dl
c0014e4a:	74 41                	je     c0014e8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014e4c:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014e4f:	85 d2                	test   edx,edx
c0014e51:	75 15                	jne    c0014e68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014e53:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014e57:	66 83 f8 0c          	cmp    ax,0xc
c0014e5b:	76 05                	jbe    c0014e62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014e5d:	b8 0c 00 00 00       	mov    eax,0xc
c0014e62:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014e66:	76 37                	jbe    c0014e9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014e68:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014e6c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014e71:	0f 84 d4 00 00 00    	je     c0014f4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014e77:	83 ec 0c             	sub    esp,0xc
c0014e7a:	68 f5 20 02 c0       	push   0xc00220f5
c0014e7f:	e8 89 c3 ff ff       	call   c001120d <KePanic(char const*)>
c0014e84:	83 c4 10             	add    esp,0x10
c0014e87:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014e8b:	eb 12                	jmp    c0014e9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014e8d:	01 c1                	add    ecx,eax
c0014e8f:	85 d2                	test   edx,edx
c0014e91:	75 0c                	jne    c0014e9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014e93:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014e97:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014e9b:	77 02                	ja     c0014e9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014e9d:	01 d9                	add    ecx,ebx
c0014e9f:	89 0e                	mov    DWORD PTR [esi],ecx
c0014ea1:	e9 e2 00 00 00       	jmp    c0014f88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014ea6:	83 f8 02             	cmp    eax,0x2
c0014ea9:	75 77                	jne    c0014f22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014eab:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014eb2:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014eb6:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014eba:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014ec2:	74 21                	je     c0014ee5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014ec4:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014ecc:	74 17                	je     c0014ee5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014ece:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014ed2:	b8 0a 00 00 00       	mov    eax,0xa
c0014ed7:	83 fa 0e             	cmp    edx,0xe
c0014eda:	77 03                	ja     c0014edf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014edc:	8d 42 fc             	lea    eax,[edx-0x4]
c0014edf:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014ee3:	76 17                	jbe    c0014efc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014ee5:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014eea:	74 5f                	je     c0014f4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014eec:	83 ec 0c             	sub    esp,0xc
c0014eef:	68 11 21 02 c0       	push   0xc0022111
c0014ef4:	e8 14 c3 ff ff       	call   c001120d <KePanic(char const*)>
c0014ef9:	83 c4 10             	add    esp,0x10
c0014efc:	8b 06                	mov    eax,DWORD PTR [esi]
c0014efe:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014f03:	74 13                	je     c0014f18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014f05:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014f09:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014f10:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014f14:	01 d0                	add    eax,edx
c0014f16:	eb 04                	jmp    c0014f1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014f18:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014f1c:	01 c3                	add    ebx,eax
c0014f1e:	89 1e                	mov    DWORD PTR [esi],ebx
c0014f20:	eb 66                	jmp    c0014f88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f22:	52                   	push   edx
c0014f23:	52                   	push   edx
c0014f24:	50                   	push   eax
c0014f25:	68 2d 21 02 c0       	push   0xc002212d
c0014f2a:	e8 16 5a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014f2f:	83 c4 10             	add    esp,0x10
c0014f32:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f37:	74 12                	je     c0014f4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014f39:	83 ec 0c             	sub    esp,0xc
c0014f3c:	68 38 21 02 c0       	push   0xc0022138
c0014f41:	e8 c7 c2 ff ff       	call   c001120d <KePanic(char const*)>
c0014f46:	83 c4 10             	add    esp,0x10
c0014f49:	eb 3d                	jmp    c0014f88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f4b:	83 ec 0c             	sub    esp,0xc
c0014f4e:	55                   	push   ebp
c0014f4f:	e8 c0 68 ff ff       	call   c000b814 <File::close()>
c0014f54:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014f57:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f5d:	59                   	pop    ecx
c0014f5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f62:	e8 5f 2b ff ff       	call   c0007ac6 <free>
c0014f67:	5b                   	pop    ebx
c0014f68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f6c:	e8 55 2b ff ff       	call   c0007ac6 <free>
c0014f71:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f74:	e8 4d 2b ff ff       	call   c0007ac6 <free>
c0014f79:	5e                   	pop    esi
c0014f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f7e:	e8 43 2b ff ff       	call   c0007ac6 <free>
c0014f83:	83 c4 10             	add    esp,0x10
c0014f86:	eb 21                	jmp    c0014fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f88:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014f8c:	e9 7c fd ff ff       	jmp    c0014d0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014f91:	83 ec 0c             	sub    esp,0xc
c0014f94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f98:	e8 29 2b ff ff       	call   c0007ac6 <free>
c0014f9d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014fa1:	83 c4 10             	add    esp,0x10
c0014fa4:	e9 f1 fc ff ff       	jmp    c0014c9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0014fa9:	31 c0                	xor    eax,eax
c0014fab:	eb 33                	jmp    c0014fe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0014fad:	83 ec 0c             	sub    esp,0xc
c0014fb0:	55                   	push   ebp
c0014fb1:	e8 5e 68 ff ff       	call   c000b814 <File::close()>
c0014fb6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014fb9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014fbc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014fbf:	58                   	pop    eax
c0014fc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fc4:	e8 fd 2a ff ff       	call   c0007ac6 <free>
c0014fc9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014fcc:	e8 f5 2a ff ff       	call   c0007ac6 <free>
c0014fd1:	5a                   	pop    edx
c0014fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fd6:	e8 eb 2a ff ff       	call   c0007ac6 <free>
c0014fdb:	83 c4 10             	add    esp,0x10
c0014fde:	b0 01                	mov    al,0x1
c0014fe0:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014fe6:	5b                   	pop    ebx
c0014fe7:	5e                   	pop    esi
c0014fe8:	5f                   	pop    edi
c0014fe9:	5d                   	pop    ebp
c0014fea:	c3                   	ret    

c0014feb <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014feb:	56                   	push   esi
c0014fec:	31 d2                	xor    edx,edx
c0014fee:	53                   	push   ebx
c0014fef:	8b 1d a0 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ca0
c0014ff5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014ff9:	39 d3                	cmp    ebx,edx
c0014ffb:	7e 1b                	jle    c0015018 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014ffd:	8b 04 95 c0 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6140]
c0015004:	39 c8                	cmp    eax,ecx
c0015006:	77 0d                	ja     c0015015 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015008:	8b 34 95 c0 9c 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6340]
c001500f:	01 c6                	add    esi,eax
c0015011:	39 ce                	cmp    esi,ecx
c0015013:	77 05                	ja     c001501a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015015:	42                   	inc    edx
c0015016:	eb e1                	jmp    c0014ff9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015018:	31 c0                	xor    eax,eax
c001501a:	5b                   	pop    ebx
c001501b:	5e                   	pop    esi
c001501c:	c3                   	ret    

c001501d <Thr::getDriverNameFromAddress(unsigned long)>:
c001501d:	53                   	push   ebx
c001501e:	31 c0                	xor    eax,eax
c0015020:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015024:	8b 1d a0 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ca0
c001502a:	39 c3                	cmp    ebx,eax
c001502c:	7e 22                	jle    c0015050 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001502e:	8b 14 85 c0 9e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6140]
c0015035:	39 ca                	cmp    edx,ecx
c0015037:	77 14                	ja     c001504d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015039:	03 14 85 c0 9c 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6340]
c0015040:	39 ca                	cmp    edx,ecx
c0015042:	76 09                	jbe    c001504d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015044:	8b 04 85 c0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f40]
c001504b:	eb 05                	jmp    c0015052 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001504d:	40                   	inc    eax
c001504e:	eb da                	jmp    c001502a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015050:	31 c0                	xor    eax,eax
c0015052:	5b                   	pop    ebx
c0015053:	c3                   	ret    

c0015054 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015054:	53                   	push   ebx
c0015055:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015059:	53                   	push   ebx
c001505a:	e8 8c ff ff ff       	call   c0014feb <Thr::getDriverBaseFromAddress(unsigned long)>
c001505f:	5a                   	pop    edx
c0015060:	31 d2                	xor    edx,edx
c0015062:	85 c0                	test   eax,eax
c0015064:	74 04                	je     c001506a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015066:	89 da                	mov    edx,ebx
c0015068:	29 c2                	sub    edx,eax
c001506a:	89 d0                	mov    eax,edx
c001506c:	5b                   	pop    ebx
c001506d:	c3                   	ret    

c001506e <Thr::loadDLL(char const*, bool)>:
c001506e:	55                   	push   ebp
c001506f:	57                   	push   edi
c0015070:	56                   	push   esi
c0015071:	53                   	push   ebx
c0015072:	81 ec 34 01 00 00    	sub    esp,0x134
c0015078:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001507f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015086:	56                   	push   esi
c0015087:	68 50 21 02 c0       	push   0xc0022150
c001508c:	e8 b4 58 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015091:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015098:	e8 19 2a ff ff       	call   c0007ab6 <malloc>
c001509d:	83 c4 0c             	add    esp,0xc
c00150a0:	89 c3                	mov    ebx,eax
c00150a2:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c00150a8:	56                   	push   esi
c00150a9:	50                   	push   eax
c00150aa:	e8 4b 66 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c00150af:	83 c4 10             	add    esp,0x10
c00150b2:	85 db                	test   ebx,ebx
c00150b4:	75 3c                	jne    c00150f2 <Thr::loadDLL(char const*, bool)+0x84>
c00150b6:	89 f8                	mov    eax,edi
c00150b8:	84 c0                	test   al,al
c00150ba:	0f 84 d2 01 00 00    	je     c0015292 <Thr::loadDLL(char const*, bool)+0x224>
c00150c0:	55                   	push   ebp
c00150c1:	55                   	push   ebp
c00150c2:	68 61 21 02 c0       	push   0xc0022161
c00150c7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00150cb:	55                   	push   ebp
c00150cc:	e8 6f b5 fe ff       	call   c0000640 <strcpy>
c00150d1:	58                   	pop    eax
c00150d2:	5a                   	pop    edx
c00150d3:	56                   	push   esi
c00150d4:	55                   	push   ebp
c00150d5:	e8 66 b7 fe ff       	call   c0000840 <strcat>
c00150da:	59                   	pop    ecx
c00150db:	58                   	pop    eax
c00150dc:	68 74 21 02 c0       	push   0xc0022174
c00150e1:	55                   	push   ebp
c00150e2:	e8 59 b7 fe ff       	call   c0000840 <strcat>
c00150e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00150ea:	e8 1e c1 ff ff       	call   c001120d <KePanic(char const*)>
c00150ef:	83 c4 10             	add    esp,0x10
c00150f2:	51                   	push   ecx
c00150f3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00150f7:	50                   	push   eax
c00150f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00150fc:	50                   	push   eax
c00150fd:	53                   	push   ebx
c00150fe:	e8 b5 69 ff ff       	call   c000bab8 <File::stat(unsigned long long*, bool*)>
c0015103:	83 c4 10             	add    esp,0x10
c0015106:	85 db                	test   ebx,ebx
c0015108:	74 0c                	je     c0015116 <Thr::loadDLL(char const*, bool)+0xa8>
c001510a:	83 ec 0c             	sub    esp,0xc
c001510d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001510f:	53                   	push   ebx
c0015110:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015113:	83 c4 10             	add    esp,0x10
c0015116:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001511b:	75 0a                	jne    c0015127 <Thr::loadDLL(char const*, bool)+0xb9>
c001511d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015121:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015125:	75 3c                	jne    c0015163 <Thr::loadDLL(char const*, bool)+0xf5>
c0015127:	89 f8                	mov    eax,edi
c0015129:	84 c0                	test   al,al
c001512b:	0f 84 49 01 00 00    	je     c001527a <Thr::loadDLL(char const*, bool)+0x20c>
c0015131:	51                   	push   ecx
c0015132:	51                   	push   ecx
c0015133:	68 61 21 02 c0       	push   0xc0022161
c0015138:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001513c:	53                   	push   ebx
c001513d:	e8 fe b4 fe ff       	call   c0000640 <strcpy>
c0015142:	5d                   	pop    ebp
c0015143:	58                   	pop    eax
c0015144:	56                   	push   esi
c0015145:	53                   	push   ebx
c0015146:	e8 f5 b6 fe ff       	call   c0000840 <strcat>
c001514b:	58                   	pop    eax
c001514c:	5a                   	pop    edx
c001514d:	68 74 21 02 c0       	push   0xc0022174
c0015152:	53                   	push   ebx
c0015153:	e8 e8 b6 fe ff       	call   c0000840 <strcat>
c0015158:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001515b:	e8 ad c0 ff ff       	call   c001120d <KePanic(char const*)>
c0015160:	83 c4 10             	add    esp,0x10
c0015163:	52                   	push   edx
c0015164:	6a 03                	push   0x3
c0015166:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001516a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001516e:	05 ff 0f 00 00       	add    eax,0xfff
c0015173:	83 d2 00             	adc    edx,0x0
c0015176:	0f ac d0 0c          	shrd   eax,edx,0xc
c001517a:	50                   	push   eax
c001517b:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015181:	e8 9e 4c ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0015186:	59                   	pop    ecx
c0015187:	89 c3                	mov    ebx,eax
c0015189:	5d                   	pop    ebp
c001518a:	50                   	push   eax
c001518b:	68 d2 07 02 c0       	push   0xc00207d2
c0015190:	e8 b0 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015195:	89 34 24             	mov    DWORD PTR [esp],esi
c0015198:	e8 d3 b3 fe ff       	call   c0000570 <strlen>
c001519d:	8b 2d a0 9c 02 c0    	mov    ebp,DWORD PTR ds:0xc0029ca0
c00151a3:	40                   	inc    eax
c00151a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00151a7:	e8 0a 29 ff ff       	call   c0007ab6 <malloc>
c00151ac:	89 04 ad c0 a0 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd5f40],eax
c00151b3:	58                   	pop    eax
c00151b4:	a1 a0 9c 02 c0       	mov    eax,ds:0xc0029ca0
c00151b9:	5a                   	pop    edx
c00151ba:	56                   	push   esi
c00151bb:	ff 34 85 c0 a0 02 c0 	push   DWORD PTR [eax*4-0x3ffd5f40]
c00151c2:	e8 79 b4 fe ff       	call   c0000640 <strcpy>
c00151c7:	a1 a0 9c 02 c0       	mov    eax,ds:0xc0029ca0
c00151cc:	8d 50 01             	lea    edx,[eax+0x1]
c00151cf:	89 1c 85 c0 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6140],ebx
c00151d6:	89 15 a0 9c 02 c0    	mov    DWORD PTR ds:0xc0029ca0,edx
c00151dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00151e0:	83 c4 0c             	add    esp,0xc
c00151e3:	89 14 85 c0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6340],edx
c00151ea:	6a 01                	push   0x1
c00151ec:	53                   	push   ebx
c00151ed:	56                   	push   esi
c00151ee:	e8 bf f6 ff ff       	call   c00148b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00151f3:	83 c4 10             	add    esp,0x10
c00151f6:	0f b6 c0             	movzx  eax,al
c00151f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151fd:	85 c0                	test   eax,eax
c00151ff:	0f 85 89 00 00 00    	jne    c001528e <Thr::loadDLL(char const*, bool)+0x220>
c0015205:	89 f8                	mov    eax,edi
c0015207:	84 c0                	test   al,al
c0015209:	74 73                	je     c001527e <Thr::loadDLL(char const*, bool)+0x210>
c001520b:	83 ec 0c             	sub    esp,0xc
c001520e:	68 76 21 02 c0       	push   0xc0022176
c0015213:	e8 f5 bf ff ff       	call   c001120d <KePanic(char const*)>
c0015218:	83 c4 10             	add    esp,0x10
c001521b:	eb 61                	jmp    c001527e <Thr::loadDLL(char const*, bool)+0x210>
c001521d:	50                   	push   eax
c001521e:	50                   	push   eax
c001521f:	89 e8                	mov    eax,ebp
c0015221:	c1 e0 0c             	shl    eax,0xc
c0015224:	01 d8                	add    eax,ebx
c0015226:	50                   	push   eax
c0015227:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001522d:	e8 da 46 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0015232:	83 c4 10             	add    esp,0x10
c0015235:	8b 00                	mov    eax,DWORD PTR [eax]
c0015237:	a8 60                	test   al,0x60
c0015239:	75 11                	jne    c001524c <Thr::loadDLL(char const*, bool)+0x1de>
c001523b:	83 ec 0c             	sub    esp,0xc
c001523e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015243:	50                   	push   eax
c0015244:	e8 0d 2b ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0015249:	83 c4 10             	add    esp,0x10
c001524c:	45                   	inc    ebp
c001524d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015251:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015255:	05 ff 0f 00 00       	add    eax,0xfff
c001525a:	bf 00 00 00 00       	mov    edi,0x0
c001525f:	83 d2 00             	adc    edx,0x0
c0015262:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015266:	c1 ea 0c             	shr    edx,0xc
c0015269:	39 c5                	cmp    ebp,eax
c001526b:	89 d1                	mov    ecx,edx
c001526d:	89 f8                	mov    eax,edi
c001526f:	19 c8                	sbb    eax,ecx
c0015271:	72 aa                	jb     c001521d <Thr::loadDLL(char const*, bool)+0x1af>
c0015273:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015278:	75 18                	jne    c0015292 <Thr::loadDLL(char const*, bool)+0x224>
c001527a:	31 db                	xor    ebx,ebx
c001527c:	eb 14                	jmp    c0015292 <Thr::loadDLL(char const*, bool)+0x224>
c001527e:	83 ec 0c             	sub    esp,0xc
c0015281:	68 95 21 02 c0       	push   0xc0022195
c0015286:	e8 82 bf ff ff       	call   c001120d <KePanic(char const*)>
c001528b:	83 c4 10             	add    esp,0x10
c001528e:	31 ed                	xor    ebp,ebp
c0015290:	eb bb                	jmp    c001524d <Thr::loadDLL(char const*, bool)+0x1df>
c0015292:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015298:	89 d8                	mov    eax,ebx
c001529a:	5b                   	pop    ebx
c001529b:	5e                   	pop    esi
c001529c:	5f                   	pop    edi
c001529d:	5d                   	pop    ebp
c001529e:	c3                   	ret    

c001529f <Thr::executeDLL(unsigned long, void*)>:
c001529f:	56                   	push   esi
c00152a0:	53                   	push   ebx
c00152a1:	52                   	push   edx
c00152a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00152a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00152aa:	85 db                	test   ebx,ebx
c00152ac:	75 10                	jne    c00152be <Thr::executeDLL(unsigned long, void*)+0x1f>
c00152ae:	83 ec 0c             	sub    esp,0xc
c00152b1:	68 b1 21 02 c0       	push   0xc00221b1
c00152b6:	e8 52 bf ff ff       	call   c001120d <KePanic(char const*)>
c00152bb:	83 c4 10             	add    esp,0x10
c00152be:	50                   	push   eax
c00152bf:	50                   	push   eax
c00152c0:	53                   	push   ebx
c00152c1:	68 db 21 02 c0       	push   0xc00221db
c00152c6:	e8 7a 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00152cb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00152cf:	89 d8                	mov    eax,ebx
c00152d1:	83 c4 14             	add    esp,0x14
c00152d4:	5b                   	pop    ebx
c00152d5:	5e                   	pop    esi
c00152d6:	ff e0                	jmp    eax

c00152d8 <userModeEntryPoint(void*)>:
c00152d8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00152dd:	83 e8 01             	sub    eax,0x1
c00152e0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00152e5:	75 01                	jne    c00152e8 <userModeEntryPoint(void*)+0x10>
c00152e7:	fb                   	sti    
c00152e8:	fb                   	sti    
c00152e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152f1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00152f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152fb:	e9 3f af fe ff       	jmp    c000023f <goToUsermode>

c0015300 <changeTSS>:
c0015300:	83 ec 14             	sub    esp,0x14
c0015303:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015308:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001530b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015310:	c1 e2 15             	shl    edx,0x15
c0015313:	29 d0                	sub    eax,edx
c0015315:	50                   	push   eax
c0015316:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001531b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015321:	05 7c 11 00 00       	add    eax,0x117c
c0015326:	50                   	push   eax
c0015327:	e8 28 3c ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c001532c:	83 c4 1c             	add    esp,0x1c
c001532f:	c3                   	ret    

c0015330 <switchToThread(ThreadControlBlock*)>:
c0015330:	57                   	push   edi
c0015331:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0015337:	56                   	push   esi
c0015338:	85 c9                	test   ecx,ecx
c001533a:	53                   	push   ebx
c001533b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001533f:	0f 85 8b 00 00 00    	jne    c00153d0 <switchToThread(ThreadControlBlock*)+0xa0>
c0015345:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015349:	81 fa ff 00 00 00    	cmp    edx,0xff
c001534f:	74 7b                	je     c00153cc <switchToThread(ThreadControlBlock*)+0x9c>
c0015351:	b8 00 04 00 00       	mov    eax,0x400
c0015356:	29 d0                	sub    eax,edx
c0015358:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001535b:	d1 f8                	sar    eax,1
c001535d:	01 d0                	add    eax,edx
c001535f:	90                   	nop
c0015360:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015363:	e8 1e 28 00 00       	call   c0017b86 <HalQueryPerformanceCounter()>
c0015368:	a3 a8 a4 02 c0       	mov    ds:0xc002a4a8,eax
c001536d:	89 15 ac a4 02 c0    	mov    DWORD PTR ds:0xc002a4ac,edx
c0015373:	89 c6                	mov    esi,eax
c0015375:	89 d7                	mov    edi,edx
c0015377:	2b 35 98 a4 02 c0    	sub    esi,DWORD PTR ds:0xc002a498
c001537d:	a3 98 a4 02 c0       	mov    ds:0xc002a498,eax
c0015382:	1b 3d 9c a4 02 c0    	sbb    edi,DWORD PTR ds:0xc002a49c
c0015388:	89 35 a0 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a0,esi
c001538e:	89 3d a4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a4,edi
c0015394:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001539a:	89 15 9c a4 02 c0    	mov    DWORD PTR ds:0xc002a49c,edx
c00153a0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00153a3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00153a6:	01 c6                	add    esi,eax
c00153a8:	11 d7                	adc    edi,edx
c00153aa:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00153ad:	83 ec 0c             	sub    esp,0xc
c00153b0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00153b3:	53                   	push   ebx
c00153b4:	e8 be ae fe ff       	call   c0000277 <switchToThreadASM>
c00153b9:	0f 20 c0             	mov    eax,cr0
c00153bc:	83 c8 08             	or     eax,0x8
c00153bf:	0f 22 c0             	mov    cr0,eax
c00153c2:	83 c4 10             	add    esp,0x10
c00153c5:	5b                   	pop    ebx
c00153c6:	5e                   	pop    esi
c00153c7:	5f                   	pop    edi
c00153c8:	c3                   	ret    
c00153c9:	8d 76 00             	lea    esi,[esi+0x0]
c00153cc:	31 c0                	xor    eax,eax
c00153ce:	eb 90                	jmp    c0015360 <switchToThread(ThreadControlBlock*)+0x30>
c00153d0:	5b                   	pop    ebx
c00153d1:	c7 05 60 a4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x1
c00153db:	5e                   	pop    esi
c00153dc:	5f                   	pop    edi
c00153dd:	c3                   	ret    
c00153de:	66 90                	xchg   ax,ax

c00153e0 <Process::addArgs(char**)>:
c00153e0:	57                   	push   edi
c00153e1:	56                   	push   esi
c00153e2:	53                   	push   ebx
c00153e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00153e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00153eb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00153f5:	85 ff                	test   edi,edi
c00153f7:	74 4f                	je     c0015448 <Process::addArgs(char**)+0x68>
c00153f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00153fb:	85 c0                	test   eax,eax
c00153fd:	74 49                	je     c0015448 <Process::addArgs(char**)+0x68>
c00153ff:	31 db                	xor    ebx,ebx
c0015401:	8d 76 00             	lea    esi,[esi+0x0]
c0015404:	83 ec 0c             	sub    esp,0xc
c0015407:	50                   	push   eax
c0015408:	e8 63 b1 fe ff       	call   c0000570 <strlen>
c001540d:	83 c0 01             	add    eax,0x1
c0015410:	89 04 24             	mov    DWORD PTR [esp],eax
c0015413:	e8 9e 26 ff ff       	call   c0007ab6 <malloc>
c0015418:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001541f:	5a                   	pop    edx
c0015420:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015423:	59                   	pop    ecx
c0015424:	83 c3 01             	add    ebx,0x1
c0015427:	52                   	push   edx
c0015428:	50                   	push   eax
c0015429:	e8 12 b2 fe ff       	call   c0000640 <strcpy>
c001542e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015434:	83 c4 10             	add    esp,0x10
c0015437:	83 c1 01             	add    ecx,0x1
c001543a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015440:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015443:	85 c0                	test   eax,eax
c0015445:	75 bd                	jne    c0015404 <Process::addArgs(char**)+0x24>
c0015447:	90                   	nop
c0015448:	5b                   	pop    ebx
c0015449:	5e                   	pop    esi
c001544a:	5f                   	pop    edi
c001544b:	c3                   	ret    

c001544c <Process::Process(char const*, Process*, char**)>:
c001544c:	56                   	push   esi
c001544d:	53                   	push   ebx
c001544e:	83 ec 14             	sub    esp,0x14
c0015451:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015455:	05 0c 02 00 00       	add    eax,0x20c
c001545a:	bb 07 00 00 00       	mov    ebx,0x7
c001545f:	89 c6                	mov    esi,eax
c0015461:	8d 76 00             	lea    esi,[esi+0x0]
c0015464:	85 db                	test   ebx,ebx
c0015466:	78 14                	js     c001547c <Process::Process(char const*, Process*, char**)+0x30>
c0015468:	83 ec 0c             	sub    esp,0xc
c001546b:	56                   	push   esi
c001546c:	e8 e7 a5 00 00       	call   c001fa58 <ThreadControlBlock::ThreadControlBlock()>
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	83 c6 5f             	add    esi,0x5f
c0015477:	83 eb 01             	sub    ebx,0x1
c001547a:	eb e8                	jmp    c0015464 <Process::Process(char const*, Process*, char**)+0x18>
c001547c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015480:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001548b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015492:	83 ec 0c             	sub    esp,0xc
c0015495:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015499:	e8 64 bb ff ff       	call   c0011002 <KeNewProcessEnv(Process*)>
c001549e:	83 c4 10             	add    esp,0x10
c00154a1:	89 c2                	mov    edx,eax
c00154a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154a7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00154ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154b1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00154ba:	a1 00 34 02 c0       	mov    eax,ds:0xc0023400
c00154bf:	8d 50 01             	lea    edx,[eax+0x1]
c00154c2:	89 15 00 34 02 c0    	mov    DWORD PTR ds:0xc0023400,edx
c00154c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154cc:	89 02                	mov    DWORD PTR [edx],eax
c00154ce:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00154d6:	83 ec 0c             	sub    esp,0xc
c00154d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154dd:	e8 d4 25 ff ff       	call   c0007ab6 <malloc>
c00154e2:	83 c4 10             	add    esp,0x10
c00154e5:	89 c3                	mov    ebx,eax
c00154e7:	83 ec 08             	sub    esp,0x8
c00154ea:	6a 00                	push   0x0
c00154ec:	53                   	push   ebx
c00154ed:	e8 76 4b ff ff       	call   c000a068 <VAS::VAS(bool)>
c00154f2:	83 c4 10             	add    esp,0x10
c00154f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154f9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00154ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015503:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001550d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015511:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015515:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001551b:	e8 06 c1 ff ff       	call   c0011626 <KeInitSignals()>
c0015520:	89 c2                	mov    edx,eax
c0015522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015526:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001552c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015530:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015536:	85 c0                	test   eax,eax
c0015538:	74 42                	je     c001557c <Process::Process(char const*, Process*, char**)+0x130>
c001553a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001553e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015544:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001554a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001554e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015558:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001555e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015568:	05 0c 01 00 00       	add    eax,0x10c
c001556d:	83 ec 08             	sub    esp,0x8
c0015570:	52                   	push   edx
c0015571:	50                   	push   eax
c0015572:	e8 c9 b0 fe ff       	call   c0000640 <strcpy>
c0015577:	83 c4 10             	add    esp,0x10
c001557a:	eb 64                	jmp    c00155e0 <Process::Process(char const*, Process*, char**)+0x194>
c001557c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015584:	83 ec 0c             	sub    esp,0xc
c0015587:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001558b:	e8 26 25 ff ff       	call   c0007ab6 <malloc>
c0015590:	83 c4 10             	add    esp,0x10
c0015593:	89 c3                	mov    ebx,eax
c0015595:	83 ec 08             	sub    esp,0x8
c0015598:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001559c:	53                   	push   ebx
c001559d:	e8 c4 36 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c00155a2:	83 c4 10             	add    esp,0x10
c00155a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155a9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00155af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00155b9:	83 ec 0c             	sub    esp,0xc
c00155bc:	50                   	push   eax
c00155bd:	e8 42 2f ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c9:	05 0c 01 00 00       	add    eax,0x10c
c00155ce:	83 ec 08             	sub    esp,0x8
c00155d1:	68 fa 21 02 c0       	push   0xc00221fa
c00155d6:	50                   	push   eax
c00155d7:	e8 64 b0 fe ff       	call   c0000640 <strcpy>
c00155dc:	83 c4 10             	add    esp,0x10
c00155df:	90                   	nop
c00155e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155e4:	83 c0 0c             	add    eax,0xc
c00155e7:	83 ec 08             	sub    esp,0x8
c00155ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155ee:	50                   	push   eax
c00155ef:	e8 4c b0 fe ff       	call   c0000640 <strcpy>
c00155f4:	83 c4 10             	add    esp,0x10
c00155f7:	83 ec 08             	sub    esp,0x8
c00155fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00155fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015602:	e8 d9 fd ff ff       	call   c00153e0 <Process::addArgs(char**)>
c0015607:	83 c4 10             	add    esp,0x10
c001560a:	83 ec 08             	sub    esp,0x8
c001560d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015611:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015615:	e8 66 ed ff ff       	call   c0014380 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001561a:	83 c4 10             	add    esp,0x10
c001561d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015621:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015625:	83 f0 01             	xor    eax,0x1
c0015628:	88 c2                	mov    dl,al
c001562a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001562e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015634:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015639:	83 ec 04             	sub    esp,0x4
c001563c:	50                   	push   eax
c001563d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015641:	68 54 22 02 c0       	push   0xc0022254
c0015646:	e8 fa 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001564b:	83 c4 10             	add    esp,0x10
c001564e:	90                   	nop
c001564f:	83 c4 14             	add    esp,0x14
c0015652:	5b                   	pop    ebx
c0015653:	5e                   	pop    esi
c0015654:	c3                   	ret    
c0015655:	90                   	nop
c0015656:	66 90                	xchg   ax,ax

c0015658 <Process::Process(bool, char const*, Process*, char**)>:
c0015658:	56                   	push   esi
c0015659:	53                   	push   ebx
c001565a:	83 ec 24             	sub    esp,0x24
c001565d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015661:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015669:	05 0c 02 00 00       	add    eax,0x20c
c001566e:	bb 07 00 00 00       	mov    ebx,0x7
c0015673:	89 c6                	mov    esi,eax
c0015675:	8d 76 00             	lea    esi,[esi+0x0]
c0015678:	85 db                	test   ebx,ebx
c001567a:	78 14                	js     c0015690 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001567c:	83 ec 0c             	sub    esp,0xc
c001567f:	56                   	push   esi
c0015680:	e8 d3 a3 00 00       	call   c001fa58 <ThreadControlBlock::ThreadControlBlock()>
c0015685:	83 c4 10             	add    esp,0x10
c0015688:	83 c6 5f             	add    esi,0x5f
c001568b:	83 eb 01             	sub    ebx,0x1
c001568e:	eb e8                	jmp    c0015678 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015690:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015694:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001569b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001569f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00156a6:	83 ec 0c             	sub    esp,0xc
c00156a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00156ad:	e8 50 b9 ff ff       	call   c0011002 <KeNewProcessEnv(Process*)>
c00156b2:	83 c4 10             	add    esp,0x10
c00156b5:	89 c2                	mov    edx,eax
c00156b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156bb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00156c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156c5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00156ce:	a1 00 34 02 c0       	mov    eax,ds:0xc0023400
c00156d3:	8d 50 01             	lea    edx,[eax+0x1]
c00156d6:	89 15 00 34 02 c0    	mov    DWORD PTR ds:0xc0023400,edx
c00156dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00156e0:	89 02                	mov    DWORD PTR [edx],eax
c00156e2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00156ea:	83 ec 0c             	sub    esp,0xc
c00156ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00156f1:	e8 c0 23 ff ff       	call   c0007ab6 <malloc>
c00156f6:	83 c4 10             	add    esp,0x10
c00156f9:	89 c3                	mov    ebx,eax
c00156fb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015700:	83 ec 08             	sub    esp,0x8
c0015703:	50                   	push   eax
c0015704:	53                   	push   ebx
c0015705:	e8 5e 49 ff ff       	call   c000a068 <VAS::VAS(bool)>
c001570a:	83 c4 10             	add    esp,0x10
c001570d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015711:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015717:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001571b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015725:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015729:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001572d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015733:	e8 ee be ff ff       	call   c0011626 <KeInitSignals()>
c0015738:	89 c2                	mov    edx,eax
c001573a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001573e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015744:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015748:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001574e:	85 c0                	test   eax,eax
c0015750:	74 42                	je     c0015794 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015752:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015756:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001575c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015762:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015766:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001576c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015770:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015776:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001577c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015780:	05 0c 01 00 00       	add    eax,0x10c
c0015785:	83 ec 08             	sub    esp,0x8
c0015788:	52                   	push   edx
c0015789:	50                   	push   eax
c001578a:	e8 b1 ae fe ff       	call   c0000640 <strcpy>
c001578f:	83 c4 10             	add    esp,0x10
c0015792:	eb 64                	jmp    c00157f8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015794:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c001579c:	83 ec 0c             	sub    esp,0xc
c001579f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00157a3:	e8 0e 23 ff ff       	call   c0007ab6 <malloc>
c00157a8:	83 c4 10             	add    esp,0x10
c00157ab:	89 c3                	mov    ebx,eax
c00157ad:	83 ec 08             	sub    esp,0x8
c00157b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00157b4:	53                   	push   ebx
c00157b5:	e8 ac 34 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157c1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00157c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00157d1:	83 ec 0c             	sub    esp,0xc
c00157d4:	50                   	push   eax
c00157d5:	e8 2a 2d ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c00157da:	83 c4 10             	add    esp,0x10
c00157dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157e1:	05 0c 01 00 00       	add    eax,0x10c
c00157e6:	83 ec 08             	sub    esp,0x8
c00157e9:	68 fa 21 02 c0       	push   0xc00221fa
c00157ee:	50                   	push   eax
c00157ef:	e8 4c ae fe ff       	call   c0000640 <strcpy>
c00157f4:	83 c4 10             	add    esp,0x10
c00157f7:	90                   	nop
c00157f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157fc:	83 c0 0c             	add    eax,0xc
c00157ff:	83 ec 08             	sub    esp,0x8
c0015802:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015806:	50                   	push   eax
c0015807:	e8 34 ae fe ff       	call   c0000640 <strcpy>
c001580c:	83 c4 10             	add    esp,0x10
c001580f:	83 ec 08             	sub    esp,0x8
c0015812:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015816:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001581a:	e8 c1 fb ff ff       	call   c00153e0 <Process::addArgs(char**)>
c001581f:	83 c4 10             	add    esp,0x10
c0015822:	90                   	nop
c0015823:	83 c4 24             	add    esp,0x24
c0015826:	5b                   	pop    ebx
c0015827:	5e                   	pop    esi
c0015828:	c3                   	ret    
c0015829:	8d 76 00             	lea    esi,[esi+0x0]

c001582c <taskStartupFunction>:
c001582c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015831:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015834:	c3                   	ret    
c0015835:	90                   	nop
c0015836:	66 90                	xchg   ax,ax

c0015838 <Semaphore::Semaphore(int)>:
c0015838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001583c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015840:	89 10                	mov    DWORD PTR [eax],edx
c0015842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015846:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001584d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015851:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001585c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015863:	90                   	nop
c0015864:	c3                   	ret    
c0015865:	90                   	nop
c0015866:	66 90                	xchg   ax,ax

c0015868 <Mutex::Mutex()>:
c0015868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001586c:	6a 01                	push   0x1
c001586e:	50                   	push   eax
c001586f:	e8 c4 ff ff ff       	call   c0015838 <Semaphore::Semaphore(int)>
c0015874:	83 c4 08             	add    esp,0x8
c0015877:	90                   	nop
c0015878:	c3                   	ret    
c0015879:	90                   	nop
c001587a:	66 90                	xchg   ax,ax

c001587c <Process::createThread(void (*)(void*), void*, int)>:
c001587c:	57                   	push   edi
c001587d:	31 c9                	xor    ecx,ecx
c001587f:	56                   	push   esi
c0015880:	53                   	push   ebx
c0015881:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015885:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001588c:	89 f2                	mov    edx,esi
c001588e:	66 90                	xchg   ax,ax
c0015890:	0f b7 c2             	movzx  eax,dx
c0015893:	80 e2 01             	and    dl,0x1
c0015896:	74 14                	je     c00158ac <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015898:	d1 f8                	sar    eax,1
c001589a:	83 c1 01             	add    ecx,0x1
c001589d:	89 c2                	mov    edx,eax
c001589f:	83 f9 10             	cmp    ecx,0x10
c00158a2:	75 ec                	jne    c0015890 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00158a4:	31 db                	xor    ebx,ebx
c00158a6:	89 d8                	mov    eax,ebx
c00158a8:	5b                   	pop    ebx
c00158a9:	5e                   	pop    esi
c00158aa:	5f                   	pop    edi
c00158ab:	c3                   	ret    
c00158ac:	b8 01 00 00 00       	mov    eax,0x1
c00158b1:	d3 e0                	shl    eax,cl
c00158b3:	09 c6                	or     esi,eax
c00158b5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00158b8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00158bf:	01 c0                	add    eax,eax
c00158c1:	01 c8                	add    eax,ecx
c00158c3:	8d 04 80             	lea    eax,[eax+eax*4]
c00158c6:	01 d8                	add    eax,ebx
c00158c8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00158cf:	75 0b                	jne    c00158dc <Process::createThread(void (*)(void*), void*, int)+0x60>
c00158d1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00158db:	90                   	nop
c00158dc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00158e2:	83 ec 0c             	sub    esp,0xc
c00158e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00158e8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00158eb:	01 c0                	add    eax,eax
c00158ed:	01 c8                	add    eax,ecx
c00158ef:	8d 3c 80             	lea    edi,[eax+eax*4]
c00158f2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00158f5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00158fb:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015901:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015905:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001590b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015911:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015917:	89 ca                	mov    edx,ecx
c0015919:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015920:	f7 da                	neg    edx
c0015922:	c1 e2 15             	shl    edx,0x15
c0015925:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001592b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015931:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015935:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001593f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015945:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015949:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001594f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015959:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015963:	68 00 01 00 00       	push   0x100
c0015968:	e8 49 21 ff ff       	call   c0007ab6 <malloc>
c001596d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015970:	58                   	pop    eax
c0015971:	5a                   	pop    edx
c0015972:	53                   	push   ebx
c0015973:	68 84 a4 02 c0       	push   0xc002a484
c0015978:	e8 73 9e 00 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001597d:	83 c4 10             	add    esp,0x10
c0015980:	89 d8                	mov    eax,ebx
c0015982:	5b                   	pop    ebx
c0015983:	5e                   	pop    esi
c0015984:	5f                   	pop    edi
c0015985:	c3                   	ret    
c0015986:	66 90                	xchg   ax,ax

c0015988 <Process::createUserThread()>:
c0015988:	83 ec 0c             	sub    esp,0xc
c001598b:	68 80 00 00 00       	push   0x80
c0015990:	6a 00                	push   0x0
c0015992:	68 d8 52 01 c0       	push   0xc00152d8
c0015997:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001599b:	50                   	push   eax
c001599c:	e8 db fe ff ff       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c00159a1:	83 c4 1c             	add    esp,0x1c
c00159a4:	c3                   	ret    
c00159a5:	8d 76 00             	lea    esi,[esi+0x0]

c00159a8 <setupMultitasking(void (*)())>:
c00159a8:	56                   	push   esi
c00159a9:	53                   	push   ebx
c00159aa:	83 ec 04             	sub    esp,0x4
c00159ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00159b1:	eb 11                	jmp    c00159c4 <setupMultitasking(void (*)())+0x1c>
c00159b3:	90                   	nop
c00159b4:	83 ec 0c             	sub    esp,0xc
c00159b7:	68 84 a4 02 c0       	push   0xc002a484
c00159bc:	e8 73 9d 00 00       	call   c001f734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00159c1:	83 c4 10             	add    esp,0x10
c00159c4:	83 ec 0c             	sub    esp,0xc
c00159c7:	68 84 a4 02 c0       	push   0xc002a484
c00159cc:	e8 3f 9d 00 00       	call   c001f710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00159d1:	83 c4 10             	add    esp,0x10
c00159d4:	84 c0                	test   al,al
c00159d6:	74 dc                	je     c00159b4 <setupMultitasking(void (*)())+0xc>
c00159d8:	83 ec 0c             	sub    esp,0xc
c00159db:	68 24 07 00 00       	push   0x724
c00159e0:	e8 d1 20 ff ff       	call   c0007ab6 <malloc>
c00159e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00159ec:	89 c3                	mov    ebx,eax
c00159ee:	6a 00                	push   0x0
c00159f0:	68 fe 21 02 c0       	push   0xc00221fe
c00159f5:	6a 01                	push   0x1
c00159f7:	50                   	push   eax
c00159f8:	e8 5b fc ff ff       	call   c0015658 <Process::Process(bool, char const*, Process*, char**)>
c00159fd:	83 c4 14             	add    esp,0x14
c0015a00:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015a06:	89 1d 90 a4 02 c0    	mov    DWORD PTR ds:0xc002a490,ebx
c0015a0c:	50                   	push   eax
c0015a0d:	e8 47 2d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015a12:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015a19:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015a23:	83 c8 01             	or     eax,0x1
c0015a26:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015a2d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a33:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015a36:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015a40:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015a46:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015a4c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015a56:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015a60:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015a6a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015a70:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015a7a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015a80:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015a8a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015a91:	e8 20 20 ff ff       	call   c0007ab6 <malloc>
c0015a96:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015a9c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015aa2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015aa8:	5a                   	pop    edx
c0015aa9:	59                   	pop    ecx
c0015aaa:	68 fa 21 02 c0       	push   0xc00221fa
c0015aaf:	50                   	push   eax
c0015ab0:	e8 8b ab fe ff       	call   c0000640 <strcpy>
c0015ab5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015abc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015ac0:	83 c4 14             	add    esp,0x14
c0015ac3:	5b                   	pop    ebx
c0015ac4:	5e                   	pop    esi
c0015ac5:	e9 9f a7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015aca:	66 90                	xchg   ax,ax

c0015acc <schedule()>:
c0015acc:	8b 15 64 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a464
c0015ad2:	85 d2                	test   edx,edx
c0015ad4:	74 0e                	je     c0015ae4 <schedule()+0x18>
c0015ad6:	c7 05 60 a4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x1
c0015ae0:	c3                   	ret    
c0015ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ae4:	53                   	push   ebx
c0015ae5:	83 ec 14             	sub    esp,0x14
c0015ae8:	68 84 a4 02 c0       	push   0xc002a484
c0015aed:	e8 1e 9c 00 00       	call   c001f710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015af2:	83 c4 10             	add    esp,0x10
c0015af5:	84 c0                	test   al,al
c0015af7:	75 3f                	jne    c0015b38 <schedule()+0x6c>
c0015af9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015afe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015b01:	83 fa 01             	cmp    edx,0x1
c0015b04:	74 3a                	je     c0015b40 <schedule()+0x74>
c0015b06:	66 90                	xchg   ax,ax
c0015b08:	83 ec 0c             	sub    esp,0xc
c0015b0b:	68 84 a4 02 c0       	push   0xc002a484
c0015b10:	e8 17 9c 00 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b15:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0015b1c:	89 c3                	mov    ebx,eax
c0015b1e:	e8 11 9c 00 00       	call   c001f734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b23:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015b2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b2d:	e8 fe f7 ff ff       	call   c0015330 <switchToThread(ThreadControlBlock*)>
c0015b32:	83 c4 10             	add    esp,0x10
c0015b35:	8d 76 00             	lea    esi,[esi+0x0]
c0015b38:	83 c4 08             	add    esp,0x8
c0015b3b:	5b                   	pop    ebx
c0015b3c:	c3                   	ret    
c0015b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b40:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015b47:	83 ec 08             	sub    esp,0x8
c0015b4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b4f:	50                   	push   eax
c0015b50:	68 84 a4 02 c0       	push   0xc002a484
c0015b55:	e8 96 9c 00 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b5a:	83 c4 10             	add    esp,0x10
c0015b5d:	eb a9                	jmp    c0015b08 <schedule()+0x3c>
c0015b5f:	90                   	nop

c0015b60 <Semaphore::tryAcquire()>:
c0015b60:	53                   	push   ebx
c0015b61:	83 ec 08             	sub    esp,0x8
c0015b64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b68:	fa                   	cli    
c0015b69:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015b6e:	8d 50 01             	lea    edx,[eax+0x1]
c0015b71:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015b77:	8b 15 64 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a464
c0015b7d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015b80:	89 1d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ebx
c0015b86:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015b89:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015b8b:	7c 33                	jl     c0015bc0 <Semaphore::tryAcquire()+0x60>
c0015b8d:	89 15 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,edx
c0015b93:	85 d2                	test   edx,edx
c0015b95:	75 0d                	jne    c0015ba4 <Semaphore::tryAcquire()+0x44>
c0015b97:	8b 15 60 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a460
c0015b9d:	85 d2                	test   edx,edx
c0015b9f:	75 6f                	jne    c0015c10 <Semaphore::tryAcquire()+0xb0>
c0015ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ba4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015ba9:	85 c0                	test   eax,eax
c0015bab:	74 0b                	je     c0015bb8 <Semaphore::tryAcquire()+0x58>
c0015bad:	8d 76 00             	lea    esi,[esi+0x0]
c0015bb0:	31 c0                	xor    eax,eax
c0015bb2:	83 c4 08             	add    esp,0x8
c0015bb5:	5b                   	pop    ebx
c0015bb6:	c3                   	ret    
c0015bb7:	90                   	nop
c0015bb8:	fb                   	sti    
c0015bb9:	83 c4 08             	add    esp,0x8
c0015bbc:	5b                   	pop    ebx
c0015bbd:	c3                   	ret    
c0015bbe:	66 90                	xchg   ax,ax
c0015bc0:	83 c3 01             	add    ebx,0x1
c0015bc3:	89 15 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,edx
c0015bc9:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015bcc:	85 d2                	test   edx,edx
c0015bce:	75 24                	jne    c0015bf4 <Semaphore::tryAcquire()+0x94>
c0015bd0:	8b 0d 60 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a460
c0015bd6:	85 c9                	test   ecx,ecx
c0015bd8:	74 1a                	je     c0015bf4 <Semaphore::tryAcquire()+0x94>
c0015bda:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015be4:	e8 e3 fe ff ff       	call   c0015acc <schedule()>
c0015be9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015bee:	83 e8 01             	sub    eax,0x1
c0015bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0015bf4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015bf9:	85 c0                	test   eax,eax
c0015bfb:	75 0b                	jne    c0015c08 <Semaphore::tryAcquire()+0xa8>
c0015bfd:	fb                   	sti    
c0015bfe:	b0 01                	mov    al,0x1
c0015c00:	83 c4 08             	add    esp,0x8
c0015c03:	5b                   	pop    ebx
c0015c04:	c3                   	ret    
c0015c05:	8d 76 00             	lea    esi,[esi+0x0]
c0015c08:	b0 01                	mov    al,0x1
c0015c0a:	83 c4 08             	add    esp,0x8
c0015c0d:	5b                   	pop    ebx
c0015c0e:	c3                   	ret    
c0015c0f:	90                   	nop
c0015c10:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015c1a:	e8 ad fe ff ff       	call   c0015acc <schedule()>
c0015c1f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c24:	83 e8 01             	sub    eax,0x1
c0015c27:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c2c:	85 c0                	test   eax,eax
c0015c2e:	75 80                	jne    c0015bb0 <Semaphore::tryAcquire()+0x50>
c0015c30:	eb 86                	jmp    c0015bb8 <Semaphore::tryAcquire()+0x58>
c0015c32:	66 90                	xchg   ax,ax

c0015c34 <Semaphore::assertLocked(char const*)>:
c0015c34:	83 ec 0c             	sub    esp,0xc
c0015c37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c3b:	fa                   	cli    
c0015c3c:	8b 0d 68 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a468
c0015c42:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015c47:	83 c1 01             	add    ecx,0x1
c0015c4a:	89 0d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ecx
c0015c50:	8d 48 01             	lea    ecx,[eax+0x1]
c0015c53:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015c59:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015c5b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015c5e:	7c 28                	jl     c0015c88 <Semaphore::assertLocked(char const*)+0x54>
c0015c60:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015c65:	85 c0                	test   eax,eax
c0015c67:	75 0b                	jne    c0015c74 <Semaphore::assertLocked(char const*)+0x40>
c0015c69:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015c6e:	85 c0                	test   eax,eax
c0015c70:	75 32                	jne    c0015ca4 <Semaphore::assertLocked(char const*)+0x70>
c0015c72:	66 90                	xchg   ax,ax
c0015c74:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c79:	83 e8 01             	sub    eax,0x1
c0015c7c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c81:	75 01                	jne    c0015c84 <Semaphore::assertLocked(char const*)+0x50>
c0015c83:	fb                   	sti    
c0015c84:	83 c4 0c             	add    esp,0xc
c0015c87:	c3                   	ret    
c0015c88:	83 ec 0c             	sub    esp,0xc
c0015c8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015c8f:	52                   	push   edx
c0015c90:	e8 78 b5 ff ff       	call   c001120d <KePanic(char const*)>
c0015c95:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015c9a:	83 c4 10             	add    esp,0x10
c0015c9d:	83 e8 01             	sub    eax,0x1
c0015ca0:	eb be                	jmp    c0015c60 <Semaphore::assertLocked(char const*)+0x2c>
c0015ca2:	66 90                	xchg   ax,ax
c0015ca4:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015cae:	e8 19 fe ff ff       	call   c0015acc <schedule()>
c0015cb3:	eb bf                	jmp    c0015c74 <Semaphore::assertLocked(char const*)+0x40>
c0015cb5:	8d 76 00             	lea    esi,[esi+0x0]

c0015cb8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015cb8:	83 ec 0c             	sub    esp,0xc
c0015cbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015cc4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015cc7:	e8 00 fe ff ff       	call   c0015acc <schedule()>
c0015ccc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015cd1:	83 e8 01             	sub    eax,0x1
c0015cd4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015cd9:	75 01                	jne    c0015cdc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015cdb:	fb                   	sti    
c0015cdc:	83 c4 0c             	add    esp,0xc
c0015cdf:	c3                   	ret    

c0015ce0 <blockTask(TaskState)>:
c0015ce0:	83 ec 0c             	sub    esp,0xc
c0015ce3:	fa                   	cli    
c0015ce4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015ce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ced:	83 c0 01             	add    eax,0x1
c0015cf0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015cf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cfa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015cfd:	e8 ca fd ff ff       	call   c0015acc <schedule()>
c0015d02:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015d07:	83 e8 01             	sub    eax,0x1
c0015d0a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015d0f:	75 03                	jne    c0015d14 <blockTask(TaskState)+0x34>
c0015d11:	fb                   	sti    
c0015d12:	66 90                	xchg   ax,ax
c0015d14:	83 c4 0c             	add    esp,0xc
c0015d17:	c3                   	ret    

c0015d18 <waitTask(int, int*, int)>:
c0015d18:	83 ec 18             	sub    esp,0x18
c0015d1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015d24:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015d27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d30:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015d33:	6a 07                	push   0x7
c0015d35:	e8 a6 ff ff ff       	call   c0015ce0 <blockTask(TaskState)>
c0015d3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d3f:	83 c4 10             	add    esp,0x10
c0015d42:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015d45:	85 d2                	test   edx,edx
c0015d47:	74 0b                	je     c0015d54 <waitTask(int, int*, int)+0x3c>
c0015d49:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015d4c:	89 02                	mov    DWORD PTR [edx],eax
c0015d4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d53:	90                   	nop
c0015d54:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015d57:	83 c4 0c             	add    esp,0xc
c0015d5a:	c3                   	ret    
c0015d5b:	90                   	nop

c0015d5c <milliTenthSleepUntil(unsigned int)>:
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d63:	39 05 4c 95 02 c0    	cmp    DWORD PTR ds:0xc002954c,eax
c0015d69:	76 05                	jbe    c0015d70 <milliTenthSleepUntil(unsigned int)+0x14>
c0015d6b:	90                   	nop
c0015d6c:	83 c4 0c             	add    esp,0xc
c0015d6f:	c3                   	ret    
c0015d70:	fa                   	cli    
c0015d71:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0015d77:	83 ec 08             	sub    esp,0x8
c0015d7a:	83 c2 01             	add    edx,0x1
c0015d7d:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0015d83:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015d89:	83 c1 01             	add    ecx,0x1
c0015d8c:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015d92:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015d98:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015da0:	50                   	push   eax
c0015da1:	68 78 a4 02 c0       	push   0xc002a478
c0015da6:	e8 45 9a 00 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015dab:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015db2:	e8 29 ff ff ff       	call   c0015ce0 <blockTask(TaskState)>
c0015db7:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015dbc:	83 c4 10             	add    esp,0x10
c0015dbf:	83 e8 01             	sub    eax,0x1
c0015dc2:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015dc7:	85 c0                	test   eax,eax
c0015dc9:	75 09                	jne    c0015dd4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015dcb:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015dd0:	85 c0                	test   eax,eax
c0015dd2:	75 14                	jne    c0015de8 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015dd4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015dd9:	83 e8 01             	sub    eax,0x1
c0015ddc:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015de1:	75 89                	jne    c0015d6c <milliTenthSleepUntil(unsigned int)+0x10>
c0015de3:	fb                   	sti    
c0015de4:	83 c4 0c             	add    esp,0xc
c0015de7:	c3                   	ret    
c0015de8:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015df2:	e8 d5 fc ff ff       	call   c0015acc <schedule()>
c0015df7:	eb db                	jmp    c0015dd4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015df9:	8d 76 00             	lea    esi,[esi+0x0]

c0015dfc <milliTenthSleep(unsigned int)>:
c0015dfc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e00:	a1 4c 95 02 c0       	mov    eax,ds:0xc002954c
c0015e05:	01 c2                	add    edx,eax
c0015e07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015e0b:	e9 4c ff ff ff       	jmp    c0015d5c <milliTenthSleepUntil(unsigned int)>

c0015e10 <sleep(unsigned int)>:
c0015e10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e14:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e17:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e1a:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e1d:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e20:	c1 e0 04             	shl    eax,0x4
c0015e23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e27:	eb d3                	jmp    c0015dfc <milliTenthSleep(unsigned int)>
c0015e29:	90                   	nop
c0015e2a:	66 90                	xchg   ax,ax

c0015e2c <Semaphore::acquire()>:
c0015e2c:	83 ec 0c             	sub    esp,0xc
c0015e2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e33:	fa                   	cli    
c0015e34:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e39:	83 c0 01             	add    eax,0x1
c0015e3c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015e41:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015e46:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e49:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015e4f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015e52:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015e54:	7d 2e                	jge    c0015e84 <Semaphore::acquire()+0x58>
c0015e56:	83 c1 01             	add    ecx,0x1
c0015e59:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015e5c:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015e61:	85 c0                	test   eax,eax
c0015e63:	75 0b                	jne    c0015e70 <Semaphore::acquire()+0x44>
c0015e65:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015e6a:	85 c0                	test   eax,eax
c0015e6c:	75 66                	jne    c0015ed4 <Semaphore::acquire()+0xa8>
c0015e6e:	66 90                	xchg   ax,ax
c0015e70:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e75:	83 e8 01             	sub    eax,0x1
c0015e78:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015e7d:	75 01                	jne    c0015e80 <Semaphore::acquire()+0x54>
c0015e7f:	fb                   	sti    
c0015e80:	83 c4 0c             	add    esp,0xc
c0015e83:	c3                   	ret    
c0015e84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e89:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015e90:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015e93:	85 c9                	test   ecx,ecx
c0015e95:	74 51                	je     c0015ee8 <Semaphore::acquire()+0xbc>
c0015e97:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015e9a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015ea0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015ea3:	90                   	nop
c0015ea4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea9:	83 ec 0c             	sub    esp,0xc
c0015eac:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015eaf:	68 80 22 02 c0       	push   0xc0022280
c0015eb4:	e8 8c 4a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015eb9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015ec0:	e8 1b fe ff ff       	call   c0015ce0 <blockTask(TaskState)>
c0015ec5:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015eca:	83 c4 10             	add    esp,0x10
c0015ecd:	83 e8 01             	sub    eax,0x1
c0015ed0:	eb 8a                	jmp    c0015e5c <Semaphore::acquire()+0x30>
c0015ed2:	66 90                	xchg   ax,ax
c0015ed4:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015ede:	e8 e9 fb ff ff       	call   c0015acc <schedule()>
c0015ee3:	eb 8b                	jmp    c0015e70 <Semaphore::acquire()+0x44>
c0015ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ee8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015ef0:	eb b2                	jmp    c0015ea4 <Semaphore::acquire()+0x78>
c0015ef2:	66 90                	xchg   ax,ax

c0015ef4 <taskReturned>:
c0015ef4:	83 ec 18             	sub    esp,0x18
c0015ef7:	68 a0 22 02 c0       	push   0xc00222a0
c0015efc:	e8 0c b3 ff ff       	call   c001120d <KePanic(char const*)>
c0015f01:	83 c4 10             	add    esp,0x10
c0015f04:	83 ec 0c             	sub    esp,0xc
c0015f07:	6a 02                	push   0x2
c0015f09:	e8 d2 fd ff ff       	call   c0015ce0 <blockTask(TaskState)>
c0015f0e:	fa                   	cli    
c0015f0f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f14:	83 c0 01             	add    eax,0x1
c0015f17:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015f1c:	e8 ab fb ff ff       	call   c0015acc <schedule()>
c0015f21:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f26:	83 c4 10             	add    esp,0x10
c0015f29:	83 e8 01             	sub    eax,0x1
c0015f2c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015f31:	85 c0                	test   eax,eax
c0015f33:	75 cf                	jne    c0015f04 <taskReturned+0x10>
c0015f35:	fb                   	sti    
c0015f36:	eb cc                	jmp    c0015f04 <taskReturned+0x10>

c0015f38 <Thr::processFromPID(int)>:
c0015f38:	57                   	push   edi
c0015f39:	56                   	push   esi
c0015f3a:	53                   	push   ebx
c0015f3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f3f:	fa                   	cli    
c0015f40:	8b 0d 68 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a468
c0015f46:	83 ec 0c             	sub    esp,0xc
c0015f49:	83 c1 01             	add    ecx,0x1
c0015f4c:	68 84 a4 02 c0       	push   0xc002a484
c0015f51:	89 0d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ecx
c0015f57:	e8 d0 97 00 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f5c:	83 c4 10             	add    esp,0x10
c0015f5f:	89 c7                	mov    edi,eax
c0015f61:	eb 15                	jmp    c0015f78 <Thr::processFromPID(int)+0x40>
c0015f63:	90                   	nop
c0015f64:	83 ec 0c             	sub    esp,0xc
c0015f67:	68 84 a4 02 c0       	push   0xc002a484
c0015f6c:	e8 bb 97 00 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f71:	83 c4 10             	add    esp,0x10
c0015f74:	39 f8                	cmp    eax,edi
c0015f76:	74 50                	je     c0015fc8 <Thr::processFromPID(int)+0x90>
c0015f78:	83 ec 0c             	sub    esp,0xc
c0015f7b:	68 84 a4 02 c0       	push   0xc002a484
c0015f80:	e8 a7 97 00 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f85:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0015f8c:	89 c3                	mov    ebx,eax
c0015f8e:	e8 a1 97 00 00       	call   c001f734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f93:	58                   	pop    eax
c0015f94:	5a                   	pop    edx
c0015f95:	53                   	push   ebx
c0015f96:	68 84 a4 02 c0       	push   0xc002a484
c0015f9b:	e8 50 98 00 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fa0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015fa3:	83 c4 10             	add    esp,0x10
c0015fa6:	39 30                	cmp    DWORD PTR [eax],esi
c0015fa8:	75 ba                	jne    c0015f64 <Thr::processFromPID(int)+0x2c>
c0015faa:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015faf:	83 e8 01             	sub    eax,0x1
c0015fb2:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015fb7:	74 0b                	je     c0015fc4 <Thr::processFromPID(int)+0x8c>
c0015fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fbc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015fbf:	5b                   	pop    ebx
c0015fc0:	5e                   	pop    esi
c0015fc1:	5f                   	pop    edi
c0015fc2:	c3                   	ret    
c0015fc3:	90                   	nop
c0015fc4:	fb                   	sti    
c0015fc5:	eb f5                	jmp    c0015fbc <Thr::processFromPID(int)+0x84>
c0015fc7:	90                   	nop
c0015fc8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015fcd:	83 e8 01             	sub    eax,0x1
c0015fd0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015fd5:	75 05                	jne    c0015fdc <Thr::processFromPID(int)+0xa4>
c0015fd7:	fb                   	sti    
c0015fd8:	5b                   	pop    ebx
c0015fd9:	5e                   	pop    esi
c0015fda:	5f                   	pop    edi
c0015fdb:	c3                   	ret    
c0015fdc:	5b                   	pop    ebx
c0015fdd:	31 c0                	xor    eax,eax
c0015fdf:	5e                   	pop    esi
c0015fe0:	5f                   	pop    edi
c0015fe1:	c3                   	ret    
c0015fe2:	66 90                	xchg   ax,ax

c0015fe4 <unblockTask(ThreadControlBlock*)>:
c0015fe4:	53                   	push   ebx
c0015fe5:	83 ec 08             	sub    esp,0x8
c0015fe8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fec:	fa                   	cli    
c0015fed:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015ff2:	83 c0 01             	add    eax,0x1
c0015ff5:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015ffa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015ffd:	85 c0                	test   eax,eax
c0015fff:	74 67                	je     c0016068 <unblockTask(ThreadControlBlock*)+0x84>
c0016001:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016004:	83 f8 01             	cmp    eax,0x1
c0016007:	74 37                	je     c0016040 <unblockTask(ThreadControlBlock*)+0x5c>
c0016009:	83 ec 0c             	sub    esp,0xc
c001600c:	68 84 a4 02 c0       	push   0xc002a484
c0016011:	e8 16 97 00 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016016:	83 c4 10             	add    esp,0x10
c0016019:	85 c0                	test   eax,eax
c001601b:	75 1b                	jne    c0016038 <unblockTask(ThreadControlBlock*)+0x54>
c001601d:	eb 5d                	jmp    c001607c <unblockTask(ThreadControlBlock*)+0x98>
c001601f:	90                   	nop
c0016020:	83 ec 08             	sub    esp,0x8
c0016023:	50                   	push   eax
c0016024:	68 84 a4 02 c0       	push   0xc002a484
c0016029:	e8 1e 9a 00 00       	call   c001fa4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001602e:	83 c4 10             	add    esp,0x10
c0016031:	85 c0                	test   eax,eax
c0016033:	74 47                	je     c001607c <unblockTask(ThreadControlBlock*)+0x98>
c0016035:	8d 76 00             	lea    esi,[esi+0x0]
c0016038:	39 c3                	cmp    ebx,eax
c001603a:	75 e4                	jne    c0016020 <unblockTask(ThreadControlBlock*)+0x3c>
c001603c:	eb 12                	jmp    c0016050 <unblockTask(ThreadControlBlock*)+0x6c>
c001603e:	66 90                	xchg   ax,ax
c0016040:	83 ec 0c             	sub    esp,0xc
c0016043:	68 1c 22 02 c0       	push   0xc002221c
c0016048:	e8 f8 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001604d:	83 c4 10             	add    esp,0x10
c0016050:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016055:	83 e8 01             	sub    eax,0x1
c0016058:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001605d:	75 01                	jne    c0016060 <unblockTask(ThreadControlBlock*)+0x7c>
c001605f:	fb                   	sti    
c0016060:	83 c4 08             	add    esp,0x8
c0016063:	5b                   	pop    ebx
c0016064:	c3                   	ret    
c0016065:	8d 76 00             	lea    esi,[esi+0x0]
c0016068:	83 ec 0c             	sub    esp,0xc
c001606b:	68 05 22 02 c0       	push   0xc0022205
c0016070:	e8 d0 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016075:	83 c4 10             	add    esp,0x10
c0016078:	eb d6                	jmp    c0016050 <unblockTask(ThreadControlBlock*)+0x6c>
c001607a:	66 90                	xchg   ax,ax
c001607c:	83 ec 08             	sub    esp,0x8
c001607f:	53                   	push   ebx
c0016080:	68 84 a4 02 c0       	push   0xc002a484
c0016085:	e8 66 97 00 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001608a:	83 c4 10             	add    esp,0x10
c001608d:	eb c1                	jmp    c0016050 <unblockTask(ThreadControlBlock*)+0x6c>
c001608f:	90                   	nop

c0016090 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016090:	55                   	push   ebp
c0016091:	57                   	push   edi
c0016092:	56                   	push   esi
c0016093:	53                   	push   ebx
c0016094:	83 ec 1c             	sub    esp,0x1c
c0016097:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001609b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001609e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00160a4:	85 ed                	test   ebp,ebp
c00160a6:	7e 28                	jle    c00160d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00160a8:	31 f6                	xor    esi,esi
c00160aa:	66 90                	xchg   ax,ax
c00160ac:	83 ec 0c             	sub    esp,0xc
c00160af:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00160b6:	83 c6 01             	add    esi,0x1
c00160b9:	57                   	push   edi
c00160ba:	e8 07 1a ff ff       	call   c0007ac6 <free>
c00160bf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160c2:	83 c4 10             	add    esp,0x10
c00160c5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00160cb:	7f df                	jg     c00160ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00160cd:	8d 76 00             	lea    esi,[esi+0x0]
c00160d0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00160da:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00160df:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00160e2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00160e5:	d3 c0                	rol    eax,cl
c00160e7:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00160ee:	21 c8                	and    eax,ecx
c00160f0:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00160f7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00160fa:	89 f7                	mov    edi,esi
c00160fc:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016104:	0f 85 72 01 00 00    	jne    c001627c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001610a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016110:	85 ed                	test   ebp,ebp
c0016112:	74 1c                	je     c0016130 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016114:	83 ec 0c             	sub    esp,0xc
c0016117:	55                   	push   ebp
c0016118:	e8 01 ae ff ff       	call   c0010f1e <EnvVarContainer::~EnvVarContainer()>
c001611d:	59                   	pop    ecx
c001611e:	5e                   	pop    esi
c001611f:	6a 0c                	push   0xc
c0016121:	55                   	push   ebp
c0016122:	e8 f1 46 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016127:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001612a:	83 c4 10             	add    esp,0x10
c001612d:	89 f7                	mov    edi,esi
c001612f:	90                   	nop
c0016130:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016136:	85 c0                	test   eax,eax
c0016138:	0f 84 b2 00 00 00    	je     c00161f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001613e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016141:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016145:	31 c9                	xor    ecx,ecx
c0016147:	eb 17                	jmp    c0016160 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016149:	8d 76 00             	lea    esi,[esi+0x0]
c001614c:	83 c1 01             	add    ecx,0x1
c001614f:	83 f9 10             	cmp    ecx,0x10
c0016152:	0f 84 98 00 00 00    	je     c00161f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016158:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001615e:	66 90                	xchg   ax,ax
c0016160:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016167:	d3 fa                	sar    edx,cl
c0016169:	80 e2 01             	and    dl,0x1
c001616c:	74 de                	je     c001614c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001616e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016171:	01 d2                	add    edx,edx
c0016173:	01 ca                	add    edx,ecx
c0016175:	8d 14 92             	lea    edx,[edx+edx*4]
c0016178:	01 d0                	add    eax,edx
c001617a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016180:	83 fd 07             	cmp    ebp,0x7
c0016183:	75 c7                	jne    c001614c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016185:	05 40 02 00 00       	add    eax,0x240
c001618a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001618d:	83 fd ff             	cmp    ebp,0xffffffff
c0016190:	0f 8c ee 00 00 00    	jl     c0016284 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016196:	0f 84 ac 01 00 00    	je     c0016348 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001619c:	85 ed                	test   ebp,ebp
c001619e:	0f 84 90 01 00 00    	je     c0016334 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00161a4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00161a6:	75 a4                	jne    c001614c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00161a8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00161ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00161b2:	01 d0                	add    eax,edx
c00161b4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00161b8:	83 ec 0c             	sub    esp,0xc
c00161bb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00161c1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161c4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00161ca:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00161d1:	50                   	push   eax
c00161d2:	e8 0d fe ff ff       	call   c0015fe4 <unblockTask(ThreadControlBlock*)>
c00161d7:	83 c4 10             	add    esp,0x10
c00161da:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00161dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161e1:	89 f7                	mov    edi,esi
c00161e3:	83 c1 01             	add    ecx,0x1
c00161e6:	83 f9 10             	cmp    ecx,0x10
c00161e9:	0f 85 69 ff ff ff    	jne    c0016158 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00161ef:	90                   	nop
c00161f0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00161f6:	85 c0                	test   eax,eax
c00161f8:	74 62                	je     c001625c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00161fa:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016200:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016206:	74 54                	je     c001625c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016208:	83 ec 0c             	sub    esp,0xc
c001620b:	68 84 a4 02 c0       	push   0xc002a484
c0016210:	e8 17 95 00 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016215:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c001621c:	89 c7                	mov    edi,eax
c001621e:	e8 ed 94 00 00       	call   c001f710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016223:	83 c4 10             	add    esp,0x10
c0016226:	84 c0                	test   al,al
c0016228:	0f 84 ce 00 00 00    	je     c00162fc <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001622e:	66 90                	xchg   ax,ax
c0016230:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016233:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016239:	85 d2                	test   edx,edx
c001623b:	74 0f                	je     c001624c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001623d:	83 ec 0c             	sub    esp,0xc
c0016240:	8b 02                	mov    eax,DWORD PTR [edx]
c0016242:	52                   	push   edx
c0016243:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016246:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016249:	83 c4 10             	add    esp,0x10
c001624c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016256:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016259:	8d 76 00             	lea    esi,[esi+0x0]
c001625c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016262:	85 db                	test   ebx,ebx
c0016264:	74 16                	je     c001627c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016266:	83 ec 0c             	sub    esp,0xc
c0016269:	53                   	push   ebx
c001626a:	e8 43 39 ff ff       	call   c0009bb2 <VAS::~VAS()>
c001626f:	58                   	pop    eax
c0016270:	5a                   	pop    edx
c0016271:	6a 14                	push   0x14
c0016273:	53                   	push   ebx
c0016274:	e8 9f 45 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016279:	83 c4 10             	add    esp,0x10
c001627c:	83 c4 1c             	add    esp,0x1c
c001627f:	5b                   	pop    ebx
c0016280:	5e                   	pop    esi
c0016281:	5f                   	pop    edi
c0016282:	5d                   	pop    ebp
c0016283:	c3                   	ret    
c0016284:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016288:	83 ec 0c             	sub    esp,0xc
c001628b:	68 d4 22 02 c0       	push   0xc00222d4
c0016290:	e8 78 af ff ff       	call   c001120d <KePanic(char const*)>
c0016295:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016298:	83 c4 10             	add    esp,0x10
c001629b:	89 f7                	mov    edi,esi
c001629d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162a1:	e9 a6 fe ff ff       	jmp    c001614c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00162a6:	66 90                	xchg   ax,ax
c00162a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162ae:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00162b4:	75 1e                	jne    c00162d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00162b6:	83 ec 0c             	sub    esp,0xc
c00162b9:	68 3c 23 02 c0       	push   0xc002233c
c00162be:	e8 82 46 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00162c3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00162ca:	e8 11 fa ff ff       	call   c0015ce0 <blockTask(TaskState)>
c00162cf:	83 c4 10             	add    esp,0x10
c00162d2:	66 90                	xchg   ax,ax
c00162d4:	83 ec 08             	sub    esp,0x8
c00162d7:	56                   	push   esi
c00162d8:	68 84 a4 02 c0       	push   0xc002a484
c00162dd:	e8 0e 95 00 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162e2:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c00162e9:	e8 3e 94 00 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162ee:	83 c4 10             	add    esp,0x10
c00162f1:	39 f8                	cmp    eax,edi
c00162f3:	0f 84 37 ff ff ff    	je     c0016230 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00162f9:	8d 76 00             	lea    esi,[esi+0x0]
c00162fc:	83 ec 0c             	sub    esp,0xc
c00162ff:	68 84 a4 02 c0       	push   0xc002a484
c0016304:	e8 23 94 00 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016309:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0016310:	89 c6                	mov    esi,eax
c0016312:	e8 1d 94 00 00       	call   c001f734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016317:	83 c4 10             	add    esp,0x10
c001631a:	39 f3                	cmp    ebx,esi
c001631c:	74 b6                	je     c00162d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001631e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016321:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016324:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001632a:	75 a8                	jne    c00162d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001632c:	e9 77 ff ff ff       	jmp    c00162a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016331:	8d 76 00             	lea    esi,[esi+0x0]
c0016334:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016338:	83 ec 0c             	sub    esp,0xc
c001633b:	68 08 23 02 c0       	push   0xc0022308
c0016340:	e9 4b ff ff ff       	jmp    c0016290 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016345:	8d 76 00             	lea    esi,[esi+0x0]
c0016348:	8b 36                	mov    esi,DWORD PTR [esi]
c001634a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001634e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016351:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016354:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001635a:	01 d7                	add    edi,edx
c001635c:	89 f8                	mov    eax,edi
c001635e:	e9 51 fe ff ff       	jmp    c00161b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016363:	90                   	nop

c0016364 <cleanerTaskFunction(void*)>:
c0016364:	53                   	push   ebx
c0016365:	83 ec 08             	sub    esp,0x8
c0016368:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001636d:	83 e8 01             	sub    eax,0x1
c0016370:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016375:	75 01                	jne    c0016378 <cleanerTaskFunction(void*)+0x14>
c0016377:	fb                   	sti    
c0016378:	fa                   	cli    
c0016379:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001637e:	80 3d 4c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a44c,0x0
c0016385:	8d 50 01             	lea    edx,[eax+0x1]
c0016388:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c001638e:	0f 84 c4 00 00 00    	je     c0016458 <cleanerTaskFunction(void*)+0xf4>
c0016394:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016399:	85 c0                	test   eax,eax
c001639b:	75 03                	jne    c00163a0 <cleanerTaskFunction(void*)+0x3c>
c001639d:	fb                   	sti    
c001639e:	66 90                	xchg   ax,ax
c00163a0:	c6 05 4c a4 02 c0 00 	mov    BYTE PTR ds:0xc002a44c,0x0
c00163a7:	fa                   	cli    
c00163a8:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c00163ae:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c00163b4:	83 c2 01             	add    edx,0x1
c00163b7:	83 c1 01             	add    ecx,0x1
c00163ba:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c00163c0:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c00163c6:	fa                   	cli    
c00163c7:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c00163cd:	83 c3 01             	add    ebx,0x1
c00163d0:	89 1d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ebx
c00163d6:	eb 28                	jmp    c0016400 <cleanerTaskFunction(void*)+0x9c>
c00163d8:	83 ec 0c             	sub    esp,0xc
c00163db:	68 6c a4 02 c0       	push   0xc002a46c
c00163e0:	e8 47 93 00 00       	call   c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163e5:	c7 04 24 6c a4 02 c0 	mov    DWORD PTR [esp],0xc002a46c
c00163ec:	89 c3                	mov    ebx,eax
c00163ee:	e8 41 93 00 00       	call   c001f734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163f6:	e8 95 fc ff ff       	call   c0016090 <cleanupTerminatedTask(ThreadControlBlock*)>
c00163fb:	83 c4 10             	add    esp,0x10
c00163fe:	66 90                	xchg   ax,ax
c0016400:	83 ec 0c             	sub    esp,0xc
c0016403:	68 6c a4 02 c0       	push   0xc002a46c
c0016408:	e8 03 93 00 00       	call   c001f710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001640d:	83 c4 10             	add    esp,0x10
c0016410:	84 c0                	test   al,al
c0016412:	74 c4                	je     c00163d8 <cleanerTaskFunction(void*)+0x74>
c0016414:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016419:	83 e8 01             	sub    eax,0x1
c001641c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016421:	75 01                	jne    c0016424 <cleanerTaskFunction(void*)+0xc0>
c0016423:	fb                   	sti    
c0016424:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0016429:	83 e8 01             	sub    eax,0x1
c001642c:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0016431:	0f 85 31 ff ff ff    	jne    c0016368 <cleanerTaskFunction(void*)+0x4>
c0016437:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c001643c:	85 c0                	test   eax,eax
c001643e:	0f 84 24 ff ff ff    	je     c0016368 <cleanerTaskFunction(void*)+0x4>
c0016444:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c001644e:	e8 79 f6 ff ff       	call   c0015acc <schedule()>
c0016453:	e9 10 ff ff ff       	jmp    c0016368 <cleanerTaskFunction(void*)+0x4>
c0016458:	83 ec 0c             	sub    esp,0xc
c001645b:	6a 02                	push   0x2
c001645d:	e8 56 f8 ff ff       	call   c0015cb8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016462:	83 c4 10             	add    esp,0x10
c0016465:	e9 36 ff ff ff       	jmp    c00163a0 <cleanerTaskFunction(void*)+0x3c>
c001646a:	66 90                	xchg   ax,ax

c001646c <terminateTask(int)>:
c001646c:	83 ec 14             	sub    esp,0x14
c001646f:	fa                   	cli    
c0016470:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0016476:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c001647c:	83 c2 01             	add    edx,0x1
c001647f:	83 c1 01             	add    ecx,0x1
c0016482:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0016488:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c001648e:	fa                   	cli    
c001648f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016494:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016498:	83 c0 01             	add    eax,0x1
c001649b:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00164a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164a5:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00164a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ad:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00164b0:	50                   	push   eax
c00164b1:	68 6c a4 02 c0       	push   0xc002a46c
c00164b6:	e8 35 93 00 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164c0:	83 c4 10             	add    esp,0x10
c00164c3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00164ca:	a1 48 a4 02 c0       	mov    eax,ds:0xc002a448
c00164cf:	85 c0                	test   eax,eax
c00164d1:	74 65                	je     c0016538 <terminateTask(int)+0xcc>
c00164d3:	83 ec 0c             	sub    esp,0xc
c00164d6:	c6 05 4c a4 02 c0 01 	mov    BYTE PTR ds:0xc002a44c,0x1
c00164dd:	50                   	push   eax
c00164de:	e8 01 fb ff ff       	call   c0015fe4 <unblockTask(ThreadControlBlock*)>
c00164e3:	83 c4 10             	add    esp,0x10
c00164e6:	66 90                	xchg   ax,ax
c00164e8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00164ed:	83 e8 01             	sub    eax,0x1
c00164f0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00164f5:	75 01                	jne    c00164f8 <terminateTask(int)+0x8c>
c00164f7:	fb                   	sti    
c00164f8:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c00164fd:	83 e8 01             	sub    eax,0x1
c0016500:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0016505:	75 09                	jne    c0016510 <terminateTask(int)+0xa4>
c0016507:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c001650e:	75 3c                	jne    c001654c <terminateTask(int)+0xe0>
c0016510:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016515:	83 e8 01             	sub    eax,0x1
c0016518:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001651d:	75 01                	jne    c0016520 <terminateTask(int)+0xb4>
c001651f:	fb                   	sti    
c0016520:	fa                   	cli    
c0016521:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016526:	83 c0 01             	add    eax,0x1
c0016529:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001652e:	66 90                	xchg   ax,ax
c0016530:	e8 97 f5 ff ff       	call   c0015acc <schedule()>
c0016535:	eb d9                	jmp    c0016510 <terminateTask(int)+0xa4>
c0016537:	90                   	nop
c0016538:	83 ec 0c             	sub    esp,0xc
c001653b:	68 33 22 02 c0       	push   0xc0022233
c0016540:	e8 00 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016545:	83 c4 10             	add    esp,0x10
c0016548:	eb 9e                	jmp    c00164e8 <terminateTask(int)+0x7c>
c001654a:	66 90                	xchg   ax,ax
c001654c:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0016556:	eb d8                	jmp    c0016530 <terminateTask(int)+0xc4>

c0016558 <Thr::terminateFromIRQ(int)>:
c0016558:	83 ec 18             	sub    esp,0x18
c001655b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001655f:	50                   	push   eax
c0016560:	e8 07 ff ff ff       	call   c001646c <terminateTask(int)>
c0016565:	90                   	nop
c0016566:	66 90                	xchg   ax,ax

c0016568 <Semaphore::release()>:
c0016568:	83 ec 0c             	sub    esp,0xc
c001656b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001656f:	fa                   	cli    
c0016570:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016575:	83 c0 01             	add    eax,0x1
c0016578:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001657d:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0016582:	8d 48 01             	lea    ecx,[eax+0x1]
c0016585:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c001658b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001658e:	85 c9                	test   ecx,ecx
c0016590:	74 42                	je     c00165d4 <Semaphore::release()+0x6c>
c0016592:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016595:	83 ec 0c             	sub    esp,0xc
c0016598:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001659b:	51                   	push   ecx
c001659c:	e8 43 fa ff ff       	call   c0015fe4 <unblockTask(ThreadControlBlock*)>
c00165a1:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c00165a6:	83 c4 10             	add    esp,0x10
c00165a9:	83 e8 01             	sub    eax,0x1
c00165ac:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c00165b1:	85 c0                	test   eax,eax
c00165b3:	75 0b                	jne    c00165c0 <Semaphore::release()+0x58>
c00165b5:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c00165ba:	85 c0                	test   eax,eax
c00165bc:	75 22                	jne    c00165e0 <Semaphore::release()+0x78>
c00165be:	66 90                	xchg   ax,ax
c00165c0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00165c5:	83 e8 01             	sub    eax,0x1
c00165c8:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00165cd:	75 01                	jne    c00165d0 <Semaphore::release()+0x68>
c00165cf:	fb                   	sti    
c00165d0:	83 c4 0c             	add    esp,0xc
c00165d3:	c3                   	ret    
c00165d4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00165d7:	83 e9 01             	sub    ecx,0x1
c00165da:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00165dd:	eb cd                	jmp    c00165ac <Semaphore::release()+0x44>
c00165df:	90                   	nop
c00165e0:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c00165ea:	e8 dd f4 ff ff       	call   c0015acc <schedule()>
c00165ef:	eb cf                	jmp    c00165c0 <Semaphore::release()+0x58>
c00165f1:	8d 76 00             	lea    esi,[esi+0x0]

c00165f4 <__static_initialization_and_destruction_0(int, int)>:
c00165f4:	83 ec 0c             	sub    esp,0xc
c00165f7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00165fc:	0f 85 8e 00 00 00    	jne    c0016690 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016602:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001660a:	0f 85 80 00 00 00    	jne    c0016690 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016610:	83 ec 0c             	sub    esp,0xc
c0016613:	68 84 a4 02 c0       	push   0xc002a484
c0016618:	e8 87 94 00 00       	call   c001faa4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001661d:	83 c4 10             	add    esp,0x10
c0016620:	83 ec 04             	sub    esp,0x4
c0016623:	68 0c 2f 02 c0       	push   0xc0022f0c
c0016628:	68 84 a4 02 c0       	push   0xc002a484
c001662d:	68 54 fa 01 c0       	push   0xc001fa54
c0016632:	e8 91 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c0016637:	83 c4 10             	add    esp,0x10
c001663a:	83 ec 0c             	sub    esp,0xc
c001663d:	68 78 a4 02 c0       	push   0xc002a478
c0016642:	e8 5d 94 00 00       	call   c001faa4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016647:	83 c4 10             	add    esp,0x10
c001664a:	83 ec 04             	sub    esp,0x4
c001664d:	68 0c 2f 02 c0       	push   0xc0022f0c
c0016652:	68 78 a4 02 c0       	push   0xc002a478
c0016657:	68 54 fa 01 c0       	push   0xc001fa54
c001665c:	e8 67 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c0016661:	83 c4 10             	add    esp,0x10
c0016664:	83 ec 0c             	sub    esp,0xc
c0016667:	68 6c a4 02 c0       	push   0xc002a46c
c001666c:	e8 33 94 00 00       	call   c001faa4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016671:	83 c4 10             	add    esp,0x10
c0016674:	83 ec 04             	sub    esp,0x4
c0016677:	68 0c 2f 02 c0       	push   0xc0022f0c
c001667c:	68 6c a4 02 c0       	push   0xc002a46c
c0016681:	68 54 fa 01 c0       	push   0xc001fa54
c0016686:	e8 3d 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c001668b:	83 c4 10             	add    esp,0x10
c001668e:	66 90                	xchg   ax,ax
c0016690:	90                   	nop
c0016691:	83 c4 0c             	add    esp,0xc
c0016694:	c3                   	ret    
c0016695:	8d 76 00             	lea    esi,[esi+0x0]

c0016698 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016698:	83 ec 0c             	sub    esp,0xc
c001669b:	83 ec 08             	sub    esp,0x8
c001669e:	68 ff ff 00 00       	push   0xffff
c00166a3:	6a 01                	push   0x1
c00166a5:	e8 4a ff ff ff       	call   c00165f4 <__static_initialization_and_destruction_0(int, int)>
c00166aa:	83 c4 10             	add    esp,0x10
c00166ad:	83 c4 0c             	add    esp,0xc
c00166b0:	c3                   	ret    

c00166b1 <Vm::inbv(unsigned short)>:
c00166b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00166b5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00166ba:	75 06                	jne    c00166c2 <Vm::inbv(unsigned short)+0x11>
c00166bc:	a0 cc a4 02 c0       	mov    al,ds:0xc002a4cc
c00166c1:	c3                   	ret    
c00166c2:	ec                   	in     al,dx
c00166c3:	c3                   	ret    

c00166c4 <Vm::outbv(unsigned short, unsigned char)>:
c00166c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00166c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00166cc:	66 81 fa fe fe       	cmp    dx,0xfefe
c00166d1:	75 25                	jne    c00166f8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00166d3:	8b 0d cc a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a4cc
c00166d9:	8d 51 01             	lea    edx,[ecx+0x1]
c00166dc:	88 81 e0 a4 02 c0    	mov    BYTE PTR [ecx-0x3ffd5b20],al
c00166e2:	89 15 cc a4 02 c0    	mov    DWORD PTR ds:0xc002a4cc,edx
c00166e8:	83 fa 20             	cmp    edx,0x20
c00166eb:	75 0c                	jne    c00166f9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00166ed:	c7 05 cc a4 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x1f
c00166f7:	c3                   	ret    
c00166f8:	ee                   	out    dx,al
c00166f9:	c3                   	ret    

c00166fa <Vm::realToLinear(unsigned short, unsigned short)>:
c00166fa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00166ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016704:	c1 e0 04             	shl    eax,0x4
c0016707:	01 d0                	add    eax,edx
c0016709:	c3                   	ret    

c001670a <Vm::getSegment(unsigned int)>:
c001670a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001670e:	c1 e8 10             	shr    eax,0x10
c0016711:	c3                   	ret    

c0016712 <Vm::getOffset(unsigned int)>:
c0016712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016716:	c3                   	ret    

c0016717 <Vm::mainloop2()>:
c0016717:	83 ec 18             	sub    esp,0x18
c001671a:	fa                   	cli    
c001671b:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0016721:	6a 02                	push   0x2
c0016723:	c6 05 c5 a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4c5,0x1
c001672a:	e8 89 f5 ff ff       	call   c0015cb8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001672f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016734:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016738:	52                   	push   edx
c0016739:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001673d:	52                   	push   edx
c001673e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016742:	52                   	push   edx
c0016743:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016747:	50                   	push   eax
c0016748:	e8 c2 9a fe ff       	call   c000020f <goToVM86>
c001674d:	83 c4 2c             	add    esp,0x2c
c0016750:	c3                   	ret    

c0016751 <Vm::mainVm8086Loop(void*)>:
c0016751:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016756:	48                   	dec    eax
c0016757:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001675c:	75 01                	jne    c001675f <Vm::mainVm8086Loop(void*)+0xe>
c001675e:	fb                   	sti    
c001675f:	eb b6                	jmp    c0016717 <Vm::mainloop2()>

c0016761 <Vm::mainloop3(unsigned long)>:
c0016761:	83 ec 18             	sub    esp,0x18
c0016764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016768:	fa                   	cli    
c0016769:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001676f:	6a 02                	push   0x2
c0016771:	c6 05 c4 a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4c4,0x1
c0016778:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c001677d:	e8 36 f5 ff ff       	call   c0015cb8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016782:	83 c4 1c             	add    esp,0x1c
c0016785:	eb 90                	jmp    c0016717 <Vm::mainloop2()>

c0016787 <Vm::initialise8086()>:
c0016787:	83 ec 0c             	sub    esp,0xc
c001678a:	68 80 00 00 00       	push   0x80
c001678f:	6a 00                	push   0x0
c0016791:	68 51 67 01 c0       	push   0xc0016751
c0016796:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001679c:	e8 db f0 ff ff       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c00167a1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00167a8:	a3 c8 a4 02 c0       	mov    ds:0xc002a4c8,eax
c00167ad:	68 00 01 00 00       	push   0x100
c00167b2:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00167b7:	6a 00                	push   0x0
c00167b9:	6a 00                	push   0x0
c00167bb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167c1:	e8 54 37 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167c6:	83 c4 2c             	add    esp,0x2c
c00167c9:	c3                   	ret    

c00167ca <Vm::finish8086()>:
c00167ca:	53                   	push   ebx
c00167cb:	83 ec 08             	sub    esp,0x8
c00167ce:	fa                   	cli    
c00167cf:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00167d5:	80 3d c4 a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4c4,0x0
c00167dc:	75 15                	jne    c00167f3 <Vm::finish8086()+0x29>
c00167de:	e8 e9 f2 ff ff       	call   c0015acc <schedule()>
c00167e3:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00167e8:	48                   	dec    eax
c00167e9:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00167ee:	75 de                	jne    c00167ce <Vm::finish8086()+0x4>
c00167f0:	fb                   	sti    
c00167f1:	eb db                	jmp    c00167ce <Vm::finish8086()+0x4>
c00167f3:	83 ec 0c             	sub    esp,0xc
c00167f6:	8b 1d c0 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4c0
c00167fc:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c0016802:	c6 05 c4 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c4,0x0
c0016809:	e8 d6 f7 ff ff       	call   c0015fe4 <unblockTask(ThreadControlBlock*)>
c001680e:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016813:	83 c4 10             	add    esp,0x10
c0016816:	8d 50 ff             	lea    edx,[eax-0x1]
c0016819:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c001681f:	85 d2                	test   edx,edx
c0016821:	75 01                	jne    c0016824 <Vm::finish8086()+0x5a>
c0016823:	fb                   	sti    
c0016824:	89 d8                	mov    eax,ebx
c0016826:	83 c4 08             	add    esp,0x8
c0016829:	5b                   	pop    ebx
c001682a:	c3                   	ret    

c001682b <Vm::getOutput8086(unsigned char*)>:
c001682b:	57                   	push   edi
c001682c:	8b 0d cc a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a4cc
c0016832:	56                   	push   esi
c0016833:	be e0 a4 02 c0       	mov    esi,0xc002a4e0
c0016838:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001683c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001683e:	a1 cc a4 02 c0       	mov    eax,ds:0xc002a4cc
c0016843:	5e                   	pop    esi
c0016844:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c001684e:	5f                   	pop    edi
c001684f:	c3                   	ret    

c0016850 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016850:	55                   	push   ebp
c0016851:	57                   	push   edi
c0016852:	56                   	push   esi
c0016853:	53                   	push   ebx
c0016854:	83 ec 0c             	sub    esp,0xc
c0016857:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001685b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001685f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016863:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016867:	fa                   	cli    
c0016868:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001686e:	80 3d c5 a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4c5,0x0
c0016875:	75 15                	jne    c001688c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016877:	e8 50 f2 ff ff       	call   c0015acc <schedule()>
c001687c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016881:	48                   	dec    eax
c0016882:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016887:	75 de                	jne    c0016867 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016889:	fb                   	sti    
c001688a:	eb db                	jmp    c0016867 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001688c:	a1 c8 a4 02 c0       	mov    eax,ds:0xc002a4c8
c0016891:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c001689b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001689f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00168a3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00168a7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00168ab:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00168af:	0f b7 ff             	movzx  edi,di
c00168b2:	0f b7 f6             	movzx  esi,si
c00168b5:	50                   	push   eax
c00168b6:	6a 20                	push   0x20
c00168b8:	6a 00                	push   0x0
c00168ba:	68 e0 a4 02 c0       	push   0xc002a4e0
c00168bf:	e8 2c 9c fe ff       	call   c00004f0 <memset>
c00168c4:	5a                   	pop    edx
c00168c5:	59                   	pop    ecx
c00168c6:	57                   	push   edi
c00168c7:	56                   	push   esi
c00168c8:	e8 2d fe ff ff       	call   c00166fa <Vm::realToLinear(unsigned short, unsigned short)>
c00168cd:	83 c4 10             	add    esp,0x10
c00168d0:	89 c7                	mov    edi,eax
c00168d2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168d6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00168da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168dc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00168e1:	c6 05 c5 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c5,0x0
c00168e8:	48                   	dec    eax
c00168e9:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00168ee:	75 01                	jne    c00168f1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00168f0:	fb                   	sti    
c00168f1:	83 ec 0c             	sub    esp,0xc
c00168f4:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c00168fa:	e8 e5 f6 ff ff       	call   c0015fe4 <unblockTask(ThreadControlBlock*)>
c00168ff:	83 c4 1c             	add    esp,0x1c
c0016902:	b0 01                	mov    al,0x1
c0016904:	5b                   	pop    ebx
c0016905:	5e                   	pop    esi
c0016906:	5f                   	pop    edi
c0016907:	5d                   	pop    ebp
c0016908:	c3                   	ret    

c0016909 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016909:	55                   	push   ebp
c001690a:	57                   	push   edi
c001690b:	56                   	push   esi
c001690c:	53                   	push   ebx
c001690d:	83 ec 34             	sub    esp,0x34
c0016910:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016914:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016918:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001691c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016920:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016924:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016928:	68 64 23 02 c0       	push   0xc0022364
c001692d:	e8 13 40 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016932:	83 c4 10             	add    esp,0x10
c0016935:	fa                   	cli    
c0016936:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001693c:	8a 1d c5 a4 02 c0    	mov    bl,BYTE PTR ds:0xc002a4c5
c0016942:	84 db                	test   bl,bl
c0016944:	75 15                	jne    c001695b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016946:	e8 81 f1 ff ff       	call   c0015acc <schedule()>
c001694b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016950:	48                   	dec    eax
c0016951:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016956:	75 dd                	jne    c0016935 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016958:	fb                   	sti    
c0016959:	eb da                	jmp    c0016935 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001695b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001695f:	a1 c8 a4 02 c0       	mov    eax,ds:0xc002a4c8
c0016964:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c001696e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016972:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016976:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001697a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001697e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016982:	50                   	push   eax
c0016983:	6a 20                	push   0x20
c0016985:	6a 00                	push   0x0
c0016987:	68 e0 a4 02 c0       	push   0xc002a4e0
c001698c:	e8 5f 9b fe ff       	call   c00004f0 <memset>
c0016991:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016998:	e8 19 11 ff ff       	call   c0007ab6 <malloc>
c001699d:	83 c4 0c             	add    esp,0xc
c00169a0:	89 c5                	mov    ebp,eax
c00169a2:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c00169a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00169ac:	50                   	push   eax
c00169ad:	e8 48 4d ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c00169b2:	83 c4 10             	add    esp,0x10
c00169b5:	85 ed                	test   ebp,ebp
c00169b7:	75 0a                	jne    c00169c3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00169b9:	83 ec 0c             	sub    esp,0xc
c00169bc:	68 86 23 02 c0       	push   0xc0022386
c00169c1:	eb 2b                	jmp    c00169ee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c00169c3:	50                   	push   eax
c00169c4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00169c8:	50                   	push   eax
c00169c9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00169cd:	50                   	push   eax
c00169ce:	55                   	push   ebp
c00169cf:	e8 e4 50 ff ff       	call   c000bab8 <File::stat(unsigned long long*, bool*)>
c00169d4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00169d8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00169dc:	83 c4 10             	add    esp,0x10
c00169df:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00169e4:	74 27                	je     c0016a0d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c00169e6:	83 ec 0c             	sub    esp,0xc
c00169e9:	68 9a 23 02 c0       	push   0xc002239a
c00169ee:	e8 1a a8 ff ff       	call   c001120d <KePanic(char const*)>
c00169f3:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00169f8:	83 c4 10             	add    esp,0x10
c00169fb:	48                   	dec    eax
c00169fc:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016a01:	85 c0                	test   eax,eax
c0016a03:	75 01                	jne    c0016a06 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a05:	fb                   	sti    
c0016a06:	31 db                	xor    ebx,ebx
c0016a08:	e9 90 00 00 00       	jmp    c0016a9d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016a0d:	51                   	push   ecx
c0016a0e:	51                   	push   ecx
c0016a0f:	6a 01                	push   0x1
c0016a11:	55                   	push   ebp
c0016a12:	e8 9f 4d ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c0016a17:	83 c4 10             	add    esp,0x10
c0016a1a:	85 c0                	test   eax,eax
c0016a1c:	74 26                	je     c0016a44 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016a1e:	83 ec 0c             	sub    esp,0xc
c0016a21:	68 b3 23 02 c0       	push   0xc00223b3
c0016a26:	e8 e2 a7 ff ff       	call   c001120d <KePanic(char const*)>
c0016a2b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016a30:	83 c4 10             	add    esp,0x10
c0016a33:	48                   	dec    eax
c0016a34:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016a39:	85 c0                	test   eax,eax
c0016a3b:	75 c9                	jne    c0016a06 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a3d:	fb                   	sti    
c0016a3e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016a42:	eb 59                	jmp    c0016a9d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016a44:	0f b7 ff             	movzx  edi,di
c0016a47:	50                   	push   eax
c0016a48:	0f b7 f6             	movzx  esi,si
c0016a4b:	50                   	push   eax
c0016a4c:	57                   	push   edi
c0016a4d:	56                   	push   esi
c0016a4e:	e8 a7 fc ff ff       	call   c00166fa <Vm::realToLinear(unsigned short, unsigned short)>
c0016a53:	5a                   	pop    edx
c0016a54:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016a57:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016a5b:	51                   	push   ecx
c0016a5c:	50                   	push   eax
c0016a5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a65:	55                   	push   ebp
c0016a66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016a69:	83 c4 14             	add    esp,0x14
c0016a6c:	55                   	push   ebp
c0016a6d:	e8 a2 4d ff ff       	call   c000b814 <File::close()>
c0016a72:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016a77:	83 c4 10             	add    esp,0x10
c0016a7a:	48                   	dec    eax
c0016a7b:	c6 05 c5 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c5,0x0
c0016a82:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016a87:	85 c0                	test   eax,eax
c0016a89:	75 01                	jne    c0016a8c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016a8b:	fb                   	sti    
c0016a8c:	83 ec 0c             	sub    esp,0xc
c0016a8f:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c0016a95:	e8 4a f5 ff ff       	call   c0015fe4 <unblockTask(ThreadControlBlock*)>
c0016a9a:	83 c4 10             	add    esp,0x10
c0016a9d:	83 c4 2c             	add    esp,0x2c
c0016aa0:	88 d8                	mov    al,bl
c0016aa2:	5b                   	pop    ebx
c0016aa3:	5e                   	pop    esi
c0016aa4:	5f                   	pop    edi
c0016aa5:	5d                   	pop    ebp
c0016aa6:	c3                   	ret    

c0016aa7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016aa7:	57                   	push   edi
c0016aa8:	56                   	push   esi
c0016aa9:	53                   	push   ebx
c0016aaa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016aae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016ab6:	83 e8 06             	sub    eax,0x6
c0016ab9:	0f b7 c0             	movzx  eax,ax
c0016abc:	50                   	push   eax
c0016abd:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016ac2:	50                   	push   eax
c0016ac3:	e8 32 fc ff ff       	call   c00166fa <Vm::realToLinear(unsigned short, unsigned short)>
c0016ac8:	5a                   	pop    edx
c0016ac9:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016acc:	59                   	pop    ecx
c0016acd:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016ad0:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016ad3:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016ad9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016adc:	8d 56 02             	lea    edx,[esi+0x2]
c0016adf:	66 89 10             	mov    WORD PTR [eax],dx
c0016ae2:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016ae6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016aea:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016aed:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016af1:	0f b6 f1             	movzx  esi,cl
c0016af4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016af8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016afe:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016b02:	0f b6 d5             	movzx  edx,ch
c0016b05:	74 0a                	je     c0016b11 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016b07:	c1 e2 08             	shl    edx,0x8
c0016b0a:	09 f2                	or     edx,esi
c0016b0c:	80 ce 02             	or     dh,0x2
c0016b0f:	eb 08                	jmp    c0016b19 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016b11:	c1 e2 08             	shl    edx,0x8
c0016b14:	09 f2                	or     edx,esi
c0016b16:	80 e6 fd             	and    dh,0xfd
c0016b19:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016b1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b22:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016b26:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016b2e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016b31:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016b39:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016b3c:	5b                   	pop    ebx
c0016b3d:	5e                   	pop    esi
c0016b3e:	5f                   	pop    edi
c0016b3f:	c3                   	ret    

c0016b40 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016b40:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b45:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b4a:	c1 e0 04             	shl    eax,0x4
c0016b4d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016b50:	c3                   	ret    

c0016b51 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016b51:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b56:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b5b:	c1 e0 04             	shl    eax,0x4
c0016b5e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016b62:	c3                   	ret    

c0016b63 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016b63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b68:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b6d:	c1 e0 04             	shl    eax,0x4
c0016b70:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016b73:	c3                   	ret    

c0016b74 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016b74:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b79:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b7e:	c1 e0 04             	shl    eax,0x4
c0016b81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b85:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016b88:	c3                   	ret    

c0016b89 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016b89:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b8e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b93:	c1 e0 04             	shl    eax,0x4
c0016b96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b9a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016b9e:	c3                   	ret    

c0016b9f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016b9f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ba4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ba9:	c1 e0 04             	shl    eax,0x4
c0016bac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bb0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016bb3:	c3                   	ret    

c0016bb4 <Vm::faultHandler(regs*)>:
c0016bb4:	55                   	push   ebp
c0016bb5:	57                   	push   edi
c0016bb6:	56                   	push   esi
c0016bb7:	53                   	push   ebx
c0016bb8:	83 ec 2c             	sub    esp,0x2c
c0016bbb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016bbf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016bc2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016bc6:	0f b7 f8             	movzx  edi,ax
c0016bc9:	52                   	push   edx
c0016bca:	0f b7 c0             	movzx  eax,ax
c0016bcd:	50                   	push   eax
c0016bce:	e8 27 fb ff ff       	call   c00166fa <Vm::realToLinear(unsigned short, unsigned short)>
c0016bd3:	5a                   	pop    edx
c0016bd4:	59                   	pop    ecx
c0016bd5:	89 c1                	mov    ecx,eax
c0016bd7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016bda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bde:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016be3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016be7:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016bea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016bee:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016bf3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016bf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bfb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bff:	e8 f6 fa ff ff       	call   c00166fa <Vm::realToLinear(unsigned short, unsigned short)>
c0016c04:	5e                   	pop    esi
c0016c05:	be 06 00 00 00       	mov    esi,0x6
c0016c0a:	5d                   	pop    ebp
c0016c0b:	31 ed                	xor    ebp,ebp
c0016c0d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016c12:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016c15:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016c1b:	0f 84 74 02 00 00    	je     c0016e95 <Vm::faultHandler(regs*)+0x2e1>
c0016c21:	0f 87 94 00 00 00    	ja     c0016cbb <Vm::faultHandler(regs*)+0x107>
c0016c27:	83 fa 66             	cmp    edx,0x66
c0016c2a:	0f 84 e2 01 00 00    	je     c0016e12 <Vm::faultHandler(regs*)+0x25e>
c0016c30:	77 47                	ja     c0016c79 <Vm::faultHandler(regs*)+0xc5>
c0016c32:	83 fa 36             	cmp    edx,0x36
c0016c35:	0f 84 ca 01 00 00    	je     c0016e05 <Vm::faultHandler(regs*)+0x251>
c0016c3b:	77 1a                	ja     c0016c57 <Vm::faultHandler(regs*)+0xa3>
c0016c3d:	83 fa 26             	cmp    edx,0x26
c0016c40:	0f 84 98 01 00 00    	je     c0016dde <Vm::faultHandler(regs*)+0x22a>
c0016c46:	83 fa 2e             	cmp    edx,0x2e
c0016c49:	0f 85 21 06 00 00    	jne    c0017270 <Vm::faultHandler(regs*)+0x6bc>
c0016c4f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c52:	31 f6                	xor    esi,esi
c0016c54:	41                   	inc    ecx
c0016c55:	eb bb                	jmp    c0016c12 <Vm::faultHandler(regs*)+0x5e>
c0016c57:	83 fa 64             	cmp    edx,0x64
c0016c5a:	0f 84 8b 01 00 00    	je     c0016deb <Vm::faultHandler(regs*)+0x237>
c0016c60:	0f 87 92 01 00 00    	ja     c0016df8 <Vm::faultHandler(regs*)+0x244>
c0016c66:	83 fa 3e             	cmp    edx,0x3e
c0016c69:	0f 85 01 06 00 00    	jne    c0017270 <Vm::faultHandler(regs*)+0x6bc>
c0016c6f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c72:	be 01 00 00 00       	mov    esi,0x1
c0016c77:	eb db                	jmp    c0016c54 <Vm::faultHandler(regs*)+0xa0>
c0016c79:	83 fa 6d             	cmp    edx,0x6d
c0016c7c:	0f 84 34 03 00 00    	je     c0016fb6 <Vm::faultHandler(regs*)+0x402>
c0016c82:	77 17                	ja     c0016c9b <Vm::faultHandler(regs*)+0xe7>
c0016c84:	83 fa 67             	cmp    edx,0x67
c0016c87:	0f 84 92 01 00 00    	je     c0016e1f <Vm::faultHandler(regs*)+0x26b>
c0016c8d:	83 fa 6c             	cmp    edx,0x6c
c0016c90:	0f 84 b1 02 00 00    	je     c0016f47 <Vm::faultHandler(regs*)+0x393>
c0016c96:	e9 d5 05 00 00       	jmp    c0017270 <Vm::faultHandler(regs*)+0x6bc>
c0016c9b:	83 fa 6f             	cmp    edx,0x6f
c0016c9e:	0f 84 3d 04 00 00    	je     c00170e1 <Vm::faultHandler(regs*)+0x52d>
c0016ca4:	0f 82 9f 03 00 00    	jb     c0017049 <Vm::faultHandler(regs*)+0x495>
c0016caa:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016cb0:	0f 84 76 01 00 00    	je     c0016e2c <Vm::faultHandler(regs*)+0x278>
c0016cb6:	e9 b5 05 00 00       	jmp    c0017270 <Vm::faultHandler(regs*)+0x6bc>
c0016cbb:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016cc1:	0f 84 51 05 00 00    	je     c0017218 <Vm::faultHandler(regs*)+0x664>
c0016cc7:	0f 87 a9 00 00 00    	ja     c0016d76 <Vm::faultHandler(regs*)+0x1c2>
c0016ccd:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016cd3:	0f 84 d0 04 00 00    	je     c00171a9 <Vm::faultHandler(regs*)+0x5f5>
c0016cd9:	77 78                	ja     c0016d53 <Vm::faultHandler(regs*)+0x19f>
c0016cdb:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016ce1:	0f 84 0e 02 00 00    	je     c0016ef5 <Vm::faultHandler(regs*)+0x341>
c0016ce7:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016ced:	0f 85 7d 05 00 00    	jne    c0017270 <Vm::faultHandler(regs*)+0x6bc>
c0016cf3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016cf7:	89 d1                	mov    ecx,edx
c0016cf9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016cfc:	c1 e1 08             	shl    ecx,0x8
c0016cff:	09 ca                	or     edx,ecx
c0016d01:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016d04:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016d08:	89 d1                	mov    ecx,edx
c0016d0a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016d0e:	c1 e1 08             	shl    ecx,0x8
c0016d11:	09 ca                	or     edx,ecx
c0016d13:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016d16:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016d1a:	89 d1                	mov    ecx,edx
c0016d1c:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016d20:	c1 e1 08             	shl    ecx,0x8
c0016d23:	09 ca                	or     edx,ecx
c0016d25:	81 ca 00 02 02 00    	or     edx,0x20200
c0016d2b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016d2e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016d32:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d38:	d1 e8                	shr    eax,1
c0016d3a:	83 e0 01             	and    eax,0x1
c0016d3d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016d40:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d43:	83 c0 06             	add    eax,0x6
c0016d46:	25 ff ff 00 00       	and    eax,0xffff
c0016d4b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016d4e:	e9 19 05 00 00       	jmp    c001726c <Vm::faultHandler(regs*)+0x6b8>
c0016d53:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016d59:	0f 84 8f 04 00 00    	je     c00171ee <Vm::faultHandler(regs*)+0x63a>
c0016d5f:	0f 82 60 04 00 00    	jb     c00171c5 <Vm::faultHandler(regs*)+0x611>
c0016d65:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016d6b:	0f 84 94 04 00 00    	je     c0017205 <Vm::faultHandler(regs*)+0x651>
c0016d71:	e9 fa 04 00 00       	jmp    c0017270 <Vm::faultHandler(regs*)+0x6bc>
c0016d76:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016d7c:	0f 84 d7 04 00 00    	je     c0017259 <Vm::faultHandler(regs*)+0x6a5>
c0016d82:	77 2e                	ja     c0016db2 <Vm::faultHandler(regs*)+0x1fe>
c0016d84:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016d8a:	0f 84 a4 04 00 00    	je     c0017234 <Vm::faultHandler(regs*)+0x680>
c0016d90:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016d96:	0f 85 d4 04 00 00    	jne    c0017270 <Vm::faultHandler(regs*)+0x6bc>
c0016d9c:	50                   	push   eax
c0016d9d:	50                   	push   eax
c0016d9e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016da2:	50                   	push   eax
c0016da3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016da7:	50                   	push   eax
c0016da8:	e8 17 f9 ff ff       	call   c00166c4 <Vm::outbv(unsigned short, unsigned char)>
c0016dad:	e9 9f 04 00 00       	jmp    c0017251 <Vm::faultHandler(regs*)+0x69d>
c0016db2:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016db8:	0f 84 6d 01 00 00    	je     c0016f2b <Vm::faultHandler(regs*)+0x377>
c0016dbe:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016dc4:	0f 84 6f 01 00 00    	je     c0016f39 <Vm::faultHandler(regs*)+0x385>
c0016dca:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016dd0:	0f 85 9a 04 00 00    	jne    c0017270 <Vm::faultHandler(regs*)+0x6bc>
c0016dd6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dd9:	e9 76 fe ff ff       	jmp    c0016c54 <Vm::faultHandler(regs*)+0xa0>
c0016dde:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016de1:	be 02 00 00 00       	mov    esi,0x2
c0016de6:	e9 69 fe ff ff       	jmp    c0016c54 <Vm::faultHandler(regs*)+0xa0>
c0016deb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dee:	be 03 00 00 00       	mov    esi,0x3
c0016df3:	e9 5c fe ff ff       	jmp    c0016c54 <Vm::faultHandler(regs*)+0xa0>
c0016df8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dfb:	be 04 00 00 00       	mov    esi,0x4
c0016e00:	e9 4f fe ff ff       	jmp    c0016c54 <Vm::faultHandler(regs*)+0xa0>
c0016e05:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e08:	be 05 00 00 00       	mov    esi,0x5
c0016e0d:	e9 42 fe ff ff       	jmp    c0016c54 <Vm::faultHandler(regs*)+0xa0>
c0016e12:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e15:	bd 01 00 00 00       	mov    ebp,0x1
c0016e1a:	e9 35 fe ff ff       	jmp    c0016c54 <Vm::faultHandler(regs*)+0xa0>
c0016e1f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e22:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016e27:	e9 28 fe ff ff       	jmp    c0016c54 <Vm::faultHandler(regs*)+0xa0>
c0016e2c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e33:	83 e5 01             	and    ebp,0x1
c0016e36:	74 30                	je     c0016e68 <Vm::faultHandler(regs*)+0x2b4>
c0016e38:	83 e9 04             	sub    ecx,0x4
c0016e3b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e41:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e47:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e4a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e4d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e53:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e57:	0f 84 0c 04 00 00    	je     c0017269 <Vm::faultHandler(regs*)+0x6b5>
c0016e5d:	80 ce 02             	or     dh,0x2
c0016e60:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e63:	e9 01 04 00 00       	jmp    c0017269 <Vm::faultHandler(regs*)+0x6b5>
c0016e68:	83 e9 02             	sub    ecx,0x2
c0016e6b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e71:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e74:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e78:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e7e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e82:	74 05                	je     c0016e89 <Vm::faultHandler(regs*)+0x2d5>
c0016e84:	80 ce 02             	or     dh,0x2
c0016e87:	eb 03                	jmp    c0016e8c <Vm::faultHandler(regs*)+0x2d8>
c0016e89:	80 e6 fd             	and    dh,0xfd
c0016e8c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e90:	e9 d4 03 00 00       	jmp    c0017269 <Vm::faultHandler(regs*)+0x6b5>
c0016e95:	83 e5 01             	and    ebp,0x1
c0016e98:	74 2a                	je     c0016ec4 <Vm::faultHandler(regs*)+0x310>
c0016e9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e9c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016ea2:	81 ca 00 02 02 00    	or     edx,0x20200
c0016ea8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016eab:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ead:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016eb3:	c1 e8 09             	shr    eax,0x9
c0016eb6:	83 e0 01             	and    eax,0x1
c0016eb9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ebc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ebf:	83 c0 04             	add    eax,0x4
c0016ec2:	eb 24                	jmp    c0016ee8 <Vm::faultHandler(regs*)+0x334>
c0016ec4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016ec7:	81 ca 00 02 02 00    	or     edx,0x20200
c0016ecd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016ed0:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016ed3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ed9:	c1 e8 09             	shr    eax,0x9
c0016edc:	83 e0 01             	and    eax,0x1
c0016edf:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ee2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ee5:	83 c0 02             	add    eax,0x2
c0016ee8:	25 ff ff 00 00       	and    eax,0xffff
c0016eed:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016ef0:	e9 74 03 00 00       	jmp    c0017269 <Vm::faultHandler(regs*)+0x6b5>
c0016ef5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ef9:	3d ee 00 00 00       	cmp    eax,0xee
c0016efe:	75 10                	jne    c0016f10 <Vm::faultHandler(regs*)+0x35c>
c0016f00:	83 ec 0c             	sub    esp,0xc
c0016f03:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016f06:	e8 56 f8 ff ff       	call   c0016761 <Vm::mainloop3(unsigned long)>
c0016f0b:	e9 44 03 00 00       	jmp    c0017254 <Vm::faultHandler(regs*)+0x6a0>
c0016f10:	83 ec 0c             	sub    esp,0xc
c0016f13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016f17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f1b:	51                   	push   ecx
c0016f1c:	50                   	push   eax
c0016f1d:	53                   	push   ebx
c0016f1e:	e8 84 fb ff ff       	call   c0016aa7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016f23:	83 c4 20             	add    esp,0x20
c0016f26:	e9 41 03 00 00       	jmp    c001726c <Vm::faultHandler(regs*)+0x6b8>
c0016f2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f30:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016f34:	e9 30 03 00 00       	jmp    c0017269 <Vm::faultHandler(regs*)+0x6b5>
c0016f39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f3e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016f42:	e9 22 03 00 00       	jmp    c0017269 <Vm::faultHandler(regs*)+0x6b5>
c0016f47:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f4a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f4f:	74 2b                	je     c0016f7c <Vm::faultHandler(regs*)+0x3c8>
c0016f51:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016f58:	76 22                	jbe    c0016f7c <Vm::faultHandler(regs*)+0x3c8>
c0016f5a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016f5e:	50                   	push   eax
c0016f5f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016f63:	50                   	push   eax
c0016f64:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016f68:	50                   	push   eax
c0016f69:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016f6d:	50                   	push   eax
c0016f6e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f72:	50                   	push   eax
c0016f73:	6a 6c                	push   0x6c
c0016f75:	6a 6c                	push   0x6c
c0016f77:	e9 bd 01 00 00       	jmp    c0017139 <Vm::faultHandler(regs*)+0x585>
c0016f7c:	83 ec 0c             	sub    esp,0xc
c0016f7f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f83:	0f b7 f6             	movzx  esi,si
c0016f86:	50                   	push   eax
c0016f87:	e8 25 f7 ff ff       	call   c00166b1 <Vm::inbv(unsigned short)>
c0016f8c:	83 c4 0c             	add    esp,0xc
c0016f8f:	0f b6 c0             	movzx  eax,al
c0016f92:	50                   	push   eax
c0016f93:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016f97:	50                   	push   eax
c0016f98:	56                   	push   esi
c0016f99:	e8 d6 fb ff ff       	call   c0016b74 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016f9e:	83 c4 10             	add    esp,0x10
c0016fa1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fa4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016fa8:	74 03                	je     c0016fad <Vm::faultHandler(regs*)+0x3f9>
c0016faa:	48                   	dec    eax
c0016fab:	eb 01                	jmp    c0016fae <Vm::faultHandler(regs*)+0x3fa>
c0016fad:	40                   	inc    eax
c0016fae:	0f b7 c0             	movzx  eax,ax
c0016fb1:	e9 8b 00 00 00       	jmp    c0017041 <Vm::faultHandler(regs*)+0x48d>
c0016fb6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016fb9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fbc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016fc1:	74 29                	je     c0016fec <Vm::faultHandler(regs*)+0x438>
c0016fc3:	3d ff ff 00 00       	cmp    eax,0xffff
c0016fc8:	76 22                	jbe    c0016fec <Vm::faultHandler(regs*)+0x438>
c0016fca:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016fce:	50                   	push   eax
c0016fcf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016fd3:	50                   	push   eax
c0016fd4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016fd8:	50                   	push   eax
c0016fd9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016fdd:	50                   	push   eax
c0016fde:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fe2:	50                   	push   eax
c0016fe3:	6a 6d                	push   0x6d
c0016fe5:	6a 6d                	push   0x6d
c0016fe7:	e9 4d 01 00 00       	jmp    c0017139 <Vm::faultHandler(regs*)+0x585>
c0016fec:	0f b7 c8             	movzx  ecx,ax
c0016fef:	0f b7 f6             	movzx  esi,si
c0016ff2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016ff5:	83 e5 01             	and    ebp,0x1
c0016ff8:	74 20                	je     c001701a <Vm::faultHandler(regs*)+0x466>
c0016ffa:	ed                   	in     eax,dx
c0016ffb:	55                   	push   ebp
c0016ffc:	50                   	push   eax
c0016ffd:	51                   	push   ecx
c0016ffe:	56                   	push   esi
c0016fff:	e8 9b fb ff ff       	call   c0016b9f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017004:	83 c4 10             	add    esp,0x10
c0017007:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001700a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001700e:	74 05                	je     c0017015 <Vm::faultHandler(regs*)+0x461>
c0017010:	83 e8 04             	sub    eax,0x4
c0017013:	eb 27                	jmp    c001703c <Vm::faultHandler(regs*)+0x488>
c0017015:	83 c0 04             	add    eax,0x4
c0017018:	eb 22                	jmp    c001703c <Vm::faultHandler(regs*)+0x488>
c001701a:	66 ed                	in     ax,dx
c001701c:	0f b7 c0             	movzx  eax,ax
c001701f:	57                   	push   edi
c0017020:	50                   	push   eax
c0017021:	51                   	push   ecx
c0017022:	56                   	push   esi
c0017023:	e8 61 fb ff ff       	call   c0016b89 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017028:	83 c4 10             	add    esp,0x10
c001702b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001702e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017032:	74 05                	je     c0017039 <Vm::faultHandler(regs*)+0x485>
c0017034:	83 e8 02             	sub    eax,0x2
c0017037:	eb 03                	jmp    c001703c <Vm::faultHandler(regs*)+0x488>
c0017039:	83 c0 02             	add    eax,0x2
c001703c:	25 ff ff 00 00       	and    eax,0xffff
c0017041:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017044:	e9 20 02 00 00       	jmp    c0017269 <Vm::faultHandler(regs*)+0x6b5>
c0017049:	8d 46 ff             	lea    eax,[esi-0x1]
c001704c:	0f b6 f0             	movzx  esi,al
c001704f:	83 fe 05             	cmp    esi,0x5
c0017052:	77 23                	ja     c0017077 <Vm::faultHandler(regs*)+0x4c3>
c0017054:	ff 24 b5 28 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddbd8]
c001705b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017060:	eb 15                	jmp    c0017077 <Vm::faultHandler(regs*)+0x4c3>
c0017062:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017066:	eb 0f                	jmp    c0017077 <Vm::faultHandler(regs*)+0x4c3>
c0017068:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001706c:	eb 09                	jmp    c0017077 <Vm::faultHandler(regs*)+0x4c3>
c001706e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017072:	eb 03                	jmp    c0017077 <Vm::faultHandler(regs*)+0x4c3>
c0017074:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017077:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001707a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001707f:	74 29                	je     c00170aa <Vm::faultHandler(regs*)+0x4f6>
c0017081:	3d ff ff 00 00       	cmp    eax,0xffff
c0017086:	76 22                	jbe    c00170aa <Vm::faultHandler(regs*)+0x4f6>
c0017088:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001708c:	50                   	push   eax
c001708d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017091:	50                   	push   eax
c0017092:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017096:	50                   	push   eax
c0017097:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001709b:	50                   	push   eax
c001709c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170a0:	50                   	push   eax
c00170a1:	6a 6e                	push   0x6e
c00170a3:	6a 6e                	push   0x6e
c00170a5:	e9 8f 00 00 00       	jmp    c0017139 <Vm::faultHandler(regs*)+0x585>
c00170aa:	0f b7 c0             	movzx  eax,ax
c00170ad:	52                   	push   edx
c00170ae:	52                   	push   edx
c00170af:	50                   	push   eax
c00170b0:	57                   	push   edi
c00170b1:	e8 8a fa ff ff       	call   c0016b40 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00170b6:	59                   	pop    ecx
c00170b7:	0f b6 c0             	movzx  eax,al
c00170ba:	5e                   	pop    esi
c00170bb:	50                   	push   eax
c00170bc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00170c0:	50                   	push   eax
c00170c1:	e8 fe f5 ff ff       	call   c00166c4 <Vm::outbv(unsigned short, unsigned char)>
c00170c6:	83 c4 10             	add    esp,0x10
c00170c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00170cc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00170d0:	74 03                	je     c00170d5 <Vm::faultHandler(regs*)+0x521>
c00170d2:	48                   	dec    eax
c00170d3:	eb 01                	jmp    c00170d6 <Vm::faultHandler(regs*)+0x522>
c00170d5:	40                   	inc    eax
c00170d6:	0f b7 c0             	movzx  eax,ax
c00170d9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00170dc:	e9 88 01 00 00       	jmp    c0017269 <Vm::faultHandler(regs*)+0x6b5>
c00170e1:	8d 46 ff             	lea    eax,[esi-0x1]
c00170e4:	0f b6 f0             	movzx  esi,al
c00170e7:	83 fe 05             	cmp    esi,0x5
c00170ea:	77 1e                	ja     c001710a <Vm::faultHandler(regs*)+0x556>
c00170ec:	ff 24 b5 40 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddbc0]
c00170f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170f7:	eb 11                	jmp    c001710a <Vm::faultHandler(regs*)+0x556>
c00170f9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00170fc:	eb 0c                	jmp    c001710a <Vm::faultHandler(regs*)+0x556>
c00170fe:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017101:	eb 07                	jmp    c001710a <Vm::faultHandler(regs*)+0x556>
c0017103:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017106:	eb 02                	jmp    c001710a <Vm::faultHandler(regs*)+0x556>
c0017108:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001710a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001710d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017112:	74 37                	je     c001714b <Vm::faultHandler(regs*)+0x597>
c0017114:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001711a:	76 2f                	jbe    c001714b <Vm::faultHandler(regs*)+0x597>
c001711c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017120:	50                   	push   eax
c0017121:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017125:	50                   	push   eax
c0017126:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001712a:	50                   	push   eax
c001712b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001712f:	50                   	push   eax
c0017130:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017134:	50                   	push   eax
c0017135:	6a 6f                	push   0x6f
c0017137:	6a 6f                	push   0x6f
c0017139:	68 cc 23 02 c0       	push   0xc00223cc
c001713e:	e8 02 38 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017143:	83 c4 20             	add    esp,0x20
c0017146:	e9 83 01 00 00       	jmp    c00172ce <Vm::faultHandler(regs*)+0x71a>
c001714b:	0f b7 d7             	movzx  edx,di
c001714e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017151:	0f b7 c6             	movzx  eax,si
c0017154:	81 e1 00 04 00 00    	and    ecx,0x400
c001715a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001715d:	83 e5 01             	and    ebp,0x1
c0017160:	74 1d                	je     c001717f <Vm::faultHandler(regs*)+0x5cb>
c0017162:	55                   	push   ebp
c0017163:	55                   	push   ebp
c0017164:	50                   	push   eax
c0017165:	52                   	push   edx
c0017166:	e8 f8 f9 ff ff       	call   c0016b63 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001716b:	83 c4 10             	add    esp,0x10
c001716e:	89 fa                	mov    edx,edi
c0017170:	ef                   	out    dx,eax
c0017171:	85 c9                	test   ecx,ecx
c0017173:	74 05                	je     c001717a <Vm::faultHandler(regs*)+0x5c6>
c0017175:	83 ee 04             	sub    esi,0x4
c0017178:	eb 21                	jmp    c001719b <Vm::faultHandler(regs*)+0x5e7>
c001717a:	83 c6 04             	add    esi,0x4
c001717d:	eb 1c                	jmp    c001719b <Vm::faultHandler(regs*)+0x5e7>
c001717f:	55                   	push   ebp
c0017180:	55                   	push   ebp
c0017181:	50                   	push   eax
c0017182:	52                   	push   edx
c0017183:	e8 c9 f9 ff ff       	call   c0016b51 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017188:	83 c4 10             	add    esp,0x10
c001718b:	89 fa                	mov    edx,edi
c001718d:	66 ef                	out    dx,ax
c001718f:	85 c9                	test   ecx,ecx
c0017191:	74 05                	je     c0017198 <Vm::faultHandler(regs*)+0x5e4>
c0017193:	83 ee 02             	sub    esi,0x2
c0017196:	eb 03                	jmp    c001719b <Vm::faultHandler(regs*)+0x5e7>
c0017198:	83 c6 02             	add    esi,0x2
c001719b:	81 e6 ff ff 00 00    	and    esi,0xffff
c00171a1:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00171a4:	e9 c0 00 00 00       	jmp    c0017269 <Vm::faultHandler(regs*)+0x6b5>
c00171a9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00171b0:	83 ec 0c             	sub    esp,0xc
c00171b3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171b7:	50                   	push   eax
c00171b8:	e8 f4 f4 ff ff       	call   c00166b1 <Vm::inbv(unsigned short)>
c00171bd:	0f b6 c0             	movzx  eax,al
c00171c0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00171c3:	eb 3a                	jmp    c00171ff <Vm::faultHandler(regs*)+0x64b>
c00171c5:	83 e5 01             	and    ebp,0x1
c00171c8:	74 07                	je     c00171d1 <Vm::faultHandler(regs*)+0x61d>
c00171ca:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171ce:	ed                   	in     eax,dx
c00171cf:	eb 14                	jmp    c00171e5 <Vm::faultHandler(regs*)+0x631>
c00171d1:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00171d4:	66 31 f6             	xor    si,si
c00171d7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00171da:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171de:	66 ed                	in     ax,dx
c00171e0:	0f b7 c0             	movzx  eax,ax
c00171e3:	09 f0                	or     eax,esi
c00171e5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00171e8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00171ec:	eb 7e                	jmp    c001726c <Vm::faultHandler(regs*)+0x6b8>
c00171ee:	52                   	push   edx
c00171ef:	52                   	push   edx
c00171f0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00171f4:	50                   	push   eax
c00171f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171f9:	50                   	push   eax
c00171fa:	e8 c5 f4 ff ff       	call   c00166c4 <Vm::outbv(unsigned short, unsigned char)>
c00171ff:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017203:	eb 4f                	jmp    c0017254 <Vm::faultHandler(regs*)+0x6a0>
c0017205:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017208:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001720c:	83 e5 01             	and    ebp,0x1
c001720f:	74 03                	je     c0017214 <Vm::faultHandler(regs*)+0x660>
c0017211:	ef                   	out    dx,eax
c0017212:	eb d4                	jmp    c00171e8 <Vm::faultHandler(regs*)+0x634>
c0017214:	66 ef                	out    dx,ax
c0017216:	eb d0                	jmp    c00171e8 <Vm::faultHandler(regs*)+0x634>
c0017218:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001721f:	83 ec 0c             	sub    esp,0xc
c0017222:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017226:	50                   	push   eax
c0017227:	e8 85 f4 ff ff       	call   c00166b1 <Vm::inbv(unsigned short)>
c001722c:	0f b6 c0             	movzx  eax,al
c001722f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017232:	eb 1d                	jmp    c0017251 <Vm::faultHandler(regs*)+0x69d>
c0017234:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017237:	83 e5 01             	and    ebp,0x1
c001723a:	74 03                	je     c001723f <Vm::faultHandler(regs*)+0x68b>
c001723c:	ed                   	in     eax,dx
c001723d:	eb 0d                	jmp    c001724c <Vm::faultHandler(regs*)+0x698>
c001723f:	66 ed                	in     ax,dx
c0017241:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017244:	0f b7 c0             	movzx  eax,ax
c0017247:	66 31 d2             	xor    dx,dx
c001724a:	09 d0                	or     eax,edx
c001724c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001724f:	eb 18                	jmp    c0017269 <Vm::faultHandler(regs*)+0x6b5>
c0017251:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017254:	83 c4 10             	add    esp,0x10
c0017257:	eb 13                	jmp    c001726c <Vm::faultHandler(regs*)+0x6b8>
c0017259:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001725c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001725f:	83 e5 01             	and    ebp,0x1
c0017262:	74 03                	je     c0017267 <Vm::faultHandler(regs*)+0x6b3>
c0017264:	ef                   	out    dx,eax
c0017265:	eb 02                	jmp    c0017269 <Vm::faultHandler(regs*)+0x6b5>
c0017267:	66 ef                	out    dx,ax
c0017269:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001726c:	b0 01                	mov    al,0x1
c001726e:	eb 60                	jmp    c00172d0 <Vm::faultHandler(regs*)+0x71c>
c0017270:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017274:	50                   	push   eax
c0017275:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017279:	50                   	push   eax
c001727a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001727e:	50                   	push   eax
c001727f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017283:	50                   	push   eax
c0017284:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017288:	50                   	push   eax
c0017289:	52                   	push   edx
c001728a:	52                   	push   edx
c001728b:	68 f9 23 02 c0       	push   0xc00223f9
c0017290:	e8 b0 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017295:	83 c4 20             	add    esp,0x20
c0017298:	83 ec 0c             	sub    esp,0xc
c001729b:	6a 60                	push   0x60
c001729d:	e8 0f f4 ff ff       	call   c00166b1 <Vm::inbv(unsigned short)>
c00172a2:	83 c4 10             	add    esp,0x10
c00172a5:	0f b6 d0             	movzx  edx,al
c00172a8:	83 fa 1c             	cmp    edx,0x1c
c00172ab:	74 05                	je     c00172b2 <Vm::faultHandler(regs*)+0x6fe>
c00172ad:	83 fa 5a             	cmp    edx,0x5a
c00172b0:	75 e6                	jne    c0017298 <Vm::faultHandler(regs*)+0x6e4>
c00172b2:	0f b6 c0             	movzx  eax,al
c00172b5:	83 f8 1c             	cmp    eax,0x1c
c00172b8:	74 05                	je     c00172bf <Vm::faultHandler(regs*)+0x70b>
c00172ba:	83 f8 5a             	cmp    eax,0x5a
c00172bd:	75 0f                	jne    c00172ce <Vm::faultHandler(regs*)+0x71a>
c00172bf:	83 ec 0c             	sub    esp,0xc
c00172c2:	6a 60                	push   0x60
c00172c4:	e8 e8 f3 ff ff       	call   c00166b1 <Vm::inbv(unsigned short)>
c00172c9:	83 c4 10             	add    esp,0x10
c00172cc:	eb e4                	jmp    c00172b2 <Vm::faultHandler(regs*)+0x6fe>
c00172ce:	31 c0                	xor    eax,eax
c00172d0:	83 c4 2c             	add    esp,0x2c
c00172d3:	5b                   	pop    ebx
c00172d4:	5e                   	pop    esi
c00172d5:	5f                   	pop    edi
c00172d6:	5d                   	pop    ebp
c00172d7:	c3                   	ret    

c00172d8 <noCopro(unsigned long)>:
c00172d8:	c3                   	ret    

c00172d9 <nmiHandler(regs*, void*)>:
c00172d9:	83 ec 0c             	sub    esp,0xc
c00172dc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00172e1:	83 ec 0c             	sub    esp,0xc
c00172e4:	50                   	push   eax
c00172e5:	e8 cc ff fe ff       	call   c00072b6 <Computer::handleNMI()>
c00172ea:	83 c4 10             	add    esp,0x10
c00172ed:	90                   	nop
c00172ee:	83 c4 0c             	add    esp,0xc
c00172f1:	c3                   	ret    

c00172f2 <doubleFault(regs*, void*)>:
c00172f2:	55                   	push   ebp
c00172f3:	89 e5                	mov    ebp,esp
c00172f5:	83 ec 08             	sub    esp,0x8
c00172f8:	83 ec 0c             	sub    esp,0xc
c00172fb:	68 58 24 02 c0       	push   0xc0022458
c0017300:	e8 08 9f ff ff       	call   c001120d <KePanic(char const*)>
c0017305:	83 c4 10             	add    esp,0x10
c0017308:	90                   	nop
c0017309:	c9                   	leave  
c001730a:	c3                   	ret    

c001730b <displayDebugInfo(regs*)>:
c001730b:	83 ec 1c             	sub    esp,0x1c
c001730e:	0f 20 c0             	mov    eax,cr0
c0017311:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017315:	0f 20 d0             	mov    eax,cr2
c0017318:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001731c:	0f 20 d8             	mov    eax,cr3
c001731f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017323:	0f 20 e0             	mov    eax,cr4
c0017326:	89 04 24             	mov    DWORD PTR [esp],eax
c0017329:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001732d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017330:	83 ec 08             	sub    esp,0x8
c0017333:	50                   	push   eax
c0017334:	68 74 24 02 c0       	push   0xc0022474
c0017339:	e8 07 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001733e:	83 c4 10             	add    esp,0x10
c0017341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017345:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017348:	83 ec 08             	sub    esp,0x8
c001734b:	50                   	push   eax
c001734c:	68 65 24 02 c0       	push   0xc0022465
c0017351:	e8 ef 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017356:	83 c4 10             	add    esp,0x10
c0017359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001735d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017360:	83 ec 08             	sub    esp,0x8
c0017363:	50                   	push   eax
c0017364:	68 70 24 02 c0       	push   0xc0022470
c0017369:	e8 d7 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001736e:	83 c4 10             	add    esp,0x10
c0017371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017375:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017378:	83 ec 08             	sub    esp,0x8
c001737b:	50                   	push   eax
c001737c:	68 7f 24 02 c0       	push   0xc002247f
c0017381:	e8 bf 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017386:	83 c4 10             	add    esp,0x10
c0017389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001738d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017390:	83 ec 08             	sub    esp,0x8
c0017393:	50                   	push   eax
c0017394:	68 8a 24 02 c0       	push   0xc002248a
c0017399:	e8 a7 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001739e:	83 c4 10             	add    esp,0x10
c00173a1:	83 ec 08             	sub    esp,0x8
c00173a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00173a8:	68 95 24 02 c0       	push   0xc0022495
c00173ad:	e8 93 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173b2:	83 c4 10             	add    esp,0x10
c00173b5:	83 ec 08             	sub    esp,0x8
c00173b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00173bc:	68 a0 24 02 c0       	push   0xc00224a0
c00173c1:	e8 7f 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173c6:	83 c4 10             	add    esp,0x10
c00173c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173cd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00173d0:	c1 e0 05             	shl    eax,0x5
c00173d3:	8d 90 20 34 02 c0    	lea    edx,[eax-0x3ffdcbe0]
c00173d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173dd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00173e0:	83 ec 04             	sub    esp,0x4
c00173e3:	52                   	push   edx
c00173e4:	50                   	push   eax
c00173e5:	68 ab 24 02 c0       	push   0xc00224ab
c00173ea:	e8 56 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173ef:	83 c4 10             	add    esp,0x10
c00173f2:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173fd:	83 ec 0c             	sub    esp,0xc
c0017400:	50                   	push   eax
c0017401:	e8 53 13 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0017406:	83 c4 10             	add    esp,0x10
c0017409:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001740e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017414:	83 ec 08             	sub    esp,0x8
c0017417:	68 ba 24 02 c0       	push   0xc00224ba
c001741c:	50                   	push   eax
c001741d:	e8 84 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017422:	83 c4 10             	add    esp,0x10
c0017425:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001742a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017430:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017434:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017437:	83 ec 08             	sub    esp,0x8
c001743a:	52                   	push   edx
c001743b:	50                   	push   eax
c001743c:	e8 1f 16 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017441:	83 c4 10             	add    esp,0x10
c0017444:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017449:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001744f:	83 ec 08             	sub    esp,0x8
c0017452:	68 c8 24 02 c0       	push   0xc00224c8
c0017457:	50                   	push   eax
c0017458:	e8 49 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001745d:	83 c4 10             	add    esp,0x10
c0017460:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017465:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001746b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017470:	8b 12                	mov    edx,DWORD PTR [edx]
c0017472:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017475:	83 c2 0c             	add    edx,0xc
c0017478:	83 ec 08             	sub    esp,0x8
c001747b:	52                   	push   edx
c001747c:	50                   	push   eax
c001747d:	e8 24 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017482:	83 c4 10             	add    esp,0x10
c0017485:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001748a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017490:	83 ec 08             	sub    esp,0x8
c0017493:	68 d1 24 02 c0       	push   0xc00224d1
c0017498:	50                   	push   eax
c0017499:	e8 08 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001749e:	83 c4 10             	add    esp,0x10
c00174a1:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174a6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174b0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00174b3:	83 ec 08             	sub    esp,0x8
c00174b6:	52                   	push   edx
c00174b7:	50                   	push   eax
c00174b8:	e8 a3 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00174bd:	83 c4 10             	add    esp,0x10
c00174c0:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174cb:	83 ec 08             	sub    esp,0x8
c00174ce:	68 d9 24 02 c0       	push   0xc00224d9
c00174d3:	50                   	push   eax
c00174d4:	e8 cd 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00174d9:	83 c4 10             	add    esp,0x10
c00174dc:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174eb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00174ee:	83 ec 08             	sub    esp,0x8
c00174f1:	52                   	push   edx
c00174f2:	50                   	push   eax
c00174f3:	e8 68 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00174f8:	83 c4 10             	add    esp,0x10
c00174fb:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017500:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017506:	83 ec 08             	sub    esp,0x8
c0017509:	68 e1 24 02 c0       	push   0xc00224e1
c001750e:	50                   	push   eax
c001750f:	e8 92 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017514:	83 c4 10             	add    esp,0x10
c0017517:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001751c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017522:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017526:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017529:	83 ec 08             	sub    esp,0x8
c001752c:	52                   	push   edx
c001752d:	50                   	push   eax
c001752e:	e8 2d 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017533:	83 c4 10             	add    esp,0x10
c0017536:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001753b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017541:	83 ec 08             	sub    esp,0x8
c0017544:	68 e9 24 02 c0       	push   0xc00224e9
c0017549:	50                   	push   eax
c001754a:	e8 57 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001754f:	83 c4 10             	add    esp,0x10
c0017552:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017557:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001755d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017561:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017564:	83 ec 08             	sub    esp,0x8
c0017567:	52                   	push   edx
c0017568:	50                   	push   eax
c0017569:	e8 f2 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001756e:	83 c4 10             	add    esp,0x10
c0017571:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017576:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001757c:	83 ec 08             	sub    esp,0x8
c001757f:	68 f1 24 02 c0       	push   0xc00224f1
c0017584:	50                   	push   eax
c0017585:	e8 1c 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001758a:	83 c4 10             	add    esp,0x10
c001758d:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017592:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017598:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001759c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001759f:	83 ec 08             	sub    esp,0x8
c00175a2:	52                   	push   edx
c00175a3:	50                   	push   eax
c00175a4:	e8 b7 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175a9:	83 c4 10             	add    esp,0x10
c00175ac:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175b7:	83 ec 08             	sub    esp,0x8
c00175ba:	68 f9 24 02 c0       	push   0xc00224f9
c00175bf:	50                   	push   eax
c00175c0:	e8 e1 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175c5:	83 c4 10             	add    esp,0x10
c00175c8:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175cd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175d7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175da:	83 ec 08             	sub    esp,0x8
c00175dd:	52                   	push   edx
c00175de:	50                   	push   eax
c00175df:	e8 7c 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175e4:	83 c4 10             	add    esp,0x10
c00175e7:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175f2:	83 ec 08             	sub    esp,0x8
c00175f5:	68 01 25 02 c0       	push   0xc0022501
c00175fa:	50                   	push   eax
c00175fb:	e8 a6 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017600:	83 c4 10             	add    esp,0x10
c0017603:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017608:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001760e:	83 ec 08             	sub    esp,0x8
c0017611:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017615:	50                   	push   eax
c0017616:	e8 45 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001761b:	83 c4 10             	add    esp,0x10
c001761e:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017623:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017629:	83 ec 08             	sub    esp,0x8
c001762c:	68 0a 25 02 c0       	push   0xc002250a
c0017631:	50                   	push   eax
c0017632:	e8 6f 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017637:	83 c4 10             	add    esp,0x10
c001763a:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001763f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017645:	83 ec 08             	sub    esp,0x8
c0017648:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001764c:	50                   	push   eax
c001764d:	e8 0e 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017652:	83 c4 10             	add    esp,0x10
c0017655:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001765a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017660:	83 ec 08             	sub    esp,0x8
c0017663:	68 12 25 02 c0       	push   0xc0022512
c0017668:	50                   	push   eax
c0017669:	e8 38 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001766e:	83 c4 10             	add    esp,0x10
c0017671:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017676:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001767c:	83 ec 08             	sub    esp,0x8
c001767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017683:	50                   	push   eax
c0017684:	e8 d7 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017689:	83 c4 10             	add    esp,0x10
c001768c:	fa                   	cli    
c001768d:	f4                   	hlt    
c001768e:	eb fe                	jmp    c001768e <displayDebugInfo(regs*)+0x383>

c0017690 <HalSystemIdle()>:
c0017690:	56                   	push   esi
c0017691:	53                   	push   ebx
c0017692:	83 ec 14             	sub    esp,0x14
c0017695:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001769a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00176a0:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00176a6:	83 e0 04             	and    eax,0x4
c00176a9:	0f b6 c0             	movzx  eax,al
c00176ac:	85 c0                	test   eax,eax
c00176ae:	0f 95 c0             	setne  al
c00176b1:	0f b6 c0             	movzx  eax,al
c00176b4:	85 c0                	test   eax,eax
c00176b6:	74 4c                	je     c0017704 <HalSystemIdle()+0x74>
c00176b8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176bd:	83 ec 08             	sub    esp,0x8
c00176c0:	68 e1 00 00 00       	push   0xe1
c00176c5:	50                   	push   eax
c00176c6:	e8 f5 f9 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00176cb:	83 c4 10             	add    esp,0x10
c00176ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00176d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176df:	83 e2 02             	and    edx,0x2
c00176e2:	89 d3                	mov    ebx,edx
c00176e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176e8:	83 e2 00             	and    edx,0x0
c00176eb:	89 d6                	mov    esi,edx
c00176ed:	56                   	push   esi
c00176ee:	53                   	push   ebx
c00176ef:	68 e1 00 00 00       	push   0xe1
c00176f4:	50                   	push   eax
c00176f5:	e8 f2 f9 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c00176fa:	83 c4 10             	add    esp,0x10
c00176fd:	e8 92 8a fe ff       	call   c0000194 <doTPAUSE>
c0017702:	eb 01                	jmp    c0017705 <HalSystemIdle()+0x75>
c0017704:	f4                   	hlt    
c0017705:	90                   	nop
c0017706:	83 c4 14             	add    esp,0x14
c0017709:	5b                   	pop    ebx
c001770a:	5e                   	pop    esi
c001770b:	c3                   	ret    

c001770c <displayProgramFault(char const*)>:
c001770c:	83 ec 0c             	sub    esp,0xc
c001770f:	83 ec 0c             	sub    esp,0xc
c0017712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017716:	e8 2a 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001771b:	83 c4 10             	add    esp,0x10
c001771e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017723:	8b 00                	mov    eax,DWORD PTR [eax]
c0017725:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017728:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001772e:	85 c0                	test   eax,eax
c0017730:	74 21                	je     c0017753 <displayProgramFault(char const*)+0x47>
c0017732:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017737:	8b 00                	mov    eax,DWORD PTR [eax]
c0017739:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001773c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017742:	6a 04                	push   0x4
c0017744:	6a 0f                	push   0xf
c0017746:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001774a:	50                   	push   eax
c001774b:	e8 c8 13 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017750:	83 c4 10             	add    esp,0x10
c0017753:	90                   	nop
c0017754:	83 c4 0c             	add    esp,0xc
c0017757:	c3                   	ret    

c0017758 <gpFault(regs*, void*)>:
c0017758:	83 ec 1c             	sub    esp,0x1c
c001775b:	c7 05 14 a5 02 c0 b4 6b 01 c0 	mov    DWORD PTR ds:0xc002a514,0xc0016bb4
c0017765:	a1 14 a5 02 c0       	mov    eax,ds:0xc002a514
c001776a:	85 c0                	test   eax,eax
c001776c:	74 1e                	je     c001778c <gpFault(regs*, void*)+0x34>
c001776e:	a1 14 a5 02 c0       	mov    eax,ds:0xc002a514
c0017773:	83 ec 0c             	sub    esp,0xc
c0017776:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001777a:	ff d0                	call   eax
c001777c:	83 c4 10             	add    esp,0x10
c001777f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017783:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017788:	85 c0                	test   eax,eax
c001778a:	75 2e                	jne    c00177ba <gpFault(regs*, void*)+0x62>
c001778c:	83 ec 0c             	sub    esp,0xc
c001778f:	68 1a 25 02 c0       	push   0xc002251a
c0017794:	e8 73 ff ff ff       	call   c001770c <displayProgramFault(char const*)>
c0017799:	83 c4 10             	add    esp,0x10
c001779c:	83 ec 0c             	sub    esp,0xc
c001779f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177a3:	e8 63 fb ff ff       	call   c001730b <displayDebugInfo(regs*)>
c00177a8:	83 c4 10             	add    esp,0x10
c00177ab:	83 ec 0c             	sub    esp,0xc
c00177ae:	6a 00                	push   0x0
c00177b0:	e8 a3 ed ff ff       	call   c0016558 <Thr::terminateFromIRQ(int)>
c00177b5:	83 c4 10             	add    esp,0x10
c00177b8:	eb 01                	jmp    c00177bb <gpFault(regs*, void*)+0x63>
c00177ba:	90                   	nop
c00177bb:	83 c4 1c             	add    esp,0x1c
c00177be:	c3                   	ret    

c00177bf <pgFault(regs*, void*)>:
c00177bf:	83 ec 1c             	sub    esp,0x1c
c00177c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177c6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00177c9:	0f 20 d0             	mov    eax,cr2
c00177cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177d4:	83 ec 04             	sub    esp,0x4
c00177d7:	52                   	push   edx
c00177d8:	50                   	push   eax
c00177d9:	68 f8 25 02 c0       	push   0xc00225f8
c00177de:	e8 62 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00177e3:	83 c4 10             	add    esp,0x10
c00177e6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00177eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00177ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177f0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00177f6:	0f 20 d2             	mov    edx,cr2
c00177f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00177fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017801:	83 ec 08             	sub    esp,0x8
c0017804:	52                   	push   edx
c0017805:	50                   	push   eax
c0017806:	e8 85 2b ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c001780b:	83 c4 10             	add    esp,0x10
c001780e:	0f b6 c0             	movzx  eax,al
c0017811:	85 c0                	test   eax,eax
c0017813:	75 2e                	jne    c0017843 <pgFault(regs*, void*)+0x84>
c0017815:	83 ec 0c             	sub    esp,0xc
c0017818:	68 33 25 02 c0       	push   0xc0022533
c001781d:	e8 ea fe ff ff       	call   c001770c <displayProgramFault(char const*)>
c0017822:	83 c4 10             	add    esp,0x10
c0017825:	83 ec 0c             	sub    esp,0xc
c0017828:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001782c:	e8 da fa ff ff       	call   c001730b <displayDebugInfo(regs*)>
c0017831:	83 c4 10             	add    esp,0x10
c0017834:	83 ec 0c             	sub    esp,0xc
c0017837:	6a 00                	push   0x0
c0017839:	e8 1a ed ff ff       	call   c0016558 <Thr::terminateFromIRQ(int)>
c001783e:	83 c4 10             	add    esp,0x10
c0017841:	eb 01                	jmp    c0017844 <pgFault(regs*, void*)+0x85>
c0017843:	90                   	nop
c0017844:	83 c4 1c             	add    esp,0x1c
c0017847:	c3                   	ret    

c0017848 <otherISRHandler(regs*, void*)>:
c0017848:	83 ec 0c             	sub    esp,0xc
c001784b:	83 ec 0c             	sub    esp,0xc
c001784e:	68 20 26 02 c0       	push   0xc0022620
c0017853:	e8 b4 fe ff ff       	call   c001770c <displayProgramFault(char const*)>
c0017858:	83 c4 10             	add    esp,0x10
c001785b:	83 ec 0c             	sub    esp,0xc
c001785e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017862:	e8 a4 fa ff ff       	call   c001730b <displayDebugInfo(regs*)>
c0017867:	83 c4 10             	add    esp,0x10
c001786a:	83 ec 0c             	sub    esp,0xc
c001786d:	6a 00                	push   0x0
c001786f:	e8 e4 ec ff ff       	call   c0016558 <Thr::terminateFromIRQ(int)>
c0017874:	83 c4 10             	add    esp,0x10
c0017877:	90                   	nop
c0017878:	83 c4 0c             	add    esp,0xc
c001787b:	c3                   	ret    

c001787c <opcodeFault(regs*, void*)>:
c001787c:	55                   	push   ebp
c001787d:	89 e5                	mov    ebp,esp
c001787f:	83 ec 08             	sub    esp,0x8
c0017882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017885:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017888:	83 ec 08             	sub    esp,0x8
c001788b:	50                   	push   eax
c001788c:	68 3e 25 02 c0       	push   0xc002253e
c0017891:	e8 af 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017896:	83 c4 10             	add    esp,0x10
c0017899:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001789e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00178a4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00178aa:	0f b6 c0             	movzx  eax,al
c00178ad:	85 c0                	test   eax,eax
c00178af:	74 21                	je     c00178d2 <opcodeFault(regs*, void*)+0x56>
c00178b1:	83 ec 0c             	sub    esp,0xc
c00178b4:	68 48 26 02 c0       	push   0xc0022648
c00178b9:	e8 87 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178be:	83 c4 10             	add    esp,0x10
c00178c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178c7:	8d 50 19             	lea    edx,[eax+0x19]
c00178ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178cd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00178d0:	eb 2b                	jmp    c00178fd <opcodeFault(regs*, void*)+0x81>
c00178d2:	83 ec 0c             	sub    esp,0xc
c00178d5:	68 4c 25 02 c0       	push   0xc002254c
c00178da:	e8 2d fe ff ff       	call   c001770c <displayProgramFault(char const*)>
c00178df:	83 c4 10             	add    esp,0x10
c00178e2:	83 ec 0c             	sub    esp,0xc
c00178e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00178e8:	e8 1e fa ff ff       	call   c001730b <displayDebugInfo(regs*)>
c00178ed:	83 c4 10             	add    esp,0x10
c00178f0:	83 ec 0c             	sub    esp,0xc
c00178f3:	6a 00                	push   0x0
c00178f5:	e8 5e ec ff ff       	call   c0016558 <Thr::terminateFromIRQ(int)>
c00178fa:	83 c4 10             	add    esp,0x10
c00178fd:	c9                   	leave  
c00178fe:	c3                   	ret    

c00178ff <i386SaveCoprocessor(void*)>:
c00178ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017903:	83 c0 3f             	add    eax,0x3f
c0017906:	83 e0 c0             	and    eax,0xffffffc0
c0017909:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001790d:	ff 25 10 a5 02 c0    	jmp    DWORD PTR ds:0xc002a510

c0017913 <i386LoadCoprocessor(void*)>:
c0017913:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017917:	83 c0 3f             	add    eax,0x3f
c001791a:	83 e0 c0             	and    eax,0xffffffc0
c001791d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017921:	ff 25 0c a5 02 c0    	jmp    DWORD PTR ds:0xc002a50c

c0017927 <x87EmulHandler(regs*, void*)>:
c0017927:	53                   	push   ebx
c0017928:	83 ec 08             	sub    esp,0x8
c001792b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017930:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017934:	74 10                	je     c0017946 <x87EmulHandler(regs*, void*)+0x1f>
c0017936:	83 ec 0c             	sub    esp,0xc
c0017939:	68 59 25 02 c0       	push   0xc0022559
c001793e:	e8 ca 98 ff ff       	call   c001120d <KePanic(char const*)>
c0017943:	83 c4 10             	add    esp,0x10
c0017946:	0f 20 c0             	mov    eax,cr0
c0017949:	a8 08                	test   al,0x8
c001794b:	74 59                	je     c00179a6 <x87EmulHandler(regs*, void*)+0x7f>
c001794d:	0f 06                	clts   
c001794f:	a1 08 a5 02 c0       	mov    eax,ds:0xc002a508
c0017954:	85 c0                	test   eax,eax
c0017956:	74 0e                	je     c0017966 <x87EmulHandler(regs*, void*)+0x3f>
c0017958:	83 ec 0c             	sub    esp,0xc
c001795b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001795e:	e8 9c ff ff ff       	call   c00178ff <i386SaveCoprocessor(void*)>
c0017963:	83 c4 10             	add    esp,0x10
c0017966:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001796c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017970:	75 12                	jne    c0017984 <x87EmulHandler(regs*, void*)+0x5d>
c0017972:	83 ec 0c             	sub    esp,0xc
c0017975:	68 40 02 00 00       	push   0x240
c001797a:	e8 37 01 ff ff       	call   c0007ab6 <malloc>
c001797f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017982:	eb 10                	jmp    c0017994 <x87EmulHandler(regs*, void*)+0x6d>
c0017984:	83 ec 0c             	sub    esp,0xc
c0017987:	a1 08 a5 02 c0       	mov    eax,ds:0xc002a508
c001798c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001798f:	e8 7f ff ff ff       	call   c0017913 <i386LoadCoprocessor(void*)>
c0017994:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017999:	83 c4 10             	add    esp,0x10
c001799c:	a3 08 a5 02 c0       	mov    ds:0xc002a508,eax
c00179a1:	83 c4 08             	add    esp,0x8
c00179a4:	5b                   	pop    ebx
c00179a5:	c3                   	ret    
c00179a6:	83 ec 0c             	sub    esp,0xc
c00179a9:	68 6d 25 02 c0       	push   0xc002256d
c00179ae:	e8 92 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179b3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00179bb:	83 c4 18             	add    esp,0x18
c00179be:	5b                   	pop    ebx
c00179bf:	e9 94 eb ff ff       	jmp    c0016558 <Thr::terminateFromIRQ(int)>

c00179c4 <HalInitialiseCoprocessor()>:
c00179c4:	83 ec 10             	sub    esp,0x10
c00179c7:	c7 05 08 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a508,0x0
c00179d1:	6a 00                	push   0x0
c00179d3:	68 27 79 01 c0       	push   0xc0017927
c00179d8:	6a 07                	push   0x7
c00179da:	e8 57 51 ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00179df:	e8 4c 70 00 00       	call   c001ea30 <avxDetect>
c00179e4:	83 c4 10             	add    esp,0x10
c00179e7:	85 c0                	test   eax,eax
c00179e9:	74 1c                	je     c0017a07 <HalInitialiseCoprocessor()+0x43>
c00179eb:	c7 05 10 a5 02 c0 5a ea 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001ea5a
c00179f5:	c7 05 0c a5 02 c0 6b ea 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001ea6b
c00179ff:	83 c4 0c             	add    esp,0xc
c0017a02:	e9 75 70 00 00       	jmp    c001ea7c <avxInit>
c0017a07:	e8 b4 73 00 00       	call   c001edc0 <absolutelyNoChanceInHell>
c0017a0c:	85 c0                	test   eax,eax
c0017a0e:	74 1c                	je     c0017a2c <HalInitialiseCoprocessor()+0x68>
c0017a10:	c7 05 10 a5 02 c0 d8 ed 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001edd8
c0017a1a:	c7 05 0c a5 02 c0 e0 ed 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001ede0
c0017a24:	83 c4 0c             	add    esp,0xc
c0017a27:	e9 bc 73 00 00       	jmp    c001ede8 <sseInit>
c0017a2c:	e8 d5 73 00 00       	call   c001ee06 <x87Detect>
c0017a31:	85 c0                	test   eax,eax
c0017a33:	74 1c                	je     c0017a51 <HalInitialiseCoprocessor()+0x8d>
c0017a35:	c7 05 10 a5 02 c0 21 ee 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001ee21
c0017a3f:	c7 05 0c a5 02 c0 28 ee 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001ee28
c0017a49:	83 c4 0c             	add    esp,0xc
c0017a4c:	e9 de 73 00 00       	jmp    c001ee2f <x87Init>
c0017a51:	c7 05 10 a5 02 c0 d8 72 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc00172d8
c0017a5b:	c7 05 0c a5 02 c0 d8 72 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc00172d8
c0017a65:	0f 20 c0             	mov    eax,cr0
c0017a68:	83 c8 04             	or     eax,0x4
c0017a6b:	0f 22 c0             	mov    cr0,eax
c0017a6e:	83 c4 0c             	add    esp,0xc
c0017a71:	c3                   	ret    

c0017a72 <HalPanic(char const*)>:
c0017a72:	53                   	push   ebx
c0017a73:	83 ec 10             	sub    esp,0x10
c0017a76:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017a7a:	fa                   	cli    
c0017a7b:	53                   	push   ebx
c0017a7c:	68 83 25 02 c0       	push   0xc0022583
c0017a81:	e8 bf 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a86:	a1 04 a5 02 c0       	mov    eax,ds:0xc002a504
c0017a8b:	83 c4 10             	add    esp,0x10
c0017a8e:	85 c0                	test   eax,eax
c0017a90:	74 09                	je     c0017a9b <HalPanic(char const*)+0x29>
c0017a92:	83 ec 0c             	sub    esp,0xc
c0017a95:	53                   	push   ebx
c0017a96:	ff d0                	call   eax
c0017a98:	83 c4 10             	add    esp,0x10
c0017a9b:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017aa0:	85 c0                	test   eax,eax
c0017aa2:	0f 84 dc 00 00 00    	je     c0017b84 <HalPanic(char const*)+0x112>
c0017aa8:	52                   	push   edx
c0017aa9:	6a 01                	push   0x1
c0017aab:	6a 0f                	push   0xf
c0017aad:	50                   	push   eax
c0017aae:	e8 01 0b ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ab3:	59                   	pop    ecx
c0017ab4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aba:	e8 e5 0c ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017abf:	58                   	pop    eax
c0017ac0:	5a                   	pop    edx
c0017ac1:	68 84 08 02 c0       	push   0xc0020884
c0017ac6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017acc:	e8 1b 0b ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017ad1:	83 c4 0c             	add    esp,0xc
c0017ad4:	6a 01                	push   0x1
c0017ad6:	6a 0f                	push   0xf
c0017ad8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ade:	e8 d1 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ae3:	59                   	pop    ecx
c0017ae4:	58                   	pop    eax
c0017ae5:	68 9c 25 02 c0       	push   0xc002259c
c0017aea:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017af0:	e8 b1 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017af5:	83 c4 0c             	add    esp,0xc
c0017af8:	6a 0f                	push   0xf
c0017afa:	6a 01                	push   0x1
c0017afc:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b02:	e8 ad 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b07:	58                   	pop    eax
c0017b08:	5a                   	pop    edx
c0017b09:	68 a5 25 02 c0       	push   0xc00225a5
c0017b0e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b14:	e8 8d 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b19:	83 c4 0c             	add    esp,0xc
c0017b1c:	6a 01                	push   0x1
c0017b1e:	6a 0f                	push   0xf
c0017b20:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b26:	e8 89 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b2b:	59                   	pop    ecx
c0017b2c:	58                   	pop    eax
c0017b2d:	68 e9 25 02 c0       	push   0xc00225e9
c0017b32:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b38:	e8 69 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b3d:	58                   	pop    eax
c0017b3e:	5a                   	pop    edx
c0017b3f:	68 b2 25 02 c0       	push   0xc00225b2
c0017b44:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b4a:	e8 57 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b4f:	59                   	pop    ecx
c0017b50:	58                   	pop    eax
c0017b51:	68 ec 25 02 c0       	push   0xc00225ec
c0017b56:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b5c:	e8 45 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b61:	58                   	pop    eax
c0017b62:	5a                   	pop    edx
c0017b63:	53                   	push   ebx
c0017b64:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b6a:	e8 37 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b6f:	59                   	pop    ecx
c0017b70:	5b                   	pop    ebx
c0017b71:	68 e9 25 02 c0       	push   0xc00225e9
c0017b76:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b7c:	e8 25 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b81:	83 c4 10             	add    esp,0x10
c0017b84:	eb fe                	jmp    c0017b84 <HalPanic(char const*)+0x112>

c0017b86 <HalQueryPerformanceCounter()>:
c0017b86:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b8b:	31 d2                	xor    edx,edx
c0017b8d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017b93:	31 c0                	xor    eax,eax
c0017b95:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017b9c:	74 02                	je     c0017ba0 <HalQueryPerformanceCounter()+0x1a>
c0017b9e:	0f 31                	rdtsc  
c0017ba0:	c3                   	ret    

c0017ba1 <HalInitialise()>:
c0017ba1:	53                   	push   ebx
c0017ba2:	83 ec 08             	sub    esp,0x8
c0017ba5:	e8 bc 51 ff ff       	call   c000cd66 <setupINTS()>
c0017baa:	80 3d 40 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029840,0x0
c0017bb1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017bb6:	75 0f                	jne    c0017bc7 <HalInitialise()+0x26>
c0017bb8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017bbe:	83 e2 fe             	and    edx,0xfffffffe
c0017bc1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017bc7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017bcd:	c6 05 00 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a500,0x0
c0017bd4:	83 e2 fe             	and    edx,0xfffffffe
c0017bd7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017bdd:	e8 9e 02 00 00       	call   c0017e80 <picOpen()>
c0017be2:	80 3d 00 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a500,0x0
c0017be9:	74 0a                	je     c0017bf5 <HalInitialise()+0x54>
c0017beb:	e8 e0 01 00 00       	call   c0017dd0 <picDisable()>
c0017bf0:	e8 ad 67 00 00       	call   c001e3a2 <apicOpen()>
c0017bf5:	bb 0f 00 00 00       	mov    ebx,0xf
c0017bfa:	50                   	push   eax
c0017bfb:	6a 00                	push   0x0
c0017bfd:	68 48 78 01 c0       	push   0xc0017848
c0017c02:	6a 00                	push   0x0
c0017c04:	e8 2d 4f ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c09:	83 c4 0c             	add    esp,0xc
c0017c0c:	6a 00                	push   0x0
c0017c0e:	68 48 78 01 c0       	push   0xc0017848
c0017c13:	6a 01                	push   0x1
c0017c15:	e8 1c 4f ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c1a:	83 c4 0c             	add    esp,0xc
c0017c1d:	6a 00                	push   0x0
c0017c1f:	68 d9 72 01 c0       	push   0xc00172d9
c0017c24:	6a 02                	push   0x2
c0017c26:	e8 0b 4f ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c2b:	83 c4 0c             	add    esp,0xc
c0017c2e:	6a 00                	push   0x0
c0017c30:	68 48 78 01 c0       	push   0xc0017848
c0017c35:	6a 03                	push   0x3
c0017c37:	e8 fa 4e ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c3c:	83 c4 0c             	add    esp,0xc
c0017c3f:	6a 00                	push   0x0
c0017c41:	68 48 78 01 c0       	push   0xc0017848
c0017c46:	6a 04                	push   0x4
c0017c48:	e8 e9 4e ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c4d:	83 c4 0c             	add    esp,0xc
c0017c50:	6a 00                	push   0x0
c0017c52:	68 48 78 01 c0       	push   0xc0017848
c0017c57:	6a 05                	push   0x5
c0017c59:	e8 d8 4e ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c5e:	83 c4 0c             	add    esp,0xc
c0017c61:	6a 00                	push   0x0
c0017c63:	68 7c 78 01 c0       	push   0xc001787c
c0017c68:	6a 06                	push   0x6
c0017c6a:	e8 c7 4e ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c6f:	83 c4 0c             	add    esp,0xc
c0017c72:	6a 00                	push   0x0
c0017c74:	68 f2 72 01 c0       	push   0xc00172f2
c0017c79:	6a 08                	push   0x8
c0017c7b:	e8 b6 4e ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c80:	83 c4 0c             	add    esp,0xc
c0017c83:	6a 00                	push   0x0
c0017c85:	68 48 78 01 c0       	push   0xc0017848
c0017c8a:	6a 09                	push   0x9
c0017c8c:	e8 a5 4e ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c91:	83 c4 0c             	add    esp,0xc
c0017c94:	6a 00                	push   0x0
c0017c96:	68 48 78 01 c0       	push   0xc0017848
c0017c9b:	6a 0a                	push   0xa
c0017c9d:	e8 94 4e ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ca2:	83 c4 0c             	add    esp,0xc
c0017ca5:	6a 00                	push   0x0
c0017ca7:	68 48 78 01 c0       	push   0xc0017848
c0017cac:	6a 0b                	push   0xb
c0017cae:	e8 83 4e ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cb3:	83 c4 0c             	add    esp,0xc
c0017cb6:	6a 00                	push   0x0
c0017cb8:	68 58 77 01 c0       	push   0xc0017758
c0017cbd:	6a 0d                	push   0xd
c0017cbf:	e8 72 4e ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cc4:	83 c4 0c             	add    esp,0xc
c0017cc7:	6a 00                	push   0x0
c0017cc9:	68 bf 77 01 c0       	push   0xc00177bf
c0017cce:	6a 0e                	push   0xe
c0017cd0:	e8 61 4e ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cd5:	83 c4 10             	add    esp,0x10
c0017cd8:	50                   	push   eax
c0017cd9:	6a 00                	push   0x0
c0017cdb:	68 48 78 01 c0       	push   0xc0017848
c0017ce0:	53                   	push   ebx
c0017ce1:	43                   	inc    ebx
c0017ce2:	e8 4f 4e ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ce7:	83 c4 10             	add    esp,0x10
c0017cea:	83 fb 1e             	cmp    ebx,0x1e
c0017ced:	75 e9                	jne    c0017cd8 <HalInitialise()+0x137>
c0017cef:	50                   	push   eax
c0017cf0:	6a 00                	push   0x0
c0017cf2:	68 f5 24 01 c0       	push   0xc00124f5
c0017cf7:	6a 60                	push   0x60
c0017cf9:	e8 38 4e ff ff       	call   c000cb36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cfe:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d03:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017d0d:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017d14:	e8 9d fd fe ff       	call   c0007ab6 <malloc>
c0017d19:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d1c:	89 c3                	mov    ebx,eax
c0017d1e:	e8 3b 09 00 00       	call   c001865e <RTC::RTC()>
c0017d23:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017d2d:	5a                   	pop    edx
c0017d2e:	59                   	pop    ecx
c0017d2f:	53                   	push   ebx
c0017d30:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d36:	e8 c7 48 ff ff       	call   c000c602 <Device::addChild(Device*)>
c0017d3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d3d:	6a 00                	push   0x0
c0017d3f:	6a 00                	push   0x0
c0017d41:	6a 00                	push   0x0
c0017d43:	53                   	push   ebx
c0017d44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d47:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d4c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017d52:	83 c4 28             	add    esp,0x28
c0017d55:	5b                   	pop    ebx
c0017d56:	c3                   	ret    

c0017d57 <HalMakeBeep(int)>:
c0017d57:	53                   	push   ebx
c0017d58:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017d5c:	85 db                	test   ebx,ebx
c0017d5e:	75 07                	jne    c0017d67 <HalMakeBeep(int)+0x10>
c0017d60:	e4 61                	in     al,0x61
c0017d62:	83 e0 fc             	and    eax,0xfffffffc
c0017d65:	eb 26                	jmp    c0017d8d <HalMakeBeep(int)+0x36>
c0017d67:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017d6c:	99                   	cdq    
c0017d6d:	f7 fb                	idiv   ebx
c0017d6f:	89 c1                	mov    ecx,eax
c0017d71:	b0 b6                	mov    al,0xb6
c0017d73:	e6 43                	out    0x43,al
c0017d75:	88 c8                	mov    al,cl
c0017d77:	e6 42                	out    0x42,al
c0017d79:	89 c8                	mov    eax,ecx
c0017d7b:	c1 e8 08             	shr    eax,0x8
c0017d7e:	e6 42                	out    0x42,al
c0017d80:	e4 61                	in     al,0x61
c0017d82:	89 c2                	mov    edx,eax
c0017d84:	83 ca 03             	or     edx,0x3
c0017d87:	38 d0                	cmp    al,dl
c0017d89:	74 04                	je     c0017d8f <HalMakeBeep(int)+0x38>
c0017d8b:	88 d0                	mov    al,dl
c0017d8d:	e6 61                	out    0x61,al
c0017d8f:	5b                   	pop    ebx
c0017d90:	c3                   	ret    

c0017d91 <HalGetRand()>:
c0017d91:	31 c0                	xor    eax,eax
c0017d93:	c3                   	ret    

c0017d94 <HalEndOfInterrupt(int)>:
c0017d94:	80 3d 00 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a500,0x0
c0017d9b:	74 23                	je     c0017dc0 <HalEndOfInterrupt(int)+0x2c>
c0017d9d:	83 ec 14             	sub    esp,0x14
c0017da0:	6a 1b                	push   0x1b
c0017da2:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017da8:	e8 13 f3 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017dad:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017db2:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017dbc:	83 c4 1c             	add    esp,0x1c
c0017dbf:	c3                   	ret    
c0017dc0:	e9 3f 02 00 00       	jmp    c0018004 <picEOI(int)>

c0017dc5 <HalRestart()>:
c0017dc5:	c3                   	ret    

c0017dc6 <HalShutdown()>:
c0017dc6:	c3                   	ret    

c0017dc7 <HalSleep()>:
c0017dc7:	c3                   	ret    

c0017dc8 <picIoWait()>:
c0017dc8:	eb 00                	jmp    c0017dca <picIoWait()+0x2>
c0017dca:	eb 00                	jmp    c0017dcc <picIoWait()+0x4>
c0017dcc:	90                   	nop
c0017dcd:	c3                   	ret    
c0017dce:	66 90                	xchg   ax,ax

c0017dd0 <picDisable()>:
c0017dd0:	83 ec 10             	sub    esp,0x10
c0017dd3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017dda:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017ddf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017de3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017de8:	ee                   	out    dx,al
c0017de9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017df0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017df5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017df9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017dfe:	ee                   	out    dx,al
c0017dff:	90                   	nop
c0017e00:	83 c4 10             	add    esp,0x10
c0017e03:	c3                   	ret    

c0017e04 <picGetIRQReg(int)>:
c0017e04:	83 ec 10             	sub    esp,0x10
c0017e07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e0b:	0f b6 c0             	movzx  eax,al
c0017e0e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017e15:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017e19:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017e1d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017e22:	ee                   	out    dx,al
c0017e23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e27:	0f b6 c0             	movzx  eax,al
c0017e2a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017e31:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017e35:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017e39:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017e3e:	ee                   	out    dx,al
c0017e3f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017e46:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017e4b:	89 c2                	mov    edx,eax
c0017e4d:	ec                   	in     al,dx
c0017e4e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017e52:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e56:	0f b6 c0             	movzx  eax,al
c0017e59:	c1 e0 08             	shl    eax,0x8
c0017e5c:	89 c1                	mov    ecx,eax
c0017e5e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017e65:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017e6a:	89 c2                	mov    edx,eax
c0017e6c:	ec                   	in     al,dx
c0017e6d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017e71:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017e75:	0f b6 c0             	movzx  eax,al
c0017e78:	09 c8                	or     eax,ecx
c0017e7a:	83 c4 10             	add    esp,0x10
c0017e7d:	c3                   	ret    
c0017e7e:	66 90                	xchg   ax,ax

c0017e80 <picOpen()>:
c0017e80:	83 ec 50             	sub    esp,0x50
c0017e83:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017e8a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017e8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e97:	ee                   	out    dx,al
c0017e98:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017e9f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017ea4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017ea8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017eac:	ee                   	out    dx,al
c0017ead:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017eb5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017ebd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017ec4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ec8:	89 c2                	mov    edx,eax
c0017eca:	ec                   	in     al,dx
c0017ecb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017ecf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017ed3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017ed7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ee2:	89 c2                	mov    edx,eax
c0017ee4:	ec                   	in     al,dx
c0017ee5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017ee9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017eed:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017ef1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017ef8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017efd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017f01:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f05:	ee                   	out    dx,al
c0017f06:	e8 bd fe ff ff       	call   c0017dc8 <picIoWait()>
c0017f0b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017f12:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017f17:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017f1b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f1f:	ee                   	out    dx,al
c0017f20:	e8 a3 fe ff ff       	call   c0017dc8 <picIoWait()>
c0017f25:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f29:	0f b6 c0             	movzx  eax,al
c0017f2c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017f33:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017f37:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017f3b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f3f:	ee                   	out    dx,al
c0017f40:	e8 83 fe ff ff       	call   c0017dc8 <picIoWait()>
c0017f45:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017f49:	0f b6 c0             	movzx  eax,al
c0017f4c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017f53:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017f57:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017f5b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f5f:	ee                   	out    dx,al
c0017f60:	e8 63 fe ff ff       	call   c0017dc8 <picIoWait()>
c0017f65:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017f6c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017f71:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017f75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f79:	ee                   	out    dx,al
c0017f7a:	e8 49 fe ff ff       	call   c0017dc8 <picIoWait()>
c0017f7f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017f86:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017f8b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017f8f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017f93:	ee                   	out    dx,al
c0017f94:	e8 2f fe ff ff       	call   c0017dc8 <picIoWait()>
c0017f99:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017fa0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017fa5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017fa9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017fad:	ee                   	out    dx,al
c0017fae:	e8 15 fe ff ff       	call   c0017dc8 <picIoWait()>
c0017fb3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017fba:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017fbf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017fc3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017fc7:	ee                   	out    dx,al
c0017fc8:	e8 fb fd ff ff       	call   c0017dc8 <picIoWait()>
c0017fcd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017fd2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017fd9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017fdd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017fe1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017fe5:	ee                   	out    dx,al
c0017fe6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017feb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017ff2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017ff6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017ffa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017ffe:	ee                   	out    dx,al
c0017fff:	90                   	nop
c0018000:	83 c4 50             	add    esp,0x50
c0018003:	c3                   	ret    

c0018004 <picEOI(int)>:
c0018004:	83 ec 10             	sub    esp,0x10
c0018007:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001800c:	75 1e                	jne    c001802c <picEOI(int)+0x28>
c001800e:	6a 0b                	push   0xb
c0018010:	e8 ef fd ff ff       	call   c0017e04 <picGetIRQReg(int)>
c0018015:	83 c4 04             	add    esp,0x4
c0018018:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001801d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018022:	25 80 00 00 00       	and    eax,0x80
c0018027:	74 73                	je     c001809c <picEOI(int)+0x98>
c0018029:	8d 76 00             	lea    esi,[esi+0x0]
c001802c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018031:	75 31                	jne    c0018064 <picEOI(int)+0x60>
c0018033:	6a 0b                	push   0xb
c0018035:	e8 ca fd ff ff       	call   c0017e04 <picGetIRQReg(int)>
c001803a:	83 c4 04             	add    esp,0x4
c001803d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018042:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018046:	98                   	cwde   
c0018047:	85 c0                	test   eax,eax
c0018049:	78 19                	js     c0018064 <picEOI(int)+0x60>
c001804b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018052:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018057:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001805b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018060:	ee                   	out    dx,al
c0018061:	eb 3d                	jmp    c00180a0 <picEOI(int)+0x9c>
c0018063:	90                   	nop
c0018064:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018069:	7e 19                	jle    c0018084 <picEOI(int)+0x80>
c001806b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018072:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018077:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001807b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018080:	ee                   	out    dx,al
c0018081:	8d 76 00             	lea    esi,[esi+0x0]
c0018084:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001808b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018090:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018094:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018099:	ee                   	out    dx,al
c001809a:	eb 04                	jmp    c00180a0 <picEOI(int)+0x9c>
c001809c:	90                   	nop
c001809d:	8d 76 00             	lea    esi,[esi+0x0]
c00180a0:	83 c4 10             	add    esp,0x10
c00180a3:	c3                   	ret    

c00180a4 <RTC::open(int, int, void*)>:
c00180a4:	31 c0                	xor    eax,eax
c00180a6:	c3                   	ret    
c00180a7:	90                   	nop

c00180a8 <RTC::close(int, int, void*)>:
c00180a8:	31 c0                	xor    eax,eax
c00180aa:	c3                   	ret    
c00180ab:	90                   	nop

c00180ac <RTC::timeInSecondsUTC()>:
c00180ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180b0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00180b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00180bc:	c3                   	ret    
c00180bd:	90                   	nop

c00180be <RTC::timeInDatetimeUTC()>:
c00180be:	53                   	push   ebx
c00180bf:	83 ec 14             	sub    esp,0x14
c00180c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00180c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00180cc:	50                   	push   eax
c00180cd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00180d0:	83 c4 0c             	add    esp,0xc
c00180d3:	52                   	push   edx
c00180d4:	50                   	push   eax
c00180d5:	53                   	push   ebx
c00180d6:	e8 9b 42 ff ff       	call   c000c376 <secondsToDatetime(unsigned long long)>
c00180db:	89 d8                	mov    eax,ebx
c00180dd:	83 c4 14             	add    esp,0x14
c00180e0:	5b                   	pop    ebx
c00180e1:	c2 04 00             	ret    0x4

c00180e4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00180e4:	56                   	push   esi
c00180e5:	53                   	push   ebx
c00180e6:	83 ec 14             	sub    esp,0x14
c00180e9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00180ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180ef:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00180f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00180f6:	52                   	push   edx
c00180f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180ff:	50                   	push   eax
c0018100:	e8 71 42 ff ff       	call   c000c376 <secondsToDatetime(unsigned long long)>
c0018105:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018109:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001810d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018111:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018115:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018119:	89 f0                	mov    eax,esi
c001811b:	83 c4 20             	add    esp,0x20
c001811e:	5b                   	pop    ebx
c001811f:	5e                   	pop    esi
c0018120:	ff e0                	jmp    eax

c0018122 <RTC::~RTC()>:
c0018122:	83 ec 0c             	sub    esp,0xc
c0018125:	ba 88 26 02 c0       	mov    edx,0xc0022688
c001812a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001812e:	89 10                	mov    DWORD PTR [eax],edx
c0018130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018134:	83 ec 0c             	sub    esp,0xc
c0018137:	50                   	push   eax
c0018138:	e8 cb 3f ff ff       	call   c000c108 <Clock::~Clock()>
c001813d:	83 c4 10             	add    esp,0x10
c0018140:	90                   	nop
c0018141:	83 c4 0c             	add    esp,0xc
c0018144:	c3                   	ret    
c0018145:	90                   	nop

c0018146 <RTC::~RTC()>:
c0018146:	83 ec 0c             	sub    esp,0xc
c0018149:	83 ec 0c             	sub    esp,0xc
c001814c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018150:	e8 cd ff ff ff       	call   c0018122 <RTC::~RTC()>
c0018155:	83 c4 10             	add    esp,0x10
c0018158:	83 ec 08             	sub    esp,0x8
c001815b:	68 60 01 00 00       	push   0x160
c0018160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018164:	e8 af 26 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018169:	83 c4 10             	add    esp,0x10
c001816c:	83 c4 0c             	add    esp,0xc
c001816f:	c3                   	ret    

c0018170 <RTC::get_update_in_progress_flag()>:
c0018170:	83 ec 14             	sub    esp,0x14
c0018173:	6a 0a                	push   0xa
c0018175:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001817b:	e8 f8 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018180:	83 c4 1c             	add    esp,0x1c
c0018183:	0f b6 c0             	movzx  eax,al
c0018186:	c1 e8 07             	shr    eax,0x7
c0018189:	c3                   	ret    

c001818a <RTC::completeRTCRefresh()>:
c001818a:	55                   	push   ebp
c001818b:	57                   	push   edi
c001818c:	56                   	push   esi
c001818d:	53                   	push   ebx
c001818e:	83 ec 3c             	sub    esp,0x3c
c0018191:	8b 1d 4c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002954c
c0018197:	83 ec 0c             	sub    esp,0xc
c001819a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001819e:	e8 cd ff ff ff       	call   c0018170 <RTC::get_update_in_progress_flag()>
c00181a3:	83 c4 10             	add    esp,0x10
c00181a6:	84 c0                	test   al,al
c00181a8:	74 0e                	je     c00181b8 <RTC::completeRTCRefresh()+0x2e>
c00181aa:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00181b0:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c00181b6:	73 df                	jae    c0018197 <RTC::completeRTCRefresh()+0xd>
c00181b8:	51                   	push   ecx
c00181b9:	51                   	push   ecx
c00181ba:	6a 00                	push   0x0
c00181bc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181c2:	e8 b1 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00181c7:	5b                   	pop    ebx
c00181c8:	89 c7                	mov    edi,eax
c00181ca:	5e                   	pop    esi
c00181cb:	6a 02                	push   0x2
c00181cd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181d3:	e8 a0 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00181d8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00181dc:	5d                   	pop    ebp
c00181dd:	58                   	pop    eax
c00181de:	6a 04                	push   0x4
c00181e0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181e6:	e8 8d ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00181eb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00181ef:	58                   	pop    eax
c00181f0:	5a                   	pop    edx
c00181f1:	6a 07                	push   0x7
c00181f3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181f9:	e8 7a ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00181fe:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018202:	59                   	pop    ecx
c0018203:	5b                   	pop    ebx
c0018204:	6a 08                	push   0x8
c0018206:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001820c:	e8 67 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018211:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018215:	5e                   	pop    esi
c0018216:	5d                   	pop    ebp
c0018217:	6a 09                	push   0x9
c0018219:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001821f:	e8 54 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018224:	0f b6 c0             	movzx  eax,al
c0018227:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001822b:	83 c4 10             	add    esp,0x10
c001822e:	8b 1d 4c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002954c
c0018234:	83 ec 0c             	sub    esp,0xc
c0018237:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001823b:	e8 30 ff ff ff       	call   c0018170 <RTC::get_update_in_progress_flag()>
c0018240:	83 c4 10             	add    esp,0x10
c0018243:	84 c0                	test   al,al
c0018245:	74 0e                	je     c0018255 <RTC::completeRTCRefresh()+0xcb>
c0018247:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001824d:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c0018253:	73 df                	jae    c0018234 <RTC::completeRTCRefresh()+0xaa>
c0018255:	51                   	push   ecx
c0018256:	51                   	push   ecx
c0018257:	6a 00                	push   0x0
c0018259:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001825f:	e8 14 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018264:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018268:	5b                   	pop    ebx
c0018269:	5e                   	pop    esi
c001826a:	6a 02                	push   0x2
c001826c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018272:	e8 01 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018277:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001827b:	5d                   	pop    ebp
c001827c:	58                   	pop    eax
c001827d:	6a 04                	push   0x4
c001827f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018285:	e8 ee ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001828a:	88 c3                	mov    bl,al
c001828c:	58                   	pop    eax
c001828d:	5a                   	pop    edx
c001828e:	6a 07                	push   0x7
c0018290:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018296:	e8 dd ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001829b:	59                   	pop    ecx
c001829c:	89 c6                	mov    esi,eax
c001829e:	5d                   	pop    ebp
c001829f:	6a 08                	push   0x8
c00182a1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182a7:	e8 cc ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182ac:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00182b0:	58                   	pop    eax
c00182b1:	5a                   	pop    edx
c00182b2:	6a 09                	push   0x9
c00182b4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182ba:	e8 b9 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182bf:	89 f9                	mov    ecx,edi
c00182c1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00182c5:	0f b6 e8             	movzx  ebp,al
c00182c8:	83 c4 10             	add    esp,0x10
c00182cb:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00182cf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00182d4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00182d9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00182dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00182e1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00182e5:	0f 94 c0             	sete   al
c00182e8:	0f b6 fb             	movzx  edi,bl
c00182eb:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00182ef:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00182f4:	0f 94 c2             	sete   dl
c00182f7:	21 d0                	and    eax,edx
c00182f9:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00182fd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018301:	0f 94 c2             	sete   dl
c0018304:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0018308:	21 c2                	and    edx,eax
c001830a:	89 f0                	mov    eax,esi
c001830c:	0f b6 c0             	movzx  eax,al
c001830f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018313:	89 f0                	mov    eax,esi
c0018315:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018319:	0f 94 c0             	sete   al
c001831c:	21 d0                	and    eax,edx
c001831e:	31 d2                	xor    edx,edx
c0018320:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018324:	0f 94 c2             	sete   dl
c0018327:	85 c2                	test   edx,eax
c0018329:	75 27                	jne    c0018352 <RTC::completeRTCRefresh()+0x1c8>
c001832b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001832f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018333:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018337:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001833b:	89 f0                	mov    eax,esi
c001833d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018341:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018345:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018349:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001834d:	e9 dc fe ff ff       	jmp    c001822e <RTC::completeRTCRefresh()+0xa4>
c0018352:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018356:	75 d3                	jne    c001832b <RTC::completeRTCRefresh()+0x1a1>
c0018358:	52                   	push   edx
c0018359:	52                   	push   edx
c001835a:	6a 0b                	push   0xb
c001835c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018362:	e8 11 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018367:	83 c4 10             	add    esp,0x10
c001836a:	a8 04                	test   al,0x4
c001836c:	75 7a                	jne    c00183e8 <RTC::completeRTCRefresh()+0x25e>
c001836e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018372:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018376:	83 e1 0f             	and    ecx,0xf
c0018379:	c1 ea 04             	shr    edx,0x4
c001837c:	c1 ef 04             	shr    edi,0x4
c001837f:	6b d2 0a             	imul   edx,edx,0xa
c0018382:	83 e6 0f             	and    esi,0xf
c0018385:	01 d1                	add    ecx,edx
c0018387:	c1 ed 04             	shr    ebp,0x4
c001838a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001838e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018396:	c1 ea 04             	shr    edx,0x4
c0018399:	83 e1 0f             	and    ecx,0xf
c001839c:	6b d2 0a             	imul   edx,edx,0xa
c001839f:	6b ed 0a             	imul   ebp,ebp,0xa
c00183a2:	01 d1                	add    ecx,edx
c00183a4:	89 fa                	mov    edx,edi
c00183a6:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00183aa:	83 e2 07             	and    edx,0x7
c00183ad:	89 d9                	mov    ecx,ebx
c00183af:	6b d2 0a             	imul   edx,edx,0xa
c00183b2:	83 e1 0f             	and    ecx,0xf
c00183b5:	83 e3 80             	and    ebx,0xffffff80
c00183b8:	01 d1                	add    ecx,edx
c00183ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183be:	09 cb                	or     ebx,ecx
c00183c0:	c1 ea 04             	shr    edx,0x4
c00183c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00183c7:	6b d2 0a             	imul   edx,edx,0xa
c00183ca:	83 e1 0f             	and    ecx,0xf
c00183cd:	01 d6                	add    esi,edx
c00183cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183d3:	c1 ea 04             	shr    edx,0x4
c00183d6:	6b d2 0a             	imul   edx,edx,0xa
c00183d9:	01 d1                	add    ecx,edx
c00183db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00183df:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00183e3:	83 e2 0f             	and    edx,0xf
c00183e6:	01 d5                	add    ebp,edx
c00183e8:	a8 02                	test   al,0x2
c00183ea:	75 15                	jne    c0018401 <RTC::completeRTCRefresh()+0x277>
c00183ec:	f6 c3 80             	test   bl,0x80
c00183ef:	74 10                	je     c0018401 <RTC::completeRTCRefresh()+0x277>
c00183f1:	83 e3 7f             	and    ebx,0x7f
c00183f4:	b9 18 00 00 00       	mov    ecx,0x18
c00183f9:	8d 43 0c             	lea    eax,[ebx+0xc]
c00183fc:	99                   	cdq    
c00183fd:	f7 f9                	idiv   ecx
c00183ff:	88 d3                	mov    bl,dl
c0018401:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018407:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c001840d:	77 06                	ja     c0018415 <RTC::completeRTCRefresh()+0x28b>
c001840f:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018415:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001841a:	31 c9                	xor    ecx,ecx
c001841c:	c1 e0 10             	shl    eax,0x10
c001841f:	89 cd                	mov    ebp,ecx
c0018421:	c1 e7 10             	shl    edi,0x10
c0018424:	31 d2                	xor    edx,edx
c0018426:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001842c:	09 c5                	or     ebp,eax
c001842e:	89 f0                	mov    eax,esi
c0018430:	89 e9                	mov    ecx,ebp
c0018432:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018436:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001843a:	88 c2                	mov    dl,al
c001843c:	88 d9                	mov    cl,bl
c001843e:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018442:	0f b7 c2             	movzx  eax,dx
c0018445:	09 f8                	or     eax,edi
c0018447:	89 c2                	mov    edx,eax
c0018449:	50                   	push   eax
c001844a:	50                   	push   eax
c001844b:	51                   	push   ecx
c001844c:	52                   	push   edx
c001844d:	e8 a5 3d ff ff       	call   c000c1f7 <datetimeToSeconds(datetime_t)>
c0018452:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018456:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001845c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018462:	83 c4 4c             	add    esp,0x4c
c0018465:	5b                   	pop    ebx
c0018466:	5e                   	pop    esi
c0018467:	5f                   	pop    edi
c0018468:	5d                   	pop    ebp
c0018469:	c3                   	ret    

c001846a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001846a:	55                   	push   ebp
c001846b:	57                   	push   edi
c001846c:	56                   	push   esi
c001846d:	53                   	push   ebx
c001846e:	83 ec 30             	sub    esp,0x30
c0018471:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018475:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018479:	6a 00                	push   0x0
c001847b:	6a 00                	push   0x0
c001847d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018483:	e8 0a ee fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018488:	83 c4 0c             	add    esp,0xc
c001848b:	6a 00                	push   0x0
c001848d:	6a 02                	push   0x2
c001848f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018495:	e8 f8 ed fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001849a:	31 d2                	xor    edx,edx
c001849c:	89 f9                	mov    ecx,edi
c001849e:	89 f8                	mov    eax,edi
c00184a0:	c1 e9 10             	shr    ecx,0x10
c00184a3:	0f b6 c4             	movzx  eax,ah
c00184a6:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00184aa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00184ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184b2:	b9 64 00 00 00       	mov    ecx,0x64
c00184b7:	89 f0                	mov    eax,esi
c00184b9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00184bd:	89 f0                	mov    eax,esi
c00184bf:	0f b6 c4             	movzx  eax,ah
c00184c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00184c6:	89 f0                	mov    eax,esi
c00184c8:	c1 e8 10             	shr    eax,0x10
c00184cb:	f7 f1                	div    ecx
c00184cd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00184d1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00184d5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00184d9:	59                   	pop    ecx
c00184da:	5b                   	pop    ebx
c00184db:	89 fb                	mov    ebx,edi
c00184dd:	6a 0b                	push   0xb
c00184df:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184e5:	e8 8e ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184ea:	83 c4 10             	add    esp,0x10
c00184ed:	89 c5                	mov    ebp,eax
c00184ef:	a8 04                	test   al,0x4
c00184f1:	75 6e                	jne    c0018561 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00184f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00184f7:	31 d2                	xor    edx,edx
c00184f9:	0f b6 c1             	movzx  eax,cl
c00184fc:	b9 0a 00 00 00       	mov    ecx,0xa
c0018501:	f7 f1                	div    ecx
c0018503:	c1 e0 04             	shl    eax,0x4
c0018506:	09 d0                	or     eax,edx
c0018508:	31 d2                	xor    edx,edx
c001850a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001850e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018513:	f7 f1                	div    ecx
c0018515:	c1 e0 04             	shl    eax,0x4
c0018518:	09 d0                	or     eax,edx
c001851a:	31 d2                	xor    edx,edx
c001851c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018520:	0f b6 c3             	movzx  eax,bl
c0018523:	f7 f1                	div    ecx
c0018525:	c1 e0 04             	shl    eax,0x4
c0018528:	09 d0                	or     eax,edx
c001852a:	31 d2                	xor    edx,edx
c001852c:	89 c3                	mov    ebx,eax
c001852e:	89 f0                	mov    eax,esi
c0018530:	0f b6 c0             	movzx  eax,al
c0018533:	f7 f1                	div    ecx
c0018535:	c1 e0 04             	shl    eax,0x4
c0018538:	09 d0                	or     eax,edx
c001853a:	31 d2                	xor    edx,edx
c001853c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018540:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018545:	f7 f1                	div    ecx
c0018547:	c1 e0 04             	shl    eax,0x4
c001854a:	09 d0                	or     eax,edx
c001854c:	31 d2                	xor    edx,edx
c001854e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018552:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018556:	f7 f1                	div    ecx
c0018558:	c1 e0 04             	shl    eax,0x4
c001855b:	09 d0                	or     eax,edx
c001855d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018561:	83 e5 02             	and    ebp,0x2
c0018564:	75 1e                	jne    c0018584 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018566:	0f b6 c3             	movzx  eax,bl
c0018569:	83 f8 0b             	cmp    eax,0xb
c001856c:	76 10                	jbe    c001857e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001856e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018571:	88 d3                	mov    bl,dl
c0018573:	84 d2                	test   dl,dl
c0018575:	75 02                	jne    c0018579 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018577:	b3 0c                	mov    bl,0xc
c0018579:	83 cb 80             	or     ebx,0xffffff80
c001857c:	eb 06                	jmp    c0018584 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001857e:	85 c0                	test   eax,eax
c0018580:	75 02                	jne    c0018584 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018582:	b3 0c                	mov    bl,0xc
c0018584:	0f b6 db             	movzx  ebx,bl
c0018587:	50                   	push   eax
c0018588:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001858d:	52                   	push   edx
c001858e:	6a 00                	push   0x0
c0018590:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018596:	e8 f7 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001859b:	83 c4 0c             	add    esp,0xc
c001859e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185a3:	50                   	push   eax
c00185a4:	6a 02                	push   0x2
c00185a6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185ac:	e8 e1 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185b1:	83 c4 0c             	add    esp,0xc
c00185b4:	53                   	push   ebx
c00185b5:	6a 04                	push   0x4
c00185b7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185bd:	e8 d0 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185c2:	83 c4 0c             	add    esp,0xc
c00185c5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00185ca:	52                   	push   edx
c00185cb:	6a 07                	push   0x7
c00185cd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185d3:	e8 ba ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185d8:	83 c4 0c             	add    esp,0xc
c00185db:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00185e0:	50                   	push   eax
c00185e1:	6a 08                	push   0x8
c00185e3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185e9:	e8 a4 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185ee:	83 c4 0c             	add    esp,0xc
c00185f1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00185f6:	55                   	push   ebp
c00185f7:	6a 09                	push   0x9
c00185f9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185ff:	e8 8e ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018604:	5a                   	pop    edx
c0018605:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018609:	e8 7c fb ff ff       	call   c001818a <RTC::completeRTCRefresh()>
c001860e:	83 c4 3c             	add    esp,0x3c
c0018611:	b0 01                	mov    al,0x1
c0018613:	5b                   	pop    ebx
c0018614:	5e                   	pop    esi
c0018615:	5f                   	pop    edi
c0018616:	5d                   	pop    ebp
c0018617:	c3                   	ret    

c0018618 <rtcIRQHandler(regs*, void*)>:
c0018618:	53                   	push   ebx
c0018619:	83 ec 10             	sub    esp,0x10
c001861c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018620:	6a 0c                	push   0xc
c0018622:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018628:	e8 4b eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001862d:	83 c4 10             	add    esp,0x10
c0018630:	a8 80                	test   al,0x80
c0018632:	74 24                	je     c0018658 <rtcIRQHandler(regs*, void*)+0x40>
c0018634:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001863b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018642:	66 ff 05 18 a5 02 c0 	inc    WORD PTR ds:0xc002a518
c0018649:	75 0d                	jne    c0018658 <rtcIRQHandler(regs*, void*)+0x40>
c001864b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001864f:	83 c4 08             	add    esp,0x8
c0018652:	5b                   	pop    ebx
c0018653:	e9 32 fb ff ff       	jmp    c001818a <RTC::completeRTCRefresh()>
c0018658:	83 c4 08             	add    esp,0x8
c001865b:	5b                   	pop    ebx
c001865c:	c3                   	ret    
c001865d:	90                   	nop

c001865e <RTC::RTC()>:
c001865e:	83 ec 1c             	sub    esp,0x1c
c0018661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018665:	83 ec 08             	sub    esp,0x8
c0018668:	68 6b 26 02 c0       	push   0xc002266b
c001866d:	50                   	push   eax
c001866e:	e8 5f 3a ff ff       	call   c000c0d2 <Clock::Clock(char const*)>
c0018673:	83 c4 10             	add    esp,0x10
c0018676:	ba 88 26 02 c0       	mov    edx,0xc0022688
c001867b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001867f:	89 10                	mov    DWORD PTR [eax],edx
c0018681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018685:	83 ec 0c             	sub    esp,0xc
c0018688:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001868c:	6a 01                	push   0x1
c001868e:	68 18 86 01 c0       	push   0xc0018618
c0018693:	6a 08                	push   0x8
c0018695:	50                   	push   eax
c0018696:	e8 13 3f ff ff       	call   c000c5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001869b:	83 c4 20             	add    esp,0x20
c001869e:	89 c2                	mov    edx,eax
c00186a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186a4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00186aa:	fa                   	cli    
c00186ab:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00186b0:	83 c0 01             	add    eax,0x1
c00186b3:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00186b8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00186bd:	83 ec 08             	sub    esp,0x8
c00186c0:	6a 0b                	push   0xb
c00186c2:	50                   	push   eax
c00186c3:	e8 b0 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00186c8:	83 c4 10             	add    esp,0x10
c00186cb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00186cf:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00186d4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00186d8:	83 ca 10             	or     edx,0x10
c00186db:	0f b6 d2             	movzx  edx,dl
c00186de:	83 ec 04             	sub    esp,0x4
c00186e1:	52                   	push   edx
c00186e2:	6a 0b                	push   0xb
c00186e4:	50                   	push   eax
c00186e5:	e8 a8 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186ea:	83 c4 10             	add    esp,0x10
c00186ed:	83 ec 0c             	sub    esp,0xc
c00186f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186f4:	e8 91 fa ff ff       	call   c001818a <RTC::completeRTCRefresh()>
c00186f9:	83 c4 10             	add    esp,0x10
c00186fc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0018701:	83 e8 01             	sub    eax,0x1
c0018704:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0018709:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001870e:	85 c0                	test   eax,eax
c0018710:	75 01                	jne    c0018713 <RTC::RTC()+0xb5>
c0018712:	fb                   	sti    
c0018713:	90                   	nop
c0018714:	83 c4 1c             	add    esp,0x1c
c0018717:	c3                   	ret    

c0018718 <HalConsoleScroll(int, int)>:
c0018718:	83 ec 10             	sub    esp,0x10
c001871b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018723:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001872b:	90                   	nop
c001872c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018731:	0f 8f e1 00 00 00    	jg     c0018818 <HalConsoleScroll(int, int)+0x100>
c0018737:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001873f:	90                   	nop
c0018740:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018748:	0f 8f be 00 00 00    	jg     c001880c <HalConsoleScroll(int, int)+0xf4>
c001874e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018752:	89 d0                	mov    eax,edx
c0018754:	c1 e0 02             	shl    eax,0x2
c0018757:	01 d0                	add    eax,edx
c0018759:	c1 e0 05             	shl    eax,0x5
c001875c:	89 c2                	mov    edx,eax
c001875e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018762:	01 d0                	add    eax,edx
c0018764:	89 c2                	mov    edx,eax
c0018766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001876a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001876d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018771:	89 d0                	mov    eax,edx
c0018773:	c1 e0 02             	shl    eax,0x2
c0018776:	01 d0                	add    eax,edx
c0018778:	c1 e0 05             	shl    eax,0x5
c001877b:	89 c2                	mov    edx,eax
c001877d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018781:	01 d0                	add    eax,edx
c0018783:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018789:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001878d:	01 c2                	add    edx,eax
c001878f:	8a 01                	mov    al,BYTE PTR [ecx]
c0018791:	88 02                	mov    BYTE PTR [edx],al
c0018793:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018798:	75 66                	jne    c0018800 <HalConsoleScroll(int, int)+0xe8>
c001879a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001879e:	83 e0 01             	and    eax,0x1
c00187a1:	74 39                	je     c00187dc <HalConsoleScroll(int, int)+0xc4>
c00187a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187a7:	83 e0 0f             	and    eax,0xf
c00187aa:	88 c2                	mov    dl,al
c00187ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187b0:	c1 e0 04             	shl    eax,0x4
c00187b3:	09 d0                	or     eax,edx
c00187b5:	88 c1                	mov    cl,al
c00187b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187bb:	89 d0                	mov    eax,edx
c00187bd:	c1 e0 02             	shl    eax,0x2
c00187c0:	01 d0                	add    eax,edx
c00187c2:	c1 e0 05             	shl    eax,0x5
c00187c5:	89 c2                	mov    edx,eax
c00187c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187cb:	01 d0                	add    eax,edx
c00187cd:	89 c2                	mov    edx,eax
c00187cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187d3:	01 d0                	add    eax,edx
c00187d5:	88 ca                	mov    dl,cl
c00187d7:	88 10                	mov    BYTE PTR [eax],dl
c00187d9:	eb 25                	jmp    c0018800 <HalConsoleScroll(int, int)+0xe8>
c00187db:	90                   	nop
c00187dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187e0:	89 d0                	mov    eax,edx
c00187e2:	c1 e0 02             	shl    eax,0x2
c00187e5:	01 d0                	add    eax,edx
c00187e7:	c1 e0 05             	shl    eax,0x5
c00187ea:	89 c2                	mov    edx,eax
c00187ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187f0:	01 d0                	add    eax,edx
c00187f2:	89 c2                	mov    edx,eax
c00187f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187f8:	01 d0                	add    eax,edx
c00187fa:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00187fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018800:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018805:	e9 36 ff ff ff       	jmp    c0018740 <HalConsoleScroll(int, int)+0x28>
c001880a:	66 90                	xchg   ax,ax
c001880c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018811:	e9 16 ff ff ff       	jmp    c001872c <HalConsoleScroll(int, int)+0x14>
c0018816:	66 90                	xchg   ax,ax
c0018818:	90                   	nop
c0018819:	83 c4 10             	add    esp,0x10
c001881c:	c3                   	ret    
c001881d:	8d 76 00             	lea    esi,[esi+0x0]

c0018820 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018820:	83 ec 14             	sub    esp,0x14
c0018823:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018827:	88 04 24             	mov    BYTE PTR [esp],al
c001882a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001882d:	0f b6 c0             	movzx  eax,al
c0018830:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018834:	89 d1                	mov    ecx,edx
c0018836:	83 e1 0f             	and    ecx,0xf
c0018839:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001883d:	c1 e2 04             	shl    edx,0x4
c0018840:	0f b6 d2             	movzx  edx,dl
c0018843:	09 ca                	or     edx,ecx
c0018845:	c1 e2 08             	shl    edx,0x8
c0018848:	09 d0                	or     eax,edx
c001884a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001884f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018857:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001885b:	89 d0                	mov    eax,edx
c001885d:	c1 e0 02             	shl    eax,0x2
c0018860:	01 d0                	add    eax,edx
c0018862:	c1 e0 04             	shl    eax,0x4
c0018865:	89 c2                	mov    edx,eax
c0018867:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001886b:	01 d0                	add    eax,edx
c001886d:	01 c0                	add    eax,eax
c001886f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018873:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018877:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001887c:	66 89 02             	mov    WORD PTR [edx],ax
c001887f:	90                   	nop
c0018880:	83 c4 14             	add    esp,0x14
c0018883:	c3                   	ret    

c0018884 <HalConsoleCursorUpdate(int, int)>:
c0018884:	83 ec 20             	sub    esp,0x20
c0018887:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001888b:	89 c2                	mov    edx,eax
c001888d:	c1 e2 02             	shl    edx,0x2
c0018890:	01 d0                	add    eax,edx
c0018892:	c1 e0 04             	shl    eax,0x4
c0018895:	89 c2                	mov    edx,eax
c0018897:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001889b:	01 d0                	add    eax,edx
c001889d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00188a2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00188a9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00188ae:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00188b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188b6:	ee                   	out    dx,al
c00188b7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00188bc:	0f b6 c0             	movzx  eax,al
c00188bf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00188c6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00188ca:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00188ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00188d2:	ee                   	out    dx,al
c00188d3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00188da:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00188df:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00188e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188e7:	ee                   	out    dx,al
c00188e8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00188ed:	c1 e8 08             	shr    eax,0x8
c00188f0:	0f b6 c0             	movzx  eax,al
c00188f3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00188fa:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00188fe:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018902:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018906:	ee                   	out    dx,al
c0018907:	90                   	nop
c0018908:	83 c4 20             	add    esp,0x20
c001890b:	c3                   	ret    

c001890c <FAT::getName()>:
c001890c:	b8 bc 26 02 c0       	mov    eax,0xc00226bc
c0018911:	c3                   	ret    
c0018912:	66 90                	xchg   ax,ax

c0018914 <FAT::tell(void*, unsigned long long*)>:
c0018914:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018919:	75 09                	jne    c0018924 <FAT::tell(void*, unsigned long long*)+0x10>
c001891b:	b8 04 00 00 00       	mov    eax,0x4
c0018920:	c3                   	ret    
c0018921:	8d 76 00             	lea    esi,[esi+0x0]
c0018924:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018929:	75 09                	jne    c0018934 <FAT::tell(void*, unsigned long long*)+0x20>
c001892b:	b8 04 00 00 00       	mov    eax,0x4
c0018930:	c3                   	ret    
c0018931:	8d 76 00             	lea    esi,[esi+0x0]
c0018934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018938:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001893b:	ba 00 00 00 00       	mov    edx,0x0
c0018940:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018944:	89 01                	mov    DWORD PTR [ecx],eax
c0018946:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018949:	b8 00 00 00 00       	mov    eax,0x0
c001894e:	c3                   	ret    
c001894f:	90                   	nop

c0018950 <FAT::stat(void*, unsigned long long*)>:
c0018950:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018955:	75 09                	jne    c0018960 <FAT::stat(void*, unsigned long long*)+0x10>
c0018957:	b8 04 00 00 00       	mov    eax,0x4
c001895c:	c3                   	ret    
c001895d:	8d 76 00             	lea    esi,[esi+0x0]
c0018960:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018965:	75 09                	jne    c0018970 <FAT::stat(void*, unsigned long long*)+0x20>
c0018967:	b8 04 00 00 00       	mov    eax,0x4
c001896c:	c3                   	ret    
c001896d:	8d 76 00             	lea    esi,[esi+0x0]
c0018970:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018974:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018977:	ba 00 00 00 00       	mov    edx,0x0
c001897c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018980:	89 01                	mov    DWORD PTR [ecx],eax
c0018982:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018985:	b8 00 00 00 00       	mov    eax,0x0
c001898a:	c3                   	ret    
c001898b:	90                   	nop

c001898c <FAT::~FAT()>:
c001898c:	83 ec 0c             	sub    esp,0xc
c001898f:	ba 08 27 02 c0       	mov    edx,0xc0022708
c0018994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018998:	89 10                	mov    DWORD PTR [eax],edx
c001899a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001899e:	83 ec 0c             	sub    esp,0xc
c00189a1:	50                   	push   eax
c00189a2:	e8 17 2b ff ff       	call   c000b4be <Filesystem::~Filesystem()>
c00189a7:	83 c4 10             	add    esp,0x10
c00189aa:	90                   	nop
c00189ab:	83 c4 0c             	add    esp,0xc
c00189ae:	c3                   	ret    
c00189af:	90                   	nop

c00189b0 <FAT::~FAT()>:
c00189b0:	83 ec 0c             	sub    esp,0xc
c00189b3:	83 ec 0c             	sub    esp,0xc
c00189b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00189ba:	e8 cd ff ff ff       	call   c001898c <FAT::~FAT()>
c00189bf:	83 c4 10             	add    esp,0x10
c00189c2:	83 ec 08             	sub    esp,0x8
c00189c5:	6a 08                	push   0x8
c00189c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00189cb:	e8 48 1e ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00189d0:	83 c4 10             	add    esp,0x10
c00189d3:	83 c4 0c             	add    esp,0xc
c00189d6:	c3                   	ret    
c00189d7:	90                   	nop

c00189d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00189d8:	83 ec 1c             	sub    esp,0x1c
c00189db:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00189e2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00189e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189eb:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c00189f2:	83 f8 ff             	cmp    eax,0xffffffff
c00189f5:	75 35                	jne    c0018a2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00189f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00189fb:	88 c2                	mov    dl,al
c00189fd:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018a02:	01 d0                	add    eax,edx
c0018a04:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a08:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018a0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a12:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018a19:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018a1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a22:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018a29:	eb 19                	jmp    c0018a44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018a2b:	90                   	nop
c0018a2c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a30:	88 c2                	mov    dl,al
c0018a32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a36:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018a3d:	01 d0                	add    eax,edx
c0018a3f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a43:	90                   	nop
c0018a44:	83 ec 04             	sub    esp,0x4
c0018a47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a4f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018a53:	50                   	push   eax
c0018a54:	e8 76 c5 fe ff       	call   c0004fcf <f_getlabel>
c0018a59:	83 c4 10             	add    esp,0x10
c0018a5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a65:	75 09                	jne    c0018a70 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018a67:	b8 00 00 00 00       	mov    eax,0x0
c0018a6c:	eb 0a                	jmp    c0018a78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018a6e:	66 90                	xchg   ax,ax
c0018a70:	b8 01 00 00 00       	mov    eax,0x1
c0018a75:	8d 76 00             	lea    esi,[esi+0x0]
c0018a78:	83 c4 1c             	add    esp,0x1c
c0018a7b:	c3                   	ret    

c0018a7c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018a7c:	57                   	push   edi
c0018a7d:	83 ec 58             	sub    esp,0x58
c0018a80:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018a88:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018a8c:	b8 00 00 00 00       	mov    eax,0x0
c0018a91:	b9 0f 00 00 00       	mov    ecx,0xf
c0018a96:	fc                   	cld    
c0018a97:	89 d7                	mov    edi,edx
c0018a99:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018a9b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a9f:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018aa6:	83 f8 ff             	cmp    eax,0xffffffff
c0018aa9:	75 35                	jne    c0018ae0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018aab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018aaf:	88 c2                	mov    dl,al
c0018ab1:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018ab6:	01 d0                	add    eax,edx
c0018ab8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018abc:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018ac2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ac6:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018acd:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018ad2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018ad6:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018add:	eb 19                	jmp    c0018af8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018adf:	90                   	nop
c0018ae0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ae4:	88 c2                	mov    dl,al
c0018ae6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018aea:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018af1:	01 d0                	add    eax,edx
c0018af3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018af7:	90                   	nop
c0018af8:	83 ec 08             	sub    esp,0x8
c0018afb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018aff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b03:	50                   	push   eax
c0018b04:	e8 37 7d fe ff       	call   c0000840 <strcat>
c0018b09:	83 c4 10             	add    esp,0x10
c0018b0c:	83 ec 0c             	sub    esp,0xc
c0018b0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b13:	50                   	push   eax
c0018b14:	e8 07 c6 fe ff       	call   c0005120 <f_setlabel>
c0018b19:	83 c4 10             	add    esp,0x10
c0018b1c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b20:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018b25:	75 09                	jne    c0018b30 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018b27:	b8 00 00 00 00       	mov    eax,0x0
c0018b2c:	eb 0a                	jmp    c0018b38 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018b2e:	66 90                	xchg   ax,ax
c0018b30:	b8 01 00 00 00       	mov    eax,0x1
c0018b35:	8d 76 00             	lea    esi,[esi+0x0]
c0018b38:	83 c4 58             	add    esp,0x58
c0018b3b:	5f                   	pop    edi
c0018b3c:	c3                   	ret    
c0018b3d:	90                   	nop
c0018b3e:	66 90                	xchg   ax,ax

c0018b40 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018b40:	83 ec 2c             	sub    esp,0x2c
c0018b43:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018b4b:	83 ec 08             	sub    esp,0x8
c0018b4e:	68 e0 26 02 c0       	push   0xc00226e0
c0018b53:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b57:	e8 f4 7b fe ff       	call   c0000750 <strcmp>
c0018b5c:	83 c4 10             	add    esp,0x10
c0018b5f:	85 c0                	test   eax,eax
c0018b61:	0f 94 c0             	sete   al
c0018b64:	0f b6 c0             	movzx  eax,al
c0018b67:	85 c0                	test   eax,eax
c0018b69:	74 0d                	je     c0018b78 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018b6b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b73:	e9 c0 00 00 00       	jmp    c0018c38 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b78:	83 ec 08             	sub    esp,0x8
c0018b7b:	68 d2 26 02 c0       	push   0xc00226d2
c0018b80:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b84:	e8 c7 7b fe ff       	call   c0000750 <strcmp>
c0018b89:	83 c4 10             	add    esp,0x10
c0018b8c:	85 c0                	test   eax,eax
c0018b8e:	0f 94 c0             	sete   al
c0018b91:	0f b6 c0             	movzx  eax,al
c0018b94:	85 c0                	test   eax,eax
c0018b96:	74 10                	je     c0018ba8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018b98:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018ba0:	e9 93 00 00 00       	jmp    c0018c38 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ba8:	83 ec 08             	sub    esp,0x8
c0018bab:	68 d8 26 02 c0       	push   0xc00226d8
c0018bb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bb4:	e8 97 7b fe ff       	call   c0000750 <strcmp>
c0018bb9:	83 c4 10             	add    esp,0x10
c0018bbc:	85 c0                	test   eax,eax
c0018bbe:	0f 94 c0             	sete   al
c0018bc1:	0f b6 c0             	movzx  eax,al
c0018bc4:	85 c0                	test   eax,eax
c0018bc6:	74 0c                	je     c0018bd4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018bc8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018bd0:	eb 66                	jmp    c0018c38 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bd2:	66 90                	xchg   ax,ax
c0018bd4:	83 ec 08             	sub    esp,0x8
c0018bd7:	68 3c ff 01 c0       	push   0xc001ff3c
c0018bdc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018be0:	e8 6b 7b fe ff       	call   c0000750 <strcmp>
c0018be5:	83 c4 10             	add    esp,0x10
c0018be8:	85 c0                	test   eax,eax
c0018bea:	0f 94 c0             	sete   al
c0018bed:	0f b6 c0             	movzx  eax,al
c0018bf0:	85 c0                	test   eax,eax
c0018bf2:	74 0c                	je     c0018c00 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018bf4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018bfc:	eb 3a                	jmp    c0018c38 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bfe:	66 90                	xchg   ax,ax
c0018c00:	83 ec 08             	sub    esp,0x8
c0018c03:	68 de 26 02 c0       	push   0xc00226de
c0018c08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c0c:	e8 3f 7b fe ff       	call   c0000750 <strcmp>
c0018c11:	83 c4 10             	add    esp,0x10
c0018c14:	85 c0                	test   eax,eax
c0018c16:	0f 94 c0             	sete   al
c0018c19:	0f b6 c0             	movzx  eax,al
c0018c1c:	85 c0                	test   eax,eax
c0018c1e:	74 0c                	je     c0018c2c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018c20:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018c28:	eb 0e                	jmp    c0018c38 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c2a:	66 90                	xchg   ax,ax
c0018c2c:	b8 08 00 00 00       	mov    eax,0x8
c0018c31:	e9 ea 00 00 00       	jmp    c0018d20 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018c36:	66 90                	xchg   ax,ax
c0018c38:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018c3f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018c44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c48:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018c4f:	83 f8 ff             	cmp    eax,0xffffffff
c0018c52:	75 34                	jne    c0018c88 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018c54:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c58:	88 c2                	mov    dl,al
c0018c5a:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018c5f:	01 d0                	add    eax,edx
c0018c61:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c65:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018c6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c6f:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018c76:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018c7b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018c7f:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018c86:	eb 18                	jmp    c0018ca0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018c88:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c8c:	88 c2                	mov    dl,al
c0018c8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c92:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018c99:	01 d0                	add    eax,edx
c0018c9b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c9f:	90                   	nop
c0018ca0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ca4:	88 04 24             	mov    BYTE PTR [esp],al
c0018ca7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018cab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018caf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018cb7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018cbc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018cc4:	83 ec 0c             	sub    esp,0xc
c0018cc7:	68 00 20 00 00       	push   0x2000
c0018ccc:	e8 e5 ed fe ff       	call   c0007ab6 <malloc>
c0018cd1:	83 c4 10             	add    esp,0x10
c0018cd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018cd8:	68 00 20 00 00       	push   0x2000
c0018cdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ce1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018ce5:	50                   	push   eax
c0018ce6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018cea:	50                   	push   eax
c0018ceb:	e8 2d c7 fe ff       	call   c000541d <f_mkfs>
c0018cf0:	83 c4 10             	add    esp,0x10
c0018cf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018cf7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018cfc:	75 0a                	jne    c0018d08 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018cfe:	b8 00 00 00 00       	mov    eax,0x0
c0018d03:	eb 1b                	jmp    c0018d20 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d05:	8d 76 00             	lea    esi,[esi+0x0]
c0018d08:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018d0d:	75 09                	jne    c0018d18 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018d0f:	b8 09 00 00 00       	mov    eax,0x9
c0018d14:	eb 0a                	jmp    c0018d20 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d16:	66 90                	xchg   ax,ax
c0018d18:	b8 01 00 00 00       	mov    eax,0x1
c0018d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d20:	83 c4 2c             	add    esp,0x2c
c0018d23:	c3                   	ret    

c0018d24 <FAT::tryMount(LogicalDisk*, int)>:
c0018d24:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018d2a:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018d2f:	83 f8 14             	cmp    eax,0x14
c0018d32:	75 18                	jne    c0018d4c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018d34:	83 ec 0c             	sub    esp,0xc
c0018d37:	68 e4 26 02 c0       	push   0xc00226e4
c0018d3c:	e8 cc 84 ff ff       	call   c001120d <KePanic(char const*)>
c0018d41:	83 c4 10             	add    esp,0x10
c0018d44:	b0 00                	mov    al,0x0
c0018d46:	e9 ed 01 00 00       	jmp    c0018f38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d4b:	90                   	nop
c0018d4c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018d53:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018d59:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d5f:	3d 00 02 00 00       	cmp    eax,0x200
c0018d64:	74 0a                	je     c0018d70 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018d66:	b0 00                	mov    al,0x0
c0018d68:	e9 cb 01 00 00       	jmp    c0018f38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d70:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018d78:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018d7f:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018d86:	83 f8 ff             	cmp    eax,0xffffffff
c0018d89:	74 09                	je     c0018d94 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018d8b:	b0 01                	mov    al,0x1
c0018d8d:	e9 a6 01 00 00       	jmp    c0018f38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d92:	66 90                	xchg   ax,ax
c0018d94:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018d9e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018da6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018dad:	88 c2                	mov    dl,al
c0018daf:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018db4:	01 d0                	add    eax,edx
c0018db6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018dbd:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018dc3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018dca:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018dd1:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018dd6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018ddd:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018de4:	83 ec 0c             	sub    esp,0xc
c0018de7:	68 34 02 00 00       	push   0x234
c0018dec:	e8 c5 ec fe ff       	call   c0007ab6 <malloc>
c0018df1:	83 c4 10             	add    esp,0x10
c0018df4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018dfb:	83 ec 04             	sub    esp,0x4
c0018dfe:	6a 00                	push   0x0
c0018e00:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e07:	50                   	push   eax
c0018e08:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e0f:	e8 e4 ad fe ff       	call   c0003bf8 <f_mount>
c0018e14:	83 c4 10             	add    esp,0x10
c0018e17:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e1e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018e26:	74 1c                	je     c0018e44 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018e28:	83 ec 0c             	sub    esp,0xc
c0018e2b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e32:	e8 9f ec fe ff       	call   c0007ad6 <rfree>
c0018e37:	83 c4 10             	add    esp,0x10
c0018e3a:	b0 00                	mov    al,0x0
c0018e3c:	e9 f7 00 00 00       	jmp    c0018f38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e41:	8d 76 00             	lea    esi,[esi+0x0]
c0018e44:	83 ec 04             	sub    esp,0x4
c0018e47:	68 00 01 00 00       	push   0x100
c0018e4c:	6a 00                	push   0x0
c0018e4e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e55:	50                   	push   eax
c0018e56:	e8 95 76 fe ff       	call   c00004f0 <memset>
c0018e5b:	83 c4 10             	add    esp,0x10
c0018e5e:	83 ec 08             	sub    esp,0x8
c0018e61:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e68:	50                   	push   eax
c0018e69:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e70:	50                   	push   eax
c0018e71:	e8 ca 79 fe ff       	call   c0000840 <strcat>
c0018e76:	83 c4 10             	add    esp,0x10
c0018e79:	83 ec 08             	sub    esp,0x8
c0018e7c:	68 f2 26 02 c0       	push   0xc00226f2
c0018e81:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e88:	50                   	push   eax
c0018e89:	e8 b2 79 fe ff       	call   c0000840 <strcat>
c0018e8e:	83 c4 10             	add    esp,0x10
c0018e91:	83 ec 04             	sub    esp,0x4
c0018e94:	6a 01                	push   0x1
c0018e96:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018e9d:	50                   	push   eax
c0018e9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ea2:	50                   	push   eax
c0018ea3:	e8 b2 ad fe ff       	call   c0003c5a <f_open>
c0018ea8:	83 c4 10             	add    esp,0x10
c0018eab:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018eb2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018eb9:	85 c0                	test   eax,eax
c0018ebb:	74 0b                	je     c0018ec8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018ebd:	78 31                	js     c0018ef0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018ebf:	83 e8 04             	sub    eax,0x4
c0018ec2:	83 f8 01             	cmp    eax,0x1
c0018ec5:	77 29                	ja     c0018ef0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018ec7:	90                   	nop
c0018ec8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018ed0:	83 ec 0c             	sub    esp,0xc
c0018ed3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ed7:	50                   	push   eax
c0018ed8:	e8 4c b5 fe ff       	call   c0004429 <f_close>
c0018edd:	83 c4 10             	add    esp,0x10
c0018ee0:	90                   	nop
c0018ee1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018ee9:	85 c0                	test   eax,eax
c0018eeb:	74 43                	je     c0018f30 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018eed:	eb 31                	jmp    c0018f20 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018eef:	90                   	nop
c0018ef0:	83 ec 0c             	sub    esp,0xc
c0018ef3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018efa:	e8 d7 eb fe ff       	call   c0007ad6 <rfree>
c0018eff:	83 c4 10             	add    esp,0x10
c0018f02:	83 ec 04             	sub    esp,0x4
c0018f05:	6a 00                	push   0x0
c0018f07:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f0e:	50                   	push   eax
c0018f0f:	6a 00                	push   0x0
c0018f11:	e8 e2 ac fe ff       	call   c0003bf8 <f_mount>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	b0 00                	mov    al,0x0
c0018f1b:	eb 1b                	jmp    c0018f38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f20:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018f25:	83 c0 01             	add    eax,0x1
c0018f28:	a3 20 a5 02 c0       	mov    ds:0xc002a520,eax
c0018f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f30:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018f37:	90                   	nop
c0018f38:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018f3e:	c3                   	ret    
c0018f3f:	90                   	nop

c0018f40 <FAT::allocateSwapfile(char const*, int)>:
c0018f40:	55                   	push   ebp
c0018f41:	57                   	push   edi
c0018f42:	56                   	push   esi
c0018f43:	53                   	push   ebx
c0018f44:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018f4a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018f55:	83 ec 0c             	sub    esp,0xc
c0018f58:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018f5f:	e8 52 eb fe ff       	call   c0007ab6 <malloc>
c0018f64:	83 c4 10             	add    esp,0x10
c0018f67:	89 c7                	mov    edi,eax
c0018f69:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0018f6e:	83 ec 04             	sub    esp,0x4
c0018f71:	50                   	push   eax
c0018f72:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018f79:	57                   	push   edi
c0018f7a:	e8 7b 27 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018f89:	83 ec 04             	sub    esp,0x4
c0018f8c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018f90:	50                   	push   eax
c0018f91:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f95:	50                   	push   eax
c0018f96:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f9d:	e8 16 2b ff ff       	call   c000bab8 <File::stat(unsigned long long*, bool*)>
c0018fa2:	83 c4 10             	add    esp,0x10
c0018fa5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018fac:	c1 e0 14             	shl    eax,0x14
c0018faf:	89 c7                	mov    edi,eax
c0018fb1:	89 c5                	mov    ebp,eax
c0018fb3:	c1 fd 1f             	sar    ebp,0x1f
c0018fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018fbe:	89 f9                	mov    ecx,edi
c0018fc0:	31 c1                	xor    ecx,eax
c0018fc2:	89 cb                	mov    ebx,ecx
c0018fc4:	89 e9                	mov    ecx,ebp
c0018fc6:	31 d1                	xor    ecx,edx
c0018fc8:	89 ce                	mov    esi,ecx
c0018fca:	89 f0                	mov    eax,esi
c0018fcc:	09 d8                	or     eax,ebx
c0018fce:	0f 84 9c 00 00 00    	je     c0019070 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018fd4:	83 ec 0c             	sub    esp,0xc
c0018fd7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018fde:	e8 a1 29 ff ff       	call   c000b984 <File::unlink()>
c0018fe3:	83 c4 10             	add    esp,0x10
c0018fe6:	83 ec 08             	sub    esp,0x8
c0018fe9:	6a 12                	push   0x12
c0018feb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018ff2:	e8 bf 27 ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c0018ff7:	83 c4 10             	add    esp,0x10
c0018ffa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019001:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019007:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001900e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019015:	c1 e0 14             	shl    eax,0x14
c0019018:	83 ec 04             	sub    esp,0x4
c001901b:	6a 01                	push   0x1
c001901d:	50                   	push   eax
c001901e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019025:	e8 86 c2 fe ff       	call   c00052b0 <f_expand>
c001902a:	83 c4 10             	add    esp,0x10
c001902d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019034:	8b 00                	mov    eax,DWORD PTR [eax]
c0019036:	83 c0 10             	add    eax,0x10
c0019039:	8b 00                	mov    eax,DWORD PTR [eax]
c001903b:	83 ec 0c             	sub    esp,0xc
c001903e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019042:	52                   	push   edx
c0019043:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019047:	52                   	push   edx
c0019048:	6a 00                	push   0x0
c001904a:	68 00 04 00 00       	push   0x400
c001904f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019056:	ff d0                	call   eax
c0019058:	83 c4 20             	add    esp,0x20
c001905b:	83 ec 0c             	sub    esp,0xc
c001905e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019065:	e8 aa 27 ff ff       	call   c000b814 <File::close()>
c001906a:	83 c4 10             	add    esp,0x10
c001906d:	8d 76 00             	lea    esi,[esi+0x0]
c0019070:	83 ec 08             	sub    esp,0x8
c0019073:	6a 01                	push   0x1
c0019075:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001907c:	e8 35 27 ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c0019081:	83 c4 10             	add    esp,0x10
c0019084:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001908b:	8b 00                	mov    eax,DWORD PTR [eax]
c001908d:	83 c0 0c             	add    eax,0xc
c0019090:	8b 00                	mov    eax,DWORD PTR [eax]
c0019092:	83 ec 0c             	sub    esp,0xc
c0019095:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019099:	52                   	push   edx
c001909a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001909e:	52                   	push   edx
c001909f:	6a 00                	push   0x0
c00190a1:	6a 04                	push   0x4
c00190a3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00190aa:	ff d0                	call   eax
c00190ac:	83 c4 20             	add    esp,0x20
c00190af:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190b6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00190bc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00190c3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00190ca:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00190cd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00190d4:	83 ec 0c             	sub    esp,0xc
c00190d7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190de:	e8 31 27 ff ff       	call   c000b814 <File::close()>
c00190e3:	83 c4 10             	add    esp,0x10
c00190e6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00190ed:	ba 00 00 00 00       	mov    edx,0x0
c00190f2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00190f8:	5b                   	pop    ebx
c00190f9:	5e                   	pop    esi
c00190fa:	5f                   	pop    edi
c00190fb:	5d                   	pop    ebp
c00190fc:	c3                   	ret    
c00190fd:	90                   	nop
c00190fe:	66 90                	xchg   ax,ax

c0019100 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019100:	57                   	push   edi
c0019101:	56                   	push   esi
c0019102:	53                   	push   ebx
c0019103:	81 ec 50 02 00 00    	sub    esp,0x250
c0019109:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019111:	74 0d                	je     c0019120 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019113:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001911b:	75 0f                	jne    c001912c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001911d:	8d 76 00             	lea    esi,[esi+0x0]
c0019120:	b8 04 00 00 00       	mov    eax,0x4
c0019125:	e9 3a 01 00 00       	jmp    c0019264 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001912a:	66 90                	xchg   ax,ax
c001912c:	83 ec 08             	sub    esp,0x8
c001912f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019136:	50                   	push   eax
c0019137:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001913e:	e8 b3 b5 fe ff       	call   c00046f6 <f_readdir>
c0019143:	83 c4 10             	add    esp,0x10
c0019146:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001914d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019154:	83 ec 0c             	sub    esp,0xc
c0019157:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001915e:	83 c0 16             	add    eax,0x16
c0019161:	50                   	push   eax
c0019162:	e8 09 74 fe ff       	call   c0000570 <strlen>
c0019167:	83 c4 10             	add    esp,0x10
c001916a:	ba 00 00 00 00       	mov    edx,0x0
c001916f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019173:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019177:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001917e:	0f b6 c0             	movzx  eax,al
c0019181:	83 e0 10             	and    eax,0x10
c0019184:	74 0a                	je     c0019190 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019186:	b8 02 00 00 00       	mov    eax,0x2
c001918b:	eb 0b                	jmp    c0019198 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001918d:	8d 76 00             	lea    esi,[esi+0x0]
c0019190:	b8 01 00 00 00       	mov    eax,0x1
c0019195:	8d 76 00             	lea    esi,[esi+0x0]
c0019198:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001919c:	83 ec 08             	sub    esp,0x8
c001919f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00191a6:	83 c0 16             	add    eax,0x16
c00191a9:	50                   	push   eax
c00191aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191ae:	83 c0 10             	add    eax,0x10
c00191b1:	50                   	push   eax
c00191b2:	e8 89 74 fe ff       	call   c0000640 <strcpy>
c00191b7:	83 c4 10             	add    esp,0x10
c00191ba:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00191c1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00191c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191cc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00191d3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00191da:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00191e1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00191e8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00191ef:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00191f6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00191fd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019204:	89 c6                	mov    esi,eax
c0019206:	89 d7                	mov    edi,edx
c0019208:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001920a:	89 c8                	mov    eax,ecx
c001920c:	89 fa                	mov    edx,edi
c001920e:	89 f3                	mov    ebx,esi
c0019210:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019217:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001921e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019225:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001922c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019232:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019239:	0f be c0             	movsx  eax,al
c001923c:	85 c0                	test   eax,eax
c001923e:	75 08                	jne    c0019248 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019240:	b8 07 00 00 00       	mov    eax,0x7
c0019245:	eb 1d                	jmp    c0019264 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019247:	90                   	nop
c0019248:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001924f:	85 c0                	test   eax,eax
c0019251:	75 09                	jne    c001925c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019253:	b8 00 00 00 00       	mov    eax,0x0
c0019258:	eb 0a                	jmp    c0019264 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001925a:	66 90                	xchg   ax,ax
c001925c:	b8 01 00 00 00       	mov    eax,0x1
c0019261:	8d 76 00             	lea    esi,[esi+0x0]
c0019264:	81 c4 50 02 00 00    	add    esp,0x250
c001926a:	5b                   	pop    ebx
c001926b:	5e                   	pop    esi
c001926c:	5f                   	pop    edi
c001926d:	c3                   	ret    
c001926e:	66 90                	xchg   ax,ax

c0019270 <FAT::read(void*, unsigned long, void*, int*)>:
c0019270:	83 ec 1c             	sub    esp,0x1c
c0019273:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019278:	74 0a                	je     c0019284 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001927a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001927f:	75 0b                	jne    c001928c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019281:	8d 76 00             	lea    esi,[esi+0x0]
c0019284:	b8 04 00 00 00       	mov    eax,0x4
c0019289:	eb 41                	jmp    c00192cc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001928b:	90                   	nop
c001928c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019290:	50                   	push   eax
c0019291:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019295:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019299:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001929d:	e8 7b ac fe ff       	call   c0003f1d <f_read>
c00192a2:	83 c4 10             	add    esp,0x10
c00192a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192ad:	89 c2                	mov    edx,eax
c00192af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00192b3:	89 10                	mov    DWORD PTR [eax],edx
c00192b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192b9:	85 c0                	test   eax,eax
c00192bb:	75 07                	jne    c00192c4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00192bd:	b8 00 00 00 00       	mov    eax,0x0
c00192c2:	eb 08                	jmp    c00192cc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00192c4:	b8 01 00 00 00       	mov    eax,0x1
c00192c9:	8d 76 00             	lea    esi,[esi+0x0]
c00192cc:	83 c4 1c             	add    esp,0x1c
c00192cf:	c3                   	ret    

c00192d0 <FAT::write(void*, unsigned long, void*, int*)>:
c00192d0:	83 ec 1c             	sub    esp,0x1c
c00192d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192d8:	74 0a                	je     c00192e4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00192da:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00192df:	75 0b                	jne    c00192ec <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00192e1:	8d 76 00             	lea    esi,[esi+0x0]
c00192e4:	b8 04 00 00 00       	mov    eax,0x4
c00192e9:	eb 41                	jmp    c001932c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00192eb:	90                   	nop
c00192ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192f0:	50                   	push   eax
c00192f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00192f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192fd:	e8 1a ae fe ff       	call   c000411c <f_write>
c0019302:	83 c4 10             	add    esp,0x10
c0019305:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019309:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001930d:	89 c2                	mov    edx,eax
c001930f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019313:	89 10                	mov    DWORD PTR [eax],edx
c0019315:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019319:	85 c0                	test   eax,eax
c001931b:	75 07                	jne    c0019324 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001931d:	b8 00 00 00 00       	mov    eax,0x0
c0019322:	eb 08                	jmp    c001932c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019324:	b8 01 00 00 00       	mov    eax,0x1
c0019329:	8d 76 00             	lea    esi,[esi+0x0]
c001932c:	83 c4 1c             	add    esp,0x1c
c001932f:	c3                   	ret    

c0019330 <FAT::close(void*)>:
c0019330:	83 ec 1c             	sub    esp,0x1c
c0019333:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019338:	75 0a                	jne    c0019344 <FAT::close(void*)+0x14>
c001933a:	b8 04 00 00 00       	mov    eax,0x4
c001933f:	eb 3f                	jmp    c0019380 <FAT::close(void*)+0x50>
c0019341:	8d 76 00             	lea    esi,[esi+0x0]
c0019344:	83 ec 0c             	sub    esp,0xc
c0019347:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001934b:	e8 d9 b0 fe ff       	call   c0004429 <f_close>
c0019350:	83 c4 10             	add    esp,0x10
c0019353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019357:	83 ec 0c             	sub    esp,0xc
c001935a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001935e:	e8 63 e7 fe ff       	call   c0007ac6 <free>
c0019363:	83 c4 10             	add    esp,0x10
c0019366:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001936a:	85 c0                	test   eax,eax
c001936c:	75 0a                	jne    c0019378 <FAT::close(void*)+0x48>
c001936e:	b8 00 00 00 00       	mov    eax,0x0
c0019373:	eb 0b                	jmp    c0019380 <FAT::close(void*)+0x50>
c0019375:	8d 76 00             	lea    esi,[esi+0x0]
c0019378:	b8 01 00 00 00       	mov    eax,0x1
c001937d:	8d 76 00             	lea    esi,[esi+0x0]
c0019380:	83 c4 1c             	add    esp,0x1c
c0019383:	c3                   	ret    

c0019384 <FAT::closeDir(void*)>:
c0019384:	83 ec 1c             	sub    esp,0x1c
c0019387:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001938c:	75 0a                	jne    c0019398 <FAT::closeDir(void*)+0x14>
c001938e:	b8 04 00 00 00       	mov    eax,0x4
c0019393:	eb 3f                	jmp    c00193d4 <FAT::closeDir(void*)+0x50>
c0019395:	8d 76 00             	lea    esi,[esi+0x0]
c0019398:	83 ec 0c             	sub    esp,0xc
c001939b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001939f:	e8 30 b3 fe ff       	call   c00046d4 <f_closedir>
c00193a4:	83 c4 10             	add    esp,0x10
c00193a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193ab:	83 ec 0c             	sub    esp,0xc
c00193ae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193b2:	e8 0f e7 fe ff       	call   c0007ac6 <free>
c00193b7:	83 c4 10             	add    esp,0x10
c00193ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193be:	85 c0                	test   eax,eax
c00193c0:	75 0a                	jne    c00193cc <FAT::closeDir(void*)+0x48>
c00193c2:	b8 00 00 00 00       	mov    eax,0x0
c00193c7:	eb 0b                	jmp    c00193d4 <FAT::closeDir(void*)+0x50>
c00193c9:	8d 76 00             	lea    esi,[esi+0x0]
c00193cc:	b8 01 00 00 00       	mov    eax,0x1
c00193d1:	8d 76 00             	lea    esi,[esi+0x0]
c00193d4:	83 c4 1c             	add    esp,0x1c
c00193d7:	c3                   	ret    

c00193d8 <FAT::truncate(void*, unsigned long long)>:
c00193d8:	83 ec 2c             	sub    esp,0x2c
c00193db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00193e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193eb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00193f0:	75 0a                	jne    c00193fc <FAT::truncate(void*, unsigned long long)+0x24>
c00193f2:	b8 04 00 00 00       	mov    eax,0x4
c00193f7:	eb 47                	jmp    c0019440 <FAT::truncate(void*, unsigned long long)+0x68>
c00193f9:	8d 76 00             	lea    esi,[esi+0x0]
c00193fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019400:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019403:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019407:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001940f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019413:	83 ec 08             	sub    esp,0x8
c0019416:	50                   	push   eax
c0019417:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001941b:	e8 38 b0 fe ff       	call   c0004458 <f_lseek>
c0019420:	83 c4 10             	add    esp,0x10
c0019423:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019427:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001942b:	85 c0                	test   eax,eax
c001942d:	75 09                	jne    c0019438 <FAT::truncate(void*, unsigned long long)+0x60>
c001942f:	b8 00 00 00 00       	mov    eax,0x0
c0019434:	eb 0a                	jmp    c0019440 <FAT::truncate(void*, unsigned long long)+0x68>
c0019436:	66 90                	xchg   ax,ax
c0019438:	b8 01 00 00 00       	mov    eax,0x1
c001943d:	8d 76 00             	lea    esi,[esi+0x0]
c0019440:	83 c4 2c             	add    esp,0x2c
c0019443:	c3                   	ret    

c0019444 <FAT::seek(void*, unsigned long long)>:
c0019444:	83 ec 2c             	sub    esp,0x2c
c0019447:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001944b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001944f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019453:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019457:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001945c:	75 0a                	jne    c0019468 <FAT::seek(void*, unsigned long long)+0x24>
c001945e:	b8 04 00 00 00       	mov    eax,0x4
c0019463:	eb 33                	jmp    c0019498 <FAT::seek(void*, unsigned long long)+0x54>
c0019465:	8d 76 00             	lea    esi,[esi+0x0]
c0019468:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001946c:	83 ec 08             	sub    esp,0x8
c001946f:	50                   	push   eax
c0019470:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019474:	e8 df af fe ff       	call   c0004458 <f_lseek>
c0019479:	83 c4 10             	add    esp,0x10
c001947c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019484:	85 c0                	test   eax,eax
c0019486:	75 08                	jne    c0019490 <FAT::seek(void*, unsigned long long)+0x4c>
c0019488:	b8 00 00 00 00       	mov    eax,0x0
c001948d:	eb 09                	jmp    c0019498 <FAT::seek(void*, unsigned long long)+0x54>
c001948f:	90                   	nop
c0019490:	b8 01 00 00 00       	mov    eax,0x1
c0019495:	8d 76 00             	lea    esi,[esi+0x0]
c0019498:	83 c4 2c             	add    esp,0x2c
c001949b:	c3                   	ret    

c001949c <fatWrapperReadDisk>:
c001949c:	53                   	push   ebx
c001949d:	83 ec 18             	sub    esp,0x18
c00194a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194a4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00194ad:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c00194b4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00194b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194bc:	ba 00 00 00 00       	mov    edx,0x0
c00194c1:	83 ec 0c             	sub    esp,0xc
c00194c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194c8:	53                   	push   ebx
c00194c9:	52                   	push   edx
c00194ca:	50                   	push   eax
c00194cb:	51                   	push   ecx
c00194cc:	e8 13 45 ff ff       	call   c000d9e4 <LogicalDisk::read(unsigned long long, int, void*)>
c00194d1:	83 c4 20             	add    esp,0x20
c00194d4:	83 c4 18             	add    esp,0x18
c00194d7:	5b                   	pop    ebx
c00194d8:	c3                   	ret    
c00194d9:	8d 76 00             	lea    esi,[esi+0x0]

c00194dc <fatWrapperWriteDisk>:
c00194dc:	53                   	push   ebx
c00194dd:	83 ec 18             	sub    esp,0x18
c00194e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00194ed:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c00194f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00194f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194fc:	ba 00 00 00 00       	mov    edx,0x0
c0019501:	83 ec 0c             	sub    esp,0xc
c0019504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019508:	53                   	push   ebx
c0019509:	52                   	push   edx
c001950a:	50                   	push   eax
c001950b:	51                   	push   ecx
c001950c:	e8 3f 45 ff ff       	call   c000da50 <LogicalDisk::write(unsigned long long, int, void*)>
c0019511:	83 c4 20             	add    esp,0x20
c0019514:	83 c4 18             	add    esp,0x18
c0019517:	5b                   	pop    ebx
c0019518:	c3                   	ret    
c0019519:	8d 76 00             	lea    esi,[esi+0x0]

c001951c <fatWrapperIoctl>:
c001951c:	53                   	push   ebx
c001951d:	83 ec 28             	sub    esp,0x28
c0019520:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019524:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019528:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001952c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019530:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019535:	83 f8 02             	cmp    eax,0x2
c0019538:	75 32                	jne    c001956c <fatWrapperIoctl+0x50>
c001953a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001953e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019542:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019547:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c001954e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019554:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001955a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001955e:	66 89 02             	mov    WORD PTR [edx],ax
c0019561:	b8 00 00 00 00       	mov    eax,0x0
c0019566:	e9 c5 00 00 00       	jmp    c0019630 <fatWrapperIoctl+0x114>
c001956b:	90                   	nop
c001956c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019571:	83 f8 01             	cmp    eax,0x1
c0019574:	75 6a                	jne    c00195e0 <fatWrapperIoctl+0xc4>
c0019576:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001957a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001957e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019583:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c001958a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019590:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019596:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001959c:	89 c8                	mov    eax,ecx
c001959e:	89 da                	mov    edx,ebx
c00195a0:	0f a4 c2 0a          	shld   edx,eax,0xa
c00195a4:	c1 e0 0a             	shl    eax,0xa
c00195a7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00195ac:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c00195b3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00195b9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00195bf:	89 cb                	mov    ebx,ecx
c00195c1:	c1 fb 1f             	sar    ebx,0x1f
c00195c4:	53                   	push   ebx
c00195c5:	51                   	push   ecx
c00195c6:	52                   	push   edx
c00195c7:	50                   	push   eax
c00195c8:	e8 73 5b 00 00       	call   c001f140 <__udivdi3>
c00195cd:	83 c4 10             	add    esp,0x10
c00195d0:	89 c2                	mov    edx,eax
c00195d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195d6:	89 10                	mov    DWORD PTR [eax],edx
c00195d8:	b8 00 00 00 00       	mov    eax,0x0
c00195dd:	eb 51                	jmp    c0019630 <fatWrapperIoctl+0x114>
c00195df:	90                   	nop
c00195e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195e5:	85 c0                	test   eax,eax
c00195e7:	75 07                	jne    c00195f0 <fatWrapperIoctl+0xd4>
c00195e9:	b8 00 00 00 00       	mov    eax,0x0
c00195ee:	eb 40                	jmp    c0019630 <fatWrapperIoctl+0x114>
c00195f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195f5:	83 f8 03             	cmp    eax,0x3
c00195f8:	75 1a                	jne    c0019614 <fatWrapperIoctl+0xf8>
c00195fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019602:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019606:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001960c:	b8 00 00 00 00       	mov    eax,0x0
c0019611:	eb 1d                	jmp    c0019630 <fatWrapperIoctl+0x114>
c0019613:	90                   	nop
c0019614:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019619:	83 f8 04             	cmp    eax,0x4
c001961c:	75 0a                	jne    c0019628 <fatWrapperIoctl+0x10c>
c001961e:	b8 00 00 00 00       	mov    eax,0x0
c0019623:	eb 0b                	jmp    c0019630 <fatWrapperIoctl+0x114>
c0019625:	8d 76 00             	lea    esi,[esi+0x0]
c0019628:	b8 04 00 00 00       	mov    eax,0x4
c001962d:	8d 76 00             	lea    esi,[esi+0x0]
c0019630:	83 c4 28             	add    esp,0x28
c0019633:	5b                   	pop    ebx
c0019634:	c3                   	ret    
c0019635:	90                   	nop
c0019636:	66 90                	xchg   ax,ax

c0019638 <FAT::FAT()>:
c0019638:	83 ec 1c             	sub    esp,0x1c
c001963b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001963f:	83 ec 0c             	sub    esp,0xc
c0019642:	50                   	push   eax
c0019643:	e8 52 1e ff ff       	call   c000b49a <Filesystem::Filesystem()>
c0019648:	83 c4 10             	add    esp,0x10
c001964b:	ba 08 27 02 c0       	mov    edx,0xc0022708
c0019650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019654:	89 10                	mov    DWORD PTR [eax],edx
c0019656:	c7 05 20 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a520,0x0
c0019660:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019668:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001966d:	7f 19                	jg     c0019688 <FAT::FAT()+0x50>
c001966f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019673:	c7 04 85 40 a5 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5ac0],0xffffffff
c001967e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019683:	eb e3                	jmp    c0019668 <FAT::FAT()+0x30>
c0019685:	8d 76 00             	lea    esi,[esi+0x0]
c0019688:	90                   	nop
c0019689:	83 c4 1c             	add    esp,0x1c
c001968c:	c3                   	ret    
c001968d:	90                   	nop
c001968e:	66 90                	xchg   ax,ax

c0019690 <FAT::fixFilepath(char*)>:
c0019690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019694:	8a 00                	mov    al,BYTE PTR [eax]
c0019696:	0f be c0             	movsx  eax,al
c0019699:	83 f8 40             	cmp    eax,0x40
c001969c:	7e 2e                	jle    c00196cc <FAT::fixFilepath(char*)+0x3c>
c001969e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196a2:	8a 00                	mov    al,BYTE PTR [eax]
c00196a4:	83 e8 41             	sub    eax,0x41
c00196a7:	88 c2                	mov    dl,al
c00196a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196ad:	88 10                	mov    BYTE PTR [eax],dl
c00196af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196b3:	8a 00                	mov    al,BYTE PTR [eax]
c00196b5:	0f be c0             	movsx  eax,al
c00196b8:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c00196bf:	83 c0 30             	add    eax,0x30
c00196c2:	88 c2                	mov    dl,al
c00196c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196c8:	88 10                	mov    BYTE PTR [eax],dl
c00196ca:	66 90                	xchg   ax,ax
c00196cc:	90                   	nop
c00196cd:	c3                   	ret    
c00196ce:	66 90                	xchg   ax,ax

c00196d0 <FAT::open(char const*, void**, FileOpenMode)>:
c00196d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00196d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00196de:	74 0c                	je     c00196ec <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00196e0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00196e8:	75 0e                	jne    c00196f8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00196ea:	66 90                	xchg   ax,ax
c00196ec:	b8 04 00 00 00       	mov    eax,0x4
c00196f1:	e9 46 01 00 00       	jmp    c001983c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00196f6:	66 90                	xchg   ax,ax
c00196f8:	83 ec 08             	sub    esp,0x8
c00196fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019702:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019706:	50                   	push   eax
c0019707:	e8 34 6f fe ff       	call   c0000640 <strcpy>
c001970c:	83 c4 10             	add    esp,0x10
c001970f:	83 ec 08             	sub    esp,0x8
c0019712:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019716:	50                   	push   eax
c0019717:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001971e:	e8 6d ff ff ff       	call   c0019690 <FAT::fixFilepath(char*)>
c0019723:	83 c4 10             	add    esp,0x10
c0019726:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001972e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019735:	83 e0 01             	and    eax,0x1
c0019738:	74 12                	je     c001974c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001973a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019741:	83 c8 01             	or     eax,0x1
c0019744:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001974b:	90                   	nop
c001974c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019753:	83 e0 04             	and    eax,0x4
c0019756:	74 24                	je     c001977c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019758:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001975f:	83 c8 30             	or     eax,0x30
c0019762:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019769:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019770:	83 c8 02             	or     eax,0x2
c0019773:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001977a:	66 90                	xchg   ax,ax
c001977c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019783:	83 e0 02             	and    eax,0x2
c0019786:	74 14                	je     c001979c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019788:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001978f:	83 c8 02             	or     eax,0x2
c0019792:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019799:	8d 76 00             	lea    esi,[esi+0x0]
c001979c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197a3:	83 e0 08             	and    eax,0x8
c00197a6:	74 14                	je     c00197bc <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00197a8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197af:	83 c8 04             	or     eax,0x4
c00197b2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197b9:	8d 76 00             	lea    esi,[esi+0x0]
c00197bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197c3:	83 e0 10             	and    eax,0x10
c00197c6:	74 14                	je     c00197dc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00197c8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197cf:	83 c8 08             	or     eax,0x8
c00197d2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197d9:	8d 76 00             	lea    esi,[esi+0x0]
c00197dc:	83 ec 0c             	sub    esp,0xc
c00197df:	68 28 02 00 00       	push   0x228
c00197e4:	e8 cd e2 fe ff       	call   c0007ab6 <malloc>
c00197e9:	83 c4 10             	add    esp,0x10
c00197ec:	89 c2                	mov    edx,eax
c00197ee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197f5:	89 10                	mov    DWORD PTR [eax],edx
c00197f7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00197ff:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019806:	8b 00                	mov    eax,DWORD PTR [eax]
c0019808:	83 ec 04             	sub    esp,0x4
c001980b:	52                   	push   edx
c001980c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019810:	52                   	push   edx
c0019811:	50                   	push   eax
c0019812:	e8 43 a4 fe ff       	call   c0003c5a <f_open>
c0019817:	83 c4 10             	add    esp,0x10
c001981a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019821:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019829:	74 09                	je     c0019834 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001982b:	b8 01 00 00 00       	mov    eax,0x1
c0019830:	eb 0a                	jmp    c001983c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019832:	66 90                	xchg   ax,ax
c0019834:	b8 00 00 00 00       	mov    eax,0x0
c0019839:	8d 76 00             	lea    esi,[esi+0x0]
c001983c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019842:	c3                   	ret    
c0019843:	90                   	nop

c0019844 <FAT::openDir(char const*, void**)>:
c0019844:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001984a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019852:	74 0c                	je     c0019860 <FAT::openDir(char const*, void**)+0x1c>
c0019854:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001985c:	75 0e                	jne    c001986c <FAT::openDir(char const*, void**)+0x28>
c001985e:	66 90                	xchg   ax,ax
c0019860:	b8 04 00 00 00       	mov    eax,0x4
c0019865:	e9 82 00 00 00       	jmp    c00198ec <FAT::openDir(char const*, void**)+0xa8>
c001986a:	66 90                	xchg   ax,ax
c001986c:	83 ec 08             	sub    esp,0x8
c001986f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019876:	8d 44 24 18          	lea    eax,[esp+0x18]
c001987a:	50                   	push   eax
c001987b:	e8 c0 6d fe ff       	call   c0000640 <strcpy>
c0019880:	83 c4 10             	add    esp,0x10
c0019883:	83 ec 08             	sub    esp,0x8
c0019886:	8d 44 24 14          	lea    eax,[esp+0x14]
c001988a:	50                   	push   eax
c001988b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019892:	e8 f9 fd ff ff       	call   c0019690 <FAT::fixFilepath(char*)>
c0019897:	83 c4 10             	add    esp,0x10
c001989a:	83 ec 0c             	sub    esp,0xc
c001989d:	6a 30                	push   0x30
c001989f:	e8 12 e2 fe ff       	call   c0007ab6 <malloc>
c00198a4:	83 c4 10             	add    esp,0x10
c00198a7:	89 c2                	mov    edx,eax
c00198a9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198b0:	89 10                	mov    DWORD PTR [eax],edx
c00198b2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00198bb:	83 ec 08             	sub    esp,0x8
c00198be:	8d 54 24 14          	lea    edx,[esp+0x14]
c00198c2:	52                   	push   edx
c00198c3:	50                   	push   eax
c00198c4:	e8 40 ad fe ff       	call   c0004609 <f_opendir>
c00198c9:	83 c4 10             	add    esp,0x10
c00198cc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00198d3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00198db:	74 07                	je     c00198e4 <FAT::openDir(char const*, void**)+0xa0>
c00198dd:	b8 01 00 00 00       	mov    eax,0x1
c00198e2:	eb 08                	jmp    c00198ec <FAT::openDir(char const*, void**)+0xa8>
c00198e4:	b8 00 00 00 00       	mov    eax,0x0
c00198e9:	8d 76 00             	lea    esi,[esi+0x0]
c00198ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198f2:	c3                   	ret    
c00198f3:	90                   	nop

c00198f4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00198f4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00198fa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019902:	75 0c                	jne    c0019910 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019904:	b8 04 00 00 00       	mov    eax,0x4
c0019909:	e9 d6 00 00 00       	jmp    c00199e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001990e:	66 90                	xchg   ax,ax
c0019910:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019918:	75 0a                	jne    c0019924 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001991a:	b8 04 00 00 00       	mov    eax,0x4
c001991f:	e9 c0 00 00 00       	jmp    c00199e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019924:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001992c:	75 0a                	jne    c0019938 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001992e:	b8 04 00 00 00       	mov    eax,0x4
c0019933:	e9 ac 00 00 00       	jmp    c00199e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019938:	83 ec 08             	sub    esp,0x8
c001993b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019942:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019949:	50                   	push   eax
c001994a:	e8 f1 6c fe ff       	call   c0000640 <strcpy>
c001994f:	83 c4 10             	add    esp,0x10
c0019952:	83 ec 08             	sub    esp,0x8
c0019955:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001995c:	50                   	push   eax
c001995d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019964:	e8 27 fd ff ff       	call   c0019690 <FAT::fixFilepath(char*)>
c0019969:	83 c4 10             	add    esp,0x10
c001996c:	83 ec 08             	sub    esp,0x8
c001996f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019973:	50                   	push   eax
c0019974:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001997b:	50                   	push   eax
c001997c:	e8 07 ae fe ff       	call   c0004788 <f_stat>
c0019981:	83 c4 10             	add    esp,0x10
c0019984:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001998b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019992:	85 c0                	test   eax,eax
c0019994:	74 0a                	je     c00199a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019996:	83 f8 04             	cmp    eax,0x4
c0019999:	74 39                	je     c00199d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001999b:	eb 3f                	jmp    c00199dc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001999d:	8d 76 00             	lea    esi,[esi+0x0]
c00199a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00199a4:	0f b6 c0             	movzx  eax,al
c00199a7:	83 e0 10             	and    eax,0x10
c00199aa:	0f 95 c2             	setne  dl
c00199ad:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00199b4:	88 10                	mov    BYTE PTR [eax],dl
c00199b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199ba:	ba 00 00 00 00       	mov    edx,0x0
c00199bf:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00199c6:	89 01                	mov    DWORD PTR [ecx],eax
c00199c8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00199cb:	b8 00 00 00 00       	mov    eax,0x0
c00199d0:	eb 12                	jmp    c00199e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199d2:	66 90                	xchg   ax,ax
c00199d4:	b8 02 00 00 00       	mov    eax,0x2
c00199d9:	eb 09                	jmp    c00199e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199db:	90                   	nop
c00199dc:	b8 01 00 00 00       	mov    eax,0x1
c00199e1:	8d 76 00             	lea    esi,[esi+0x0]
c00199e4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00199ea:	c3                   	ret    
c00199eb:	90                   	nop

c00199ec <FAT::unlink(char const*)>:
c00199ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199fa:	75 08                	jne    c0019a04 <FAT::unlink(char const*)+0x18>
c00199fc:	b8 04 00 00 00       	mov    eax,0x4
c0019a01:	eb 61                	jmp    c0019a64 <FAT::unlink(char const*)+0x78>
c0019a03:	90                   	nop
c0019a04:	83 ec 08             	sub    esp,0x8
c0019a07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a12:	50                   	push   eax
c0019a13:	e8 28 6c fe ff       	call   c0000640 <strcpy>
c0019a18:	83 c4 10             	add    esp,0x10
c0019a1b:	83 ec 08             	sub    esp,0x8
c0019a1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a22:	50                   	push   eax
c0019a23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a2a:	e8 61 fc ff ff       	call   c0019690 <FAT::fixFilepath(char*)>
c0019a2f:	83 c4 10             	add    esp,0x10
c0019a32:	83 ec 0c             	sub    esp,0xc
c0019a35:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a39:	50                   	push   eax
c0019a3a:	e8 bb af fe ff       	call   c00049fa <f_unlink>
c0019a3f:	83 c4 10             	add    esp,0x10
c0019a42:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a49:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019a50:	85 c0                	test   eax,eax
c0019a52:	75 08                	jne    c0019a5c <FAT::unlink(char const*)+0x70>
c0019a54:	b8 00 00 00 00       	mov    eax,0x0
c0019a59:	eb 09                	jmp    c0019a64 <FAT::unlink(char const*)+0x78>
c0019a5b:	90                   	nop
c0019a5c:	b8 01 00 00 00       	mov    eax,0x1
c0019a61:	8d 76 00             	lea    esi,[esi+0x0]
c0019a64:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a6a:	c3                   	ret    
c0019a6b:	90                   	nop

c0019a6c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019a6c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a72:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019a79:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019a80:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019a84:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a88:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019a90:	75 0a                	jne    c0019a9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019a92:	b8 04 00 00 00       	mov    eax,0x4
c0019a97:	e9 7c 01 00 00       	jmp    c0019c18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019a9c:	83 ec 08             	sub    esp,0x8
c0019a9f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019aa6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019aaa:	50                   	push   eax
c0019aab:	e8 90 6b fe ff       	call   c0000640 <strcpy>
c0019ab0:	83 c4 10             	add    esp,0x10
c0019ab3:	83 ec 08             	sub    esp,0x8
c0019ab6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019aba:	50                   	push   eax
c0019abb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019ac2:	e8 c9 fb ff ff       	call   c0019690 <FAT::fixFilepath(char*)>
c0019ac7:	83 c4 10             	add    esp,0x10
c0019aca:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019ad2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019ada:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019adf:	83 e0 01             	and    eax,0x1
c0019ae2:	74 14                	je     c0019af8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019ae4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019aeb:	83 c8 01             	or     eax,0x1
c0019aee:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019af5:	8d 76 00             	lea    esi,[esi+0x0]
c0019af8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019afd:	83 e0 02             	and    eax,0x2
c0019b00:	74 12                	je     c0019b14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019b02:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b09:	83 c8 20             	or     eax,0x20
c0019b0c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b13:	90                   	nop
c0019b14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b19:	83 e0 04             	and    eax,0x4
c0019b1c:	74 12                	je     c0019b30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019b1e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b25:	83 c8 04             	or     eax,0x4
c0019b28:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b2f:	90                   	nop
c0019b30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b35:	83 e0 08             	and    eax,0x8
c0019b38:	74 12                	je     c0019b4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019b3a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b41:	83 c8 02             	or     eax,0x2
c0019b44:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b4b:	90                   	nop
c0019b4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b51:	83 e0 01             	and    eax,0x1
c0019b54:	74 12                	je     c0019b68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019b56:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b5d:	83 c8 01             	or     eax,0x1
c0019b60:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b67:	90                   	nop
c0019b68:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b6d:	83 e0 02             	and    eax,0x2
c0019b70:	74 12                	je     c0019b84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019b72:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b79:	83 c8 20             	or     eax,0x20
c0019b7c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b83:	90                   	nop
c0019b84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b89:	83 e0 04             	and    eax,0x4
c0019b8c:	74 12                	je     c0019ba0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019b8e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b95:	83 c8 04             	or     eax,0x4
c0019b98:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b9f:	90                   	nop
c0019ba0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ba5:	83 e0 08             	and    eax,0x8
c0019ba8:	74 12                	je     c0019bbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019baa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019bb1:	83 c8 02             	or     eax,0x2
c0019bb4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bbb:	90                   	nop
c0019bbc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019bc3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019bca:	09 d0                	or     eax,edx
c0019bcc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bd3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019bdb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019be3:	83 ec 04             	sub    esp,0x4
c0019be6:	52                   	push   edx
c0019be7:	50                   	push   eax
c0019be8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019bec:	50                   	push   eax
c0019bed:	e8 7d b2 fe ff       	call   c0004e6f <f_chmod>
c0019bf2:	83 c4 10             	add    esp,0x10
c0019bf5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019bfc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019c03:	85 c0                	test   eax,eax
c0019c05:	75 09                	jne    c0019c10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019c07:	b8 00 00 00 00       	mov    eax,0x0
c0019c0c:	eb 0a                	jmp    c0019c18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019c0e:	66 90                	xchg   ax,ax
c0019c10:	b8 01 00 00 00       	mov    eax,0x1
c0019c15:	8d 76 00             	lea    esi,[esi+0x0]
c0019c18:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c1e:	c3                   	ret    
c0019c1f:	90                   	nop

c0019c20 <FAT::rename(char const*, char const*)>:
c0019c20:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019c26:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019c2e:	74 0c                	je     c0019c3c <FAT::rename(char const*, char const*)+0x1c>
c0019c30:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019c38:	75 0e                	jne    c0019c48 <FAT::rename(char const*, char const*)+0x28>
c0019c3a:	66 90                	xchg   ax,ax
c0019c3c:	b8 04 00 00 00       	mov    eax,0x4
c0019c41:	e9 9e 00 00 00       	jmp    c0019ce4 <FAT::rename(char const*, char const*)+0xc4>
c0019c46:	66 90                	xchg   ax,ax
c0019c48:	83 ec 08             	sub    esp,0x8
c0019c4b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c52:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c59:	50                   	push   eax
c0019c5a:	e8 e1 69 fe ff       	call   c0000640 <strcpy>
c0019c5f:	83 c4 10             	add    esp,0x10
c0019c62:	83 ec 08             	sub    esp,0x8
c0019c65:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019c6c:	50                   	push   eax
c0019c6d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c74:	e8 17 fa ff ff       	call   c0019690 <FAT::fixFilepath(char*)>
c0019c79:	83 c4 10             	add    esp,0x10
c0019c7c:	83 ec 08             	sub    esp,0x8
c0019c7f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019c86:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c8a:	50                   	push   eax
c0019c8b:	e8 b0 69 fe ff       	call   c0000640 <strcpy>
c0019c90:	83 c4 10             	add    esp,0x10
c0019c93:	83 ec 08             	sub    esp,0x8
c0019c96:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c9a:	50                   	push   eax
c0019c9b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019ca2:	e8 e9 f9 ff ff       	call   c0019690 <FAT::fixFilepath(char*)>
c0019ca7:	83 c4 10             	add    esp,0x10
c0019caa:	83 ec 08             	sub    esp,0x8
c0019cad:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cb1:	50                   	push   eax
c0019cb2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019cb9:	50                   	push   eax
c0019cba:	e8 f8 af fe ff       	call   c0004cb7 <f_rename>
c0019cbf:	83 c4 10             	add    esp,0x10
c0019cc2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019cc9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019cd0:	85 c0                	test   eax,eax
c0019cd2:	75 08                	jne    c0019cdc <FAT::rename(char const*, char const*)+0xbc>
c0019cd4:	b8 00 00 00 00       	mov    eax,0x0
c0019cd9:	eb 09                	jmp    c0019ce4 <FAT::rename(char const*, char const*)+0xc4>
c0019cdb:	90                   	nop
c0019cdc:	b8 01 00 00 00       	mov    eax,0x1
c0019ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ce4:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019cea:	c3                   	ret    
c0019ceb:	90                   	nop

c0019cec <FAT::mkdir(char const*)>:
c0019cec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019cf2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019cfa:	75 08                	jne    c0019d04 <FAT::mkdir(char const*)+0x18>
c0019cfc:	b8 04 00 00 00       	mov    eax,0x4
c0019d01:	eb 61                	jmp    c0019d64 <FAT::mkdir(char const*)+0x78>
c0019d03:	90                   	nop
c0019d04:	83 ec 08             	sub    esp,0x8
c0019d07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d12:	50                   	push   eax
c0019d13:	e8 28 69 fe ff       	call   c0000640 <strcpy>
c0019d18:	83 c4 10             	add    esp,0x10
c0019d1b:	83 ec 08             	sub    esp,0x8
c0019d1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d22:	50                   	push   eax
c0019d23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d2a:	e8 61 f9 ff ff       	call   c0019690 <FAT::fixFilepath(char*)>
c0019d2f:	83 c4 10             	add    esp,0x10
c0019d32:	83 ec 0c             	sub    esp,0xc
c0019d35:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d39:	50                   	push   eax
c0019d3a:	e8 dd ad fe ff       	call   c0004b1c <f_mkdir>
c0019d3f:	83 c4 10             	add    esp,0x10
c0019d42:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019d49:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019d50:	85 c0                	test   eax,eax
c0019d52:	75 08                	jne    c0019d5c <FAT::mkdir(char const*)+0x70>
c0019d54:	b8 00 00 00 00       	mov    eax,0x0
c0019d59:	eb 09                	jmp    c0019d64 <FAT::mkdir(char const*)+0x78>
c0019d5b:	90                   	nop
c0019d5c:	b8 01 00 00 00       	mov    eax,0x1
c0019d61:	8d 76 00             	lea    esi,[esi+0x0]
c0019d64:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d6a:	c3                   	ret    
c0019d6b:	90                   	nop

c0019d6c <FAT::exists(char const*)>:
c0019d6c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019d72:	83 ec 08             	sub    esp,0x8
c0019d75:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d7c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d80:	50                   	push   eax
c0019d81:	e8 ba 68 fe ff       	call   c0000640 <strcpy>
c0019d86:	83 c4 10             	add    esp,0x10
c0019d89:	83 ec 08             	sub    esp,0x8
c0019d8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019d90:	50                   	push   eax
c0019d91:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d98:	e8 f3 f8 ff ff       	call   c0019690 <FAT::fixFilepath(char*)>
c0019d9d:	83 c4 10             	add    esp,0x10
c0019da0:	83 ec 08             	sub    esp,0x8
c0019da3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019daa:	50                   	push   eax
c0019dab:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019daf:	50                   	push   eax
c0019db0:	e8 d3 a9 fe ff       	call   c0004788 <f_stat>
c0019db5:	83 c4 10             	add    esp,0x10
c0019db8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019dbf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019dc6:	85 c0                	test   eax,eax
c0019dc8:	75 06                	jne    c0019dd0 <FAT::exists(char const*)+0x64>
c0019dca:	b0 01                	mov    al,0x1
c0019dcc:	eb 06                	jmp    c0019dd4 <FAT::exists(char const*)+0x68>
c0019dce:	66 90                	xchg   ax,ax
c0019dd0:	b0 00                	mov    al,0x0
c0019dd2:	66 90                	xchg   ax,ax
c0019dd4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019dda:	c3                   	ret    
c0019ddb:	90                   	nop

c0019ddc <isoReadDiscSectorHelper>:
c0019ddc:	83 ec 2c             	sub    esp,0x2c
c0019ddf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019de3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019de7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019dec:	83 e8 41             	sub    eax,0x41
c0019def:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c0019df6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019dfa:	ba 00 00 00 00       	mov    edx,0x0
c0019dff:	83 ec 0c             	sub    esp,0xc
c0019e02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e06:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019e0a:	52                   	push   edx
c0019e0b:	50                   	push   eax
c0019e0c:	51                   	push   ecx
c0019e0d:	e8 d2 3b ff ff       	call   c000d9e4 <LogicalDisk::read(unsigned long long, int, void*)>
c0019e12:	83 c4 20             	add    esp,0x20
c0019e15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e19:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019e1e:	74 0c                	je     c0019e2c <isoReadDiscSectorHelper+0x50>
c0019e20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e24:	c1 e0 0b             	shl    eax,0xb
c0019e27:	eb 0b                	jmp    c0019e34 <isoReadDiscSectorHelper+0x58>
c0019e29:	8d 76 00             	lea    esi,[esi+0x0]
c0019e2c:	b8 00 00 00 00       	mov    eax,0x0
c0019e31:	8d 76 00             	lea    esi,[esi+0x0]
c0019e34:	83 c4 2c             	add    esp,0x2c
c0019e37:	c3                   	ret    

c0019e38 <iso_kprintf>:
c0019e38:	83 ec 0c             	sub    esp,0xc
c0019e3b:	83 ec 08             	sub    esp,0x8
c0019e3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e42:	68 b6 24 02 c0       	push   0xc00224b6
c0019e47:	e8 f9 0a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019e4c:	83 c4 10             	add    esp,0x10
c0019e4f:	90                   	nop
c0019e50:	83 c4 0c             	add    esp,0xc
c0019e53:	c3                   	ret    

c0019e54 <iso_kprintfd>:
c0019e54:	83 ec 0c             	sub    esp,0xc
c0019e57:	83 ec 08             	sub    esp,0x8
c0019e5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e5e:	68 1a 0d 02 c0       	push   0xc0020d1a
c0019e63:	e8 dd 0a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019e68:	83 c4 10             	add    esp,0x10
c0019e6b:	90                   	nop
c0019e6c:	83 c4 0c             	add    esp,0xc
c0019e6f:	c3                   	ret    

c0019e70 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e70:	b8 08 00 00 00       	mov    eax,0x8
c0019e75:	c3                   	ret    

c0019e76 <ISO9660::truncate(void*, unsigned long long)>:
c0019e76:	b8 01 00 00 00       	mov    eax,0x1
c0019e7b:	c3                   	ret    

c0019e7c <ISO9660::getName()>:
c0019e7c:	b8 6c 27 02 c0       	mov    eax,0xc002276c
c0019e81:	c3                   	ret    

c0019e82 <ISO9660::closeDir(void*)>:
c0019e82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e86:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e88:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019e8b:	90                   	nop

c0019e8c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e8c:	b8 01 00 00 00       	mov    eax,0x1
c0019e91:	c3                   	ret    

c0019e92 <ISO9660::unlink(char const*)>:
c0019e92:	b8 01 00 00 00       	mov    eax,0x1
c0019e97:	c3                   	ret    

c0019e98 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019e98:	b8 03 00 00 00       	mov    eax,0x3
c0019e9d:	c3                   	ret    

c0019e9e <ISO9660::rename(char const*, char const*)>:
c0019e9e:	b8 01 00 00 00       	mov    eax,0x1
c0019ea3:	c3                   	ret    

c0019ea4 <ISO9660::mkdir(char const*)>:
c0019ea4:	b8 01 00 00 00       	mov    eax,0x1
c0019ea9:	c3                   	ret    

c0019eaa <ISO9660::~ISO9660()>:
c0019eaa:	83 ec 0c             	sub    esp,0xc
c0019ead:	ba ac 28 02 c0       	mov    edx,0xc00228ac
c0019eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eb6:	89 10                	mov    DWORD PTR [eax],edx
c0019eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ebc:	83 ec 0c             	sub    esp,0xc
c0019ebf:	50                   	push   eax
c0019ec0:	e8 f9 15 ff ff       	call   c000b4be <Filesystem::~Filesystem()>
c0019ec5:	83 c4 10             	add    esp,0x10
c0019ec8:	90                   	nop
c0019ec9:	83 c4 0c             	add    esp,0xc
c0019ecc:	c3                   	ret    
c0019ecd:	90                   	nop

c0019ece <ISO9660::~ISO9660()>:
c0019ece:	83 ec 0c             	sub    esp,0xc
c0019ed1:	83 ec 0c             	sub    esp,0xc
c0019ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ed8:	e8 cd ff ff ff       	call   c0019eaa <ISO9660::~ISO9660()>
c0019edd:	83 c4 10             	add    esp,0x10
c0019ee0:	83 ec 08             	sub    esp,0x8
c0019ee3:	6a 08                	push   0x8
c0019ee5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ee9:	e8 2a 09 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0019eee:	83 c4 10             	add    esp,0x10
c0019ef1:	83 c4 0c             	add    esp,0xc
c0019ef4:	c3                   	ret    
c0019ef5:	90                   	nop

c0019ef6 <ISO9660::exists(char const*)>:
c0019ef6:	83 ec 18             	sub    esp,0x18
c0019ef9:	68 87 27 02 c0       	push   0xc0022787
c0019efe:	e8 0a 73 ff ff       	call   c001120d <KePanic(char const*)>
c0019f03:	31 c0                	xor    eax,eax
c0019f05:	83 c4 1c             	add    esp,0x1c
c0019f08:	c3                   	ret    
c0019f09:	90                   	nop

c0019f0a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019f0a:	56                   	push   esi
c0019f0b:	53                   	push   ebx
c0019f0c:	53                   	push   ebx
c0019f0d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f11:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f15:	85 db                	test   ebx,ebx
c0019f17:	0f 84 ca 00 00 00    	je     c0019fe7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f1d:	85 f6                	test   esi,esi
c0019f1f:	0f 84 c2 00 00 00    	je     c0019fe7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f25:	b8 03 00 00 00       	mov    eax,0x3
c0019f2a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019f2f:	0f 85 b7 00 00 00    	jne    c0019fec <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f35:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019f37:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c0019f3e:	38 0d 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,cl
c0019f44:	74 1b                	je     c0019f61 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019f46:	85 c0                	test   eax,eax
c0019f48:	74 10                	je     c0019f5a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019f4a:	83 ec 0c             	sub    esp,0xc
c0019f4d:	68 a5 27 02 c0       	push   0xc00227a5
c0019f52:	e8 b6 72 ff ff       	call   c001120d <KePanic(char const*)>
c0019f57:	83 c4 10             	add    esp,0x10
c0019f5a:	8a 03                	mov    al,BYTE PTR [ebx]
c0019f5c:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c0019f61:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f64:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c0019f6b:	85 c0                	test   eax,eax
c0019f6d:	74 09                	je     c0019f78 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019f6f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019f76:	74 48                	je     c0019fc0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019f78:	83 ec 0c             	sub    esp,0xc
c0019f7b:	68 b5 27 02 c0       	push   0xc00227b5
c0019f80:	e8 c0 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019f85:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f88:	83 c4 10             	add    esp,0x10
c0019f8b:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c0019f92:	85 c0                	test   eax,eax
c0019f94:	74 17                	je     c0019fad <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019f96:	83 ec 0c             	sub    esp,0xc
c0019f99:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019fa0:	68 d5 27 02 c0       	push   0xc00227d5
c0019fa5:	e8 9b 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019faa:	83 c4 10             	add    esp,0x10
c0019fad:	83 ec 0c             	sub    esp,0xc
c0019fb0:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c0019fb7:	50                   	push   eax
c0019fb8:	e8 89 ca fe ff       	call   c0006a46 <init_percd>
c0019fbd:	83 c4 10             	add    esp,0x10
c0019fc0:	83 c3 03             	add    ebx,0x3
c0019fc3:	51                   	push   ecx
c0019fc4:	51                   	push   ecx
c0019fc5:	6a 00                	push   0x0
c0019fc7:	53                   	push   ebx
c0019fc8:	e8 40 c5 fe ff       	call   c000650d <iso_open>
c0019fcd:	83 c4 10             	add    esp,0x10
c0019fd0:	89 c2                	mov    edx,eax
c0019fd2:	b8 01 00 00 00       	mov    eax,0x1
c0019fd7:	83 fa ff             	cmp    edx,0xffffffff
c0019fda:	74 10                	je     c0019fec <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019fdc:	83 c2 32             	add    edx,0x32
c0019fdf:	31 c0                	xor    eax,eax
c0019fe1:	01 d2                	add    edx,edx
c0019fe3:	89 16                	mov    DWORD PTR [esi],edx
c0019fe5:	eb 05                	jmp    c0019fec <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019fe7:	b8 04 00 00 00       	mov    eax,0x4
c0019fec:	5a                   	pop    edx
c0019fed:	5b                   	pop    ebx
c0019fee:	5e                   	pop    esi
c0019fef:	c3                   	ret    

c0019ff0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019ff0:	53                   	push   ebx
c0019ff1:	83 ec 08             	sub    esp,0x8
c0019ff4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ff8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019ffc:	85 c0                	test   eax,eax
c0019ffe:	74 2d                	je     c001a02d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a000:	85 db                	test   ebx,ebx
c001a002:	74 29                	je     c001a02d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a004:	b9 02 00 00 00       	mov    ecx,0x2
c001a009:	52                   	push   edx
c001a00a:	99                   	cdq    
c001a00b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a00f:	f7 f9                	idiv   ecx
c001a011:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a015:	83 e8 32             	sub    eax,0x32
c001a018:	50                   	push   eax
c001a019:	e8 97 c5 fe ff       	call   c00065b5 <iso_read>
c001a01e:	83 c4 10             	add    esp,0x10
c001a021:	89 03                	mov    DWORD PTR [ebx],eax
c001a023:	09 d0                	or     eax,edx
c001a025:	0f 94 c0             	sete   al
c001a028:	0f b6 c0             	movzx  eax,al
c001a02b:	eb 05                	jmp    c001a032 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a02d:	b8 04 00 00 00       	mov    eax,0x4
c001a032:	83 c4 08             	add    esp,0x8
c001a035:	5b                   	pop    ebx
c001a036:	c3                   	ret    
c001a037:	90                   	nop

c001a038 <ISO9660::seek(void*, unsigned long long)>:
c001a038:	57                   	push   edi
c001a039:	56                   	push   esi
c001a03a:	b8 04 00 00 00       	mov    eax,0x4
c001a03f:	51                   	push   ecx
c001a040:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a044:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a048:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a04c:	85 d2                	test   edx,edx
c001a04e:	74 26                	je     c001a076 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a050:	6a 00                	push   0x0
c001a052:	b9 02 00 00 00       	mov    ecx,0x2
c001a057:	57                   	push   edi
c001a058:	89 d0                	mov    eax,edx
c001a05a:	56                   	push   esi
c001a05b:	99                   	cdq    
c001a05c:	f7 f9                	idiv   ecx
c001a05e:	83 e8 32             	sub    eax,0x32
c001a061:	50                   	push   eax
c001a062:	e8 64 c6 fe ff       	call   c00066cb <iso_seek>
c001a067:	83 c4 10             	add    esp,0x10
c001a06a:	31 f0                	xor    eax,esi
c001a06c:	31 fa                	xor    edx,edi
c001a06e:	09 d0                	or     eax,edx
c001a070:	0f 95 c0             	setne  al
c001a073:	0f b6 c0             	movzx  eax,al
c001a076:	5a                   	pop    edx
c001a077:	5e                   	pop    esi
c001a078:	5f                   	pop    edi
c001a079:	c3                   	ret    

c001a07a <ISO9660::tell(void*, unsigned long long*)>:
c001a07a:	53                   	push   ebx
c001a07b:	83 ec 08             	sub    esp,0x8
c001a07e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a082:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a086:	85 c0                	test   eax,eax
c001a088:	74 24                	je     c001a0ae <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a08a:	85 db                	test   ebx,ebx
c001a08c:	74 20                	je     c001a0ae <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a08e:	83 ec 0c             	sub    esp,0xc
c001a091:	b9 02 00 00 00       	mov    ecx,0x2
c001a096:	99                   	cdq    
c001a097:	f7 f9                	idiv   ecx
c001a099:	83 e8 32             	sub    eax,0x32
c001a09c:	50                   	push   eax
c001a09d:	e8 ad c6 fe ff       	call   c000674f <iso_tell>
c001a0a2:	83 c4 10             	add    esp,0x10
c001a0a5:	89 03                	mov    DWORD PTR [ebx],eax
c001a0a7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a0aa:	31 c0                	xor    eax,eax
c001a0ac:	eb 05                	jmp    c001a0b3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a0ae:	b8 04 00 00 00       	mov    eax,0x4
c001a0b3:	83 c4 08             	add    esp,0x8
c001a0b6:	5b                   	pop    ebx
c001a0b7:	c3                   	ret    

c001a0b8 <ISO9660::stat(void*, unsigned long long*)>:
c001a0b8:	53                   	push   ebx
c001a0b9:	83 ec 14             	sub    esp,0x14
c001a0bc:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a0c0:	68 f9 27 02 c0       	push   0xc00227f9
c001a0c5:	e8 7b 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a0ca:	83 c4 10             	add    esp,0x10
c001a0cd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0d2:	74 2c                	je     c001a100 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a0d4:	85 db                	test   ebx,ebx
c001a0d6:	74 28                	je     c001a100 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a0d8:	83 ec 0c             	sub    esp,0xc
c001a0db:	b9 02 00 00 00       	mov    ecx,0x2
c001a0e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a0e4:	99                   	cdq    
c001a0e5:	f7 f9                	idiv   ecx
c001a0e7:	83 e8 32             	sub    eax,0x32
c001a0ea:	50                   	push   eax
c001a0eb:	e8 90 c6 fe ff       	call   c0006780 <iso_total>
c001a0f0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a0f7:	89 03                	mov    DWORD PTR [ebx],eax
c001a0f9:	83 c4 10             	add    esp,0x10
c001a0fc:	31 c0                	xor    eax,eax
c001a0fe:	eb 05                	jmp    c001a105 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a100:	b8 04 00 00 00       	mov    eax,0x4
c001a105:	83 c4 08             	add    esp,0x8
c001a108:	5b                   	pop    ebx
c001a109:	c3                   	ret    

c001a10a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a10a:	55                   	push   ebp
c001a10b:	57                   	push   edi
c001a10c:	56                   	push   esi
c001a10d:	53                   	push   ebx
c001a10e:	83 ec 18             	sub    esp,0x18
c001a111:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a115:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a119:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a11d:	68 01 28 02 c0       	push   0xc0022801
c001a122:	e8 1e 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a127:	83 c4 10             	add    esp,0x10
c001a12a:	85 ff                	test   edi,edi
c001a12c:	0f 94 c0             	sete   al
c001a12f:	85 f6                	test   esi,esi
c001a131:	0f 94 c2             	sete   dl
c001a134:	09 d0                	or     eax,edx
c001a136:	a8 01                	test   al,0x1
c001a138:	0f 85 dd 00 00 00    	jne    c001a21b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a13e:	85 db                	test   ebx,ebx
c001a140:	0f 84 d5 00 00 00    	je     c001a21b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a146:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a149:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a14f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a156:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a15d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a15f:	38 0d 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,cl
c001a165:	74 1b                	je     c001a182 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a167:	85 c0                	test   eax,eax
c001a169:	74 10                	je     c001a17b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a16b:	83 ec 0c             	sub    esp,0xc
c001a16e:	68 a5 27 02 c0       	push   0xc00227a5
c001a173:	e8 95 70 ff ff       	call   c001120d <KePanic(char const*)>
c001a178:	83 c4 10             	add    esp,0x10
c001a17b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a17d:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c001a182:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a185:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a18c:	85 c0                	test   eax,eax
c001a18e:	74 09                	je     c001a199 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a190:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a197:	74 51                	je     c001a1ea <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a199:	83 ec 0c             	sub    esp,0xc
c001a19c:	68 09 28 02 c0       	push   0xc0022809
c001a1a1:	e8 9f 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a1a6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1a9:	83 c4 10             	add    esp,0x10
c001a1ac:	83 3c 85 dc 93 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6c24],0x0
c001a1b4:	74 21                	je     c001a1d7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a1b6:	83 ec 0c             	sub    esp,0xc
c001a1b9:	68 29 28 02 c0       	push   0xc0022829
c001a1be:	e8 82 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a1c3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1c6:	83 c4 10             	add    esp,0x10
c001a1c9:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a1d0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a1d7:	83 ec 0c             	sub    esp,0xc
c001a1da:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a1e1:	50                   	push   eax
c001a1e2:	e8 5f c8 fe ff       	call   c0006a46 <init_percd>
c001a1e7:	83 c4 10             	add    esp,0x10
c001a1ea:	83 c3 03             	add    ebx,0x3
c001a1ed:	52                   	push   edx
c001a1ee:	52                   	push   edx
c001a1ef:	6a 00                	push   0x0
c001a1f1:	53                   	push   ebx
c001a1f2:	e8 16 c3 fe ff       	call   c000650d <iso_open>
c001a1f7:	83 c4 10             	add    esp,0x10
c001a1fa:	89 c5                	mov    ebp,eax
c001a1fc:	83 f8 ff             	cmp    eax,0xffffffff
c001a1ff:	75 21                	jne    c001a222 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a201:	50                   	push   eax
c001a202:	50                   	push   eax
c001a203:	6a 01                	push   0x1
c001a205:	53                   	push   ebx
c001a206:	e8 02 c3 fe ff       	call   c000650d <iso_open>
c001a20b:	83 c4 10             	add    esp,0x10
c001a20e:	ba 02 00 00 00       	mov    edx,0x2
c001a213:	40                   	inc    eax
c001a214:	74 2b                	je     c001a241 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a216:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a219:	eb 24                	jmp    c001a23f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a21b:	ba 04 00 00 00       	mov    edx,0x4
c001a220:	eb 1f                	jmp    c001a241 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a222:	83 ec 0c             	sub    esp,0xc
c001a225:	50                   	push   eax
c001a226:	e8 55 c5 fe ff       	call   c0006780 <iso_total>
c001a22b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a232:	89 07                	mov    DWORD PTR [edi],eax
c001a234:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a237:	e8 5b c3 fe ff       	call   c0006597 <iso_close>
c001a23c:	83 c4 10             	add    esp,0x10
c001a23f:	31 d2                	xor    edx,edx
c001a241:	83 c4 0c             	add    esp,0xc
c001a244:	89 d0                	mov    eax,edx
c001a246:	5b                   	pop    ebx
c001a247:	5e                   	pop    esi
c001a248:	5f                   	pop    edi
c001a249:	5d                   	pop    ebp
c001a24a:	c3                   	ret    
c001a24b:	90                   	nop

c001a24c <ISO9660::close(void*)>:
c001a24c:	83 ec 0c             	sub    esp,0xc
c001a24f:	b8 04 00 00 00       	mov    eax,0x4
c001a254:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a258:	85 d2                	test   edx,edx
c001a25a:	74 1b                	je     c001a277 <ISO9660::close(void*)+0x2b>
c001a25c:	83 ec 0c             	sub    esp,0xc
c001a25f:	b9 02 00 00 00       	mov    ecx,0x2
c001a264:	89 d0                	mov    eax,edx
c001a266:	99                   	cdq    
c001a267:	f7 f9                	idiv   ecx
c001a269:	83 e8 32             	sub    eax,0x32
c001a26c:	50                   	push   eax
c001a26d:	e8 25 c3 fe ff       	call   c0006597 <iso_close>
c001a272:	83 c4 10             	add    esp,0x10
c001a275:	31 c0                	xor    eax,eax
c001a277:	83 c4 0c             	add    esp,0xc
c001a27a:	c3                   	ret    
c001a27b:	90                   	nop

c001a27c <ISO9660::openDir(char const*, void**)>:
c001a27c:	56                   	push   esi
c001a27d:	53                   	push   ebx
c001a27e:	50                   	push   eax
c001a27f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a283:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a287:	85 db                	test   ebx,ebx
c001a289:	0f 84 bd 00 00 00    	je     c001a34c <ISO9660::openDir(char const*, void**)+0xd0>
c001a28f:	85 f6                	test   esi,esi
c001a291:	0f 84 b5 00 00 00    	je     c001a34c <ISO9660::openDir(char const*, void**)+0xd0>
c001a297:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a299:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a2a0:	38 15 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,dl
c001a2a6:	74 1b                	je     c001a2c3 <ISO9660::openDir(char const*, void**)+0x47>
c001a2a8:	85 c0                	test   eax,eax
c001a2aa:	74 10                	je     c001a2bc <ISO9660::openDir(char const*, void**)+0x40>
c001a2ac:	83 ec 0c             	sub    esp,0xc
c001a2af:	68 a5 27 02 c0       	push   0xc00227a5
c001a2b4:	e8 54 6f ff ff       	call   c001120d <KePanic(char const*)>
c001a2b9:	83 c4 10             	add    esp,0x10
c001a2bc:	8a 03                	mov    al,BYTE PTR [ebx]
c001a2be:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c001a2c3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2c6:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a2cd:	85 c0                	test   eax,eax
c001a2cf:	74 10                	je     c001a2e1 <ISO9660::openDir(char const*, void**)+0x65>
c001a2d1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a2d8:	74 1a                	je     c001a2f4 <ISO9660::openDir(char const*, void**)+0x78>
c001a2da:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a2e1:	83 ec 0c             	sub    esp,0xc
c001a2e4:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a2eb:	50                   	push   eax
c001a2ec:	e8 55 c7 fe ff       	call   c0006a46 <init_percd>
c001a2f1:	83 c4 10             	add    esp,0x10
c001a2f4:	83 c3 03             	add    ebx,0x3
c001a2f7:	50                   	push   eax
c001a2f8:	50                   	push   eax
c001a2f9:	6a 01                	push   0x1
c001a2fb:	53                   	push   ebx
c001a2fc:	e8 0c c2 fe ff       	call   c000650d <iso_open>
c001a301:	83 c4 10             	add    esp,0x10
c001a304:	89 c3                	mov    ebx,eax
c001a306:	83 f8 ff             	cmp    eax,0xffffffff
c001a309:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a30e:	75 1c                	jne    c001a32c <ISO9660::openDir(char const*, void**)+0xb0>
c001a310:	53                   	push   ebx
c001a311:	53                   	push   ebx
c001a312:	68 4d 28 02 c0       	push   0xc002284d
c001a317:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a31d:	e8 84 e7 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a322:	83 c4 10             	add    esp,0x10
c001a325:	b8 01 00 00 00       	mov    eax,0x1
c001a32a:	eb 25                	jmp    c001a351 <ISO9660::openDir(char const*, void**)+0xd5>
c001a32c:	01 db                	add    ebx,ebx
c001a32e:	51                   	push   ecx
c001a32f:	83 c3 65             	add    ebx,0x65
c001a332:	51                   	push   ecx
c001a333:	68 60 28 02 c0       	push   0xc0022860
c001a338:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a33e:	e8 63 e7 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a343:	89 1e                	mov    DWORD PTR [esi],ebx
c001a345:	83 c4 10             	add    esp,0x10
c001a348:	31 c0                	xor    eax,eax
c001a34a:	eb 05                	jmp    c001a351 <ISO9660::openDir(char const*, void**)+0xd5>
c001a34c:	b8 04 00 00 00       	mov    eax,0x4
c001a351:	5a                   	pop    edx
c001a352:	5b                   	pop    ebx
c001a353:	5e                   	pop    esi
c001a354:	c3                   	ret    
c001a355:	90                   	nop

c001a356 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a356:	55                   	push   ebp
c001a357:	57                   	push   edi
c001a358:	56                   	push   esi
c001a359:	53                   	push   ebx
c001a35a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a360:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a367:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a36e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a376:	0f 84 e7 00 00 00    	je     c001a463 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a37c:	85 db                	test   ebx,ebx
c001a37e:	0f 84 df 00 00 00    	je     c001a463 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a384:	83 ec 0c             	sub    esp,0xc
c001a387:	68 73 28 02 c0       	push   0xc0022873
c001a38c:	e8 b4 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a391:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a398:	b9 02 00 00 00       	mov    ecx,0x2
c001a39d:	99                   	cdq    
c001a39e:	f7 f9                	idiv   ecx
c001a3a0:	83 e8 32             	sub    eax,0x32
c001a3a3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3a6:	e8 27 c4 fe ff       	call   c00067d2 <iso_readdir>
c001a3ab:	83 c4 10             	add    esp,0x10
c001a3ae:	89 c6                	mov    esi,eax
c001a3b0:	85 c0                	test   eax,eax
c001a3b2:	75 37                	jne    c001a3eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a3b4:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a3b9:	56                   	push   esi
c001a3ba:	56                   	push   esi
c001a3bb:	68 7e 28 02 c0       	push   0xc002287e
c001a3c0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a3c6:	e8 db e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a3cb:	83 c4 0c             	add    esp,0xc
c001a3ce:	68 10 01 00 00       	push   0x110
c001a3d3:	6a 00                	push   0x0
c001a3d5:	57                   	push   edi
c001a3d6:	e8 15 61 fe ff       	call   c00004f0 <memset>
c001a3db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a3e1:	83 c4 10             	add    esp,0x10
c001a3e4:	b8 01 00 00 00       	mov    eax,0x1
c001a3e9:	eb 7d                	jmp    c001a468 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a3eb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a3f1:	8d 68 08             	lea    ebp,[eax+0x8]
c001a3f4:	83 ec 0c             	sub    esp,0xc
c001a3f7:	55                   	push   ebp
c001a3f8:	e8 73 61 fe ff       	call   c0000570 <strlen>
c001a3fd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a405:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a409:	83 c4 10             	add    esp,0x10
c001a40c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a410:	75 0a                	jne    c001a41c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a412:	b8 02 00 00 00       	mov    eax,0x2
c001a417:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a41a:	74 05                	je     c001a421 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a41c:	b8 01 00 00 00       	mov    eax,0x1
c001a421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a425:	50                   	push   eax
c001a426:	50                   	push   eax
c001a427:	55                   	push   ebp
c001a428:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a42c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a430:	50                   	push   eax
c001a431:	e8 0a 62 fe ff       	call   c0000640 <strcpy>
c001a436:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a43d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a43f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a445:	5a                   	pop    edx
c001a446:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a44b:	59                   	pop    ecx
c001a44c:	68 91 28 02 c0       	push   0xc0022891
c001a451:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a457:	e8 4a e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a45c:	83 c4 10             	add    esp,0x10
c001a45f:	31 c0                	xor    eax,eax
c001a461:	eb 05                	jmp    c001a468 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a463:	b8 04 00 00 00       	mov    eax,0x4
c001a468:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a46e:	5b                   	pop    ebx
c001a46f:	5e                   	pop    esi
c001a470:	5f                   	pop    edi
c001a471:	5d                   	pop    ebp
c001a472:	c3                   	ret    

c001a473 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a473:	57                   	push   edi
c001a474:	56                   	push   esi
c001a475:	53                   	push   ebx
c001a476:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a47a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a47e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a482:	39 35 24 a6 02 c0    	cmp    DWORD PTR ds:0xc002a624,esi
c001a488:	0f be cb             	movsx  ecx,bl
c001a48b:	75 0b                	jne    c001a498 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a48d:	0f be 05 c0 36 02 c0 	movsx  eax,BYTE PTR ds:0xc00236c0
c001a494:	39 c8                	cmp    eax,ecx
c001a496:	74 47                	je     c001a4df <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a498:	83 ec 0c             	sub    esp,0xc
c001a49b:	31 d2                	xor    edx,edx
c001a49d:	68 40 a6 02 c0       	push   0xc002a640
c001a4a2:	6a 01                	push   0x1
c001a4a4:	52                   	push   edx
c001a4a5:	56                   	push   esi
c001a4a6:	ff 34 8d dc 93 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6c24]
c001a4ad:	e8 32 35 ff ff       	call   c000d9e4 <LogicalDisk::read(unsigned long long, int, void*)>
c001a4b2:	83 c4 20             	add    esp,0x20
c001a4b5:	85 c0                	test   eax,eax
c001a4b7:	75 0e                	jne    c001a4c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a4b9:	89 35 24 a6 02 c0    	mov    DWORD PTR ds:0xc002a624,esi
c001a4bf:	88 1d c0 36 02 c0    	mov    BYTE PTR ds:0xc00236c0,bl
c001a4c5:	eb 18                	jmp    c001a4df <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a4c7:	50                   	push   eax
c001a4c8:	68 00 08 00 00       	push   0x800
c001a4cd:	6a 00                	push   0x0
c001a4cf:	57                   	push   edi
c001a4d0:	e8 1b 60 fe ff       	call   c00004f0 <memset>
c001a4d5:	83 c4 10             	add    esp,0x10
c001a4d8:	b8 01 00 00 00       	mov    eax,0x1
c001a4dd:	eb 0e                	jmp    c001a4ed <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a4df:	be 40 a6 02 c0       	mov    esi,0xc002a640
c001a4e4:	b9 00 08 00 00       	mov    ecx,0x800
c001a4e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4eb:	31 c0                	xor    eax,eax
c001a4ed:	5b                   	pop    ebx
c001a4ee:	5e                   	pop    esi
c001a4ef:	5f                   	pop    edi
c001a4f0:	c3                   	ret    
c001a4f1:	90                   	nop

c001a4f2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a4f2:	53                   	push   ebx
c001a4f3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a4f9:	c7 05 24 a6 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a624,0xdeadbeef
c001a503:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a50a:	8d 58 41             	lea    ebx,[eax+0x41]
c001a50d:	0f be db             	movsx  ebx,bl
c001a510:	53                   	push   ebx
c001a511:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a515:	50                   	push   eax
c001a516:	6a 10                	push   0x10
c001a518:	e8 56 ff ff ff       	call   c001a473 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a51d:	83 c4 10             	add    esp,0x10
c001a520:	31 d2                	xor    edx,edx
c001a522:	85 c0                	test   eax,eax
c001a524:	75 33                	jne    c001a559 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a526:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a52b:	75 2c                	jne    c001a559 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a52d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a532:	75 25                	jne    c001a559 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a534:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a539:	75 1e                	jne    c001a559 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a53b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a540:	75 17                	jne    c001a559 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a542:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a547:	75 10                	jne    c001a559 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a549:	83 ec 0c             	sub    esp,0xc
c001a54c:	53                   	push   ebx
c001a54d:	e8 f4 c4 fe ff       	call   c0006a46 <init_percd>
c001a552:	83 c4 10             	add    esp,0x10
c001a555:	40                   	inc    eax
c001a556:	0f 95 c2             	setne  dl
c001a559:	88 d0                	mov    al,dl
c001a55b:	81 c4 08 08 00 00    	add    esp,0x808
c001a561:	5b                   	pop    ebx
c001a562:	c3                   	ret    
c001a563:	90                   	nop

c001a564 <ISO9660::ISO9660()>:
c001a564:	83 ec 0c             	sub    esp,0xc
c001a567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a56b:	83 ec 0c             	sub    esp,0xc
c001a56e:	50                   	push   eax
c001a56f:	e8 26 0f ff ff       	call   c000b49a <Filesystem::Filesystem()>
c001a574:	83 c4 10             	add    esp,0x10
c001a577:	ba ac 28 02 c0       	mov    edx,0xc00228ac
c001a57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a580:	89 10                	mov    DWORD PTR [eax],edx
c001a582:	e8 d1 c5 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a587:	90                   	nop
c001a588:	83 c4 0c             	add    esp,0xc
c001a58b:	c3                   	ret    

c001a58c <SoundCard::beginPlayback()>:
c001a58c:	c7 44 24 04 10 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022910
c001a594:	e9 74 6c ff ff       	jmp    c001120d <KePanic(char const*)>
c001a599:	90                   	nop

c001a59a <SoundCard::stopPlayback()>:
c001a59a:	c7 44 24 04 10 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022910
c001a5a2:	e9 66 6c ff ff       	jmp    c001120d <KePanic(char const*)>
c001a5a7:	90                   	nop

c001a5a8 <SoundCard::SoundCard(char const*)>:
c001a5a8:	83 ec 1c             	sub    esp,0x1c
c001a5ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5af:	83 ec 08             	sub    esp,0x8
c001a5b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5b6:	50                   	push   eax
c001a5b7:	e8 de 21 ff ff       	call   c000c79a <Device::Device(char const*)>
c001a5bc:	83 c4 10             	add    esp,0x10
c001a5bf:	ba 5c 29 02 c0       	mov    edx,0xc002295c
c001a5c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5c8:	89 10                	mov    DWORD PTR [eax],edx
c001a5ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5ce:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a5d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5d9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a5e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5e7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a5f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5f5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a5ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a603:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a60d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a615:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a61a:	7f 1a                	jg     c001a636 <SoundCard::SoundCard(char const*)+0x8e>
c001a61c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a624:	83 c2 54             	add    edx,0x54
c001a627:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a62f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a634:	eb df                	jmp    c001a615 <SoundCard::SoundCard(char const*)+0x6d>
c001a636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a63a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a641:	90                   	nop
c001a642:	83 c4 1c             	add    esp,0x1c
c001a645:	c3                   	ret    

c001a646 <SoundCard::~SoundCard()>:
c001a646:	83 ec 0c             	sub    esp,0xc
c001a649:	ba 5c 29 02 c0       	mov    edx,0xc002295c
c001a64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a652:	89 10                	mov    DWORD PTR [eax],edx
c001a654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a658:	83 ec 0c             	sub    esp,0xc
c001a65b:	50                   	push   eax
c001a65c:	e8 a3 1e ff ff       	call   c000c504 <Device::~Device()>
c001a661:	83 c4 10             	add    esp,0x10
c001a664:	90                   	nop
c001a665:	83 c4 0c             	add    esp,0xc
c001a668:	c3                   	ret    
c001a669:	90                   	nop

c001a66a <SoundCard::~SoundCard()>:
c001a66a:	83 ec 0c             	sub    esp,0xc
c001a66d:	83 ec 0c             	sub    esp,0xc
c001a670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a674:	e8 cd ff ff ff       	call   c001a646 <SoundCard::~SoundCard()>
c001a679:	83 c4 10             	add    esp,0x10
c001a67c:	83 ec 08             	sub    esp,0x8
c001a67f:	68 e8 01 00 00       	push   0x1e8
c001a684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a688:	e8 8b 01 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a68d:	83 c4 10             	add    esp,0x10
c001a690:	83 c4 0c             	add    esp,0xc
c001a693:	c3                   	ret    

c001a694 <SoundCard::configureRates(int, int, int)>:
c001a694:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a698:	31 c0                	xor    eax,eax
c001a69a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a6a1:	75 20                	jne    c001a6c3 <SoundCard::configureRates(int, int, int)+0x2f>
c001a6a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6a7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a6ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6b1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6bb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a6c1:	b0 01                	mov    al,0x1
c001a6c3:	c3                   	ret    

c001a6c4 <SoundCard::getSamples16(int, short*)>:
c001a6c4:	55                   	push   ebp
c001a6c5:	57                   	push   edi
c001a6c6:	31 ff                	xor    edi,edi
c001a6c8:	56                   	push   esi
c001a6c9:	53                   	push   ebx
c001a6ca:	31 db                	xor    ebx,ebx
c001a6cc:	83 ec 10             	sub    esp,0x10
c001a6cf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a6d3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a6d7:	8d 04 36             	lea    eax,[esi+esi*1]
c001a6da:	50                   	push   eax
c001a6db:	6a 00                	push   0x0
c001a6dd:	55                   	push   ebp
c001a6de:	e8 0d 5e fe ff       	call   c00004f0 <memset>
c001a6e3:	83 c4 10             	add    esp,0x10
c001a6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ea:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a6f1:	85 c0                	test   eax,eax
c001a6f3:	74 1b                	je     c001a710 <SoundCard::getSamples16(int, short*)+0x4c>
c001a6f5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a6f9:	75 15                	jne    c001a710 <SoundCard::getSamples16(int, short*)+0x4c>
c001a6fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a6ff:	55                   	push   ebp
c001a700:	56                   	push   esi
c001a701:	50                   	push   eax
c001a702:	e8 f1 02 00 00       	call   c001a9f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a707:	83 c4 10             	add    esp,0x10
c001a70a:	39 c7                	cmp    edi,eax
c001a70c:	7d 02                	jge    c001a710 <SoundCard::getSamples16(int, short*)+0x4c>
c001a70e:	89 c7                	mov    edi,eax
c001a710:	43                   	inc    ebx
c001a711:	83 fb 20             	cmp    ebx,0x20
c001a714:	75 d0                	jne    c001a6e6 <SoundCard::getSamples16(int, short*)+0x22>
c001a716:	83 c4 0c             	add    esp,0xc
c001a719:	89 f8                	mov    eax,edi
c001a71b:	5b                   	pop    ebx
c001a71c:	5e                   	pop    esi
c001a71d:	5f                   	pop    edi
c001a71e:	5d                   	pop    ebp
c001a71f:	c3                   	ret    

c001a720 <SoundCard::getSamples32(int, int*)>:
c001a720:	55                   	push   ebp
c001a721:	57                   	push   edi
c001a722:	31 ff                	xor    edi,edi
c001a724:	56                   	push   esi
c001a725:	31 f6                	xor    esi,esi
c001a727:	53                   	push   ebx
c001a728:	83 ec 10             	sub    esp,0x10
c001a72b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a72f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a733:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a737:	c1 e0 02             	shl    eax,0x2
c001a73a:	50                   	push   eax
c001a73b:	6a 00                	push   0x0
c001a73d:	55                   	push   ebp
c001a73e:	e8 ad 5d fe ff       	call   c00004f0 <memset>
c001a743:	83 c4 10             	add    esp,0x10
c001a746:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a74d:	85 c0                	test   eax,eax
c001a74f:	74 1b                	je     c001a76c <SoundCard::getSamples32(int, int*)+0x4c>
c001a751:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a755:	75 15                	jne    c001a76c <SoundCard::getSamples32(int, int*)+0x4c>
c001a757:	53                   	push   ebx
c001a758:	55                   	push   ebp
c001a759:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a75d:	50                   	push   eax
c001a75e:	e8 61 03 00 00       	call   c001aac4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a763:	83 c4 10             	add    esp,0x10
c001a766:	39 c6                	cmp    esi,eax
c001a768:	7d 02                	jge    c001a76c <SoundCard::getSamples32(int, int*)+0x4c>
c001a76a:	89 c6                	mov    esi,eax
c001a76c:	47                   	inc    edi
c001a76d:	83 ff 20             	cmp    edi,0x20
c001a770:	75 d4                	jne    c001a746 <SoundCard::getSamples32(int, int*)+0x26>
c001a772:	85 f6                	test   esi,esi
c001a774:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a77b:	75 0f                	jne    c001a78c <SoundCard::getSamples32(int, int*)+0x6c>
c001a77d:	85 c0                	test   eax,eax
c001a77f:	74 1b                	je     c001a79c <SoundCard::getSamples32(int, int*)+0x7c>
c001a781:	83 ec 0c             	sub    esp,0xc
c001a784:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a786:	53                   	push   ebx
c001a787:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a78a:	eb 0d                	jmp    c001a799 <SoundCard::getSamples32(int, int*)+0x79>
c001a78c:	85 c0                	test   eax,eax
c001a78e:	75 0c                	jne    c001a79c <SoundCard::getSamples32(int, int*)+0x7c>
c001a790:	83 ec 0c             	sub    esp,0xc
c001a793:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a795:	53                   	push   ebx
c001a796:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a799:	83 c4 10             	add    esp,0x10
c001a79c:	83 c4 0c             	add    esp,0xc
c001a79f:	89 f0                	mov    eax,esi
c001a7a1:	5b                   	pop    ebx
c001a7a2:	5e                   	pop    esi
c001a7a3:	5f                   	pop    edi
c001a7a4:	5d                   	pop    ebp
c001a7a5:	c3                   	ret    

c001a7a6 <SoundCard::addChannel(SoundPort*)>:
c001a7a6:	83 ec 0c             	sub    esp,0xc
c001a7a9:	31 c0                	xor    eax,eax
c001a7ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a7af:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a7b7:	74 1b                	je     c001a7d4 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a7b9:	40                   	inc    eax
c001a7ba:	83 f8 20             	cmp    eax,0x20
c001a7bd:	75 f0                	jne    c001a7af <SoundCard::addChannel(SoundPort*)+0x9>
c001a7bf:	83 ec 0c             	sub    esp,0xc
c001a7c2:	68 35 29 02 c0       	push   0xc0022935
c001a7c7:	e8 41 6a ff ff       	call   c001120d <KePanic(char const*)>
c001a7cc:	83 c4 10             	add    esp,0x10
c001a7cf:	83 c8 ff             	or     eax,0xffffffff
c001a7d2:	eb 0b                	jmp    c001a7df <SoundCard::addChannel(SoundPort*)+0x39>
c001a7d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a7d8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a7df:	83 c4 0c             	add    esp,0xc
c001a7e2:	c3                   	ret    
c001a7e3:	90                   	nop

c001a7e4 <SoundCard::removeChannel(int)>:
c001a7e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a7ec:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a7f7:	c3                   	ret    

c001a7f8 <SoundPort::SoundPort(int, int, int, int)>:
c001a7f8:	83 ec 0c             	sub    esp,0xc
c001a7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7ff:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a80a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a812:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a816:	89 10                	mov    DWORD PTR [eax],edx
c001a818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a81c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a820:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a827:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a82b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a82e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a833:	75 13                	jne    c001a848 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a839:	8b 00                	mov    eax,DWORD PTR [eax]
c001a83b:	05 a0 0f 00 00       	add    eax,0xfa0
c001a840:	01 c0                	add    eax,eax
c001a842:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a846:	66 90                	xchg   ax,ax
c001a848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a84c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a850:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a857:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a862:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a865:	c1 e0 02             	shl    eax,0x2
c001a868:	83 ec 0c             	sub    esp,0xc
c001a86b:	50                   	push   eax
c001a86c:	e8 45 d2 fe ff       	call   c0007ab6 <malloc>
c001a871:	83 c4 10             	add    esp,0x10
c001a874:	89 c2                	mov    edx,eax
c001a876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a87a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a87d:	90                   	nop
c001a87e:	83 c4 0c             	add    esp,0xc
c001a881:	c3                   	ret    
c001a882:	66 90                	xchg   ax,ax

c001a884 <SoundPort::~SoundPort()>:
c001a884:	83 ec 0c             	sub    esp,0xc
c001a887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a88b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a88e:	85 c0                	test   eax,eax
c001a890:	74 1e                	je     c001a8b0 <SoundPort::~SoundPort()+0x2c>
c001a892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a896:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a899:	83 ec 0c             	sub    esp,0xc
c001a89c:	50                   	push   eax
c001a89d:	e8 24 d2 fe ff       	call   c0007ac6 <free>
c001a8a2:	83 c4 10             	add    esp,0x10
c001a8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a8b0:	90                   	nop
c001a8b1:	83 c4 0c             	add    esp,0xc
c001a8b4:	c3                   	ret    
c001a8b5:	90                   	nop
c001a8b6:	66 90                	xchg   ax,ax

c001a8b8 <SoundPort::unpause()>:
c001a8b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8bc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a8c0:	c3                   	ret    
c001a8c1:	90                   	nop
c001a8c2:	66 90                	xchg   ax,ax

c001a8c4 <SoundPort::pause()>:
c001a8c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a8cc:	c3                   	ret    
c001a8cd:	90                   	nop
c001a8ce:	66 90                	xchg   ax,ax

c001a8d0 <SoundPort::getBufferUsed()>:
c001a8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a8d7:	c3                   	ret    

c001a8d8 <SoundPort::getBufferSize()>:
c001a8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8df:	c3                   	ret    

c001a8e0 <SoundPort::buffer16(short*, int)>:
c001a8e0:	55                   	push   ebp
c001a8e1:	57                   	push   edi
c001a8e2:	56                   	push   esi
c001a8e3:	53                   	push   ebx
c001a8e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8e8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a8ec:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a8ef:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a8f2:	74 68                	je     c001a95c <SoundPort::buffer16(short*, int)+0x7c>
c001a8f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a8f8:	85 c9                	test   ecx,ecx
c001a8fa:	7e 60                	jle    c001a95c <SoundPort::buffer16(short*, int)+0x7c>
c001a8fc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a900:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a903:	c1 e1 0f             	shl    ecx,0xf
c001a906:	8d 70 01             	lea    esi,[eax+0x1]
c001a909:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a90c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a90f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a912:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a915:	74 4d                	je     c001a964 <SoundPort::buffer16(short*, int)+0x84>
c001a917:	31 f6                	xor    esi,esi
c001a919:	eb 21                	jmp    c001a93c <SoundPort::buffer16(short*, int)+0x5c>
c001a91b:	90                   	nop
c001a91c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a921:	8d 79 01             	lea    edi,[ecx+0x1]
c001a924:	c1 e3 0f             	shl    ebx,0xf
c001a927:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a92a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a92d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a930:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a933:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a936:	74 1c                	je     c001a954 <SoundPort::buffer16(short*, int)+0x74>
c001a938:	89 c6                	mov    esi,eax
c001a93a:	66 90                	xchg   ax,ax
c001a93c:	8d 46 01             	lea    eax,[esi+0x1]
c001a93f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a943:	75 d7                	jne    c001a91c <SoundPort::buffer16(short*, int)+0x3c>
c001a945:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a949:	8d 76 00             	lea    esi,[esi+0x0]
c001a94c:	5b                   	pop    ebx
c001a94d:	5e                   	pop    esi
c001a94e:	5f                   	pop    edi
c001a94f:	5d                   	pop    ebp
c001a950:	c3                   	ret    
c001a951:	8d 76 00             	lea    esi,[esi+0x0]
c001a954:	5b                   	pop    ebx
c001a955:	8d 46 02             	lea    eax,[esi+0x2]
c001a958:	5e                   	pop    esi
c001a959:	5f                   	pop    edi
c001a95a:	5d                   	pop    ebp
c001a95b:	c3                   	ret    
c001a95c:	5b                   	pop    ebx
c001a95d:	31 c0                	xor    eax,eax
c001a95f:	5e                   	pop    esi
c001a960:	5f                   	pop    edi
c001a961:	5d                   	pop    ebp
c001a962:	c3                   	ret    
c001a963:	90                   	nop
c001a964:	b8 01 00 00 00       	mov    eax,0x1
c001a969:	eb e1                	jmp    c001a94c <SoundPort::buffer16(short*, int)+0x6c>
c001a96b:	90                   	nop

c001a96c <SoundPort::buffer32(int*, int)>:
c001a96c:	55                   	push   ebp
c001a96d:	57                   	push   edi
c001a96e:	56                   	push   esi
c001a96f:	53                   	push   ebx
c001a970:	83 ec 04             	sub    esp,0x4
c001a973:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a97b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a97e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a982:	89 04 24             	mov    DWORD PTR [esp],eax
c001a985:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a988:	74 5a                	je     c001a9e4 <SoundPort::buffer32(int*, int)+0x78>
c001a98a:	85 c0                	test   eax,eax
c001a98c:	7e 56                	jle    c001a9e4 <SoundPort::buffer32(int*, int)+0x78>
c001a98e:	8d 71 01             	lea    esi,[ecx+0x1]
c001a991:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a994:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a997:	8b 37                	mov    esi,DWORD PTR [edi]
c001a999:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a99c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a99f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9a2:	74 4c                	je     c001a9f0 <SoundPort::buffer32(int*, int)+0x84>
c001a9a4:	31 f6                	xor    esi,esi
c001a9a6:	eb 1c                	jmp    c001a9c4 <SoundPort::buffer32(int*, int)+0x58>
c001a9a8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a9ab:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a9ae:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a9b1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a9b4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a9b8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9bb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9be:	74 18                	je     c001a9d8 <SoundPort::buffer32(int*, int)+0x6c>
c001a9c0:	89 de                	mov    esi,ebx
c001a9c2:	66 90                	xchg   ax,ax
c001a9c4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a9c7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a9ca:	75 dc                	jne    c001a9a8 <SoundPort::buffer32(int*, int)+0x3c>
c001a9cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a9cf:	90                   	nop
c001a9d0:	83 c4 04             	add    esp,0x4
c001a9d3:	5b                   	pop    ebx
c001a9d4:	5e                   	pop    esi
c001a9d5:	5f                   	pop    edi
c001a9d6:	5d                   	pop    ebp
c001a9d7:	c3                   	ret    
c001a9d8:	83 c4 04             	add    esp,0x4
c001a9db:	8d 46 02             	lea    eax,[esi+0x2]
c001a9de:	5b                   	pop    ebx
c001a9df:	5e                   	pop    esi
c001a9e0:	5f                   	pop    edi
c001a9e1:	5d                   	pop    ebp
c001a9e2:	c3                   	ret    
c001a9e3:	90                   	nop
c001a9e4:	83 c4 04             	add    esp,0x4
c001a9e7:	31 c0                	xor    eax,eax
c001a9e9:	5b                   	pop    ebx
c001a9ea:	5e                   	pop    esi
c001a9eb:	5f                   	pop    edi
c001a9ec:	5d                   	pop    ebp
c001a9ed:	c3                   	ret    
c001a9ee:	66 90                	xchg   ax,ax
c001a9f0:	b8 01 00 00 00       	mov    eax,0x1
c001a9f5:	eb d9                	jmp    c001a9d0 <SoundPort::buffer32(int*, int)+0x64>
c001a9f7:	90                   	nop

c001a9f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a9f8:	57                   	push   edi
c001a9f9:	56                   	push   esi
c001a9fa:	53                   	push   ebx
c001a9fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9ff:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aa03:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001aa09:	39 03                	cmp    DWORD PTR [ebx],eax
c001aa0b:	74 13                	je     c001aa20 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001aa0d:	83 ec 0c             	sub    esp,0xc
c001aa10:	68 88 29 02 c0       	push   0xc0022988
c001aa15:	e8 f3 67 ff ff       	call   c001120d <KePanic(char const*)>
c001aa1a:	83 c4 10             	add    esp,0x10
c001aa1d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa20:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001aa26:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aa29:	74 11                	je     c001aa3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001aa2b:	83 ec 0c             	sub    esp,0xc
c001aa2e:	68 c7 29 02 c0       	push   0xc00229c7
c001aa33:	e8 d5 67 ff ff       	call   c001120d <KePanic(char const*)>
c001aa38:	83 c4 10             	add    esp,0x10
c001aa3b:	90                   	nop
c001aa3c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001aa42:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aa45:	74 11                	je     c001aa58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001aa47:	83 ec 0c             	sub    esp,0xc
c001aa4a:	68 c7 29 02 c0       	push   0xc00229c7
c001aa4f:	e8 b9 67 ff ff       	call   c001120d <KePanic(char const*)>
c001aa54:	83 c4 10             	add    esp,0x10
c001aa57:	90                   	nop
c001aa58:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001aa5b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001aa5f:	7e 07                	jle    c001aa68 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001aa61:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa65:	8d 76 00             	lea    esi,[esi+0x0]
c001aa68:	85 f6                	test   esi,esi
c001aa6a:	7e 2c                	jle    c001aa98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001aa6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa70:	8d 3c 36             	lea    edi,[esi+esi*1]
c001aa73:	31 c9                	xor    ecx,ecx
c001aa75:	01 d7                	add    edi,edx
c001aa77:	90                   	nop
c001aa78:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001aa7b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001aa7e:	85 c0                	test   eax,eax
c001aa80:	79 06                	jns    c001aa88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001aa82:	05 ff 7f 00 00       	add    eax,0x7fff
c001aa87:	90                   	nop
c001aa88:	c1 f8 0f             	sar    eax,0xf
c001aa8b:	83 c1 04             	add    ecx,0x4
c001aa8e:	66 01 02             	add    WORD PTR [edx],ax
c001aa91:	83 c2 02             	add    edx,0x2
c001aa94:	39 d7                	cmp    edi,edx
c001aa96:	75 e0                	jne    c001aa78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001aa98:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa9b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aa9e:	83 ec 04             	sub    esp,0x4
c001aaa1:	29 f0                	sub    eax,esi
c001aaa3:	c1 e0 02             	shl    eax,0x2
c001aaa6:	50                   	push   eax
c001aaa7:	8d 04 b2             	lea    eax,[edx+esi*4]
c001aaaa:	50                   	push   eax
c001aaab:	52                   	push   edx
c001aaac:	e8 1f 59 fe ff       	call   c00003d0 <memmove>
c001aab1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aab4:	83 c4 10             	add    esp,0x10
c001aab7:	29 f0                	sub    eax,esi
c001aab9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aabc:	89 f0                	mov    eax,esi
c001aabe:	5b                   	pop    ebx
c001aabf:	5e                   	pop    esi
c001aac0:	5f                   	pop    edi
c001aac1:	c3                   	ret    
c001aac2:	66 90                	xchg   ax,ax

c001aac4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001aac4:	57                   	push   edi
c001aac5:	56                   	push   esi
c001aac6:	53                   	push   ebx
c001aac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aacb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aacf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aad3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001aad9:	39 06                	cmp    DWORD PTR [esi],eax
c001aadb:	74 13                	je     c001aaf0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001aadd:	83 ec 0c             	sub    esp,0xc
c001aae0:	68 a8 29 02 c0       	push   0xc00229a8
c001aae5:	e8 23 67 ff ff       	call   c001120d <KePanic(char const*)>
c001aaea:	83 c4 10             	add    esp,0x10
c001aaed:	8d 76 00             	lea    esi,[esi+0x0]
c001aaf0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001aaf6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001aaf9:	74 11                	je     c001ab0c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001aafb:	83 ec 0c             	sub    esp,0xc
c001aafe:	68 e3 29 02 c0       	push   0xc00229e3
c001ab03:	e8 05 67 ff ff       	call   c001120d <KePanic(char const*)>
c001ab08:	83 c4 10             	add    esp,0x10
c001ab0b:	90                   	nop
c001ab0c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ab12:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ab15:	74 11                	je     c001ab28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ab17:	83 ec 0c             	sub    esp,0xc
c001ab1a:	68 e3 29 02 c0       	push   0xc00229e3
c001ab1f:	e8 e9 66 ff ff       	call   c001120d <KePanic(char const*)>
c001ab24:	83 c4 10             	add    esp,0x10
c001ab27:	90                   	nop
c001ab28:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ab2b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ab2f:	7e 07                	jle    c001ab38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ab31:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab35:	8d 76 00             	lea    esi,[esi+0x0]
c001ab38:	85 ff                	test   edi,edi
c001ab3a:	7e 1c                	jle    c001ab58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ab3c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ab43:	31 c0                	xor    eax,eax
c001ab45:	8d 76 00             	lea    esi,[esi+0x0]
c001ab48:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ab4b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ab4e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ab51:	83 c0 04             	add    eax,0x4
c001ab54:	39 c1                	cmp    ecx,eax
c001ab56:	75 f0                	jne    c001ab48 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ab58:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ab5b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ab5e:	83 ec 04             	sub    esp,0x4
c001ab61:	29 f8                	sub    eax,edi
c001ab63:	c1 e0 02             	shl    eax,0x2
c001ab66:	50                   	push   eax
c001ab67:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ab6a:	50                   	push   eax
c001ab6b:	52                   	push   edx
c001ab6c:	e8 5f 58 fe ff       	call   c00003d0 <memmove>
c001ab71:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	29 f8                	sub    eax,edi
c001ab79:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001ab7c:	89 f8                	mov    eax,edi
c001ab7e:	5b                   	pop    ebx
c001ab7f:	5e                   	pop    esi
c001ab80:	5f                   	pop    edi
c001ab81:	c3                   	ret    

c001ab82 <PCI::open(int, int, void*)>:
c001ab82:	83 ec 18             	sub    esp,0x18
c001ab85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab8d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ab93:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab95:	50                   	push   eax
c001ab96:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ab99:	31 c0                	xor    eax,eax
c001ab9b:	83 c4 1c             	add    esp,0x1c
c001ab9e:	c3                   	ret    
c001ab9f:	90                   	nop

c001aba0 <PCI::close(int, int, void*)>:
c001aba0:	31 c0                	xor    eax,eax
c001aba2:	c3                   	ret    
c001aba3:	90                   	nop

c001aba4 <PCI::PCI()>:
c001aba4:	83 ec 0c             	sub    esp,0xc
c001aba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abab:	83 ec 08             	sub    esp,0x8
c001abae:	68 ff 29 02 c0       	push   0xc00229ff
c001abb3:	50                   	push   eax
c001abb4:	e8 ab 13 ff ff       	call   c000bf64 <Bus::Bus(char const*)>
c001abb9:	83 c4 10             	add    esp,0x10
c001abbc:	ba a8 2a 02 c0       	mov    edx,0xc0022aa8
c001abc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc5:	89 10                	mov    DWORD PTR [eax],edx
c001abc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abcb:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001abd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd9:	a3 40 ae 02 c0       	mov    ds:0xc002ae40,eax
c001abde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abe8:	0f b6 d0             	movzx  edx,al
c001abeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abef:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001abf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abfa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac00:	0f b6 d0             	movzx  edx,al
c001ac03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac07:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ac0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac16:	8d 50 01             	lea    edx,[eax+0x1]
c001ac19:	88 d1                	mov    cl,dl
c001ac1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac1f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ac25:	0f b6 d0             	movzx  edx,al
c001ac28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ac30:	83 c9 c0             	or     ecx,0xffffffc0
c001ac33:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ac37:	90                   	nop
c001ac38:	83 c4 0c             	add    esp,0xc
c001ac3b:	c3                   	ret    

c001ac3c <PCI::readBAR8(unsigned int, int)>:
c001ac3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac44:	f6 c2 01             	test   dl,0x1
c001ac47:	74 07                	je     c001ac50 <PCI::readBAR8(unsigned int, int)+0x14>
c001ac49:	83 e2 fc             	and    edx,0xfffffffc
c001ac4c:	01 c2                	add    edx,eax
c001ac4e:	ec                   	in     al,dx
c001ac4f:	c3                   	ret    
c001ac50:	83 e2 f0             	and    edx,0xfffffff0
c001ac53:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ac56:	c3                   	ret    
c001ac57:	90                   	nop

c001ac58 <PCI::readBAR16(unsigned int, int)>:
c001ac58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac60:	f6 c2 01             	test   dl,0x1
c001ac63:	74 08                	je     c001ac6d <PCI::readBAR16(unsigned int, int)+0x15>
c001ac65:	83 e2 fc             	and    edx,0xfffffffc
c001ac68:	01 c2                	add    edx,eax
c001ac6a:	66 ed                	in     ax,dx
c001ac6c:	c3                   	ret    
c001ac6d:	83 e2 f0             	and    edx,0xfffffff0
c001ac70:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ac74:	c3                   	ret    
c001ac75:	90                   	nop

c001ac76 <PCI::readBAR32(unsigned int, int)>:
c001ac76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac7e:	f6 c2 01             	test   dl,0x1
c001ac81:	74 07                	je     c001ac8a <PCI::readBAR32(unsigned int, int)+0x14>
c001ac83:	83 e2 fc             	and    edx,0xfffffffc
c001ac86:	01 c2                	add    edx,eax
c001ac88:	ed                   	in     eax,dx
c001ac89:	c3                   	ret    
c001ac8a:	83 e2 f0             	and    edx,0xfffffff0
c001ac8d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ac90:	c3                   	ret    
c001ac91:	90                   	nop

c001ac92 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ac92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac9e:	f6 c2 01             	test   dl,0x1
c001aca1:	74 07                	je     c001acaa <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001aca3:	83 e2 fc             	and    edx,0xfffffffc
c001aca6:	01 ca                	add    edx,ecx
c001aca8:	ee                   	out    dx,al
c001aca9:	c3                   	ret    
c001acaa:	83 e2 f0             	and    edx,0xfffffff0
c001acad:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001acb0:	c3                   	ret    
c001acb1:	90                   	nop

c001acb2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001acb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acbe:	f6 c2 01             	test   dl,0x1
c001acc1:	74 08                	je     c001accb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001acc3:	83 e2 fc             	and    edx,0xfffffffc
c001acc6:	01 ca                	add    edx,ecx
c001acc8:	66 ef                	out    dx,ax
c001acca:	c3                   	ret    
c001accb:	83 e2 f0             	and    edx,0xfffffff0
c001acce:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001acd2:	c3                   	ret    
c001acd3:	90                   	nop

c001acd4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001acd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acdc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ace0:	f6 c2 01             	test   dl,0x1
c001ace3:	74 07                	je     c001acec <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ace5:	83 e2 fc             	and    edx,0xfffffffc
c001ace8:	01 ca                	add    edx,ecx
c001acea:	ef                   	out    dx,eax
c001aceb:	c3                   	ret    
c001acec:	83 e2 f0             	and    edx,0xfffffff0
c001acef:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001acf2:	c3                   	ret    
c001acf3:	90                   	nop

c001acf4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001acf4:	55                   	push   ebp
c001acf5:	57                   	push   edi
c001acf6:	56                   	push   esi
c001acf7:	53                   	push   ebx
c001acf8:	83 ec 0c             	sub    esp,0xc
c001acfb:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ad00:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ad04:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ad08:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ad0c:	83 fe 07             	cmp    esi,0x7
c001ad0f:	76 10                	jbe    c001ad21 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ad11:	83 ec 0c             	sub    esp,0xc
c001ad14:	68 07 2a 02 c0       	push   0xc0022a07
c001ad19:	e8 ef 64 ff ff       	call   c001120d <KePanic(char const*)>
c001ad1e:	83 c4 10             	add    esp,0x10
c001ad21:	0f b6 db             	movzx  ebx,bl
c001ad24:	83 fb 0f             	cmp    ebx,0xf
c001ad27:	76 10                	jbe    c001ad39 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ad29:	83 ec 0c             	sub    esp,0xc
c001ad2c:	68 37 2a 02 c0       	push   0xc0022a37
c001ad31:	e8 d7 64 ff ff       	call   c001120d <KePanic(char const*)>
c001ad36:	83 c4 10             	add    esp,0x10
c001ad39:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad3c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad41:	83 c8 f0             	or     eax,0xfffffff0
c001ad44:	ee                   	out    dx,al
c001ad45:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ad4a:	89 e8                	mov    eax,ebp
c001ad4c:	ee                   	out    dx,al
c001ad4d:	83 c4 0c             	add    esp,0xc
c001ad50:	89 d8                	mov    eax,ebx
c001ad52:	89 f9                	mov    ecx,edi
c001ad54:	c1 e0 08             	shl    eax,0x8
c001ad57:	0f b6 d9             	movzx  ebx,cl
c001ad5a:	83 e3 fc             	and    ebx,0xfffffffc
c001ad5d:	09 d8                	or     eax,ebx
c001ad5f:	5b                   	pop    ebx
c001ad60:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ad65:	5e                   	pop    esi
c001ad66:	5f                   	pop    edi
c001ad67:	5d                   	pop    ebp
c001ad68:	c3                   	ret    
c001ad69:	90                   	nop

c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad6a:	57                   	push   edi
c001ad6b:	56                   	push   esi
c001ad6c:	53                   	push   ebx
c001ad6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad75:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ad7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad7f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ad83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad87:	83 ff 01             	cmp    edi,0x1
c001ad8a:	75 3f                	jne    c001adcb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ad8c:	89 de                	mov    esi,ebx
c001ad8e:	0f b6 c0             	movzx  eax,al
c001ad91:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ad97:	c1 e0 10             	shl    eax,0x10
c001ad9a:	0f b6 c9             	movzx  ecx,cl
c001ad9d:	09 f0                	or     eax,esi
c001ad9f:	c1 e1 08             	shl    ecx,0x8
c001ada2:	0f b6 d2             	movzx  edx,dl
c001ada5:	09 c8                	or     eax,ecx
c001ada7:	c1 e2 0b             	shl    edx,0xb
c001adaa:	09 d0                	or     eax,edx
c001adac:	ba f8 0c 00 00       	mov    edx,0xcf8
c001adb1:	0d 00 00 00 80       	or     eax,0x80000000
c001adb6:	ef                   	out    dx,eax
c001adb7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001adbc:	ed                   	in     eax,dx
c001adbd:	83 e3 02             	and    ebx,0x2
c001adc0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001adc7:	d3 e8                	shr    eax,cl
c001adc9:	eb 44                	jmp    c001ae0f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001adcb:	83 ff 02             	cmp    edi,0x2
c001adce:	75 2d                	jne    c001adfd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001add0:	83 ec 0c             	sub    esp,0xc
c001add3:	0f b6 c9             	movzx  ecx,cl
c001add6:	0f b6 d2             	movzx  edx,dl
c001add9:	0f b6 fb             	movzx  edi,bl
c001addc:	0f b6 c0             	movzx  eax,al
c001addf:	57                   	push   edi
c001ade0:	51                   	push   ecx
c001ade1:	52                   	push   edx
c001ade2:	50                   	push   eax
c001ade3:	56                   	push   esi
c001ade4:	e8 0b ff ff ff       	call   c001acf4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ade9:	89 c2                	mov    edx,eax
c001adeb:	ed                   	in     eax,dx
c001adec:	83 e3 02             	and    ebx,0x2
c001adef:	83 c4 20             	add    esp,0x20
c001adf2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001adf9:	d3 e8                	shr    eax,cl
c001adfb:	eb 12                	jmp    c001ae0f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001adfd:	83 ec 0c             	sub    esp,0xc
c001ae00:	68 67 2a 02 c0       	push   0xc0022a67
c001ae05:	e8 03 64 ff ff       	call   c001120d <KePanic(char const*)>
c001ae0a:	83 c4 10             	add    esp,0x10
c001ae0d:	31 c0                	xor    eax,eax
c001ae0f:	5b                   	pop    ebx
c001ae10:	5e                   	pop    esi
c001ae11:	5f                   	pop    edi
c001ae12:	c3                   	ret    
c001ae13:	90                   	nop

c001ae14 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ae14:	83 ec 18             	sub    esp,0x18
c001ae17:	6a 00                	push   0x0
c001ae19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae1e:	50                   	push   eax
c001ae1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae24:	50                   	push   eax
c001ae25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae2a:	50                   	push   eax
c001ae2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae2f:	e8 36 ff ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae34:	83 c4 2c             	add    esp,0x2c
c001ae37:	c3                   	ret    

c001ae38 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ae38:	83 ec 18             	sub    esp,0x18
c001ae3b:	6a 0e                	push   0xe
c001ae3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae42:	50                   	push   eax
c001ae43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae48:	50                   	push   eax
c001ae49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae4e:	50                   	push   eax
c001ae4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae53:	e8 12 ff ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae58:	83 c4 2c             	add    esp,0x2c
c001ae5b:	0f b6 c0             	movzx  eax,al
c001ae5e:	c3                   	ret    
c001ae5f:	90                   	nop

c001ae60 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ae60:	55                   	push   ebp
c001ae61:	57                   	push   edi
c001ae62:	56                   	push   esi
c001ae63:	53                   	push   ebx
c001ae64:	83 ec 18             	sub    esp,0x18
c001ae67:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ae6c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ae71:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ae76:	6a 0a                	push   0xa
c001ae78:	56                   	push   esi
c001ae79:	55                   	push   ebp
c001ae7a:	57                   	push   edi
c001ae7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae7f:	e8 e6 fe ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae84:	83 c4 14             	add    esp,0x14
c001ae87:	89 c3                	mov    ebx,eax
c001ae89:	6a 0a                	push   0xa
c001ae8b:	0f b6 db             	movzx  ebx,bl
c001ae8e:	56                   	push   esi
c001ae8f:	55                   	push   ebp
c001ae90:	57                   	push   edi
c001ae91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae95:	e8 d0 fe ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae9a:	83 c4 2c             	add    esp,0x2c
c001ae9d:	25 00 ff 00 00       	and    eax,0xff00
c001aea2:	09 d8                	or     eax,ebx
c001aea4:	5b                   	pop    ebx
c001aea5:	5e                   	pop    esi
c001aea6:	5f                   	pop    edi
c001aea7:	5d                   	pop    ebp
c001aea8:	c3                   	ret    
c001aea9:	90                   	nop

c001aeaa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001aeaa:	83 ec 18             	sub    esp,0x18
c001aead:	6a 08                	push   0x8
c001aeaf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeb4:	50                   	push   eax
c001aeb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeba:	50                   	push   eax
c001aebb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aec0:	50                   	push   eax
c001aec1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aec5:	e8 a0 fe ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aeca:	83 c4 2c             	add    esp,0x2c
c001aecd:	0f b6 c4             	movzx  eax,ah
c001aed0:	c3                   	ret    
c001aed1:	90                   	nop

c001aed2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001aed2:	83 ec 18             	sub    esp,0x18
c001aed5:	6a 08                	push   0x8
c001aed7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aedc:	50                   	push   eax
c001aedd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aee2:	50                   	push   eax
c001aee3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aee8:	50                   	push   eax
c001aee9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeed:	e8 78 fe ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aef2:	83 c4 2c             	add    esp,0x2c
c001aef5:	c3                   	ret    

c001aef6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001aef6:	83 ec 18             	sub    esp,0x18
c001aef9:	6a 3c                	push   0x3c
c001aefb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af00:	50                   	push   eax
c001af01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af06:	50                   	push   eax
c001af07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af0c:	50                   	push   eax
c001af0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af11:	e8 54 fe ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af16:	83 c4 2c             	add    esp,0x2c
c001af19:	c3                   	ret    

c001af1a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001af1a:	83 ec 18             	sub    esp,0x18
c001af1d:	6a 18                	push   0x18
c001af1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af24:	50                   	push   eax
c001af25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af2a:	50                   	push   eax
c001af2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af30:	50                   	push   eax
c001af31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af35:	e8 30 fe ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af3a:	83 c4 2c             	add    esp,0x2c
c001af3d:	0f b6 c4             	movzx  eax,ah
c001af40:	c3                   	ret    
c001af41:	90                   	nop

c001af42 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af42:	55                   	push   ebp
c001af43:	57                   	push   edi
c001af44:	56                   	push   esi
c001af45:	53                   	push   ebx
c001af46:	83 ec 28             	sub    esp,0x28
c001af49:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001af4d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001af52:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001af57:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001af5c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001af63:	8d 43 12             	lea    eax,[ebx+0x12]
c001af66:	83 c3 10             	add    ebx,0x10
c001af69:	0f b6 c0             	movzx  eax,al
c001af6c:	0f b6 db             	movzx  ebx,bl
c001af6f:	50                   	push   eax
c001af70:	51                   	push   ecx
c001af71:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001af75:	57                   	push   edi
c001af76:	55                   	push   ebp
c001af77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af7b:	e8 ea fd ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af80:	83 c4 14             	add    esp,0x14
c001af83:	89 c6                	mov    esi,eax
c001af85:	53                   	push   ebx
c001af86:	c1 e6 10             	shl    esi,0x10
c001af89:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af8d:	51                   	push   ecx
c001af8e:	57                   	push   edi
c001af8f:	55                   	push   ebp
c001af90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af94:	e8 d1 fd ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af99:	83 c4 3c             	add    esp,0x3c
c001af9c:	0f b7 c0             	movzx  eax,ax
c001af9f:	5b                   	pop    ebx
c001afa0:	09 f0                	or     eax,esi
c001afa2:	5e                   	pop    esi
c001afa3:	5f                   	pop    edi
c001afa4:	5d                   	pop    ebp
c001afa5:	c3                   	ret    

c001afa6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001afa6:	55                   	push   ebp
c001afa7:	57                   	push   edi
c001afa8:	56                   	push   esi
c001afa9:	53                   	push   ebx
c001afaa:	83 ec 0c             	sub    esp,0xc
c001afad:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001afb1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001afb5:	89 f5                	mov    ebp,esi
c001afb7:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001afbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afc5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001afc9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001afcd:	83 f9 01             	cmp    ecx,0x1
c001afd0:	75 5d                	jne    c001b02f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001afd2:	0f b6 c8             	movzx  ecx,al
c001afd5:	0f b6 d2             	movzx  edx,dl
c001afd8:	c1 e1 10             	shl    ecx,0x10
c001afdb:	c1 e2 0b             	shl    edx,0xb
c001afde:	89 f0                	mov    eax,esi
c001afe0:	25 fc 00 00 00       	and    eax,0xfc
c001afe5:	09 c1                	or     ecx,eax
c001afe7:	89 e8                	mov    eax,ebp
c001afe9:	0f b6 c0             	movzx  eax,al
c001afec:	c1 e0 08             	shl    eax,0x8
c001afef:	09 c1                	or     ecx,eax
c001aff1:	09 d1                	or     ecx,edx
c001aff3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aff8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001affe:	89 c8                	mov    eax,ecx
c001b000:	ef                   	out    dx,eax
c001b001:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b006:	ed                   	in     eax,dx
c001b007:	0f b7 db             	movzx  ebx,bx
c001b00a:	83 e6 02             	and    esi,0x2
c001b00d:	74 0a                	je     c001b019 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b00f:	0f b7 d0             	movzx  edx,ax
c001b012:	c1 e3 10             	shl    ebx,0x10
c001b015:	09 d3                	or     ebx,edx
c001b017:	eb 05                	jmp    c001b01e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b019:	66 31 c0             	xor    ax,ax
c001b01c:	09 c3                	or     ebx,eax
c001b01e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b023:	89 c8                	mov    eax,ecx
c001b025:	ef                   	out    dx,eax
c001b026:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b02b:	89 d8                	mov    eax,ebx
c001b02d:	eb 41                	jmp    c001b070 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b02f:	83 f9 02             	cmp    ecx,0x2
c001b032:	75 45                	jne    c001b079 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b034:	83 ec 0c             	sub    esp,0xc
c001b037:	0f b6 d2             	movzx  edx,dl
c001b03a:	89 f1                	mov    ecx,esi
c001b03c:	0f b6 c0             	movzx  eax,al
c001b03f:	0f b6 f1             	movzx  esi,cl
c001b042:	89 e9                	mov    ecx,ebp
c001b044:	56                   	push   esi
c001b045:	0f b6 c9             	movzx  ecx,cl
c001b048:	51                   	push   ecx
c001b049:	52                   	push   edx
c001b04a:	50                   	push   eax
c001b04b:	57                   	push   edi
c001b04c:	e8 a3 fc ff ff       	call   c001acf4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b051:	89 c2                	mov    edx,eax
c001b053:	ed                   	in     eax,dx
c001b054:	83 c4 20             	add    esp,0x20
c001b057:	0f b7 db             	movzx  ebx,bx
c001b05a:	f6 c2 02             	test   dl,0x2
c001b05d:	74 0c                	je     c001b06b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b05f:	0f b7 c8             	movzx  ecx,ax
c001b062:	89 d8                	mov    eax,ebx
c001b064:	c1 e0 10             	shl    eax,0x10
c001b067:	09 c8                	or     eax,ecx
c001b069:	eb 05                	jmp    c001b070 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b06b:	66 31 c0             	xor    ax,ax
c001b06e:	09 d8                	or     eax,ebx
c001b070:	ef                   	out    dx,eax
c001b071:	83 c4 0c             	add    esp,0xc
c001b074:	5b                   	pop    ebx
c001b075:	5e                   	pop    esi
c001b076:	5f                   	pop    edi
c001b077:	5d                   	pop    ebp
c001b078:	c3                   	ret    
c001b079:	c7 44 24 20 67 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022a67
c001b081:	83 c4 0c             	add    esp,0xc
c001b084:	5b                   	pop    ebx
c001b085:	5e                   	pop    esi
c001b086:	5f                   	pop    edi
c001b087:	5d                   	pop    ebp
c001b088:	e9 80 61 ff ff       	jmp    c001120d <KePanic(char const*)>
c001b08d:	90                   	nop

c001b08e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b08e:	55                   	push   ebp
c001b08f:	57                   	push   edi
c001b090:	56                   	push   esi
c001b091:	53                   	push   ebx
c001b092:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b098:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b09f:	80 3d 4c ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae4c,0x0
c001b0a6:	0f 85 bd 00 00 00    	jne    c001b169 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b0ac:	83 ec 0c             	sub    esp,0xc
c001b0af:	68 14 01 00 00       	push   0x114
c001b0b4:	e8 fd c9 fe ff       	call   c0007ab6 <malloc>
c001b0b9:	83 c4 0c             	add    esp,0xc
c001b0bc:	89 c3                	mov    ebx,eax
c001b0be:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001b0c4:	68 6d 2a 02 c0       	push   0xc0022a6d
c001b0c9:	50                   	push   eax
c001b0ca:	e8 2b 06 ff ff       	call   c000b6fa <File::File(char const*, Process*)>
c001b0cf:	83 c4 10             	add    esp,0x10
c001b0d2:	85 db                	test   ebx,ebx
c001b0d4:	0f 84 67 02 00 00    	je     c001b341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b0da:	56                   	push   esi
c001b0db:	56                   	push   esi
c001b0dc:	6a 01                	push   0x1
c001b0de:	53                   	push   ebx
c001b0df:	e8 d2 06 ff ff       	call   c000b7b6 <File::open(FileOpenMode)>
c001b0e4:	83 c4 10             	add    esp,0x10
c001b0e7:	85 c0                	test   eax,eax
c001b0e9:	0f 85 52 02 00 00    	jne    c001b341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b0ef:	52                   	push   edx
c001b0f0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b0f4:	50                   	push   eax
c001b0f5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b0f9:	50                   	push   eax
c001b0fa:	53                   	push   ebx
c001b0fb:	e8 b8 09 ff ff       	call   c000bab8 <File::stat(unsigned long long*, bool*)>
c001b100:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b104:	40                   	inc    eax
c001b105:	89 04 24             	mov    DWORD PTR [esp],eax
c001b108:	e8 a9 c9 fe ff       	call   c0007ab6 <malloc>
c001b10d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b111:	a3 48 ae 02 c0       	mov    ds:0xc002ae48,eax
c001b116:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b11a:	59                   	pop    ecx
c001b11b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b11d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b121:	51                   	push   ecx
c001b122:	50                   	push   eax
c001b123:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b127:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b12b:	53                   	push   ebx
c001b12c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b12f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b133:	83 c4 20             	add    esp,0x20
c001b136:	89 c8                	mov    eax,ecx
c001b138:	99                   	cdq    
c001b139:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b13d:	0f 85 fe 01 00 00    	jne    c001b341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b143:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b147:	0f 85 f4 01 00 00    	jne    c001b341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b14d:	83 ec 0c             	sub    esp,0xc
c001b150:	53                   	push   ebx
c001b151:	e8 be 06 ff ff       	call   c000b814 <File::close()>
c001b156:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b15a:	c6 05 4c ae 02 c0 01 	mov    BYTE PTR ds:0xc002ae4c,0x1
c001b161:	a3 44 ae 02 c0       	mov    ds:0xc002ae44,eax
c001b166:	83 c4 10             	add    esp,0x10
c001b169:	a1 44 ae 02 c0       	mov    eax,ds:0xc002ae44
c001b16e:	8b 1d 48 ae 02 c0    	mov    ebx,DWORD PTR ds:0xc002ae48
c001b174:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b178:	31 f6                	xor    esi,esi
c001b17a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b182:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b189:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b18e:	31 c9                	xor    ecx,ecx
c001b190:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b198:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b19d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b1a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b1a9:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b1b1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b1b5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b1b9:	0f 8e 82 01 00 00    	jle    c001b341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b1bf:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b1c2:	d4 40                	aam    0x40
c001b1c4:	d5 39                	aad    0x39
c001b1c6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b1ca:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b1ce:	d4 40                	aam    0x40
c001b1d0:	d5 39                	aad    0x39
c001b1d2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b1d6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b1da:	d4 40                	aam    0x40
c001b1dc:	d5 39                	aad    0x39
c001b1de:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b1e2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b1e6:	d4 40                	aam    0x40
c001b1e8:	d5 39                	aad    0x39
c001b1ea:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b1ee:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b1f2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b1f6:	3c 56                	cmp    al,0x56
c001b1f8:	74 43                	je     c001b23d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b1fa:	d4 40                	aam    0x40
c001b1fc:	d5 39                	aad    0x39
c001b1fe:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b201:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b205:	0f b6 c9             	movzx  ecx,cl
c001b208:	c1 e1 04             	shl    ecx,0x4
c001b20b:	d4 40                	aam    0x40
c001b20d:	d5 39                	aad    0x39
c001b20f:	83 e8 30             	sub    eax,0x30
c001b212:	0f b6 c0             	movzx  eax,al
c001b215:	09 c1                	or     ecx,eax
c001b217:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b21b:	c1 e1 04             	shl    ecx,0x4
c001b21e:	d4 40                	aam    0x40
c001b220:	d5 39                	aad    0x39
c001b222:	83 e8 30             	sub    eax,0x30
c001b225:	0f b6 c0             	movzx  eax,al
c001b228:	09 c1                	or     ecx,eax
c001b22a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b22e:	c1 e1 04             	shl    ecx,0x4
c001b231:	d4 40                	aam    0x40
c001b233:	d5 39                	aad    0x39
c001b235:	83 e8 30             	sub    eax,0x30
c001b238:	0f b6 c0             	movzx  eax,al
c001b23b:	09 c1                	or     ecx,eax
c001b23d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b241:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b245:	3c 58                	cmp    al,0x58
c001b247:	74 47                	je     c001b290 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b249:	d4 40                	aam    0x40
c001b24b:	d5 39                	aad    0x39
c001b24d:	8d 50 d0             	lea    edx,[eax-0x30]
c001b250:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b254:	0f b6 d2             	movzx  edx,dl
c001b257:	c1 e2 04             	shl    edx,0x4
c001b25a:	d4 40                	aam    0x40
c001b25c:	d5 39                	aad    0x39
c001b25e:	83 e8 30             	sub    eax,0x30
c001b261:	0f b6 c0             	movzx  eax,al
c001b264:	09 c2                	or     edx,eax
c001b266:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b26a:	c1 e2 04             	shl    edx,0x4
c001b26d:	d4 40                	aam    0x40
c001b26f:	d5 39                	aad    0x39
c001b271:	83 e8 30             	sub    eax,0x30
c001b274:	0f b6 c0             	movzx  eax,al
c001b277:	09 c2                	or     edx,eax
c001b279:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b27d:	c1 e2 04             	shl    edx,0x4
c001b280:	d4 40                	aam    0x40
c001b282:	d5 39                	aad    0x39
c001b284:	83 e8 30             	sub    eax,0x30
c001b287:	0f b6 c0             	movzx  eax,al
c001b28a:	09 c2                	or     edx,eax
c001b28c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b290:	83 c6 10             	add    esi,0x10
c001b293:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b297:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b29b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b29f:	83 fa 0a             	cmp    edx,0xa
c001b2a2:	74 0b                	je     c001b2af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b2a4:	47                   	inc    edi
c001b2a5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b2a9:	75 19                	jne    c001b2c4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b2ab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b2af:	31 c0                	xor    eax,eax
c001b2b1:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b2b6:	0f 94 c0             	sete   al
c001b2b9:	01 c6                	add    esi,eax
c001b2bb:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b2c0:	75 0b                	jne    c001b2cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b2c2:	eb 14                	jmp    c001b2d8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b2c4:	46                   	inc    esi
c001b2c5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b2c8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b2cb:	eb ca                	jmp    c001b297 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b2cd:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b2d2:	0f 85 dd fe ff ff    	jne    c001b1b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b2d8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b2dd:	74 10                	je     c001b2ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b2df:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b2e4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b2e9:	0f 85 c6 fe ff ff    	jne    c001b1b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b2ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2f3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b2f7:	83 e8 30             	sub    eax,0x30
c001b2fa:	83 ef 30             	sub    edi,0x30
c001b2fd:	c1 e0 04             	shl    eax,0x4
c001b300:	09 f8                	or     eax,edi
c001b302:	0f b6 c0             	movzx  eax,al
c001b305:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b309:	0f 85 a6 fe ff ff    	jne    c001b1b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b30f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b313:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b317:	83 e8 30             	sub    eax,0x30
c001b31a:	83 ef 30             	sub    edi,0x30
c001b31d:	c1 e0 04             	shl    eax,0x4
c001b320:	09 f8                	or     eax,edi
c001b322:	0f b6 c0             	movzx  eax,al
c001b325:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b329:	0f 85 86 fe ff ff    	jne    c001b1b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b32f:	50                   	push   eax
c001b330:	50                   	push   eax
c001b331:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b335:	50                   	push   eax
c001b336:	55                   	push   ebp
c001b337:	e8 04 53 fe ff       	call   c0000640 <strcpy>
c001b33c:	83 c4 10             	add    esp,0x10
c001b33f:	eb 06                	jmp    c001b347 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b341:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b345:	31 ed                	xor    ebp,ebp
c001b347:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b34d:	89 e8                	mov    eax,ebp
c001b34f:	5b                   	pop    ebx
c001b350:	5e                   	pop    esi
c001b351:	5f                   	pop    edi
c001b352:	5d                   	pop    ebp
c001b353:	c3                   	ret    

c001b354 <PCI::checkBus(unsigned char)>:
c001b354:	56                   	push   esi
c001b355:	53                   	push   ebx
c001b356:	31 db                	xor    ebx,ebx
c001b358:	51                   	push   ecx
c001b359:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b35e:	52                   	push   edx
c001b35f:	53                   	push   ebx
c001b360:	43                   	inc    ebx
c001b361:	56                   	push   esi
c001b362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b366:	e8 03 03 00 00       	call   c001b66e <PCI::checkDevice(unsigned char, unsigned char)>
c001b36b:	83 c4 10             	add    esp,0x10
c001b36e:	83 fb 20             	cmp    ebx,0x20
c001b371:	75 eb                	jne    c001b35e <PCI::checkBus(unsigned char)+0xa>
c001b373:	58                   	pop    eax
c001b374:	5b                   	pop    ebx
c001b375:	5e                   	pop    esi
c001b376:	c3                   	ret    
c001b377:	90                   	nop

c001b378 <PCI::foundDevice(PCIDeviceInfo)>:
c001b378:	55                   	push   ebp
c001b379:	57                   	push   edi
c001b37a:	56                   	push   esi
c001b37b:	53                   	push   ebx
c001b37c:	83 ec 1c             	sub    esp,0x1c
c001b37f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b384:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b388:	3d ff ff 00 00       	cmp    eax,0xffff
c001b38d:	0f 84 57 01 00 00    	je     c001b4ea <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b393:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b398:	66 3d 06 04          	cmp    ax,0x406
c001b39c:	75 2c                	jne    c001b3ca <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b39e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b3a3:	50                   	push   eax
c001b3a4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b3a9:	50                   	push   eax
c001b3aa:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b3af:	50                   	push   eax
c001b3b0:	53                   	push   ebx
c001b3b1:	e8 64 fb ff ff       	call   c001af1a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b3b6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b3ba:	0f b6 c0             	movzx  eax,al
c001b3bd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b3c1:	83 c4 2c             	add    esp,0x2c
c001b3c4:	5b                   	pop    ebx
c001b3c5:	5e                   	pop    esi
c001b3c6:	5f                   	pop    edi
c001b3c7:	5d                   	pop    ebp
c001b3c8:	eb 8a                	jmp    c001b354 <PCI::checkBus(unsigned char)>
c001b3ca:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b3ce:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b3d4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b3d8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b3dc:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b3e1:	85 d2                	test   edx,edx
c001b3e3:	74 36                	je     c001b41b <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b3e5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b3e8:	85 c9                	test   ecx,ecx
c001b3ea:	74 2b                	je     c001b417 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b3ec:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b3f2:	31 ee                	xor    esi,ebp
c001b3f4:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b3fa:	75 1b                	jne    c001b417 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b3fc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b400:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b406:	75 0f                	jne    c001b417 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b408:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b40f:	39 f9                	cmp    ecx,edi
c001b411:	0f 84 d3 00 00 00    	je     c001b4ea <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b417:	8b 12                	mov    edx,DWORD PTR [edx]
c001b419:	eb c6                	jmp    c001b3e1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b41b:	3d 01 06 00 00       	cmp    eax,0x601
c001b420:	75 19                	jne    c001b43b <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b422:	83 ec 0c             	sub    esp,0xc
c001b425:	68 64 01 00 00       	push   0x164
c001b42a:	e8 87 c6 fe ff       	call   c0007ab6 <malloc>
c001b42f:	89 c5                	mov    ebp,eax
c001b431:	89 04 24             	mov    DWORD PTR [esp],eax
c001b434:	e8 a1 0e 00 00       	call   c001c2da <SATABus::SATABus()>
c001b439:	eb 1e                	jmp    c001b459 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b43b:	3d 01 01 00 00       	cmp    eax,0x101
c001b440:	75 62                	jne    c001b4a4 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b442:	83 ec 0c             	sub    esp,0xc
c001b445:	68 70 02 00 00       	push   0x270
c001b44a:	e8 67 c6 fe ff       	call   c0007ab6 <malloc>
c001b44f:	89 c5                	mov    ebp,eax
c001b451:	89 04 24             	mov    DWORD PTR [esp],eax
c001b454:	e8 e5 02 00 00       	call   c001b73e <IDE::IDE()>
c001b459:	5f                   	pop    edi
c001b45a:	58                   	pop    eax
c001b45b:	55                   	push   ebp
c001b45c:	53                   	push   ebx
c001b45d:	e8 a0 11 ff ff       	call   c000c602 <Device::addChild(Device*)>
c001b462:	83 ec 1c             	sub    esp,0x1c
c001b465:	b9 09 00 00 00       	mov    ecx,0x9
c001b46a:	fc                   	cld    
c001b46b:	89 e7                	mov    edi,esp
c001b46d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b471:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b473:	55                   	push   ebp
c001b474:	e8 cf 10 ff ff       	call   c000c548 <Device::preOpenPCI(PCIDeviceInfo)>
c001b479:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b47c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b480:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b488:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b490:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b498:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b49b:	83 c4 4c             	add    esp,0x4c
c001b49e:	5b                   	pop    ebx
c001b49f:	5e                   	pop    esi
c001b4a0:	5f                   	pop    edi
c001b4a1:	5d                   	pop    ebp
c001b4a2:	ff e0                	jmp    eax
c001b4a4:	83 ec 0c             	sub    esp,0xc
c001b4a7:	68 58 01 00 00       	push   0x158
c001b4ac:	e8 05 c6 fe ff       	call   c0007ab6 <malloc>
c001b4b1:	89 c5                	mov    ebp,eax
c001b4b3:	58                   	pop    eax
c001b4b4:	5a                   	pop    edx
c001b4b5:	68 86 2a 02 c0       	push   0xc0022a86
c001b4ba:	55                   	push   ebp
c001b4bb:	e8 e0 13 ff ff       	call   c000c8a0 <DriverlessDevice::DriverlessDevice(char const*)>
c001b4c0:	59                   	pop    ecx
c001b4c1:	5e                   	pop    esi
c001b4c2:	55                   	push   ebp
c001b4c3:	53                   	push   ebx
c001b4c4:	e8 39 11 ff ff       	call   c000c602 <Device::addChild(Device*)>
c001b4c9:	83 c4 10             	add    esp,0x10
c001b4cc:	b9 09 00 00 00       	mov    ecx,0x9
c001b4d1:	fc                   	cld    
c001b4d2:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b4d6:	89 fe                	mov    esi,edi
c001b4d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4da:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b4de:	83 c4 1c             	add    esp,0x1c
c001b4e1:	5b                   	pop    ebx
c001b4e2:	5e                   	pop    esi
c001b4e3:	5f                   	pop    edi
c001b4e4:	5d                   	pop    ebp
c001b4e5:	e9 5e 10 ff ff       	jmp    c000c548 <Device::preOpenPCI(PCIDeviceInfo)>
c001b4ea:	83 c4 1c             	add    esp,0x1c
c001b4ed:	5b                   	pop    ebx
c001b4ee:	5e                   	pop    esi
c001b4ef:	5f                   	pop    edi
c001b4f0:	5d                   	pop    ebp
c001b4f1:	c3                   	ret    

c001b4f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b4f2:	55                   	push   ebp
c001b4f3:	57                   	push   edi
c001b4f4:	56                   	push   esi
c001b4f5:	53                   	push   ebx
c001b4f6:	83 ec 68             	sub    esp,0x68
c001b4f9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b4fd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b504:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b508:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b50f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b514:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b518:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b51f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b524:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b528:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b52d:	6a 0c                	push   0xc
c001b52f:	57                   	push   edi
c001b530:	53                   	push   ebx
c001b531:	56                   	push   esi
c001b532:	55                   	push   ebp
c001b533:	e8 32 f8 ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b538:	83 c4 20             	add    esp,0x20
c001b53b:	57                   	push   edi
c001b53c:	53                   	push   ebx
c001b53d:	56                   	push   esi
c001b53e:	55                   	push   ebp
c001b53f:	e8 1c f9 ff ff       	call   c001ae60 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b544:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b549:	57                   	push   edi
c001b54a:	53                   	push   ebx
c001b54b:	56                   	push   esi
c001b54c:	55                   	push   ebp
c001b54d:	e8 a4 f9 ff ff       	call   c001aef6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b552:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b556:	83 c4 14             	add    esp,0x14
c001b559:	6a 3c                	push   0x3c
c001b55b:	57                   	push   edi
c001b55c:	53                   	push   ebx
c001b55d:	56                   	push   esi
c001b55e:	55                   	push   ebp
c001b55f:	e8 06 f8 ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b564:	0f b6 c4             	movzx  eax,ah
c001b567:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b56b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b56f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b573:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b578:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b57e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b584:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b588:	83 c4 20             	add    esp,0x20
c001b58b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b590:	74 30                	je     c001b5c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b592:	31 c0                	xor    eax,eax
c001b594:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b598:	7e 28                	jle    c001b5c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b59a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b5a2:	39 cb                	cmp    ebx,ecx
c001b5a4:	75 19                	jne    c001b5bf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b5a6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b5ae:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b5b2:	75 0b                	jne    c001b5bf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b5b4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b5bb:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b5bf:	40                   	inc    eax
c001b5c0:	eb d2                	jmp    c001b594 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b5c2:	31 d2                	xor    edx,edx
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	57                   	push   edi
c001b5c8:	53                   	push   ebx
c001b5c9:	56                   	push   esi
c001b5ca:	52                   	push   edx
c001b5cb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b5cf:	55                   	push   ebp
c001b5d0:	e8 6d f9 ff ff       	call   c001af42 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b5d9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b5dd:	42                   	inc    edx
c001b5de:	83 c4 20             	add    esp,0x20
c001b5e1:	83 fa 06             	cmp    edx,0x6
c001b5e4:	75 de                	jne    c001b5c4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b5e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5ee:	c1 e2 08             	shl    edx,0x8
c001b5f1:	83 ec 0c             	sub    esp,0xc
c001b5f4:	0f b6 c4             	movzx  eax,ah
c001b5f7:	09 d0                	or     eax,edx
c001b5f9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b5fe:	6a 02                	push   0x2
c001b600:	57                   	push   edi
c001b601:	53                   	push   ebx
c001b602:	56                   	push   esi
c001b603:	55                   	push   ebp
c001b604:	e8 61 f7 ff ff       	call   c001ad6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b609:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b60e:	83 c4 20             	add    esp,0x20
c001b611:	57                   	push   edi
c001b612:	53                   	push   ebx
c001b613:	56                   	push   esi
c001b614:	55                   	push   ebp
c001b615:	e8 90 f8 ff ff       	call   c001aeaa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b61a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b61e:	57                   	push   edi
c001b61f:	53                   	push   ebx
c001b620:	56                   	push   esi
c001b621:	55                   	push   ebp
c001b622:	e8 ed f7 ff ff       	call   c001ae14 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b627:	b9 09 00 00 00       	mov    ecx,0x9
c001b62c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b631:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b635:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b639:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b63d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b641:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b645:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b649:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b64d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b651:	83 ec 0c             	sub    esp,0xc
c001b654:	fc                   	cld    
c001b655:	89 e7                	mov    edi,esp
c001b657:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b65b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b65d:	55                   	push   ebp
c001b65e:	e8 15 fd ff ff       	call   c001b378 <PCI::foundDevice(PCIDeviceInfo)>
c001b663:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b669:	5b                   	pop    ebx
c001b66a:	5e                   	pop    esi
c001b66b:	5f                   	pop    edi
c001b66c:	5d                   	pop    ebp
c001b66d:	c3                   	ret    

c001b66e <PCI::checkDevice(unsigned char, unsigned char)>:
c001b66e:	55                   	push   ebp
c001b66f:	57                   	push   edi
c001b670:	56                   	push   esi
c001b671:	53                   	push   ebx
c001b672:	83 ec 0c             	sub    esp,0xc
c001b675:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b679:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b67e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b683:	6a 00                	push   0x0
c001b685:	56                   	push   esi
c001b686:	57                   	push   edi
c001b687:	55                   	push   ebp
c001b688:	e8 87 f7 ff ff       	call   c001ae14 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b68d:	6a 00                	push   0x0
c001b68f:	56                   	push   esi
c001b690:	57                   	push   edi
c001b691:	55                   	push   ebp
c001b692:	e8 5b fe ff ff       	call   c001b4f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b697:	83 c4 20             	add    esp,0x20
c001b69a:	6a 00                	push   0x0
c001b69c:	56                   	push   esi
c001b69d:	57                   	push   edi
c001b69e:	55                   	push   ebp
c001b69f:	e8 94 f7 ff ff       	call   c001ae38 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b6a4:	83 c4 10             	add    esp,0x10
c001b6a7:	a8 80                	test   al,0x80
c001b6a9:	74 2d                	je     c001b6d8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b6ab:	bb 01 00 00 00       	mov    ebx,0x1
c001b6b0:	53                   	push   ebx
c001b6b1:	56                   	push   esi
c001b6b2:	57                   	push   edi
c001b6b3:	55                   	push   ebp
c001b6b4:	e8 5b f7 ff ff       	call   c001ae14 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6b9:	83 c4 10             	add    esp,0x10
c001b6bc:	0f b7 c0             	movzx  eax,ax
c001b6bf:	3d ff ff 00 00       	cmp    eax,0xffff
c001b6c4:	74 0c                	je     c001b6d2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b6c6:	53                   	push   ebx
c001b6c7:	56                   	push   esi
c001b6c8:	57                   	push   edi
c001b6c9:	55                   	push   ebp
c001b6ca:	e8 23 fe ff ff       	call   c001b4f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b6cf:	83 c4 10             	add    esp,0x10
c001b6d2:	43                   	inc    ebx
c001b6d3:	83 fb 08             	cmp    ebx,0x8
c001b6d6:	75 d8                	jne    c001b6b0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b6d8:	83 c4 0c             	add    esp,0xc
c001b6db:	5b                   	pop    ebx
c001b6dc:	5e                   	pop    esi
c001b6dd:	5f                   	pop    edi
c001b6de:	5d                   	pop    ebp
c001b6df:	c3                   	ret    

c001b6e0 <PCI::detect()>:
c001b6e0:	56                   	push   esi
c001b6e1:	53                   	push   ebx
c001b6e2:	53                   	push   ebx
c001b6e3:	31 db                	xor    ebx,ebx
c001b6e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6e9:	6a 00                	push   0x0
c001b6eb:	6a 00                	push   0x0
c001b6ed:	6a 00                	push   0x0
c001b6ef:	56                   	push   esi
c001b6f0:	e8 43 f7 ff ff       	call   c001ae38 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b6f5:	83 c4 10             	add    esp,0x10
c001b6f8:	a8 80                	test   al,0x80
c001b6fa:	75 21                	jne    c001b71d <PCI::detect()+0x3d>
c001b6fc:	51                   	push   ecx
c001b6fd:	51                   	push   ecx
c001b6fe:	6a 00                	push   0x0
c001b700:	56                   	push   esi
c001b701:	e8 4e fc ff ff       	call   c001b354 <PCI::checkBus(unsigned char)>
c001b706:	83 c4 10             	add    esp,0x10
c001b709:	eb 2a                	jmp    c001b735 <PCI::detect()+0x55>
c001b70b:	52                   	push   edx
c001b70c:	52                   	push   edx
c001b70d:	53                   	push   ebx
c001b70e:	43                   	inc    ebx
c001b70f:	56                   	push   esi
c001b710:	e8 3f fc ff ff       	call   c001b354 <PCI::checkBus(unsigned char)>
c001b715:	83 c4 10             	add    esp,0x10
c001b718:	83 fb 08             	cmp    ebx,0x8
c001b71b:	74 18                	je     c001b735 <PCI::detect()+0x55>
c001b71d:	53                   	push   ebx
c001b71e:	6a 00                	push   0x0
c001b720:	6a 00                	push   0x0
c001b722:	56                   	push   esi
c001b723:	e8 ec f6 ff ff       	call   c001ae14 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b728:	83 c4 10             	add    esp,0x10
c001b72b:	0f b7 c0             	movzx  eax,ax
c001b72e:	3d ff ff 00 00       	cmp    eax,0xffff
c001b733:	74 d6                	je     c001b70b <PCI::detect()+0x2b>
c001b735:	58                   	pop    eax
c001b736:	5b                   	pop    ebx
c001b737:	5e                   	pop    esi
c001b738:	c3                   	ret    
c001b739:	90                   	nop

c001b73a <IDE::close(int, int, void*)>:
c001b73a:	83 c8 ff             	or     eax,0xffffffff
c001b73d:	c3                   	ret    

c001b73e <IDE::IDE()>:
c001b73e:	83 ec 0c             	sub    esp,0xc
c001b741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b745:	83 ec 08             	sub    esp,0x8
c001b748:	68 cc 2a 02 c0       	push   0xc0022acc
c001b74d:	50                   	push   eax
c001b74e:	e8 f1 11 ff ff       	call   c000c944 <HardDiskController::HardDiskController(char const*)>
c001b753:	83 c4 10             	add    esp,0x10
c001b756:	ba 5c 2b 02 c0       	mov    edx,0xc0022b5c
c001b75b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b75f:	89 10                	mov    DWORD PTR [eax],edx
c001b761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b765:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b76c:	90                   	nop
c001b76d:	83 c4 0c             	add    esp,0xc
c001b770:	c3                   	ret    
c001b771:	90                   	nop

c001b772 <IDE::prepareInterrupt(unsigned char)>:
c001b772:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b777:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b77b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b783:	c3                   	ret    

c001b784 <selectDrive(unsigned char, unsigned char)>:
c001b784:	c3                   	ret    
c001b785:	90                   	nop

c001b786 <IDE::getBase(unsigned char)>:
c001b786:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b78b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b78f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b797:	c3                   	ret    

c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b798:	55                   	push   ebp
c001b799:	57                   	push   edi
c001b79a:	56                   	push   esi
c001b79b:	53                   	push   ebx
c001b79c:	83 ec 1c             	sub    esp,0x1c
c001b79f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b7a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b7a7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b7aa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b7ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b7b2:	80 f9 03             	cmp    cl,0x3
c001b7b5:	77 4f                	ja     c001b806 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b7b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7bb:	0f b6 fa             	movzx  edi,dl
c001b7be:	0f b6 db             	movzx  ebx,bl
c001b7c1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b7c4:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b7c9:	80 ca 80             	or     dl,0x80
c001b7cc:	52                   	push   edx
c001b7cd:	6a 0c                	push   0xc
c001b7cf:	57                   	push   edi
c001b7d0:	56                   	push   esi
c001b7d1:	e8 c2 ff ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7d6:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b7db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7df:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b7e3:	ee                   	out    dx,al
c001b7e4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b7e9:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b7ed:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b7f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b7f5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b7fd:	83 c4 2c             	add    esp,0x2c
c001b800:	5b                   	pop    ebx
c001b801:	5e                   	pop    esi
c001b802:	5f                   	pop    edi
c001b803:	5d                   	pop    ebp
c001b804:	eb 92                	jmp    c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b806:	0f b6 cb             	movzx  ecx,bl
c001b809:	83 f9 07             	cmp    ecx,0x7
c001b80c:	77 12                	ja     c001b820 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b80e:	0f b6 d2             	movzx  edx,dl
c001b811:	0f b6 db             	movzx  ebx,bl
c001b814:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b81c:	01 da                	add    edx,ebx
c001b81e:	eb 2f                	jmp    c001b84f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b820:	83 f9 0d             	cmp    ecx,0xd
c001b823:	77 13                	ja     c001b838 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b825:	0f b6 d2             	movzx  edx,dl
c001b828:	0f b6 db             	movzx  ebx,bl
c001b82b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b832:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b836:	eb 17                	jmp    c001b84f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b838:	83 f9 15             	cmp    ecx,0x15
c001b83b:	77 13                	ja     c001b850 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b83d:	0f b6 d2             	movzx  edx,dl
c001b840:	0f b6 db             	movzx  ebx,bl
c001b843:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b84b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b84f:	ee                   	out    dx,al
c001b850:	83 c4 1c             	add    esp,0x1c
c001b853:	5b                   	pop    ebx
c001b854:	5e                   	pop    esi
c001b855:	5f                   	pop    edi
c001b856:	5d                   	pop    ebp
c001b857:	c3                   	ret    

c001b858 <IDE::read(unsigned char, unsigned char)>:
c001b858:	55                   	push   ebp
c001b859:	57                   	push   edi
c001b85a:	56                   	push   esi
c001b85b:	53                   	push   ebx
c001b85c:	83 ec 1c             	sub    esp,0x1c
c001b85f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b863:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b867:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b86a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b86e:	3c 03                	cmp    al,0x3
c001b870:	77 40                	ja     c001b8b2 <IDE::read(unsigned char, unsigned char)+0x5a>
c001b872:	0f b6 f9             	movzx  edi,cl
c001b875:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b878:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b87d:	0c 80                	or     al,0x80
c001b87f:	50                   	push   eax
c001b880:	6a 0c                	push   0xc
c001b882:	57                   	push   edi
c001b883:	56                   	push   esi
c001b884:	e8 0f ff ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b889:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b88e:	0f b6 d3             	movzx  edx,bl
c001b891:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b895:	ec                   	in     al,dx
c001b896:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b89a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b89f:	52                   	push   edx
c001b8a0:	6a 0c                	push   0xc
c001b8a2:	57                   	push   edi
c001b8a3:	56                   	push   esi
c001b8a4:	e8 ef fe ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8a9:	83 c4 20             	add    esp,0x20
c001b8ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b8b0:	eb 4c                	jmp    c001b8fe <IDE::read(unsigned char, unsigned char)+0xa6>
c001b8b2:	0f b6 d3             	movzx  edx,bl
c001b8b5:	83 fa 07             	cmp    edx,0x7
c001b8b8:	77 12                	ja     c001b8cc <IDE::read(unsigned char, unsigned char)+0x74>
c001b8ba:	0f b6 c9             	movzx  ecx,cl
c001b8bd:	0f b6 d3             	movzx  edx,bl
c001b8c0:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001b8c8:	01 c2                	add    edx,eax
c001b8ca:	eb 31                	jmp    c001b8fd <IDE::read(unsigned char, unsigned char)+0xa5>
c001b8cc:	83 fa 0d             	cmp    edx,0xd
c001b8cf:	77 13                	ja     c001b8e4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b8d1:	0f b6 c9             	movzx  ecx,cl
c001b8d4:	0f b6 d3             	movzx  edx,bl
c001b8d7:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001b8de:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b8e2:	eb 19                	jmp    c001b8fd <IDE::read(unsigned char, unsigned char)+0xa5>
c001b8e4:	31 c0                	xor    eax,eax
c001b8e6:	83 fa 15             	cmp    edx,0x15
c001b8e9:	77 13                	ja     c001b8fe <IDE::read(unsigned char, unsigned char)+0xa6>
c001b8eb:	0f b6 c9             	movzx  ecx,cl
c001b8ee:	0f b6 d3             	movzx  edx,bl
c001b8f1:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001b8f9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b8fd:	ec                   	in     al,dx
c001b8fe:	83 c4 1c             	add    esp,0x1c
c001b901:	5b                   	pop    ebx
c001b902:	5e                   	pop    esi
c001b903:	5f                   	pop    edi
c001b904:	5d                   	pop    ebp
c001b905:	c3                   	ret    

c001b906 <IDE::waitInterrupt(unsigned char)>:
c001b906:	55                   	push   ebp
c001b907:	57                   	push   edi
c001b908:	56                   	push   esi
c001b909:	53                   	push   ebx
c001b90a:	31 db                	xor    ebx,ebx
c001b90c:	83 ec 0c             	sub    esp,0xc
c001b90f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b913:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b918:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b920:	89 e8                	mov    eax,ebp
c001b922:	84 c0                	test   al,al
c001b924:	75 30                	jne    c001b956 <IDE::waitInterrupt(unsigned char)+0x50>
c001b926:	50                   	push   eax
c001b927:	6a 0c                	push   0xc
c001b929:	56                   	push   esi
c001b92a:	57                   	push   edi
c001b92b:	e8 28 ff ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001b930:	83 c4 10             	add    esp,0x10
c001b933:	a8 01                	test   al,0x1
c001b935:	75 27                	jne    c001b95e <IDE::waitInterrupt(unsigned char)+0x58>
c001b937:	f6 c3 04             	test   bl,0x4
c001b93a:	75 12                	jne    c001b94e <IDE::waitInterrupt(unsigned char)+0x48>
c001b93c:	83 fb 32             	cmp    ebx,0x32
c001b93f:	7e 0d                	jle    c001b94e <IDE::waitInterrupt(unsigned char)+0x48>
c001b941:	83 ec 0c             	sub    esp,0xc
c001b944:	6a 64                	push   0x64
c001b946:	e8 b1 a4 ff ff       	call   c0015dfc <milliTenthSleep(unsigned int)>
c001b94b:	83 c4 10             	add    esp,0x10
c001b94e:	83 fb 3c             	cmp    ebx,0x3c
c001b951:	74 0b                	je     c001b95e <IDE::waitInterrupt(unsigned char)+0x58>
c001b953:	43                   	inc    ebx
c001b954:	eb c2                	jmp    c001b918 <IDE::waitInterrupt(unsigned char)+0x12>
c001b956:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b95e:	83 c4 0c             	add    esp,0xc
c001b961:	89 e8                	mov    eax,ebp
c001b963:	5b                   	pop    ebx
c001b964:	5e                   	pop    esi
c001b965:	5f                   	pop    edi
c001b966:	5d                   	pop    ebp
c001b967:	c3                   	ret    

c001b968 <ideChannel0IRQHandler(regs*, void*)>:
c001b968:	83 ec 10             	sub    esp,0x10
c001b96b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b96f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b976:	6a 07                	push   0x7
c001b978:	6a 00                	push   0x0
c001b97a:	50                   	push   eax
c001b97b:	e8 d8 fe ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001b980:	83 c4 1c             	add    esp,0x1c
c001b983:	c3                   	ret    

c001b984 <ideChannel1IRQHandler(regs*, void*)>:
c001b984:	83 ec 10             	sub    esp,0x10
c001b987:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b98b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b992:	6a 07                	push   0x7
c001b994:	6a 01                	push   0x1
c001b996:	50                   	push   eax
c001b997:	e8 bc fe ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001b99c:	83 c4 1c             	add    esp,0x1c
c001b99f:	c3                   	ret    

c001b9a0 <IDE::enableIRQs(unsigned char, bool)>:
c001b9a0:	57                   	push   edi
c001b9a1:	b8 02 00 00 00       	mov    eax,0x2
c001b9a6:	56                   	push   esi
c001b9a7:	53                   	push   ebx
c001b9a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b9ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b9b0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9b5:	74 02                	je     c001b9b9 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b9b7:	31 c0                	xor    eax,eax
c001b9b9:	0f b6 db             	movzx  ebx,bl
c001b9bc:	bf 04 00 00 00       	mov    edi,0x4
c001b9c1:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b9c8:	50                   	push   eax
c001b9c9:	6a 0c                	push   0xc
c001b9cb:	53                   	push   ebx
c001b9cc:	56                   	push   esi
c001b9cd:	e8 c6 fd ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9d2:	83 c4 10             	add    esp,0x10
c001b9d5:	50                   	push   eax
c001b9d6:	6a 0c                	push   0xc
c001b9d8:	53                   	push   ebx
c001b9d9:	56                   	push   esi
c001b9da:	e8 79 fe ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001b9df:	83 c4 10             	add    esp,0x10
c001b9e2:	4f                   	dec    edi
c001b9e3:	75 f0                	jne    c001b9d5 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b9e5:	5b                   	pop    ebx
c001b9e6:	5e                   	pop    esi
c001b9e7:	5f                   	pop    edi
c001b9e8:	c3                   	ret    
c001b9e9:	90                   	nop

c001b9ea <IDE::open(int, int, void*)>:
c001b9ea:	55                   	push   ebp
c001b9eb:	57                   	push   edi
c001b9ec:	56                   	push   esi
c001b9ed:	53                   	push   ebx
c001b9ee:	83 ec 1c             	sub    esp,0x1c
c001b9f1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9f5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b9fe:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ba07:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ba0e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ba15:	0f 85 de 02 00 00    	jne    c001bcf9 <IDE::open(int, int, void*)+0x30f>
c001ba1b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ba21:	88 04 24             	mov    BYTE PTR [esp],al
c001ba24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba27:	83 e0 7f             	and    eax,0x7f
c001ba2a:	83 f8 05             	cmp    eax,0x5
c001ba2d:	74 05                	je     c001ba34 <IDE::open(int, int, void*)+0x4a>
c001ba2f:	83 f8 0f             	cmp    eax,0xf
c001ba32:	75 32                	jne    c001ba66 <IDE::open(int, int, void*)+0x7c>
c001ba34:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ba3a:	83 e0 fc             	and    eax,0xfffffffc
c001ba3d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ba44:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ba4a:	83 e0 fc             	and    eax,0xfffffffc
c001ba4d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ba54:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ba5a:	83 e0 fc             	and    eax,0xfffffffc
c001ba5d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ba64:	eb 14                	jmp    c001ba7a <IDE::open(int, int, void*)+0x90>
c001ba66:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba70:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ba7a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ba81:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ba88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba8c:	89 c6                	mov    esi,eax
c001ba8e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ba93:	c1 e6 10             	shl    esi,0x10
c001ba96:	89 e8                	mov    eax,ebp
c001ba98:	89 fa                	mov    edx,edi
c001ba9a:	c1 e0 0b             	shl    eax,0xb
c001ba9d:	09 f0                	or     eax,esi
c001ba9f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001baa6:	c1 e6 08             	shl    esi,0x8
c001baa9:	09 c6                	or     esi,eax
c001baab:	89 f0                	mov    eax,esi
c001baad:	0d 08 00 00 80       	or     eax,0x80000008
c001bab2:	ef                   	out    dx,eax
c001bab3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bab8:	89 ca                	mov    edx,ecx
c001baba:	ed                   	in     eax,dx
c001babb:	c1 e8 10             	shr    eax,0x10
c001babe:	3d ff ff 00 00       	cmp    eax,0xffff
c001bac3:	0f 84 f9 00 00 00    	je     c001bbc2 <IDE::open(int, int, void*)+0x1d8>
c001bac9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bacf:	89 fa                	mov    edx,edi
c001bad1:	89 f0                	mov    eax,esi
c001bad3:	ef                   	out    dx,eax
c001bad4:	b0 fe                	mov    al,0xfe
c001bad6:	89 ca                	mov    edx,ecx
c001bad8:	ee                   	out    dx,al
c001bad9:	89 f0                	mov    eax,esi
c001badb:	89 fa                	mov    edx,edi
c001badd:	ef                   	out    dx,eax
c001bade:	89 ca                	mov    edx,ecx
c001bae0:	ed                   	in     eax,dx
c001bae1:	3c fe                	cmp    al,0xfe
c001bae3:	0f 85 a9 00 00 00    	jne    c001bb92 <IDE::open(int, int, void*)+0x1a8>
c001bae9:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001baef:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001baf6:	74 33                	je     c001bb2b <IDE::open(int, int, void*)+0x141>
c001baf8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bafe:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bb02:	40                   	inc    eax
c001bb03:	83 ec 0c             	sub    esp,0xc
c001bb06:	0f b6 c0             	movzx  eax,al
c001bb09:	50                   	push   eax
c001bb0a:	55                   	push   ebp
c001bb0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb0f:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bb15:	51                   	push   ecx
c001bb16:	e8 59 3a ff ff       	call   c000f574 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bb1b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bb20:	83 c4 1c             	add    esp,0x1c
c001bb23:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bb29:	eb 0a                	jmp    c001bb35 <IDE::open(int, int, void*)+0x14b>
c001bb2b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bb35:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bb3c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb43:	c1 e1 10             	shl    ecx,0x10
c001bb46:	c1 e0 08             	shl    eax,0x8
c001bb49:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bb4e:	09 c1                	or     ecx,eax
c001bb50:	89 fa                	mov    edx,edi
c001bb52:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bb59:	c1 e0 0b             	shl    eax,0xb
c001bb5c:	09 c1                	or     ecx,eax
c001bb5e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb64:	89 c8                	mov    eax,ecx
c001bb66:	ef                   	out    dx,eax
c001bb67:	be fc 0c 00 00       	mov    esi,0xcfc
c001bb6c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bb72:	89 f2                	mov    edx,esi
c001bb74:	ee                   	out    dx,al
c001bb75:	89 c8                	mov    eax,ecx
c001bb77:	89 fa                	mov    edx,edi
c001bb79:	ef                   	out    dx,eax
c001bb7a:	89 f2                	mov    edx,esi
c001bb7c:	ed                   	in     eax,dx
c001bb7d:	0f b6 c0             	movzx  eax,al
c001bb80:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bb86:	74 4a                	je     c001bbd2 <IDE::open(int, int, void*)+0x1e8>
c001bb88:	83 ec 0c             	sub    esp,0xc
c001bb8b:	68 e4 2a 02 c0       	push   0xc0022ae4
c001bb90:	eb 38                	jmp    c001bbca <IDE::open(int, int, void*)+0x1e0>
c001bb92:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bb9b:	75 1b                	jne    c001bbb8 <IDE::open(int, int, void*)+0x1ce>
c001bb9d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bba1:	3d 80 00 00 00       	cmp    eax,0x80
c001bba6:	74 07                	je     c001bbaf <IDE::open(int, int, void*)+0x1c5>
c001bba8:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bbad:	75 09                	jne    c001bbb8 <IDE::open(int, int, void*)+0x1ce>
c001bbaf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bbb6:	eb 1a                	jmp    c001bbd2 <IDE::open(int, int, void*)+0x1e8>
c001bbb8:	83 ec 0c             	sub    esp,0xc
c001bbbb:	68 ec 2a 02 c0       	push   0xc0022aec
c001bbc0:	eb 08                	jmp    c001bbca <IDE::open(int, int, void*)+0x1e0>
c001bbc2:	83 ec 0c             	sub    esp,0xc
c001bbc5:	68 1d 2b 02 c0       	push   0xc0022b1d
c001bbca:	e8 3e 56 ff ff       	call   c001120d <KePanic(char const*)>
c001bbcf:	83 c4 10             	add    esp,0x10
c001bbd2:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bbd9:	74 1a                	je     c001bbf5 <IDE::open(int, int, void*)+0x20b>
c001bbdb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bbe1:	83 e0 fc             	and    eax,0xfffffffc
c001bbe4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bbeb:	83 c0 08             	add    eax,0x8
c001bbee:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bbf5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bbfb:	89 c2                	mov    edx,eax
c001bbfd:	83 e2 0f             	and    edx,0xf
c001bc00:	83 fa 08             	cmp    edx,0x8
c001bc03:	75 0a                	jne    c001bc0f <IDE::open(int, int, void*)+0x225>
c001bc05:	83 e8 02             	sub    eax,0x2
c001bc08:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bc0f:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bc15:	89 c2                	mov    edx,eax
c001bc17:	83 e2 0f             	and    edx,0xf
c001bc1a:	83 fa 08             	cmp    edx,0x8
c001bc1d:	75 0a                	jne    c001bc29 <IDE::open(int, int, void*)+0x23f>
c001bc1f:	83 e8 02             	sub    eax,0x2
c001bc22:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bc29:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bc30:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bc37:	89 d0                	mov    eax,edx
c001bc39:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc3c:	8d 7a 01             	lea    edi,[edx+0x1]
c001bc3f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc43:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bc47:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc4b:	83 e1 3f             	and    ecx,0x3f
c001bc4e:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc52:	89 f9                	mov    ecx,edi
c001bc54:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bc5b:	0f b6 c9             	movzx  ecx,cl
c001bc5e:	8d 78 02             	lea    edi,[eax+0x2]
c001bc61:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc64:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc68:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bc6c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bc70:	83 e2 3f             	and    edx,0x3f
c001bc73:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bc77:	89 f9                	mov    ecx,edi
c001bc79:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bc7f:	0f b6 d1             	movzx  edx,cl
c001bc82:	8d 78 03             	lea    edi,[eax+0x3]
c001bc85:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc88:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc8c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bc90:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc94:	83 e1 3f             	and    ecx,0x3f
c001bc97:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc9b:	89 f9                	mov    ecx,edi
c001bc9d:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bca3:	0f b6 c9             	movzx  ecx,cl
c001bca6:	8d 78 04             	lea    edi,[eax+0x4]
c001bca9:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bcac:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bcb0:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bcb4:	89 fa                	mov    edx,edi
c001bcb6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bcbc:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bcc0:	83 e2 3f             	and    edx,0x3f
c001bcc3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bcc7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bcce:	66 85 f6             	test   si,si
c001bcd1:	74 65                	je     c001bd38 <IDE::open(int, int, void*)+0x34e>
c001bcd3:	89 f9                	mov    ecx,edi
c001bcd5:	83 c0 05             	add    eax,0x5
c001bcd8:	0f b6 d1             	movzx  edx,cl
c001bcdb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bcde:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bce2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bce6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bcec:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bcf0:	83 e0 3f             	and    eax,0x3f
c001bcf3:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bcf7:	eb 3f                	jmp    c001bd38 <IDE::open(int, int, void*)+0x34e>
c001bcf9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bcff:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd06:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bd0d:	05 06 02 00 00       	add    eax,0x206
c001bd12:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd19:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bd20:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bd27:	05 06 02 00 00       	add    eax,0x206
c001bd2c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd33:	e9 bd fe ff ff       	jmp    c001bbf5 <IDE::open(int, int, void*)+0x20b>
c001bd38:	50                   	push   eax
c001bd39:	50                   	push   eax
c001bd3a:	6a 00                	push   0x0
c001bd3c:	53                   	push   ebx
c001bd3d:	e8 30 fa ff ff       	call   c001b772 <IDE::prepareInterrupt(unsigned char)>
c001bd42:	5a                   	pop    edx
c001bd43:	59                   	pop    ecx
c001bd44:	6a 01                	push   0x1
c001bd46:	53                   	push   ebx
c001bd47:	e8 26 fa ff ff       	call   c001b772 <IDE::prepareInterrupt(unsigned char)>
c001bd4c:	83 c4 0c             	add    esp,0xc
c001bd4f:	6a 00                	push   0x0
c001bd51:	6a 00                	push   0x0
c001bd53:	53                   	push   ebx
c001bd54:	e8 47 fc ff ff       	call   c001b9a0 <IDE::enableIRQs(unsigned char, bool)>
c001bd59:	83 c4 0c             	add    esp,0xc
c001bd5c:	6a 00                	push   0x0
c001bd5e:	6a 01                	push   0x1
c001bd60:	53                   	push   ebx
c001bd61:	e8 3a fc ff ff       	call   c001b9a0 <IDE::enableIRQs(unsigned char, bool)>
c001bd66:	83 c4 10             	add    esp,0x10
c001bd69:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bd70:	74 34                	je     c001bda6 <IDE::open(int, int, void*)+0x3bc>
c001bd72:	83 ec 0c             	sub    esp,0xc
c001bd75:	53                   	push   ebx
c001bd76:	6a 01                	push   0x1
c001bd78:	68 68 b9 01 c0       	push   0xc001b968
c001bd7d:	6a 0e                	push   0xe
c001bd7f:	53                   	push   ebx
c001bd80:	e8 29 08 ff ff       	call   c000c5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd85:	83 c4 14             	add    esp,0x14
c001bd88:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd8e:	53                   	push   ebx
c001bd8f:	6a 01                	push   0x1
c001bd91:	68 84 b9 01 c0       	push   0xc001b984
c001bd96:	6a 0f                	push   0xf
c001bd98:	53                   	push   ebx
c001bd99:	e8 10 08 ff ff       	call   c000c5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd9e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bda4:	eb 38                	jmp    c001bdde <IDE::open(int, int, void*)+0x3f4>
c001bda6:	83 ec 0c             	sub    esp,0xc
c001bda9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bdb3:	53                   	push   ebx
c001bdb4:	6a 00                	push   0x0
c001bdb6:	68 68 b9 01 c0       	push   0xc001b968
c001bdbb:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bdc1:	53                   	push   ebx
c001bdc2:	e8 e7 07 ff ff       	call   c000c5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdc7:	83 c4 14             	add    esp,0x14
c001bdca:	53                   	push   ebx
c001bdcb:	6a 00                	push   0x0
c001bdcd:	68 84 b9 01 c0       	push   0xc001b984
c001bdd2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bdd8:	53                   	push   ebx
c001bdd9:	e8 d0 07 ff ff       	call   c000c5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdde:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bde0:	83 c4 20             	add    esp,0x20
c001bde3:	83 ec 0c             	sub    esp,0xc
c001bde6:	53                   	push   ebx
c001bde7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bdea:	83 c4 0c             	add    esp,0xc
c001bded:	6a 07                	push   0x7
c001bdef:	6a 00                	push   0x0
c001bdf1:	53                   	push   ebx
c001bdf2:	e8 61 fa ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001bdf7:	83 c4 0c             	add    esp,0xc
c001bdfa:	6a 07                	push   0x7
c001bdfc:	6a 01                	push   0x1
c001bdfe:	53                   	push   ebx
c001bdff:	e8 54 fa ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001be04:	83 c4 0c             	add    esp,0xc
c001be07:	6a 01                	push   0x1
c001be09:	6a 00                	push   0x0
c001be0b:	53                   	push   ebx
c001be0c:	e8 8f fb ff ff       	call   c001b9a0 <IDE::enableIRQs(unsigned char, bool)>
c001be11:	83 c4 0c             	add    esp,0xc
c001be14:	6a 01                	push   0x1
c001be16:	6a 01                	push   0x1
c001be18:	53                   	push   ebx
c001be19:	e8 82 fb ff ff       	call   c001b9a0 <IDE::enableIRQs(unsigned char, bool)>
c001be1e:	83 c4 2c             	add    esp,0x2c
c001be21:	31 c0                	xor    eax,eax
c001be23:	5b                   	pop    ebx
c001be24:	5e                   	pop    esi
c001be25:	5f                   	pop    edi
c001be26:	5d                   	pop    ebp
c001be27:	c3                   	ret    

c001be28 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001be28:	55                   	push   ebp
c001be29:	57                   	push   edi
c001be2a:	56                   	push   esi
c001be2b:	53                   	push   ebx
c001be2c:	83 ec 1c             	sub    esp,0x1c
c001be2f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001be33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be37:	8d 42 f8             	lea    eax,[edx-0x8]
c001be3a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be3e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001be42:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001be46:	3c 03                	cmp    al,0x3
c001be48:	77 5a                	ja     c001bea4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001be4a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be4e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001be52:	0f b6 db             	movzx  ebx,bl
c001be55:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001be58:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be5d:	0c 80                	or     al,0x80
c001be5f:	50                   	push   eax
c001be60:	6a 0c                	push   0xc
c001be62:	53                   	push   ebx
c001be63:	56                   	push   esi
c001be64:	e8 2f f9 ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be69:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be6e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be72:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be76:	0f b6 d2             	movzx  edx,dl
c001be79:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be7d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001be7f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be84:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001be88:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be8c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be90:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be98:	83 c4 2c             	add    esp,0x2c
c001be9b:	5b                   	pop    ebx
c001be9c:	5e                   	pop    esi
c001be9d:	5f                   	pop    edi
c001be9e:	5d                   	pop    ebp
c001be9f:	e9 f4 f8 ff ff       	jmp    c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bea4:	0f b6 c2             	movzx  eax,dl
c001bea7:	83 f8 07             	cmp    eax,0x7
c001beaa:	77 12                	ja     c001bebe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001beac:	0f b6 c2             	movzx  eax,dl
c001beaf:	0f b6 db             	movzx  ebx,bl
c001beb2:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001beba:	01 c2                	add    edx,eax
c001bebc:	eb 2f                	jmp    c001beed <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bebe:	83 f8 0d             	cmp    eax,0xd
c001bec1:	77 13                	ja     c001bed6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001bec3:	0f b6 db             	movzx  ebx,bl
c001bec6:	0f b6 d2             	movzx  edx,dl
c001bec9:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001bed0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bed4:	eb 17                	jmp    c001beed <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bed6:	83 f8 15             	cmp    eax,0x15
c001bed9:	77 14                	ja     c001beef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001bedb:	0f b6 db             	movzx  ebx,bl
c001bede:	0f b6 d2             	movzx  edx,dl
c001bee1:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bee9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001beed:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001beef:	83 c4 1c             	add    esp,0x1c
c001bef2:	5b                   	pop    ebx
c001bef3:	5e                   	pop    esi
c001bef4:	5f                   	pop    edi
c001bef5:	5d                   	pop    ebp
c001bef6:	c3                   	ret    
c001bef7:	90                   	nop

c001bef8 <IDE::detect()>:
c001bef8:	55                   	push   ebp
c001bef9:	57                   	push   edi
c001befa:	56                   	push   esi
c001befb:	53                   	push   ebx
c001befc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf02:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bf09:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bf10:	0f 85 a4 02 00 00    	jne    c001c1ba <IDE::detect()+0x2c2>
c001bf16:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bf1d:	31 f6                	xor    esi,esi
c001bf1f:	31 ed                	xor    ebp,ebp
c001bf21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bf29:	89 e8                	mov    eax,ebp
c001bf2b:	c1 e0 06             	shl    eax,0x6
c001bf2e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bf36:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf3a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf42:	c1 e0 04             	shl    eax,0x4
c001bf45:	83 c8 a0             	or     eax,0xffffffa0
c001bf48:	0f b6 c0             	movzx  eax,al
c001bf4b:	50                   	push   eax
c001bf4c:	6a 06                	push   0x6
c001bf4e:	56                   	push   esi
c001bf4f:	53                   	push   ebx
c001bf50:	e8 43 f8 ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf55:	83 c4 0c             	add    esp,0xc
c001bf58:	6a 0c                	push   0xc
c001bf5a:	56                   	push   esi
c001bf5b:	53                   	push   ebx
c001bf5c:	e8 f7 f8 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001bf61:	83 c4 0c             	add    esp,0xc
c001bf64:	6a 0c                	push   0xc
c001bf66:	56                   	push   esi
c001bf67:	53                   	push   ebx
c001bf68:	e8 eb f8 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001bf6d:	83 c4 0c             	add    esp,0xc
c001bf70:	6a 0c                	push   0xc
c001bf72:	56                   	push   esi
c001bf73:	53                   	push   ebx
c001bf74:	e8 df f8 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001bf79:	83 c4 0c             	add    esp,0xc
c001bf7c:	6a 0c                	push   0xc
c001bf7e:	56                   	push   esi
c001bf7f:	53                   	push   ebx
c001bf80:	e8 d3 f8 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001bf85:	68 ec 00 00 00       	push   0xec
c001bf8a:	6a 07                	push   0x7
c001bf8c:	56                   	push   esi
c001bf8d:	53                   	push   ebx
c001bf8e:	e8 05 f8 ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf93:	83 c4 1c             	add    esp,0x1c
c001bf96:	6a 0c                	push   0xc
c001bf98:	56                   	push   esi
c001bf99:	53                   	push   ebx
c001bf9a:	e8 b9 f8 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001bf9f:	83 c4 0c             	add    esp,0xc
c001bfa2:	6a 0c                	push   0xc
c001bfa4:	56                   	push   esi
c001bfa5:	53                   	push   ebx
c001bfa6:	e8 ad f8 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001bfab:	83 c4 0c             	add    esp,0xc
c001bfae:	6a 0c                	push   0xc
c001bfb0:	56                   	push   esi
c001bfb1:	53                   	push   ebx
c001bfb2:	e8 a1 f8 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001bfb7:	83 c4 0c             	add    esp,0xc
c001bfba:	6a 0c                	push   0xc
c001bfbc:	56                   	push   esi
c001bfbd:	53                   	push   ebx
c001bfbe:	e8 95 f8 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001bfc3:	83 c4 0c             	add    esp,0xc
c001bfc6:	6a 0c                	push   0xc
c001bfc8:	56                   	push   esi
c001bfc9:	53                   	push   ebx
c001bfca:	e8 89 f8 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001bfcf:	83 c4 10             	add    esp,0x10
c001bfd2:	84 c0                	test   al,al
c001bfd4:	0f 84 60 01 00 00    	je     c001c13a <IDE::detect()+0x242>
c001bfda:	31 ff                	xor    edi,edi
c001bfdc:	50                   	push   eax
c001bfdd:	6a 0c                	push   0xc
c001bfdf:	56                   	push   esi
c001bfe0:	53                   	push   ebx
c001bfe1:	e8 72 f8 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001bfe6:	83 c4 10             	add    esp,0x10
c001bfe9:	a8 01                	test   al,0x1
c001bfeb:	0f 85 6a 01 00 00    	jne    c001c15b <IDE::detect()+0x263>
c001bff1:	a8 80                	test   al,0x80
c001bff3:	75 04                	jne    c001bff9 <IDE::detect()+0x101>
c001bff5:	a8 08                	test   al,0x8
c001bff7:	75 23                	jne    c001c01c <IDE::detect()+0x124>
c001bff9:	47                   	inc    edi
c001bffa:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c000:	7e da                	jle    c001bfdc <IDE::detect()+0xe4>
c001c002:	83 ec 0c             	sub    esp,0xc
c001c005:	6a 32                	push   0x32
c001c007:	e8 f0 9d ff ff       	call   c0015dfc <milliTenthSleep(unsigned int)>
c001c00c:	83 c4 10             	add    esp,0x10
c001c00f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c015:	75 c5                	jne    c001bfdc <IDE::detect()+0xe4>
c001c017:	e9 3f 01 00 00       	jmp    c001c15b <IDE::detect()+0x263>
c001c01c:	31 c9                	xor    ecx,ecx
c001c01e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c022:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c026:	83 ec 0c             	sub    esp,0xc
c001c029:	68 80 00 00 00       	push   0x80
c001c02e:	57                   	push   edi
c001c02f:	6a 00                	push   0x0
c001c031:	56                   	push   esi
c001c032:	53                   	push   ebx
c001c033:	e8 f0 fd ff ff       	call   c001be28 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c038:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c03d:	89 e8                	mov    eax,ebp
c001c03f:	89 d1                	mov    ecx,edx
c001c041:	c1 e0 06             	shl    eax,0x6
c001c044:	01 d8                	add    eax,ebx
c001c046:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c04d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c054:	89 f2                	mov    edx,esi
c001c056:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c05c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c060:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c066:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c06a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c071:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c079:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c080:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c088:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c08e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c095:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c09b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c09f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c0a3:	83 c4 20             	add    esp,0x20
c001c0a6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c0a9:	83 c0 02             	add    eax,0x2
c001c0ac:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c0b2:	83 c7 02             	add    edi,0x2
c001c0b5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c0b8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c0be:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c0c2:	75 e2                	jne    c001c0a6 <IDE::detect()+0x1ae>
c001c0c4:	89 e8                	mov    eax,ebp
c001c0c6:	c1 e0 06             	shl    eax,0x6
c001c0c9:	01 d8                	add    eax,ebx
c001c0cb:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c0d2:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c0d9:	c1 ea 09             	shr    edx,0x9
c001c0dc:	83 e2 01             	and    edx,0x1
c001c0df:	80 e1 01             	and    cl,0x1
c001c0e2:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c0e8:	75 22                	jne    c001c10c <IDE::detect()+0x214>
c001c0ea:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c0f1:	74 46                	je     c001c139 <IDE::detect()+0x241>
c001c0f3:	83 ec 0c             	sub    esp,0xc
c001c0f6:	68 7c 01 00 00       	push   0x17c
c001c0fb:	e8 b6 b9 fe ff       	call   c0007ab6 <malloc>
c001c100:	89 c7                	mov    edi,eax
c001c102:	89 04 24             	mov    DWORD PTR [esp],eax
c001c105:	e8 1a 05 00 00       	call   c001c624 <ATA::ATA()>
c001c10a:	eb 17                	jmp    c001c123 <IDE::detect()+0x22b>
c001c10c:	83 ec 0c             	sub    esp,0xc
c001c10f:	68 84 01 00 00       	push   0x184
c001c114:	e8 9d b9 fe ff       	call   c0007ab6 <malloc>
c001c119:	89 c7                	mov    edi,eax
c001c11b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c11e:	e8 45 0e 00 00       	call   c001cf68 <ATAPI::ATAPI()>
c001c123:	5a                   	pop    edx
c001c124:	59                   	pop    ecx
c001c125:	57                   	push   edi
c001c126:	53                   	push   ebx
c001c127:	e8 d6 04 ff ff       	call   c000c602 <Device::addChild(Device*)>
c001c12c:	8b 07                	mov    eax,DWORD PTR [edi]
c001c12e:	53                   	push   ebx
c001c12f:	55                   	push   ebp
c001c130:	6a 00                	push   0x0
c001c132:	57                   	push   edi
c001c133:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c136:	83 c4 20             	add    esp,0x20
c001c139:	45                   	inc    ebp
c001c13a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c13f:	74 0d                	je     c001c14e <IDE::detect()+0x256>
c001c141:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c149:	e9 db fd ff ff       	jmp    c001bf29 <IDE::detect()+0x31>
c001c14e:	4e                   	dec    esi
c001c14f:	74 69                	je     c001c1ba <IDE::detect()+0x2c2>
c001c151:	be 01 00 00 00       	mov    esi,0x1
c001c156:	e9 c6 fd ff ff       	jmp    c001bf21 <IDE::detect()+0x29>
c001c15b:	50                   	push   eax
c001c15c:	6a 04                	push   0x4
c001c15e:	56                   	push   esi
c001c15f:	53                   	push   ebx
c001c160:	e8 f3 f6 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001c165:	83 c4 0c             	add    esp,0xc
c001c168:	89 c7                	mov    edi,eax
c001c16a:	6a 05                	push   0x5
c001c16c:	56                   	push   esi
c001c16d:	53                   	push   ebx
c001c16e:	e8 e5 f6 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001c173:	83 c4 10             	add    esp,0x10
c001c176:	89 f9                	mov    ecx,edi
c001c178:	0f b6 c0             	movzx  eax,al
c001c17b:	0f b6 f9             	movzx  edi,cl
c001c17e:	83 ff 14             	cmp    edi,0x14
c001c181:	75 07                	jne    c001c18a <IDE::detect()+0x292>
c001c183:	3d eb 00 00 00       	cmp    eax,0xeb
c001c188:	eb 0a                	jmp    c001c194 <IDE::detect()+0x29c>
c001c18a:	3d 96 00 00 00       	cmp    eax,0x96
c001c18f:	75 a9                	jne    c001c13a <IDE::detect()+0x242>
c001c191:	83 ff 69             	cmp    edi,0x69
c001c194:	75 a4                	jne    c001c13a <IDE::detect()+0x242>
c001c196:	68 a1 00 00 00       	push   0xa1
c001c19b:	6a 07                	push   0x7
c001c19d:	56                   	push   esi
c001c19e:	53                   	push   ebx
c001c19f:	e8 f4 f5 ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1a4:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c1ab:	e8 4c 9c ff ff       	call   c0015dfc <milliTenthSleep(unsigned int)>
c001c1b0:	83 c4 10             	add    esp,0x10
c001c1b3:	b1 01                	mov    cl,0x1
c001c1b5:	e9 64 fe ff ff       	jmp    c001c01e <IDE::detect()+0x126>
c001c1ba:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c1c0:	5b                   	pop    ebx
c001c1c1:	5e                   	pop    esi
c001c1c2:	5f                   	pop    edi
c001c1c3:	5d                   	pop    ebp
c001c1c4:	c3                   	ret    
c001c1c5:	90                   	nop

c001c1c6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c1c6:	55                   	push   ebp
c001c1c7:	57                   	push   edi
c001c1c8:	56                   	push   esi
c001c1c9:	53                   	push   ebx
c001c1ca:	83 ec 1c             	sub    esp,0x1c
c001c1cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c1d1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c1d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c1dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c1e1:	88 c3                	mov    bl,al
c001c1e3:	25 ff 00 00 00       	and    eax,0xff
c001c1e8:	0f 84 88 00 00 00    	je     c001c276 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c1ee:	83 ec 0c             	sub    esp,0xc
c001c1f1:	89 c7                	mov    edi,eax
c001c1f3:	68 47 2b 02 c0       	push   0xc0022b47
c001c1f8:	e8 48 e7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c1fd:	83 c4 10             	add    esp,0x10
c001c200:	83 ff 01             	cmp    edi,0x1
c001c203:	74 6b                	je     c001c270 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c205:	83 ff 02             	cmp    edi,0x2
c001c208:	75 58                	jne    c001c262 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c20a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c20f:	01 ff                	add    edi,edi
c001c211:	50                   	push   eax
c001c212:	09 fe                	or     esi,edi
c001c214:	6a 01                	push   0x1
c001c216:	89 f0                	mov    eax,esi
c001c218:	0f b6 f0             	movzx  esi,al
c001c21b:	c1 e6 06             	shl    esi,0x6
c001c21e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c226:	50                   	push   eax
c001c227:	55                   	push   ebp
c001c228:	e8 2b f6 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001c22d:	83 c4 10             	add    esp,0x10
c001c230:	a8 01                	test   al,0x1
c001c232:	74 02                	je     c001c236 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c234:	b3 07                	mov    bl,0x7
c001c236:	a8 02                	test   al,0x2
c001c238:	74 02                	je     c001c23c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c23a:	b3 03                	mov    bl,0x3
c001c23c:	a8 04                	test   al,0x4
c001c23e:	74 02                	je     c001c242 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c240:	b3 14                	mov    bl,0x14
c001c242:	a8 08                	test   al,0x8
c001c244:	74 02                	je     c001c248 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c246:	b3 03                	mov    bl,0x3
c001c248:	a8 10                	test   al,0x10
c001c24a:	74 02                	je     c001c24e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c24c:	b3 15                	mov    bl,0x15
c001c24e:	a8 20                	test   al,0x20
c001c250:	74 02                	je     c001c254 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c252:	b3 03                	mov    bl,0x3
c001c254:	a8 40                	test   al,0x40
c001c256:	74 02                	je     c001c25a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c258:	b3 16                	mov    bl,0x16
c001c25a:	a8 80                	test   al,0x80
c001c25c:	74 18                	je     c001c276 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c25e:	b3 0d                	mov    bl,0xd
c001c260:	eb 14                	jmp    c001c276 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c262:	83 ff 03             	cmp    edi,0x3
c001c265:	74 0d                	je     c001c274 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c267:	83 ff 04             	cmp    edi,0x4
c001c26a:	75 0a                	jne    c001c276 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c26c:	b3 08                	mov    bl,0x8
c001c26e:	eb 06                	jmp    c001c276 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c270:	b3 13                	mov    bl,0x13
c001c272:	eb 02                	jmp    c001c276 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c274:	b3 17                	mov    bl,0x17
c001c276:	83 c4 1c             	add    esp,0x1c
c001c279:	88 d8                	mov    al,bl
c001c27b:	5b                   	pop    ebx
c001c27c:	5e                   	pop    esi
c001c27d:	5f                   	pop    edi
c001c27e:	5d                   	pop    ebp
c001c27f:	c3                   	ret    

c001c280 <IDE::polling(unsigned char, unsigned int)>:
c001c280:	57                   	push   edi
c001c281:	56                   	push   esi
c001c282:	53                   	push   ebx
c001c283:	bb 04 00 00 00       	mov    ebx,0x4
c001c288:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c28c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c291:	52                   	push   edx
c001c292:	6a 0c                	push   0xc
c001c294:	56                   	push   esi
c001c295:	57                   	push   edi
c001c296:	e8 bd f5 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001c29b:	83 c4 10             	add    esp,0x10
c001c29e:	4b                   	dec    ebx
c001c29f:	75 f0                	jne    c001c291 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c2a1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c2a6:	50                   	push   eax
c001c2a7:	6a 0c                	push   0xc
c001c2a9:	56                   	push   esi
c001c2aa:	57                   	push   edi
c001c2ab:	e8 a8 f5 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001c2b0:	83 c4 10             	add    esp,0x10
c001c2b3:	a8 01                	test   al,0x1
c001c2b5:	75 17                	jne    c001c2ce <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c2b7:	a8 20                	test   al,0x20
c001c2b9:	75 0f                	jne    c001c2ca <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c2bb:	4b                   	dec    ebx
c001c2bc:	74 10                	je     c001c2ce <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c2be:	a8 80                	test   al,0x80
c001c2c0:	75 e4                	jne    c001c2a6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c2c2:	a8 08                	test   al,0x8
c001c2c4:	74 e0                	je     c001c2a6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c2c6:	31 c0                	xor    eax,eax
c001c2c8:	eb 06                	jmp    c001c2d0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c2ca:	b0 01                	mov    al,0x1
c001c2cc:	eb 02                	jmp    c001c2d0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c2ce:	b0 02                	mov    al,0x2
c001c2d0:	5b                   	pop    ebx
c001c2d1:	5e                   	pop    esi
c001c2d2:	5f                   	pop    edi
c001c2d3:	c3                   	ret    

c001c2d4 <SATABus::close(int, int, void*)>:
c001c2d4:	31 c0                	xor    eax,eax
c001c2d6:	c3                   	ret    
c001c2d7:	90                   	nop

c001c2d8 <SATABus::detect()>:
c001c2d8:	c3                   	ret    
c001c2d9:	90                   	nop

c001c2da <SATABus::SATABus()>:
c001c2da:	83 ec 0c             	sub    esp,0xc
c001c2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e1:	83 ec 08             	sub    esp,0x8
c001c2e4:	68 80 2b 02 c0       	push   0xc0022b80
c001c2e9:	50                   	push   eax
c001c2ea:	e8 55 06 ff ff       	call   c000c944 <HardDiskController::HardDiskController(char const*)>
c001c2ef:	83 c4 10             	add    esp,0x10
c001c2f2:	ba ac 2b 02 c0       	mov    edx,0xc0022bac
c001c2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2fb:	89 10                	mov    DWORD PTR [eax],edx
c001c2fd:	83 ec 0c             	sub    esp,0xc
c001c300:	6a 50                	push   0x50
c001c302:	e8 87 bb fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c307:	83 c4 10             	add    esp,0x10
c001c30a:	89 c2                	mov    edx,eax
c001c30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c310:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c316:	83 ec 0c             	sub    esp,0xc
c001c319:	6a 50                	push   0x50
c001c31b:	e8 ed d2 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c320:	83 c4 10             	add    esp,0x10
c001c323:	89 c2                	mov    edx,eax
c001c325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c329:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c32f:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c334:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c338:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c33e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c342:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c348:	83 ec 0c             	sub    esp,0xc
c001c34b:	6a 03                	push   0x3
c001c34d:	6a 50                	push   0x50
c001c34f:	51                   	push   ecx
c001c350:	52                   	push   edx
c001c351:	50                   	push   eax
c001c352:	e8 c3 db fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c357:	83 c4 20             	add    esp,0x20
c001c35a:	90                   	nop
c001c35b:	83 c4 0c             	add    esp,0xc
c001c35e:	c3                   	ret    
c001c35f:	90                   	nop

c001c360 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c360:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c364:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c367:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c36a:	09 c2                	or     edx,eax
c001c36c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c370:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c376:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c378:	31 c0                	xor    eax,eax
c001c37a:	c1 e9 08             	shr    ecx,0x8
c001c37d:	83 e1 0f             	and    ecx,0xf
c001c380:	39 c8                	cmp    eax,ecx
c001c382:	74 0a                	je     c001c38e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c384:	f6 c2 01             	test   dl,0x1
c001c387:	74 08                	je     c001c391 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c389:	d1 ea                	shr    edx,1
c001c38b:	40                   	inc    eax
c001c38c:	eb f2                	jmp    c001c380 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c38e:	83 c8 ff             	or     eax,0xffffffff
c001c391:	c3                   	ret    

c001c392 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c392:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c396:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c399:	89 c2                	mov    edx,eax
c001c39b:	c1 ea 08             	shr    edx,0x8
c001c39e:	83 e2 0f             	and    edx,0xf
c001c3a1:	4a                   	dec    edx
c001c3a2:	75 32                	jne    c001c3d6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c3a4:	83 e0 0f             	and    eax,0xf
c001c3a7:	83 f8 03             	cmp    eax,0x3
c001c3aa:	75 2a                	jne    c001c3d6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c3ac:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c3af:	b8 02 00 00 00       	mov    eax,0x2
c001c3b4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c3ba:	74 1c                	je     c001c3d8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c3bc:	b8 04 00 00 00       	mov    eax,0x4
c001c3c1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c3c7:	74 0f                	je     c001c3d8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c3c9:	31 c0                	xor    eax,eax
c001c3cb:	83 fa 03             	cmp    edx,0x3
c001c3ce:	0f 94 c0             	sete   al
c001c3d1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c3d5:	c3                   	ret    
c001c3d6:	31 c0                	xor    eax,eax
c001c3d8:	c3                   	ret    
c001c3d9:	90                   	nop

c001c3da <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c3da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3e1:	0f ba e2 0f          	bt     edx,0xf
c001c3e5:	72 f7                	jb     c001c3de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c3e7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3ea:	83 ca 10             	or     edx,0x10
c001c3ed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3f3:	83 ca 01             	or     edx,0x1
c001c3f6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3f9:	c3                   	ret    

c001c3fa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c3fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c401:	83 e2 fe             	and    edx,0xfffffffe
c001c404:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c407:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c40a:	83 e2 ef             	and    edx,0xffffffef
c001c40d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c410:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c413:	0f ba e2 0e          	bt     edx,0xe
c001c417:	72 f7                	jb     c001c410 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c419:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c41c:	0f ba e2 0f          	bt     edx,0xf
c001c420:	72 ee                	jb     c001c410 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c422:	c3                   	ret    
c001c423:	90                   	nop

c001c424 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c424:	55                   	push   ebp
c001c425:	57                   	push   edi
c001c426:	56                   	push   esi
c001c427:	53                   	push   ebx
c001c428:	83 ec 1c             	sub    esp,0x1c
c001c42b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c42f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c433:	53                   	push   ebx
c001c434:	56                   	push   esi
c001c435:	e8 c0 ff ff ff       	call   c001c3fa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c43a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c43e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c444:	83 ec 0c             	sub    esp,0xc
c001c447:	c1 e5 0a             	shl    ebp,0xa
c001c44a:	01 e8                	add    eax,ebp
c001c44c:	89 03                	mov    DWORD PTR [ebx],eax
c001c44e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c450:	68 00 04 00 00       	push   0x400
c001c455:	6a 00                	push   0x0
c001c457:	50                   	push   eax
c001c458:	e8 93 40 fe ff       	call   c00004f0 <memset>
c001c45d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c463:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c467:	01 e8                	add    eax,ebp
c001c469:	83 c4 1c             	add    esp,0x1c
c001c46c:	89 03                	mov    DWORD PTR [ebx],eax
c001c46e:	c1 e2 08             	shl    edx,0x8
c001c471:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c478:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c47e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c484:	01 f8                	add    eax,edi
c001c486:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c489:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c48c:	68 00 01 00 00       	push   0x100
c001c491:	6a 00                	push   0x0
c001c493:	50                   	push   eax
c001c494:	e8 57 40 fe ff       	call   c00004f0 <memset>
c001c499:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c49f:	01 fa                	add    edx,edi
c001c4a1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c4a5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c4a8:	c1 e7 0d             	shl    edi,0xd
c001c4ab:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c4b2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c4b8:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c4be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c4c2:	31 ff                	xor    edi,edi
c001c4c4:	83 c4 10             	add    esp,0x10
c001c4c7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c4cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4d1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c4d7:	83 c5 20             	add    ebp,0x20
c001c4da:	01 f8                	add    eax,edi
c001c4dc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c4df:	52                   	push   edx
c001c4e0:	68 00 01 00 00       	push   0x100
c001c4e5:	6a 00                	push   0x0
c001c4e7:	50                   	push   eax
c001c4e8:	e8 03 40 fe ff       	call   c00004f0 <memset>
c001c4ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c4f1:	83 c4 10             	add    esp,0x10
c001c4f4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c4fa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c501:	01 f8                	add    eax,edi
c001c503:	81 c7 00 01 00 00    	add    edi,0x100
c001c509:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c50c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c512:	75 b3                	jne    c001c4c7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c514:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c51b:	50                   	push   eax
c001c51c:	50                   	push   eax
c001c51d:	53                   	push   ebx
c001c51e:	56                   	push   esi
c001c51f:	e8 b6 fe ff ff       	call   c001c3da <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c524:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c52b:	83 c4 2c             	add    esp,0x2c
c001c52e:	5b                   	pop    ebx
c001c52f:	5e                   	pop    esi
c001c530:	5f                   	pop    edi
c001c531:	5d                   	pop    ebp
c001c532:	c3                   	ret    
c001c533:	90                   	nop

c001c534 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c534:	55                   	push   ebp
c001c535:	57                   	push   edi
c001c536:	56                   	push   esi
c001c537:	53                   	push   ebx
c001c538:	31 db                	xor    ebx,ebx
c001c53a:	83 ec 0c             	sub    esp,0xc
c001c53d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c541:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c545:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c548:	f7 c7 01 00 00 00    	test   edi,0x1
c001c54e:	74 7a                	je     c001c5ca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c550:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c554:	89 d8                	mov    eax,ebx
c001c556:	c1 e0 07             	shl    eax,0x7
c001c559:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c560:	55                   	push   ebp
c001c561:	56                   	push   esi
c001c562:	e8 2b fe ff ff       	call   c001c392 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c567:	5a                   	pop    edx
c001c568:	83 f8 01             	cmp    eax,0x1
c001c56b:	59                   	pop    ecx
c001c56c:	75 21                	jne    c001c58f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c56e:	50                   	push   eax
c001c56f:	53                   	push   ebx
c001c570:	55                   	push   ebp
c001c571:	56                   	push   esi
c001c572:	e8 ad fe ff ff       	call   c001c424 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c577:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c57e:	e8 33 b5 fe ff       	call   c0007ab6 <malloc>
c001c583:	89 c5                	mov    ebp,eax
c001c585:	89 04 24             	mov    DWORD PTR [esp],eax
c001c588:	e8 99 10 00 00       	call   c001d626 <SATA::SATA()>
c001c58d:	eb 24                	jmp    c001c5b3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c58f:	83 f8 04             	cmp    eax,0x4
c001c592:	75 36                	jne    c001c5ca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c594:	51                   	push   ecx
c001c595:	53                   	push   ebx
c001c596:	55                   	push   ebp
c001c597:	56                   	push   esi
c001c598:	e8 87 fe ff ff       	call   c001c424 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c59d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c5a4:	e8 0d b5 fe ff       	call   c0007ab6 <malloc>
c001c5a9:	89 c5                	mov    ebp,eax
c001c5ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5ae:	e8 d5 17 00 00       	call   c001dd88 <SATAPI::SATAPI()>
c001c5b3:	58                   	pop    eax
c001c5b4:	5a                   	pop    edx
c001c5b5:	55                   	push   ebp
c001c5b6:	56                   	push   esi
c001c5b7:	e8 46 00 ff ff       	call   c000c602 <Device::addChild(Device*)>
c001c5bc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c5bf:	56                   	push   esi
c001c5c0:	6a 00                	push   0x0
c001c5c2:	53                   	push   ebx
c001c5c3:	55                   	push   ebp
c001c5c4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c5c7:	83 c4 20             	add    esp,0x20
c001c5ca:	d1 ef                	shr    edi,1
c001c5cc:	43                   	inc    ebx
c001c5cd:	83 fb 20             	cmp    ebx,0x20
c001c5d0:	0f 85 72 ff ff ff    	jne    c001c548 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c5d6:	83 c4 0c             	add    esp,0xc
c001c5d9:	5b                   	pop    ebx
c001c5da:	5e                   	pop    esi
c001c5db:	5f                   	pop    edi
c001c5dc:	5d                   	pop    ebp
c001c5dd:	c3                   	ret    

c001c5de <SATABus::open(int, int, void*)>:
c001c5de:	83 ec 14             	sub    esp,0x14
c001c5e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5e5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c5eb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c5f1:	52                   	push   edx
c001c5f2:	50                   	push   eax
c001c5f3:	e8 3c ff ff ff       	call   c001c534 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c5f8:	31 c0                	xor    eax,eax
c001c5fa:	83 c4 1c             	add    esp,0x1c
c001c5fd:	c3                   	ret    

c001c5fe <ATA::close(int, int, void*)>:
c001c5fe:	83 ec 0c             	sub    esp,0xc
c001c601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c605:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c60b:	85 c0                	test   eax,eax
c001c60d:	74 0c                	je     c001c61b <ATA::close(int, int, void*)+0x1d>
c001c60f:	83 ec 0c             	sub    esp,0xc
c001c612:	8b 10                	mov    edx,DWORD PTR [eax]
c001c614:	50                   	push   eax
c001c615:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c618:	83 c4 10             	add    esp,0x10
c001c61b:	31 c0                	xor    eax,eax
c001c61d:	83 c4 0c             	add    esp,0xc
c001c620:	c3                   	ret    
c001c621:	90                   	nop

c001c622 <ATA::powerSaving(PowerSavingLevel)>:
c001c622:	c3                   	ret    
c001c623:	90                   	nop

c001c624 <ATA::ATA()>:
c001c624:	83 ec 0c             	sub    esp,0xc
c001c627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62b:	83 ec 04             	sub    esp,0x4
c001c62e:	68 00 02 00 00       	push   0x200
c001c633:	68 79 2c 02 c0       	push   0xc0022c79
c001c638:	50                   	push   eax
c001c639:	e8 90 03 ff ff       	call   c000c9ce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c63e:	83 c4 10             	add    esp,0x10
c001c641:	ba ec 2b 02 c0       	mov    edx,0xc0022bec
c001c646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64a:	89 10                	mov    DWORD PTR [eax],edx
c001c64c:	90                   	nop
c001c64d:	83 c4 0c             	add    esp,0xc
c001c650:	c3                   	ret    
c001c651:	90                   	nop

c001c652 <ATA::flush(bool)>:
c001c652:	53                   	push   ebx
c001c653:	83 ec 08             	sub    esp,0x8
c001c656:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c65a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c65f:	83 f8 01             	cmp    eax,0x1
c001c662:	19 c0                	sbb    eax,eax
c001c664:	83 e0 fd             	and    eax,0xfffffffd
c001c667:	05 ea 00 00 00       	add    eax,0xea
c001c66c:	50                   	push   eax
c001c66d:	6a 07                	push   0x7
c001c66f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c676:	50                   	push   eax
c001c677:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c67d:	e8 16 f1 ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c682:	83 c4 0c             	add    esp,0xc
c001c685:	6a 00                	push   0x0
c001c687:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c68e:	50                   	push   eax
c001c68f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c695:	e8 e6 fb ff ff       	call   c001c280 <IDE::polling(unsigned char, unsigned int)>
c001c69a:	83 c4 18             	add    esp,0x18
c001c69d:	5b                   	pop    ebx
c001c69e:	c3                   	ret    
c001c69f:	90                   	nop

c001c6a0 <ATA::readyForCommand()>:
c001c6a0:	56                   	push   esi
c001c6a1:	53                   	push   ebx
c001c6a2:	53                   	push   ebx
c001c6a3:	31 db                	xor    ebx,ebx
c001c6a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6a9:	51                   	push   ecx
c001c6aa:	6a 0c                	push   0xc
c001c6ac:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c6b3:	50                   	push   eax
c001c6b4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c6ba:	e8 99 f1 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001c6bf:	83 c4 10             	add    esp,0x10
c001c6c2:	a8 88                	test   al,0x88
c001c6c4:	74 1f                	je     c001c6e5 <ATA::readyForCommand()+0x45>
c001c6c6:	43                   	inc    ebx
c001c6c7:	83 fb 63             	cmp    ebx,0x63
c001c6ca:	7e dd                	jle    c001c6a9 <ATA::readyForCommand()+0x9>
c001c6cc:	83 ec 0c             	sub    esp,0xc
c001c6cf:	6a 0a                	push   0xa
c001c6d1:	e8 26 97 ff ff       	call   c0015dfc <milliTenthSleep(unsigned int)>
c001c6d6:	83 c4 10             	add    esp,0x10
c001c6d9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c6df:	75 c8                	jne    c001c6a9 <ATA::readyForCommand()+0x9>
c001c6e1:	31 c0                	xor    eax,eax
c001c6e3:	eb 02                	jmp    c001c6e7 <ATA::readyForCommand()+0x47>
c001c6e5:	b0 01                	mov    al,0x1
c001c6e7:	5a                   	pop    edx
c001c6e8:	5b                   	pop    ebx
c001c6e9:	5e                   	pop    esi
c001c6ea:	c3                   	ret    
c001c6eb:	90                   	nop

c001c6ec <ATA::access(unsigned long long, int, void*, bool)>:
c001c6ec:	55                   	push   ebp
c001c6ed:	57                   	push   edi
c001c6ee:	56                   	push   esi
c001c6ef:	53                   	push   ebx
c001c6f0:	83 ec 2c             	sub    esp,0x2c
c001c6f3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c6f7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c6fb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c6ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c703:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c707:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c70b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c70f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c719:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c71f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c723:	c1 e0 06             	shl    eax,0x6
c001c726:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c72e:	74 5d                	je     c001c78d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c730:	89 fa                	mov    edx,edi
c001c732:	89 f0                	mov    eax,esi
c001c734:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c738:	c1 ea 1c             	shr    edx,0x1c
c001c73b:	89 d1                	mov    ecx,edx
c001c73d:	09 c1                	or     ecx,eax
c001c73f:	74 25                	je     c001c766 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c741:	31 ed                	xor    ebp,ebp
c001c743:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c74a:	89 fa                	mov    edx,edi
c001c74c:	89 f0                	mov    eax,esi
c001c74e:	0f ad d0             	shrd   eax,edx,cl
c001c751:	d3 ea                	shr    edx,cl
c001c753:	f6 c1 20             	test   cl,0x20
c001c756:	74 02                	je     c001c75a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c758:	89 d0                	mov    eax,edx
c001c75a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c75e:	45                   	inc    ebp
c001c75f:	83 fd 06             	cmp    ebp,0x6
c001c762:	75 df                	jne    c001c743 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c764:	eb 76                	jmp    c001c7dc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c766:	89 f0                	mov    eax,esi
c001c768:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c76d:	89 fa                	mov    edx,edi
c001c76f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c776:	0f ac d0 10          	shrd   eax,edx,0x10
c001c77a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c77f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c783:	c1 ee 18             	shr    esi,0x18
c001c786:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c78b:	eb 56                	jmp    c001c7e3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c78d:	6a 00                	push   0x0
c001c78f:	6a 3f                	push   0x3f
c001c791:	57                   	push   edi
c001c792:	56                   	push   esi
c001c793:	e8 a8 2a 00 00       	call   c001f240 <__umoddi3>
c001c798:	83 c4 10             	add    esp,0x10
c001c79b:	40                   	inc    eax
c001c79c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c7a0:	6a 00                	push   0x0
c001c7a2:	68 f0 03 00 00       	push   0x3f0
c001c7a7:	57                   	push   edi
c001c7a8:	56                   	push   esi
c001c7a9:	e8 92 29 00 00       	call   c001f140 <__udivdi3>
c001c7ae:	83 c4 10             	add    esp,0x10
c001c7b1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c7b6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c7bd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c7c2:	6a 00                	push   0x0
c001c7c4:	6a 3f                	push   0x3f
c001c7c6:	57                   	push   edi
c001c7c7:	56                   	push   esi
c001c7c8:	e8 73 29 00 00       	call   c001f140 <__udivdi3>
c001c7cd:	83 c4 10             	add    esp,0x10
c001c7d0:	83 e0 0f             	and    eax,0xf
c001c7d3:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c7d8:	89 c6                	mov    esi,eax
c001c7da:	eb 07                	jmp    c001c7e3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c7dc:	31 f6                	xor    esi,esi
c001c7de:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c7e3:	bf 01 00 00 00       	mov    edi,0x1
c001c7e8:	50                   	push   eax
c001c7e9:	6a 00                	push   0x0
c001c7eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7f2:	50                   	push   eax
c001c7f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c7f7:	e8 a4 f1 ff ff       	call   c001b9a0 <IDE::enableIRQs(unsigned char, bool)>
c001c7fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7ff:	e8 9c fe ff ff       	call   c001c6a0 <ATA::readyForCommand()>
c001c804:	83 c4 10             	add    esp,0x10
c001c807:	84 c0                	test   al,al
c001c809:	0f 84 69 02 00 00    	je     c001ca78 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c80f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c815:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c81b:	c1 e0 04             	shl    eax,0x4
c001c81e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c825:	09 c6                	or     esi,eax
c001c827:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c82c:	75 05                	jne    c001c833 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c82e:	83 ce a0             	or     esi,0xffffffa0
c001c831:	eb 03                	jmp    c001c836 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c833:	83 ce e0             	or     esi,0xffffffe0
c001c836:	89 f0                	mov    eax,esi
c001c838:	0f b6 f0             	movzx  esi,al
c001c83b:	56                   	push   esi
c001c83c:	6a 06                	push   0x6
c001c83e:	51                   	push   ecx
c001c83f:	52                   	push   edx
c001c840:	e8 53 ef ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c845:	83 c4 10             	add    esp,0x10
c001c848:	6a 00                	push   0x0
c001c84a:	6a 01                	push   0x1
c001c84c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c853:	50                   	push   eax
c001c854:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c85a:	e8 39 ef ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c85f:	83 c4 10             	add    esp,0x10
c001c862:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c867:	83 f8 02             	cmp    eax,0x2
c001c86a:	75 6e                	jne    c001c8da <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c86c:	6a 00                	push   0x0
c001c86e:	6a 08                	push   0x8
c001c870:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c877:	50                   	push   eax
c001c878:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c87e:	e8 15 ef ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c883:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c888:	50                   	push   eax
c001c889:	6a 09                	push   0x9
c001c88b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c892:	50                   	push   eax
c001c893:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c899:	e8 fa ee ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c89e:	83 c4 20             	add    esp,0x20
c001c8a1:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c8a6:	50                   	push   eax
c001c8a7:	6a 0a                	push   0xa
c001c8a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8b0:	50                   	push   eax
c001c8b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8b7:	e8 dc ee ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8bc:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c8c1:	50                   	push   eax
c001c8c2:	6a 0b                	push   0xb
c001c8c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8cb:	50                   	push   eax
c001c8cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8d2:	e8 c1 ee ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8d7:	83 c4 20             	add    esp,0x20
c001c8da:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c8df:	50                   	push   eax
c001c8e0:	6a 02                	push   0x2
c001c8e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8e9:	50                   	push   eax
c001c8ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8f0:	e8 a3 ee ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c8fa:	50                   	push   eax
c001c8fb:	6a 03                	push   0x3
c001c8fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c904:	50                   	push   eax
c001c905:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c90b:	e8 88 ee ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c910:	83 c4 20             	add    esp,0x20
c001c913:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c918:	50                   	push   eax
c001c919:	6a 04                	push   0x4
c001c91b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c922:	50                   	push   eax
c001c923:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c929:	e8 6a ee ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c92e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c933:	50                   	push   eax
c001c934:	6a 05                	push   0x5
c001c936:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c93d:	50                   	push   eax
c001c93e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c944:	e8 4f ee ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c949:	83 c4 20             	add    esp,0x20
c001c94c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c951:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001c956:	74 11                	je     c001c969 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001c958:	b8 30 00 00 00       	mov    eax,0x30
c001c95d:	83 fa 02             	cmp    edx,0x2
c001c960:	75 16                	jne    c001c978 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c962:	b8 34 00 00 00       	mov    eax,0x34
c001c967:	eb 0f                	jmp    c001c978 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c969:	b8 20 00 00 00       	mov    eax,0x20
c001c96e:	83 fa 02             	cmp    edx,0x2
c001c971:	75 05                	jne    c001c978 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c973:	b8 24 00 00 00       	mov    eax,0x24
c001c978:	50                   	push   eax
c001c979:	6a 07                	push   0x7
c001c97b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c982:	50                   	push   eax
c001c983:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c989:	e8 0a ee ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c98e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c992:	83 c4 10             	add    esp,0x10
c001c995:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001c99a:	85 f6                	test   esi,esi
c001c99c:	0f 84 b3 00 00 00    	je     c001ca55 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001c9a2:	50                   	push   eax
c001c9a3:	6a 01                	push   0x1
c001c9a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ac:	50                   	push   eax
c001c9ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9b3:	e8 c8 f8 ff ff       	call   c001c280 <IDE::polling(unsigned char, unsigned int)>
c001c9b8:	83 c4 10             	add    esp,0x10
c001c9bb:	0f b6 f8             	movzx  edi,al
c001c9be:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c9c4:	85 ff                	test   edi,edi
c001c9c6:	74 1d                	je     c001c9e5 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001c9c8:	57                   	push   edi
c001c9c9:	0f b6 d2             	movzx  edx,dl
c001c9cc:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c9d3:	50                   	push   eax
c001c9d4:	52                   	push   edx
c001c9d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9db:	e8 e6 f7 ff ff       	call   c001c1c6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c9e0:	e9 90 00 00 00       	jmp    c001ca75 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001c9e5:	85 ed                	test   ebp,ebp
c001c9e7:	74 3b                	je     c001ca24 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001c9e9:	31 c9                	xor    ecx,ecx
c001c9eb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c9ef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c9f3:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001c9f7:	50                   	push   eax
c001c9f8:	50                   	push   eax
c001c9f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca00:	50                   	push   eax
c001ca01:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca07:	e8 7a ed ff ff       	call   c001b786 <IDE::getBase(unsigned char)>
c001ca0c:	89 c2                	mov    edx,eax
c001ca0e:	89 f8                	mov    eax,edi
c001ca10:	66 ef                	out    dx,ax
c001ca12:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ca16:	83 c4 10             	add    esp,0x10
c001ca19:	41                   	inc    ecx
c001ca1a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001ca20:	75 c9                	jne    c001c9eb <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001ca22:	eb 23                	jmp    c001ca47 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001ca24:	0f b6 d2             	movzx  edx,dl
c001ca27:	51                   	push   ecx
c001ca28:	51                   	push   ecx
c001ca29:	52                   	push   edx
c001ca2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca30:	e8 51 ed ff ff       	call   c001b786 <IDE::getBase(unsigned char)>
c001ca35:	b9 00 01 00 00       	mov    ecx,0x100
c001ca3a:	89 c2                	mov    edx,eax
c001ca3c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ca40:	fc                   	cld    
c001ca41:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ca44:	83 c4 10             	add    esp,0x10
c001ca47:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ca4f:	4e                   	dec    esi
c001ca50:	e9 45 ff ff ff       	jmp    c001c99a <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001ca55:	31 ff                	xor    edi,edi
c001ca57:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca5c:	74 1a                	je     c001ca78 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001ca5e:	50                   	push   eax
c001ca5f:	50                   	push   eax
c001ca60:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001ca65:	83 f8 02             	cmp    eax,0x2
c001ca68:	0f 94 c0             	sete   al
c001ca6b:	0f b6 c0             	movzx  eax,al
c001ca6e:	50                   	push   eax
c001ca6f:	53                   	push   ebx
c001ca70:	e8 dd fb ff ff       	call   c001c652 <ATA::flush(bool)>
c001ca75:	83 c4 10             	add    esp,0x10
c001ca78:	83 c4 2c             	add    esp,0x2c
c001ca7b:	89 f8                	mov    eax,edi
c001ca7d:	5b                   	pop    ebx
c001ca7e:	5e                   	pop    esi
c001ca7f:	5f                   	pop    edi
c001ca80:	5d                   	pop    ebp
c001ca81:	c3                   	ret    

c001ca82 <ATA::detectCHS()>:
c001ca82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca86:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ca8c:	c1 e0 06             	shl    eax,0x6
c001ca8f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ca95:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ca9f:	c7 44 24 04 d0 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bd0
c001caa7:	e9 61 47 ff ff       	jmp    c001120d <KePanic(char const*)>

c001caac <ATA::open(int, int, void*)>:
c001caac:	53                   	push   ebx
c001caad:	83 ec 08             	sub    esp,0x8
c001cab0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cab4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cab8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cabc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cac2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cac8:	c1 e0 06             	shl    eax,0x6
c001cacb:	01 d0                	add    eax,edx
c001cacd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cad4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cada:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cae1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001caeb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001caf1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001caf8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001caff:	75 0c                	jne    c001cb0d <ATA::open(int, int, void*)+0x61>
c001cb01:	83 ec 0c             	sub    esp,0xc
c001cb04:	53                   	push   ebx
c001cb05:	e8 78 ff ff ff       	call   c001ca82 <ATA::detectCHS()>
c001cb0a:	83 c4 10             	add    esp,0x10
c001cb0d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb13:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cb19:	c1 e0 06             	shl    eax,0x6
c001cb1c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cb23:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cb2d:	d1 e8                	shr    eax,1
c001cb2f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cb35:	6a 04                	push   0x4
c001cb37:	6a 0c                	push   0xc
c001cb39:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb40:	50                   	push   eax
c001cb41:	52                   	push   edx
c001cb42:	e8 51 ec ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb47:	90                   	nop
c001cb48:	90                   	nop
c001cb49:	6a 00                	push   0x0
c001cb4b:	6a 0c                	push   0xc
c001cb4d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb54:	50                   	push   eax
c001cb55:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb5b:	e8 38 ec ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb60:	83 c4 14             	add    esp,0x14
c001cb63:	53                   	push   ebx
c001cb64:	e8 cd fe fe ff       	call   c000ca36 <PhysicalDisk::startCache()>
c001cb69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb6c:	e8 09 11 ff ff       	call   c000dc7a <createPartitionsForDisk(PhysicalDisk*)>
c001cb71:	31 c0                	xor    eax,eax
c001cb73:	83 c4 18             	add    esp,0x18
c001cb76:	5b                   	pop    ebx
c001cb77:	c3                   	ret    

c001cb78 <combineCharAndColour(char, unsigned char)>:
c001cb78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb7d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cb83:	c1 e0 08             	shl    eax,0x8
c001cb86:	09 d0                	or     eax,edx
c001cb88:	c3                   	ret    

c001cb89 <combineColours(unsigned char, unsigned char)>:
c001cb89:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb8e:	c1 e0 04             	shl    eax,0x4
c001cb91:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cb95:	c3                   	ret    

c001cb96 <ATA::read(unsigned long long, int, void*)>:
c001cb96:	55                   	push   ebp
c001cb97:	57                   	push   edi
c001cb98:	56                   	push   esi
c001cb99:	be 04 00 00 00       	mov    esi,0x4
c001cb9e:	53                   	push   ebx
c001cb9f:	83 ec 0c             	sub    esp,0xc
c001cba2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cba6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbaa:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cbad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cbb1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cbb5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cbbb:	0f 87 a1 01 00 00    	ja     c001cd62 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cbc1:	be 06 00 00 00       	mov    esi,0x6
c001cbc6:	85 c9                	test   ecx,ecx
c001cbc8:	0f 84 94 01 00 00    	je     c001cd62 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cbce:	55                   	push   ebp
c001cbcf:	55                   	push   ebp
c001cbd0:	6a 00                	push   0x0
c001cbd2:	51                   	push   ecx
c001cbd3:	53                   	push   ebx
c001cbd4:	52                   	push   edx
c001cbd5:	50                   	push   eax
c001cbd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbda:	e8 0d fb ff ff       	call   c001c6ec <ATA::access(unsigned long long, int, void*, bool)>
c001cbdf:	83 c4 20             	add    esp,0x20
c001cbe2:	89 c6                	mov    esi,eax
c001cbe4:	85 c0                	test   eax,eax
c001cbe6:	0f 85 71 01 00 00    	jne    c001cd5d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cbec:	03 1d 54 ae 02 c0    	add    ebx,DWORD PTR ds:0xc002ae54
c001cbf2:	89 da                	mov    edx,ebx
c001cbf4:	50                   	push   eax
c001cbf5:	bd 10 27 00 00       	mov    ebp,0x2710
c001cbfa:	50                   	push   eax
c001cbfb:	89 1d 54 ae 02 c0    	mov    DWORD PTR ds:0xc002ae54,ebx
c001cc01:	6a 0f                	push   0xf
c001cc03:	6a 00                	push   0x0
c001cc05:	e8 7f ff ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001cc0a:	59                   	pop    ecx
c001cc0b:	b9 0a 00 00 00       	mov    ecx,0xa
c001cc10:	5b                   	pop    ebx
c001cc11:	0f b6 d8             	movzx  ebx,al
c001cc14:	89 d0                	mov    eax,edx
c001cc16:	53                   	push   ebx
c001cc17:	99                   	cdq    
c001cc18:	f7 fd                	idiv   ebp
c001cc1a:	99                   	cdq    
c001cc1b:	f7 f9                	idiv   ecx
c001cc1d:	83 c2 30             	add    edx,0x30
c001cc20:	0f b6 d2             	movzx  edx,dl
c001cc23:	52                   	push   edx
c001cc24:	e8 4f ff ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cc29:	5f                   	pop    edi
c001cc2a:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc2f:	5a                   	pop    edx
c001cc30:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc36:	53                   	push   ebx
c001cc37:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc3c:	99                   	cdq    
c001cc3d:	f7 ff                	idiv   edi
c001cc3f:	99                   	cdq    
c001cc40:	f7 f9                	idiv   ecx
c001cc42:	8d 42 30             	lea    eax,[edx+0x30]
c001cc45:	0f b6 c0             	movzx  eax,al
c001cc48:	50                   	push   eax
c001cc49:	e8 2a ff ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cc4e:	5f                   	pop    edi
c001cc4f:	bf 64 00 00 00       	mov    edi,0x64
c001cc54:	5a                   	pop    edx
c001cc55:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cc5b:	53                   	push   ebx
c001cc5c:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc61:	99                   	cdq    
c001cc62:	f7 ff                	idiv   edi
c001cc64:	99                   	cdq    
c001cc65:	f7 f9                	idiv   ecx
c001cc67:	8d 42 30             	lea    eax,[edx+0x30]
c001cc6a:	0f b6 c0             	movzx  eax,al
c001cc6d:	50                   	push   eax
c001cc6e:	e8 05 ff ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cc73:	5a                   	pop    edx
c001cc74:	5a                   	pop    edx
c001cc75:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cc7b:	53                   	push   ebx
c001cc7c:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc81:	99                   	cdq    
c001cc82:	f7 f9                	idiv   ecx
c001cc84:	99                   	cdq    
c001cc85:	f7 f9                	idiv   ecx
c001cc87:	8d 42 30             	lea    eax,[edx+0x30]
c001cc8a:	0f b6 c0             	movzx  eax,al
c001cc8d:	50                   	push   eax
c001cc8e:	e8 e5 fe ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cc93:	5a                   	pop    edx
c001cc94:	5a                   	pop    edx
c001cc95:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cc9b:	53                   	push   ebx
c001cc9c:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cca1:	99                   	cdq    
c001cca2:	f7 f9                	idiv   ecx
c001cca4:	83 c2 30             	add    edx,0x30
c001cca7:	0f b6 d2             	movzx  edx,dl
c001ccaa:	52                   	push   edx
c001ccab:	e8 c8 fe ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001ccb0:	5a                   	pop    edx
c001ccb1:	5a                   	pop    edx
c001ccb2:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ccb8:	53                   	push   ebx
c001ccb9:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ccbe:	99                   	cdq    
c001ccbf:	f7 fd                	idiv   ebp
c001ccc1:	99                   	cdq    
c001ccc2:	f7 f9                	idiv   ecx
c001ccc4:	8d 42 30             	lea    eax,[edx+0x30]
c001ccc7:	0f b6 c0             	movzx  eax,al
c001ccca:	50                   	push   eax
c001cccb:	e8 a8 fe ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001ccd0:	5d                   	pop    ebp
c001ccd1:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ccd6:	5a                   	pop    edx
c001ccd7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ccdd:	53                   	push   ebx
c001ccde:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cce3:	99                   	cdq    
c001cce4:	f7 fd                	idiv   ebp
c001cce6:	99                   	cdq    
c001cce7:	f7 f9                	idiv   ecx
c001cce9:	8d 42 30             	lea    eax,[edx+0x30]
c001ccec:	0f b6 c0             	movzx  eax,al
c001ccef:	50                   	push   eax
c001ccf0:	e8 83 fe ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001ccf5:	5d                   	pop    ebp
c001ccf6:	5a                   	pop    edx
c001ccf7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ccfd:	53                   	push   ebx
c001ccfe:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cd03:	99                   	cdq    
c001cd04:	f7 ff                	idiv   edi
c001cd06:	99                   	cdq    
c001cd07:	f7 f9                	idiv   ecx
c001cd09:	8d 42 30             	lea    eax,[edx+0x30]
c001cd0c:	0f b6 c0             	movzx  eax,al
c001cd0f:	50                   	push   eax
c001cd10:	e8 63 fe ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cd15:	5f                   	pop    edi
c001cd16:	5d                   	pop    ebp
c001cd17:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cd1d:	53                   	push   ebx
c001cd1e:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cd23:	99                   	cdq    
c001cd24:	f7 f9                	idiv   ecx
c001cd26:	99                   	cdq    
c001cd27:	f7 f9                	idiv   ecx
c001cd29:	8d 42 30             	lea    eax,[edx+0x30]
c001cd2c:	0f b6 c0             	movzx  eax,al
c001cd2f:	50                   	push   eax
c001cd30:	e8 43 fe ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cd35:	5a                   	pop    edx
c001cd36:	5f                   	pop    edi
c001cd37:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cd3d:	53                   	push   ebx
c001cd3e:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cd43:	99                   	cdq    
c001cd44:	f7 f9                	idiv   ecx
c001cd46:	83 c2 30             	add    edx,0x30
c001cd49:	0f b6 d2             	movzx  edx,dl
c001cd4c:	52                   	push   edx
c001cd4d:	e8 26 fe ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cd52:	83 c4 10             	add    esp,0x10
c001cd55:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cd5b:	eb 05                	jmp    c001cd62 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd5d:	be 01 00 00 00       	mov    esi,0x1
c001cd62:	83 c4 0c             	add    esp,0xc
c001cd65:	89 f0                	mov    eax,esi
c001cd67:	5b                   	pop    ebx
c001cd68:	5e                   	pop    esi
c001cd69:	5f                   	pop    edi
c001cd6a:	5d                   	pop    ebp
c001cd6b:	c3                   	ret    

c001cd6c <ATA::write(unsigned long long, int, void*)>:
c001cd6c:	55                   	push   ebp
c001cd6d:	57                   	push   edi
c001cd6e:	56                   	push   esi
c001cd6f:	be 04 00 00 00       	mov    esi,0x4
c001cd74:	53                   	push   ebx
c001cd75:	83 ec 0c             	sub    esp,0xc
c001cd78:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd80:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd87:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd8b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd91:	0f 87 9c 01 00 00    	ja     c001cf33 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cd97:	be 06 00 00 00       	mov    esi,0x6
c001cd9c:	85 c9                	test   ecx,ecx
c001cd9e:	0f 84 8f 01 00 00    	je     c001cf33 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cda4:	55                   	push   ebp
c001cda5:	55                   	push   ebp
c001cda6:	6a 01                	push   0x1
c001cda8:	51                   	push   ecx
c001cda9:	53                   	push   ebx
c001cdaa:	52                   	push   edx
c001cdab:	50                   	push   eax
c001cdac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdb0:	e8 37 f9 ff ff       	call   c001c6ec <ATA::access(unsigned long long, int, void*, bool)>
c001cdb5:	83 c4 20             	add    esp,0x20
c001cdb8:	89 c6                	mov    esi,eax
c001cdba:	85 c0                	test   eax,eax
c001cdbc:	0f 85 6c 01 00 00    	jne    c001cf2e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cdc2:	01 1d 50 ae 02 c0    	add    DWORD PTR ds:0xc002ae50,ebx
c001cdc8:	bd 10 27 00 00       	mov    ebp,0x2710
c001cdcd:	50                   	push   eax
c001cdce:	50                   	push   eax
c001cdcf:	6a 0f                	push   0xf
c001cdd1:	6a 00                	push   0x0
c001cdd3:	e8 b1 fd ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001cdd8:	5a                   	pop    edx
c001cdd9:	0f b6 d8             	movzx  ebx,al
c001cddc:	59                   	pop    ecx
c001cddd:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cde2:	53                   	push   ebx
c001cde3:	b9 0a 00 00 00       	mov    ecx,0xa
c001cde8:	99                   	cdq    
c001cde9:	f7 fd                	idiv   ebp
c001cdeb:	99                   	cdq    
c001cdec:	f7 f9                	idiv   ecx
c001cdee:	8d 42 30             	lea    eax,[edx+0x30]
c001cdf1:	0f b6 c0             	movzx  eax,al
c001cdf4:	50                   	push   eax
c001cdf5:	e8 7e fd ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cdfa:	5f                   	pop    edi
c001cdfb:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce00:	5a                   	pop    edx
c001ce01:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce07:	53                   	push   ebx
c001ce08:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce0d:	99                   	cdq    
c001ce0e:	f7 ff                	idiv   edi
c001ce10:	99                   	cdq    
c001ce11:	f7 f9                	idiv   ecx
c001ce13:	8d 42 30             	lea    eax,[edx+0x30]
c001ce16:	0f b6 c0             	movzx  eax,al
c001ce19:	50                   	push   eax
c001ce1a:	e8 59 fd ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001ce1f:	5f                   	pop    edi
c001ce20:	bf 64 00 00 00       	mov    edi,0x64
c001ce25:	5a                   	pop    edx
c001ce26:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce2c:	53                   	push   ebx
c001ce2d:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce32:	99                   	cdq    
c001ce33:	f7 ff                	idiv   edi
c001ce35:	99                   	cdq    
c001ce36:	f7 f9                	idiv   ecx
c001ce38:	8d 42 30             	lea    eax,[edx+0x30]
c001ce3b:	0f b6 c0             	movzx  eax,al
c001ce3e:	50                   	push   eax
c001ce3f:	e8 34 fd ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001ce44:	5a                   	pop    edx
c001ce45:	5a                   	pop    edx
c001ce46:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce4c:	53                   	push   ebx
c001ce4d:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce52:	99                   	cdq    
c001ce53:	f7 f9                	idiv   ecx
c001ce55:	99                   	cdq    
c001ce56:	f7 f9                	idiv   ecx
c001ce58:	8d 42 30             	lea    eax,[edx+0x30]
c001ce5b:	0f b6 c0             	movzx  eax,al
c001ce5e:	50                   	push   eax
c001ce5f:	e8 14 fd ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001ce64:	5a                   	pop    edx
c001ce65:	5a                   	pop    edx
c001ce66:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce6c:	53                   	push   ebx
c001ce6d:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce72:	99                   	cdq    
c001ce73:	f7 f9                	idiv   ecx
c001ce75:	8d 42 30             	lea    eax,[edx+0x30]
c001ce78:	0f b6 c0             	movzx  eax,al
c001ce7b:	50                   	push   eax
c001ce7c:	e8 f7 fc ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001ce81:	5a                   	pop    edx
c001ce82:	5a                   	pop    edx
c001ce83:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce89:	53                   	push   ebx
c001ce8a:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ce8f:	99                   	cdq    
c001ce90:	f7 fd                	idiv   ebp
c001ce92:	99                   	cdq    
c001ce93:	f7 f9                	idiv   ecx
c001ce95:	8d 42 30             	lea    eax,[edx+0x30]
c001ce98:	0f b6 c0             	movzx  eax,al
c001ce9b:	50                   	push   eax
c001ce9c:	e8 d7 fc ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cea1:	5d                   	pop    ebp
c001cea2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cea7:	5a                   	pop    edx
c001cea8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ceae:	53                   	push   ebx
c001ceaf:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ceb4:	99                   	cdq    
c001ceb5:	f7 fd                	idiv   ebp
c001ceb7:	99                   	cdq    
c001ceb8:	f7 f9                	idiv   ecx
c001ceba:	8d 42 30             	lea    eax,[edx+0x30]
c001cebd:	0f b6 c0             	movzx  eax,al
c001cec0:	50                   	push   eax
c001cec1:	e8 b2 fc ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cec6:	5d                   	pop    ebp
c001cec7:	5a                   	pop    edx
c001cec8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cece:	53                   	push   ebx
c001cecf:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ced4:	99                   	cdq    
c001ced5:	f7 ff                	idiv   edi
c001ced7:	99                   	cdq    
c001ced8:	f7 f9                	idiv   ecx
c001ceda:	8d 42 30             	lea    eax,[edx+0x30]
c001cedd:	0f b6 c0             	movzx  eax,al
c001cee0:	50                   	push   eax
c001cee1:	e8 92 fc ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cee6:	5f                   	pop    edi
c001cee7:	5d                   	pop    ebp
c001cee8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ceee:	53                   	push   ebx
c001ceef:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cef4:	99                   	cdq    
c001cef5:	f7 f9                	idiv   ecx
c001cef7:	99                   	cdq    
c001cef8:	f7 f9                	idiv   ecx
c001cefa:	8d 42 30             	lea    eax,[edx+0x30]
c001cefd:	0f b6 c0             	movzx  eax,al
c001cf00:	50                   	push   eax
c001cf01:	e8 72 fc ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cf06:	5a                   	pop    edx
c001cf07:	5f                   	pop    edi
c001cf08:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf0e:	53                   	push   ebx
c001cf0f:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cf14:	99                   	cdq    
c001cf15:	f7 f9                	idiv   ecx
c001cf17:	83 c2 30             	add    edx,0x30
c001cf1a:	0f b6 d2             	movzx  edx,dl
c001cf1d:	52                   	push   edx
c001cf1e:	e8 55 fc ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001cf23:	83 c4 10             	add    esp,0x10
c001cf26:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf2c:	eb 05                	jmp    c001cf33 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf2e:	be 01 00 00 00       	mov    esi,0x1
c001cf33:	83 c4 0c             	add    esp,0xc
c001cf36:	89 f0                	mov    eax,esi
c001cf38:	5b                   	pop    ebx
c001cf39:	5e                   	pop    esi
c001cf3a:	5f                   	pop    edi
c001cf3b:	5d                   	pop    ebp
c001cf3c:	c3                   	ret    
c001cf3d:	90                   	nop

c001cf3e <ATAPI::write(unsigned long long, int, void*)>:
c001cf3e:	b8 03 00 00 00       	mov    eax,0x3
c001cf43:	c3                   	ret    

c001cf44 <ATAPI::close(int, int, void*)>:
c001cf44:	83 ec 0c             	sub    esp,0xc
c001cf47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf51:	85 c0                	test   eax,eax
c001cf53:	74 0c                	je     c001cf61 <ATAPI::close(int, int, void*)+0x1d>
c001cf55:	83 ec 0c             	sub    esp,0xc
c001cf58:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf5a:	50                   	push   eax
c001cf5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cf5e:	83 c4 10             	add    esp,0x10
c001cf61:	31 c0                	xor    eax,eax
c001cf63:	83 c4 0c             	add    esp,0xc
c001cf66:	c3                   	ret    
c001cf67:	90                   	nop

c001cf68 <ATAPI::ATAPI()>:
c001cf68:	83 ec 0c             	sub    esp,0xc
c001cf6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf6f:	83 ec 04             	sub    esp,0x4
c001cf72:	68 00 08 00 00       	push   0x800
c001cf77:	68 19 2d 02 c0       	push   0xc0022d19
c001cf7c:	50                   	push   eax
c001cf7d:	e8 4c fa fe ff       	call   c000c9ce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cf82:	83 c4 10             	add    esp,0x10
c001cf85:	ba 34 2c 02 c0       	mov    edx,0xc0022c34
c001cf8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf8e:	89 10                	mov    DWORD PTR [eax],edx
c001cf90:	90                   	nop
c001cf91:	83 c4 0c             	add    esp,0xc
c001cf94:	c3                   	ret    
c001cf95:	90                   	nop

c001cf96 <ATAPI::readyForCommand()>:
c001cf96:	56                   	push   esi
c001cf97:	53                   	push   ebx
c001cf98:	53                   	push   ebx
c001cf99:	31 db                	xor    ebx,ebx
c001cf9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf9f:	51                   	push   ecx
c001cfa0:	6a 0c                	push   0xc
c001cfa2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cfa9:	50                   	push   eax
c001cfaa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cfb0:	e8 a3 e8 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001cfb5:	83 c4 10             	add    esp,0x10
c001cfb8:	a8 88                	test   al,0x88
c001cfba:	74 25                	je     c001cfe1 <ATAPI::readyForCommand()+0x4b>
c001cfbc:	43                   	inc    ebx
c001cfbd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001cfc3:	7e da                	jle    c001cf9f <ATAPI::readyForCommand()+0x9>
c001cfc5:	83 ec 0c             	sub    esp,0xc
c001cfc8:	68 5e 01 00 00       	push   0x15e
c001cfcd:	e8 2a 8e ff ff       	call   c0015dfc <milliTenthSleep(unsigned int)>
c001cfd2:	83 c4 10             	add    esp,0x10
c001cfd5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001cfdb:	75 c2                	jne    c001cf9f <ATAPI::readyForCommand()+0x9>
c001cfdd:	31 c0                	xor    eax,eax
c001cfdf:	eb 02                	jmp    c001cfe3 <ATAPI::readyForCommand()+0x4d>
c001cfe1:	b0 01                	mov    al,0x1
c001cfe3:	5a                   	pop    edx
c001cfe4:	5b                   	pop    ebx
c001cfe5:	5e                   	pop    esi
c001cfe6:	c3                   	ret    
c001cfe7:	90                   	nop

c001cfe8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cfe8:	55                   	push   ebp
c001cfe9:	57                   	push   edi
c001cfea:	56                   	push   esi
c001cfeb:	53                   	push   ebx
c001cfec:	83 ec 20             	sub    esp,0x20
c001cfef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cff3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cff7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cffb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cfff:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d003:	6a 01                	push   0x1
c001d005:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d00c:	50                   	push   eax
c001d00d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d013:	e8 88 e9 ff ff       	call   c001b9a0 <IDE::enableIRQs(unsigned char, bool)>
c001d018:	5e                   	pop    esi
c001d019:	58                   	pop    eax
c001d01a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d021:	50                   	push   eax
c001d022:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d028:	e8 45 e7 ff ff       	call   c001b772 <IDE::prepareInterrupt(unsigned char)>
c001d02d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d030:	e8 61 ff ff ff       	call   c001cf96 <ATAPI::readyForCommand()>
c001d035:	83 c4 10             	add    esp,0x10
c001d038:	84 c0                	test   al,al
c001d03a:	75 0a                	jne    c001d046 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d03c:	bb 01 00 00 00       	mov    ebx,0x1
c001d041:	e9 60 02 00 00       	jmp    c001d2a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d046:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d04c:	c1 e0 04             	shl    eax,0x4
c001d04f:	0f b6 c0             	movzx  eax,al
c001d052:	50                   	push   eax
c001d053:	6a 06                	push   0x6
c001d055:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d05c:	50                   	push   eax
c001d05d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d063:	e8 30 e7 ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d068:	6a 00                	push   0x0
c001d06a:	6a 01                	push   0x1
c001d06c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d073:	50                   	push   eax
c001d074:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d07a:	e8 19 e7 ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d07f:	83 c4 20             	add    esp,0x20
c001d082:	0f b6 c3             	movzx  eax,bl
c001d085:	0f b6 df             	movzx  ebx,bh
c001d088:	50                   	push   eax
c001d089:	6a 04                	push   0x4
c001d08b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d092:	50                   	push   eax
c001d093:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d099:	e8 fa e6 ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d09e:	53                   	push   ebx
c001d09f:	6a 05                	push   0x5
c001d0a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0a8:	50                   	push   eax
c001d0a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0af:	e8 e4 e6 ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0b4:	83 c4 20             	add    esp,0x20
c001d0b7:	68 a0 00 00 00       	push   0xa0
c001d0bc:	6a 07                	push   0x7
c001d0be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0c5:	50                   	push   eax
c001d0c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0cc:	e8 c7 e6 ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0d1:	83 c4 0c             	add    esp,0xc
c001d0d4:	6a 01                	push   0x1
c001d0d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0dd:	50                   	push   eax
c001d0de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0e4:	e8 97 f1 ff ff       	call   c001c280 <IDE::polling(unsigned char, unsigned int)>
c001d0e9:	83 c4 10             	add    esp,0x10
c001d0ec:	0f b6 d8             	movzx  ebx,al
c001d0ef:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d0f5:	85 db                	test   ebx,ebx
c001d0f7:	74 20                	je     c001d119 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d0f9:	53                   	push   ebx
c001d0fa:	0f b6 c0             	movzx  eax,al
c001d0fd:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d104:	52                   	push   edx
c001d105:	50                   	push   eax
c001d106:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d10c:	e8 b5 f0 ff ff       	call   c001c1c6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d111:	83 c4 10             	add    esp,0x10
c001d114:	e9 8d 01 00 00       	jmp    c001d2a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d119:	0f b6 c0             	movzx  eax,al
c001d11c:	53                   	push   ebx
c001d11d:	53                   	push   ebx
c001d11e:	50                   	push   eax
c001d11f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d125:	e8 5c e6 ff ff       	call   c001b786 <IDE::getBase(unsigned char)>
c001d12a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d12e:	b9 06 00 00 00       	mov    ecx,0x6
c001d133:	89 c2                	mov    edx,eax
c001d135:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d138:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d13c:	83 c4 10             	add    esp,0x10
c001d13f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d148:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d14e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d155:	85 db                	test   ebx,ebx
c001d157:	0f 84 ec 00 00 00    	je     c001d249 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d15d:	51                   	push   ecx
c001d15e:	51                   	push   ecx
c001d15f:	52                   	push   edx
c001d160:	50                   	push   eax
c001d161:	e8 a0 e7 ff ff       	call   c001b906 <IDE::waitInterrupt(unsigned char)>
c001d166:	83 c4 10             	add    esp,0x10
c001d169:	84 c0                	test   al,al
c001d16b:	0f 84 cb fe ff ff    	je     c001d03c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d171:	56                   	push   esi
c001d172:	56                   	push   esi
c001d173:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d17a:	50                   	push   eax
c001d17b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d181:	e8 ec e5 ff ff       	call   c001b772 <IDE::prepareInterrupt(unsigned char)>
c001d186:	83 c4 0c             	add    esp,0xc
c001d189:	6a 04                	push   0x4
c001d18b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d192:	50                   	push   eax
c001d193:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d199:	e8 ba e6 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001d19e:	83 c4 0c             	add    esp,0xc
c001d1a1:	89 c6                	mov    esi,eax
c001d1a3:	6a 05                	push   0x5
c001d1a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1ac:	50                   	push   eax
c001d1ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1b3:	e8 a0 e6 ff ff       	call   c001b858 <IDE::read(unsigned char, unsigned char)>
c001d1b8:	89 f1                	mov    ecx,esi
c001d1ba:	0f b6 c0             	movzx  eax,al
c001d1bd:	0f b6 f1             	movzx  esi,cl
c001d1c0:	c1 e0 08             	shl    eax,0x8
c001d1c3:	09 c6                	or     esi,eax
c001d1c5:	d1 fe                	sar    esi,1
c001d1c7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d1cb:	83 c4 10             	add    esp,0x10
c001d1ce:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d1d3:	74 41                	je     c001d216 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d1d5:	31 c9                	xor    ecx,ecx
c001d1d7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d1dd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d1e4:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d1e8:	75 0a                	jne    c001d1f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d1ea:	01 c9                	add    ecx,ecx
c001d1ec:	01 cd                	add    ebp,ecx
c001d1ee:	4b                   	dec    ebx
c001d1ef:	e9 54 ff ff ff       	jmp    c001d148 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d1f4:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d1f9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d1fd:	51                   	push   ecx
c001d1fe:	51                   	push   ecx
c001d1ff:	52                   	push   edx
c001d200:	50                   	push   eax
c001d201:	e8 80 e5 ff ff       	call   c001b786 <IDE::getBase(unsigned char)>
c001d206:	89 c2                	mov    edx,eax
c001d208:	89 f0                	mov    eax,esi
c001d20a:	66 ef                	out    dx,ax
c001d20c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d210:	83 c4 10             	add    esp,0x10
c001d213:	41                   	inc    ecx
c001d214:	eb c1                	jmp    c001d1d7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d216:	31 f6                	xor    esi,esi
c001d218:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d21e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d225:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d229:	75 06                	jne    c001d231 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d22b:	01 f6                	add    esi,esi
c001d22d:	01 f5                	add    ebp,esi
c001d22f:	eb bd                	jmp    c001d1ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d231:	51                   	push   ecx
c001d232:	51                   	push   ecx
c001d233:	52                   	push   edx
c001d234:	50                   	push   eax
c001d235:	e8 4c e5 ff ff       	call   c001b786 <IDE::getBase(unsigned char)>
c001d23a:	89 c2                	mov    edx,eax
c001d23c:	66 ed                	in     ax,dx
c001d23e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d243:	83 c4 10             	add    esp,0x10
c001d246:	46                   	inc    esi
c001d247:	eb cf                	jmp    c001d218 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d249:	51                   	push   ecx
c001d24a:	51                   	push   ecx
c001d24b:	52                   	push   edx
c001d24c:	50                   	push   eax
c001d24d:	e8 b4 e6 ff ff       	call   c001b906 <IDE::waitInterrupt(unsigned char)>
c001d252:	83 c4 10             	add    esp,0x10
c001d255:	84 c0                	test   al,al
c001d257:	0f 84 df fd ff ff    	je     c001d03c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d25d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d262:	52                   	push   edx
c001d263:	52                   	push   edx
c001d264:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d26b:	50                   	push   eax
c001d26c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d272:	e8 fb e4 ff ff       	call   c001b772 <IDE::prepareInterrupt(unsigned char)>
c001d277:	83 c4 10             	add    esp,0x10
c001d27a:	50                   	push   eax
c001d27b:	50                   	push   eax
c001d27c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d283:	50                   	push   eax
c001d284:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d28a:	e8 f7 e4 ff ff       	call   c001b786 <IDE::getBase(unsigned char)>
c001d28f:	8d 50 07             	lea    edx,[eax+0x7]
c001d292:	ec                   	in     al,dx
c001d293:	83 c4 10             	add    esp,0x10
c001d296:	a8 88                	test   al,0x88
c001d298:	74 0a                	je     c001d2a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d29a:	4b                   	dec    ebx
c001d29b:	75 dd                	jne    c001d27a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d29d:	bb 02 00 00 00       	mov    ebx,0x2
c001d2a2:	eb 02                	jmp    c001d2a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d2a4:	31 db                	xor    ebx,ebx
c001d2a6:	83 c4 1c             	add    esp,0x1c
c001d2a9:	89 d8                	mov    eax,ebx
c001d2ab:	5b                   	pop    ebx
c001d2ac:	5e                   	pop    esi
c001d2ad:	5f                   	pop    edi
c001d2ae:	5d                   	pop    ebp
c001d2af:	c3                   	ret    

c001d2b0 <ATAPI::diskRemoved()>:
c001d2b0:	53                   	push   ebx
c001d2b1:	83 ec 14             	sub    esp,0x14
c001d2b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d2b8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d2bf:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d2c5:	e8 a0 06 ff ff       	call   c000d96a <LogicalDisk::unmount()>
c001d2ca:	58                   	pop    eax
c001d2cb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d2d1:	e8 76 10 ff ff       	call   c000e34c <VCache::writeWriteBuffer()>
c001d2d6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d2dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2e0:	83 c4 18             	add    esp,0x18
c001d2e3:	5b                   	pop    ebx
c001d2e4:	e9 53 10 ff ff       	jmp    c000e33c <VCache::invalidateReadBuffer()>
c001d2e9:	90                   	nop

c001d2ea <ATAPI::eject()>:
c001d2ea:	57                   	push   edi
c001d2eb:	b9 03 00 00 00       	mov    ecx,0x3
c001d2f0:	53                   	push   ebx
c001d2f1:	83 ec 14             	sub    esp,0x14
c001d2f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d2f8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d2fc:	fc                   	cld    
c001d2fd:	31 c0                	xor    eax,eax
c001d2ff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d301:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d306:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d30b:	50                   	push   eax
c001d30c:	50                   	push   eax
c001d30d:	6a 00                	push   0x0
c001d30f:	6a 00                	push   0x0
c001d311:	6a 00                	push   0x0
c001d313:	6a 02                	push   0x2
c001d315:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d319:	50                   	push   eax
c001d31a:	53                   	push   ebx
c001d31b:	e8 c8 fc ff ff       	call   c001cfe8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d320:	83 c4 14             	add    esp,0x14
c001d323:	53                   	push   ebx
c001d324:	e8 87 ff ff ff       	call   c001d2b0 <ATAPI::diskRemoved()>
c001d329:	83 c4 24             	add    esp,0x24
c001d32c:	31 c0                	xor    eax,eax
c001d32e:	5b                   	pop    ebx
c001d32f:	5f                   	pop    edi
c001d330:	c3                   	ret    
c001d331:	90                   	nop

c001d332 <ATAPI::diskInserted()>:
c001d332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d336:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d33d:	c3                   	ret    

c001d33e <ATAPI::detectMedia()>:
c001d33e:	56                   	push   esi
c001d33f:	53                   	push   ebx
c001d340:	83 ec 28             	sub    esp,0x28
c001d343:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d347:	6a 0c                	push   0xc
c001d349:	6a 00                	push   0x0
c001d34b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d34f:	56                   	push   esi
c001d350:	e8 9b 31 fe ff       	call   c00004f0 <memset>
c001d355:	58                   	pop    eax
c001d356:	5a                   	pop    edx
c001d357:	6a 00                	push   0x0
c001d359:	6a 00                	push   0x0
c001d35b:	6a 00                	push   0x0
c001d35d:	6a 00                	push   0x0
c001d35f:	56                   	push   esi
c001d360:	53                   	push   ebx
c001d361:	e8 82 fc ff ff       	call   c001cfe8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d366:	83 c4 1c             	add    esp,0x1c
c001d369:	6a 0c                	push   0xc
c001d36b:	6a 00                	push   0x0
c001d36d:	56                   	push   esi
c001d36e:	e8 7d 31 fe ff       	call   c00004f0 <memset>
c001d373:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d378:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d37d:	59                   	pop    ecx
c001d37e:	58                   	pop    eax
c001d37f:	6a 01                	push   0x1
c001d381:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d385:	50                   	push   eax
c001d386:	6a 00                	push   0x0
c001d388:	6a 12                	push   0x12
c001d38a:	56                   	push   esi
c001d38b:	53                   	push   ebx
c001d38c:	e8 57 fc ff ff       	call   c001cfe8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d391:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d395:	83 c4 20             	add    esp,0x20
c001d398:	83 e0 7f             	and    eax,0x7f
c001d39b:	83 f8 70             	cmp    eax,0x70
c001d39e:	74 15                	je     c001d3b5 <ATAPI::detectMedia()+0x77>
c001d3a0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3a7:	75 0c                	jne    c001d3b5 <ATAPI::detectMedia()+0x77>
c001d3a9:	83 ec 0c             	sub    esp,0xc
c001d3ac:	53                   	push   ebx
c001d3ad:	e8 80 ff ff ff       	call   c001d332 <ATAPI::diskInserted()>
c001d3b2:	83 c4 10             	add    esp,0x10
c001d3b5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d3b9:	83 e0 0f             	and    eax,0xf
c001d3bc:	83 f8 02             	cmp    eax,0x2
c001d3bf:	75 1b                	jne    c001d3dc <ATAPI::detectMedia()+0x9e>
c001d3c1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d3c6:	75 2d                	jne    c001d3f5 <ATAPI::detectMedia()+0xb7>
c001d3c8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3cf:	74 24                	je     c001d3f5 <ATAPI::detectMedia()+0xb7>
c001d3d1:	83 ec 0c             	sub    esp,0xc
c001d3d4:	53                   	push   ebx
c001d3d5:	e8 d6 fe ff ff       	call   c001d2b0 <ATAPI::diskRemoved()>
c001d3da:	eb 16                	jmp    c001d3f2 <ATAPI::detectMedia()+0xb4>
c001d3dc:	85 c0                	test   eax,eax
c001d3de:	75 15                	jne    c001d3f5 <ATAPI::detectMedia()+0xb7>
c001d3e0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3e7:	75 0c                	jne    c001d3f5 <ATAPI::detectMedia()+0xb7>
c001d3e9:	83 ec 0c             	sub    esp,0xc
c001d3ec:	53                   	push   ebx
c001d3ed:	e8 40 ff ff ff       	call   c001d332 <ATAPI::diskInserted()>
c001d3f2:	83 c4 10             	add    esp,0x10
c001d3f5:	83 c4 24             	add    esp,0x24
c001d3f8:	5b                   	pop    ebx
c001d3f9:	5e                   	pop    esi
c001d3fa:	c3                   	ret    
c001d3fb:	90                   	nop

c001d3fc <ATAPI::open(int, int, void*)>:
c001d3fc:	56                   	push   esi
c001d3fd:	53                   	push   ebx
c001d3fe:	50                   	push   eax
c001d3ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d403:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d407:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d40b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d411:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d417:	c1 e0 06             	shl    eax,0x6
c001d41a:	01 d0                	add    eax,edx
c001d41c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d423:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d429:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d430:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d43a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d440:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d447:	6a 04                	push   0x4
c001d449:	6a 0c                	push   0xc
c001d44b:	51                   	push   ecx
c001d44c:	52                   	push   edx
c001d44d:	e8 46 e3 ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d452:	90                   	nop
c001d453:	90                   	nop
c001d454:	6a 00                	push   0x0
c001d456:	6a 0c                	push   0xc
c001d458:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d45f:	50                   	push   eax
c001d460:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d466:	e8 2d e3 ff ff       	call   c001b798 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d46b:	83 c4 14             	add    esp,0x14
c001d46e:	68 78 01 00 00       	push   0x178
c001d473:	e8 3e a6 fe ff       	call   c0007ab6 <malloc>
c001d478:	83 c4 0c             	add    esp,0xc
c001d47b:	89 c6                	mov    esi,eax
c001d47d:	6a 00                	push   0x0
c001d47f:	68 ff ff ff 7f       	push   0x7fffffff
c001d484:	6a 00                	push   0x0
c001d486:	6a 00                	push   0x0
c001d488:	53                   	push   ebx
c001d489:	68 cb 2d 02 c0       	push   0xc0022dcb
c001d48e:	50                   	push   eax
c001d48f:	e8 14 03 ff ff       	call   c000d7a8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d494:	83 c4 14             	add    esp,0x14
c001d497:	56                   	push   esi
c001d498:	e8 cb 03 ff ff       	call   c000d868 <LogicalDisk::assignDriveLetter()>
c001d49d:	5a                   	pop    edx
c001d49e:	0f be c0             	movsx  eax,al
c001d4a1:	59                   	pop    ecx
c001d4a2:	50                   	push   eax
c001d4a3:	68 1c 2c 02 c0       	push   0xc0022c1c
c001d4a8:	e8 98 d4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d4ad:	58                   	pop    eax
c001d4ae:	5a                   	pop    edx
c001d4af:	56                   	push   esi
c001d4b0:	53                   	push   ebx
c001d4b1:	e8 4c f1 fe ff       	call   c000c602 <Device::addChild(Device*)>
c001d4b6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d4bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4bf:	e8 72 f5 fe ff       	call   c000ca36 <PhysicalDisk::startCache()>
c001d4c4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d4cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4ce:	e8 6b fe ff ff       	call   c001d33e <ATAPI::detectMedia()>
c001d4d3:	83 c4 14             	add    esp,0x14
c001d4d6:	31 c0                	xor    eax,eax
c001d4d8:	5b                   	pop    ebx
c001d4d9:	5e                   	pop    esi
c001d4da:	c3                   	ret    
c001d4db:	90                   	nop

c001d4dc <ATAPI::read(unsigned long long, int, void*)>:
c001d4dc:	55                   	push   ebp
c001d4dd:	57                   	push   edi
c001d4de:	56                   	push   esi
c001d4df:	53                   	push   ebx
c001d4e0:	83 ec 1c             	sub    esp,0x1c
c001d4e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d4e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d4eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d4ef:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4f6:	74 3c                	je     c001d534 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d4f8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d4fc:	b9 03 00 00 00       	mov    ecx,0x3
c001d501:	fc                   	cld    
c001d502:	31 c0                	xor    eax,eax
c001d504:	0f ce                	bswap  esi
c001d506:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d508:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d50d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d511:	89 e8                	mov    eax,ebp
c001d513:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d517:	50                   	push   eax
c001d518:	50                   	push   eax
c001d519:	55                   	push   ebp
c001d51a:	c1 e5 0b             	shl    ebp,0xb
c001d51d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d521:	6a 00                	push   0x0
c001d523:	55                   	push   ebp
c001d524:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d528:	50                   	push   eax
c001d529:	53                   	push   ebx
c001d52a:	e8 b9 fa ff ff       	call   c001cfe8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d52f:	83 c4 20             	add    esp,0x20
c001d532:	eb 1a                	jmp    c001d54e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d534:	83 ec 0c             	sub    esp,0xc
c001d537:	53                   	push   ebx
c001d538:	e8 01 fe ff ff       	call   c001d33e <ATAPI::detectMedia()>
c001d53d:	83 c4 10             	add    esp,0x10
c001d540:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d547:	75 af                	jne    c001d4f8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d549:	b8 02 00 00 00       	mov    eax,0x2
c001d54e:	83 c4 1c             	add    esp,0x1c
c001d551:	5b                   	pop    ebx
c001d552:	5e                   	pop    esi
c001d553:	5f                   	pop    edi
c001d554:	5d                   	pop    ebp
c001d555:	c3                   	ret    

c001d556 <SATA::close(int, int, void*)>:
c001d556:	83 ec 0c             	sub    esp,0xc
c001d559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d55d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d563:	85 c0                	test   eax,eax
c001d565:	74 0c                	je     c001d573 <SATA::close(int, int, void*)+0x1d>
c001d567:	83 ec 0c             	sub    esp,0xc
c001d56a:	8b 10                	mov    edx,DWORD PTR [eax]
c001d56c:	50                   	push   eax
c001d56d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d570:	83 c4 10             	add    esp,0x10
c001d573:	31 c0                	xor    eax,eax
c001d575:	83 c4 0c             	add    esp,0xc
c001d578:	c3                   	ret    
c001d579:	90                   	nop

c001d57a <SATA::powerSaving(PowerSavingLevel)>:
c001d57a:	c3                   	ret    
c001d57b:	90                   	nop

c001d57c <SATA::open(int, int, void*)>:
c001d57c:	56                   	push   esi
c001d57d:	53                   	push   ebx
c001d57e:	50                   	push   eax
c001d57f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d583:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d587:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d591:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d597:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d5a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5a5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d5af:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d5b5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d5bc:	e8 fe a7 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d5c1:	89 c6                	mov    esi,eax
c001d5c3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d5c9:	81 c6 00 10 00 00    	add    esi,0x1000
c001d5cf:	e8 eb a7 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d5d4:	39 c6                	cmp    esi,eax
c001d5d6:	74 10                	je     c001d5e8 <SATA::open(int, int, void*)+0x6c>
c001d5d8:	83 ec 0c             	sub    esp,0xc
c001d5db:	68 64 2c 02 c0       	push   0xc0022c64
c001d5e0:	e8 28 3c ff ff       	call   c001120d <KePanic(char const*)>
c001d5e5:	83 c4 10             	add    esp,0x10
c001d5e8:	83 ec 0c             	sub    esp,0xc
c001d5eb:	6a 02                	push   0x2
c001d5ed:	e8 1b c0 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d5f2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d5f8:	6a 03                	push   0x3
c001d5fa:	50                   	push   eax
c001d5fb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d601:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d607:	e8 14 c7 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d60c:	83 c4 14             	add    esp,0x14
c001d60f:	53                   	push   ebx
c001d610:	e8 21 f4 fe ff       	call   c000ca36 <PhysicalDisk::startCache()>
c001d615:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d618:	e8 5d 06 ff ff       	call   c000dc7a <createPartitionsForDisk(PhysicalDisk*)>
c001d61d:	83 c4 14             	add    esp,0x14
c001d620:	31 c0                	xor    eax,eax
c001d622:	5b                   	pop    ebx
c001d623:	5e                   	pop    esi
c001d624:	c3                   	ret    
c001d625:	90                   	nop

c001d626 <SATA::SATA()>:
c001d626:	83 ec 0c             	sub    esp,0xc
c001d629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62d:	83 ec 04             	sub    esp,0x4
c001d630:	68 00 02 00 00       	push   0x200
c001d635:	68 78 2c 02 c0       	push   0xc0022c78
c001d63a:	50                   	push   eax
c001d63b:	e8 8e f3 fe ff       	call   c000c9ce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d640:	83 c4 10             	add    esp,0x10
c001d643:	ba e8 2c 02 c0       	mov    edx,0xc0022ce8
c001d648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d64c:	89 10                	mov    DWORD PTR [eax],edx
c001d64e:	90                   	nop
c001d64f:	83 c4 0c             	add    esp,0xc
c001d652:	c3                   	ret    
c001d653:	90                   	nop

c001d654 <SATA::access(unsigned long long, int, void*, bool)>:
c001d654:	55                   	push   ebp
c001d655:	57                   	push   edi
c001d656:	56                   	push   esi
c001d657:	53                   	push   ebx
c001d658:	83 ec 2c             	sub    esp,0x2c
c001d65b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d65f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d663:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d667:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d66b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d66f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d674:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d678:	7e 10                	jle    c001d68a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d67a:	83 ec 0c             	sub    esp,0xc
c001d67d:	68 88 2c 02 c0       	push   0xc0022c88
c001d682:	e8 86 3b ff ff       	call   c001120d <KePanic(char const*)>
c001d687:	83 c4 10             	add    esp,0x10
c001d68a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d690:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d696:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d69c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6a0:	89 d0                	mov    eax,edx
c001d6a2:	c1 e0 07             	shl    eax,0x7
c001d6a5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d6a9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d6b3:	51                   	push   ecx
c001d6b4:	8d 42 02             	lea    eax,[edx+0x2]
c001d6b7:	51                   	push   ecx
c001d6b8:	c1 e0 07             	shl    eax,0x7
c001d6bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d6bf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d6c3:	50                   	push   eax
c001d6c4:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d6ca:	e8 91 ec ff ff       	call   c001c360 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d6cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6d3:	83 c4 10             	add    esp,0x10
c001d6d6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d6db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d6df:	0f 84 57 01 00 00    	je     c001d83c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d6e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d6e9:	c1 e0 09             	shl    eax,0x9
c001d6ec:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d6f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d6f5:	74 0e                	je     c001d705 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d6f7:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d6fd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d701:	89 c1                	mov    ecx,eax
c001d703:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d705:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d70b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d70f:	8d 42 02             	lea    eax,[edx+0x2]
c001d712:	c1 e0 07             	shl    eax,0x7
c001d715:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d719:	8b 00                	mov    eax,DWORD PTR [eax]
c001d71b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d721:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d727:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d72b:	c1 e1 05             	shl    ecx,0x5
c001d72e:	01 c8                	add    eax,ecx
c001d730:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d734:	83 e1 01             	and    ecx,0x1
c001d737:	89 ce                	mov    esi,ecx
c001d739:	8a 08                	mov    cl,BYTE PTR [eax]
c001d73b:	c1 e6 06             	shl    esi,0x6
c001d73e:	83 e1 bf             	and    ecx,0xffffffbf
c001d741:	09 f1                	or     ecx,esi
c001d743:	88 08                	mov    BYTE PTR [eax],cl
c001d745:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d747:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d74d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d753:	89 08                	mov    DWORD PTR [eax],ecx
c001d755:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d75b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d761:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d767:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d76a:	50                   	push   eax
c001d76b:	68 90 00 00 00       	push   0x90
c001d770:	6a 00                	push   0x0
c001d772:	56                   	push   esi
c001d773:	e8 78 2d fe ff       	call   c00004f0 <memset>
c001d778:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d77e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d784:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d788:	83 c4 10             	add    esp,0x10
c001d78b:	48                   	dec    eax
c001d78c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d791:	89 c1                	mov    ecx,eax
c001d793:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d799:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d79e:	09 c8                	or     eax,ecx
c001d7a0:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d7a6:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d7ac:	83 c8 80             	or     eax,0xffffff80
c001d7af:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d7b5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d7b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7bc:	25 00 7f 00 00       	and    eax,0x7f00
c001d7c1:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d7c6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d7cb:	66 89 06             	mov    WORD PTR [esi],ax
c001d7ce:	b0 35                	mov    al,0x35
c001d7d0:	75 02                	jne    c001d7d4 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d7d2:	b0 25                	mov    al,0x25
c001d7d4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d7d7:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d7db:	89 e8                	mov    eax,ebp
c001d7dd:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d7e1:	c1 e8 10             	shr    eax,0x10
c001d7e4:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d7e7:	89 e8                	mov    eax,ebp
c001d7e9:	c1 e8 18             	shr    eax,0x18
c001d7ec:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d7ef:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d7f3:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d7f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7fa:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d7fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d801:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d805:	89 d6                	mov    esi,edx
c001d807:	31 c0                	xor    eax,eax
c001d809:	c1 e6 07             	shl    esi,0x7
c001d80c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d810:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d816:	80 e1 88             	and    cl,0x88
c001d819:	74 0a                	je     c001d825 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d81b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d820:	74 0a                	je     c001d82c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d822:	40                   	inc    eax
c001d823:	eb eb                	jmp    c001d810 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d825:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d82a:	75 17                	jne    c001d843 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d82c:	83 ec 0c             	sub    esp,0xc
c001d82f:	68 c1 2c 02 c0       	push   0xc0022cc1
c001d834:	e8 0c d1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d839:	83 c4 10             	add    esp,0x10
c001d83c:	b8 01 00 00 00       	mov    eax,0x1
c001d841:	eb 5d                	jmp    c001d8a0 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d843:	b8 01 00 00 00       	mov    eax,0x1
c001d848:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d84c:	c1 e2 07             	shl    edx,0x7
c001d84f:	d3 e0                	shl    eax,cl
c001d851:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d855:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d85b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d861:	85 c8                	test   eax,ecx
c001d863:	74 16                	je     c001d87b <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d865:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d86b:	0f ba e1 1e          	bt     ecx,0x1e
c001d86f:	73 ea                	jae    c001d85b <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d871:	83 ec 0c             	sub    esp,0xc
c001d874:	68 cf 2c 02 c0       	push   0xc0022ccf
c001d879:	eb b9                	jmp    c001d834 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d87b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d881:	0f ba e0 1e          	bt     eax,0x1e
c001d885:	72 b5                	jb     c001d83c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d887:	31 c0                	xor    eax,eax
c001d889:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d88e:	75 10                	jne    c001d8a0 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d890:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d896:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d89a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d89e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d8a0:	83 c4 2c             	add    esp,0x2c
c001d8a3:	5b                   	pop    ebx
c001d8a4:	5e                   	pop    esi
c001d8a5:	5f                   	pop    edi
c001d8a6:	5d                   	pop    ebp
c001d8a7:	c3                   	ret    

c001d8a8 <SATA::read(unsigned long long, int, void*)>:
c001d8a8:	55                   	push   ebp
c001d8a9:	57                   	push   edi
c001d8aa:	56                   	push   esi
c001d8ab:	be 04 00 00 00       	mov    esi,0x4
c001d8b0:	53                   	push   ebx
c001d8b1:	83 ec 0c             	sub    esp,0xc
c001d8b4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d8b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d8bc:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d8bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8c3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d8c7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d8cd:	0f 87 1a 02 00 00    	ja     c001daed <SATA::read(unsigned long long, int, void*)+0x245>
c001d8d3:	be 06 00 00 00       	mov    esi,0x6
c001d8d8:	85 c9                	test   ecx,ecx
c001d8da:	0f 84 0d 02 00 00    	je     c001daed <SATA::read(unsigned long long, int, void*)+0x245>
c001d8e0:	56                   	push   esi
c001d8e1:	56                   	push   esi
c001d8e2:	6a 00                	push   0x0
c001d8e4:	51                   	push   ecx
c001d8e5:	53                   	push   ebx
c001d8e6:	52                   	push   edx
c001d8e7:	50                   	push   eax
c001d8e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8ec:	e8 63 fd ff ff       	call   c001d654 <SATA::access(unsigned long long, int, void*, bool)>
c001d8f1:	83 c4 20             	add    esp,0x20
c001d8f4:	89 c6                	mov    esi,eax
c001d8f6:	85 c0                	test   eax,eax
c001d8f8:	0f 85 ea 01 00 00    	jne    c001dae8 <SATA::read(unsigned long long, int, void*)+0x240>
c001d8fe:	01 1d 54 ae 02 c0    	add    DWORD PTR ds:0xc002ae54,ebx
c001d904:	bb 0a 00 00 00       	mov    ebx,0xa
c001d909:	50                   	push   eax
c001d90a:	50                   	push   eax
c001d90b:	6a 0f                	push   0xf
c001d90d:	6a 00                	push   0x0
c001d90f:	e8 75 f2 ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001d914:	5a                   	pop    edx
c001d915:	0f b6 c0             	movzx  eax,al
c001d918:	59                   	pop    ecx
c001d919:	b9 10 27 00 00       	mov    ecx,0x2710
c001d91e:	50                   	push   eax
c001d91f:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d924:	99                   	cdq    
c001d925:	f7 f9                	idiv   ecx
c001d927:	99                   	cdq    
c001d928:	f7 fb                	idiv   ebx
c001d92a:	8d 42 30             	lea    eax,[edx+0x30]
c001d92d:	0f b6 c0             	movzx  eax,al
c001d930:	50                   	push   eax
c001d931:	e8 42 f2 ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001d936:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d93c:	5f                   	pop    edi
c001d93d:	5d                   	pop    ebp
c001d93e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d943:	6a 0f                	push   0xf
c001d945:	6a 00                	push   0x0
c001d947:	e8 3d f2 ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001d94c:	5a                   	pop    edx
c001d94d:	0f b6 c0             	movzx  eax,al
c001d950:	59                   	pop    ecx
c001d951:	50                   	push   eax
c001d952:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d957:	99                   	cdq    
c001d958:	f7 fd                	idiv   ebp
c001d95a:	99                   	cdq    
c001d95b:	f7 fb                	idiv   ebx
c001d95d:	8d 42 30             	lea    eax,[edx+0x30]
c001d960:	0f b6 c0             	movzx  eax,al
c001d963:	50                   	push   eax
c001d964:	e8 0f f2 ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001d969:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d96f:	5f                   	pop    edi
c001d970:	bf 64 00 00 00       	mov    edi,0x64
c001d975:	58                   	pop    eax
c001d976:	6a 0f                	push   0xf
c001d978:	6a 00                	push   0x0
c001d97a:	e8 0a f2 ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001d97f:	5a                   	pop    edx
c001d980:	0f b6 c0             	movzx  eax,al
c001d983:	59                   	pop    ecx
c001d984:	50                   	push   eax
c001d985:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d98a:	99                   	cdq    
c001d98b:	f7 ff                	idiv   edi
c001d98d:	99                   	cdq    
c001d98e:	f7 fb                	idiv   ebx
c001d990:	8d 42 30             	lea    eax,[edx+0x30]
c001d993:	0f b6 c0             	movzx  eax,al
c001d996:	50                   	push   eax
c001d997:	e8 dc f1 ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001d99c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d9a2:	58                   	pop    eax
c001d9a3:	5a                   	pop    edx
c001d9a4:	6a 0f                	push   0xf
c001d9a6:	6a 00                	push   0x0
c001d9a8:	e8 dc f1 ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001d9ad:	59                   	pop    ecx
c001d9ae:	0f b6 c0             	movzx  eax,al
c001d9b1:	5a                   	pop    edx
c001d9b2:	50                   	push   eax
c001d9b3:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d9b8:	99                   	cdq    
c001d9b9:	f7 fb                	idiv   ebx
c001d9bb:	99                   	cdq    
c001d9bc:	f7 fb                	idiv   ebx
c001d9be:	8d 42 30             	lea    eax,[edx+0x30]
c001d9c1:	0f b6 c0             	movzx  eax,al
c001d9c4:	50                   	push   eax
c001d9c5:	e8 ae f1 ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001d9ca:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d9d0:	59                   	pop    ecx
c001d9d1:	58                   	pop    eax
c001d9d2:	6a 0f                	push   0xf
c001d9d4:	6a 00                	push   0x0
c001d9d6:	e8 ae f1 ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001d9db:	5a                   	pop    edx
c001d9dc:	0f b6 c0             	movzx  eax,al
c001d9df:	59                   	pop    ecx
c001d9e0:	50                   	push   eax
c001d9e1:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d9e6:	99                   	cdq    
c001d9e7:	f7 fb                	idiv   ebx
c001d9e9:	8d 42 30             	lea    eax,[edx+0x30]
c001d9ec:	0f b6 c0             	movzx  eax,al
c001d9ef:	50                   	push   eax
c001d9f0:	e8 83 f1 ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001d9f5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d9fb:	58                   	pop    eax
c001d9fc:	5a                   	pop    edx
c001d9fd:	6a 0f                	push   0xf
c001d9ff:	6a 00                	push   0x0
c001da01:	e8 83 f1 ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001da06:	59                   	pop    ecx
c001da07:	0f b6 c0             	movzx  eax,al
c001da0a:	5a                   	pop    edx
c001da0b:	b9 10 27 00 00       	mov    ecx,0x2710
c001da10:	50                   	push   eax
c001da11:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da16:	99                   	cdq    
c001da17:	f7 f9                	idiv   ecx
c001da19:	99                   	cdq    
c001da1a:	f7 fb                	idiv   ebx
c001da1c:	8d 42 30             	lea    eax,[edx+0x30]
c001da1f:	0f b6 c0             	movzx  eax,al
c001da22:	50                   	push   eax
c001da23:	e8 50 f1 ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001da28:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001da2e:	59                   	pop    ecx
c001da2f:	58                   	pop    eax
c001da30:	6a 0f                	push   0xf
c001da32:	6a 00                	push   0x0
c001da34:	e8 50 f1 ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001da39:	5a                   	pop    edx
c001da3a:	0f b6 c0             	movzx  eax,al
c001da3d:	59                   	pop    ecx
c001da3e:	50                   	push   eax
c001da3f:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da44:	99                   	cdq    
c001da45:	f7 fd                	idiv   ebp
c001da47:	99                   	cdq    
c001da48:	f7 fb                	idiv   ebx
c001da4a:	8d 42 30             	lea    eax,[edx+0x30]
c001da4d:	0f b6 c0             	movzx  eax,al
c001da50:	50                   	push   eax
c001da51:	e8 22 f1 ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001da56:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001da5c:	5d                   	pop    ebp
c001da5d:	58                   	pop    eax
c001da5e:	6a 0f                	push   0xf
c001da60:	6a 00                	push   0x0
c001da62:	e8 22 f1 ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001da67:	5a                   	pop    edx
c001da68:	0f b6 c0             	movzx  eax,al
c001da6b:	59                   	pop    ecx
c001da6c:	50                   	push   eax
c001da6d:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da72:	99                   	cdq    
c001da73:	f7 ff                	idiv   edi
c001da75:	99                   	cdq    
c001da76:	f7 fb                	idiv   ebx
c001da78:	8d 42 30             	lea    eax,[edx+0x30]
c001da7b:	0f b6 c0             	movzx  eax,al
c001da7e:	50                   	push   eax
c001da7f:	e8 f4 f0 ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001da84:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001da8a:	5f                   	pop    edi
c001da8b:	5d                   	pop    ebp
c001da8c:	6a 0f                	push   0xf
c001da8e:	6a 00                	push   0x0
c001da90:	e8 f4 f0 ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001da95:	5a                   	pop    edx
c001da96:	0f b6 c0             	movzx  eax,al
c001da99:	59                   	pop    ecx
c001da9a:	50                   	push   eax
c001da9b:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001daa0:	99                   	cdq    
c001daa1:	f7 fb                	idiv   ebx
c001daa3:	99                   	cdq    
c001daa4:	f7 fb                	idiv   ebx
c001daa6:	8d 42 30             	lea    eax,[edx+0x30]
c001daa9:	0f b6 c0             	movzx  eax,al
c001daac:	50                   	push   eax
c001daad:	e8 c6 f0 ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001dab2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dab8:	5f                   	pop    edi
c001dab9:	5d                   	pop    ebp
c001daba:	6a 0f                	push   0xf
c001dabc:	6a 00                	push   0x0
c001dabe:	e8 c6 f0 ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001dac3:	5a                   	pop    edx
c001dac4:	0f b6 c0             	movzx  eax,al
c001dac7:	59                   	pop    ecx
c001dac8:	50                   	push   eax
c001dac9:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dace:	99                   	cdq    
c001dacf:	f7 fb                	idiv   ebx
c001dad1:	83 c2 30             	add    edx,0x30
c001dad4:	0f b6 d2             	movzx  edx,dl
c001dad7:	52                   	push   edx
c001dad8:	e8 9b f0 ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001dadd:	83 c4 10             	add    esp,0x10
c001dae0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dae6:	eb 05                	jmp    c001daed <SATA::read(unsigned long long, int, void*)+0x245>
c001dae8:	be 01 00 00 00       	mov    esi,0x1
c001daed:	83 c4 0c             	add    esp,0xc
c001daf0:	89 f0                	mov    eax,esi
c001daf2:	5b                   	pop    ebx
c001daf3:	5e                   	pop    esi
c001daf4:	5f                   	pop    edi
c001daf5:	5d                   	pop    ebp
c001daf6:	c3                   	ret    
c001daf7:	90                   	nop

c001daf8 <SATA::write(unsigned long long, int, void*)>:
c001daf8:	55                   	push   ebp
c001daf9:	b8 04 00 00 00       	mov    eax,0x4
c001dafe:	57                   	push   edi
c001daff:	56                   	push   esi
c001db00:	53                   	push   ebx
c001db01:	83 ec 1c             	sub    esp,0x1c
c001db04:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db08:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001db0c:	8d 75 ff             	lea    esi,[ebp-0x1]
c001db0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001db13:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001db17:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001db1d:	0f 87 32 02 00 00    	ja     c001dd55 <SATA::write(unsigned long long, int, void*)+0x25d>
c001db23:	b8 06 00 00 00       	mov    eax,0x6
c001db28:	85 ff                	test   edi,edi
c001db2a:	0f 84 25 02 00 00    	je     c001dd55 <SATA::write(unsigned long long, int, void*)+0x25d>
c001db30:	89 ee                	mov    esi,ebp
c001db32:	c1 e6 09             	shl    esi,0x9
c001db35:	01 fe                	add    esi,edi
c001db37:	89 c8                	mov    eax,ecx
c001db39:	89 da                	mov    edx,ebx
c001db3b:	83 c0 01             	add    eax,0x1
c001db3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001db42:	83 d2 00             	adc    edx,0x0
c001db45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001db49:	50                   	push   eax
c001db4a:	50                   	push   eax
c001db4b:	6a 01                	push   0x1
c001db4d:	57                   	push   edi
c001db4e:	81 c7 00 02 00 00    	add    edi,0x200
c001db54:	6a 01                	push   0x1
c001db56:	53                   	push   ebx
c001db57:	51                   	push   ecx
c001db58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001db5c:	e8 f3 fa ff ff       	call   c001d654 <SATA::access(unsigned long long, int, void*, bool)>
c001db61:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001db65:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001db69:	83 c4 20             	add    esp,0x20
c001db6c:	39 f7                	cmp    edi,esi
c001db6e:	75 c7                	jne    c001db37 <SATA::write(unsigned long long, int, void*)+0x3f>
c001db70:	bb 0a 00 00 00       	mov    ebx,0xa
c001db75:	01 2d 50 ae 02 c0    	add    DWORD PTR ds:0xc002ae50,ebp
c001db7b:	bd 10 27 00 00       	mov    ebp,0x2710
c001db80:	50                   	push   eax
c001db81:	50                   	push   eax
c001db82:	6a 0f                	push   0xf
c001db84:	6a 00                	push   0x0
c001db86:	e8 fe ef ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001db8b:	5a                   	pop    edx
c001db8c:	0f b6 c0             	movzx  eax,al
c001db8f:	59                   	pop    ecx
c001db90:	50                   	push   eax
c001db91:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001db96:	99                   	cdq    
c001db97:	f7 fd                	idiv   ebp
c001db99:	99                   	cdq    
c001db9a:	f7 fb                	idiv   ebx
c001db9c:	8d 42 30             	lea    eax,[edx+0x30]
c001db9f:	0f b6 c0             	movzx  eax,al
c001dba2:	50                   	push   eax
c001dba3:	e8 d0 ef ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001dba8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dbae:	5e                   	pop    esi
c001dbaf:	5f                   	pop    edi
c001dbb0:	bf e8 03 00 00       	mov    edi,0x3e8
c001dbb5:	6a 0f                	push   0xf
c001dbb7:	6a 00                	push   0x0
c001dbb9:	e8 cb ef ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001dbbe:	5a                   	pop    edx
c001dbbf:	0f b6 c0             	movzx  eax,al
c001dbc2:	59                   	pop    ecx
c001dbc3:	50                   	push   eax
c001dbc4:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dbc9:	99                   	cdq    
c001dbca:	f7 ff                	idiv   edi
c001dbcc:	99                   	cdq    
c001dbcd:	f7 fb                	idiv   ebx
c001dbcf:	8d 42 30             	lea    eax,[edx+0x30]
c001dbd2:	0f b6 c0             	movzx  eax,al
c001dbd5:	50                   	push   eax
c001dbd6:	e8 9d ef ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001dbdb:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dbe1:	5e                   	pop    esi
c001dbe2:	be 64 00 00 00       	mov    esi,0x64
c001dbe7:	58                   	pop    eax
c001dbe8:	6a 0f                	push   0xf
c001dbea:	6a 00                	push   0x0
c001dbec:	e8 98 ef ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001dbf1:	5a                   	pop    edx
c001dbf2:	0f b6 c0             	movzx  eax,al
c001dbf5:	59                   	pop    ecx
c001dbf6:	50                   	push   eax
c001dbf7:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dbfc:	99                   	cdq    
c001dbfd:	f7 fe                	idiv   esi
c001dbff:	99                   	cdq    
c001dc00:	f7 fb                	idiv   ebx
c001dc02:	8d 42 30             	lea    eax,[edx+0x30]
c001dc05:	0f b6 c0             	movzx  eax,al
c001dc08:	50                   	push   eax
c001dc09:	e8 6a ef ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001dc0e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dc14:	58                   	pop    eax
c001dc15:	5a                   	pop    edx
c001dc16:	6a 0f                	push   0xf
c001dc18:	6a 00                	push   0x0
c001dc1a:	e8 6a ef ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001dc1f:	59                   	pop    ecx
c001dc20:	0f b6 c0             	movzx  eax,al
c001dc23:	5a                   	pop    edx
c001dc24:	50                   	push   eax
c001dc25:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dc2a:	99                   	cdq    
c001dc2b:	f7 fb                	idiv   ebx
c001dc2d:	99                   	cdq    
c001dc2e:	f7 fb                	idiv   ebx
c001dc30:	8d 42 30             	lea    eax,[edx+0x30]
c001dc33:	0f b6 c0             	movzx  eax,al
c001dc36:	50                   	push   eax
c001dc37:	e8 3c ef ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001dc3c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc42:	59                   	pop    ecx
c001dc43:	58                   	pop    eax
c001dc44:	6a 0f                	push   0xf
c001dc46:	6a 00                	push   0x0
c001dc48:	e8 3c ef ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001dc4d:	5a                   	pop    edx
c001dc4e:	0f b6 c0             	movzx  eax,al
c001dc51:	59                   	pop    ecx
c001dc52:	50                   	push   eax
c001dc53:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dc58:	99                   	cdq    
c001dc59:	f7 fb                	idiv   ebx
c001dc5b:	83 c2 30             	add    edx,0x30
c001dc5e:	0f b6 d2             	movzx  edx,dl
c001dc61:	52                   	push   edx
c001dc62:	e8 11 ef ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001dc67:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dc6d:	58                   	pop    eax
c001dc6e:	5a                   	pop    edx
c001dc6f:	6a 0f                	push   0xf
c001dc71:	6a 00                	push   0x0
c001dc73:	e8 11 ef ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001dc78:	59                   	pop    ecx
c001dc79:	0f b6 c0             	movzx  eax,al
c001dc7c:	5a                   	pop    edx
c001dc7d:	50                   	push   eax
c001dc7e:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dc83:	99                   	cdq    
c001dc84:	f7 fd                	idiv   ebp
c001dc86:	99                   	cdq    
c001dc87:	f7 fb                	idiv   ebx
c001dc89:	8d 42 30             	lea    eax,[edx+0x30]
c001dc8c:	0f b6 c0             	movzx  eax,al
c001dc8f:	50                   	push   eax
c001dc90:	e8 e3 ee ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001dc95:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dc9b:	59                   	pop    ecx
c001dc9c:	5d                   	pop    ebp
c001dc9d:	6a 0f                	push   0xf
c001dc9f:	6a 00                	push   0x0
c001dca1:	e8 e3 ee ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001dca6:	5a                   	pop    edx
c001dca7:	0f b6 c0             	movzx  eax,al
c001dcaa:	59                   	pop    ecx
c001dcab:	50                   	push   eax
c001dcac:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dcb1:	99                   	cdq    
c001dcb2:	f7 ff                	idiv   edi
c001dcb4:	99                   	cdq    
c001dcb5:	f7 fb                	idiv   ebx
c001dcb7:	8d 42 30             	lea    eax,[edx+0x30]
c001dcba:	0f b6 c0             	movzx  eax,al
c001dcbd:	50                   	push   eax
c001dcbe:	e8 b5 ee ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001dcc3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dcc9:	5f                   	pop    edi
c001dcca:	5d                   	pop    ebp
c001dccb:	6a 0f                	push   0xf
c001dccd:	6a 00                	push   0x0
c001dccf:	e8 b5 ee ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001dcd4:	5a                   	pop    edx
c001dcd5:	0f b6 c0             	movzx  eax,al
c001dcd8:	59                   	pop    ecx
c001dcd9:	50                   	push   eax
c001dcda:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dcdf:	99                   	cdq    
c001dce0:	f7 fe                	idiv   esi
c001dce2:	99                   	cdq    
c001dce3:	f7 fb                	idiv   ebx
c001dce5:	8d 42 30             	lea    eax,[edx+0x30]
c001dce8:	0f b6 c0             	movzx  eax,al
c001dceb:	50                   	push   eax
c001dcec:	e8 87 ee ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001dcf1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dcf7:	5e                   	pop    esi
c001dcf8:	5f                   	pop    edi
c001dcf9:	6a 0f                	push   0xf
c001dcfb:	6a 00                	push   0x0
c001dcfd:	e8 87 ee ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001dd02:	5d                   	pop    ebp
c001dd03:	0f b6 c0             	movzx  eax,al
c001dd06:	5a                   	pop    edx
c001dd07:	50                   	push   eax
c001dd08:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dd0d:	99                   	cdq    
c001dd0e:	f7 fb                	idiv   ebx
c001dd10:	99                   	cdq    
c001dd11:	f7 fb                	idiv   ebx
c001dd13:	8d 42 30             	lea    eax,[edx+0x30]
c001dd16:	0f b6 c0             	movzx  eax,al
c001dd19:	50                   	push   eax
c001dd1a:	e8 59 ee ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001dd1f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dd25:	59                   	pop    ecx
c001dd26:	5e                   	pop    esi
c001dd27:	6a 0f                	push   0xf
c001dd29:	6a 00                	push   0x0
c001dd2b:	e8 59 ee ff ff       	call   c001cb89 <combineColours(unsigned char, unsigned char)>
c001dd30:	5f                   	pop    edi
c001dd31:	0f b6 c0             	movzx  eax,al
c001dd34:	5d                   	pop    ebp
c001dd35:	50                   	push   eax
c001dd36:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dd3b:	99                   	cdq    
c001dd3c:	f7 fb                	idiv   ebx
c001dd3e:	83 c2 30             	add    edx,0x30
c001dd41:	0f b6 d2             	movzx  edx,dl
c001dd44:	52                   	push   edx
c001dd45:	e8 2e ee ff ff       	call   c001cb78 <combineCharAndColour(char, unsigned char)>
c001dd4a:	83 c4 10             	add    esp,0x10
c001dd4d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dd53:	31 c0                	xor    eax,eax
c001dd55:	83 c4 1c             	add    esp,0x1c
c001dd58:	5b                   	pop    ebx
c001dd59:	5e                   	pop    esi
c001dd5a:	5f                   	pop    edi
c001dd5b:	5d                   	pop    ebp
c001dd5c:	c3                   	ret    
c001dd5d:	90                   	nop

c001dd5e <SATAPI::write(unsigned long long, int, void*)>:
c001dd5e:	b8 03 00 00 00       	mov    eax,0x3
c001dd63:	c3                   	ret    

c001dd64 <SATAPI::close(int, int, void*)>:
c001dd64:	83 ec 0c             	sub    esp,0xc
c001dd67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd6b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dd71:	85 c0                	test   eax,eax
c001dd73:	74 0c                	je     c001dd81 <SATAPI::close(int, int, void*)+0x1d>
c001dd75:	83 ec 0c             	sub    esp,0xc
c001dd78:	8b 10                	mov    edx,DWORD PTR [eax]
c001dd7a:	50                   	push   eax
c001dd7b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dd7e:	83 c4 10             	add    esp,0x10
c001dd81:	31 c0                	xor    eax,eax
c001dd83:	83 c4 0c             	add    esp,0xc
c001dd86:	c3                   	ret    
c001dd87:	90                   	nop

c001dd88 <SATAPI::SATAPI()>:
c001dd88:	83 ec 0c             	sub    esp,0xc
c001dd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd8f:	83 ec 04             	sub    esp,0x4
c001dd92:	68 00 08 00 00       	push   0x800
c001dd97:	68 18 2d 02 c0       	push   0xc0022d18
c001dd9c:	50                   	push   eax
c001dd9d:	e8 2c ec fe ff       	call   c000c9ce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dda2:	83 c4 10             	add    esp,0x10
c001dda5:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c001ddaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddae:	89 10                	mov    DWORD PTR [eax],edx
c001ddb0:	90                   	nop
c001ddb1:	83 c4 0c             	add    esp,0xc
c001ddb4:	c3                   	ret    
c001ddb5:	90                   	nop

c001ddb6 <SATAPI::diskRemoved()>:
c001ddb6:	c3                   	ret    
c001ddb7:	90                   	nop

c001ddb8 <SATAPI::diskInserted()>:
c001ddb8:	83 ec 18             	sub    esp,0x18
c001ddbb:	68 24 2d 02 c0       	push   0xc0022d24
c001ddc0:	e8 80 cb fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001ddc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddc9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ddd0:	83 c4 1c             	add    esp,0x1c
c001ddd3:	c3                   	ret    

c001ddd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ddd4:	55                   	push   ebp
c001ddd5:	57                   	push   edi
c001ddd6:	56                   	push   esi
c001ddd7:	53                   	push   ebx
c001ddd8:	83 ec 34             	sub    esp,0x34
c001dddb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001dddf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dde3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001dde7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001ddef:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ddf5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ddff:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001de05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001de09:	83 c0 02             	add    eax,0x2
c001de0c:	c1 e0 07             	shl    eax,0x7
c001de0f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de1b:	c1 e0 07             	shl    eax,0x7
c001de1e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001de26:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001de30:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001de34:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001de3a:	e8 21 e5 ff ff       	call   c001c360 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001de3f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de43:	83 c4 10             	add    esp,0x10
c001de46:	b8 01 00 00 00       	mov    eax,0x1
c001de4b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001de50:	0f 84 53 02 00 00    	je     c001e0a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001de56:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de60:	8b 00                	mov    eax,DWORD PTR [eax]
c001de62:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001de68:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de6e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de72:	c1 e1 05             	shl    ecx,0x5
c001de75:	01 c8                	add    eax,ecx
c001de77:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de79:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001de7f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001de85:	89 08                	mov    DWORD PTR [eax],ecx
c001de87:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de8d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001de93:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001de99:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001de9c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001de9f:	50                   	push   eax
c001dea0:	68 90 00 00 00       	push   0x90
c001dea5:	6a 00                	push   0x0
c001dea7:	53                   	push   ebx
c001dea8:	e8 43 26 fe ff       	call   c00004f0 <memset>
c001dead:	b9 0c 00 00 00       	mov    ecx,0xc
c001deb2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001deb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001deb8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001debe:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001dec2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001dec8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001decc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ded0:	48                   	dec    eax
c001ded1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ded6:	89 c1                	mov    ecx,eax
c001ded8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001dede:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dee3:	09 c8                	or     eax,ecx
c001dee5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001deeb:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001def1:	83 c8 80             	or     eax,0xffffff80
c001def4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001defa:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001defd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001df01:	25 00 7f 00 00       	and    eax,0x7f00
c001df06:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001df0a:	0d 27 80 ff ff       	or     eax,0xffff8027
c001df0f:	66 89 03             	mov    WORD PTR [ebx],ax
c001df12:	89 d0                	mov    eax,edx
c001df14:	c1 ea 18             	shr    edx,0x18
c001df17:	c1 e8 10             	shr    eax,0x10
c001df1a:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001df1d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001df20:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001df24:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001df27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df2b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001df2e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df32:	83 c4 10             	add    esp,0x10
c001df35:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001df39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df3d:	31 c0                	xor    eax,eax
c001df3f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001df45:	80 e1 88             	and    cl,0x88
c001df48:	74 0a                	je     c001df54 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001df4a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df4f:	74 0a                	je     c001df5b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001df51:	40                   	inc    eax
c001df52:	eb eb                	jmp    c001df3f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001df54:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df59:	75 43                	jne    c001df9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001df5b:	83 ec 0c             	sub    esp,0xc
c001df5e:	68 3c 2d 02 c0       	push   0xc0022d3c
c001df63:	e8 dd c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001df68:	58                   	pop    eax
c001df69:	5a                   	pop    edx
c001df6a:	68 51 2d 02 c0       	push   0xc0022d51
c001df6f:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001df75:	e8 2c ab fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001df7a:	59                   	pop    ecx
c001df7b:	5b                   	pop    ebx
c001df7c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df80:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df86:	e8 6f e4 ff ff       	call   c001c3fa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001df8b:	5e                   	pop    esi
c001df8c:	5f                   	pop    edi
c001df8d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df91:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df97:	e8 3e e4 ff ff       	call   c001c3da <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001df9c:	eb 48                	jmp    c001dfe6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001df9e:	be 01 00 00 00       	mov    esi,0x1
c001dfa3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001dfa7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dfab:	d3 e6                	shl    esi,cl
c001dfad:	c1 e7 07             	shl    edi,0x7
c001dfb0:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001dfb6:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001dfbb:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001dfbf:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001dfc5:	85 c6                	test   esi,eax
c001dfc7:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001dfcd:	0f 84 a3 00 00 00    	je     c001e076 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001dfd3:	0f ba e0 1e          	bt     eax,0x1e
c001dfd7:	73 1a                	jae    c001dff3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001dfd9:	83 ec 0c             	sub    esp,0xc
c001dfdc:	68 63 2d 02 c0       	push   0xc0022d63
c001dfe1:	e8 5f c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001dfe6:	83 c4 10             	add    esp,0x10
c001dfe9:	b8 01 00 00 00       	mov    eax,0x1
c001dfee:	e9 b6 00 00 00       	jmp    c001e0a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001dff3:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001dff9:	83 f8 0d             	cmp    eax,0xd
c001dffc:	77 0a                	ja     c001e008 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001dffe:	83 ec 0c             	sub    esp,0xc
c001e001:	68 c8 00 00 00       	push   0xc8
c001e006:	eb 28                	jmp    c001e030 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e008:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e00e:	83 f8 0d             	cmp    eax,0xd
c001e011:	77 0a                	ja     c001e01d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e013:	83 ec 0c             	sub    esp,0xc
c001e016:	68 58 02 00 00       	push   0x258
c001e01b:	eb 13                	jmp    c001e030 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e01d:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e023:	83 f8 06             	cmp    eax,0x6
c001e026:	77 10                	ja     c001e038 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e028:	83 ec 0c             	sub    esp,0xc
c001e02b:	68 dc 05 00 00       	push   0x5dc
c001e030:	e8 c7 7d ff ff       	call   c0015dfc <milliTenthSleep(unsigned int)>
c001e035:	83 c4 10             	add    esp,0x10
c001e038:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e03c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e03f:	75 06                	jne    c001e047 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e041:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e045:	74 15                	je     c001e05c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e047:	83 fb 06             	cmp    ebx,0x6
c001e04a:	77 10                	ja     c001e05c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e04c:	83 ec 0c             	sub    esp,0xc
c001e04f:	68 c4 09 00 00       	push   0x9c4
c001e054:	e8 a3 7d ff ff       	call   c0015dfc <milliTenthSleep(unsigned int)>
c001e059:	83 c4 10             	add    esp,0x10
c001e05c:	43                   	inc    ebx
c001e05d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e063:	0f 85 56 ff ff ff    	jne    c001dfbf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e069:	83 ec 0c             	sub    esp,0xc
c001e06c:	68 76 2d 02 c0       	push   0xc0022d76
c001e071:	e9 6b ff ff ff       	jmp    c001dfe1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e076:	0f ba e0 1e          	bt     eax,0x1e
c001e07a:	73 0d                	jae    c001e089 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e07c:	83 ec 0c             	sub    esp,0xc
c001e07f:	68 8a 2d 02 c0       	push   0xc0022d8a
c001e084:	e9 58 ff ff ff       	jmp    c001dfe1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e089:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e08e:	74 17                	je     c001e0a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e090:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e095:	74 10                	je     c001e0a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e097:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e09d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e0a1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e0a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e0a7:	31 c0                	xor    eax,eax
c001e0a9:	83 c4 2c             	add    esp,0x2c
c001e0ac:	5b                   	pop    ebx
c001e0ad:	5e                   	pop    esi
c001e0ae:	5f                   	pop    edi
c001e0af:	5d                   	pop    ebp
c001e0b0:	c3                   	ret    
c001e0b1:	90                   	nop

c001e0b2 <SATAPI::eject()>:
c001e0b2:	57                   	push   edi
c001e0b3:	b9 03 00 00 00       	mov    ecx,0x3
c001e0b8:	83 ec 18             	sub    esp,0x18
c001e0bb:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e0bf:	fc                   	cld    
c001e0c0:	31 c0                	xor    eax,eax
c001e0c2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e0c4:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e0c9:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e0ce:	50                   	push   eax
c001e0cf:	6a 00                	push   0x0
c001e0d1:	6a 00                	push   0x0
c001e0d3:	6a 00                	push   0x0
c001e0d5:	6a 00                	push   0x0
c001e0d7:	6a 02                	push   0x2
c001e0d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0dd:	50                   	push   eax
c001e0de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0e2:	e8 ed fc ff ff       	call   c001ddd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e0e7:	31 c0                	xor    eax,eax
c001e0e9:	83 c4 38             	add    esp,0x38
c001e0ec:	5f                   	pop    edi
c001e0ed:	c3                   	ret    

c001e0ee <SATAPI::detectMedia()>:
c001e0ee:	53                   	push   ebx
c001e0ef:	83 ec 14             	sub    esp,0x14
c001e0f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e0f6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0fc:	e8 4b 02 ff ff       	call   c000e34c <VCache::writeWriteBuffer()>
c001e101:	59                   	pop    ecx
c001e102:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e108:	e8 2f 02 ff ff       	call   c000e33c <VCache::invalidateReadBuffer()>
c001e10d:	c7 04 24 9f 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d9f
c001e114:	e8 2c c8 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e119:	83 c4 10             	add    esp,0x10
c001e11c:	31 c0                	xor    eax,eax
c001e11e:	8b 14 85 e0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b20]
c001e125:	85 d2                	test   edx,edx
c001e127:	74 0f                	je     c001e138 <SATAPI::detectMedia()+0x4a>
c001e129:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e12f:	75 07                	jne    c001e138 <SATAPI::detectMedia()+0x4a>
c001e131:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e138:	40                   	inc    eax
c001e139:	83 f8 1a             	cmp    eax,0x1a
c001e13c:	75 e0                	jne    c001e11e <SATAPI::detectMedia()+0x30>
c001e13e:	83 c4 08             	add    esp,0x8
c001e141:	5b                   	pop    ebx
c001e142:	c3                   	ret    
c001e143:	90                   	nop

c001e144 <SATAPI::open(int, int, void*)>:
c001e144:	56                   	push   esi
c001e145:	53                   	push   ebx
c001e146:	51                   	push   ecx
c001e147:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e14b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e14f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e159:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e15f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e169:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e16d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e177:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e17d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e184:	e8 36 9c fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e189:	89 c6                	mov    esi,eax
c001e18b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e191:	81 c6 00 10 00 00    	add    esi,0x1000
c001e197:	e8 23 9c fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e19c:	39 c6                	cmp    esi,eax
c001e19e:	74 10                	je     c001e1b0 <SATAPI::open(int, int, void*)+0x6c>
c001e1a0:	83 ec 0c             	sub    esp,0xc
c001e1a3:	68 b4 2d 02 c0       	push   0xc0022db4
c001e1a8:	e8 60 30 ff ff       	call   c001120d <KePanic(char const*)>
c001e1ad:	83 c4 10             	add    esp,0x10
c001e1b0:	83 ec 0c             	sub    esp,0xc
c001e1b3:	6a 02                	push   0x2
c001e1b5:	e8 53 b4 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e1ba:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e1c0:	6a 03                	push   0x3
c001e1c2:	50                   	push   eax
c001e1c3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e1c9:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e1cf:	e8 4c bb fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e1d4:	83 c4 14             	add    esp,0x14
c001e1d7:	68 78 01 00 00       	push   0x178
c001e1dc:	e8 d5 98 fe ff       	call   c0007ab6 <malloc>
c001e1e1:	83 c4 0c             	add    esp,0xc
c001e1e4:	89 c6                	mov    esi,eax
c001e1e6:	6a 00                	push   0x0
c001e1e8:	68 ff ff ff 7f       	push   0x7fffffff
c001e1ed:	6a 00                	push   0x0
c001e1ef:	6a 00                	push   0x0
c001e1f1:	53                   	push   ebx
c001e1f2:	68 ca 2d 02 c0       	push   0xc0022dca
c001e1f7:	50                   	push   eax
c001e1f8:	e8 ab f5 fe ff       	call   c000d7a8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e1fd:	83 c4 14             	add    esp,0x14
c001e200:	56                   	push   esi
c001e201:	e8 62 f6 fe ff       	call   c000d868 <LogicalDisk::assignDriveLetter()>
c001e206:	5a                   	pop    edx
c001e207:	0f be c0             	movsx  eax,al
c001e20a:	59                   	pop    ecx
c001e20b:	50                   	push   eax
c001e20c:	68 1c 2c 02 c0       	push   0xc0022c1c
c001e211:	e8 2f c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e216:	58                   	pop    eax
c001e217:	5a                   	pop    edx
c001e218:	56                   	push   esi
c001e219:	53                   	push   ebx
c001e21a:	e8 e3 e3 fe ff       	call   c000c602 <Device::addChild(Device*)>
c001e21f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e225:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e228:	e8 09 e8 fe ff       	call   c000ca36 <PhysicalDisk::startCache()>
c001e22d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e234:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e237:	e8 b2 fe ff ff       	call   c001e0ee <SATAPI::detectMedia()>
c001e23c:	83 c4 14             	add    esp,0x14
c001e23f:	31 c0                	xor    eax,eax
c001e241:	5b                   	pop    ebx
c001e242:	5e                   	pop    esi
c001e243:	c3                   	ret    

c001e244 <SATAPI::read(unsigned long long, int, void*)>:
c001e244:	57                   	push   edi
c001e245:	56                   	push   esi
c001e246:	53                   	push   ebx
c001e247:	83 ec 30             	sub    esp,0x30
c001e24a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e24e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e252:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e256:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e25a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e25e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e262:	83 fe 04             	cmp    esi,0x4
c001e265:	7e 10                	jle    c001e277 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e267:	83 ec 0c             	sub    esp,0xc
c001e26a:	68 d8 2d 02 c0       	push   0xc0022dd8
c001e26f:	e8 99 2f ff ff       	call   c001120d <KePanic(char const*)>
c001e274:	83 c4 10             	add    esp,0x10
c001e277:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e27d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e283:	51                   	push   ecx
c001e284:	50                   	push   eax
c001e285:	83 c0 02             	add    eax,0x2
c001e288:	c1 e0 07             	shl    eax,0x7
c001e28b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e291:	50                   	push   eax
c001e292:	52                   	push   edx
c001e293:	e8 8c e1 ff ff       	call   c001c424 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e298:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e29c:	b9 03 00 00 00       	mov    ecx,0x3
c001e2a1:	fc                   	cld    
c001e2a2:	31 c0                	xor    eax,eax
c001e2a4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2a6:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e2ab:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e2b0:	83 c4 0c             	add    esp,0xc
c001e2b3:	6a 00                	push   0x0
c001e2b5:	6a 00                	push   0x0
c001e2b7:	6a 00                	push   0x0
c001e2b9:	6a 00                	push   0x0
c001e2bb:	6a 02                	push   0x2
c001e2bd:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e2c1:	50                   	push   eax
c001e2c2:	53                   	push   ebx
c001e2c3:	e8 0c fb ff ff       	call   c001ddd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e2c8:	83 c4 20             	add    esp,0x20
c001e2cb:	85 c0                	test   eax,eax
c001e2cd:	75 44                	jne    c001e313 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e2cf:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e2d3:	b9 03 00 00 00       	mov    ecx,0x3
c001e2d8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2de:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e2e3:	0f c8                	bswap  eax
c001e2e5:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e2e9:	89 f0                	mov    eax,esi
c001e2eb:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e2ef:	50                   	push   eax
c001e2f0:	56                   	push   esi
c001e2f1:	c1 e6 0b             	shl    esi,0xb
c001e2f4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e2f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e300:	56                   	push   esi
c001e301:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e305:	50                   	push   eax
c001e306:	53                   	push   ebx
c001e307:	e8 c8 fa ff ff       	call   c001ddd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e30c:	83 c4 20             	add    esp,0x20
c001e30f:	85 c0                	test   eax,eax
c001e311:	74 14                	je     c001e327 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e313:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e317:	83 ec 0c             	sub    esp,0xc
c001e31a:	53                   	push   ebx
c001e31b:	e8 ce fd ff ff       	call   c001e0ee <SATAPI::detectMedia()>
c001e320:	83 c4 10             	add    esp,0x10
c001e323:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e327:	83 c4 30             	add    esp,0x30
c001e32a:	5b                   	pop    ebx
c001e32b:	5e                   	pop    esi
c001e32c:	5f                   	pop    edi
c001e32d:	c3                   	ret    

c001e32e <IOAPIC::close(int, int, void*)>:
c001e32e:	b8 00 00 00 00       	mov    eax,0x0
c001e333:	c3                   	ret    

c001e334 <apicGetBase()>:
c001e334:	55                   	push   ebp
c001e335:	89 e5                	mov    ebp,esp
c001e337:	83 ec 18             	sub    esp,0x18
c001e33a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e33f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e345:	83 e0 08             	and    eax,0x8
c001e348:	0f b6 c0             	movzx  eax,al
c001e34b:	85 c0                	test   eax,eax
c001e34d:	75 07                	jne    c001e356 <apicGetBase()+0x22>
c001e34f:	b8 00 00 00 00       	mov    eax,0x0
c001e354:	eb 21                	jmp    c001e377 <apicGetBase()+0x43>
c001e356:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e35b:	83 ec 08             	sub    esp,0x8
c001e35e:	6a 1b                	push   0x1b
c001e360:	50                   	push   eax
c001e361:	e8 5a 8d fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e366:	83 c4 10             	add    esp,0x10
c001e369:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e36c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e36f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e372:	25 00 00 ff ff       	and    eax,0xffff0000
c001e377:	c9                   	leave  
c001e378:	c3                   	ret    
c001e379:	90                   	nop

c001e37a <IOAPIC::IOAPIC()>:
c001e37a:	83 ec 0c             	sub    esp,0xc
c001e37d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e381:	83 ec 08             	sub    esp,0x8
c001e384:	68 3c 2e 02 c0       	push   0xc0022e3c
c001e389:	50                   	push   eax
c001e38a:	e8 0b e4 fe ff       	call   c000c79a <Device::Device(char const*)>
c001e38f:	83 c4 10             	add    esp,0x10
c001e392:	ba 4c 2e 02 c0       	mov    edx,0xc0022e4c
c001e397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e39b:	89 10                	mov    DWORD PTR [eax],edx
c001e39d:	90                   	nop
c001e39e:	83 c4 0c             	add    esp,0xc
c001e3a1:	c3                   	ret    

c001e3a2 <apicOpen()>:
c001e3a2:	55                   	push   ebp
c001e3a3:	89 e5                	mov    ebp,esp
c001e3a5:	53                   	push   ebx
c001e3a6:	83 ec 34             	sub    esp,0x34
c001e3a9:	a0 a0 ae 02 c0       	mov    al,ds:0xc002aea0
c001e3ae:	83 f0 01             	xor    eax,0x1
c001e3b1:	0f b6 c0             	movzx  eax,al
c001e3b4:	85 c0                	test   eax,eax
c001e3b6:	0f 84 a3 00 00 00    	je     c001e45f <apicOpen()+0xbd>
c001e3bc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e3c0:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c001e3c5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e3c9:	0f b6 c0             	movzx  eax,al
c001e3cc:	39 c2                	cmp    edx,eax
c001e3ce:	0f 83 84 00 00 00    	jae    c001e458 <apicOpen()+0xb6>
c001e3d4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e3db:	83 ec 0c             	sub    esp,0xc
c001e3de:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e3e1:	e8 d0 96 fe ff       	call   c0007ab6 <malloc>
c001e3e6:	83 c4 10             	add    esp,0x10
c001e3e9:	89 c3                	mov    ebx,eax
c001e3eb:	83 ec 0c             	sub    esp,0xc
c001e3ee:	53                   	push   ebx
c001e3ef:	e8 86 ff ff ff       	call   c001e37a <IOAPIC::IOAPIC()>
c001e3f4:	83 c4 10             	add    esp,0x10
c001e3f7:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e3fa:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e3fe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e401:	89 14 85 80 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5180],edx
c001e408:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c001e40d:	83 c0 01             	add    eax,0x1
c001e410:	a3 60 ae 02 c0       	mov    ds:0xc002ae60,eax
c001e415:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e41a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e420:	83 ec 08             	sub    esp,0x8
c001e423:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e426:	50                   	push   eax
c001e427:	e8 d6 e1 fe ff       	call   c000c602 <Device::addChild(Device*)>
c001e42c:	83 c4 10             	add    esp,0x10
c001e42f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e432:	8b 00                	mov    eax,DWORD PTR [eax]
c001e434:	83 c0 08             	add    eax,0x8
c001e437:	8b 00                	mov    eax,DWORD PTR [eax]
c001e439:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e43d:	6a 00                	push   0x0
c001e43f:	6a 00                	push   0x0
c001e441:	52                   	push   edx
c001e442:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e445:	ff d0                	call   eax
c001e447:	83 c4 10             	add    esp,0x10
c001e44a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e44d:	83 c0 01             	add    eax,0x1
c001e450:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e453:	e9 68 ff ff ff       	jmp    c001e3c0 <apicOpen()+0x1e>
c001e458:	c6 05 a0 ae 02 c0 01 	mov    BYTE PTR ds:0xc002aea0,0x1
c001e45f:	e8 d0 fe ff ff       	call   c001e334 <apicGetBase()>
c001e464:	05 f0 00 00 00       	add    eax,0xf0
c001e469:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e46c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e46f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e471:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e474:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e47b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e482:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e485:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e488:	89 10                	mov    DWORD PTR [eax],edx
c001e48a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e491:	a1 90 97 02 c0       	mov    eax,ds:0xc0029790
c001e496:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e499:	7d 7c                	jge    c001e517 <apicOpen()+0x175>
c001e49b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e49e:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e4a5:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e4a8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4ab:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e4b2:	c1 e8 08             	shr    eax,0x8
c001e4b5:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e4b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4bc:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e4c3:	c1 e8 18             	shr    eax,0x18
c001e4c6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e4c9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e4cd:	3d ff 00 00 00       	cmp    eax,0xff
c001e4d2:	75 3a                	jne    c001e50e <apicOpen()+0x16c>
c001e4d4:	e8 5b fe ff ff       	call   c001e334 <apicGetBase()>
c001e4d9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e4dd:	83 fa 01             	cmp    edx,0x1
c001e4e0:	75 07                	jne    c001e4e9 <apicOpen()+0x147>
c001e4e2:	ba 60 03 00 00       	mov    edx,0x360
c001e4e7:	eb 05                	jmp    c001e4ee <apicOpen()+0x14c>
c001e4e9:	ba 50 03 00 00       	mov    edx,0x350
c001e4ee:	01 d0                	add    eax,edx
c001e4f0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e4f3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e4f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4f8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e4fb:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e502:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e506:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e509:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e50c:	89 10                	mov    DWORD PTR [eax],edx
c001e50e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e512:	e9 7a ff ff ff       	jmp    c001e491 <apicOpen()+0xef>
c001e517:	90                   	nop
c001e518:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e51b:	c9                   	leave  
c001e51c:	c3                   	ret    
c001e51d:	90                   	nop

c001e51e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e51e:	55                   	push   ebp
c001e51f:	89 e5                	mov    ebp,esp
c001e521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e524:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e52a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e52d:	72 1d                	jb     c001e54c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e52f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e532:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e538:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e53b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e541:	01 d0                	add    eax,edx
c001e543:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e546:	73 04                	jae    c001e54c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e548:	b0 01                	mov    al,0x1
c001e54a:	eb 02                	jmp    c001e54e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e54c:	b0 00                	mov    al,0x0
c001e54e:	5d                   	pop    ebp
c001e54f:	c3                   	ret    

c001e550 <IOAPIC::read(int)>:
c001e550:	55                   	push   ebp
c001e551:	89 e5                	mov    ebp,esp
c001e553:	83 ec 10             	sub    esp,0x10
c001e556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e559:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e55f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e562:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e565:	0f b6 d0             	movzx  edx,al
c001e568:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e56b:	89 10                	mov    DWORD PTR [eax],edx
c001e56d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e570:	83 c0 10             	add    eax,0x10
c001e573:	8b 00                	mov    eax,DWORD PTR [eax]
c001e575:	c9                   	leave  
c001e576:	c3                   	ret    
c001e577:	90                   	nop

c001e578 <IOAPIC::open(int, int, void*)>:
c001e578:	55                   	push   ebp
c001e579:	89 e5                	mov    ebp,esp
c001e57b:	57                   	push   edi
c001e57c:	56                   	push   esi
c001e57d:	53                   	push   ebx
c001e57e:	83 ec 04             	sub    esp,0x4
c001e581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e584:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e587:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e58d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e590:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e596:	8b 14 85 80 98 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6780]
c001e59d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e5a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e5af:	8b 14 85 00 99 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6700]
c001e5b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e5bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5c2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e5c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5cb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e5d1:	0f b6 f0             	movzx  esi,al
c001e5d4:	89 d0                	mov    eax,edx
c001e5d6:	ba 00 00 00 00       	mov    edx,0x0
c001e5db:	89 c7                	mov    edi,eax
c001e5dd:	83 e7 ff             	and    edi,0xffffffff
c001e5e0:	89 f9                	mov    ecx,edi
c001e5e2:	0f b6 da             	movzx  ebx,dl
c001e5e5:	89 c8                	mov    eax,ecx
c001e5e7:	89 da                	mov    edx,ebx
c001e5e9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e5ec:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e5ef:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e5f3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e5f7:	83 e0 00             	and    eax,0x0
c001e5fa:	09 d0                	or     eax,edx
c001e5fc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e603:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e609:	8d 50 01             	lea    edx,[eax+0x1]
c001e60c:	88 d1                	mov    cl,dl
c001e60e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e611:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e617:	0f b6 d0             	movzx  edx,al
c001e61a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e61d:	83 c2 08             	add    edx,0x8
c001e620:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e624:	0f b6 c9             	movzx  ecx,cl
c001e627:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e62d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e631:	6a 01                	push   0x1
c001e633:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e636:	e8 15 ff ff ff       	call   c001e550 <IOAPIC::read(int)>
c001e63b:	83 c4 08             	add    esp,0x8
c001e63e:	c1 f8 10             	sar    eax,0x10
c001e641:	0f b6 c0             	movzx  eax,al
c001e644:	8d 50 01             	lea    edx,[eax+0x1]
c001e647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e64a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e650:	b8 00 00 00 00       	mov    eax,0x0
c001e655:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e658:	5b                   	pop    ebx
c001e659:	5e                   	pop    esi
c001e65a:	5f                   	pop    edi
c001e65b:	5d                   	pop    ebp
c001e65c:	c3                   	ret    
c001e65d:	90                   	nop

c001e65e <IOAPIC::write(int, int)>:
c001e65e:	55                   	push   ebp
c001e65f:	89 e5                	mov    ebp,esp
c001e661:	83 ec 10             	sub    esp,0x10
c001e664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e667:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e66d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e670:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e673:	0f b6 d0             	movzx  edx,al
c001e676:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e679:	89 10                	mov    DWORD PTR [eax],edx
c001e67b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e67e:	8d 50 10             	lea    edx,[eax+0x10]
c001e681:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e684:	89 02                	mov    DWORD PTR [edx],eax
c001e686:	90                   	nop
c001e687:	c9                   	leave  
c001e688:	c3                   	ret    
c001e689:	90                   	nop

c001e68a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e68a:	55                   	push   ebp
c001e68b:	89 e5                	mov    ebp,esp
c001e68d:	53                   	push   ebx
c001e68e:	83 ec 2c             	sub    esp,0x2c
c001e691:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e694:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e697:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e69a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e69d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e6a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e6a3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e6a6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e6a9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e6ac:	88 d8                	mov    al,bl
c001e6ae:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e6b1:	88 c8                	mov    al,cl
c001e6b3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e6b6:	88 d0                	mov    al,dl
c001e6b8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e6bb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e6bf:	83 c0 08             	add    eax,0x8
c001e6c2:	01 c0                	add    eax,eax
c001e6c4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e6c7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e6cb:	83 c0 08             	add    eax,0x8
c001e6ce:	01 c0                	add    eax,eax
c001e6d0:	83 c0 01             	add    eax,0x1
c001e6d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e6d6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6d9:	50                   	push   eax
c001e6da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6dd:	e8 6e fe ff ff       	call   c001e550 <IOAPIC::read(int)>
c001e6e2:	83 c4 08             	add    esp,0x8
c001e6e5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e6e8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e6ef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e6f2:	c1 e0 18             	shl    eax,0x18
c001e6f5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e6f8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e6fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6fe:	52                   	push   edx
c001e6ff:	50                   	push   eax
c001e700:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e703:	e8 56 ff ff ff       	call   c001e65e <IOAPIC::write(int, int)>
c001e708:	83 c4 0c             	add    esp,0xc
c001e70b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e70e:	50                   	push   eax
c001e70f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e712:	e8 39 fe ff ff       	call   c001e550 <IOAPIC::read(int)>
c001e717:	83 c4 08             	add    esp,0x8
c001e71a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e71d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e724:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e72b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e732:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e736:	85 c0                	test   eax,eax
c001e738:	74 09                	je     c001e743 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e73a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e741:	eb 07                	jmp    c001e74a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e743:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e74a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e74e:	85 c0                	test   eax,eax
c001e750:	74 09                	je     c001e75b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e752:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e759:	eb 07                	jmp    c001e762 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e75b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e762:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e769:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e76d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e770:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e773:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e776:	52                   	push   edx
c001e777:	50                   	push   eax
c001e778:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e77b:	e8 de fe ff ff       	call   c001e65e <IOAPIC::write(int, int)>
c001e780:	83 c4 0c             	add    esp,0xc
c001e783:	90                   	nop
c001e784:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e787:	c9                   	leave  
c001e788:	c3                   	ret    
c001e789:	66 90                	xchg   ax,ax
c001e78b:	90                   	nop

c001e78c <APICTimer::close(int, int, void*)>:
c001e78c:	b8 00 00 00 00       	mov    eax,0x0
c001e791:	c3                   	ret    
c001e792:	66 90                	xchg   ax,ax

c001e794 <apicTimerHandler(regs*, void*)>:
c001e794:	83 ec 0c             	sub    esp,0xc
c001e797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e79b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e79d:	b8 10 27 00 00       	mov    eax,0x2710
c001e7a2:	ba 00 00 00 00       	mov    edx,0x0
c001e7a7:	f7 f1                	div    ecx
c001e7a9:	83 ec 0c             	sub    esp,0xc
c001e7ac:	50                   	push   eax
c001e7ad:	e8 b2 f8 fe ff       	call   c000e064 <timerHandler(unsigned int)>
c001e7b2:	83 c4 10             	add    esp,0x10
c001e7b5:	90                   	nop
c001e7b6:	83 c4 0c             	add    esp,0xc
c001e7b9:	c3                   	ret    
c001e7ba:	66 90                	xchg   ax,ax

c001e7bc <APICTimer::open(int, int, void*)>:
c001e7bc:	83 ec 0c             	sub    esp,0xc
c001e7bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7c5:	83 c0 24             	add    eax,0x24
c001e7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7ca:	83 ec 08             	sub    esp,0x8
c001e7cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7d5:	ff d0                	call   eax
c001e7d7:	83 c4 10             	add    esp,0x10
c001e7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7e2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7f0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e7f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7fa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e800:	83 ec 0c             	sub    esp,0xc
c001e803:	51                   	push   ecx
c001e804:	6a 01                	push   0x1
c001e806:	68 94 e7 01 c0       	push   0xc001e794
c001e80b:	52                   	push   edx
c001e80c:	50                   	push   eax
c001e80d:	e8 9c dd fe ff       	call   c000c5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e812:	83 c4 20             	add    esp,0x20
c001e815:	89 c2                	mov    edx,eax
c001e817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e81b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e821:	b8 00 00 00 00       	mov    eax,0x0
c001e826:	83 c4 0c             	add    esp,0xc
c001e829:	c3                   	ret    
c001e82a:	66 90                	xchg   ax,ax

c001e82c <APICTimer::write(int)>:
c001e82c:	83 ec 0c             	sub    esp,0xc
c001e82f:	83 ec 0c             	sub    esp,0xc
c001e832:	68 70 2e 02 c0       	push   0xc0022e70
c001e837:	e8 d1 29 ff ff       	call   c001120d <KePanic(char const*)>
c001e83c:	83 c4 10             	add    esp,0x10
c001e83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e843:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e847:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e84d:	90                   	nop
c001e84e:	83 c4 0c             	add    esp,0xc
c001e851:	c3                   	ret    
c001e852:	66 90                	xchg   ax,ax

c001e854 <APICTimer::APICTimer()>:
c001e854:	83 ec 0c             	sub    esp,0xc
c001e857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e85b:	83 ec 08             	sub    esp,0x8
c001e85e:	68 80 2e 02 c0       	push   0xc0022e80
c001e863:	50                   	push   eax
c001e864:	e8 2f f7 fe ff       	call   c000df98 <Timer::Timer(char const*)>
c001e869:	83 c4 10             	add    esp,0x10
c001e86c:	ba 94 2e 02 c0       	mov    edx,0xc0022e94
c001e871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e875:	89 10                	mov    DWORD PTR [eax],edx
c001e877:	90                   	nop
c001e878:	83 c4 0c             	add    esp,0xc
c001e87b:	c3                   	ret    

c001e87c <PIT::write(int)>:
c001e87c:	83 ec 10             	sub    esp,0x10
c001e87f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e883:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e887:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e88d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e891:	a3 a4 ae 02 c0       	mov    ds:0xc002aea4,eax
c001e896:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e89b:	89 c2                	mov    edx,eax
c001e89d:	c1 fa 1f             	sar    edx,0x1f
c001e8a0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e8a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8a8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e8af:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e8b4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e8b8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e8bd:	ee                   	out    dx,al
c001e8be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8c2:	0f b6 c0             	movzx  eax,al
c001e8c5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e8cc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e8d0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e8d4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e8d9:	ee                   	out    dx,al
c001e8da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8de:	c1 f8 08             	sar    eax,0x8
c001e8e1:	0f b6 c0             	movzx  eax,al
c001e8e4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e8eb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e8ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e8f3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e8f8:	ee                   	out    dx,al
c001e8f9:	90                   	nop
c001e8fa:	83 c4 10             	add    esp,0x10
c001e8fd:	c3                   	ret    
c001e8fe:	66 90                	xchg   ax,ax

c001e900 <pitHandler(regs*, void*)>:
c001e900:	83 ec 0c             	sub    esp,0xc
c001e903:	8b 0d a4 ae 02 c0    	mov    ecx,DWORD PTR ds:0xc002aea4
c001e909:	b8 10 27 00 00       	mov    eax,0x2710
c001e90e:	89 c2                	mov    edx,eax
c001e910:	c1 fa 1f             	sar    edx,0x1f
c001e913:	f7 f9                	idiv   ecx
c001e915:	83 ec 0c             	sub    esp,0xc
c001e918:	50                   	push   eax
c001e919:	e8 46 f7 fe ff       	call   c000e064 <timerHandler(unsigned int)>
c001e91e:	83 c4 10             	add    esp,0x10
c001e921:	90                   	nop
c001e922:	83 c4 0c             	add    esp,0xc
c001e925:	c3                   	ret    
c001e926:	66 90                	xchg   ax,ax

c001e928 <PIT::open(int, int, void*)>:
c001e928:	83 ec 0c             	sub    esp,0xc
c001e92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e92f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e931:	83 c0 24             	add    eax,0x24
c001e934:	8b 00                	mov    eax,DWORD PTR [eax]
c001e936:	83 ec 08             	sub    esp,0x8
c001e939:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e93d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e941:	ff d0                	call   eax
c001e943:	83 c4 10             	add    esp,0x10
c001e946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94a:	83 ec 0c             	sub    esp,0xc
c001e94d:	6a 00                	push   0x0
c001e94f:	6a 01                	push   0x1
c001e951:	68 00 e9 01 c0       	push   0xc001e900
c001e956:	6a 00                	push   0x0
c001e958:	50                   	push   eax
c001e959:	e8 50 dc fe ff       	call   c000c5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e95e:	83 c4 20             	add    esp,0x20
c001e961:	89 c2                	mov    edx,eax
c001e963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e967:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e96d:	b8 00 00 00 00       	mov    eax,0x0
c001e972:	83 c4 0c             	add    esp,0xc
c001e975:	c3                   	ret    
c001e976:	66 90                	xchg   ax,ax

c001e978 <PIT::close(int, int, void*)>:
c001e978:	83 ec 0c             	sub    esp,0xc
c001e97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98d:	6a 01                	push   0x1
c001e98f:	68 00 e9 01 c0       	push   0xc001e900
c001e994:	6a 00                	push   0x0
c001e996:	50                   	push   eax
c001e997:	e8 48 dc fe ff       	call   c000c5e4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e99c:	83 c4 10             	add    esp,0x10
c001e99f:	b8 00 00 00 00       	mov    eax,0x0
c001e9a4:	83 c4 0c             	add    esp,0xc
c001e9a7:	c3                   	ret    

c001e9a8 <PIT::PIT()>:
c001e9a8:	83 ec 0c             	sub    esp,0xc
c001e9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9af:	83 ec 08             	sub    esp,0x8
c001e9b2:	68 bc 2e 02 c0       	push   0xc0022ebc
c001e9b7:	50                   	push   eax
c001e9b8:	e8 db f5 fe ff       	call   c000df98 <Timer::Timer(char const*)>
c001e9bd:	83 c4 10             	add    esp,0x10
c001e9c0:	ba e4 2e 02 c0       	mov    edx,0xc0022ee4
c001e9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c9:	89 10                	mov    DWORD PTR [eax],edx
c001e9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9d5:	0f b6 d0             	movzx  edx,al
c001e9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9dc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9ed:	0f b6 d0             	movzx  edx,al
c001e9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea03:	8d 50 01             	lea    edx,[eax+0x1]
c001ea06:	88 d1                	mov    cl,dl
c001ea08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea0c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ea12:	0f b6 d0             	movzx  edx,al
c001ea15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea19:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea1d:	83 e1 3f             	and    ecx,0x3f
c001ea20:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea24:	90                   	nop
c001ea25:	83 c4 0c             	add    esp,0xc
c001ea28:	c3                   	ret    
c001ea29:	66 90                	xchg   ax,ax
c001ea2b:	66 90                	xchg   ax,ax
c001ea2d:	66 90                	xchg   ax,ax
c001ea2f:	90                   	nop

c001ea30 <avxDetect>:
c001ea30:	b8 01 00 00 00       	mov    eax,0x1
c001ea35:	0f a2                	cpuid  
c001ea37:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ea3d:	74 15                	je     c001ea54 <avxDetect.noAVX>
c001ea3f:	b8 01 00 00 00       	mov    eax,0x1
c001ea44:	0f a2                	cpuid  
c001ea46:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ea4c:	74 06                	je     c001ea54 <avxDetect.noAVX>
c001ea4e:	b8 01 00 00 00       	mov    eax,0x1
c001ea53:	c3                   	ret    

c001ea54 <avxDetect.noAVX>:
c001ea54:	b8 00 00 00 00       	mov    eax,0x0
c001ea59:	c3                   	ret    

c001ea5a <avxSave>:
c001ea5a:	53                   	push   ebx
c001ea5b:	52                   	push   edx
c001ea5c:	31 c0                	xor    eax,eax
c001ea5e:	48                   	dec    eax
c001ea5f:	89 c2                	mov    edx,eax
c001ea61:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea65:	0f ae 23             	xsave  [ebx]
c001ea68:	5a                   	pop    edx
c001ea69:	5b                   	pop    ebx
c001ea6a:	c3                   	ret    

c001ea6b <avxLoad>:
c001ea6b:	53                   	push   ebx
c001ea6c:	52                   	push   edx
c001ea6d:	31 c0                	xor    eax,eax
c001ea6f:	48                   	dec    eax
c001ea70:	89 c2                	mov    edx,eax
c001ea72:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea76:	0f ae 2b             	xrstor [ebx]
c001ea79:	5a                   	pop    edx
c001ea7a:	5b                   	pop    ebx
c001ea7b:	c3                   	ret    

c001ea7c <avxInit>:
c001ea7c:	e8 67 03 00 00       	call   c001ede8 <sseInit>
c001ea81:	50                   	push   eax
c001ea82:	51                   	push   ecx
c001ea83:	0f 20 e0             	mov    eax,cr4
c001ea86:	0d 00 00 04 00       	or     eax,0x40000
c001ea8b:	0f 22 e0             	mov    cr4,eax
c001ea8e:	31 c9                	xor    ecx,ecx
c001ea90:	0f 01 d0             	xgetbv 
c001ea93:	0d 07 00 00 00       	or     eax,0x7
c001ea98:	0f 01 d1             	xsetbv 
c001ea9b:	59                   	pop    ecx
c001ea9c:	58                   	pop    eax
c001ea9d:	c3                   	ret    

c001ea9e <avxClose>:
c001ea9e:	c3                   	ret    

c001ea9f <wouldSheSayYes>:
c001ea9f:	c3                   	ret    
c001eaa0:	49                   	dec    ecx
c001eaa1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001eaa5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001eaa9:	75 20                	jne    c001eacb <isr0+0xb>
c001eaab:	4e                   	dec    esi
c001eaac:	79 61                	jns    c001eb0f <isr7+0x3>
c001eaae:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eab3:	66 90                	xchg   ax,ax
c001eab5:	66 90                	xchg   ax,ax
c001eab7:	66 90                	xchg   ax,ax
c001eab9:	66 90                	xchg   ax,ax
c001eabb:	66 90                	xchg   ax,ax
c001eabd:	66 90                	xchg   ax,ax
c001eabf:	90                   	nop

c001eac0 <isr0>:
c001eac0:	fa                   	cli    
c001eac1:	68 00 00 00 00       	push   0x0
c001eac6:	68 00 00 00 00       	push   0x0
c001eacb:	e9 56 01 00 00       	jmp    c001ec26 <int_common_stub>

c001ead0 <isr1>:
c001ead0:	fa                   	cli    
c001ead1:	6a 00                	push   0x0
c001ead3:	6a 01                	push   0x1
c001ead5:	e9 4c 01 00 00       	jmp    c001ec26 <int_common_stub>

c001eada <isr2>:
c001eada:	fa                   	cli    
c001eadb:	6a 00                	push   0x0
c001eadd:	6a 02                	push   0x2
c001eadf:	e9 42 01 00 00       	jmp    c001ec26 <int_common_stub>

c001eae4 <isr3>:
c001eae4:	fa                   	cli    
c001eae5:	6a 00                	push   0x0
c001eae7:	6a 03                	push   0x3
c001eae9:	e9 38 01 00 00       	jmp    c001ec26 <int_common_stub>

c001eaee <isr4>:
c001eaee:	fa                   	cli    
c001eaef:	6a 00                	push   0x0
c001eaf1:	6a 04                	push   0x4
c001eaf3:	e9 2e 01 00 00       	jmp    c001ec26 <int_common_stub>

c001eaf8 <isr5>:
c001eaf8:	fa                   	cli    
c001eaf9:	6a 00                	push   0x0
c001eafb:	6a 05                	push   0x5
c001eafd:	e9 24 01 00 00       	jmp    c001ec26 <int_common_stub>

c001eb02 <isr6>:
c001eb02:	fa                   	cli    
c001eb03:	6a 00                	push   0x0
c001eb05:	6a 06                	push   0x6
c001eb07:	e9 1a 01 00 00       	jmp    c001ec26 <int_common_stub>

c001eb0c <isr7>:
c001eb0c:	fa                   	cli    
c001eb0d:	6a 00                	push   0x0
c001eb0f:	6a 07                	push   0x7
c001eb11:	e9 10 01 00 00       	jmp    c001ec26 <int_common_stub>

c001eb16 <isr8>:
c001eb16:	fa                   	cli    
c001eb17:	6a 08                	push   0x8
c001eb19:	e9 08 01 00 00       	jmp    c001ec26 <int_common_stub>

c001eb1e <isr9>:
c001eb1e:	fa                   	cli    
c001eb1f:	6a 00                	push   0x0
c001eb21:	6a 09                	push   0x9
c001eb23:	e9 fe 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eb28 <isr10>:
c001eb28:	fa                   	cli    
c001eb29:	6a 0a                	push   0xa
c001eb2b:	e9 f6 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eb30 <isr11>:
c001eb30:	fa                   	cli    
c001eb31:	6a 0b                	push   0xb
c001eb33:	e9 ee 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eb38 <isr12>:
c001eb38:	fa                   	cli    
c001eb39:	6a 0c                	push   0xc
c001eb3b:	e9 e6 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eb40 <isr13>:
c001eb40:	fa                   	cli    
c001eb41:	6a 0d                	push   0xd
c001eb43:	53                   	push   ebx
c001eb44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb48:	81 fb 16 ed 01 c0    	cmp    ebx,0xc001ed16
c001eb4e:	5b                   	pop    ebx
c001eb4f:	0f 84 c3 01 00 00    	je     c001ed18 <finishSignal2>
c001eb55:	e9 cc 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eb5a <isr14>:
c001eb5a:	fa                   	cli    
c001eb5b:	6a 0e                	push   0xe
c001eb5d:	e9 c4 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eb62 <isr15>:
c001eb62:	fa                   	cli    
c001eb63:	6a 00                	push   0x0
c001eb65:	6a 0f                	push   0xf
c001eb67:	e9 ba 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eb6c <isr16>:
c001eb6c:	fa                   	cli    
c001eb6d:	6a 00                	push   0x0
c001eb6f:	6a 10                	push   0x10
c001eb71:	e9 b0 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eb76 <isr17>:
c001eb76:	fa                   	cli    
c001eb77:	6a 00                	push   0x0
c001eb79:	6a 11                	push   0x11
c001eb7b:	e9 a6 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eb80 <isr18>:
c001eb80:	fa                   	cli    
c001eb81:	6a 00                	push   0x0
c001eb83:	6a 12                	push   0x12
c001eb85:	e9 9c 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eb8a <irq3>:
c001eb8a:	fa                   	cli    
c001eb8b:	6a 00                	push   0x0
c001eb8d:	6a 23                	push   0x23
c001eb8f:	e9 92 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eb94 <irq4>:
c001eb94:	fa                   	cli    
c001eb95:	6a 00                	push   0x0
c001eb97:	6a 24                	push   0x24
c001eb99:	e9 88 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eb9e <irq5>:
c001eb9e:	fa                   	cli    
c001eb9f:	6a 00                	push   0x0
c001eba1:	6a 25                	push   0x25
c001eba3:	e9 7e 00 00 00       	jmp    c001ec26 <int_common_stub>

c001eba8 <irq6>:
c001eba8:	fa                   	cli    
c001eba9:	6a 00                	push   0x0
c001ebab:	6a 26                	push   0x26
c001ebad:	e9 74 00 00 00       	jmp    c001ec26 <int_common_stub>

c001ebb2 <irq7>:
c001ebb2:	fa                   	cli    
c001ebb3:	6a 00                	push   0x0
c001ebb5:	6a 27                	push   0x27
c001ebb7:	e9 6a 00 00 00       	jmp    c001ec26 <int_common_stub>

c001ebbc <irq8>:
c001ebbc:	fa                   	cli    
c001ebbd:	6a 00                	push   0x0
c001ebbf:	6a 28                	push   0x28
c001ebc1:	e9 60 00 00 00       	jmp    c001ec26 <int_common_stub>

c001ebc6 <irq9>:
c001ebc6:	fa                   	cli    
c001ebc7:	6a 00                	push   0x0
c001ebc9:	6a 29                	push   0x29
c001ebcb:	e9 56 00 00 00       	jmp    c001ec26 <int_common_stub>

c001ebd0 <irq10>:
c001ebd0:	fa                   	cli    
c001ebd1:	6a 00                	push   0x0
c001ebd3:	6a 2a                	push   0x2a
c001ebd5:	e9 4c 00 00 00       	jmp    c001ec26 <int_common_stub>

c001ebda <irq11>:
c001ebda:	fa                   	cli    
c001ebdb:	6a 00                	push   0x0
c001ebdd:	6a 2b                	push   0x2b
c001ebdf:	e9 42 00 00 00       	jmp    c001ec26 <int_common_stub>

c001ebe4 <irq12>:
c001ebe4:	fa                   	cli    
c001ebe5:	6a 00                	push   0x0
c001ebe7:	6a 2c                	push   0x2c
c001ebe9:	e9 38 00 00 00       	jmp    c001ec26 <int_common_stub>

c001ebee <irq13>:
c001ebee:	fa                   	cli    
c001ebef:	6a 00                	push   0x0
c001ebf1:	6a 2d                	push   0x2d
c001ebf3:	e9 2e 00 00 00       	jmp    c001ec26 <int_common_stub>

c001ebf8 <irq14>:
c001ebf8:	fa                   	cli    
c001ebf9:	6a 00                	push   0x0
c001ebfb:	6a 2e                	push   0x2e
c001ebfd:	e9 24 00 00 00       	jmp    c001ec26 <int_common_stub>

c001ec02 <irq15>:
c001ec02:	fa                   	cli    
c001ec03:	6a 00                	push   0x0
c001ec05:	6a 2f                	push   0x2f
c001ec07:	e9 1a 00 00 00       	jmp    c001ec26 <int_common_stub>

c001ec0c <irq1>:
c001ec0c:	fa                   	cli    
c001ec0d:	6a 00                	push   0x0
c001ec0f:	6a 21                	push   0x21
c001ec11:	eb 13                	jmp    c001ec26 <int_common_stub>

c001ec13 <irq2>:
c001ec13:	fa                   	cli    
c001ec14:	6a 00                	push   0x0
c001ec16:	6a 22                	push   0x22
c001ec18:	eb 0c                	jmp    c001ec26 <int_common_stub>

c001ec1a <isr96>:
c001ec1a:	6a 00                	push   0x0
c001ec1c:	6a 60                	push   0x60
c001ec1e:	fb                   	sti    
c001ec1f:	eb 37                	jmp    c001ec58 <syscall_common_stub>

c001ec21 <irq0>:
c001ec21:	fa                   	cli    
c001ec22:	6a 00                	push   0x0
c001ec24:	6a 20                	push   0x20

c001ec26 <int_common_stub>:
c001ec26:	60                   	pusha  
c001ec27:	1e                   	push   ds
c001ec28:	06                   	push   es
c001ec29:	0f a0                	push   fs
c001ec2b:	0f a8                	push   gs
c001ec2d:	66 b8 10 00          	mov    ax,0x10
c001ec31:	66 8e d8             	mov    ds,ax
c001ec34:	66 8e c0             	mov    es,ax
c001ec37:	66 8e e0             	mov    fs,ax
c001ec3a:	66 8e e8             	mov    gs,ax
c001ec3d:	54                   	push   esp
c001ec3e:	fc                   	cld    
c001ec3f:	e8 68 de fe ff       	call   c000caac <int_handler>
c001ec44:	81 c4 04 00 00 00    	add    esp,0x4
c001ec4a:	0f a9                	pop    gs
c001ec4c:	0f a1                	pop    fs
c001ec4e:	07                   	pop    es
c001ec4f:	1f                   	pop    ds
c001ec50:	61                   	popa   
c001ec51:	81 c4 08 00 00 00    	add    esp,0x8
c001ec57:	cf                   	iret   

c001ec58 <syscall_common_stub>:
c001ec58:	60                   	pusha  
c001ec59:	1e                   	push   ds
c001ec5a:	06                   	push   es
c001ec5b:	0f a0                	push   fs
c001ec5d:	0f a8                	push   gs
c001ec5f:	66 b8 10 00          	mov    ax,0x10
c001ec63:	66 8e d8             	mov    ds,ax
c001ec66:	66 8e c0             	mov    es,ax
c001ec69:	66 8e e0             	mov    fs,ax
c001ec6c:	66 8e e8             	mov    gs,ax
c001ec6f:	54                   	push   esp
c001ec70:	fc                   	cld    
c001ec71:	e8 36 de fe ff       	call   c000caac <int_handler>
c001ec76:	81 c4 04 00 00 00    	add    esp,0x4
c001ec7c:	0f a9                	pop    gs
c001ec7e:	0f a1                	pop    fs
c001ec80:	07                   	pop    es
c001ec81:	1f                   	pop    ds
c001ec82:	e8 9b 2b ff ff       	call   c0011822 <KiCheckSignalZ>
c001ec87:	3d 00 00 00 00       	cmp    eax,0x0
c001ec8c:	0f 84 c0 00 00 00    	je     c001ed52 <skipSignals>
c001ec92:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ec97:	61                   	popa   
c001ec98:	53                   	push   ebx
c001ec99:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ec9f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001eca2:	5b                   	pop    ebx
c001eca3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001eca8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ecab:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ecae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ecb1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ecb4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ecb7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ecba:	81 c4 08 00 00 00    	add    esp,0x8
c001ecc0:	5e                   	pop    esi
c001ecc1:	5b                   	pop    ebx
c001ecc2:	59                   	pop    ecx
c001ecc3:	5a                   	pop    edx
c001ecc4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ecc7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ecca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001eccd:	52                   	push   edx
c001ecce:	51                   	push   ecx
c001eccf:	53                   	push   ebx
c001ecd0:	56                   	push   esi
c001ecd1:	81 ec 08 00 00 00    	sub    esp,0x8
c001ecd7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ecda:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ecdd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ece0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ece3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ece6:	60                   	pusha  
c001ece7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001eced:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ecf0:	89 e3                	mov    ebx,esp
c001ecf2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ecf5:	52                   	push   edx
c001ecf6:	68 16 ed 01 c0       	push   0xc001ed16
c001ecfb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ecfe:	89 dc                	mov    esp,ebx
c001ed00:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ed03:	68 23 00 00 00       	push   0x23
c001ed08:	51                   	push   ecx
c001ed09:	68 02 02 00 00       	push   0x202
c001ed0e:	68 1b 00 00 00       	push   0x1b
c001ed13:	ff 36                	push   DWORD PTR [esi]
c001ed15:	cf                   	iret   

c001ed16 <finishSignal>:
c001ed16:	cd 0f                	int    0xf

c001ed18 <finishSignal2>:
c001ed18:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ed1e:	e8 7c 2b ff ff       	call   c001189f <KiFinishSignalZ>
c001ed23:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ed29:	68 23 00 00 00       	push   0x23
c001ed2e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ed31:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ed34:	68 1b 00 00 00       	push   0x1b
c001ed39:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ed3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed3f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ed42:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ed45:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ed48:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ed4b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ed4e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ed51:	cf                   	iret   

c001ed52 <skipSignals>:
c001ed52:	61                   	popa   
c001ed53:	81 c4 08 00 00 00    	add    esp,0x8
c001ed59:	cf                   	iret   
c001ed5a:	90                   	nop
c001ed5b:	90                   	nop

c001ed5c <irq16>:
c001ed5c:	fa                   	cli    
c001ed5d:	6a 00                	push   0x0
c001ed5f:	6a 30                	push   0x30
c001ed61:	e9 c0 fe ff ff       	jmp    c001ec26 <int_common_stub>

c001ed66 <irq17>:
c001ed66:	fa                   	cli    
c001ed67:	6a 00                	push   0x0
c001ed69:	6a 31                	push   0x31
c001ed6b:	e9 b6 fe ff ff       	jmp    c001ec26 <int_common_stub>

c001ed70 <irq18>:
c001ed70:	fa                   	cli    
c001ed71:	6a 00                	push   0x0
c001ed73:	6a 32                	push   0x32
c001ed75:	e9 ac fe ff ff       	jmp    c001ec26 <int_common_stub>

c001ed7a <irq19>:
c001ed7a:	fa                   	cli    
c001ed7b:	6a 00                	push   0x0
c001ed7d:	6a 33                	push   0x33
c001ed7f:	e9 a2 fe ff ff       	jmp    c001ec26 <int_common_stub>

c001ed84 <irq20>:
c001ed84:	fa                   	cli    
c001ed85:	6a 00                	push   0x0
c001ed87:	6a 34                	push   0x34
c001ed89:	e9 98 fe ff ff       	jmp    c001ec26 <int_common_stub>

c001ed8e <irq21>:
c001ed8e:	fa                   	cli    
c001ed8f:	6a 00                	push   0x0
c001ed91:	6a 35                	push   0x35
c001ed93:	e9 8e fe ff ff       	jmp    c001ec26 <int_common_stub>

c001ed98 <irq22>:
c001ed98:	fa                   	cli    
c001ed99:	6a 00                	push   0x0
c001ed9b:	6a 36                	push   0x36
c001ed9d:	e9 84 fe ff ff       	jmp    c001ec26 <int_common_stub>

c001eda2 <irq23>:
c001eda2:	fa                   	cli    
c001eda3:	6a 00                	push   0x0
c001eda5:	6a 37                	push   0x37
c001eda7:	e9 7a fe ff ff       	jmp    c001ec26 <int_common_stub>
c001edac:	66 90                	xchg   ax,ax
c001edae:	66 90                	xchg   ax,ax

c001edb0 <i386GetRDRAND>:
c001edb0:	b9 64 00 00 00       	mov    ecx,0x64

c001edb5 <retry>:
c001edb5:	0f c7 f0             	rdrand eax
c001edb8:	72 05                	jb     c001edbf <retry.done>
c001edba:	e2 f9                	loop   c001edb5 <retry>

c001edbc <retry.fail>:
c001edbc:	31 c0                	xor    eax,eax
c001edbe:	c3                   	ret    

c001edbf <retry.done>:
c001edbf:	c3                   	ret    

c001edc0 <absolutelyNoChanceInHell>:
c001edc0:	b8 01 00 00 00       	mov    eax,0x1
c001edc5:	0f a2                	cpuid  
c001edc7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001edcd:	74 06                	je     c001edd5 <sseDetect.noSSE>
c001edcf:	b8 01 00 00 00       	mov    eax,0x1
c001edd4:	c3                   	ret    

c001edd5 <sseDetect.noSSE>:
c001edd5:	31 c0                	xor    eax,eax
c001edd7:	c3                   	ret    

c001edd8 <sseSave>:
c001edd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eddc:	0f ae 00             	fxsave [eax]
c001eddf:	c3                   	ret    

c001ede0 <sseLoad>:
c001ede0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ede4:	0f ae 08             	fxrstor [eax]
c001ede7:	c3                   	ret    

c001ede8 <sseInit>:
c001ede8:	e8 42 00 00 00       	call   c001ee2f <x87Init>
c001eded:	0f 20 e0             	mov    eax,cr4
c001edf0:	66 0d 00 06          	or     ax,0x600
c001edf4:	0f 22 e0             	mov    cr4,eax
c001edf7:	c3                   	ret    

c001edf8 <sseClose>:
c001edf8:	c3                   	ret    
c001edf9:	66 90                	xchg   ax,ax
c001edfb:	66 90                	xchg   ax,ax
c001edfd:	66 90                	xchg   ax,ax
c001edff:	90                   	nop

c001ee00 <value_37F>:
c001ee00:	7f 03                	jg     c001ee05 <value_37A+0x1>

c001ee02 <value_37E>:
c001ee02:	7e 03                	jle    c001ee07 <x87Detect+0x1>

c001ee04 <value_37A>:
c001ee04:	7a 03                	jp     c001ee09 <x87Detect+0x3>

c001ee06 <x87Detect>:
c001ee06:	b8 01 00 00 00       	mov    eax,0x1
c001ee0b:	0f a2                	cpuid  
c001ee0d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ee13:	74 06                	je     c001ee1b <x87Detect.nox87>
c001ee15:	b8 01 00 00 00       	mov    eax,0x1
c001ee1a:	c3                   	ret    

c001ee1b <x87Detect.nox87>:
c001ee1b:	b8 00 00 00 00       	mov    eax,0x0
c001ee20:	c3                   	ret    

c001ee21 <x87Save>:
c001ee21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee25:	dd 30                	fnsave [eax]
c001ee27:	c3                   	ret    

c001ee28 <x87Load>:
c001ee28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee2c:	dd 20                	frstor [eax]
c001ee2e:	c3                   	ret    

c001ee2f <x87Init>:
c001ee2f:	0f 20 c0             	mov    eax,cr0
c001ee32:	66 25 fb ff          	and    ax,0xfffb
c001ee36:	66 0d 22 00          	or     ax,0x22
c001ee3a:	0f 22 c0             	mov    cr0,eax
c001ee3d:	db e3                	fninit 
c001ee3f:	0f 06                	clts   
c001ee41:	d9 2d 04 ee 01 c0    	fldcw  WORD PTR ds:0xc001ee04
c001ee47:	c3                   	ret    

c001ee48 <x87Close>:
c001ee48:	c3                   	ret    
c001ee49:	66 90                	xchg   ax,ax
c001ee4b:	90                   	nop

c001ee4c <__do_global_ctors_aux>:
c001ee4c:	a1 00 fe 01 c0       	mov    eax,ds:0xc001fe00
c001ee51:	83 f8 ff             	cmp    eax,0xffffffff
c001ee54:	74 1a                	je     c001ee70 <__do_global_ctors_aux+0x24>
c001ee56:	55                   	push   ebp
c001ee57:	89 e5                	mov    ebp,esp
c001ee59:	53                   	push   ebx
c001ee5a:	52                   	push   edx
c001ee5b:	bb 00 fe 01 c0       	mov    ebx,0xc001fe00
c001ee60:	ff d0                	call   eax
c001ee62:	83 eb 04             	sub    ebx,0x4
c001ee65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ee67:	83 f8 ff             	cmp    eax,0xffffffff
c001ee6a:	75 f4                	jne    c001ee60 <__do_global_ctors_aux+0x14>
c001ee6c:	58                   	pop    eax
c001ee6d:	5b                   	pop    ebx
c001ee6e:	5d                   	pop    ebp
c001ee6f:	c3                   	ret    
c001ee70:	c3                   	ret    
c001ee71:	66 90                	xchg   ax,ax
c001ee73:	90                   	nop

c001ee74 <__divdi3>:
c001ee74:	55                   	push   ebp
c001ee75:	57                   	push   edi
c001ee76:	56                   	push   esi
c001ee77:	53                   	push   ebx
c001ee78:	83 ec 1c             	sub    esp,0x1c
c001ee7b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ee7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee83:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ee86:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ee8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ee8e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ee92:	85 db                	test   ebx,ebx
c001ee94:	0f 88 8e 00 00 00    	js     c001ef28 <__divdi3+0xb4>
c001ee9a:	89 dd                	mov    ebp,ebx
c001ee9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001eea4:	89 d3                	mov    ebx,edx
c001eea6:	85 d2                	test   edx,edx
c001eea8:	79 0d                	jns    c001eeb7 <__divdi3+0x43>
c001eeaa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001eeae:	f7 d8                	neg    eax
c001eeb0:	83 d2 00             	adc    edx,0x0
c001eeb3:	f7 da                	neg    edx
c001eeb5:	89 d3                	mov    ebx,edx
c001eeb7:	89 c7                	mov    edi,eax
c001eeb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eebc:	85 db                	test   ebx,ebx
c001eebe:	75 48                	jne    c001ef08 <__divdi3+0x94>
c001eec0:	39 ef                	cmp    edi,ebp
c001eec2:	76 24                	jbe    c001eee8 <__divdi3+0x74>
c001eec4:	89 ea                	mov    edx,ebp
c001eec6:	f7 f7                	div    edi
c001eec8:	89 c1                	mov    ecx,eax
c001eeca:	31 f6                	xor    esi,esi
c001eecc:	89 c8                	mov    eax,ecx
c001eece:	89 f2                	mov    edx,esi
c001eed0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eed4:	85 c9                	test   ecx,ecx
c001eed6:	74 07                	je     c001eedf <__divdi3+0x6b>
c001eed8:	f7 d8                	neg    eax
c001eeda:	83 d2 00             	adc    edx,0x0
c001eedd:	f7 da                	neg    edx
c001eedf:	83 c4 1c             	add    esp,0x1c
c001eee2:	5b                   	pop    ebx
c001eee3:	5e                   	pop    esi
c001eee4:	5f                   	pop    edi
c001eee5:	5d                   	pop    ebp
c001eee6:	c3                   	ret    
c001eee7:	90                   	nop
c001eee8:	85 ff                	test   edi,edi
c001eeea:	75 0b                	jne    c001eef7 <__divdi3+0x83>
c001eeec:	b8 01 00 00 00       	mov    eax,0x1
c001eef1:	31 d2                	xor    edx,edx
c001eef3:	f7 f3                	div    ebx
c001eef5:	89 c7                	mov    edi,eax
c001eef7:	31 d2                	xor    edx,edx
c001eef9:	89 e8                	mov    eax,ebp
c001eefb:	f7 f7                	div    edi
c001eefd:	89 c6                	mov    esi,eax
c001eeff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef02:	f7 f7                	div    edi
c001ef04:	89 c1                	mov    ecx,eax
c001ef06:	eb c4                	jmp    c001eecc <__divdi3+0x58>
c001ef08:	39 eb                	cmp    ebx,ebp
c001ef0a:	77 3c                	ja     c001ef48 <__divdi3+0xd4>
c001ef0c:	0f bd f3             	bsr    esi,ebx
c001ef0f:	83 f6 1f             	xor    esi,0x1f
c001ef12:	75 40                	jne    c001ef54 <__divdi3+0xe0>
c001ef14:	39 eb                	cmp    ebx,ebp
c001ef16:	72 09                	jb     c001ef21 <__divdi3+0xad>
c001ef18:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ef1b:	0f 87 97 00 00 00    	ja     c001efb8 <__divdi3+0x144>
c001ef21:	b9 01 00 00 00       	mov    ecx,0x1
c001ef26:	eb a4                	jmp    c001eecc <__divdi3+0x58>
c001ef28:	f7 d9                	neg    ecx
c001ef2a:	83 d3 00             	adc    ebx,0x0
c001ef2d:	f7 db                	neg    ebx
c001ef2f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef32:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef36:	89 dd                	mov    ebp,ebx
c001ef38:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ef40:	e9 5f ff ff ff       	jmp    c001eea4 <__divdi3+0x30>
c001ef45:	8d 76 00             	lea    esi,[esi+0x0]
c001ef48:	31 f6                	xor    esi,esi
c001ef4a:	31 c9                	xor    ecx,ecx
c001ef4c:	e9 7b ff ff ff       	jmp    c001eecc <__divdi3+0x58>
c001ef51:	8d 76 00             	lea    esi,[esi+0x0]
c001ef54:	b8 20 00 00 00       	mov    eax,0x20
c001ef59:	29 f0                	sub    eax,esi
c001ef5b:	89 f1                	mov    ecx,esi
c001ef5d:	d3 e3                	shl    ebx,cl
c001ef5f:	89 fa                	mov    edx,edi
c001ef61:	88 c1                	mov    cl,al
c001ef63:	d3 ea                	shr    edx,cl
c001ef65:	09 da                	or     edx,ebx
c001ef67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ef6b:	89 f1                	mov    ecx,esi
c001ef6d:	d3 e7                	shl    edi,cl
c001ef6f:	89 eb                	mov    ebx,ebp
c001ef71:	88 c1                	mov    cl,al
c001ef73:	d3 eb                	shr    ebx,cl
c001ef75:	89 f1                	mov    ecx,esi
c001ef77:	d3 e5                	shl    ebp,cl
c001ef79:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ef7c:	88 c1                	mov    cl,al
c001ef7e:	d3 ea                	shr    edx,cl
c001ef80:	09 d5                	or     ebp,edx
c001ef82:	89 e8                	mov    eax,ebp
c001ef84:	89 da                	mov    edx,ebx
c001ef86:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ef8a:	89 d3                	mov    ebx,edx
c001ef8c:	89 c5                	mov    ebp,eax
c001ef8e:	f7 e7                	mul    edi
c001ef90:	39 d3                	cmp    ebx,edx
c001ef92:	72 18                	jb     c001efac <__divdi3+0x138>
c001ef94:	74 0a                	je     c001efa0 <__divdi3+0x12c>
c001ef96:	89 e9                	mov    ecx,ebp
c001ef98:	31 f6                	xor    esi,esi
c001ef9a:	e9 2d ff ff ff       	jmp    c001eecc <__divdi3+0x58>
c001ef9f:	90                   	nop
c001efa0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001efa3:	89 f1                	mov    ecx,esi
c001efa5:	d3 e7                	shl    edi,cl
c001efa7:	39 c7                	cmp    edi,eax
c001efa9:	73 eb                	jae    c001ef96 <__divdi3+0x122>
c001efab:	90                   	nop
c001efac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001efaf:	31 f6                	xor    esi,esi
c001efb1:	e9 16 ff ff ff       	jmp    c001eecc <__divdi3+0x58>
c001efb6:	66 90                	xchg   ax,ax
c001efb8:	31 c9                	xor    ecx,ecx
c001efba:	e9 0d ff ff ff       	jmp    c001eecc <__divdi3+0x58>
c001efbf:	90                   	nop

c001efc0 <__moddi3>:
c001efc0:	55                   	push   ebp
c001efc1:	57                   	push   edi
c001efc2:	56                   	push   esi
c001efc3:	53                   	push   ebx
c001efc4:	83 ec 2c             	sub    esp,0x2c
c001efc7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001efcb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001efcf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001efd3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001efd7:	85 db                	test   ebx,ebx
c001efd9:	0f 88 85 00 00 00    	js     c001f064 <__moddi3+0xa4>
c001efdf:	89 de                	mov    esi,ebx
c001efe1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001efe9:	89 d7                	mov    edi,edx
c001efeb:	85 d2                	test   edx,edx
c001efed:	79 09                	jns    c001eff8 <__moddi3+0x38>
c001efef:	f7 d8                	neg    eax
c001eff1:	83 d2 00             	adc    edx,0x0
c001eff4:	f7 da                	neg    edx
c001eff6:	89 d7                	mov    edi,edx
c001eff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001effc:	89 cd                	mov    ebp,ecx
c001effe:	85 ff                	test   edi,edi
c001f000:	75 52                	jne    c001f054 <__moddi3+0x94>
c001f002:	89 c3                	mov    ebx,eax
c001f004:	39 f0                	cmp    eax,esi
c001f006:	76 24                	jbe    c001f02c <__moddi3+0x6c>
c001f008:	89 c8                	mov    eax,ecx
c001f00a:	89 f2                	mov    edx,esi
c001f00c:	f7 f3                	div    ebx
c001f00e:	89 d6                	mov    esi,edx
c001f010:	89 f0                	mov    eax,esi
c001f012:	31 d2                	xor    edx,edx
c001f014:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f018:	85 c9                	test   ecx,ecx
c001f01a:	74 07                	je     c001f023 <__moddi3+0x63>
c001f01c:	f7 d8                	neg    eax
c001f01e:	83 d2 00             	adc    edx,0x0
c001f021:	f7 da                	neg    edx
c001f023:	83 c4 2c             	add    esp,0x2c
c001f026:	5b                   	pop    ebx
c001f027:	5e                   	pop    esi
c001f028:	5f                   	pop    edi
c001f029:	5d                   	pop    ebp
c001f02a:	c3                   	ret    
c001f02b:	90                   	nop
c001f02c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f030:	85 db                	test   ebx,ebx
c001f032:	75 0d                	jne    c001f041 <__moddi3+0x81>
c001f034:	b8 01 00 00 00       	mov    eax,0x1
c001f039:	31 d2                	xor    edx,edx
c001f03b:	f7 f7                	div    edi
c001f03d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f041:	89 f0                	mov    eax,esi
c001f043:	31 d2                	xor    edx,edx
c001f045:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f049:	f7 f7                	div    edi
c001f04b:	89 e8                	mov    eax,ebp
c001f04d:	f7 f7                	div    edi
c001f04f:	89 d6                	mov    esi,edx
c001f051:	eb bd                	jmp    c001f010 <__moddi3+0x50>
c001f053:	90                   	nop
c001f054:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f058:	39 f7                	cmp    edi,esi
c001f05a:	76 20                	jbe    c001f07c <__moddi3+0xbc>
c001f05c:	89 c8                	mov    eax,ecx
c001f05e:	89 f2                	mov    edx,esi
c001f060:	eb b2                	jmp    c001f014 <__moddi3+0x54>
c001f062:	66 90                	xchg   ax,ax
c001f064:	f7 d9                	neg    ecx
c001f066:	83 d3 00             	adc    ebx,0x0
c001f069:	f7 db                	neg    ebx
c001f06b:	89 de                	mov    esi,ebx
c001f06d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f075:	e9 6f ff ff ff       	jmp    c001efe9 <__moddi3+0x29>
c001f07a:	66 90                	xchg   ax,ax
c001f07c:	0f bd c7             	bsr    eax,edi
c001f07f:	83 f0 1f             	xor    eax,0x1f
c001f082:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f086:	75 24                	jne    c001f0ac <__moddi3+0xec>
c001f088:	39 f7                	cmp    edi,esi
c001f08a:	72 06                	jb     c001f092 <__moddi3+0xd2>
c001f08c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f090:	77 0c                	ja     c001f09e <__moddi3+0xde>
c001f092:	89 e9                	mov    ecx,ebp
c001f094:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f098:	19 fe                	sbb    esi,edi
c001f09a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f09e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0a2:	89 f2                	mov    edx,esi
c001f0a4:	e9 6b ff ff ff       	jmp    c001f014 <__moddi3+0x54>
c001f0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001f0ac:	b8 20 00 00 00       	mov    eax,0x20
c001f0b1:	89 c2                	mov    edx,eax
c001f0b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f0b7:	29 da                	sub    edx,ebx
c001f0b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f0bd:	88 d9                	mov    cl,bl
c001f0bf:	d3 e7                	shl    edi,cl
c001f0c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0c5:	88 d1                	mov    cl,dl
c001f0c7:	d3 e8                	shr    eax,cl
c001f0c9:	09 c7                	or     edi,eax
c001f0cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f0cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f0d3:	89 d8                	mov    eax,ebx
c001f0d5:	88 d9                	mov    cl,bl
c001f0d7:	d3 e7                	shl    edi,cl
c001f0d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f0dd:	89 f3                	mov    ebx,esi
c001f0df:	88 d1                	mov    cl,dl
c001f0e1:	d3 eb                	shr    ebx,cl
c001f0e3:	89 c7                	mov    edi,eax
c001f0e5:	88 c1                	mov    cl,al
c001f0e7:	d3 e6                	shl    esi,cl
c001f0e9:	89 e8                	mov    eax,ebp
c001f0eb:	88 d1                	mov    cl,dl
c001f0ed:	d3 e8                	shr    eax,cl
c001f0ef:	09 f0                	or     eax,esi
c001f0f1:	89 f9                	mov    ecx,edi
c001f0f3:	d3 e5                	shl    ebp,cl
c001f0f5:	89 da                	mov    edx,ebx
c001f0f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f0fb:	89 d3                	mov    ebx,edx
c001f0fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f101:	89 c6                	mov    esi,eax
c001f103:	89 d1                	mov    ecx,edx
c001f105:	39 d3                	cmp    ebx,edx
c001f107:	72 27                	jb     c001f130 <__moddi3+0x170>
c001f109:	74 21                	je     c001f12c <__moddi3+0x16c>
c001f10b:	29 f5                	sub    ebp,esi
c001f10d:	19 cb                	sbb    ebx,ecx
c001f10f:	89 de                	mov    esi,ebx
c001f111:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f115:	d3 e6                	shl    esi,cl
c001f117:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f11b:	89 f9                	mov    ecx,edi
c001f11d:	d3 ed                	shr    ebp,cl
c001f11f:	09 ee                	or     esi,ebp
c001f121:	89 f0                	mov    eax,esi
c001f123:	d3 eb                	shr    ebx,cl
c001f125:	89 da                	mov    edx,ebx
c001f127:	e9 e8 fe ff ff       	jmp    c001f014 <__moddi3+0x54>
c001f12c:	39 c5                	cmp    ebp,eax
c001f12e:	73 db                	jae    c001f10b <__moddi3+0x14b>
c001f130:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f134:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f138:	89 d1                	mov    ecx,edx
c001f13a:	89 c6                	mov    esi,eax
c001f13c:	eb cd                	jmp    c001f10b <__moddi3+0x14b>
c001f13e:	66 90                	xchg   ax,ax

c001f140 <__udivdi3>:
c001f140:	55                   	push   ebp
c001f141:	57                   	push   edi
c001f142:	56                   	push   esi
c001f143:	53                   	push   ebx
c001f144:	83 ec 1c             	sub    esp,0x1c
c001f147:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f14b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f14f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f153:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f157:	85 d2                	test   edx,edx
c001f159:	75 41                	jne    c001f19c <__udivdi3+0x5c>
c001f15b:	39 f7                	cmp    edi,esi
c001f15d:	76 15                	jbe    c001f174 <__udivdi3+0x34>
c001f15f:	89 e8                	mov    eax,ebp
c001f161:	89 f2                	mov    edx,esi
c001f163:	f7 f7                	div    edi
c001f165:	31 db                	xor    ebx,ebx
c001f167:	89 da                	mov    edx,ebx
c001f169:	83 c4 1c             	add    esp,0x1c
c001f16c:	5b                   	pop    ebx
c001f16d:	5e                   	pop    esi
c001f16e:	5f                   	pop    edi
c001f16f:	5d                   	pop    ebp
c001f170:	c3                   	ret    
c001f171:	8d 76 00             	lea    esi,[esi+0x0]
c001f174:	89 f9                	mov    ecx,edi
c001f176:	85 ff                	test   edi,edi
c001f178:	75 0b                	jne    c001f185 <__udivdi3+0x45>
c001f17a:	b8 01 00 00 00       	mov    eax,0x1
c001f17f:	31 d2                	xor    edx,edx
c001f181:	f7 f7                	div    edi
c001f183:	89 c1                	mov    ecx,eax
c001f185:	31 d2                	xor    edx,edx
c001f187:	89 f0                	mov    eax,esi
c001f189:	f7 f1                	div    ecx
c001f18b:	89 c3                	mov    ebx,eax
c001f18d:	89 e8                	mov    eax,ebp
c001f18f:	f7 f1                	div    ecx
c001f191:	89 da                	mov    edx,ebx
c001f193:	83 c4 1c             	add    esp,0x1c
c001f196:	5b                   	pop    ebx
c001f197:	5e                   	pop    esi
c001f198:	5f                   	pop    edi
c001f199:	5d                   	pop    ebp
c001f19a:	c3                   	ret    
c001f19b:	90                   	nop
c001f19c:	39 f2                	cmp    edx,esi
c001f19e:	77 1c                	ja     c001f1bc <__udivdi3+0x7c>
c001f1a0:	0f bd da             	bsr    ebx,edx
c001f1a3:	83 f3 1f             	xor    ebx,0x1f
c001f1a6:	75 24                	jne    c001f1cc <__udivdi3+0x8c>
c001f1a8:	39 f2                	cmp    edx,esi
c001f1aa:	72 08                	jb     c001f1b4 <__udivdi3+0x74>
c001f1ac:	39 ef                	cmp    edi,ebp
c001f1ae:	0f 87 84 00 00 00    	ja     c001f238 <__udivdi3+0xf8>
c001f1b4:	b8 01 00 00 00       	mov    eax,0x1
c001f1b9:	eb ac                	jmp    c001f167 <__udivdi3+0x27>
c001f1bb:	90                   	nop
c001f1bc:	31 db                	xor    ebx,ebx
c001f1be:	31 c0                	xor    eax,eax
c001f1c0:	89 da                	mov    edx,ebx
c001f1c2:	83 c4 1c             	add    esp,0x1c
c001f1c5:	5b                   	pop    ebx
c001f1c6:	5e                   	pop    esi
c001f1c7:	5f                   	pop    edi
c001f1c8:	5d                   	pop    ebp
c001f1c9:	c3                   	ret    
c001f1ca:	66 90                	xchg   ax,ax
c001f1cc:	b8 20 00 00 00       	mov    eax,0x20
c001f1d1:	29 d8                	sub    eax,ebx
c001f1d3:	88 d9                	mov    cl,bl
c001f1d5:	d3 e2                	shl    edx,cl
c001f1d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f1db:	89 fa                	mov    edx,edi
c001f1dd:	88 c1                	mov    cl,al
c001f1df:	d3 ea                	shr    edx,cl
c001f1e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1e5:	09 d1                	or     ecx,edx
c001f1e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f1eb:	88 d9                	mov    cl,bl
c001f1ed:	d3 e7                	shl    edi,cl
c001f1ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f1f3:	89 f7                	mov    edi,esi
c001f1f5:	88 c1                	mov    cl,al
c001f1f7:	d3 ef                	shr    edi,cl
c001f1f9:	88 d9                	mov    cl,bl
c001f1fb:	d3 e6                	shl    esi,cl
c001f1fd:	89 ea                	mov    edx,ebp
c001f1ff:	88 c1                	mov    cl,al
c001f201:	d3 ea                	shr    edx,cl
c001f203:	09 d6                	or     esi,edx
c001f205:	89 f0                	mov    eax,esi
c001f207:	89 fa                	mov    edx,edi
c001f209:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f20d:	89 d7                	mov    edi,edx
c001f20f:	89 c6                	mov    esi,eax
c001f211:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f215:	39 d7                	cmp    edi,edx
c001f217:	72 13                	jb     c001f22c <__udivdi3+0xec>
c001f219:	74 09                	je     c001f224 <__udivdi3+0xe4>
c001f21b:	89 f0                	mov    eax,esi
c001f21d:	31 db                	xor    ebx,ebx
c001f21f:	e9 43 ff ff ff       	jmp    c001f167 <__udivdi3+0x27>
c001f224:	88 d9                	mov    cl,bl
c001f226:	d3 e5                	shl    ebp,cl
c001f228:	39 c5                	cmp    ebp,eax
c001f22a:	73 ef                	jae    c001f21b <__udivdi3+0xdb>
c001f22c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f22f:	31 db                	xor    ebx,ebx
c001f231:	e9 31 ff ff ff       	jmp    c001f167 <__udivdi3+0x27>
c001f236:	66 90                	xchg   ax,ax
c001f238:	31 c0                	xor    eax,eax
c001f23a:	e9 28 ff ff ff       	jmp    c001f167 <__udivdi3+0x27>
c001f23f:	90                   	nop

c001f240 <__umoddi3>:
c001f240:	55                   	push   ebp
c001f241:	57                   	push   edi
c001f242:	56                   	push   esi
c001f243:	53                   	push   ebx
c001f244:	83 ec 1c             	sub    esp,0x1c
c001f247:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f24b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f24f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f253:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f257:	89 da                	mov    edx,ebx
c001f259:	85 c0                	test   eax,eax
c001f25b:	75 37                	jne    c001f294 <__umoddi3+0x54>
c001f25d:	39 df                	cmp    edi,ebx
c001f25f:	76 13                	jbe    c001f274 <__umoddi3+0x34>
c001f261:	89 f0                	mov    eax,esi
c001f263:	f7 f7                	div    edi
c001f265:	89 d0                	mov    eax,edx
c001f267:	31 d2                	xor    edx,edx
c001f269:	83 c4 1c             	add    esp,0x1c
c001f26c:	5b                   	pop    ebx
c001f26d:	5e                   	pop    esi
c001f26e:	5f                   	pop    edi
c001f26f:	5d                   	pop    ebp
c001f270:	c3                   	ret    
c001f271:	8d 76 00             	lea    esi,[esi+0x0]
c001f274:	89 fd                	mov    ebp,edi
c001f276:	85 ff                	test   edi,edi
c001f278:	75 0b                	jne    c001f285 <__umoddi3+0x45>
c001f27a:	b8 01 00 00 00       	mov    eax,0x1
c001f27f:	31 d2                	xor    edx,edx
c001f281:	f7 f7                	div    edi
c001f283:	89 c5                	mov    ebp,eax
c001f285:	89 d8                	mov    eax,ebx
c001f287:	31 d2                	xor    edx,edx
c001f289:	f7 f5                	div    ebp
c001f28b:	89 f0                	mov    eax,esi
c001f28d:	f7 f5                	div    ebp
c001f28f:	89 d0                	mov    eax,edx
c001f291:	eb d4                	jmp    c001f267 <__umoddi3+0x27>
c001f293:	90                   	nop
c001f294:	89 f1                	mov    ecx,esi
c001f296:	39 d8                	cmp    eax,ebx
c001f298:	76 0a                	jbe    c001f2a4 <__umoddi3+0x64>
c001f29a:	89 f0                	mov    eax,esi
c001f29c:	83 c4 1c             	add    esp,0x1c
c001f29f:	5b                   	pop    ebx
c001f2a0:	5e                   	pop    esi
c001f2a1:	5f                   	pop    edi
c001f2a2:	5d                   	pop    ebp
c001f2a3:	c3                   	ret    
c001f2a4:	0f bd e8             	bsr    ebp,eax
c001f2a7:	83 f5 1f             	xor    ebp,0x1f
c001f2aa:	75 1c                	jne    c001f2c8 <__umoddi3+0x88>
c001f2ac:	39 d8                	cmp    eax,ebx
c001f2ae:	72 04                	jb     c001f2b4 <__umoddi3+0x74>
c001f2b0:	39 f7                	cmp    edi,esi
c001f2b2:	77 08                	ja     c001f2bc <__umoddi3+0x7c>
c001f2b4:	89 da                	mov    edx,ebx
c001f2b6:	29 fe                	sub    esi,edi
c001f2b8:	19 c2                	sbb    edx,eax
c001f2ba:	89 f1                	mov    ecx,esi
c001f2bc:	89 c8                	mov    eax,ecx
c001f2be:	83 c4 1c             	add    esp,0x1c
c001f2c1:	5b                   	pop    ebx
c001f2c2:	5e                   	pop    esi
c001f2c3:	5f                   	pop    edi
c001f2c4:	5d                   	pop    ebp
c001f2c5:	c3                   	ret    
c001f2c6:	66 90                	xchg   ax,ax
c001f2c8:	ba 20 00 00 00       	mov    edx,0x20
c001f2cd:	29 ea                	sub    edx,ebp
c001f2cf:	89 e9                	mov    ecx,ebp
c001f2d1:	d3 e0                	shl    eax,cl
c001f2d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2d7:	89 f8                	mov    eax,edi
c001f2d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2dd:	88 d1                	mov    cl,dl
c001f2df:	d3 e8                	shr    eax,cl
c001f2e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2e5:	09 c1                	or     ecx,eax
c001f2e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f2eb:	89 e9                	mov    ecx,ebp
c001f2ed:	d3 e7                	shl    edi,cl
c001f2ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f2f3:	89 d8                	mov    eax,ebx
c001f2f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2f9:	88 d1                	mov    cl,dl
c001f2fb:	d3 e8                	shr    eax,cl
c001f2fd:	89 c7                	mov    edi,eax
c001f2ff:	89 e9                	mov    ecx,ebp
c001f301:	d3 e3                	shl    ebx,cl
c001f303:	89 f0                	mov    eax,esi
c001f305:	88 d1                	mov    cl,dl
c001f307:	d3 e8                	shr    eax,cl
c001f309:	09 d8                	or     eax,ebx
c001f30b:	89 e9                	mov    ecx,ebp
c001f30d:	d3 e6                	shl    esi,cl
c001f30f:	89 f3                	mov    ebx,esi
c001f311:	89 fa                	mov    edx,edi
c001f313:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f317:	89 d1                	mov    ecx,edx
c001f319:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f31d:	89 c6                	mov    esi,eax
c001f31f:	89 d7                	mov    edi,edx
c001f321:	39 d1                	cmp    ecx,edx
c001f323:	72 27                	jb     c001f34c <__umoddi3+0x10c>
c001f325:	74 21                	je     c001f348 <__umoddi3+0x108>
c001f327:	89 ca                	mov    edx,ecx
c001f329:	29 f3                	sub    ebx,esi
c001f32b:	19 fa                	sbb    edx,edi
c001f32d:	89 d0                	mov    eax,edx
c001f32f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f333:	d3 e0                	shl    eax,cl
c001f335:	89 e9                	mov    ecx,ebp
c001f337:	d3 eb                	shr    ebx,cl
c001f339:	09 d8                	or     eax,ebx
c001f33b:	d3 ea                	shr    edx,cl
c001f33d:	83 c4 1c             	add    esp,0x1c
c001f340:	5b                   	pop    ebx
c001f341:	5e                   	pop    esi
c001f342:	5f                   	pop    edi
c001f343:	5d                   	pop    ebp
c001f344:	c3                   	ret    
c001f345:	8d 76 00             	lea    esi,[esi+0x0]
c001f348:	39 c3                	cmp    ebx,eax
c001f34a:	73 db                	jae    c001f327 <__umoddi3+0xe7>
c001f34c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f350:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f354:	89 d7                	mov    edi,edx
c001f356:	89 c6                	mov    esi,eax
c001f358:	eb cd                	jmp    c001f327 <__umoddi3+0xe7>

Disassembly of section .init:

c001f35a <_init>:
c001f35a:	55                   	push   ebp
c001f35b:	89 e5                	mov    ebp,esp
c001f35d:	e8 92 0d fe ff       	call   c00000f4 <frame_dummy>
c001f362:	e8 e5 fa ff ff       	call   c001ee4c <__do_global_ctors_aux>
c001f367:	5d                   	pop    ebp
c001f368:	c3                   	ret    

Disassembly of section .fini:

c001f369 <_fini>:
c001f369:	55                   	push   ebp
c001f36a:	89 e5                	mov    ebp,esp
c001f36c:	e8 13 0d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f371:	5d                   	pop    ebp
c001f372:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f374 <Computer::~Computer()>:
c001f374:	83 ec 0c             	sub    esp,0xc
c001f377:	ba 94 06 02 c0       	mov    edx,0xc0020694
c001f37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f380:	89 10                	mov    DWORD PTR [eax],edx
c001f382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f386:	83 ec 0c             	sub    esp,0xc
c001f389:	50                   	push   eax
c001f38a:	e8 75 d1 fe ff       	call   c000c504 <Device::~Device()>
c001f38f:	83 c4 10             	add    esp,0x10
c001f392:	90                   	nop
c001f393:	83 c4 0c             	add    esp,0xc
c001f396:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f398 <Computer::~Computer()>:
c001f398:	83 ec 0c             	sub    esp,0xc
c001f39b:	83 ec 0c             	sub    esp,0xc
c001f39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3a2:	e8 cd ff ff ff       	call   c001f374 <Computer::~Computer()>
c001f3a7:	83 c4 10             	add    esp,0x10
c001f3aa:	83 ec 08             	sub    esp,0x8
c001f3ad:	68 70 01 00 00       	push   0x170
c001f3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3b6:	e8 5d b4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f3bb:	83 c4 10             	add    esp,0x10
c001f3be:	83 c4 0c             	add    esp,0xc
c001f3c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f3c2 <idleCommon()>:
c001f3c2:	83 ec 0c             	sub    esp,0xc
c001f3c5:	fa                   	cli    
c001f3c6:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001f3cc:	e8 fb 66 ff ff       	call   c0015acc <schedule()>
c001f3d1:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001f3d6:	48                   	dec    eax
c001f3d7:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001f3dc:	75 01                	jne    c001f3df <idleCommon()+0x1d>
c001f3de:	fb                   	sti    
c001f3df:	83 c4 0c             	add    esp,0xc
c001f3e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f3e4 <LinkedList<UnixFile>::~LinkedList()>:
c001f3e4:	90                   	nop
c001f3e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f3e6 <LinkedList<UnixFile>::LinkedList()>:
c001f3e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f3f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f40a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f414:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f41b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f41f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f426:	90                   	nop
c001f427:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f428 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f428:	83 ec 0c             	sub    esp,0xc
c001f42b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f430:	75 10                	jne    c001f442 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f432:	83 ec 0c             	sub    esp,0xc
c001f435:	68 a8 08 02 c0       	push   0xc00208a8
c001f43a:	e8 ce 1d ff ff       	call   c001120d <KePanic(char const*)>
c001f43f:	83 c4 10             	add    esp,0x10
c001f442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f446:	8b 00                	mov    eax,DWORD PTR [eax]
c001f448:	85 c0                	test   eax,eax
c001f44a:	74 34                	je     c001f480 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f450:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f453:	85 c0                	test   eax,eax
c001f455:	74 29                	je     c001f480 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f45b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f45e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f462:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f469:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f46d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f474:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f477:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f47e:	eb 65                	jmp    c001f4e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f484:	8b 00                	mov    eax,DWORD PTR [eax]
c001f486:	85 c0                	test   eax,eax
c001f488:	75 4b                	jne    c001f4d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f48e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f491:	85 c0                	test   eax,eax
c001f493:	75 40                	jne    c001f4d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f499:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f49d:	89 10                	mov    DWORD PTR [eax],edx
c001f49f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4bf:	85 c0                	test   eax,eax
c001f4c1:	74 22                	je     c001f4e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4c3:	83 ec 0c             	sub    esp,0xc
c001f4c6:	68 ca 08 02 c0       	push   0xc00208ca
c001f4cb:	e8 3d 1d ff ff       	call   c001120d <KePanic(char const*)>
c001f4d0:	83 c4 10             	add    esp,0x10
c001f4d3:	eb 10                	jmp    c001f4e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4d5:	83 ec 0c             	sub    esp,0xc
c001f4d8:	68 d4 08 02 c0       	push   0xc00208d4
c001f4dd:	e8 2b 1d ff ff       	call   c001120d <KePanic(char const*)>
c001f4e2:	83 c4 10             	add    esp,0x10
c001f4e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4ec:	8d 50 01             	lea    edx,[eax+0x1]
c001f4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4f6:	90                   	nop
c001f4f7:	83 c4 0c             	add    esp,0xc
c001f4fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f4fc <LinkedList<UnixFile>::getFirstElement()>:
c001f4fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f500:	8b 00                	mov    eax,DWORD PTR [eax]
c001f502:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f504 <LinkedList<UnixFile>::removeFirst()>:
c001f504:	83 ec 0c             	sub    esp,0xc
c001f507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f50b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f50d:	85 c0                	test   eax,eax
c001f50f:	75 12                	jne    c001f523 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f511:	83 ec 0c             	sub    esp,0xc
c001f514:	68 e0 08 02 c0       	push   0xc00208e0
c001f519:	e8 ef 1c ff ff       	call   c001120d <KePanic(char const*)>
c001f51e:	83 c4 10             	add    esp,0x10
c001f521:	eb 7e                	jmp    c001f5a1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f527:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f52a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f52d:	85 c0                	test   eax,eax
c001f52f:	74 10                	je     c001f541 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f531:	83 ec 0c             	sub    esp,0xc
c001f534:	68 2b 09 02 c0       	push   0xc002092b
c001f539:	e8 cf 1c ff ff       	call   c001120d <KePanic(char const*)>
c001f53e:	83 c4 10             	add    esp,0x10
c001f541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f545:	8b 00                	mov    eax,DWORD PTR [eax]
c001f547:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f54a:	85 c0                	test   eax,eax
c001f54c:	75 33                	jne    c001f581 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f552:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f567:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f56a:	83 f8 01             	cmp    eax,0x1
c001f56d:	74 21                	je     c001f590 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f56f:	83 ec 0c             	sub    esp,0xc
c001f572:	68 04 09 02 c0       	push   0xc0020904
c001f577:	e8 91 1c ff ff       	call   c001120d <KePanic(char const*)>
c001f57c:	83 c4 10             	add    esp,0x10
c001f57f:	eb 0f                	jmp    c001f590 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f585:	8b 00                	mov    eax,DWORD PTR [eax]
c001f587:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58e:	89 10                	mov    DWORD PTR [eax],edx
c001f590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f594:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f597:	8d 50 ff             	lea    edx,[eax-0x1]
c001f59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f59e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5a1:	83 c4 0c             	add    esp,0xc
c001f5a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f5a6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f5a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5ad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f5ae <DriverlessDevice::~DriverlessDevice()>:
c001f5ae:	ba 5c 14 02 c0       	mov    edx,0xc002145c
c001f5b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5b7:	89 10                	mov    DWORD PTR [eax],edx
c001f5b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5bd:	50                   	push   eax
c001f5be:	e8 41 cf fe ff       	call   c000c504 <Device::~Device()>
c001f5c3:	83 c4 04             	add    esp,0x4
c001f5c6:	90                   	nop
c001f5c7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f5c8 <DriverlessDevice::~DriverlessDevice()>:
c001f5c8:	83 ec 0c             	sub    esp,0xc
c001f5cb:	83 ec 0c             	sub    esp,0xc
c001f5ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5d2:	e8 d7 ff ff ff       	call   c001f5ae <DriverlessDevice::~DriverlessDevice()>
c001f5d7:	83 c4 10             	add    esp,0x10
c001f5da:	83 ec 08             	sub    esp,0x8
c001f5dd:	68 58 01 00 00       	push   0x158
c001f5e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5e6:	e8 2d b2 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f5eb:	83 c4 10             	add    esp,0x10
c001f5ee:	83 c4 0c             	add    esp,0xc
c001f5f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f5f2 <LinkedList<Device>::addElement(Device*)>:
c001f5f2:	83 ec 0c             	sub    esp,0xc
c001f5f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f5fa:	75 10                	jne    c001f60c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f5fc:	83 ec 0c             	sub    esp,0xc
c001f5ff:	68 a8 08 02 c0       	push   0xc00208a8
c001f604:	e8 04 1c ff ff       	call   c001120d <KePanic(char const*)>
c001f609:	83 c4 10             	add    esp,0x10
c001f60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f610:	8b 00                	mov    eax,DWORD PTR [eax]
c001f612:	85 c0                	test   eax,eax
c001f614:	74 3a                	je     c001f650 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f61a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f61d:	85 c0                	test   eax,eax
c001f61f:	74 2f                	je     c001f650 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f625:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f628:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f62c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f636:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f63a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f63d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f641:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f644:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f64e:	eb 68                	jmp    c001f6b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f654:	8b 00                	mov    eax,DWORD PTR [eax]
c001f656:	85 c0                	test   eax,eax
c001f658:	75 4e                	jne    c001f6a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f65e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f661:	85 c0                	test   eax,eax
c001f663:	75 43                	jne    c001f6a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f66d:	89 10                	mov    DWORD PTR [eax],edx
c001f66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f673:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f677:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f67e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f681:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f68b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f68f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f692:	85 c0                	test   eax,eax
c001f694:	74 22                	je     c001f6b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f696:	83 ec 0c             	sub    esp,0xc
c001f699:	68 ca 08 02 c0       	push   0xc00208ca
c001f69e:	e8 6a 1b ff ff       	call   c001120d <KePanic(char const*)>
c001f6a3:	83 c4 10             	add    esp,0x10
c001f6a6:	eb 10                	jmp    c001f6b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6a8:	83 ec 0c             	sub    esp,0xc
c001f6ab:	68 d4 08 02 c0       	push   0xc00208d4
c001f6b0:	e8 58 1b ff ff       	call   c001120d <KePanic(char const*)>
c001f6b5:	83 c4 10             	add    esp,0x10
c001f6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6bf:	8d 50 01             	lea    edx,[eax+0x1]
c001f6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6c9:	90                   	nop
c001f6ca:	83 c4 0c             	add    esp,0xc
c001f6cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f6ce <LinkedList<Device>::LinkedList()>:
c001f6ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f707:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f70e:	90                   	nop
c001f70f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f714:	8b 00                	mov    eax,DWORD PTR [eax]
c001f716:	85 c0                	test   eax,eax
c001f718:	75 0e                	jne    c001f728 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f71a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f71e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f721:	85 c0                	test   eax,eax
c001f723:	75 03                	jne    c001f728 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f725:	b0 01                	mov    al,0x1
c001f727:	c3                   	ret    
c001f728:	b0 00                	mov    al,0x0
c001f72a:	90                   	nop
c001f72b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f72c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f730:	8b 00                	mov    eax,DWORD PTR [eax]
c001f732:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f734:	83 ec 0c             	sub    esp,0xc
c001f737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f73b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f73d:	85 c0                	test   eax,eax
c001f73f:	75 17                	jne    c001f758 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f741:	83 ec 0c             	sub    esp,0xc
c001f744:	68 e0 08 02 c0       	push   0xc00208e0
c001f749:	e8 bf 1a ff ff       	call   c001120d <KePanic(char const*)>
c001f74e:	83 c4 10             	add    esp,0x10
c001f751:	e9 96 00 00 00       	jmp    c001f7ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f756:	66 90                	xchg   ax,ax
c001f758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f75c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f75f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f762:	85 c0                	test   eax,eax
c001f764:	0f 95 c0             	setne  al
c001f767:	0f b6 c0             	movzx  eax,al
c001f76a:	85 c0                	test   eax,eax
c001f76c:	74 12                	je     c001f780 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f76e:	83 ec 0c             	sub    esp,0xc
c001f771:	68 2b 09 02 c0       	push   0xc002092b
c001f776:	e8 92 1a ff ff       	call   c001120d <KePanic(char const*)>
c001f77b:	83 c4 10             	add    esp,0x10
c001f77e:	66 90                	xchg   ax,ax
c001f780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f784:	8b 00                	mov    eax,DWORD PTR [eax]
c001f786:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f789:	85 c0                	test   eax,eax
c001f78b:	0f 94 c0             	sete   al
c001f78e:	0f b6 c0             	movzx  eax,al
c001f791:	85 c0                	test   eax,eax
c001f793:	74 33                	je     c001f7c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f799:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7b1:	83 f8 01             	cmp    eax,0x1
c001f7b4:	74 22                	je     c001f7d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f7b6:	83 ec 0c             	sub    esp,0xc
c001f7b9:	68 04 09 02 c0       	push   0xc0020904
c001f7be:	e8 4a 1a ff ff       	call   c001120d <KePanic(char const*)>
c001f7c3:	83 c4 10             	add    esp,0x10
c001f7c6:	eb 10                	jmp    c001f7d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7ce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d5:	89 10                	mov    DWORD PTR [eax],edx
c001f7d7:	90                   	nop
c001f7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7df:	8d 50 ff             	lea    edx,[eax-0x1]
c001f7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7e9:	8d 76 00             	lea    esi,[esi+0x0]
c001f7ec:	83 c4 0c             	add    esp,0xc
c001f7ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f7f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f7f0:	83 ec 0c             	sub    esp,0xc
c001f7f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f7f8:	75 12                	jne    c001f80c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f7fa:	83 ec 0c             	sub    esp,0xc
c001f7fd:	68 a8 08 02 c0       	push   0xc00208a8
c001f802:	e8 06 1a ff ff       	call   c001120d <KePanic(char const*)>
c001f807:	83 c4 10             	add    esp,0x10
c001f80a:	66 90                	xchg   ax,ax
c001f80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f810:	8b 00                	mov    eax,DWORD PTR [eax]
c001f812:	85 c0                	test   eax,eax
c001f814:	74 36                	je     c001f84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f81d:	85 c0                	test   eax,eax
c001f81f:	74 2b                	je     c001f84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f825:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f828:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f82c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f833:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f837:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f841:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f848:	eb 6a                	jmp    c001f8b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f84a:	66 90                	xchg   ax,ax
c001f84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f850:	8b 00                	mov    eax,DWORD PTR [eax]
c001f852:	85 c0                	test   eax,eax
c001f854:	75 4e                	jne    c001f8a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f85d:	85 c0                	test   eax,eax
c001f85f:	75 43                	jne    c001f8a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f865:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f869:	89 10                	mov    DWORD PTR [eax],edx
c001f86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f873:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f87d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f888:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f88b:	85 c0                	test   eax,eax
c001f88d:	74 25                	je     c001f8b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f88f:	83 ec 0c             	sub    esp,0xc
c001f892:	68 ca 08 02 c0       	push   0xc00208ca
c001f897:	e8 71 19 ff ff       	call   c001120d <KePanic(char const*)>
c001f89c:	83 c4 10             	add    esp,0x10
c001f89f:	eb 13                	jmp    c001f8b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001f8a4:	83 ec 0c             	sub    esp,0xc
c001f8a7:	68 d4 08 02 c0       	push   0xc00208d4
c001f8ac:	e8 5c 19 ff ff       	call   c001120d <KePanic(char const*)>
c001f8b1:	83 c4 10             	add    esp,0x10
c001f8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8bb:	8d 50 01             	lea    edx,[eax+0x1]
c001f8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8c5:	90                   	nop
c001f8c6:	83 c4 0c             	add    esp,0xc
c001f8c9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f8cc <ACPI::~ACPI()>:
c001f8cc:	83 ec 0c             	sub    esp,0xc
c001f8cf:	ba 44 1a 02 c0       	mov    edx,0xc0021a44
c001f8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d8:	89 10                	mov    DWORD PTR [eax],edx
c001f8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8de:	83 ec 0c             	sub    esp,0xc
c001f8e1:	50                   	push   eax
c001f8e2:	e8 1d cc fe ff       	call   c000c504 <Device::~Device()>
c001f8e7:	83 c4 10             	add    esp,0x10
c001f8ea:	90                   	nop
c001f8eb:	83 c4 0c             	add    esp,0xc
c001f8ee:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f8f0 <ACPI::~ACPI()>:
c001f8f0:	83 ec 0c             	sub    esp,0xc
c001f8f3:	83 ec 0c             	sub    esp,0xc
c001f8f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8fa:	e8 cd ff ff ff       	call   c001f8cc <ACPI::~ACPI()>
c001f8ff:	83 c4 10             	add    esp,0x10
c001f902:	83 ec 08             	sub    esp,0x8
c001f905:	68 64 12 00 00       	push   0x1264
c001f90a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f90e:	e8 05 af fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f913:	83 c4 10             	add    esp,0x10
c001f916:	83 c4 0c             	add    esp,0xc
c001f919:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f91c <LinkedList<Device>::~LinkedList()>:
c001f91c:	90                   	nop
c001f91d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f920 <LinkedList<Device>::isEmpty()>:
c001f920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f924:	8b 00                	mov    eax,DWORD PTR [eax]
c001f926:	85 c0                	test   eax,eax
c001f928:	75 0e                	jne    c001f938 <LinkedList<Device>::isEmpty()+0x18>
c001f92a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f92e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f931:	85 c0                	test   eax,eax
c001f933:	75 03                	jne    c001f938 <LinkedList<Device>::isEmpty()+0x18>
c001f935:	b0 01                	mov    al,0x1
c001f937:	c3                   	ret    
c001f938:	b0 00                	mov    al,0x0
c001f93a:	90                   	nop
c001f93b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f93c <LinkedList<Device>::getFirstElement()>:
c001f93c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f940:	8b 00                	mov    eax,DWORD PTR [eax]
c001f942:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f944 <LinkedList<Device>::removeFirst()>:
c001f944:	83 ec 0c             	sub    esp,0xc
c001f947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f94d:	85 c0                	test   eax,eax
c001f94f:	75 17                	jne    c001f968 <LinkedList<Device>::removeFirst()+0x24>
c001f951:	83 ec 0c             	sub    esp,0xc
c001f954:	68 e0 08 02 c0       	push   0xc00208e0
c001f959:	e8 af 18 ff ff       	call   c001120d <KePanic(char const*)>
c001f95e:	83 c4 10             	add    esp,0x10
c001f961:	e9 92 00 00 00       	jmp    c001f9f8 <LinkedList<Device>::removeFirst()+0xb4>
c001f966:	66 90                	xchg   ax,ax
c001f968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f96f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f975:	85 c0                	test   eax,eax
c001f977:	74 13                	je     c001f98c <LinkedList<Device>::removeFirst()+0x48>
c001f979:	83 ec 0c             	sub    esp,0xc
c001f97c:	68 2b 09 02 c0       	push   0xc002092b
c001f981:	e8 87 18 ff ff       	call   c001120d <KePanic(char const*)>
c001f986:	83 c4 10             	add    esp,0x10
c001f989:	8d 76 00             	lea    esi,[esi+0x0]
c001f98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f990:	8b 00                	mov    eax,DWORD PTR [eax]
c001f992:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f998:	85 c0                	test   eax,eax
c001f99a:	75 34                	jne    c001f9d0 <LinkedList<Device>::removeFirst()+0x8c>
c001f99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9b8:	83 f8 01             	cmp    eax,0x1
c001f9bb:	74 27                	je     c001f9e4 <LinkedList<Device>::removeFirst()+0xa0>
c001f9bd:	83 ec 0c             	sub    esp,0xc
c001f9c0:	68 04 09 02 c0       	push   0xc0020904
c001f9c5:	e8 43 18 ff ff       	call   c001120d <KePanic(char const*)>
c001f9ca:	83 c4 10             	add    esp,0x10
c001f9cd:	eb 15                	jmp    c001f9e4 <LinkedList<Device>::removeFirst()+0xa0>
c001f9cf:	90                   	nop
c001f9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9d6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e0:	89 10                	mov    DWORD PTR [eax],edx
c001f9e2:	66 90                	xchg   ax,ax
c001f9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9eb:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9f8:	83 c4 0c             	add    esp,0xc
c001f9fb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f9fc <CPU::~CPU()>:
c001f9fc:	83 ec 0c             	sub    esp,0xc
c001f9ff:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c001fa04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa08:	89 10                	mov    DWORD PTR [eax],edx
c001fa0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0e:	83 ec 0c             	sub    esp,0xc
c001fa11:	50                   	push   eax
c001fa12:	e8 ed ca fe ff       	call   c000c504 <Device::~Device()>
c001fa17:	83 c4 10             	add    esp,0x10
c001fa1a:	90                   	nop
c001fa1b:	83 c4 0c             	add    esp,0xc
c001fa1e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa20 <CPU::~CPU()>:
c001fa20:	83 ec 0c             	sub    esp,0xc
c001fa23:	83 ec 0c             	sub    esp,0xc
c001fa26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa2a:	e8 cd ff ff ff       	call   c001f9fc <CPU::~CPU()>
c001fa2f:	83 c4 10             	add    esp,0x10
c001fa32:	83 ec 08             	sub    esp,0x8
c001fa35:	68 94 11 00 00       	push   0x1194
c001fa3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa3e:	e8 d5 ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fa43:	83 c4 10             	add    esp,0x10
c001fa46:	83 c4 0c             	add    esp,0xc
c001fa49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fa4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fa4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fa54 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fa54:	90                   	nop
c001fa55:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fa58 <ThreadControlBlock::ThreadControlBlock()>:
c001fa58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa5c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa67:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fa6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa72:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fa79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa7d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fa84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa88:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fa8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa93:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fa97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa9b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fa9f:	90                   	nop
c001faa0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001faa4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001faa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fabd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001face:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fadd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fae4:	90                   	nop
c001fae5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fae6 <PCI::~PCI()>:
c001fae6:	83 ec 0c             	sub    esp,0xc
c001fae9:	ba a8 2a 02 c0       	mov    edx,0xc0022aa8
c001faee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf2:	89 10                	mov    DWORD PTR [eax],edx
c001faf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf8:	83 ec 0c             	sub    esp,0xc
c001fafb:	50                   	push   eax
c001fafc:	e8 9b c4 fe ff       	call   c000bf9c <Bus::~Bus()>
c001fb01:	83 c4 10             	add    esp,0x10
c001fb04:	90                   	nop
c001fb05:	83 c4 0c             	add    esp,0xc
c001fb08:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fb0a <PCI::~PCI()>:
c001fb0a:	83 ec 0c             	sub    esp,0xc
c001fb0d:	83 ec 0c             	sub    esp,0xc
c001fb10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb14:	e8 cd ff ff ff       	call   c001fae6 <PCI::~PCI()>
c001fb19:	83 c4 10             	add    esp,0x10
c001fb1c:	83 ec 08             	sub    esp,0x8
c001fb1f:	68 5c 01 00 00       	push   0x15c
c001fb24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb28:	e8 eb ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb2d:	83 c4 10             	add    esp,0x10
c001fb30:	83 c4 0c             	add    esp,0xc
c001fb33:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fb34 <IDE::~IDE()>:
c001fb34:	83 ec 0c             	sub    esp,0xc
c001fb37:	ba 5c 2b 02 c0       	mov    edx,0xc0022b5c
c001fb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb40:	89 10                	mov    DWORD PTR [eax],edx
c001fb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb46:	83 ec 0c             	sub    esp,0xc
c001fb49:	50                   	push   eax
c001fb4a:	e8 2d ce fe ff       	call   c000c97c <HardDiskController::~HardDiskController()>
c001fb4f:	83 c4 10             	add    esp,0x10
c001fb52:	90                   	nop
c001fb53:	83 c4 0c             	add    esp,0xc
c001fb56:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fb58 <IDE::~IDE()>:
c001fb58:	83 ec 0c             	sub    esp,0xc
c001fb5b:	83 ec 0c             	sub    esp,0xc
c001fb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb62:	e8 cd ff ff ff       	call   c001fb34 <IDE::~IDE()>
c001fb67:	83 c4 10             	add    esp,0x10
c001fb6a:	83 ec 08             	sub    esp,0x8
c001fb6d:	68 70 02 00 00       	push   0x270
c001fb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb76:	e8 9d ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb7b:	83 c4 10             	add    esp,0x10
c001fb7e:	83 c4 0c             	add    esp,0xc
c001fb81:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fb82 <SATABus::~SATABus()>:
c001fb82:	83 ec 0c             	sub    esp,0xc
c001fb85:	ba ac 2b 02 c0       	mov    edx,0xc0022bac
c001fb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8e:	89 10                	mov    DWORD PTR [eax],edx
c001fb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	50                   	push   eax
c001fb98:	e8 df cd fe ff       	call   c000c97c <HardDiskController::~HardDiskController()>
c001fb9d:	83 c4 10             	add    esp,0x10
c001fba0:	90                   	nop
c001fba1:	83 c4 0c             	add    esp,0xc
c001fba4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fba6 <SATABus::~SATABus()>:
c001fba6:	83 ec 0c             	sub    esp,0xc
c001fba9:	83 ec 0c             	sub    esp,0xc
c001fbac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbb0:	e8 cd ff ff ff       	call   c001fb82 <SATABus::~SATABus()>
c001fbb5:	83 c4 10             	add    esp,0x10
c001fbb8:	83 ec 08             	sub    esp,0x8
c001fbbb:	68 64 01 00 00       	push   0x164
c001fbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbc4:	e8 4f ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbc9:	83 c4 10             	add    esp,0x10
c001fbcc:	83 c4 0c             	add    esp,0xc
c001fbcf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fbd0 <ATA::~ATA()>:
c001fbd0:	83 ec 0c             	sub    esp,0xc
c001fbd3:	ba ec 2b 02 c0       	mov    edx,0xc0022bec
c001fbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbdc:	89 10                	mov    DWORD PTR [eax],edx
c001fbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe2:	83 ec 0c             	sub    esp,0xc
c001fbe5:	50                   	push   eax
c001fbe6:	e8 73 ce fe ff       	call   c000ca5e <PhysicalDisk::~PhysicalDisk()>
c001fbeb:	83 c4 10             	add    esp,0x10
c001fbee:	90                   	nop
c001fbef:	83 c4 0c             	add    esp,0xc
c001fbf2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fbf4 <ATA::~ATA()>:
c001fbf4:	83 ec 0c             	sub    esp,0xc
c001fbf7:	83 ec 0c             	sub    esp,0xc
c001fbfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbfe:	e8 cd ff ff ff       	call   c001fbd0 <ATA::~ATA()>
c001fc03:	83 c4 10             	add    esp,0x10
c001fc06:	83 ec 08             	sub    esp,0x8
c001fc09:	68 7c 01 00 00       	push   0x17c
c001fc0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc12:	e8 01 ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc17:	83 c4 10             	add    esp,0x10
c001fc1a:	83 c4 0c             	add    esp,0xc
c001fc1d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fc1e <ATAPI::~ATAPI()>:
c001fc1e:	83 ec 0c             	sub    esp,0xc
c001fc21:	ba 34 2c 02 c0       	mov    edx,0xc0022c34
c001fc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2a:	89 10                	mov    DWORD PTR [eax],edx
c001fc2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc30:	83 ec 0c             	sub    esp,0xc
c001fc33:	50                   	push   eax
c001fc34:	e8 25 ce fe ff       	call   c000ca5e <PhysicalDisk::~PhysicalDisk()>
c001fc39:	83 c4 10             	add    esp,0x10
c001fc3c:	90                   	nop
c001fc3d:	83 c4 0c             	add    esp,0xc
c001fc40:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fc42 <ATAPI::~ATAPI()>:
c001fc42:	83 ec 0c             	sub    esp,0xc
c001fc45:	83 ec 0c             	sub    esp,0xc
c001fc48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc4c:	e8 cd ff ff ff       	call   c001fc1e <ATAPI::~ATAPI()>
c001fc51:	83 c4 10             	add    esp,0x10
c001fc54:	83 ec 08             	sub    esp,0x8
c001fc57:	68 84 01 00 00       	push   0x184
c001fc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc60:	e8 b3 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc65:	83 c4 10             	add    esp,0x10
c001fc68:	83 c4 0c             	add    esp,0xc
c001fc6b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fc6c <SATA::~SATA()>:
c001fc6c:	83 ec 0c             	sub    esp,0xc
c001fc6f:	ba e8 2c 02 c0       	mov    edx,0xc0022ce8
c001fc74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc78:	89 10                	mov    DWORD PTR [eax],edx
c001fc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7e:	83 ec 0c             	sub    esp,0xc
c001fc81:	50                   	push   eax
c001fc82:	e8 d7 cd fe ff       	call   c000ca5e <PhysicalDisk::~PhysicalDisk()>
c001fc87:	83 c4 10             	add    esp,0x10
c001fc8a:	90                   	nop
c001fc8b:	83 c4 0c             	add    esp,0xc
c001fc8e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fc90 <SATA::~SATA()>:
c001fc90:	83 ec 0c             	sub    esp,0xc
c001fc93:	83 ec 0c             	sub    esp,0xc
c001fc96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc9a:	e8 cd ff ff ff       	call   c001fc6c <SATA::~SATA()>
c001fc9f:	83 c4 10             	add    esp,0x10
c001fca2:	83 ec 08             	sub    esp,0x8
c001fca5:	68 7c 01 00 00       	push   0x17c
c001fcaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcae:	e8 65 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fcb3:	83 c4 10             	add    esp,0x10
c001fcb6:	83 c4 0c             	add    esp,0xc
c001fcb9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fcba <SATAPI::~SATAPI()>:
c001fcba:	83 ec 0c             	sub    esp,0xc
c001fcbd:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c001fcc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc6:	89 10                	mov    DWORD PTR [eax],edx
c001fcc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fccc:	83 ec 0c             	sub    esp,0xc
c001fccf:	50                   	push   eax
c001fcd0:	e8 89 cd fe ff       	call   c000ca5e <PhysicalDisk::~PhysicalDisk()>
c001fcd5:	83 c4 10             	add    esp,0x10
c001fcd8:	90                   	nop
c001fcd9:	83 c4 0c             	add    esp,0xc
c001fcdc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fcde <SATAPI::~SATAPI()>:
c001fcde:	83 ec 0c             	sub    esp,0xc
c001fce1:	83 ec 0c             	sub    esp,0xc
c001fce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fce8:	e8 cd ff ff ff       	call   c001fcba <SATAPI::~SATAPI()>
c001fced:	83 c4 10             	add    esp,0x10
c001fcf0:	83 ec 08             	sub    esp,0x8
c001fcf3:	68 84 01 00 00       	push   0x184
c001fcf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcfc:	e8 17 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd01:	83 c4 10             	add    esp,0x10
c001fd04:	83 c4 0c             	add    esp,0xc
c001fd07:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fd08 <IOAPIC::~IOAPIC()>:
c001fd08:	83 ec 0c             	sub    esp,0xc
c001fd0b:	ba 4c 2e 02 c0       	mov    edx,0xc0022e4c
c001fd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd14:	89 10                	mov    DWORD PTR [eax],edx
c001fd16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1a:	83 ec 0c             	sub    esp,0xc
c001fd1d:	50                   	push   eax
c001fd1e:	e8 e1 c7 fe ff       	call   c000c504 <Device::~Device()>
c001fd23:	83 c4 10             	add    esp,0x10
c001fd26:	90                   	nop
c001fd27:	83 c4 0c             	add    esp,0xc
c001fd2a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fd2c <IOAPIC::~IOAPIC()>:
c001fd2c:	83 ec 0c             	sub    esp,0xc
c001fd2f:	83 ec 0c             	sub    esp,0xc
c001fd32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd36:	e8 cd ff ff ff       	call   c001fd08 <IOAPIC::~IOAPIC()>
c001fd3b:	83 c4 10             	add    esp,0x10
c001fd3e:	83 ec 08             	sub    esp,0x8
c001fd41:	68 68 01 00 00       	push   0x168
c001fd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd4a:	e8 c9 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd4f:	83 c4 10             	add    esp,0x10
c001fd52:	83 c4 0c             	add    esp,0xc
c001fd55:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fd58 <APICTimer::~APICTimer()>:
c001fd58:	83 ec 0c             	sub    esp,0xc
c001fd5b:	ba 94 2e 02 c0       	mov    edx,0xc0022e94
c001fd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd64:	89 10                	mov    DWORD PTR [eax],edx
c001fd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6a:	83 ec 0c             	sub    esp,0xc
c001fd6d:	50                   	push   eax
c001fd6e:	e8 5d e2 fe ff       	call   c000dfd0 <Timer::~Timer()>
c001fd73:	83 c4 10             	add    esp,0x10
c001fd76:	90                   	nop
c001fd77:	83 c4 0c             	add    esp,0xc
c001fd7a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fd7c <APICTimer::~APICTimer()>:
c001fd7c:	83 ec 0c             	sub    esp,0xc
c001fd7f:	83 ec 0c             	sub    esp,0xc
c001fd82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd86:	e8 cd ff ff ff       	call   c001fd58 <APICTimer::~APICTimer()>
c001fd8b:	83 c4 10             	add    esp,0x10
c001fd8e:	83 ec 08             	sub    esp,0x8
c001fd91:	68 60 01 00 00       	push   0x160
c001fd96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd9a:	e8 79 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd9f:	83 c4 10             	add    esp,0x10
c001fda2:	83 c4 0c             	add    esp,0xc
c001fda5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fda8 <PIT::~PIT()>:
c001fda8:	83 ec 0c             	sub    esp,0xc
c001fdab:	ba e4 2e 02 c0       	mov    edx,0xc0022ee4
c001fdb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb4:	89 10                	mov    DWORD PTR [eax],edx
c001fdb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdba:	83 ec 0c             	sub    esp,0xc
c001fdbd:	50                   	push   eax
c001fdbe:	e8 0d e2 fe ff       	call   c000dfd0 <Timer::~Timer()>
c001fdc3:	83 c4 10             	add    esp,0x10
c001fdc6:	90                   	nop
c001fdc7:	83 c4 0c             	add    esp,0xc
c001fdca:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fdcc <PIT::~PIT()>:
c001fdcc:	83 ec 0c             	sub    esp,0xc
c001fdcf:	83 ec 0c             	sub    esp,0xc
c001fdd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdd6:	e8 cd ff ff ff       	call   c001fda8 <PIT::~PIT()>
c001fddb:	83 c4 10             	add    esp,0x10
c001fdde:	83 ec 08             	sub    esp,0x8
c001fde1:	68 5c 01 00 00       	push   0x15c
c001fde6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdea:	e8 29 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fdef:	83 c4 10             	add    esp,0x10
c001fdf2:	83 c4 0c             	add    esp,0xc
c001fdf5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be f6 1c 02 c0       	mov    esi,0xc0021cf6
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 12 1d 02 c0       	mov    esi,0xc0021d12
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
