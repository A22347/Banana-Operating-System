
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 85 02 00       	call   c0028598 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 42 91 02 c0       	mov    ebx,0xc0029142
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 50 91 02 c0    	cmp    ebx,0xc0029150
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 d8 02 c0       	mov    eax,0xc002d878
c0000049:	3d 78 d8 02 c0       	cmp    eax,0xc002d878
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 d8 02 c0       	push   0xc002d878
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 d8 02 c0       	mov    eax,0xc002d878
c0000075:	2d 78 d8 02 c0       	sub    eax,0xc002d878
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 d8 02 c0       	push   0xc002d878
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 de 02 c0 00 	cmp    BYTE PTR ds:0xc002dea8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 58 91 02 c0       	mov    ebx,0xc0029158
c00000bb:	81 eb 54 91 02 c0    	sub    ebx,0xc0029154
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 54 91 02 c0       	mov    esi,0xc0029154
c00000ca:	a1 ac de 02 c0       	mov    eax,ds:0xc002deac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac de 02 c0       	mov    ds:0xc002deac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac de 02 c0       	mov    eax,ds:0xc002deac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 d8 02 c0       	push   0xc002d878
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 de 02 c0 01 	mov    BYTE PTR ds:0xc002dea8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 de 02 c0       	push   0xc002deb0
c000012c:	68 78 d8 02 c0       	push   0xc002d878
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 4b d5 01 00       	call   c001d8e6 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 b1 28 01 00       	call   c0012c64 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 29 d5 01 00       	call   c001d8e6 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 77 d9 01 00       	call   c001dd53 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 25 df 01 00       	call   c001e30a <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 f0 e2 02 c0 	lgdtd  ds:0xc002e2f0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 8e 45 01 00       	call   c0014b67 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 c8 de 02 c0       	mov    ds:0xc002dec8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 c8 de 02 c0    	mov    DWORD PTR ds:0xc002dec8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d c8 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002dec8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 60 91 02 c0 02 	test   BYTE PTR [edx-0x3ffd6ea0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 60 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6ea0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 60 91 02 c0 08 	test   BYTE PTR [edx-0x3ffd6ea0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 60 91 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6ea0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 60 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6ea0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d e0 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002dee0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d e0 de 02 c0    	mov    DWORD PTR ds:0xc002dee0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 e4 de 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd211c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 e4 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd211c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d e0 de 02 c0    	mov    DWORD PTR ds:0xc002dee0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 0c df 02 c0    	cmp    DWORD PTR ds:0xc002df0c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 1c df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df1c
c0000e60:	c7 42 0c 14 df 02 c0 	mov    DWORD PTR [edx+0xc],0xc002df14
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 1c df 02 c0    	mov    DWORD PTR ds:0xc002df1c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 0c df 02 c0    	mov    DWORD PTR ds:0xc002df0c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 e0 de 02 c0 02 	test   BYTE PTR ds:0xc002dee0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 e0 de 02 c0       	mov    eax,0xc002dee0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d e0 de 02 c0    	mov    edi,DWORD PTR ds:0xc002dee0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 e0 de 02 c0       	mov    eax,0xc002dee0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 e4 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd211c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 e4 de 02 c0 	mov    DWORD PTR [edx*4-0x3ffd211c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 14 df 02 c0 	lea    edx,[eax*8-0x3ffd20ec]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 e0 de 02 c0       	mov    eax,0xc002dee0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 20 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df20
c00011e2:	81 fb 14 df 02 c0    	cmp    ebx,0xc002df14
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 14 df 02 c0       	cmp    eax,0xc002df14
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 10 df 02 c0    	cmp    DWORD PTR ds:0xc002df10,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 1c df 02 c0       	mov    ds:0xc002df1c,eax
c000121e:	a3 20 df 02 c0       	mov    ds:0xc002df20,eax
c0001223:	a3 10 df 02 c0       	mov    ds:0xc002df10,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 14 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002df14
c0001231:	c7 40 0c 14 df 02 c0 	mov    DWORD PTR [eax+0xc],0xc002df14
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 20 df 02 c0       	mov    ds:0xc002df20,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 14 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002df14
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 d8 de 02 c0 	lea    ebp,[edx*4-0x3ffd2128]
c0001282:	8b 14 95 e0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2120]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 e0 de 02 c0 	lea    ecx,[edx*4-0x3ffd2120]
c000129d:	8b 14 95 e0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2120]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 14 e2 02 c0 	or     DWORD PTR [edi*4-0x3ffd1dec],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 14 df 02 c0 	lea    eax,[eax*8-0x3ffd20ec]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 1c df 02 c0    	mov    DWORD PTR ds:0xc002df1c,ecx
c0001357:	89 0d 20 df 02 c0    	mov    DWORD PTR ds:0xc002df20,ecx
c000135d:	c7 41 08 14 df 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002df14
c0001364:	c7 41 0c 14 df 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002df14
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 0c df 02 c0 	lea    edx,[ecx*8-0x3ffd20f4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 14 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1dec]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 14 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1dec]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 0c df 02 c0 	lea    edx,[eax*4-0x3ffd20f4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 14 e2 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1dec],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 1c df 02 c0    	mov    DWORD PTR ds:0xc002df1c,edi
c000142a:	89 3d 20 df 02 c0    	mov    DWORD PTR ds:0xc002df20,edi
c0001430:	c7 47 08 14 df 02 c0 	mov    DWORD PTR [edi+0x8],0xc002df14
c0001437:	c7 47 0c 14 df 02 c0 	mov    DWORD PTR [edi+0xc],0xc002df14
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 10 df 02 c0    	mov    DWORD PTR ds:0xc002df10,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 0c df 02 c0       	mov    eax,ds:0xc002df0c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 0c df 02 c0    	mov    DWORD PTR ds:0xc002df0c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba e0 de 02 c0       	mov    edx,0xc002dee0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d e0 de 02 c0 00 	cmp    DWORD PTR ds:0xc002dee0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 e0 de 02 c0       	mov    eax,0xc002dee0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 34 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e234
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 34 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e234,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 34 e2 02 c0    	mov    DWORD PTR ds:0xc002e234,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 0c df 02 c0    	cmp    DWORD PTR ds:0xc002df0c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 0c df 02 c0    	mov    DWORD PTR ds:0xc002df0c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d e0 de 02 c0 00 	cmp    DWORD PTR ds:0xc002dee0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 e0 de 02 c0       	mov    eax,0xc002dee0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 3c e2 02 c0    	push   DWORD PTR ds:0xc002e23c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d e0 de 02 c0 00 	cmp    DWORD PTR ds:0xc002dee0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 e0 de 02 c0       	mov    eax,0xc002dee0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 3c e2 02 c0       	mov    eax,ds:0xc002e23c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 e0 de 02 c0       	mov    eax,0xc002dee0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 0c df 02 c0 00 	cmp    DWORD PTR ds:0xc002df0c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 e0 de 02 c0       	mov    eax,0xc002dee0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 0c df 02 c0       	mov    eax,ds:0xc002df0c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 e4 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd211c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 14 df 02 c0       	mov    eax,0xc002df14
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 0c e2 02 c0       	cmp    eax,0xc002e20c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 30 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e230
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 44 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e244
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 54 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e254
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 e0 de 02 c0       	mov    eax,0xc002dee0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 64 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6d9c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 e0 de 02 c0       	mov    eax,ds:0xc002dee0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 e0 de 02 c0       	mov    ds:0xc002dee0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 34 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e234,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 c0 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce640]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 d6 f0 01 00       	jmp    c0020d02 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 c0 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce640]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 07 f1 01 00       	jmp    c0020d49 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 c0 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce640]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 2f f1 01 00       	jmp    c0020d90 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 b8 49 02 00       	call   c00268fc <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 80 93 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6c80]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 80 93 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6c80]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 80 92 02 c0       	mov    edx,0xc0029280
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba a0 93 02 c0       	mov    edx,0xc00293a0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba e8 c6 02 c0       	mov    edx,0xc002c6e8
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ac 93 02 c0       	mov    edx,0xc00293ac
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 80 e2 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1d80]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 60 e2 02 c0    	mov    ax,ds:0xc002e260
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 60 e2 02 c0    	mov    ds:0xc002e260,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 b5 37 02 00       	call   c00268fc <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 b2 93 02 c0       	mov    eax,0xc00293b2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 00 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6d00]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 bb 93 02 c0       	mov    eax,0xc00293bb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 80 93 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6c80]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 80 21 02 00       	call   c00268fc <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 90 93 02 c0       	mov    edx,0xc0029390
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 80 92 02 c0       	mov    edx,0xc0029280
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 90 92 02 c0       	mov    edx,0xc0029290
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 80 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1d80]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 80 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1d80],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 47 0b 02 00       	call   c00268fc <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 2d 0b 02 00       	call   c00268fc <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 d7 92 02 c0       	mov    eax,0xc00292d7
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 d0 92 02 c0       	mov    eax,0xc00292d0
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 80 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1d80]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be c0 92 02 c0       	mov    esi,0xc00292c0
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 70 f2 01 00       	call   c00268fc <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba a0 93 02 c0       	mov    edx,0xc00293a0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba a0 92 02 c0       	mov    edx,0xc00292a0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba b0 92 02 c0       	mov    edx,0xc00292b0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba c2 93 02 c0       	mov    edx,0xc00293c2
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba ce 93 02 c0       	mov    edx,0xc00293ce
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba e2 93 02 c0       	mov    edx,0xc00293e2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 00 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029700
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 00 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029700
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 00 95 02 c0       	mov    eax,0xc0029500
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 40 94 02 c0       	mov    eax,0xc0029440
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 00 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c00]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 c4 fb 01 00       	call   c00283cf <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 87 fb 01 00       	call   c00283b1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 5b fb 01 00       	call   c00283cf <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 0e f2 01 00       	call   c0027ad4 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 88 fc 01 00       	call   c0028560 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 d5 fa 01 00       	call   c00283cf <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 17 fa 01 00       	call   c00283cf <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 e4 f9 01 00       	call   c00283b1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 d1 f8 01 00       	call   c00283cf <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 99 f8 01 00       	call   c00283b1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 00 98 02 c0       	mov    eax,0xc0029800
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 a5 f6 01 00       	call   c00283cf <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 6a f6 01 00       	call   c00283b1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 60 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63a0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 7a f3 01 00       	call   c0028163 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 f8 ec 01 00       	call   c0027b00 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 b4 f5 01 00       	call   c00283d3 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 a2 f6 01 00       	call   c00284f7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 8c ec 01 00       	call   c0027b00 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 37 f5 01 00       	call   c00283cd <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 18 f5 01 00       	call   c00283d1 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 a6 f6 01 00       	call   c0028580 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 58 f2 01 00       	call   c0028163 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 d6 eb 01 00       	call   c0027b00 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 92 f4 01 00       	call   c00283d3 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 80 f5 01 00       	call   c00284f7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 6a eb 01 00       	call   c0027b00 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 15 f4 01 00       	call   c00283cd <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 f5 f3 01 00       	call   c00283d1 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 82 f5 01 00       	call   c0028580 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 30 f3 01 00       	call   c00283cf <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 ee f2 01 00       	call   c00283b1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 d6 f2 01 00       	call   c00283cf <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 48 f0 01 00       	call   c0028163 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 4a e3 01 00       	call   c0027483 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 ad e9 01 00       	call   c0027b00 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 ff ef 01 00       	call   c0028163 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 05 e3 01 00       	call   c0027483 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 d4 ef 01 00       	call   c0028163 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 24 f2 01 00       	call   c00283cd <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 01 e9 01 00       	call   c0027ad4 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 7b f3 01 00       	call   c0028560 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 aa f1 01 00       	call   c00283b1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 a5 e8 01 00       	call   c0027ad4 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 23 ef 01 00       	call   c0028163 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 a6 e8 01 00       	call   c0027b00 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 f8 ee 01 00       	call   c0028163 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 5f eb 01 00       	call   c0027de4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 de e1 01 00       	call   c0027483 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 3e db 01 00       	call   c0026e18 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 15 f2 01 00       	call   c00284f7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 fe e7 01 00       	call   c0027b00 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 e5 f1 01 00       	call   c00284f7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 57 e1 01 00       	call   c0027483 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 90 f0 01 00       	call   c00283d3 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 78 ea 01 00       	call   c0027de4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 fe e0 01 00       	call   c0027483 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 e4 f1 01 00       	call   c0028580 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 be ed 01 00       	call   c0028163 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 15 e7 01 00       	call   c0027ad4 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 f4 ef 01 00       	call   c00283cf <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 8d e0 01 00       	call   c0027483 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 b9 e6 01 00       	call   c0027ad4 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 53 f1 01 00       	call   c0028580 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 0c ed 01 00       	call   c0028163 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 89 e6 01 00       	call   c0027b00 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 dc ec 01 00       	call   c0028163 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 e2 df 01 00       	call   c0027483 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 b2 ec 01 00       	call   c0028163 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 04 ef 01 00       	call   c00283cf <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 db e5 01 00       	call   c0027ad4 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 55 f0 01 00       	call   c0028560 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 84 ee 01 00       	call   c00283b1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 7e e5 01 00       	call   c0027ad4 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 fc eb 01 00       	call   c0028163 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 7f e5 01 00       	call   c0027b00 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 d1 eb 01 00       	call   c0028163 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 38 e8 01 00       	call   c0027de4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 b7 de 01 00       	call   c0027483 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 07 d8 01 00       	call   c0026e18 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 de ee 01 00       	call   c00284f7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 c7 e4 01 00       	call   c0027b00 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 ae ee 01 00       	call   c00284f7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 20 de 01 00       	call   c0027483 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 59 ed 01 00       	call   c00283d3 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 40 e7 01 00       	call   c0027de4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 bf dd 01 00       	call   c0027483 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 a5 ee 01 00       	call   c0028580 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 7f ea 01 00       	call   c0028163 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 d6 e3 01 00       	call   c0027ad4 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 b5 ec 01 00       	call   c00283cf <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 4e dd 01 00       	call   c0027483 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 7a e3 01 00       	call   c0027ad4 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 ef e9 01 00       	call   c0028163 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 f5 dc 01 00       	call   c0027483 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 c0 9c 02 c0       	mov    eax,0xc0029cc0
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 d4 9c 02 c0       	mov    eax,0xc0029cd4
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 6a e8 01 00       	call   c0028163 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 e8 e1 01 00       	call   c0027b00 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 7a d4 01 00       	call   c0026e18 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 51 eb 01 00       	call   c00284f7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 3a e1 01 00       	call   c0027b00 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 1d eb 01 00       	call   c00284f7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 8f da 01 00       	call   c0027483 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 ef ea 01 00       	call   c00284f7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 de e0 01 00       	call   c0027b00 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 47 da 01 00       	call   c0027483 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 68 d3 01 00       	call   c0026e18 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 3f ea 01 00       	call   c00284f7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 28 e0 01 00       	call   c0027b00 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 0b ea 01 00       	call   c00284f7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 7d d9 01 00       	call   c0027483 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 dd e9 01 00       	call   c00284f7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 cc df 01 00       	call   c0027b00 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 35 d9 01 00       	call   c0027483 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 13 d9 01 00       	call   c0027483 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 ef d1 01 00       	call   c0026e18 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 c6 e8 01 00       	call   c00284f7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 af de 01 00       	call   c0027b00 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 92 e8 01 00       	call   c00284f7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 04 d8 01 00       	call   c0027483 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 64 e8 01 00       	call   c00284f7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 4d de 01 00       	call   c0027b00 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 b6 d7 01 00       	call   c0027483 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 16 e8 01 00       	call   c00284f7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 ff dd 01 00       	call   c0027b00 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 68 d7 01 00       	call   c0027483 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 7d d0 01 00       	call   c0026e18 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 54 e7 01 00       	call   c00284f7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 3d dd 01 00       	call   c0027b00 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 24 e7 01 00       	call   c00284f7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 96 d6 01 00       	call   c0027483 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 f6 e6 01 00       	call   c00284f7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 df dc 01 00       	call   c0027b00 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 48 d6 01 00       	call   c0027483 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 a8 e6 01 00       	call   c00284f7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 91 dc 01 00       	call   c0027b00 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 fa d5 01 00       	call   c0027483 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 ce d5 01 00       	call   c0027483 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 2b dc 01 00       	call   c0027b00 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 e7 e4 01 00       	call   c00283d3 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 76 d5 01 00       	call   c0027483 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 d3 db 01 00       	call   c0027b00 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 8f e4 01 00       	call   c00283d3 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 09 ce 01 00       	call   c0026e18 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 e0 e4 01 00       	call   c00284f7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 c9 da 01 00       	call   c0027b00 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 ac e4 01 00       	call   c00284f7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 1e d4 01 00       	call   c0027483 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 7e e4 01 00       	call   c00284f7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 67 da 01 00       	call   c0027b00 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 d0 d3 01 00       	call   c0027483 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 30 e4 01 00       	call   c00284f7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 19 da 01 00       	call   c0027b00 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 82 d3 01 00       	call   c0027483 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 e2 e3 01 00       	call   c00284f7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 cb d9 01 00       	call   c0027b00 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 34 d3 01 00       	call   c0027483 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 94 e3 01 00       	call   c00284f7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 7d d9 01 00       	call   c0027b00 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 e6 d2 01 00       	call   c0027483 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 e8 cb 01 00       	call   c0026e18 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 bf e2 01 00       	call   c00284f7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 a8 d8 01 00       	call   c0027b00 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 8f e2 01 00       	call   c00284f7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 01 d2 01 00       	call   c0027483 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 61 e2 01 00       	call   c00284f7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 4a d8 01 00       	call   c0027b00 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 b3 d1 01 00       	call   c0027483 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 13 e2 01 00       	call   c00284f7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 fc d7 01 00       	call   c0027b00 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 65 d1 01 00       	call   c0027483 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 c5 e1 01 00       	call   c00284f7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 ae d7 01 00       	call   c0027b00 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 17 d1 01 00       	call   c0027483 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 77 e1 01 00       	call   c00284f7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 60 d7 01 00       	call   c0027b00 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 c9 d0 01 00       	call   c0027483 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 9d d0 01 00       	call   c0027483 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 fa d6 01 00       	call   c0027b00 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 b6 df 01 00       	call   c00283d3 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 45 d0 01 00       	call   c0027483 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 a2 d6 01 00       	call   c0027b00 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 5e df 01 00       	call   c00283d3 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 ec cf 01 00       	call   c0027483 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 49 d6 01 00       	call   c0027b00 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 05 df 01 00       	call   c00283d3 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 93 cf 01 00       	call   c0027483 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 f0 d5 01 00       	call   c0027b00 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 ac de 01 00       	call   c00283d3 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 0a c8 01 00       	call   c0026e18 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 e1 de 01 00       	call   c00284f7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 ca d4 01 00       	call   c0027b00 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 ad de 01 00       	call   c00284f7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 1f ce 01 00       	call   c0027483 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 7f de 01 00       	call   c00284f7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 68 d4 01 00       	call   c0027b00 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 d1 cd 01 00       	call   c0027483 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 31 de 01 00       	call   c00284f7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 1a d4 01 00       	call   c0027b00 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 83 cd 01 00       	call   c0027483 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 e3 dd 01 00       	call   c00284f7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 cc d3 01 00       	call   c0027b00 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 35 cd 01 00       	call   c0027483 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 95 dd 01 00       	call   c00284f7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 7e d3 01 00       	call   c0027b00 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 e7 cc 01 00       	call   c0027483 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 47 dd 01 00       	call   c00284f7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 30 d3 01 00       	call   c0027b00 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 96 cc 01 00       	call   c0027483 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 f6 dc 01 00       	call   c00284f7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 df d2 01 00       	call   c0027b00 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 48 cc 01 00       	call   c0027483 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 42 c5 01 00       	call   c0026e18 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 19 dc 01 00       	call   c00284f7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 02 d2 01 00       	call   c0027b00 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 e2 db 01 00       	call   c00284f7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 54 cb 01 00       	call   c0027483 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 b4 db 01 00       	call   c00284f7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 9d d1 01 00       	call   c0027b00 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 06 cb 01 00       	call   c0027483 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 66 db 01 00       	call   c00284f7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 4f d1 01 00       	call   c0027b00 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 b8 ca 01 00       	call   c0027483 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 18 db 01 00       	call   c00284f7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 01 d1 01 00       	call   c0027b00 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 6a ca 01 00       	call   c0027483 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 ca da 01 00       	call   c00284f7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 b3 d0 01 00       	call   c0027b00 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 1c ca 01 00       	call   c0027483 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 7c da 01 00       	call   c00284f7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 65 d0 01 00       	call   c0027b00 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 cb c9 01 00       	call   c0027483 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 2b da 01 00       	call   c00284f7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 14 d0 01 00       	call   c0027b00 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 83 c9 01 00       	call   c0027483 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 5c c9 01 00       	call   c0027483 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 ba cf 01 00       	call   c0027b00 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 76 d8 01 00       	call   c00283d3 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 05 c9 01 00       	call   c0027483 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 63 cf 01 00       	call   c0027b00 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 1f d8 01 00       	call   c00283d3 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 ad c8 01 00       	call   c0027483 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 0b cf 01 00       	call   c0027b00 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 c7 d7 01 00       	call   c00283d3 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 55 c8 01 00       	call   c0027483 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 b3 ce 01 00       	call   c0027b00 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 6f d7 01 00       	call   c00283d3 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 fd c7 01 00       	call   c0027483 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 5b ce 01 00       	call   c0027b00 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 17 d7 01 00       	call   c00283d3 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 ab c7 01 00       	call   c0027483 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 09 ce 01 00       	call   c0027b00 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 c5 d6 01 00       	call   c00283d3 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 d9 bf 01 00       	call   c0026e18 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 b0 d6 01 00       	call   c00284f7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 99 cc 01 00       	call   c0027b00 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 80 d6 01 00       	call   c00284f7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 f2 c5 01 00       	call   c0027483 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 04 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd62fc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 26 d6 01 00       	call   c00284f7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 0f cc 01 00       	call   c0027b00 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 7a c5 01 00       	call   c0027483 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 c7 d5 01 00       	call   c00284f7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 b0 cb 01 00       	call   c0027b00 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 1b c5 01 00       	call   c0027483 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 68 d5 01 00       	call   c00284f7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 51 cb 01 00       	call   c0027b00 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 bc c4 01 00       	call   c0027483 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 09 d5 01 00       	call   c00284f7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 f2 ca 01 00       	call   c0027b00 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 5d c4 01 00       	call   c0027483 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 aa d4 01 00       	call   c00284f7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 93 ca 01 00       	call   c0027b00 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 fe c3 01 00       	call   c0027483 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 4b d4 01 00       	call   c00284f7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 34 ca 01 00       	call   c0027b00 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 9f c3 01 00       	call   c0027483 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 ec d3 01 00       	call   c00284f7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 d5 c9 01 00       	call   c0027b00 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 40 c3 01 00       	call   c0027483 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 8d d3 01 00       	call   c00284f7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 76 c9 01 00       	call   c0027b00 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 e1 c2 01 00       	call   c0027483 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 eb bb 01 00       	call   c0026e18 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 c2 d2 01 00       	call   c00284f7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 ab c8 01 00       	call   c0027b00 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 92 d2 01 00       	call   c00284f7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 04 c2 01 00       	call   c0027483 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 20 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd62e0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 37 d2 01 00       	call   c00284f7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 20 c8 01 00       	call   c0027b00 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 8b c1 01 00       	call   c0027483 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 d7 d1 01 00       	call   c00284f7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 c0 c7 01 00       	call   c0027b00 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 2b c1 01 00       	call   c0027483 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 77 d1 01 00       	call   c00284f7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 60 c7 01 00       	call   c0027b00 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 cb c0 01 00       	call   c0027483 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 17 d1 01 00       	call   c00284f7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 00 c7 01 00       	call   c0027b00 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 6b c0 01 00       	call   c0027483 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 b7 d0 01 00       	call   c00284f7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 a0 c6 01 00       	call   c0027b00 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 0b c0 01 00       	call   c0027483 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 57 d0 01 00       	call   c00284f7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 40 c6 01 00       	call   c0027b00 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 ab bf 01 00       	call   c0027483 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 f7 cf 01 00       	call   c00284f7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 e0 c5 01 00       	call   c0027b00 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 4b bf 01 00       	call   c0027483 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 97 cf 01 00       	call   c00284f7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 80 c5 01 00       	call   c0027b00 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 eb be 01 00       	call   c0027483 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 3c 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd62c4]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 90 be 01 00       	call   c0027483 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 ed c4 01 00       	call   c0027b00 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 a9 cd 01 00       	call   c00283d3 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 33 be 01 00       	call   c0027483 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 90 c4 01 00       	call   c0027b00 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 4c cd 01 00       	call   c00283d3 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 d6 bd 01 00       	call   c0027483 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 33 c4 01 00       	call   c0027b00 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 ef cc 01 00       	call   c00283d3 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 79 bd 01 00       	call   c0027483 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 d6 c3 01 00       	call   c0027b00 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 92 cc 01 00       	call   c00283d3 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 1c bd 01 00       	call   c0027483 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 79 c3 01 00       	call   c0027b00 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 35 cc 01 00       	call   c00283d3 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 bf bc 01 00       	call   c0027483 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 1c c3 01 00       	call   c0027b00 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 d8 cb 01 00       	call   c00283d3 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 62 bc 01 00       	call   c0027483 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 bf c2 01 00       	call   c0027b00 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 7b cb 01 00       	call   c00283d3 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 05 bc 01 00       	call   c0027483 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 62 c2 01 00       	call   c0027b00 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 1e cb 01 00       	call   c00283d3 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 1a c2 01 00       	call   c0027b00 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 8a cc 01 00       	jmp    c0028580 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 fc c8 01 00       	call   c00283cf <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 ba c8 01 00       	call   c00283b1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 51 c6 01 00       	call   c0028163 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 52 b9 01 00       	call   c0027483 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 21 c6 01 00       	call   c0028163 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 88 c2 01 00       	call   c0027de4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 27 c8 01 00       	call   c00283b1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 2a c8 01 00       	call   c00283cf <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 fd c7 01 00       	call   c00283cf <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 f6 c1 01 00       	call   c0027de4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 78 c9 01 00       	call   c0028580 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 53 c9 01 00       	call   c0028580 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 2d c5 01 00       	call   c0028163 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 84 be 01 00       	call   c0027ad4 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 63 c7 01 00       	call   c00283cf <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 fc b7 01 00       	call   c0027483 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 20 be 01 00       	call   c0027ad4 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 ba c8 01 00       	call   c0028580 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 fa c0 01 00       	call   c0027de4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 77 b7 01 00       	call   c0027483 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 a3 c3 01 00       	call   c0028163 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 a3 b6 01 00       	call   c0027483 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 83 b6 01 00       	call   c0027483 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 53 c3 01 00       	call   c0028163 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 a3 c5 01 00       	call   c00283cd <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 82 bc 01 00       	call   c0027ad4 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 fc c6 01 00       	call   c0028560 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 2b c5 01 00       	call   c00283b1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 29 bc 01 00       	call   c0027ad4 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 a7 c2 01 00       	call   c0028163 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 2a bc 01 00       	call   c0027b00 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 7c c2 01 00       	call   c0028163 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 e3 be 01 00       	call   c0027de4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 62 b5 01 00       	call   c0027483 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 2c c2 01 00       	call   c0028163 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 78 c4 01 00       	call   c00283cf <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 6d bb 01 00       	call   c0027b00 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 3f bb 01 00       	call   c0027b00 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 78 c1 01 00       	call   c0028163 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 dc bd 01 00       	call   c0027de4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 a4 bd 01 00       	call   c0027de4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 23 b4 01 00       	call   c0027483 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 08 c5 01 00       	call   c0028580 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 e2 c0 01 00       	call   c0028163 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 39 ba 01 00       	call   c0027ad4 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 18 c3 01 00       	call   c00283cf <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 b0 b3 01 00       	call   c0027483 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 d4 b9 01 00       	call   c0027ad4 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 6e c4 01 00       	call   c0028580 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 37 c2 01 00       	call   c00283cf <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 f5 c1 01 00       	call   c00283b1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 8c bf 01 00       	call   c0028163 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 8d b2 01 00       	call   c0027483 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 5c bf 01 00       	call   c0028163 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 c3 bb 01 00       	call   c0027de4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 62 c1 01 00       	call   c00283b1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 65 c1 01 00       	call   c00283cf <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 38 c1 01 00       	call   c00283cf <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 31 bb 01 00       	call   c0027de4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 b3 c2 01 00       	call   c0028580 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 8e c2 01 00       	call   c0028580 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 68 be 01 00       	call   c0028163 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 bf b7 01 00       	call   c0027ad4 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 9e c0 01 00       	call   c00283cf <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 37 b1 01 00       	call   c0027483 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 5b b7 01 00       	call   c0027ad4 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 f5 c1 01 00       	call   c0028580 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 35 ba 01 00       	call   c0027de4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 b2 b0 01 00       	call   c0027483 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 dd bc 01 00       	call   c0028163 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 dd af 01 00       	call   c0027483 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 bd af 01 00       	call   c0027483 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 8d bc 01 00       	call   c0028163 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 dd be 01 00       	call   c00283cd <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 bb b5 01 00       	call   c0027ad4 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 35 c0 01 00       	call   c0028560 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 64 be 01 00       	call   c00283b1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 61 b5 01 00       	call   c0027ad4 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 df bb 01 00       	call   c0028163 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 62 b5 01 00       	call   c0027b00 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 b4 bb 01 00       	call   c0028163 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 1b b8 01 00       	call   c0027de4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 9a ae 01 00       	call   c0027483 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 64 bb 01 00       	call   c0028163 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 b0 bd 01 00       	call   c00283cf <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 a5 b4 01 00       	call   c0027b00 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 77 b4 01 00       	call   c0027b00 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 ae ba 01 00       	call   c0028163 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 12 b7 01 00       	call   c0027de4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 df b6 01 00       	call   c0027de4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 5e ad 01 00       	call   c0027483 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 43 be 01 00       	call   c0028580 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 1d ba 01 00       	call   c0028163 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 74 b3 01 00       	call   c0027ad4 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 53 bc 01 00       	call   c00283cf <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 eb ac 01 00       	call   c0027483 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 0f b3 01 00       	call   c0027ad4 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 a9 bd 01 00       	call   c0028580 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 72 bb 01 00       	call   c00283cf <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 30 bb 01 00       	call   c00283b1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 c7 b8 01 00       	call   c0028163 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 c8 ab 01 00       	call   c0027483 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 97 b8 01 00       	call   c0028163 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 fe b4 01 00       	call   c0027de4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 9d ba 01 00       	call   c00283b1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 a0 ba 01 00       	call   c00283cf <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 73 ba 01 00       	call   c00283cf <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 6c b4 01 00       	call   c0027de4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 ee bb 01 00       	call   c0028580 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 c9 bb 01 00       	call   c0028580 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 a3 b7 01 00       	call   c0028163 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 fa b0 01 00       	call   c0027ad4 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 d9 b9 01 00       	call   c00283cf <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 72 aa 01 00       	call   c0027483 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 96 b0 01 00       	call   c0027ad4 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 30 bb 01 00       	call   c0028580 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 70 b3 01 00       	call   c0027de4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 ed a9 01 00       	call   c0027483 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 18 b6 01 00       	call   c0028163 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 18 a9 01 00       	call   c0027483 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 f8 a8 01 00       	call   c0027483 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 c8 b5 01 00       	call   c0028163 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 18 b8 01 00       	call   c00283cd <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 f6 ae 01 00       	call   c0027ad4 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 70 b9 01 00       	call   c0028560 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 9f b7 01 00       	call   c00283b1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 9c ae 01 00       	call   c0027ad4 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 1a b5 01 00       	call   c0028163 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 9d ae 01 00       	call   c0027b00 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 ef b4 01 00       	call   c0028163 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 56 b1 01 00       	call   c0027de4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 d5 a7 01 00       	call   c0027483 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 9f b4 01 00       	call   c0028163 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 eb b6 01 00       	call   c00283cf <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 e0 ad 01 00       	call   c0027b00 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 b2 ad 01 00       	call   c0027b00 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 e9 b3 01 00       	call   c0028163 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 4d b0 01 00       	call   c0027de4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 1a b0 01 00       	call   c0027de4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 99 a6 01 00       	call   c0027483 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 7e b7 01 00       	call   c0028580 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 58 b3 01 00       	call   c0028163 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 af ac 01 00       	call   c0027ad4 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 8e b5 01 00       	call   c00283cf <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 26 a6 01 00       	call   c0027483 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 4a ac 01 00       	call   c0027ad4 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 e4 b6 01 00       	call   c0028580 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 ad b4 01 00       	call   c00283cf <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 6b b4 01 00       	call   c00283b1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 02 b2 01 00       	call   c0028163 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 03 a5 01 00       	call   c0027483 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 d2 b1 01 00       	call   c0028163 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 39 ae 01 00       	call   c0027de4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 d8 b3 01 00       	call   c00283b1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 db b3 01 00       	call   c00283cf <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 ae b3 01 00       	call   c00283cf <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 a7 ad 01 00       	call   c0027de4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 29 b5 01 00       	call   c0028580 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 04 b5 01 00       	call   c0028580 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 de b0 01 00       	call   c0028163 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 35 aa 01 00       	call   c0027ad4 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 14 b3 01 00       	call   c00283cf <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 ad a3 01 00       	call   c0027483 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 d1 a9 01 00       	call   c0027ad4 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 6b b4 01 00       	call   c0028580 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 ab ac 01 00       	call   c0027de4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 28 a3 01 00       	call   c0027483 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 53 af 01 00       	call   c0028163 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 53 a2 01 00       	call   c0027483 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 33 a2 01 00       	call   c0027483 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 03 af 01 00       	call   c0028163 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 53 b1 01 00       	call   c00283cd <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 31 a8 01 00       	call   c0027ad4 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 ab b2 01 00       	call   c0028560 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 da b0 01 00       	call   c00283b1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 d7 a7 01 00       	call   c0027ad4 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 55 ae 01 00       	call   c0028163 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 d8 a7 01 00       	call   c0027b00 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 2a ae 01 00       	call   c0028163 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 91 aa 01 00       	call   c0027de4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 10 a1 01 00       	call   c0027483 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 da ad 01 00       	call   c0028163 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 26 b0 01 00       	call   c00283cf <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 1b a7 01 00       	call   c0027b00 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 ed a6 01 00       	call   c0027b00 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 24 ad 01 00       	call   c0028163 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 88 a9 01 00       	call   c0027de4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 55 a9 01 00       	call   c0027de4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 d4 9f 01 00       	call   c0027483 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 b9 b0 01 00       	call   c0028580 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 93 ac 01 00       	call   c0028163 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 ea a5 01 00       	call   c0027ad4 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 c9 ae 01 00       	call   c00283cf <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 61 9f 01 00       	call   c0027483 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 85 a5 01 00       	call   c0027ad4 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 1f b0 01 00       	call   c0028580 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 e5 ad 01 00       	call   c00283cf <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 a3 ad 01 00       	call   c00283b1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 3a ab 01 00       	call   c0028163 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 3b 9e 01 00       	call   c0027483 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 0a ab 01 00       	call   c0028163 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 71 a7 01 00       	call   c0027de4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 10 ad 01 00       	call   c00283b1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 13 ad 01 00       	call   c00283cf <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 e6 ac 01 00       	call   c00283cf <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 df a6 01 00       	call   c0027de4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 61 ae 01 00       	call   c0028580 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 38 ae 01 00       	call   c0028580 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 12 aa 01 00       	call   c0028163 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 69 a3 01 00       	call   c0027ad4 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 48 ac 01 00       	call   c00283cf <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 e1 9c 01 00       	call   c0027483 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 09 a3 01 00       	call   c0027ad4 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 a3 ad 01 00       	call   c0028580 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 e4 a5 01 00       	call   c0027de4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 61 9c 01 00       	call   c0027483 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 8d a8 01 00       	call   c0028163 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 8d 9b 01 00       	call   c0027483 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 6d 9b 01 00       	call   c0027483 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 3d a8 01 00       	call   c0028163 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 71 aa 01 00       	call   c00283b1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 68 a1 01 00       	call   c0027ad4 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 e2 ab 01 00       	call   c0028560 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 11 aa 01 00       	call   c00283b1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 0b a1 01 00       	call   c0027ad4 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 89 a7 01 00       	call   c0028163 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 0c a1 01 00       	call   c0027b00 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 5e a7 01 00       	call   c0028163 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 c5 a3 01 00       	call   c0027de4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 44 9a 01 00       	call   c0027483 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 0e a7 01 00       	call   c0028163 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 5a a9 01 00       	call   c00283cf <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 4f a0 01 00       	call   c0027b00 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 21 a0 01 00       	call   c0027b00 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 65 a6 01 00       	call   c0028163 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 cc a2 01 00       	call   c0027de4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 b5 9f 01 00       	call   c0027b00 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 71 a8 01 00       	call   c00283d3 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 64 a2 01 00       	call   c0027de4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 e3 98 01 00       	call   c0027483 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 c8 a9 01 00       	call   c0028580 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 a2 a5 01 00       	call   c0028163 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 f9 9e 01 00       	call   c0027ad4 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 d8 a7 01 00       	call   c00283cf <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 70 98 01 00       	call   c0027483 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 98 9e 01 00       	call   c0027ad4 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 32 a9 01 00       	call   c0028580 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 64 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd629c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 58 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62a8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 ed a5 01 00       	call   c00283cf <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 ab a5 01 00       	call   c00283b1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 97 a5 01 00       	call   c00283cf <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 09 a3 01 00       	call   c0028163 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 87 9c 01 00       	call   c0027b00 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 d9 a2 01 00       	call   c0028163 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 df 95 01 00       	call   c0027483 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 ae a2 01 00       	call   c0028163 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 fe a4 01 00       	call   c00283cd <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 df 9b 01 00       	call   c0027ad4 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 59 a6 01 00       	call   c0028560 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 88 a4 01 00       	call   c00283b1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 87 9b 01 00       	call   c0027ad4 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 05 a2 01 00       	call   c0028163 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 88 9b 01 00       	call   c0027b00 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 da a1 01 00       	call   c0028163 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 41 9e 01 00       	call   c0027de4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 c0 94 01 00       	call   c0027483 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 e8 9d 01 00       	call   c0027de4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 6e 94 01 00       	call   c0027483 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 54 a5 01 00       	call   c0028580 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 2e a1 01 00       	call   c0028163 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 85 9a 01 00       	call   c0027ad4 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 64 a3 01 00       	call   c00283cf <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 fd 93 01 00       	call   c0027483 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 29 9a 01 00       	call   c0027ad4 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 c3 a4 01 00       	call   c0028580 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 78 a0 01 00       	call   c0028163 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 f5 99 01 00       	call   c0027b00 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 46 a0 01 00       	call   c0028163 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 4c 93 01 00       	call   c0027483 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 1c a0 01 00       	call   c0028163 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 70 a2 01 00       	call   c00283d1 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 49 99 01 00       	call   c0027ad4 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 c3 a3 01 00       	call   c0028560 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 f2 a1 01 00       	call   c00283b1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 f0 98 01 00       	call   c0027ad4 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 6e 9f 01 00       	call   c0028163 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 f1 98 01 00       	call   c0027b00 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 43 9f 01 00       	call   c0028163 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 aa 9b 01 00       	call   c0027de4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 29 92 01 00       	call   c0027483 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 45 9b 01 00       	call   c0027de4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 c4 91 01 00       	call   c0027483 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 aa a2 01 00       	call   c0028580 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 84 9e 01 00       	call   c0028163 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 db 97 01 00       	call   c0027ad4 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 ba a0 01 00       	call   c00283cf <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 53 91 01 00       	call   c0027483 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 7f 97 01 00       	call   c0027ad4 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 f0 9d 01 00       	call   c0028163 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 f6 90 01 00       	call   c0027483 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 7e 9e 02 c0       	mov    eax,0xc0029e7e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 8f 9e 02 c0       	mov    eax,0xc0029e8f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 c6 9e 02 c0       	push   0xc0029ec6
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 e8 e2 02 c0       	mov    eax,0xc002e2e8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 cf 9e 02 c0       	push   0xc0029ecf
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 fc 68 02 c0       	mov    eax,0xc00268fc
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 d9 9e 02 c0       	push   0xc0029ed9
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 30 66 02 c0       	mov    eax,0xc0026630
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 e2 9e 02 c0       	push   0xc0029ee2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 fc 69 02 c0       	mov    eax,0xc00269fc
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ec 9e 02 c0       	push   0xc0029eec
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 7c 67 02 c0       	mov    eax,0xc002677c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 f5 9e 02 c0       	push   0xc0029ef5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ec e2 02 c0       	mov    eax,0xc002e2ec
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 02 9f 02 c0       	push   0xc0029f02
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ed e2 02 c0       	mov    eax,0xc002e2ed
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 ff 5d 00 00       	call   c0014422 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 54 18 03 c0    	push   DWORD PTR ds:0xc0031854
c000e668:	68 0f 9f 02 c0       	push   0xc0029f0f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 df f4 00 00       	call   c001db54 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 c8 f7 00 00       	call   c001de52 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 b0 e6 01 c0       	push   0xc001e6b0
c000e693:	ff 35 54 18 03 c0    	push   DWORD PTR ds:0xc0031854
c000e699:	e8 b4 f7 00 00       	call   c001de52 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 08 18 03 c0       	mov    ds:0xc0031808,eax
c000e6a6:	c6 05 ed e2 02 c0 01 	mov    BYTE PTR ds:0xc002e2ed,0x1
c000e6ad:	e8 7f 03 01 00       	call   c001ea31 <Vm::initialise8086()>
c000e6b2:	e8 53 4b 00 00       	call   c001320a <Fs::initVFS()>
c000e6b7:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 f7 dd 00 00       	call   c001c4ca <Sys::loadSyscalls()>
c000e6d3:	e8 1a bd 00 00       	call   c001a3f2 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 1c 9f 02 c0       	push   0xc0029f1c
c000e6e2:	68 25 9f 02 c0       	push   0xc0029f25
c000e6e7:	e8 2c ca 00 00       	call   c001b118 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 fe 55 00 00       	call   c0013cf2 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 f1 5c 00 00       	call   c00143f6 <Device::loadDriversForAll()>
c000e705:	e8 2e b8 00 00       	call   c0019f38 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d e8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2e8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 2d 9f 02 c0       	push   0xc0029f2d
c000e719:	e8 40 ef 00 00       	call   c001d65e <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 86 f1 00 00       	call   c001d8ad <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 82 fa 00 00       	call   c001e1b6 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 49 9f 02 c0       	push   0xc0029f49
c000e749:	50                   	push   eax
c000e74a:	e8 4d 5d 00 00       	call   c001449c <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba e8 a0 02 c0       	mov    edx,0xc002a0e8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 01 e3 02 c0 04 	test   BYTE PTR ds:0xc002e301,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 e3 7c 01 00       	call   c00265c6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 2c a3 00 00       	call   c0018c4a <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 05 a3 00 00       	call   c0018c4a <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 e3 a2 00 00       	call   c0018c4a <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 c1 a2 00 00       	call   c0018c4a <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 00 e3 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e300,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 cf a1 00 00       	call   c0018bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 aa a1 00 00       	call   c0018bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 4d 7b 01 00       	call   c0026580 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 0a 7b 01 00       	call   c0026560 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 c6 a1 00 00       	call   c0018c4a <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 59 9f 02 c0       	push   0xc0029f59
c000eaaf:	e8 d2 43 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 6c 9f 02 c0       	push   0xc0029f6c
c000ead2:	e8 af 43 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 7d 9f 02 c0       	push   0xc0029f7d
c000eaf5:	e8 8c 43 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 8e 9f 02 c0       	push   0xc0029f8e
c000eb18:	e8 69 43 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 9f 9f 02 c0       	push   0xc0029f9f
c000eb3b:	e8 46 43 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 b0 9f 02 c0       	push   0xc0029fb0
c000eb5e:	e8 23 43 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 c1 9f 02 c0       	push   0xc0029fc1
c000eb81:	e8 00 43 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 d2 9f 02 c0       	push   0xc0029fd2
c000eba4:	e8 dd 42 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 e3 9f 02 c0       	push   0xc0029fe3
c000ebc7:	e8 ba 42 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 f4 9f 02 c0       	push   0xc0029ff4
c000ebea:	e8 97 42 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 05 a0 02 c0       	push   0xc002a005
c000ec0d:	e8 74 42 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 16 a0 02 c0       	push   0xc002a016
c000ec30:	e8 51 42 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 27 a0 02 c0       	push   0xc002a027
c000ec53:	e8 2e 42 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 38 a0 02 c0       	push   0xc002a038
c000ec76:	e8 0b 42 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 49 a0 02 c0       	push   0xc002a049
c000ec99:	e8 e8 41 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 5a a0 02 c0       	push   0xc002a05a
c000ecbc:	e8 c5 41 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 6b a0 02 c0       	push   0xc002a06b
c000ecdf:	e8 a2 41 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 7c a0 02 c0       	push   0xc002a07c
c000ed02:	e8 7f 41 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 8d a0 02 c0       	push   0xc002a08d
c000ed21:	e8 60 41 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 b4 b9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b9b4
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 4f 41 00 00       	jmp    c0012e86 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 9e a0 02 c0       	push   0xc002a09e
c000ee0a:	e8 1c b7 00 00       	call   c001a52b <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 a4 a0 02 c0       	push   0xc002a0a4
c000ee42:	e8 e4 b6 00 00       	call   c001a52b <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 00 e3 02 c0 04 	test   BYTE PTR ds:0xc002e300,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 24 d2 02 c0 	sete   BYTE PTR ds:0xc002d224
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 61 92 00 00       	call   c0018116 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 e8 53 00 00       	call   c00142ac <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 0e 9e 00 00       	call   c0018d02 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 a9 53 00 00       	call   c00142ac <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 13 59 00 00       	call   c0014832 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 79 53 00 00       	call   c00142ac <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 fd ef 00 00       	call   c001df52 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 aa a0 02 c0       	push   0xc002a0aa
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 e3 3e 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 bb a0 02 c0       	push   0xc002a0bb
c000efc0:	e8 66 b5 00 00       	call   c001a52b <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 c8 a0 02 c0       	push   0xc002a0c8
c000efd5:	e8 51 b5 00 00       	call   c001a52b <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 d2 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0d2
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 3a b5 00 00       	jmp    c001a52b <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 0c a1 02 c0       	push   0xc002a10c
c000f086:	e8 fb 3d 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 f2 e2 02 c0       	mov    ds:0xc002e2f2,eax
c000f0c7:	66 89 15 f0 e2 02 c0 	mov    WORD PTR ds:0xc002e2f0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 44 eb 00 00       	call   c001dd22 <unlockScheduler()>
c000f1de:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 e8 e2 02 c0    	push   DWORD PTR ds:0xc002e2e8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 d4 93 01 00       	call   c0028600 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 cb 93 01 00       	call   c0028600 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 f8 e2 02 c0 ff 07 	mov    WORD PTR ds:0xc002e2f8,0x7ff
c000f323:	a3 fa e2 02 c0       	mov    ds:0xc002e2fa,eax
c000f328:	0f 01 1d f8 e2 02 c0 	lidtd  ds:0xc002e2f8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 de 28 00 00       	call   c0011ef3 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 f6 2d 00 00       	call   c0012416 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 2e 1e 00 00       	call   c001146c <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 5f 1e 00 00       	call   c00114ac <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 e8 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d fc d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1fc
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 fc d1 02 c0       	mov    eax,ds:0xc002d1fc
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 28 a1 02 c0       	push   0xc002a128
c000f6f4:	e8 8d 37 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 fc d1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d1fc,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 d4 27 00 00       	call   c0011ef3 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d fc d1 02 c0    	mov    ebp,DWORD PTR ds:0xc002d1fc
c000f727:	e8 b1 07 00 00       	call   c000fedd <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 dd 2b 00 00       	call   c0012316 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d fc d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d1fc
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 58 a1 02 c0       	push   0xc002a158
c000f7ad:	e8 79 ad 00 00       	call   c001a52b <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 5d a1 02 c0       	push   0xc002a15d
c000f7c3:	e8 63 ad 00 00       	call   c001a52b <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 47 e5 00 00       	call   c001dd20 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 38 e5 00 00       	call   c001dd22 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 f8 26 00 00       	call   c0011ef3 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 0c 2c 00 00       	call   c0012416 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 dd 26 00 00       	call   c0011ef3 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 af 28 00 00       	call   c00120d2 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 20 d2 02 c0       	mov    eax,ds:0xc002d220
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 80 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e380,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 20 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d220
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 80 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e380,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 80 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e380,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 80 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e380,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 80 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e380,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 20 d2 02 c0       	mov    eax,ds:0xc002d220
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 4e 0c 00 00       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 80 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e380,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 10 0c 00 00       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 a7 0c 00 00       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 20 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d220
c000fb46:	80 3d 80 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e380,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 20 d2 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d220,0x8000
c000fba0:	c6 05 80 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e380,0x1
c000fba7:	c7 05 b8 e3 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e3b8,0xc000fa13
c000fbb1:	c7 05 a4 e3 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e3a4,0xc000f89a
c000fbbb:	c7 05 a0 e3 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e3a0,0xc000f8e5
c000fbc5:	c7 05 ac e3 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e3ac,0xc000fa59
c000fbcf:	c7 05 b4 e3 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e3b4,0xc000f963
c000fbd9:	c7 05 a8 e3 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e3a8,0xc000f9c1
c000fbe3:	c7 05 b0 e3 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e3b0,0xc000f9c2
c000fbed:	c7 05 bc e3 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e3bc,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 20             	sub    esp,0x20
c000fc05:	e8 8e 09 00 00       	call   c0010598 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 64 a1 02 c0       	push   0xc002a164
c000fc4a:	e8 37 32 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 ee 03 00 00       	call   c0010054 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 09 22 00 00       	call   c0011e74 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 b5 b9 02 c0       	push   0xc002b9b5
c000fc92:	e8 94 a8 00 00       	call   c001a52b <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 00 e3 02 c0    	mov    DWORD PTR ds:0xc002e300,ebx
c000fca3:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fca7:	53                   	push   ebx
c000fca8:	e8 4d 22 00 00       	call   c0011efa <VAS::VAS()>
c000fcad:	89 1d 6c e4 02 c0    	mov    DWORD PTR ds:0xc002e46c,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 7b a1 02 c0 	mov    DWORD PTR [esp],0xc002a17b
c000fcbf:	e8 c2 31 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000fcc4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fccb:	e8 70 fb ff ff       	call   c000f840 <malloc>
c000fcd0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd3:	89 c6                	mov    esi,eax
c000fcd5:	e8 60 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcda:	58                   	pop    eax
c000fcdb:	89 35 e8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e8,esi
c000fce1:	5a                   	pop    edx
c000fce2:	56                   	push   esi
c000fce3:	68 98 a1 02 c0       	push   0xc002a198
c000fce8:	e8 99 31 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000fced:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c000fcf2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf4:	6a 00                	push   0x0
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a 00                	push   0x0
c000fcfa:	50                   	push   eax
c000fcfb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcfe:	83 c4 14             	add    esp,0x14
c000fd01:	53                   	push   ebx
c000fd02:	e8 a3 24 00 00       	call   c00121aa <VAS::~VAS()>
c000fd07:	c7 04 24 ab a1 02 c0 	mov    DWORD PTR [esp],0xc002a1ab
c000fd0e:	e8 18 a8 00 00       	call   c001a52b <Krnl::panic(char const*)>
c000fd13:	83 c4 30             	add    esp,0x30
c000fd16:	5b                   	pop    ebx
c000fd17:	5e                   	pop    esi
c000fd18:	5f                   	pop    edi
c000fd19:	c3                   	ret    

c000fd1a <Phys::allocateDMA(unsigned long)>:
c000fd1a:	55                   	push   ebp
c000fd1b:	31 d2                	xor    edx,edx
c000fd1d:	57                   	push   edi
c000fd1e:	31 ed                	xor    ebp,ebp
c000fd20:	56                   	push   esi
c000fd21:	31 c9                	xor    ecx,ecx
c000fd23:	53                   	push   ebx
c000fd24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd28:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd2e:	31 c0                	xor    eax,eax
c000fd30:	c1 ee 0c             	shr    esi,0xc
c000fd33:	eb 17                	jmp    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd35:	85 c9                	test   ecx,ecx
c000fd37:	75 04                	jne    c000fd3d <Phys::allocateDMA(unsigned long)+0x23>
c000fd39:	89 d5                	mov    ebp,edx
c000fd3b:	89 d0                	mov    eax,edx
c000fd3d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd40:	39 de                	cmp    esi,ebx
c000fd42:	74 20                	je     c000fd64 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd44:	42                   	inc    edx
c000fd45:	89 d9                	mov    ecx,ebx
c000fd47:	83 fa 2f             	cmp    edx,0x2f
c000fd4a:	7f 11                	jg     c000fd5d <Phys::allocateDMA(unsigned long)+0x43>
c000fd4c:	80 ba 40 e3 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1cc0],0x0
c000fd53:	74 e0                	je     c000fd35 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd55:	31 c9                	xor    ecx,ecx
c000fd57:	42                   	inc    edx
c000fd58:	83 fa 2f             	cmp    edx,0x2f
c000fd5b:	7e ef                	jle    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd5d:	5b                   	pop    ebx
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	5e                   	pop    esi
c000fd61:	5f                   	pop    edi
c000fd62:	5d                   	pop    ebp
c000fd63:	c3                   	ret    
c000fd64:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd67:	89 d7                	mov    edi,edx
c000fd69:	4f                   	dec    edi
c000fd6a:	79 03                	jns    c000fd6f <Phys::allocateDMA(unsigned long)+0x55>
c000fd6c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd6f:	c1 ff 04             	sar    edi,0x4
c000fd72:	89 c2                	mov    edx,eax
c000fd74:	c1 fa 04             	sar    edx,0x4
c000fd77:	39 fa                	cmp    edx,edi
c000fd79:	75 2f                	jne    c000fdaa <Phys::allocateDMA(unsigned long)+0x90>
c000fd7b:	85 db                	test   ebx,ebx
c000fd7d:	74 1a                	je     c000fd99 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd7f:	be 40 e3 02 c0       	mov    esi,0xc002e340
c000fd84:	8d 90 40 e3 02 c0    	lea    edx,[eax-0x3ffd1cc0]
c000fd8a:	f7 d6                	not    esi
c000fd8c:	29 c6                	sub    esi,eax
c000fd8e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd91:	42                   	inc    edx
c000fd92:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd95:	39 d9                	cmp    ecx,ebx
c000fd97:	7f f5                	jg     c000fd8e <Phys::allocateDMA(unsigned long)+0x74>
c000fd99:	85 ff                	test   edi,edi
c000fd9b:	74 13                	je     c000fdb0 <Phys::allocateDMA(unsigned long)+0x96>
c000fd9d:	5b                   	pop    ebx
c000fd9e:	05 50 20 0c 00       	add    eax,0xc2050
c000fda3:	5e                   	pop    esi
c000fda4:	c1 e0 0c             	shl    eax,0xc
c000fda7:	5f                   	pop    edi
c000fda8:	5d                   	pop    ebp
c000fda9:	c3                   	ret    
c000fdaa:	89 ea                	mov    edx,ebp
c000fdac:	31 c9                	xor    ecx,ecx
c000fdae:	eb a7                	jmp    c000fd57 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb0:	5b                   	pop    ebx
c000fdb1:	c1 e0 0c             	shl    eax,0xc
c000fdb4:	5e                   	pop    esi
c000fdb5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdba:	5f                   	pop    edi
c000fdbb:	5d                   	pop    ebp
c000fdbc:	c3                   	ret    

c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdcb:	c1 e9 0c             	shr    ecx,0xc
c000fdce:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd3:	76 25                	jbe    c000fdfa <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdda:	c1 e8 0c             	shr    eax,0xc
c000fddd:	8d 50 10             	lea    edx,[eax+0x10]
c000fde0:	85 c9                	test   ecx,ecx
c000fde2:	74 15                	je     c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde4:	8d 82 40 e3 02 c0    	lea    eax,[edx-0x3ffd1cc0]
c000fdea:	8d 94 11 40 e3 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1cc0]
c000fdf1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf4:	40                   	inc    eax
c000fdf5:	39 d0                	cmp    eax,edx
c000fdf7:	75 f8                	jne    c000fdf1 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdf9:	c3                   	ret    
c000fdfa:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe00:	c1 ea 0c             	shr    edx,0xc
c000fe03:	eb db                	jmp    c000fde0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe05 <Phys::setPageState(unsigned long, bool)>:
c000fe05:	56                   	push   esi
c000fe06:	ba 01 00 00 00       	mov    edx,0x1
c000fe0b:	53                   	push   ebx
c000fe0c:	8b 35 00 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d200
c000fe12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1a:	89 c8                	mov    eax,ecx
c000fe1c:	83 e1 07             	and    ecx,0x7
c000fe1f:	c1 e8 03             	shr    eax,0x3
c000fe22:	d3 e3                	shl    ebx,cl
c000fe24:	01 c6                	add    esi,eax
c000fe26:	d3 e2                	shl    edx,cl
c000fe28:	f7 d2                	not    edx
c000fe2a:	20 16                	and    BYTE PTR [esi],dl
c000fe2c:	03 05 00 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d200
c000fe32:	08 18                	or     BYTE PTR [eax],bl
c000fe34:	5b                   	pop    ebx
c000fe35:	5e                   	pop    esi
c000fe36:	c3                   	ret    

c000fe37 <Phys::getPageState(unsigned long)>:
c000fe37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3b:	8b 15 00 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d200
c000fe41:	89 c8                	mov    eax,ecx
c000fe43:	83 e1 07             	and    ecx,0x7
c000fe46:	c1 e8 03             	shr    eax,0x3
c000fe49:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe4d:	d3 f8                	sar    eax,cl
c000fe4f:	83 e0 01             	and    eax,0x1
c000fe52:	c3                   	ret    

c000fe53 <Phys::freePage(unsigned long)>:
c000fe53:	53                   	push   ebx
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe61:	76 57                	jbe    c000feba <Phys::freePage(unsigned long)+0x67>
c000fe63:	c1 eb 0c             	shr    ebx,0xc
c000fe66:	53                   	push   ebx
c000fe67:	e8 cb ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fe6c:	5a                   	pop    edx
c000fe6d:	84 c0                	test   al,al
c000fe6f:	74 5b                	je     c000fecc <Phys::freePage(unsigned long)+0x79>
c000fe71:	a1 30 e3 02 c0       	mov    eax,ds:0xc002e330
c000fe76:	48                   	dec    eax
c000fe77:	a3 30 e3 02 c0       	mov    ds:0xc002e330,eax
c000fe7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	c1 e0 02             	shl    eax,0x2
c000fe85:	99                   	cdq    
c000fe86:	f7 3d 34 e3 02 c0    	idiv   DWORD PTR ds:0xc002e334
c000fe8c:	39 05 2c e3 02 c0    	cmp    DWORD PTR ds:0xc002e32c,eax
c000fe92:	75 13                	jne    c000fea7 <Phys::freePage(unsigned long)+0x54>
c000fe94:	83 ec 08             	sub    esp,0x8
c000fe97:	6a 00                	push   0x0
c000fe99:	53                   	push   ebx
c000fe9a:	e8 66 ff ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	83 c4 08             	add    esp,0x8
c000fea5:	5b                   	pop    ebx
c000fea6:	c3                   	ret    
c000fea7:	83 ec 0c             	sub    esp,0xc
c000feaa:	a3 2c e3 02 c0       	mov    ds:0xc002e32c,eax
c000feaf:	50                   	push   eax
c000feb0:	e8 77 0a 00 00       	call   c001092c <VgaText::updateRAMUsageDisplay(int)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	eb da                	jmp    c000fe94 <Phys::freePage(unsigned long)+0x41>
c000feba:	68 00 10 00 00       	push   0x1000
c000febf:	53                   	push   ebx
c000fec0:	e8 f8 fe ff ff       	call   c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>
c000fec5:	59                   	pop    ecx
c000fec6:	5b                   	pop    ebx
c000fec7:	83 c4 08             	add    esp,0x8
c000feca:	5b                   	pop    ebx
c000fecb:	c3                   	ret    
c000fecc:	c7 44 24 10 c6 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1c6
c000fed4:	83 c4 08             	add    esp,0x8
c000fed7:	5b                   	pop    ebx
c000fed8:	e9 4e a6 00 00       	jmp    c001a52b <Krnl::panic(char const*)>

c000fedd <Phys::allocatePage()>:
c000fedd:	56                   	push   esi
c000fede:	53                   	push   ebx
c000fedf:	51                   	push   ecx
c000fee0:	8b 35 24 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e324
c000fee6:	89 f3                	mov    ebx,esi
c000fee8:	eb 0a                	jmp    c000fef4 <Phys::allocatePage()+0x17>
c000feea:	89 1d 24 e3 02 c0    	mov    DWORD PTR ds:0xc002e324,ebx
c000fef0:	39 de                	cmp    esi,ebx
c000fef2:	74 24                	je     c000ff18 <Phys::allocatePage()+0x3b>
c000fef4:	53                   	push   ebx
c000fef5:	e8 3d ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fefa:	5a                   	pop    edx
c000fefb:	84 c0                	test   al,al
c000fefd:	74 77                	je     c000ff76 <Phys::allocatePage()+0x99>
c000feff:	43                   	inc    ebx
c000ff00:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff06:	75 e2                	jne    c000feea <Phys::allocatePage()+0xd>
c000ff08:	31 db                	xor    ebx,ebx
c000ff0a:	c7 05 24 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e324,0x0
c000ff14:	39 de                	cmp    esi,ebx
c000ff16:	75 dc                	jne    c000fef4 <Phys::allocatePage()+0x17>
c000ff18:	83 ec 0c             	sub    esp,0xc
c000ff1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff23:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff29:	e8 54 2c 00 00       	call   c0012b82 <VAS::scanForEviction()>
c000ff2e:	83 c4 10             	add    esp,0x10
c000ff31:	85 c0                	test   eax,eax
c000ff33:	75 76                	jne    c000ffab <Phys::allocatePage()+0xce>
c000ff35:	83 ec 0c             	sub    esp,0xc
c000ff38:	68 dc a1 02 c0       	push   0xc002a1dc
c000ff3d:	e8 44 2f 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c000ff42:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff49:	e8 cc fd ff ff       	call   c000fd1a <Phys::allocateDMA(unsigned long)>
c000ff4e:	83 c4 10             	add    esp,0x10
c000ff51:	85 c0                	test   eax,eax
c000ff53:	75 56                	jne    c000ffab <Phys::allocatePage()+0xce>
c000ff55:	83 ec 0c             	sub    esp,0xc
c000ff58:	68 ed a1 02 c0       	push   0xc002a1ed
c000ff5d:	e8 c9 a5 00 00       	call   c001a52b <Krnl::panic(char const*)>
c000ff62:	83 c4 10             	add    esp,0x10
c000ff65:	8b 1d 24 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e324
c000ff6b:	53                   	push   ebx
c000ff6c:	e8 c6 fe ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000ff71:	5a                   	pop    edx
c000ff72:	84 c0                	test   al,al
c000ff74:	75 89                	jne    c000feff <Phys::allocatePage()+0x22>
c000ff76:	6a 01                	push   0x1
c000ff78:	53                   	push   ebx
c000ff79:	e8 87 fe ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000ff7e:	a1 30 e3 02 c0       	mov    eax,ds:0xc002e330
c000ff83:	59                   	pop    ecx
c000ff84:	40                   	inc    eax
c000ff85:	5b                   	pop    ebx
c000ff86:	a3 30 e3 02 c0       	mov    ds:0xc002e330,eax
c000ff8b:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff8e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff91:	c1 e0 02             	shl    eax,0x2
c000ff94:	99                   	cdq    
c000ff95:	f7 3d 34 e3 02 c0    	idiv   DWORD PTR ds:0xc002e334
c000ff9b:	39 05 2c e3 02 c0    	cmp    DWORD PTR ds:0xc002e32c,eax
c000ffa1:	75 0c                	jne    c000ffaf <Phys::allocatePage()+0xd2>
c000ffa3:	a1 24 e3 02 c0       	mov    eax,ds:0xc002e324
c000ffa8:	c1 e0 0c             	shl    eax,0xc
c000ffab:	5a                   	pop    edx
c000ffac:	5b                   	pop    ebx
c000ffad:	5e                   	pop    esi
c000ffae:	c3                   	ret    
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	a3 2c e3 02 c0       	mov    ds:0xc002e32c,eax
c000ffb7:	50                   	push   eax
c000ffb8:	e8 6f 09 00 00       	call   c001092c <VgaText::updateRAMUsageDisplay(int)>
c000ffbd:	83 c4 10             	add    esp,0x10
c000ffc0:	eb e1                	jmp    c000ffa3 <Phys::allocatePage()+0xc6>

c000ffc2 <Phys::allocateContiguousPages(int)>:
c000ffc2:	57                   	push   edi
c000ffc3:	56                   	push   esi
c000ffc4:	53                   	push   ebx
c000ffc5:	31 db                	xor    ebx,ebx
c000ffc7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffcb:	e8 50 dd 00 00       	call   c001dd20 <lockScheduler()>
c000ffd0:	85 db                	test   ebx,ebx
c000ffd2:	75 11                	jne    c000ffe5 <Phys::allocateContiguousPages(int)+0x23>
c000ffd4:	e8 04 ff ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffd9:	83 ff 01             	cmp    edi,0x1
c000ffdc:	89 c6                	mov    esi,eax
c000ffde:	74 21                	je     c0010001 <Phys::allocateContiguousPages(int)+0x3f>
c000ffe0:	bb 01 00 00 00       	mov    ebx,0x1
c000ffe5:	e8 f3 fe ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffea:	89 da                	mov    edx,ebx
c000ffec:	c1 e2 0c             	shl    edx,0xc
c000ffef:	01 f2                	add    edx,esi
c000fff1:	39 c2                	cmp    edx,eax
c000fff3:	74 17                	je     c001000c <Phys::allocateContiguousPages(int)+0x4a>
c000fff5:	bb 01 00 00 00       	mov    ebx,0x1
c000fffa:	89 c6                	mov    esi,eax
c000fffc:	83 ff 01             	cmp    edi,0x1
c000ffff:	75 e4                	jne    c000ffe5 <Phys::allocateContiguousPages(int)+0x23>
c0010001:	e8 1c dd 00 00       	call   c001dd22 <unlockScheduler()>
c0010006:	89 f0                	mov    eax,esi
c0010008:	5b                   	pop    ebx
c0010009:	5e                   	pop    esi
c001000a:	5f                   	pop    edi
c001000b:	c3                   	ret    
c001000c:	43                   	inc    ebx
c001000d:	39 fb                	cmp    ebx,edi
c001000f:	75 bf                	jne    c000ffd0 <Phys::allocateContiguousPages(int)+0xe>
c0010011:	e8 0c dd 00 00       	call   c001dd22 <unlockScheduler()>
c0010016:	89 f0                	mov    eax,esi
c0010018:	5b                   	pop    ebx
c0010019:	5e                   	pop    esi
c001001a:	5f                   	pop    edi
c001001b:	c3                   	ret    

c001001c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001001c:	56                   	push   esi
c001001d:	53                   	push   ebx
c001001e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010022:	39 1d 28 e3 02 c0    	cmp    DWORD PTR ds:0xc002e328,ebx
c0010028:	73 06                	jae    c0010030 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001002a:	89 1d 28 e3 02 c0    	mov    DWORD PTR ds:0xc002e328,ebx
c0010030:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010034:	c1 eb 0c             	shr    ebx,0xc
c0010037:	c1 e8 0c             	shr    eax,0xc
c001003a:	39 d8                	cmp    eax,ebx
c001003c:	73 13                	jae    c0010051 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001003e:	6a 00                	push   0x0
c0010040:	8d 70 01             	lea    esi,[eax+0x1]
c0010043:	50                   	push   eax
c0010044:	e8 bc fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010049:	5a                   	pop    edx
c001004a:	89 f0                	mov    eax,esi
c001004c:	59                   	pop    ecx
c001004d:	39 f3                	cmp    ebx,esi
c001004f:	75 ed                	jne    c001003e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010051:	5b                   	pop    ebx
c0010052:	5e                   	pop    esi
c0010053:	c3                   	ret    

c0010054 <Phys::physicalMemorySetup(unsigned int)>:
c0010054:	55                   	push   ebp
c0010055:	57                   	push   edi
c0010056:	56                   	push   esi
c0010057:	53                   	push   ebx
c0010058:	31 db                	xor    ebx,ebx
c001005a:	83 ec 40             	sub    esp,0x40
c001005d:	6a 30                	push   0x30
c001005f:	6a 00                	push   0x0
c0010061:	68 40 e3 02 c0       	push   0xc002e340
c0010066:	e8 0d 07 ff ff       	call   c0000778 <memset>
c001006b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001006f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010074:	05 00 10 00 00       	add    eax,0x1000
c0010079:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001007d:	83 c4 10             	add    esp,0x10
c0010080:	83 ec 08             	sub    esp,0x8
c0010083:	6a 01                	push   0x1
c0010085:	53                   	push   ebx
c0010086:	43                   	inc    ebx
c0010087:	e8 79 fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c001008c:	83 c4 10             	add    esp,0x10
c001008f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010095:	75 e9                	jne    c0010080 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010097:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c001009e:	66 85 c0             	test   ax,ax
c00100a1:	0f 84 8e 01 00 00    	je     c0010235 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100b7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100c0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100c8:	eb 15                	jmp    c00100df <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100ca:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100ce:	83 c3 18             	add    ebx,0x18
c00100d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100d5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100d9:	0f 84 66 01 00 00    	je     c0010245 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100df:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100e5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100f0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100f2:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100f5:	01 f0                	add    eax,esi
c00100f7:	55                   	push   ebp
c00100f8:	11 fa                	adc    edx,edi
c00100fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100fe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010102:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010106:	56                   	push   esi
c0010107:	68 28 a2 02 c0       	push   0xc002a228
c001010c:	e8 75 2d 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0010111:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010115:	83 c4 10             	add    esp,0x10
c0010118:	09 f8                	or     eax,edi
c001011a:	0f 85 25 01 00 00    	jne    c0010245 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010120:	4d                   	dec    ebp
c0010121:	75 a7                	jne    c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010123:	ba 00 00 08 00       	mov    edx,0x80000
c0010128:	89 c1                	mov    ecx,eax
c001012a:	39 f2                	cmp    edx,esi
c001012c:	19 f9                	sbb    ecx,edi
c001012e:	0f 82 a7 00 00 00    	jb     c00101db <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010134:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010138:	89 c1                	mov    ecx,eax
c001013a:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001013e:	0f 83 97 00 00 00    	jae    c00101db <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010144:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010149:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001014d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010151:	39 fa                	cmp    edx,edi
c0010153:	19 e8                	sbb    eax,ebp
c0010155:	0f 82 14 01 00 00    	jb     c001026f <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001015b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001015f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010163:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010169:	ba ff 1f 00 00       	mov    edx,0x1fff
c001016e:	83 d5 ff             	adc    ebp,0xffffffff
c0010171:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010175:	31 c0                	xor    eax,eax
c0010177:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001017b:	39 fa                	cmp    edx,edi
c001017d:	89 c1                	mov    ecx,eax
c001017f:	19 e9                	sbb    ecx,ebp
c0010181:	0f 83 43 ff ff ff    	jae    c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010187:	be 00 00 08 00       	mov    esi,0x80000
c001018c:	50                   	push   eax
c001018d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010191:	57                   	push   edi
c0010192:	56                   	push   esi
c0010193:	68 4c a2 02 c0       	push   0xc002a24c
c0010198:	e8 e9 2c 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001019d:	5a                   	pop    edx
c001019e:	59                   	pop    ecx
c001019f:	57                   	push   edi
c00101a0:	56                   	push   esi
c00101a1:	e8 76 fe ff ff       	call   c001001c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101a6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101ae:	83 c4 0c             	add    esp,0xc
c00101b1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101b5:	03 05 34 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e334
c00101bb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101c2:	a3 34 e3 02 c0       	mov    ds:0xc002e334,eax
c00101c7:	52                   	push   edx
c00101c8:	50                   	push   eax
c00101c9:	68 09 a2 02 c0       	push   0xc002a209
c00101ce:	e8 b3 2c 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00101d3:	83 c4 10             	add    esp,0x10
c00101d6:	e9 ef fe ff ff       	jmp    c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101db:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101e7:	39 ea                	cmp    edx,ebp
c00101e9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101ed:	0f 82 d7 fe ff ff    	jb     c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f3:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101f8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101fc:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010200:	0f 83 c4 fe ff ff    	jae    c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010206:	39 ee                	cmp    esi,ebp
c0010208:	89 f8                	mov    eax,edi
c001020a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001020e:	0f 83 78 ff ff ff    	jae    c001018c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010214:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010218:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001021c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010220:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010224:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010228:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001022c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010230:	e9 57 ff ff ff       	jmp    c001018c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010235:	83 ec 0c             	sub    esp,0xc
c0010238:	68 fb a1 02 c0       	push   0xc002a1fb
c001023d:	e8 e9 a2 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0010242:	83 c4 10             	add    esp,0x10
c0010245:	bb 40 01 00 00       	mov    ebx,0x140
c001024a:	83 ec 08             	sub    esp,0x8
c001024d:	6a 00                	push   0x0
c001024f:	53                   	push   ebx
c0010250:	43                   	inc    ebx
c0010251:	e8 af fb ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010256:	ff 05 34 e3 02 c0    	inc    DWORD PTR ds:0xc002e334
c001025c:	83 c4 10             	add    esp,0x10
c001025f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010265:	75 e3                	jne    c001024a <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010267:	83 c4 3c             	add    esp,0x3c
c001026a:	5b                   	pop    ebx
c001026b:	5e                   	pop    esi
c001026c:	5f                   	pop    edi
c001026d:	5d                   	pop    ebp
c001026e:	c3                   	ret    
c001026f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010277:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001027f:	e9 d7 fe ff ff       	jmp    c001015b <Phys::physicalMemorySetup(unsigned int)+0x107>

c0010284 <Pipe::isAtty()>:
c0010284:	31 c0                	xor    eax,eax
c0010286:	c3                   	ret    
c0010287:	90                   	nop

c0010288 <Pipe::~Pipe()>:
c0010288:	83 ec 0c             	sub    esp,0xc
c001028b:	ba b8 a2 02 c0       	mov    edx,0xc002a2b8
c0010290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010294:	89 10                	mov    DWORD PTR [eax],edx
c0010296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001029a:	83 ec 0c             	sub    esp,0xc
c001029d:	50                   	push   eax
c001029e:	e8 37 16 00 00       	call   c00118da <UnixFile::~UnixFile()>
c00102a3:	83 c4 10             	add    esp,0x10
c00102a6:	90                   	nop
c00102a7:	83 c4 0c             	add    esp,0xc
c00102aa:	c3                   	ret    
c00102ab:	90                   	nop

c00102ac <Pipe::~Pipe()>:
c00102ac:	83 ec 0c             	sub    esp,0xc
c00102af:	83 ec 0c             	sub    esp,0xc
c00102b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b6:	e8 cd ff ff ff       	call   c0010288 <Pipe::~Pipe()>
c00102bb:	83 c4 10             	add    esp,0x10
c00102be:	83 ec 08             	sub    esp,0x8
c00102c1:	6a 20                	push   0x20
c00102c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c7:	e8 da 2a 00 00       	call   c0012da6 <operator delete(void*, unsigned long)>
c00102cc:	83 c4 10             	add    esp,0x10
c00102cf:	83 c4 0c             	add    esp,0xc
c00102d2:	c3                   	ret    
c00102d3:	90                   	nop

c00102d4 <Pipe::read(unsigned long long, void*, int*)>:
c00102d4:	55                   	push   ebp
c00102d5:	57                   	push   edi
c00102d6:	56                   	push   esi
c00102d7:	53                   	push   ebx
c00102d8:	83 ec 1c             	sub    esp,0x1c
c00102db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102e7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102ea:	89 c8                	mov    eax,ecx
c00102ec:	99                   	cdq    
c00102ed:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102f1:	74 19                	je     c001030c <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102f3:	39 f9                	cmp    ecx,edi
c00102f5:	89 d1                	mov    ecx,edx
c00102f7:	19 f1                	sbb    ecx,esi
c00102f9:	73 11                	jae    c001030c <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102fb:	e8 20 da 00 00       	call   c001dd20 <lockScheduler()>
c0010300:	e8 57 dd 00 00       	call   c001e05c <schedule()>
c0010305:	e8 18 da 00 00       	call   c001dd22 <unlockScheduler()>
c001030a:	eb db                	jmp    c00102e7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001030c:	39 f8                	cmp    eax,edi
c001030e:	89 d1                	mov    ecx,edx
c0010310:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010314:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010318:	19 f1                	sbb    ecx,esi
c001031a:	73 08                	jae    c0010324 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001031c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010320:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010324:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010327:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001032a:	29 c6                	sub    esi,eax
c001032c:	89 f1                	mov    ecx,esi
c001032e:	c1 f9 1f             	sar    ecx,0x1f
c0010331:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010335:	89 ca                	mov    edx,ecx
c0010337:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001033b:	19 d1                	sbb    ecx,edx
c001033d:	73 04                	jae    c0010343 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001033f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010343:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010347:	89 fd                	mov    ebp,edi
c0010349:	29 f5                	sub    ebp,esi
c001034b:	85 f6                	test   esi,esi
c001034d:	74 12                	je     c0010361 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001034f:	52                   	push   edx
c0010350:	56                   	push   esi
c0010351:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010354:	50                   	push   eax
c0010355:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010359:	e8 e6 03 ff ff       	call   c0000744 <memcpy>
c001035e:	83 c4 10             	add    esp,0x10
c0010361:	85 ed                	test   ebp,ebp
c0010363:	74 12                	je     c0010377 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010365:	50                   	push   eax
c0010366:	55                   	push   ebp
c0010367:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001036a:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001036e:	56                   	push   esi
c001036f:	e8 d0 03 ff ff       	call   c0000744 <memcpy>
c0010374:	83 c4 10             	add    esp,0x10
c0010377:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001037a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001037d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010380:	99                   	cdq    
c0010381:	89 f7                	mov    edi,esi
c0010383:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010387:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001038b:	c1 ff 1f             	sar    edi,0x1f
c001038e:	57                   	push   edi
c001038f:	56                   	push   esi
c0010390:	52                   	push   edx
c0010391:	50                   	push   eax
c0010392:	e8 65 66 01 00       	call   c00269fc <__umoddi3>
c0010397:	83 c4 10             	add    esp,0x10
c001039a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001039d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103a2:	75 10                	jne    c00103b4 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103a4:	83 ec 0c             	sub    esp,0xc
c00103a7:	68 75 a2 02 c0       	push   0xc002a275
c00103ac:	e8 7a a1 00 00       	call   c001a52b <Krnl::panic(char const*)>
c00103b1:	83 c4 10             	add    esp,0x10
c00103b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103bc:	89 10                	mov    DWORD PTR [eax],edx
c00103be:	83 c4 1c             	add    esp,0x1c
c00103c1:	31 c0                	xor    eax,eax
c00103c3:	5b                   	pop    ebx
c00103c4:	5e                   	pop    esi
c00103c5:	5f                   	pop    edi
c00103c6:	5d                   	pop    ebp
c00103c7:	c3                   	ret    

c00103c8 <Pipe::write(unsigned long long, void*, int*)>:
c00103c8:	55                   	push   ebp
c00103c9:	57                   	push   edi
c00103ca:	56                   	push   esi
c00103cb:	53                   	push   ebx
c00103cc:	83 ec 1c             	sub    esp,0x1c
c00103cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103d3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103db:	89 04 24             	mov    DWORD PTR [esp],eax
c00103de:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103e1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103e8:	89 de                	mov    esi,ebx
c00103ea:	89 df                	mov    edi,ebx
c00103ec:	c1 ff 1f             	sar    edi,0x1f
c00103ef:	01 c6                	add    esi,eax
c00103f1:	89 c8                	mov    eax,ecx
c00103f3:	11 d7                	adc    edi,edx
c00103f5:	99                   	cdq    
c00103f6:	39 f1                	cmp    ecx,esi
c00103f8:	89 d0                	mov    eax,edx
c00103fa:	19 f8                	sbb    eax,edi
c00103fc:	b8 01 00 00 00       	mov    eax,0x1
c0010401:	0f 82 80 00 00 00    	jb     c0010487 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010407:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001040a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001040d:	01 d8                	add    eax,ebx
c001040f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010413:	99                   	cdq    
c0010414:	f7 f9                	idiv   ecx
c0010416:	29 d1                	sub    ecx,edx
c0010418:	89 d7                	mov    edi,edx
c001041a:	89 c8                	mov    eax,ecx
c001041c:	99                   	cdq    
c001041d:	39 ce                	cmp    esi,ecx
c001041f:	19 d3                	sbb    ebx,edx
c0010421:	bb 00 00 00 00       	mov    ebx,0x0
c0010426:	72 04                	jb     c001042c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010428:	89 f3                	mov    ebx,esi
c001042a:	29 cb                	sub    ebx,ecx
c001042c:	89 f1                	mov    ecx,esi
c001042e:	29 d9                	sub    ecx,ebx
c0010430:	74 1a                	je     c001044c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010432:	52                   	push   edx
c0010433:	51                   	push   ecx
c0010434:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010438:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001043c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001043f:	57                   	push   edi
c0010440:	e8 ff 02 ff ff       	call   c0000744 <memcpy>
c0010445:	83 c4 10             	add    esp,0x10
c0010448:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001044c:	85 db                	test   ebx,ebx
c001044e:	74 12                	je     c0010462 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010450:	50                   	push   eax
c0010451:	53                   	push   ebx
c0010452:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010456:	51                   	push   ecx
c0010457:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001045a:	e8 e5 02 ff ff       	call   c0000744 <memcpy>
c001045f:	83 c4 10             	add    esp,0x10
c0010462:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010465:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001046a:	75 10                	jne    c001047c <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001046c:	83 ec 0c             	sub    esp,0xc
c001046f:	68 91 a2 02 c0       	push   0xc002a291
c0010474:	e8 b2 a0 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0010479:	83 c4 10             	add    esp,0x10
c001047c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010480:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010483:	89 38                	mov    DWORD PTR [eax],edi
c0010485:	31 c0                	xor    eax,eax
c0010487:	83 c4 1c             	add    esp,0x1c
c001048a:	5b                   	pop    ebx
c001048b:	5e                   	pop    esi
c001048c:	5f                   	pop    edi
c001048d:	5d                   	pop    ebp
c001048e:	c3                   	ret    
c001048f:	90                   	nop

c0010490 <Pipe::Pipe(int)>:
c0010490:	83 ec 0c             	sub    esp,0xc
c0010493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010497:	83 ec 08             	sub    esp,0x8
c001049a:	6a 00                	push   0x0
c001049c:	50                   	push   eax
c001049d:	e8 56 12 00 00       	call   c00116f8 <UnixFile::UnixFile(int)>
c00104a2:	83 c4 10             	add    esp,0x10
c00104a5:	ba b8 a2 02 c0       	mov    edx,0xc002a2b8
c00104aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ae:	89 10                	mov    DWORD PTR [eax],edx
c00104b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ca:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104d5:	83 ec 0c             	sub    esp,0xc
c00104d8:	50                   	push   eax
c00104d9:	e8 62 f3 ff ff       	call   c000f840 <malloc>
c00104de:	83 c4 10             	add    esp,0x10
c00104e1:	89 c2                	mov    edx,eax
c00104e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ee:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104f2:	90                   	nop
c00104f3:	83 c4 0c             	add    esp,0xc
c00104f6:	c3                   	ret    
c00104f7:	90                   	nop

c00104f8 <VgaText::isAtty()>:
c00104f8:	b0 01                	mov    al,0x1
c00104fa:	c3                   	ret    
c00104fb:	90                   	nop

c00104fc <VgaText::~VgaText()>:
c00104fc:	83 ec 0c             	sub    esp,0xc
c00104ff:	ba 74 a3 02 c0       	mov    edx,0xc002a374
c0010504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010508:	89 10                	mov    DWORD PTR [eax],edx
c001050a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050e:	83 ec 0c             	sub    esp,0xc
c0010511:	50                   	push   eax
c0010512:	e8 c3 13 00 00       	call   c00118da <UnixFile::~UnixFile()>
c0010517:	83 c4 10             	add    esp,0x10
c001051a:	90                   	nop
c001051b:	83 c4 0c             	add    esp,0xc
c001051e:	c3                   	ret    
c001051f:	90                   	nop

c0010520 <VgaText::~VgaText()>:
c0010520:	83 ec 0c             	sub    esp,0xc
c0010523:	83 ec 0c             	sub    esp,0xc
c0010526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001052a:	e8 cd ff ff ff       	call   c00104fc <VgaText::~VgaText()>
c001052f:	83 c4 10             	add    esp,0x10
c0010532:	83 ec 08             	sub    esp,0x8
c0010535:	68 60 12 00 00       	push   0x1260
c001053a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053e:	e8 63 28 00 00       	call   c0012da6 <operator delete(void*, unsigned long)>
c0010543:	83 c4 10             	add    esp,0x10
c0010546:	83 c4 0c             	add    esp,0xc
c0010549:	c3                   	ret    

c001054a <VgaText::read(unsigned long long, void*, int*)>:
c001054a:	83 ec 10             	sub    esp,0x10
c001054d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010551:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010559:	e8 ca 5c 00 00       	call   c0016228 <readKeyboard(VgaText*, char*, unsigned long)>
c001055e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010562:	89 02                	mov    DWORD PTR [edx],eax
c0010564:	31 c0                	xor    eax,eax
c0010566:	83 c4 1c             	add    esp,0x1c
c0010569:	c3                   	ret    

c001056a <setTerminalScrollLock(bool)>:
c001056a:	c3                   	ret    

c001056b <addToTerminalCycle(VgaText*)>:
c001056b:	8b 15 c0 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3c0
c0010571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010575:	85 d2                	test   edx,edx
c0010577:	75 0c                	jne    c0010585 <addToTerminalCycle(VgaText*)+0x1a>
c0010579:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001057f:	a3 c0 e3 02 c0       	mov    ds:0xc002e3c0,eax
c0010584:	c3                   	ret    
c0010585:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001058b:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010591:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010597:	c3                   	ret    

c0010598 <installVgaTextImplementation()>:
c0010598:	83 ec 10             	sub    esp,0x10
c001059b:	6a 20                	push   0x20
c001059d:	6a 00                	push   0x0
c001059f:	68 a0 e3 02 c0       	push   0xc002e3a0
c00105a4:	e8 cf 01 ff ff       	call   c0000778 <memset>
c00105a9:	83 c4 1c             	add    esp,0x1c
c00105ac:	c3                   	ret    

c00105ad <scrollTerminalScrollLock(int)>:
c00105ad:	c3                   	ret    

c00105ae <VgaText::load()>:
c00105ae:	53                   	push   ebx
c00105af:	31 c0                	xor    eax,eax
c00105b1:	83 ec 58             	sub    esp,0x58
c00105b4:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105b8:	89 e2                	mov    edx,esp
c00105ba:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105be:	40                   	inc    eax
c00105bf:	83 f8 50             	cmp    eax,0x50
c00105c2:	75 f6                	jne    c00105ba <VgaText::load()+0xc>
c00105c4:	31 c0                	xor    eax,eax
c00105c6:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105cd:	84 c9                	test   cl,cl
c00105cf:	74 06                	je     c00105d7 <VgaText::load()+0x29>
c00105d1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105d4:	40                   	inc    eax
c00105d5:	eb ef                	jmp    c00105c6 <VgaText::load()+0x18>
c00105d7:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105dd:	85 c0                	test   eax,eax
c00105df:	74 09                	je     c00105ea <VgaText::load()+0x3c>
c00105e1:	51                   	push   ecx
c00105e2:	51                   	push   ecx
c00105e3:	52                   	push   edx
c00105e4:	53                   	push   ebx
c00105e5:	ff d0                	call   eax
c00105e7:	83 c4 10             	add    esp,0x10
c00105ea:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105f0:	85 c0                	test   eax,eax
c00105f2:	74 09                	je     c00105fd <VgaText::load()+0x4f>
c00105f4:	83 ec 0c             	sub    esp,0xc
c00105f7:	53                   	push   ebx
c00105f8:	ff d0                	call   eax
c00105fa:	83 c4 10             	add    esp,0x10
c00105fd:	83 c4 58             	add    esp,0x58
c0010600:	5b                   	pop    ebx
c0010601:	c3                   	ret    

c0010602 <VgaText::updateCursor()>:
c0010602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010606:	39 05 c4 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3c4,eax
c001060c:	75 0c                	jne    c001061a <VgaText::updateCursor()+0x18>
c001060e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010614:	85 c0                	test   eax,eax
c0010616:	74 02                	je     c001061a <VgaText::updateCursor()+0x18>
c0010618:	ff e0                	jmp    eax
c001061a:	c3                   	ret    
c001061b:	90                   	nop

c001061c <VgaText::showCursor(bool)>:
c001061c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010624:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001062a:	c3                   	ret    
c001062b:	90                   	nop

c001062c <VgaText::disableBlink(bool)>:
c001062c:	56                   	push   esi
c001062d:	53                   	push   ebx
c001062e:	51                   	push   ecx
c001062f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010633:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010637:	39 1d c4 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3c4,ebx
c001063d:	75 18                	jne    c0010657 <VgaText::disableBlink(bool)+0x2b>
c001063f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010645:	85 c0                	test   eax,eax
c0010647:	74 0e                	je     c0010657 <VgaText::disableBlink(bool)+0x2b>
c0010649:	89 f1                	mov    ecx,esi
c001064b:	52                   	push   edx
c001064c:	52                   	push   edx
c001064d:	0f b6 d1             	movzx  edx,cl
c0010650:	52                   	push   edx
c0010651:	53                   	push   ebx
c0010652:	ff d0                	call   eax
c0010654:	83 c4 10             	add    esp,0x10
c0010657:	89 f0                	mov    eax,esi
c0010659:	83 f0 01             	xor    eax,0x1
c001065c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010662:	58                   	pop    eax
c0010663:	5b                   	pop    ebx
c0010664:	5e                   	pop    esi
c0010665:	c3                   	ret    

c0010666 <VgaText::doANSI_SGR(int)>:
c0010666:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001066a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066e:	85 d2                	test   edx,edx
c0010670:	75 14                	jne    c0010686 <VgaText::doANSI_SGR(int)+0x20>
c0010672:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010678:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001067e:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010684:	eb 65                	jmp    c00106eb <VgaText::doANSI_SGR(int)+0x85>
c0010686:	83 fa 07             	cmp    edx,0x7
c0010689:	75 14                	jne    c001069f <VgaText::doANSI_SGR(int)+0x39>
c001068b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010691:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010697:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001069d:	eb 4c                	jmp    c00106eb <VgaText::doANSI_SGR(int)+0x85>
c001069f:	83 fa 1b             	cmp    edx,0x1b
c00106a2:	74 ce                	je     c0010672 <VgaText::doANSI_SGR(int)+0xc>
c00106a4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106a7:	83 f9 07             	cmp    ecx,0x7
c00106aa:	77 09                	ja     c00106b5 <VgaText::doANSI_SGR(int)+0x4f>
c00106ac:	8b 14 8d 40 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2dc0]
c00106b3:	eb 20                	jmp    c00106d5 <VgaText::doANSI_SGR(int)+0x6f>
c00106b5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106b8:	83 f9 07             	cmp    ecx,0x7
c00106bb:	77 09                	ja     c00106c6 <VgaText::doANSI_SGR(int)+0x60>
c00106bd:	8b 14 8d 40 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2dc0]
c00106c4:	eb 25                	jmp    c00106eb <VgaText::doANSI_SGR(int)+0x85>
c00106c6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106c9:	83 f9 07             	cmp    ecx,0x7
c00106cc:	77 0e                	ja     c00106dc <VgaText::doANSI_SGR(int)+0x76>
c00106ce:	8b 14 95 f8 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2f08]
c00106d5:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106db:	c3                   	ret    
c00106dc:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106df:	83 f9 07             	cmp    ecx,0x7
c00106e2:	77 0d                	ja     c00106f1 <VgaText::doANSI_SGR(int)+0x8b>
c00106e4:	8b 14 95 d0 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2f30]
c00106eb:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106f1:	c3                   	ret    

c00106f2 <VgaText::setDefaultBgColour(VgaColour)>:
c00106f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106fa:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010700:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010706:	c3                   	ret    
c0010707:	90                   	nop

c0010708 <VgaText::setDefaultFgColour(VgaColour)>:
c0010708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001070c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010710:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010716:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001071c:	c3                   	ret    
c001071d:	90                   	nop

c001071e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001071e:	53                   	push   ebx
c001071f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010723:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010727:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001072b:	51                   	push   ecx
c001072c:	e8 c1 ff ff ff       	call   c00106f2 <VgaText::setDefaultBgColour(VgaColour)>
c0010731:	58                   	pop    eax
c0010732:	5a                   	pop    edx
c0010733:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010737:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001073b:	5b                   	pop    ebx
c001073c:	eb ca                	jmp    c0010708 <VgaText::setDefaultFgColour(VgaColour)>

c001073e <VgaText::combineColours(unsigned char, unsigned char)>:
c001073e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010742:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010747:	83 e0 0f             	and    eax,0xf
c001074a:	c1 e2 04             	shl    edx,0x4
c001074d:	09 d0                	or     eax,edx
c001074f:	c3                   	ret    

c0010750 <VgaText::scrollScreen()>:
c0010750:	57                   	push   edi
c0010751:	56                   	push   esi
c0010752:	be 01 00 00 00       	mov    esi,0x1
c0010757:	53                   	push   ebx
c0010758:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001075c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010762:	31 ff                	xor    edi,edi
c0010764:	01 d9                	add    ecx,ebx
c0010766:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010769:	83 fe 17             	cmp    esi,0x17
c001076c:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010772:	75 28                	jne    c001079c <VgaText::scrollScreen()+0x4c>
c0010774:	f7 c7 01 00 00 00    	test   edi,0x1
c001077a:	74 1c                	je     c0010798 <VgaText::scrollScreen()+0x48>
c001077c:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010783:	50                   	push   eax
c0010784:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001078b:	50                   	push   eax
c001078c:	e8 ad ff ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c0010791:	5a                   	pop    edx
c0010792:	5a                   	pop    edx
c0010793:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010796:	eb 04                	jmp    c001079c <VgaText::scrollScreen()+0x4c>
c0010798:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001079c:	47                   	inc    edi
c001079d:	41                   	inc    ecx
c001079e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107a4:	75 c0                	jne    c0010766 <VgaText::scrollScreen()+0x16>
c00107a6:	46                   	inc    esi
c00107a7:	83 fe 18             	cmp    esi,0x18
c00107aa:	75 b0                	jne    c001075c <VgaText::scrollScreen()+0xc>
c00107ac:	39 1d c4 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3c4,ebx
c00107b2:	75 24                	jne    c00107d8 <VgaText::scrollScreen()+0x88>
c00107b4:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107bb:	74 08                	je     c00107c5 <VgaText::scrollScreen()+0x75>
c00107bd:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107c3:	eb 13                	jmp    c00107d8 <VgaText::scrollScreen()+0x88>
c00107c5:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107cb:	85 c0                	test   eax,eax
c00107cd:	74 09                	je     c00107d8 <VgaText::scrollScreen()+0x88>
c00107cf:	83 ec 0c             	sub    esp,0xc
c00107d2:	53                   	push   ebx
c00107d3:	ff d0                	call   eax
c00107d5:	83 c4 10             	add    esp,0x10
c00107d8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107dc:	5b                   	pop    ebx
c00107dd:	5e                   	pop    esi
c00107de:	5f                   	pop    edi
c00107df:	e9 1e fe ff ff       	jmp    c0010602 <VgaText::updateCursor()>

c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107e9:	c1 e0 08             	shl    eax,0x8
c00107ec:	89 c2                	mov    edx,eax
c00107ee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107f3:	09 d0                	or     eax,edx
c00107f5:	c3                   	ret    

c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107f6:	53                   	push   ebx
c00107f7:	83 ec 08             	sub    esp,0x8
c00107fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107fe:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010803:	50                   	push   eax
c0010804:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010809:	50                   	push   eax
c001080a:	e8 2f ff ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c001080f:	5a                   	pop    edx
c0010810:	0f b6 c0             	movzx  eax,al
c0010813:	5b                   	pop    ebx
c0010814:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010819:	50                   	push   eax
c001081a:	53                   	push   ebx
c001081b:	e8 c4 ff ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010820:	5a                   	pop    edx
c0010821:	5a                   	pop    edx
c0010822:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010828:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001082c:	0f b7 d2             	movzx  edx,dx
c001082f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010834:	39 0d c4 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3c4,ecx
c001083a:	75 14                	jne    c0010850 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001083c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010842:	85 c0                	test   eax,eax
c0010844:	74 0a                	je     c0010850 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010846:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001084a:	83 c4 08             	add    esp,0x8
c001084d:	5b                   	pop    ebx
c001084e:	ff e0                	jmp    eax
c0010850:	83 c4 08             	add    esp,0x8
c0010853:	5b                   	pop    ebx
c0010854:	c3                   	ret    
c0010855:	90                   	nop

c0010856 <VgaText::getCursorX()>:
c0010856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001085a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010860:	c3                   	ret    
c0010861:	90                   	nop

c0010862 <VgaText::getCursorY()>:
c0010862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010866:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001086c:	c3                   	ret    
c001086d:	90                   	nop

c001086e <VgaText::setCursor(int, int)>:
c001086e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010872:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010876:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001087c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010880:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010886:	e9 77 fd ff ff       	jmp    c0010602 <VgaText::updateCursor()>
c001088b:	90                   	nop

c001088c <VgaText::setCursorX(int)>:
c001088c:	83 ec 10             	sub    esp,0x10
c001088f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010893:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001089d:	50                   	push   eax
c001089e:	e8 cb ff ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c00108a3:	83 c4 1c             	add    esp,0x1c
c00108a6:	c3                   	ret    
c00108a7:	90                   	nop

c00108a8 <VgaText::setCursorY(int)>:
c00108a8:	83 ec 10             	sub    esp,0x10
c00108ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108b3:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108b9:	50                   	push   eax
c00108ba:	e8 af ff ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c00108bf:	83 c4 1c             	add    esp,0x1c
c00108c2:	c3                   	ret    
c00108c3:	90                   	nop

c00108c4 <VgaText::incrementCursor(bool)>:
c00108c4:	56                   	push   esi
c00108c5:	53                   	push   ebx
c00108c6:	51                   	push   ecx
c00108c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108cf:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108d5:	40                   	inc    eax
c00108d6:	83 f8 50             	cmp    eax,0x50
c00108d9:	74 08                	je     c00108e3 <VgaText::incrementCursor(bool)+0x1f>
c00108db:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108e1:	eb 33                	jmp    c0010916 <VgaText::incrementCursor(bool)+0x52>
c00108e3:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108e9:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108f3:	8d 50 01             	lea    edx,[eax+0x1]
c00108f6:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108fc:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010902:	75 12                	jne    c0010916 <VgaText::incrementCursor(bool)+0x52>
c0010904:	83 ec 0c             	sub    esp,0xc
c0010907:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001090d:	53                   	push   ebx
c001090e:	e8 3d fe ff ff       	call   c0010750 <VgaText::scrollScreen()>
c0010913:	83 c4 10             	add    esp,0x10
c0010916:	89 f0                	mov    eax,esi
c0010918:	84 c0                	test   al,al
c001091a:	74 0c                	je     c0010928 <VgaText::incrementCursor(bool)+0x64>
c001091c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010920:	5a                   	pop    edx
c0010921:	5b                   	pop    ebx
c0010922:	5e                   	pop    esi
c0010923:	e9 da fc ff ff       	jmp    c0010602 <VgaText::updateCursor()>
c0010928:	58                   	pop    eax
c0010929:	5b                   	pop    ebx
c001092a:	5e                   	pop    esi
c001092b:	c3                   	ret    

c001092c <VgaText::updateRAMUsageDisplay(int)>:
c001092c:	56                   	push   esi
c001092d:	8b 35 20 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d220
c0010933:	53                   	push   ebx
c0010934:	bb 0a 00 00 00       	mov    ebx,0xa
c0010939:	6a 0f                	push   0xf
c001093b:	6a 00                	push   0x0
c001093d:	e8 fc fd ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c0010942:	5a                   	pop    edx
c0010943:	59                   	pop    ecx
c0010944:	0f b6 c8             	movzx  ecx,al
c0010947:	51                   	push   ecx
c0010948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094c:	99                   	cdq    
c001094d:	f7 fb                	idiv   ebx
c001094f:	89 d3                	mov    ebx,edx
c0010951:	83 c0 30             	add    eax,0x30
c0010954:	83 c3 30             	add    ebx,0x30
c0010957:	0f be c0             	movsx  eax,al
c001095a:	0f b6 db             	movzx  ebx,bl
c001095d:	50                   	push   eax
c001095e:	e8 81 fe ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010963:	5a                   	pop    edx
c0010964:	5a                   	pop    edx
c0010965:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001096c:	51                   	push   ecx
c001096d:	53                   	push   ebx
c001096e:	e8 71 fe ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010973:	5b                   	pop    ebx
c0010974:	5a                   	pop    edx
c0010975:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001097c:	51                   	push   ecx
c001097d:	6a 25                	push   0x25
c001097f:	e8 60 fe ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010984:	59                   	pop    ecx
c0010985:	5b                   	pop    ebx
c0010986:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001098d:	5b                   	pop    ebx
c001098e:	5e                   	pop    esi
c001098f:	c3                   	ret    

c0010990 <VgaText::updateDiskUsage()>:
c0010990:	55                   	push   ebp
c0010991:	bd 10 27 00 00       	mov    ebp,0x2710
c0010996:	57                   	push   edi
c0010997:	8b 3d 20 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d220
c001099d:	56                   	push   esi
c001099e:	53                   	push   ebx
c001099f:	6a 0f                	push   0xf
c00109a1:	6a 00                	push   0x0
c00109a3:	e8 96 fd ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c00109a8:	5a                   	pop    edx
c00109a9:	0f b6 d8             	movzx  ebx,al
c00109ac:	59                   	pop    ecx
c00109ad:	8b 35 48 26 03 c0    	mov    esi,DWORD PTR ds:0xc0032648
c00109b3:	53                   	push   ebx
c00109b4:	b9 0a 00 00 00       	mov    ecx,0xa
c00109b9:	89 f0                	mov    eax,esi
c00109bb:	99                   	cdq    
c00109bc:	f7 fd                	idiv   ebp
c00109be:	99                   	cdq    
c00109bf:	f7 f9                	idiv   ecx
c00109c1:	8d 42 30             	lea    eax,[edx+0x30]
c00109c4:	0f b6 c0             	movzx  eax,al
c00109c7:	50                   	push   eax
c00109c8:	e8 17 fe ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109cd:	5d                   	pop    ebp
c00109ce:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109d3:	5a                   	pop    edx
c00109d4:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109d8:	53                   	push   ebx
c00109d9:	89 f0                	mov    eax,esi
c00109db:	99                   	cdq    
c00109dc:	f7 fd                	idiv   ebp
c00109de:	99                   	cdq    
c00109df:	f7 f9                	idiv   ecx
c00109e1:	8d 42 30             	lea    eax,[edx+0x30]
c00109e4:	0f b6 c0             	movzx  eax,al
c00109e7:	50                   	push   eax
c00109e8:	e8 f7 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109ed:	5d                   	pop    ebp
c00109ee:	bd 64 00 00 00       	mov    ebp,0x64
c00109f3:	5a                   	pop    edx
c00109f4:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109fb:	53                   	push   ebx
c00109fc:	89 f0                	mov    eax,esi
c00109fe:	99                   	cdq    
c00109ff:	f7 fd                	idiv   ebp
c0010a01:	99                   	cdq    
c0010a02:	f7 f9                	idiv   ecx
c0010a04:	8d 42 30             	lea    eax,[edx+0x30]
c0010a07:	0f b6 c0             	movzx  eax,al
c0010a0a:	50                   	push   eax
c0010a0b:	e8 d4 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a10:	5d                   	pop    ebp
c0010a11:	5a                   	pop    edx
c0010a12:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a19:	53                   	push   ebx
c0010a1a:	89 f0                	mov    eax,esi
c0010a1c:	99                   	cdq    
c0010a1d:	f7 f9                	idiv   ecx
c0010a1f:	89 d6                	mov    esi,edx
c0010a21:	99                   	cdq    
c0010a22:	f7 f9                	idiv   ecx
c0010a24:	8d 42 30             	lea    eax,[edx+0x30]
c0010a27:	0f b6 c0             	movzx  eax,al
c0010a2a:	50                   	push   eax
c0010a2b:	e8 b4 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a30:	5d                   	pop    ebp
c0010a31:	5a                   	pop    edx
c0010a32:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a39:	53                   	push   ebx
c0010a3a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a3d:	0f b6 f0             	movzx  esi,al
c0010a40:	56                   	push   esi
c0010a41:	e8 9e fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a46:	5e                   	pop    esi
c0010a47:	8b 35 44 26 03 c0    	mov    esi,DWORD PTR ds:0xc0032644
c0010a4d:	5d                   	pop    ebp
c0010a4e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a55:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a5a:	53                   	push   ebx
c0010a5b:	89 f0                	mov    eax,esi
c0010a5d:	99                   	cdq    
c0010a5e:	f7 fd                	idiv   ebp
c0010a60:	99                   	cdq    
c0010a61:	f7 f9                	idiv   ecx
c0010a63:	8d 42 30             	lea    eax,[edx+0x30]
c0010a66:	0f b6 c0             	movzx  eax,al
c0010a69:	50                   	push   eax
c0010a6a:	e8 75 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6f:	5a                   	pop    edx
c0010a70:	5d                   	pop    ebp
c0010a71:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a78:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a7d:	53                   	push   ebx
c0010a7e:	89 f0                	mov    eax,esi
c0010a80:	99                   	cdq    
c0010a81:	f7 fd                	idiv   ebp
c0010a83:	99                   	cdq    
c0010a84:	f7 f9                	idiv   ecx
c0010a86:	8d 42 30             	lea    eax,[edx+0x30]
c0010a89:	0f b6 c0             	movzx  eax,al
c0010a8c:	50                   	push   eax
c0010a8d:	e8 52 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a92:	5a                   	pop    edx
c0010a93:	5d                   	pop    ebp
c0010a94:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a9b:	bd 64 00 00 00       	mov    ebp,0x64
c0010aa0:	53                   	push   ebx
c0010aa1:	89 f0                	mov    eax,esi
c0010aa3:	99                   	cdq    
c0010aa4:	f7 fd                	idiv   ebp
c0010aa6:	99                   	cdq    
c0010aa7:	f7 f9                	idiv   ecx
c0010aa9:	83 c2 30             	add    edx,0x30
c0010aac:	0f b6 d2             	movzx  edx,dl
c0010aaf:	52                   	push   edx
c0010ab0:	e8 2f fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab5:	5a                   	pop    edx
c0010ab6:	5d                   	pop    ebp
c0010ab7:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010abe:	53                   	push   ebx
c0010abf:	89 f0                	mov    eax,esi
c0010ac1:	99                   	cdq    
c0010ac2:	f7 f9                	idiv   ecx
c0010ac4:	89 d6                	mov    esi,edx
c0010ac6:	99                   	cdq    
c0010ac7:	f7 f9                	idiv   ecx
c0010ac9:	8d 42 30             	lea    eax,[edx+0x30]
c0010acc:	0f b6 c0             	movzx  eax,al
c0010acf:	50                   	push   eax
c0010ad0:	e8 0f fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad5:	5a                   	pop    edx
c0010ad6:	59                   	pop    ecx
c0010ad7:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ade:	53                   	push   ebx
c0010adf:	8d 46 30             	lea    eax,[esi+0x30]
c0010ae2:	0f b6 f0             	movzx  esi,al
c0010ae5:	56                   	push   esi
c0010ae6:	e8 f9 fc ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aeb:	5b                   	pop    ebx
c0010aec:	5e                   	pop    esi
c0010aed:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010af4:	5b                   	pop    ebx
c0010af5:	5e                   	pop    esi
c0010af6:	5f                   	pop    edi
c0010af7:	5d                   	pop    ebp
c0010af8:	c3                   	ret    
c0010af9:	90                   	nop

c0010afa <VgaText::updateTitle()>:
c0010afa:	53                   	push   ebx
c0010afb:	31 c0                	xor    eax,eax
c0010afd:	83 ec 58             	sub    esp,0x58
c0010b00:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b04:	89 e1                	mov    ecx,esp
c0010b06:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b0a:	40                   	inc    eax
c0010b0b:	83 f8 50             	cmp    eax,0x50
c0010b0e:	75 f6                	jne    c0010b06 <VgaText::updateTitle()+0xc>
c0010b10:	31 c0                	xor    eax,eax
c0010b12:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b19:	84 db                	test   bl,bl
c0010b1b:	74 06                	je     c0010b23 <VgaText::updateTitle()+0x29>
c0010b1d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b20:	40                   	inc    eax
c0010b21:	eb ef                	jmp    c0010b12 <VgaText::updateTitle()+0x18>
c0010b23:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b29:	85 c0                	test   eax,eax
c0010b2b:	74 09                	je     c0010b36 <VgaText::updateTitle()+0x3c>
c0010b2d:	53                   	push   ebx
c0010b2e:	53                   	push   ebx
c0010b2f:	51                   	push   ecx
c0010b30:	52                   	push   edx
c0010b31:	ff d0                	call   eax
c0010b33:	83 c4 10             	add    esp,0x10
c0010b36:	e8 55 fe ff ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0010b3b:	83 c4 58             	add    esp,0x58
c0010b3e:	5b                   	pop    ebx
c0010b3f:	c3                   	ret    

c0010b40 <VgaText::setTitleTextColour(VgaColour)>:
c0010b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b48:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b4e:	eb aa                	jmp    c0010afa <VgaText::updateTitle()>

c0010b50 <VgaText::setTitleColour(VgaColour)>:
c0010b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b58:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b5e:	eb 9a                	jmp    c0010afa <VgaText::updateTitle()>

c0010b60 <VgaText::setTitle(char*)>:
c0010b60:	53                   	push   ebx
c0010b61:	83 ec 10             	sub    esp,0x10
c0010b64:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b6c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b72:	50                   	push   eax
c0010b73:	e8 bc fc fe ff       	call   c0000834 <strcpy>
c0010b78:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b7c:	83 c4 18             	add    esp,0x18
c0010b7f:	5b                   	pop    ebx
c0010b80:	e9 75 ff ff ff       	jmp    c0010afa <VgaText::updateTitle()>
c0010b85:	90                   	nop

c0010b86 <VgaText::decrementCursor(bool)>:
c0010b86:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b8e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b94:	85 c0                	test   eax,eax
c0010b96:	74 07                	je     c0010b9f <VgaText::decrementCursor(bool)+0x19>
c0010b98:	48                   	dec    eax
c0010b99:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010b9f:	84 c9                	test   cl,cl
c0010ba1:	74 09                	je     c0010bac <VgaText::decrementCursor(bool)+0x26>
c0010ba3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010ba7:	e9 56 fa ff ff       	jmp    c0010602 <VgaText::updateCursor()>
c0010bac:	c3                   	ret    
c0010bad:	90                   	nop

c0010bae <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bae:	53                   	push   ebx
c0010baf:	83 ec 08             	sub    esp,0x8
c0010bb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bbe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bc2:	3c 07                	cmp    al,0x7
c0010bc4:	75 2a                	jne    c0010bf0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bc6:	a1 74 e4 02 c0       	mov    eax,ds:0xc002e474
c0010bcb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bd3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bdb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010be3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010be7:	83 c4 08             	add    esp,0x8
c0010bea:	5b                   	pop    ebx
c0010beb:	e9 94 30 00 00       	jmp    c0013c84 <Buzzer::beep(int, int, bool)>
c0010bf0:	3c 0d                	cmp    al,0xd
c0010bf2:	75 0c                	jne    c0010c00 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bf4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bfe:	eb 3b                	jmp    c0010c3b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c00:	3c 0a                	cmp    al,0xa
c0010c02:	75 40                	jne    c0010c44 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c04:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c0a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c14:	8d 50 01             	lea    edx,[eax+0x1]
c0010c17:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c1d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c23:	75 12                	jne    c0010c37 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c25:	83 ec 0c             	sub    esp,0xc
c0010c28:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c2e:	53                   	push   ebx
c0010c2f:	e8 1c fb ff ff       	call   c0010750 <VgaText::scrollScreen()>
c0010c34:	83 c4 10             	add    esp,0x10
c0010c37:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c3b:	83 c4 08             	add    esp,0x8
c0010c3e:	5b                   	pop    ebx
c0010c3f:	e9 be f9 ff ff       	jmp    c0010602 <VgaText::updateCursor()>
c0010c44:	3c 08                	cmp    al,0x8
c0010c46:	75 31                	jne    c0010c79 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c48:	50                   	push   eax
c0010c49:	50                   	push   eax
c0010c4a:	6a 01                	push   0x1
c0010c4c:	53                   	push   ebx
c0010c4d:	e8 34 ff ff ff       	call   c0010b86 <VgaText::decrementCursor(bool)>
c0010c52:	5a                   	pop    edx
c0010c53:	59                   	pop    ecx
c0010c54:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c5a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c60:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c66:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c6c:	6a 20                	push   0x20
c0010c6e:	53                   	push   ebx
c0010c6f:	e8 82 fb ff ff       	call   c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c74:	83 c4 28             	add    esp,0x28
c0010c77:	5b                   	pop    ebx
c0010c78:	c3                   	ret    
c0010c79:	83 ec 08             	sub    esp,0x8
c0010c7c:	0f be c0             	movsx  eax,al
c0010c7f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c85:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c8b:	51                   	push   ecx
c0010c8c:	52                   	push   edx
c0010c8d:	50                   	push   eax
c0010c8e:	53                   	push   ebx
c0010c8f:	e8 62 fb ff ff       	call   c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c94:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c98:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ca0:	83 c4 28             	add    esp,0x28
c0010ca3:	5b                   	pop    ebx
c0010ca4:	e9 1b fc ff ff       	jmp    c00108c4 <VgaText::incrementCursor(bool)>
c0010ca9:	90                   	nop

c0010caa <VgaText::isShowingCursor()>:
c0010caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cae:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cb4:	c3                   	ret    
c0010cb5:	90                   	nop

c0010cb6 <VgaText::isBlinkDisabled()>:
c0010cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cba:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cc0:	83 f0 01             	xor    eax,0x1
c0010cc3:	c3                   	ret    

c0010cc4 <VgaText::setCursorHeight(int)>:
c0010cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ccc:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cd2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cdd:	e9 3a f9 ff ff       	jmp    c001061c <VgaText::showCursor(bool)>

c0010ce2 <VgaText::getCursorHeight()>:
c0010ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cec:	c3                   	ret    

c0010ced <setActiveTerminal(VgaText*)>:
c0010ced:	53                   	push   ebx
c0010cee:	83 ec 08             	sub    esp,0x8
c0010cf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cf5:	85 db                	test   ebx,ebx
c0010cf7:	75 11                	jne    c0010d0a <setActiveTerminal(VgaText*)+0x1d>
c0010cf9:	c7 44 24 10 cc a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2cc
c0010d01:	83 c4 08             	add    esp,0x8
c0010d04:	5b                   	pop    ebx
c0010d05:	e9 21 98 00 00       	jmp    c001a52b <Krnl::panic(char const*)>
c0010d0a:	50                   	push   eax
c0010d0b:	50                   	push   eax
c0010d0c:	53                   	push   ebx
c0010d0d:	68 da a2 02 c0       	push   0xc002a2da
c0010d12:	e8 6f 21 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0010d17:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	85 c0                	test   eax,eax
c0010d21:	74 0c                	je     c0010d2f <setActiveTerminal(VgaText*)+0x42>
c0010d23:	83 ec 0c             	sub    esp,0xc
c0010d26:	50                   	push   eax
c0010d27:	e8 d6 f8 ff ff       	call   c0010602 <VgaText::updateCursor()>
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	89 1d c4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c4,ebx
c0010d35:	51                   	push   ecx
c0010d36:	51                   	push   ecx
c0010d37:	53                   	push   ebx
c0010d38:	68 f2 a2 02 c0       	push   0xc002a2f2
c0010d3d:	e8 44 21 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0010d42:	83 c4 0c             	add    esp,0xc
c0010d45:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d4b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d51:	53                   	push   ebx
c0010d52:	e8 17 fb ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c0010d57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d5a:	e8 57 ff ff ff       	call   c0010cb6 <VgaText::isBlinkDisabled()>
c0010d5f:	5a                   	pop    edx
c0010d60:	0f b6 c0             	movzx  eax,al
c0010d63:	59                   	pop    ecx
c0010d64:	50                   	push   eax
c0010d65:	53                   	push   ebx
c0010d66:	e8 c1 f8 ff ff       	call   c001062c <VgaText::disableBlink(bool)>
c0010d6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6e:	e8 6f ff ff ff       	call   c0010ce2 <VgaText::getCursorHeight()>
c0010d73:	5a                   	pop    edx
c0010d74:	59                   	pop    ecx
c0010d75:	50                   	push   eax
c0010d76:	53                   	push   ebx
c0010d77:	e8 48 ff ff ff       	call   c0010cc4 <VgaText::setCursorHeight(int)>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d86:	75 0a                	jne    c0010d92 <setActiveTerminal(VgaText*)+0xa5>
c0010d88:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d92:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d96:	83 c4 08             	add    esp,0x8
c0010d99:	5b                   	pop    ebx
c0010d9a:	e9 0f f8 ff ff       	jmp    c00105ae <VgaText::load()>

c0010d9f <doTerminalCycle()>:
c0010d9f:	83 ec 18             	sub    esp,0x18
c0010da2:	a1 c0 e3 02 c0       	mov    eax,ds:0xc002e3c0
c0010da7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010dad:	50                   	push   eax
c0010dae:	a3 c0 e3 02 c0       	mov    ds:0xc002e3c0,eax
c0010db3:	e8 35 ff ff ff       	call   c0010ced <setActiveTerminal(VgaText*)>
c0010db8:	83 c4 1c             	add    esp,0x1c
c0010dbb:	c3                   	ret    

c0010dbc <VgaText::doUpdate()>:
c0010dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dc0:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dc6:	85 c0                	test   eax,eax
c0010dc8:	74 02                	je     c0010dcc <VgaText::doUpdate()+0x10>
c0010dca:	ff e0                	jmp    eax
c0010dcc:	c3                   	ret    
c0010dcd:	90                   	nop

c0010dce <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dce:	55                   	push   ebp
c0010dcf:	57                   	push   edi
c0010dd0:	56                   	push   esi
c0010dd1:	53                   	push   ebx
c0010dd2:	83 ec 1c             	sub    esp,0x1c
c0010dd5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010dd9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dde:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010de5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010de8:	50                   	push   eax
c0010de9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dee:	50                   	push   eax
c0010def:	e8 4a f9 ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c0010df4:	59                   	pop    ecx
c0010df5:	0f b6 c0             	movzx  eax,al
c0010df8:	5b                   	pop    ebx
c0010df9:	31 c9                	xor    ecx,ecx
c0010dfb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e03:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e07:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e11:	0f b7 db             	movzx  ebx,bx
c0010e14:	01 db                	add    ebx,ebx
c0010e16:	01 fb                	add    ebx,edi
c0010e18:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e1b:	84 c0                	test   al,al
c0010e1d:	0f 84 38 01 00 00    	je     c0010f5b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e23:	3c 0d                	cmp    al,0xd
c0010e25:	75 0f                	jne    c0010e36 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e27:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e31:	e9 1f 01 00 00       	jmp    c0010f55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e36:	3c 0a                	cmp    al,0xa
c0010e38:	75 5b                	jne    c0010e95 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e3a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e40:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e4a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e4d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e53:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e59:	75 12                	jne    c0010e6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e5b:	83 ec 0c             	sub    esp,0xc
c0010e5e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e64:	55                   	push   ebp
c0010e65:	e8 e6 f8 ff ff       	call   c0010750 <VgaText::scrollScreen()>
c0010e6a:	83 c4 10             	add    esp,0x10
c0010e6d:	83 ec 0c             	sub    esp,0xc
c0010e70:	55                   	push   ebp
c0010e71:	e8 8c f7 ff ff       	call   c0010602 <VgaText::updateCursor()>
c0010e76:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e7e:	83 c4 10             	add    esp,0x10
c0010e81:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e87:	31 c9                	xor    ecx,ecx
c0010e89:	0f b7 db             	movzx  ebx,bx
c0010e8c:	01 db                	add    ebx,ebx
c0010e8e:	01 fb                	add    ebx,edi
c0010e90:	e9 c0 00 00 00       	jmp    c0010f55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e95:	3c 08                	cmp    al,0x8
c0010e97:	75 4e                	jne    c0010ee7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e99:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e9d:	53                   	push   ebx
c0010e9e:	53                   	push   ebx
c0010e9f:	6a 01                	push   0x1
c0010ea1:	55                   	push   ebp
c0010ea2:	e8 df fc ff ff       	call   c0010b86 <VgaText::decrementCursor(bool)>
c0010ea7:	58                   	pop    eax
c0010ea8:	5a                   	pop    edx
c0010ea9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eaf:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010eb5:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ebb:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ec1:	6a 20                	push   0x20
c0010ec3:	55                   	push   ebp
c0010ec4:	e8 2d f9 ff ff       	call   c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ec9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ed1:	83 c4 20             	add    esp,0x20
c0010ed4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eda:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ede:	0f b7 db             	movzx  ebx,bx
c0010ee1:	01 db                	add    ebx,ebx
c0010ee3:	01 fb                	add    ebx,edi
c0010ee5:	eb 6e                	jmp    c0010f55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ee7:	51                   	push   ecx
c0010ee8:	51                   	push   ecx
c0010ee9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010eed:	50                   	push   eax
c0010eee:	e8 f1 f8 ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	66 89 03             	mov    WORD PTR [ebx],ax
c0010ef9:	39 2d c4 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3c4,ebp
c0010eff:	75 2a                	jne    c0010f2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f01:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f07:	85 c0                	test   eax,eax
c0010f09:	74 20                	je     c0010f2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f0b:	52                   	push   edx
c0010f0c:	52                   	push   edx
c0010f0d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f13:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f21:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f24:	51                   	push   ecx
c0010f25:	55                   	push   ebp
c0010f26:	ff d0                	call   eax
c0010f28:	83 c4 20             	add    esp,0x20
c0010f2b:	83 c3 02             	add    ebx,0x2
c0010f2e:	50                   	push   eax
c0010f2f:	50                   	push   eax
c0010f30:	6a 00                	push   0x0
c0010f32:	55                   	push   ebp
c0010f33:	e8 8c f9 ff ff       	call   c00108c4 <VgaText::incrementCursor(bool)>
c0010f38:	83 c4 10             	add    esp,0x10
c0010f3b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f42:	75 0f                	jne    c0010f53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f44:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f4c:	0f b7 db             	movzx  ebx,bx
c0010f4f:	01 db                	add    ebx,ebx
c0010f51:	01 fb                	add    ebx,edi
c0010f53:	b1 01                	mov    cl,0x1
c0010f55:	46                   	inc    esi
c0010f56:	e9 bd fe ff ff       	jmp    c0010e18 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f5b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f5f:	83 ec 0c             	sub    esp,0xc
c0010f62:	55                   	push   ebp
c0010f63:	e8 9a f6 ff ff       	call   c0010602 <VgaText::updateCursor()>
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f6f:	84 c9                	test   cl,cl
c0010f71:	74 0c                	je     c0010f7f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f73:	83 ec 0c             	sub    esp,0xc
c0010f76:	55                   	push   ebp
c0010f77:	e8 40 fe ff ff       	call   c0010dbc <VgaText::doUpdate()>
c0010f7c:	83 c4 10             	add    esp,0x10
c0010f7f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f86:	83 c4 1c             	add    esp,0x1c
c0010f89:	5b                   	pop    ebx
c0010f8a:	5e                   	pop    esi
c0010f8b:	5f                   	pop    edi
c0010f8c:	5d                   	pop    ebp
c0010f8d:	c3                   	ret    

c0010f8e <VgaText::clearScreen()>:
c0010f8e:	57                   	push   edi
c0010f8f:	56                   	push   esi
c0010f90:	31 f6                	xor    esi,esi
c0010f92:	53                   	push   ebx
c0010f93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f97:	52                   	push   edx
c0010f98:	6a 00                	push   0x0
c0010f9a:	6a 00                	push   0x0
c0010f9c:	53                   	push   ebx
c0010f9d:	e8 cc f8 ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c0010fa2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fa9:	83 c4 10             	add    esp,0x10
c0010fac:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fb2:	7e 26                	jle    c0010fda <VgaText::clearScreen()+0x4c>
c0010fb4:	31 ff                	xor    edi,edi
c0010fb6:	50                   	push   eax
c0010fb7:	50                   	push   eax
c0010fb8:	56                   	push   esi
c0010fb9:	57                   	push   edi
c0010fba:	47                   	inc    edi
c0010fbb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fc1:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fc7:	6a 20                	push   0x20
c0010fc9:	53                   	push   ebx
c0010fca:	e8 27 f8 ff ff       	call   c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fcf:	83 c4 20             	add    esp,0x20
c0010fd2:	83 ff 50             	cmp    edi,0x50
c0010fd5:	75 df                	jne    c0010fb6 <VgaText::clearScreen()+0x28>
c0010fd7:	46                   	inc    esi
c0010fd8:	eb d2                	jmp    c0010fac <VgaText::clearScreen()+0x1e>
c0010fda:	83 ec 0c             	sub    esp,0xc
c0010fdd:	53                   	push   ebx
c0010fde:	e8 d9 fd ff ff       	call   c0010dbc <VgaText::doUpdate()>
c0010fe3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fea:	83 c4 10             	add    esp,0x10
c0010fed:	5b                   	pop    ebx
c0010fee:	5e                   	pop    esi
c0010fef:	5f                   	pop    edi
c0010ff0:	c3                   	ret    
c0010ff1:	90                   	nop

c0010ff2 <VgaText::putchar(char)>:
c0010ff2:	56                   	push   esi
c0010ff3:	53                   	push   ebx
c0010ff4:	83 ec 14             	sub    esp,0x14
c0010ff7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ffb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fff:	3c 5b                	cmp    al,0x5b
c0011001:	75 21                	jne    c0011024 <VgaText::putchar(char)+0x32>
c0011003:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001100a:	74 28                	je     c0011034 <VgaText::putchar(char)+0x42>
c001100c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011015:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001101f:	e9 e2 00 00 00       	jmp    c0011106 <VgaText::putchar(char)+0x114>
c0011024:	3c 1b                	cmp    al,0x1b
c0011026:	75 0c                	jne    c0011034 <VgaText::putchar(char)+0x42>
c0011028:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001102f:	e9 d2 00 00 00       	jmp    c0011106 <VgaText::putchar(char)+0x114>
c0011034:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001103a:	84 c9                	test   cl,cl
c001103c:	0f 84 ab 00 00 00    	je     c00110ed <VgaText::putchar(char)+0xfb>
c0011042:	8d 50 c0             	lea    edx,[eax-0x40]
c0011045:	80 fa 3e             	cmp    dl,0x3e
c0011048:	0f 87 82 00 00 00    	ja     c00110d0 <VgaText::putchar(char)+0xde>
c001104e:	3c 6d                	cmp    al,0x6d
c0011050:	75 4d                	jne    c001109f <VgaText::putchar(char)+0xad>
c0011052:	31 f6                	xor    esi,esi
c0011054:	31 d2                	xor    edx,edx
c0011056:	31 c0                	xor    eax,eax
c0011058:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001105e:	7e 30                	jle    c0011090 <VgaText::putchar(char)+0x9e>
c0011060:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011068:	80 fa 3b             	cmp    dl,0x3b
c001106b:	75 17                	jne    c0011084 <VgaText::putchar(char)+0x92>
c001106d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011071:	50                   	push   eax
c0011072:	53                   	push   ebx
c0011073:	e8 ee f5 ff ff       	call   c0010666 <VgaText::doANSI_SGR(int)>
c0011078:	59                   	pop    ecx
c0011079:	31 d2                	xor    edx,edx
c001107b:	58                   	pop    eax
c001107c:	31 c0                	xor    eax,eax
c001107e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011082:	eb 09                	jmp    c001108d <VgaText::putchar(char)+0x9b>
c0011084:	6b c0 0a             	imul   eax,eax,0xa
c0011087:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001108b:	88 ca                	mov    dl,cl
c001108d:	46                   	inc    esi
c001108e:	eb c8                	jmp    c0011058 <VgaText::putchar(char)+0x66>
c0011090:	84 d2                	test   dl,dl
c0011092:	74 31                	je     c00110c5 <VgaText::putchar(char)+0xd3>
c0011094:	50                   	push   eax
c0011095:	53                   	push   ebx
c0011096:	e8 cb f5 ff ff       	call   c0010666 <VgaText::doANSI_SGR(int)>
c001109b:	58                   	pop    eax
c001109c:	5a                   	pop    edx
c001109d:	eb 26                	jmp    c00110c5 <VgaText::putchar(char)+0xd3>
c001109f:	3c 4a                	cmp    al,0x4a
c00110a1:	75 22                	jne    c00110c5 <VgaText::putchar(char)+0xd3>
c00110a3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110aa:	75 19                	jne    c00110c5 <VgaText::putchar(char)+0xd3>
c00110ac:	83 ec 0c             	sub    esp,0xc
c00110af:	53                   	push   ebx
c00110b0:	e8 d9 fe ff ff       	call   c0010f8e <VgaText::clearScreen()>
c00110b5:	83 c4 0c             	add    esp,0xc
c00110b8:	6a 00                	push   0x0
c00110ba:	6a 00                	push   0x0
c00110bc:	53                   	push   ebx
c00110bd:	e8 ac f7 ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110ce:	eb 36                	jmp    c0011106 <VgaText::putchar(char)+0x114>
c00110d0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110d6:	83 fa 0e             	cmp    edx,0xe
c00110d9:	7f 2b                	jg     c0011106 <VgaText::putchar(char)+0x114>
c00110db:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110de:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110e4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110eb:	eb 19                	jmp    c0011106 <VgaText::putchar(char)+0x114>
c00110ed:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110f3:	0f be c0             	movsx  eax,al
c00110f6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110fc:	50                   	push   eax
c00110fd:	53                   	push   ebx
c00110fe:	e8 ab fa ff ff       	call   c0010bae <VgaText::putchar(char, VgaColour, VgaColour)>
c0011103:	83 c4 10             	add    esp,0x10
c0011106:	83 c4 14             	add    esp,0x14
c0011109:	5b                   	pop    ebx
c001110a:	5e                   	pop    esi
c001110b:	c3                   	ret    

c001110c <VgaText::puts(char const*)>:
c001110c:	53                   	push   ebx
c001110d:	83 ec 08             	sub    esp,0x8
c0011110:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011114:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011117:	84 c0                	test   al,al
c0011119:	74 12                	je     c001112d <VgaText::puts(char const*)+0x21>
c001111b:	43                   	inc    ebx
c001111c:	51                   	push   ecx
c001111d:	51                   	push   ecx
c001111e:	50                   	push   eax
c001111f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011123:	e8 ca fe ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c0011128:	83 c4 10             	add    esp,0x10
c001112b:	eb e7                	jmp    c0011114 <VgaText::puts(char const*)+0x8>
c001112d:	83 c4 08             	add    esp,0x8
c0011130:	5b                   	pop    ebx
c0011131:	c3                   	ret    

c0011132 <VgaText::putx(unsigned int)>:
c0011132:	57                   	push   edi
c0011133:	b9 11 00 00 00       	mov    ecx,0x11
c0011138:	56                   	push   esi
c0011139:	be 0e a3 02 c0       	mov    esi,0xc002a30e
c001113e:	53                   	push   ebx
c001113f:	83 ec 20             	sub    esp,0x20
c0011142:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011146:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001114a:	fc                   	cld    
c001114b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001114d:	be 08 00 00 00       	mov    esi,0x8
c0011152:	50                   	push   eax
c0011153:	50                   	push   eax
c0011154:	89 d8                	mov    eax,ebx
c0011156:	c1 e3 04             	shl    ebx,0x4
c0011159:	c1 e8 1c             	shr    eax,0x1c
c001115c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011161:	50                   	push   eax
c0011162:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011166:	e8 87 fe ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c001116b:	83 c4 10             	add    esp,0x10
c001116e:	4e                   	dec    esi
c001116f:	75 e1                	jne    c0011152 <VgaText::putx(unsigned int)+0x20>
c0011171:	83 c4 20             	add    esp,0x20
c0011174:	5b                   	pop    ebx
c0011175:	5e                   	pop    esi
c0011176:	5f                   	pop    edi
c0011177:	c3                   	ret    

c0011178 <VgaText::VgaText(char const*)>:
c0011178:	57                   	push   edi
c0011179:	56                   	push   esi
c001117a:	53                   	push   ebx
c001117b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117f:	83 ec 08             	sub    esp,0x8
c0011182:	6a 00                	push   0x0
c0011184:	50                   	push   eax
c0011185:	e8 6e 05 00 00       	call   c00116f8 <UnixFile::UnixFile(int)>
c001118a:	83 c4 10             	add    esp,0x10
c001118d:	ba 74 a3 02 c0       	mov    edx,0xc002a374
c0011192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011196:	89 10                	mov    DWORD PTR [eax],edx
c0011198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111aa:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b8:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c3:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ce:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111dc:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ea:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f5:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00111fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011200:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011206:	bb a0 e3 02 c0       	mov    ebx,0xc002e3a0
c001120b:	b8 08 00 00 00       	mov    eax,0x8
c0011210:	fc                   	cld    
c0011211:	89 d7                	mov    edi,edx
c0011213:	89 de                	mov    esi,ebx
c0011215:	89 c1                	mov    ecx,eax
c0011217:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121d:	05 1e 10 00 00       	add    eax,0x101e
c0011222:	83 ec 08             	sub    esp,0x8
c0011225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011229:	50                   	push   eax
c001122a:	e8 05 f6 fe ff       	call   c0000834 <strcpy>
c001122f:	83 c4 10             	add    esp,0x10
c0011232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011236:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011244:	83 c0 0c             	add    eax,0xc
c0011247:	83 ec 04             	sub    esp,0x4
c001124a:	68 00 0f 00 00       	push   0xf00
c001124f:	6a 00                	push   0x0
c0011251:	50                   	push   eax
c0011252:	e8 21 f5 fe ff       	call   c0000778 <memset>
c0011257:	83 c4 10             	add    esp,0x10
c001125a:	83 ec 04             	sub    esp,0x4
c001125d:	6a 00                	push   0x0
c001125f:	6a 07                	push   0x7
c0011261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011265:	e8 b4 f4 ff ff       	call   c001071e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001126a:	83 c4 10             	add    esp,0x10
c001126d:	83 ec 08             	sub    esp,0x8
c0011270:	6a 02                	push   0x2
c0011272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011276:	e8 49 fa ff ff       	call   c0010cc4 <VgaText::setCursorHeight(int)>
c001127b:	83 c4 10             	add    esp,0x10
c001127e:	83 ec 04             	sub    esp,0x4
c0011281:	6a 00                	push   0x0
c0011283:	6a 00                	push   0x0
c0011285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011289:	e8 e0 f5 ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c001128e:	83 c4 10             	add    esp,0x10
c0011291:	83 ec 08             	sub    esp,0x8
c0011294:	6a 01                	push   0x1
c0011296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129a:	e8 7d f3 ff ff       	call   c001061c <VgaText::showCursor(bool)>
c001129f:	83 c4 10             	add    esp,0x10
c00112a2:	83 ec 08             	sub    esp,0x8
c00112a5:	6a 01                	push   0x1
c00112a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ab:	e8 7c f3 ff ff       	call   c001062c <VgaText::disableBlink(bool)>
c00112b0:	83 c4 10             	add    esp,0x10
c00112b3:	83 ec 0c             	sub    esp,0xc
c00112b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ba:	e8 cf fc ff ff       	call   c0010f8e <VgaText::clearScreen()>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c6:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d1:	05 9e 10 00 00       	add    eax,0x109e
c00112d6:	83 ec 04             	sub    esp,0x4
c00112d9:	68 96 00 00 00       	push   0x96
c00112de:	6a 00                	push   0x0
c00112e0:	50                   	push   eax
c00112e1:	e8 92 f4 fe ff       	call   c0000778 <memset>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ed:	05 34 11 00 00       	add    eax,0x1134
c00112f2:	83 ec 04             	sub    esp,0x4
c00112f5:	68 2c 01 00 00       	push   0x12c
c00112fa:	6a 00                	push   0x0
c00112fc:	50                   	push   eax
c00112fd:	e8 76 f4 fe ff       	call   c0000778 <memset>
c0011302:	83 c4 10             	add    esp,0x10
c0011305:	90                   	nop
c0011306:	5b                   	pop    ebx
c0011307:	5e                   	pop    esi
c0011308:	5f                   	pop    edi
c0011309:	c3                   	ret    

c001130a <VgaText::receiveKey(unsigned char)>:
c001130a:	55                   	push   ebp
c001130b:	57                   	push   edi
c001130c:	56                   	push   esi
c001130d:	53                   	push   ebx
c001130e:	83 ec 1c             	sub    esp,0x1c
c0011311:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011315:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011319:	84 db                	test   bl,bl
c001131b:	0f 84 c9 00 00 00    	je     c00113ea <VgaText::receiveKey(unsigned char)+0xe0>
c0011321:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011327:	80 fb 08             	cmp    bl,0x8
c001132a:	75 2c                	jne    c0011358 <VgaText::receiveKey(unsigned char)+0x4e>
c001132c:	83 ec 0c             	sub    esp,0xc
c001132f:	57                   	push   edi
c0011330:	e8 5f f4 fe ff       	call   c0000794 <strlen>
c0011335:	83 c4 10             	add    esp,0x10
c0011338:	85 c0                	test   eax,eax
c001133a:	74 41                	je     c001137d <VgaText::receiveKey(unsigned char)+0x73>
c001133c:	50                   	push   eax
c001133d:	50                   	push   eax
c001133e:	6a 08                	push   0x8
c0011340:	56                   	push   esi
c0011341:	e8 ac fc ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c0011346:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011349:	e8 46 f4 fe ff       	call   c0000794 <strlen>
c001134e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011356:	eb 22                	jmp    c001137a <VgaText::receiveKey(unsigned char)+0x70>
c0011358:	0f be c3             	movsx  eax,bl
c001135b:	52                   	push   edx
c001135c:	52                   	push   edx
c001135d:	50                   	push   eax
c001135e:	56                   	push   esi
c001135f:	e8 8e fc ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c0011364:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011368:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001136d:	59                   	pop    ecx
c001136e:	5d                   	pop    ebp
c001136f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011373:	50                   	push   eax
c0011374:	57                   	push   edi
c0011375:	e8 fa f5 fe ff       	call   c0000974 <strcat>
c001137a:	83 c4 10             	add    esp,0x10
c001137d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011384:	75 05                	jne    c001138b <VgaText::receiveKey(unsigned char)+0x81>
c0011386:	80 fb 0a             	cmp    bl,0xa
c0011389:	75 53                	jne    c00113de <VgaText::receiveKey(unsigned char)+0xd4>
c001138b:	83 ec 0c             	sub    esp,0xc
c001138e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011394:	53                   	push   ebx
c0011395:	e8 fa f3 fe ff       	call   c0000794 <strlen>
c001139a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001139d:	89 c5                	mov    ebp,eax
c001139f:	e8 f0 f3 fe ff       	call   c0000794 <strlen>
c00113a4:	83 c4 10             	add    esp,0x10
c00113a7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113ab:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113b0:	76 10                	jbe    c00113c2 <VgaText::receiveKey(unsigned char)+0xb8>
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	68 1f a3 02 c0       	push   0xc002a31f
c00113ba:	e8 6c 91 00 00       	call   c001a52b <Krnl::panic(char const*)>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	50                   	push   eax
c00113c3:	50                   	push   eax
c00113c4:	57                   	push   edi
c00113c5:	53                   	push   ebx
c00113c6:	e8 a9 f5 fe ff       	call   c0000974 <strcat>
c00113cb:	83 c4 0c             	add    esp,0xc
c00113ce:	68 96 00 00 00       	push   0x96
c00113d3:	6a 00                	push   0x0
c00113d5:	57                   	push   edi
c00113d6:	e8 9d f3 fe ff       	call   c0000778 <memset>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	83 ec 0c             	sub    esp,0xc
c00113e1:	56                   	push   esi
c00113e2:	e8 d5 f9 ff ff       	call   c0010dbc <VgaText::doUpdate()>
c00113e7:	83 c4 10             	add    esp,0x10
c00113ea:	83 c4 1c             	add    esp,0x1c
c00113ed:	5b                   	pop    ebx
c00113ee:	5e                   	pop    esi
c00113ef:	5f                   	pop    edi
c00113f0:	5d                   	pop    ebp
c00113f1:	c3                   	ret    

c00113f2 <VgaText::write(unsigned long long, void*, int*)>:
c00113f2:	55                   	push   ebp
c00113f3:	57                   	push   edi
c00113f4:	56                   	push   esi
c00113f5:	53                   	push   ebx
c00113f6:	83 ec 0c             	sub    esp,0xc
c00113f9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113fd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011401:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011405:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001140c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001140f:	39 eb                	cmp    ebx,ebp
c0011411:	74 13                	je     c0011426 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011413:	43                   	inc    ebx
c0011414:	50                   	push   eax
c0011415:	50                   	push   eax
c0011416:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001141a:	50                   	push   eax
c001141b:	56                   	push   esi
c001141c:	e8 d1 fb ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c0011421:	83 c4 10             	add    esp,0x10
c0011424:	eb e9                	jmp    c001140f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011426:	83 ec 0c             	sub    esp,0xc
c0011429:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011430:	56                   	push   esi
c0011431:	e8 86 f9 ff ff       	call   c0010dbc <VgaText::doUpdate()>
c0011436:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001143a:	89 38                	mov    DWORD PTR [eax],edi
c001143c:	83 c4 1c             	add    esp,0x1c
c001143f:	31 c0                	xor    eax,eax
c0011441:	5b                   	pop    ebx
c0011442:	5e                   	pop    esi
c0011443:	5f                   	pop    edi
c0011444:	5d                   	pop    ebp
c0011445:	c3                   	ret    

c0011446 <newTerminal(char*)>:
c0011446:	83 ec 28             	sub    esp,0x28
c0011449:	68 60 12 00 00       	push   0x1260
c001144e:	e8 ed e3 ff ff       	call   c000f840 <malloc>
c0011453:	5a                   	pop    edx
c0011454:	59                   	pop    ecx
c0011455:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011459:	50                   	push   eax
c001145a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001145e:	e8 15 fd ff ff       	call   c0011178 <VgaText::VgaText(char const*)>
c0011463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011467:	83 c4 2c             	add    esp,0x2c
c001146a:	c3                   	ret    
c001146b:	90                   	nop

c001146c <TSS::TSS()>:
c001146c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011470:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011477:	90                   	nop
c0011478:	c3                   	ret    
c0011479:	90                   	nop

c001147a <TSS::setESP(unsigned long)>:
c001147a:	55                   	push   ebp
c001147b:	89 e5                	mov    ebp,esp
c001147d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011480:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011483:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011486:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011489:	90                   	nop
c001148a:	5d                   	pop    ebp
c001148b:	c3                   	ret    

c001148c <TSS::flush()>:
c001148c:	55                   	push   ebp
c001148d:	89 e5                	mov    ebp,esp
c001148f:	83 ec 10             	sub    esp,0x10
c0011492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011495:	8b 00                	mov    eax,DWORD PTR [eax]
c0011497:	83 c8 03             	or     eax,0x3
c001149a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001149e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114a2:	66 89 d0             	mov    ax,dx
c00114a5:	0f 00 d8             	ltr    ax
c00114a8:	90                   	nop
c00114a9:	c9                   	leave  
c00114aa:	c3                   	ret    
c00114ab:	90                   	nop

c00114ac <TSS::setup(unsigned long, unsigned long)>:
c00114ac:	55                   	push   ebp
c00114ad:	89 e5                	mov    ebp,esp
c00114af:	83 ec 18             	sub    esp,0x18
c00114b2:	83 ec 0c             	sub    esp,0xc
c00114b5:	6a 68                	push   0x68
c00114b7:	e8 84 e3 ff ff       	call   c000f840 <malloc>
c00114bc:	83 c4 10             	add    esp,0x10
c00114bf:	89 c2                	mov    edx,eax
c00114c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114cd:	83 ec 04             	sub    esp,0x4
c00114d0:	6a 68                	push   0x68
c00114d2:	6a 00                	push   0x0
c00114d4:	50                   	push   eax
c00114d5:	e8 9e f2 fe ff       	call   c0000778 <memset>
c00114da:	83 c4 10             	add    esp,0x10
c00114dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ef:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114fb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114fe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011504:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011507:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001150d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011513:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011537:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001153d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011540:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011543:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011552:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011558:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001155e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011564:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011567:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001156e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011571:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011574:	0f 20 da             	mov    edx,cr3
c0011577:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001157a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001157d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011583:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011586:	83 ec 08             	sub    esp,0x8
c0011589:	50                   	push   eax
c001158a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001158d:	50                   	push   eax
c001158e:	e8 8b da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c0011593:	83 c4 10             	add    esp,0x10
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	6a 68                	push   0x68
c001159b:	8d 45 ec             	lea    eax,[ebp-0x14]
c001159e:	50                   	push   eax
c001159f:	e8 96 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115ab:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115ae:	83 e0 0f             	and    eax,0xf
c00115b1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115b4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115b7:	83 c8 40             	or     eax,0x40
c00115ba:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115bd:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00115c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115c8:	05 78 01 00 00       	add    eax,0x178
c00115cd:	83 ec 04             	sub    esp,0x4
c00115d0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115d3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115d6:	50                   	push   eax
c00115d7:	e8 92 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115dc:	83 c4 10             	add    esp,0x10
c00115df:	89 c2                	mov    edx,eax
c00115e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e4:	89 10                	mov    DWORD PTR [eax],edx
c00115e6:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00115eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115f1:	05 78 01 00 00       	add    eax,0x178
c00115f6:	83 ec 0c             	sub    esp,0xc
c00115f9:	50                   	push   eax
c00115fa:	e8 b3 da ff ff       	call   c000f0b2 <GDT::flush()>
c00115ff:	83 c4 10             	add    esp,0x10
c0011602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011605:	8b 00                	mov    eax,DWORD PTR [eax]
c0011607:	83 ec 08             	sub    esp,0x8
c001160a:	50                   	push   eax
c001160b:	68 88 a3 02 c0       	push   0xc002a388
c0011610:	e8 71 18 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0011615:	83 c4 10             	add    esp,0x10
c0011618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161b:	8b 00                	mov    eax,DWORD PTR [eax]
c001161d:	c9                   	leave  
c001161e:	c3                   	ret    
c001161f:	90                   	nop

c0011620 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011624:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011630:	75 08                	jne    c001163a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011632:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011638:	eb 38                	jmp    c0011672 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001163a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001163f:	75 17                	jne    c0011658 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011641:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011646:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011649:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001164f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011651:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011655:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011658:	89 c1                	mov    ecx,eax
c001165a:	83 e1 fd             	and    ecx,0xfffffffd
c001165d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011663:	74 cd                	je     c0011632 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011665:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001166a:	83 e0 ef             	and    eax,0xffffffef
c001166d:	83 f8 08             	cmp    eax,0x8
c0011670:	76 c0                	jbe    c0011632 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011672:	31 c0                	xor    eax,eax
c0011674:	c3                   	ret    
c0011675:	90                   	nop

c0011676 <ReservedFilename::isAtty()>:
c0011676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001167d:	31 c0                	xor    eax,eax
c001167f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011685:	74 09                	je     c0011690 <ReservedFilename::isAtty()+0x1a>
c0011687:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001168d:	0f 94 c0             	sete   al
c0011690:	c3                   	ret    
c0011691:	90                   	nop

c0011692 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011696:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001169a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001169d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116a1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116a6:	75 08                	jne    c00116b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116ae:	eb 3d                	jmp    c00116ed <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116b0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116b5:	75 17                	jne    c00116ce <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116bf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00116c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116cb:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116ce:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116d3:	75 04                	jne    c00116d9 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116d5:	89 0a                	mov    DWORD PTR [edx],ecx
c00116d7:	eb 14                	jmp    c00116ed <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116d9:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116de:	74 c8                	je     c00116a8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116e0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116e5:	83 e0 ef             	and    eax,0xffffffef
c00116e8:	83 f8 08             	cmp    eax,0x8
c00116eb:	76 bb                	jbe    c00116a8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116ed:	31 c0                	xor    eax,eax
c00116ef:	c3                   	ret    

c00116f0 <UnixFile::getFileDescriptor()>:
c00116f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116f7:	c3                   	ret    

c00116f8 <UnixFile::UnixFile(int)>:
c00116f8:	53                   	push   ebx
c00116f9:	83 ec 28             	sub    esp,0x28
c00116fc:	ba 74 a4 02 c0       	mov    edx,0xc002a474
c0011701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011705:	89 10                	mov    DWORD PTR [eax],edx
c0011707:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001170f:	0f 8f 8c 01 00 00    	jg     c00118a1 <UnixFile::UnixFile(int)+0x1a9>
c0011715:	a1 80 d2 02 c0       	mov    eax,ds:0xc002d280
c001171a:	8d 50 01             	lea    edx,[eax+0x1]
c001171d:	89 15 80 d2 02 c0    	mov    DWORD PTR ds:0xc002d280,edx
c0011723:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011727:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001172a:	83 ec 08             	sub    esp,0x8
c001172d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011731:	68 58 e4 02 c0       	push   0xc002e458
c0011736:	e8 35 6f 01 00       	call   c0028670 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001173b:	83 c4 10             	add    esp,0x10
c001173e:	a0 54 e4 02 c0       	mov    al,ds:0xc002e454
c0011743:	83 f0 01             	xor    eax,0x1
c0011746:	84 c0                	test   al,al
c0011748:	0f 84 54 01 00 00    	je     c00118a2 <UnixFile::UnixFile(int)+0x1aa>
c001174e:	c6 05 54 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e454,0x1
c0011755:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001175d:	83 ec 0c             	sub    esp,0xc
c0011760:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011764:	e8 d7 e0 ff ff       	call   c000f840 <malloc>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	89 c3                	mov    ebx,eax
c001176e:	83 ec 08             	sub    esp,0x8
c0011771:	68 03 ff ff 0f       	push   0xfffff03
c0011776:	53                   	push   ebx
c0011777:	e8 2c 01 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c001177c:	83 c4 10             	add    esp,0x10
c001177f:	89 1d 4c e4 02 c0    	mov    DWORD PTR ds:0xc002e44c,ebx
c0011785:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011794:	e8 a7 e0 ff ff       	call   c000f840 <malloc>
c0011799:	83 c4 10             	add    esp,0x10
c001179c:	89 c3                	mov    ebx,eax
c001179e:	83 ec 08             	sub    esp,0x8
c00117a1:	68 01 ff ff 0f       	push   0xfffff01
c00117a6:	53                   	push   ebx
c00117a7:	e8 fc 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c00117ac:	83 c4 10             	add    esp,0x10
c00117af:	89 1d 50 e4 02 c0    	mov    DWORD PTR ds:0xc002e450,ebx
c00117b5:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117bd:	83 ec 0c             	sub    esp,0xc
c00117c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117c4:	e8 77 e0 ff ff       	call   c000f840 <malloc>
c00117c9:	83 c4 10             	add    esp,0x10
c00117cc:	89 c3                	mov    ebx,eax
c00117ce:	83 ec 08             	sub    esp,0x8
c00117d1:	68 00 ff ff 0f       	push   0xfffff00
c00117d6:	53                   	push   ebx
c00117d7:	e8 cc 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c00117dc:	83 c4 10             	add    esp,0x10
c00117df:	89 1d 44 e4 02 c0    	mov    DWORD PTR ds:0xc002e444,ebx
c00117e5:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117ed:	83 ec 0c             	sub    esp,0xc
c00117f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117f4:	e8 47 e0 ff ff       	call   c000f840 <malloc>
c00117f9:	83 c4 10             	add    esp,0x10
c00117fc:	89 c3                	mov    ebx,eax
c00117fe:	83 ec 08             	sub    esp,0x8
c0011801:	68 02 ff ff 0f       	push   0xfffff02
c0011806:	53                   	push   ebx
c0011807:	e8 9c 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c001180c:	83 c4 10             	add    esp,0x10
c001180f:	89 1d 48 e4 02 c0    	mov    DWORD PTR ds:0xc002e448,ebx
c0011815:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001181d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011822:	7f 7e                	jg     c00118a2 <UnixFile::UnixFile(int)+0x1aa>
c0011824:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001182c:	83 ec 0c             	sub    esp,0xc
c001182f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011833:	e8 08 e0 ff ff       	call   c000f840 <malloc>
c0011838:	83 c4 10             	add    esp,0x10
c001183b:	89 c3                	mov    ebx,eax
c001183d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011841:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011846:	83 ec 08             	sub    esp,0x8
c0011849:	50                   	push   eax
c001184a:	53                   	push   ebx
c001184b:	e8 58 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c0011850:	83 c4 10             	add    esp,0x10
c0011853:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011857:	89 1c 85 20 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1be0],ebx
c001185e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011866:	83 ec 0c             	sub    esp,0xc
c0011869:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001186d:	e8 ce df ff ff       	call   c000f840 <malloc>
c0011872:	83 c4 10             	add    esp,0x10
c0011875:	89 c3                	mov    ebx,eax
c0011877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001187b:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011880:	83 ec 08             	sub    esp,0x8
c0011883:	50                   	push   eax
c0011884:	53                   	push   ebx
c0011885:	e8 1e 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c001188a:	83 c4 10             	add    esp,0x10
c001188d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011891:	89 1c 85 e0 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c20],ebx
c0011898:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001189c:	e9 7c ff ff ff       	jmp    c001181d <UnixFile::UnixFile(int)+0x125>
c00118a1:	90                   	nop
c00118a2:	83 c4 28             	add    esp,0x28
c00118a5:	5b                   	pop    ebx
c00118a6:	c3                   	ret    
c00118a7:	90                   	nop

c00118a8 <ReservedFilename::ReservedFilename(int)>:
c00118a8:	83 ec 0c             	sub    esp,0xc
c00118ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118af:	83 ec 08             	sub    esp,0x8
c00118b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118b6:	50                   	push   eax
c00118b7:	e8 3c fe ff ff       	call   c00116f8 <UnixFile::UnixFile(int)>
c00118bc:	83 c4 10             	add    esp,0x10
c00118bf:	ba 90 a4 02 c0       	mov    edx,0xc002a490
c00118c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c8:	89 10                	mov    DWORD PTR [eax],edx
c00118ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118d5:	90                   	nop
c00118d6:	83 c4 0c             	add    esp,0xc
c00118d9:	c3                   	ret    

c00118da <UnixFile::~UnixFile()>:
c00118da:	83 ec 1c             	sub    esp,0x1c
c00118dd:	ba 74 a4 02 c0       	mov    edx,0xc002a474
c00118e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118e6:	89 10                	mov    DWORD PTR [eax],edx
c00118e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ef:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118f4:	7f 73                	jg     c0011969 <UnixFile::~UnixFile()+0x8f>
c00118f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118fe:	83 ec 0c             	sub    esp,0xc
c0011901:	68 58 e4 02 c0       	push   0xc002e458
c0011906:	e8 39 6e 01 00       	call   c0028744 <LinkedList<UnixFile>::getFirstElement()>
c001190b:	83 c4 10             	add    esp,0x10
c001190e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	68 58 e4 02 c0       	push   0xc002e458
c001191a:	e8 2d 6e 01 00       	call   c002874c <LinkedList<UnixFile>::removeFirst()>
c001191f:	83 c4 10             	add    esp,0x10
c0011922:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011926:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001192a:	74 40                	je     c001196c <UnixFile::~UnixFile()+0x92>
c001192c:	83 ec 08             	sub    esp,0x8
c001192f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011933:	68 58 e4 02 c0       	push   0xc002e458
c0011938:	e8 33 6d 01 00       	call   c0028670 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001193d:	83 c4 10             	add    esp,0x10
c0011940:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011944:	8d 50 01             	lea    edx,[eax+0x1]
c0011947:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001194b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011950:	0f 94 c0             	sete   al
c0011953:	84 c0                	test   al,al
c0011955:	74 a7                	je     c00118fe <UnixFile::~UnixFile()+0x24>
c0011957:	83 ec 0c             	sub    esp,0xc
c001195a:	68 4c a4 02 c0       	push   0xc002a44c
c001195f:	e8 c7 8b 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0011964:	83 c4 10             	add    esp,0x10
c0011967:	eb 95                	jmp    c00118fe <UnixFile::~UnixFile()+0x24>
c0011969:	90                   	nop
c001196a:	eb 01                	jmp    c001196d <UnixFile::~UnixFile()+0x93>
c001196c:	90                   	nop
c001196d:	90                   	nop
c001196e:	83 c4 1c             	add    esp,0x1c
c0011971:	c3                   	ret    

c0011972 <UnixFile::~UnixFile()>:
c0011972:	83 ec 0c             	sub    esp,0xc
c0011975:	83 ec 0c             	sub    esp,0xc
c0011978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001197c:	e8 59 ff ff ff       	call   c00118da <UnixFile::~UnixFile()>
c0011981:	83 c4 10             	add    esp,0x10
c0011984:	83 ec 08             	sub    esp,0x8
c0011987:	6a 0c                	push   0xc
c0011989:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001198d:	e8 14 14 00 00       	call   c0012da6 <operator delete(void*, unsigned long)>
c0011992:	83 c4 10             	add    esp,0x10
c0011995:	83 c4 0c             	add    esp,0xc
c0011998:	c3                   	ret    
c0011999:	90                   	nop

c001199a <ReservedFilename::~ReservedFilename()>:
c001199a:	83 ec 0c             	sub    esp,0xc
c001199d:	ba 90 a4 02 c0       	mov    edx,0xc002a490
c00119a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119a6:	89 10                	mov    DWORD PTR [eax],edx
c00119a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ac:	83 ec 0c             	sub    esp,0xc
c00119af:	50                   	push   eax
c00119b0:	e8 25 ff ff ff       	call   c00118da <UnixFile::~UnixFile()>
c00119b5:	83 c4 10             	add    esp,0x10
c00119b8:	90                   	nop
c00119b9:	83 c4 0c             	add    esp,0xc
c00119bc:	c3                   	ret    
c00119bd:	90                   	nop

c00119be <ReservedFilename::~ReservedFilename()>:
c00119be:	83 ec 0c             	sub    esp,0xc
c00119c1:	83 ec 0c             	sub    esp,0xc
c00119c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c8:	e8 cd ff ff ff       	call   c001199a <ReservedFilename::~ReservedFilename()>
c00119cd:	83 c4 10             	add    esp,0x10
c00119d0:	83 ec 08             	sub    esp,0x8
c00119d3:	6a 0c                	push   0xc
c00119d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d9:	e8 c8 13 00 00       	call   c0012da6 <operator delete(void*, unsigned long)>
c00119de:	83 c4 10             	add    esp,0x10
c00119e1:	83 c4 0c             	add    esp,0xc
c00119e4:	c3                   	ret    

c00119e5 <getFromFileDescriptor(int)>:
c00119e5:	53                   	push   ebx
c00119e6:	83 ec 08             	sub    esp,0x8
c00119e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119ed:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119f3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119f9:	7f 2c                	jg     c0011a27 <getFromFileDescriptor(int)+0x42>
c00119fb:	83 ec 0c             	sub    esp,0xc
c00119fe:	68 58 e4 02 c0       	push   0xc002e458
c0011a03:	e8 3c 6d 01 00       	call   c0028744 <LinkedList<UnixFile>::getFirstElement()>
c0011a08:	83 c4 10             	add    esp,0x10
c0011a0b:	85 c0                	test   eax,eax
c0011a0d:	75 04                	jne    c0011a13 <getFromFileDescriptor(int)+0x2e>
c0011a0f:	31 c0                	xor    eax,eax
c0011a11:	eb 6e                	jmp    c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a13:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a16:	74 69                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a18:	52                   	push   edx
c0011a19:	52                   	push   edx
c0011a1a:	50                   	push   eax
c0011a1b:	68 58 e4 02 c0       	push   0xc002e458
c0011a20:	e8 c9 6d 01 00       	call   c00287ee <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a25:	eb e1                	jmp    c0011a08 <getFromFileDescriptor(int)+0x23>
c0011a27:	a1 4c e4 02 c0       	mov    eax,ds:0xc002e44c
c0011a2c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a32:	74 4d                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a34:	a1 50 e4 02 c0       	mov    eax,ds:0xc002e450
c0011a39:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a3f:	74 40                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a41:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0011a46:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a4c:	74 33                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a4e:	a1 44 e4 02 c0       	mov    eax,ds:0xc002e444
c0011a53:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a59:	74 26                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a5b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a61:	83 f8 08             	cmp    eax,0x8
c0011a64:	77 09                	ja     c0011a6f <getFromFileDescriptor(int)+0x8a>
c0011a66:	8b 04 85 20 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1be0]
c0011a6d:	eb 12                	jmp    c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a6f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a75:	83 fb 08             	cmp    ebx,0x8
c0011a78:	77 95                	ja     c0011a0f <getFromFileDescriptor(int)+0x2a>
c0011a7a:	8b 04 9d e0 e3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1c20]
c0011a81:	83 c4 08             	add    esp,0x8
c0011a84:	5b                   	pop    ebx
c0011a85:	c3                   	ret    

c0011a86 <__static_initialization_and_destruction_0(int, int)>:
c0011a86:	83 ec 0c             	sub    esp,0xc
c0011a89:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a8e:	75 34                	jne    c0011ac4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a90:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a98:	75 2a                	jne    c0011ac4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a9a:	83 ec 0c             	sub    esp,0xc
c0011a9d:	68 58 e4 02 c0       	push   0xc002e458
c0011aa2:	e8 71 6b 01 00       	call   c0028618 <LinkedList<UnixFile>::LinkedList()>
c0011aa7:	83 c4 10             	add    esp,0x10
c0011aaa:	83 ec 04             	sub    esp,0x4
c0011aad:	68 f8 d1 02 c0       	push   0xc002d1f8
c0011ab2:	68 58 e4 02 c0       	push   0xc002e458
c0011ab7:	68 16 86 02 c0       	push   0xc0028616
c0011abc:	e8 5f 12 00 00       	call   c0012d20 <__cxa_atexit>
c0011ac1:	83 c4 10             	add    esp,0x10
c0011ac4:	90                   	nop
c0011ac5:	83 c4 0c             	add    esp,0xc
c0011ac8:	c3                   	ret    

c0011ac9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ac9:	83 ec 0c             	sub    esp,0xc
c0011acc:	83 ec 08             	sub    esp,0x8
c0011acf:	68 ff ff 00 00       	push   0xffff
c0011ad4:	6a 01                	push   0x1
c0011ad6:	e8 ab ff ff ff       	call   c0011a86 <__static_initialization_and_destruction_0(int, int)>
c0011adb:	83 c4 10             	add    esp,0x10
c0011ade:	83 c4 0c             	add    esp,0xc
c0011ae1:	c3                   	ret    

c0011ae2 <Virt::swappingSetup()>:
c0011ae2:	57                   	push   edi
c0011ae3:	56                   	push   esi
c0011ae4:	53                   	push   ebx
c0011ae5:	83 ec 1c             	sub    esp,0x1c
c0011ae8:	68 14 01 00 00       	push   0x114
c0011aed:	e8 4e dd ff ff       	call   c000f840 <malloc>
c0011af2:	83 c4 0c             	add    esp,0xc
c0011af5:	89 c6                	mov    esi,eax
c0011af7:	ff 35 54 18 03 c0    	push   DWORD PTR ds:0xc0031854
c0011afd:	68 a4 a4 02 c0       	push   0xc002a4a4
c0011b02:	50                   	push   eax
c0011b03:	e8 d6 18 00 00       	call   c00133de <File::File(char const*, Process*)>
c0011b08:	83 c4 10             	add    esp,0x10
c0011b0b:	85 f6                	test   esi,esi
c0011b0d:	0f 84 34 01 00 00    	je     c0011c47 <Virt::swappingSetup()+0x165>
c0011b13:	53                   	push   ebx
c0011b14:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011b18:	50                   	push   eax
c0011b19:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011b1d:	50                   	push   eax
c0011b1e:	56                   	push   esi
c0011b1f:	e8 ca 1b 00 00       	call   c00136ee <File::stat(unsigned long long*, bool*)>
c0011b24:	83 c4 10             	add    esp,0x10
c0011b27:	85 c0                	test   eax,eax
c0011b29:	75 0b                	jne    c0011b36 <Virt::swappingSetup()+0x54>
c0011b2b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011b30:	0f 84 f0 00 00 00    	je     c0011c26 <Virt::swappingSetup()+0x144>
c0011b36:	83 ec 0c             	sub    esp,0xc
c0011b39:	56                   	push   esi
c0011b3a:	e8 7b 1a 00 00       	call   c00135ba <File::unlink()>
c0011b3f:	c7 04 24 ce a4 02 c0 	mov    DWORD PTR [esp],0xc002a4ce
c0011b46:	e8 3b 13 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0011b4b:	58                   	pop    eax
c0011b4c:	5a                   	pop    edx
c0011b4d:	6a 12                	push   0x12
c0011b4f:	56                   	push   esi
c0011b50:	e8 ed 18 00 00       	call   c0013442 <File::open(FileOpenMode)>
c0011b55:	83 c4 10             	add    esp,0x10
c0011b58:	8b 0d 90 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d290
c0011b5e:	85 c9                	test   ecx,ecx
c0011b60:	74 42                	je     c0011ba4 <Virt::swappingSetup()+0xc2>
c0011b62:	31 db                	xor    ebx,ebx
c0011b64:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011b68:	83 ec 0c             	sub    esp,0xc
c0011b6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b6d:	57                   	push   edi
c0011b6e:	68 e2 1a 01 c0       	push   0xc0011ae2
c0011b73:	6a 00                	push   0x0
c0011b75:	68 00 02 00 00       	push   0x200
c0011b7a:	56                   	push   esi
c0011b7b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011b7e:	83 c4 20             	add    esp,0x20
c0011b81:	81 7c 24 04 00 02 00 00 	cmp    DWORD PTR [esp+0x4],0x200
c0011b89:	74 10                	je     c0011b9b <Virt::swappingSetup()+0xb9>
c0011b8b:	83 ec 0c             	sub    esp,0xc
c0011b8e:	68 e6 a4 02 c0       	push   0xc002a4e6
c0011b93:	e8 93 89 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0011b98:	83 c4 10             	add    esp,0x10
c0011b9b:	43                   	inc    ebx
c0011b9c:	39 1d 90 d2 02 c0    	cmp    DWORD PTR ds:0xc002d290,ebx
c0011ba2:	77 c4                	ja     c0011b68 <Virt::swappingSetup()+0x86>
c0011ba4:	83 ec 0c             	sub    esp,0xc
c0011ba7:	56                   	push   esi
c0011ba8:	e8 f3 18 00 00       	call   c00134a0 <File::close()>
c0011bad:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c0011bb2:	31 d2                	xor    edx,edx
c0011bb4:	c1 e0 09             	shl    eax,0x9
c0011bb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011bbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011bbf:	83 c4 10             	add    esp,0x10
c0011bc2:	83 ec 08             	sub    esp,0x8
c0011bc5:	0f ac d0 09          	shrd   eax,edx,0x9
c0011bc9:	31 d2                	xor    edx,edx
c0011bcb:	a3 90 d2 02 c0       	mov    ds:0xc002d290,eax
c0011bd0:	f7 35 8c d2 02 c0    	div    DWORD PTR ds:0xc002d28c
c0011bd6:	c1 e8 05             	shr    eax,0x5
c0011bd9:	50                   	push   eax
c0011bda:	68 04 a5 02 c0       	push   0xc002a504
c0011bdf:	e8 a2 12 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0011be4:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c0011be9:	31 d2                	xor    edx,edx
c0011beb:	f7 35 8c d2 02 c0    	div    DWORD PTR ds:0xc002d28c
c0011bf1:	c1 e8 05             	shr    eax,0x5
c0011bf4:	89 04 24             	mov    DWORD PTR [esp],eax
c0011bf7:	e8 44 dc ff ff       	call   c000f840 <malloc>
c0011bfc:	83 c4 0c             	add    esp,0xc
c0011bff:	89 c1                	mov    ecx,eax
c0011c01:	a3 68 e4 02 c0       	mov    ds:0xc002e468,eax
c0011c06:	31 d2                	xor    edx,edx
c0011c08:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c0011c0d:	f7 35 8c d2 02 c0    	div    DWORD PTR ds:0xc002d28c
c0011c13:	c1 e8 05             	shr    eax,0x5
c0011c16:	50                   	push   eax
c0011c17:	6a 00                	push   0x0
c0011c19:	51                   	push   ecx
c0011c1a:	e8 59 eb fe ff       	call   c0000778 <memset>
c0011c1f:	83 c4 20             	add    esp,0x20
c0011c22:	5b                   	pop    ebx
c0011c23:	5e                   	pop    esi
c0011c24:	5f                   	pop    edi
c0011c25:	c3                   	ret    
c0011c26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c2e:	89 c1                	mov    ecx,eax
c0011c30:	89 d3                	mov    ebx,edx
c0011c32:	09 c3                	or     ebx,eax
c0011c34:	0f 84 fc fe ff ff    	je     c0011b36 <Virt::swappingSetup()+0x54>
c0011c3a:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0011c40:	74 80                	je     c0011bc2 <Virt::swappingSetup()+0xe0>
c0011c42:	e9 ef fe ff ff       	jmp    c0011b36 <Virt::swappingSetup()+0x54>
c0011c47:	83 ec 0c             	sub    esp,0xc
c0011c4a:	68 b4 a4 02 c0       	push   0xc002a4b4
c0011c4f:	e8 d7 88 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0011c54:	83 c4 10             	add    esp,0x10
c0011c57:	e9 b7 fe ff ff       	jmp    c0011b13 <Virt::swappingSetup()+0x31>

c0011c5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011c5c:	53                   	push   ebx
c0011c5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c61:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c65:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011c6b:	89 c8                	mov    eax,ecx
c0011c6d:	d1 e8                	shr    eax,1
c0011c6f:	03 05 88 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d288
c0011c75:	83 e1 01             	and    ecx,0x1
c0011c78:	8a 10                	mov    dl,BYTE PTR [eax]
c0011c7a:	75 09                	jne    c0011c85 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011c7c:	83 e2 f0             	and    edx,0xfffffff0
c0011c7f:	09 da                	or     edx,ebx
c0011c81:	88 10                	mov    BYTE PTR [eax],dl
c0011c83:	5b                   	pop    ebx
c0011c84:	c3                   	ret    
c0011c85:	c1 e3 04             	shl    ebx,0x4
c0011c88:	83 e2 0f             	and    edx,0xf
c0011c8b:	09 da                	or     edx,ebx
c0011c8d:	88 10                	mov    BYTE PTR [eax],dl
c0011c8f:	5b                   	pop    ebx
c0011c90:	c3                   	ret    

c0011c91 <Virt::getPageState(unsigned long)>:
c0011c91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c95:	8b 0d 88 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d288
c0011c9b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011ca1:	89 d0                	mov    eax,edx
c0011ca3:	d1 e8                	shr    eax,1
c0011ca5:	83 e2 01             	and    edx,0x1
c0011ca8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011cab:	75 04                	jne    c0011cb1 <Virt::getPageState(unsigned long)+0x20>
c0011cad:	83 e0 0f             	and    eax,0xf
c0011cb0:	c3                   	ret    
c0011cb1:	c0 e8 04             	shr    al,0x4
c0011cb4:	c3                   	ret    

c0011cb5 <Virt::allocateKernelVirtualPages(int)>:
c0011cb5:	55                   	push   ebp
c0011cb6:	31 ed                	xor    ebp,ebp
c0011cb8:	57                   	push   edi
c0011cb9:	56                   	push   esi
c0011cba:	53                   	push   ebx
c0011cbb:	31 db                	xor    ebx,ebx
c0011cbd:	83 ec 1c             	sub    esp,0x1c
c0011cc0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011cc4:	8b 3d 84 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d284
c0011cca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011ccf:	57                   	push   edi
c0011cd0:	e8 bc ff ff ff       	call   c0011c91 <Virt::getPageState(unsigned long)>
c0011cd5:	5a                   	pop    edx
c0011cd6:	84 c0                	test   al,al
c0011cd8:	75 3a                	jne    c0011d14 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011cda:	85 db                	test   ebx,ebx
c0011cdc:	75 02                	jne    c0011ce0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011cde:	89 fd                	mov    ebp,edi
c0011ce0:	43                   	inc    ebx
c0011ce1:	39 f3                	cmp    ebx,esi
c0011ce3:	74 5a                	je     c0011d3f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011ce5:	47                   	inc    edi
c0011ce6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011cec:	76 31                	jbe    c0011d1f <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011cee:	c7 05 84 d2 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d284,0xc8000
c0011cf8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011cfd:	75 28                	jne    c0011d27 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011cff:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011d04:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011d09:	57                   	push   edi
c0011d0a:	e8 82 ff ff ff       	call   c0011c91 <Virt::getPageState(unsigned long)>
c0011d0f:	5a                   	pop    edx
c0011d10:	84 c0                	test   al,al
c0011d12:	74 c6                	je     c0011cda <Virt::allocateKernelVirtualPages(int)+0x25>
c0011d14:	31 db                	xor    ebx,ebx
c0011d16:	47                   	inc    edi
c0011d17:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011d1d:	77 cf                	ja     c0011cee <Virt::allocateKernelVirtualPages(int)+0x39>
c0011d1f:	89 3d 84 d2 02 c0    	mov    DWORD PTR ds:0xc002d284,edi
c0011d25:	eb a8                	jmp    c0011ccf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011d27:	83 ec 0c             	sub    esp,0xc
c0011d2a:	68 ec a5 02 c0       	push   0xc002a5ec
c0011d2f:	e8 f7 87 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0011d34:	8b 3d 84 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d284
c0011d3a:	83 c4 10             	add    esp,0x10
c0011d3d:	eb 90                	jmp    c0011ccf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011d3f:	89 2d 84 d2 02 c0    	mov    DWORD PTR ds:0xc002d284,ebp
c0011d45:	4b                   	dec    ebx
c0011d46:	74 5f                	je     c0011da7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011d48:	85 f6                	test   esi,esi
c0011d4a:	74 3d                	je     c0011d89 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011d4c:	89 e8                	mov    eax,ebp
c0011d4e:	31 db                	xor    ebx,ebx
c0011d50:	8d 7e ff             	lea    edi,[esi-0x1]
c0011d53:	eb 14                	jmp    c0011d69 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011d55:	6a 01                	push   0x1
c0011d57:	43                   	inc    ebx
c0011d58:	50                   	push   eax
c0011d59:	e8 fe fe ff ff       	call   c0011c5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d5e:	58                   	pop    eax
c0011d5f:	39 f3                	cmp    ebx,esi
c0011d61:	5a                   	pop    edx
c0011d62:	74 25                	je     c0011d89 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011d64:	a1 84 d2 02 c0       	mov    eax,ds:0xc002d284
c0011d69:	8d 50 01             	lea    edx,[eax+0x1]
c0011d6c:	85 db                	test   ebx,ebx
c0011d6e:	89 15 84 d2 02 c0    	mov    DWORD PTR ds:0xc002d284,edx
c0011d74:	74 20                	je     c0011d96 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011d76:	39 df                	cmp    edi,ebx
c0011d78:	75 db                	jne    c0011d55 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011d7a:	6a 03                	push   0x3
c0011d7c:	43                   	inc    ebx
c0011d7d:	50                   	push   eax
c0011d7e:	e8 d9 fe ff ff       	call   c0011c5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d83:	59                   	pop    ecx
c0011d84:	39 f3                	cmp    ebx,esi
c0011d86:	58                   	pop    eax
c0011d87:	75 db                	jne    c0011d64 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011d89:	83 c4 1c             	add    esp,0x1c
c0011d8c:	89 e8                	mov    eax,ebp
c0011d8e:	5b                   	pop    ebx
c0011d8f:	c1 e0 0c             	shl    eax,0xc
c0011d92:	5e                   	pop    esi
c0011d93:	5f                   	pop    edi
c0011d94:	5d                   	pop    ebp
c0011d95:	c3                   	ret    
c0011d96:	6a 02                	push   0x2
c0011d98:	bb 01 00 00 00       	mov    ebx,0x1
c0011d9d:	50                   	push   eax
c0011d9e:	e8 b9 fe ff ff       	call   c0011c5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011da3:	58                   	pop    eax
c0011da4:	5a                   	pop    edx
c0011da5:	eb bd                	jmp    c0011d64 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011da7:	6a 04                	push   0x4
c0011da9:	8d 45 01             	lea    eax,[ebp+0x1]
c0011dac:	55                   	push   ebp
c0011dad:	a3 84 d2 02 c0       	mov    ds:0xc002d284,eax
c0011db2:	e8 a5 fe ff ff       	call   c0011c5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db7:	59                   	pop    ecx
c0011db8:	89 e8                	mov    eax,ebp
c0011dba:	5b                   	pop    ebx
c0011dbb:	c1 e0 0c             	shl    eax,0xc
c0011dbe:	83 c4 1c             	add    esp,0x1c
c0011dc1:	5b                   	pop    ebx
c0011dc2:	5e                   	pop    esi
c0011dc3:	5f                   	pop    edi
c0011dc4:	5d                   	pop    ebp
c0011dc5:	c3                   	ret    

c0011dc6 <Virt::freeSwapfilePage(unsigned long)>:
c0011dc6:	53                   	push   ebx
c0011dc7:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c0011dcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011dd1:	b8 01 00 00 00       	mov    eax,0x1
c0011dd6:	89 cb                	mov    ebx,ecx
c0011dd8:	d3 e0                	shl    eax,cl
c0011dda:	c1 eb 05             	shr    ebx,0x5
c0011ddd:	f7 d0                	not    eax
c0011ddf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011de2:	5b                   	pop    ebx
c0011de3:	c3                   	ret    

c0011de4 <Virt::swapIDToSector(unsigned long)>:
c0011de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011de8:	0f af 05 8c d2 02 c0 	imul   eax,DWORD PTR ds:0xc002d28c
c0011def:	03 05 94 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d294
c0011df5:	c3                   	ret    

c0011df6 <Virt::allocateSwapfilePage()>:
c0011df6:	55                   	push   ebp
c0011df7:	31 d2                	xor    edx,edx
c0011df9:	57                   	push   edi
c0011dfa:	56                   	push   esi
c0011dfb:	53                   	push   ebx
c0011dfc:	83 ec 0c             	sub    esp,0xc
c0011dff:	8b 0d 8c d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d28c
c0011e05:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c0011e0a:	f7 f1                	div    ecx
c0011e0c:	39 0d 90 d2 02 c0    	cmp    DWORD PTR ds:0xc002d290,ecx
c0011e12:	72 2d                	jb     c0011e41 <Virt::allocateSwapfilePage()+0x4b>
c0011e14:	8b 35 68 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e468
c0011e1a:	8b 16                	mov    edx,DWORD PTR [esi]
c0011e1c:	f6 c2 01             	test   dl,0x1
c0011e1f:	74 3c                	je     c0011e5d <Virt::allocateSwapfilePage()+0x67>
c0011e21:	31 c9                	xor    ecx,ecx
c0011e23:	bf 01 00 00 00       	mov    edi,0x1
c0011e28:	eb 12                	jmp    c0011e3c <Virt::allocateSwapfilePage()+0x46>
c0011e2a:	89 fd                	mov    ebp,edi
c0011e2c:	89 ca                	mov    edx,ecx
c0011e2e:	d3 e5                	shl    ebp,cl
c0011e30:	c1 ea 05             	shr    edx,0x5
c0011e33:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011e36:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011e38:	85 ea                	test   edx,ebp
c0011e3a:	74 2a                	je     c0011e66 <Virt::allocateSwapfilePage()+0x70>
c0011e3c:	41                   	inc    ecx
c0011e3d:	39 c8                	cmp    eax,ecx
c0011e3f:	77 e9                	ja     c0011e2a <Virt::allocateSwapfilePage()+0x34>
c0011e41:	83 ec 0c             	sub    esp,0xc
c0011e44:	68 1f a5 02 c0       	push   0xc002a51f
c0011e49:	e8 dd 86 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0011e4e:	83 c4 10             	add    esp,0x10
c0011e51:	31 c9                	xor    ecx,ecx
c0011e53:	83 c4 0c             	add    esp,0xc
c0011e56:	89 c8                	mov    eax,ecx
c0011e58:	5b                   	pop    ebx
c0011e59:	5e                   	pop    esi
c0011e5a:	5f                   	pop    edi
c0011e5b:	5d                   	pop    ebp
c0011e5c:	c3                   	ret    
c0011e5d:	89 f3                	mov    ebx,esi
c0011e5f:	bd 01 00 00 00       	mov    ebp,0x1
c0011e64:	31 c9                	xor    ecx,ecx
c0011e66:	09 ea                	or     edx,ebp
c0011e68:	89 c8                	mov    eax,ecx
c0011e6a:	89 13                	mov    DWORD PTR [ebx],edx
c0011e6c:	83 c4 0c             	add    esp,0xc
c0011e6f:	5b                   	pop    ebx
c0011e70:	5e                   	pop    esi
c0011e71:	5f                   	pop    edi
c0011e72:	5d                   	pop    ebp
c0011e73:	c3                   	ret    

c0011e74 <Virt::virtualMemorySetup()>:
c0011e74:	53                   	push   ebx
c0011e75:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011e7a:	83 ec 08             	sub    esp,0x8
c0011e7d:	6a 0f                	push   0xf
c0011e7f:	53                   	push   ebx
c0011e80:	43                   	inc    ebx
c0011e81:	e8 d6 fd ff ff       	call   c0011c5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011e86:	59                   	pop    ecx
c0011e87:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011e8d:	58                   	pop    eax
c0011e8e:	75 ed                	jne    c0011e7d <Virt::virtualMemorySetup()+0x9>
c0011e90:	83 ec 08             	sub    esp,0x8
c0011e93:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011e98:	68 00 00 00 c8       	push   0xc8000000
c0011e9d:	68 36 a5 02 c0       	push   0xc002a536
c0011ea2:	e8 df 0f 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0011ea7:	58                   	pop    eax
c0011ea8:	5a                   	pop    edx
c0011ea9:	68 00 f0 ff ef       	push   0xeffff000
c0011eae:	68 4a a5 02 c0       	push   0xc002a54a
c0011eb3:	e8 ce 0f 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0011eb8:	83 c4 10             	add    esp,0x10
c0011ebb:	83 ec 08             	sub    esp,0x8
c0011ebe:	6a 00                	push   0x0
c0011ec0:	53                   	push   ebx
c0011ec1:	43                   	inc    ebx
c0011ec2:	e8 95 fd ff ff       	call   c0011c5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ec7:	83 c4 10             	add    esp,0x10
c0011eca:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011ed0:	75 e9                	jne    c0011ebb <Virt::virtualMemorySetup()+0x47>
c0011ed2:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011ed7:	83 ec 08             	sub    esp,0x8
c0011eda:	6a 0f                	push   0xf
c0011edc:	53                   	push   ebx
c0011edd:	43                   	inc    ebx
c0011ede:	e8 79 fd ff ff       	call   c0011c5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ee3:	83 c4 10             	add    esp,0x10
c0011ee6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011eec:	75 e9                	jne    c0011ed7 <Virt::virtualMemorySetup()+0x63>
c0011eee:	83 c4 08             	add    esp,0x8
c0011ef1:	5b                   	pop    ebx
c0011ef2:	c3                   	ret    

c0011ef3 <Virt::getAKernelVAS()>:
c0011ef3:	a1 6c e4 02 c0       	mov    eax,ds:0xc002e46c
c0011ef8:	c3                   	ret    
c0011ef9:	90                   	nop

c0011efa <VAS::VAS()>:
c0011efa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011efe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f09:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f14:	a3 6c e4 02 c0       	mov    ds:0xc002e46c,eax
c0011f19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f1d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f25:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f2c:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f33:	90                   	nop
c0011f34:	c3                   	ret    
c0011f35:	90                   	nop

c0011f36 <VAS::VAS(VAS*)>:
c0011f36:	83 ec 0c             	sub    esp,0xc
c0011f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f48:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f4f:	83 ec 0c             	sub    esp,0xc
c0011f52:	68 0c a6 02 c0       	push   0xc002a60c
c0011f57:	e8 cf 85 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0011f5c:	83 c4 10             	add    esp,0x10
c0011f5f:	90                   	nop
c0011f60:	83 c4 0c             	add    esp,0xc
c0011f63:	c3                   	ret    

c0011f64 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f68:	89 c2                	mov    edx,eax
c0011f6a:	c1 e8 0a             	shr    eax,0xa
c0011f6d:	c1 ea 16             	shr    edx,0x16
c0011f70:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f75:	19 c9                	sbb    ecx,ecx
c0011f77:	c1 e2 0c             	shl    edx,0xc
c0011f7a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f80:	25 fc 0f 00 00       	and    eax,0xffc
c0011f85:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011f8c:	01 d0                	add    eax,edx
c0011f8e:	c3                   	ret    
c0011f8f:	90                   	nop

c0011f90 <VAS::getPageTableEntry(unsigned long)>:
c0011f90:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f94:	89 ca                	mov    edx,ecx
c0011f96:	c1 e9 0a             	shr    ecx,0xa
c0011f99:	c1 ea 16             	shr    edx,0x16
c0011f9c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fa2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011fa8:	c1 e0 0c             	shl    eax,0xc
c0011fab:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011fae:	c3                   	ret    

c0011faf <Virt::freeKernelVirtualPages(unsigned long)>:
c0011faf:	57                   	push   edi
c0011fb0:	56                   	push   esi
c0011fb1:	be 01 00 00 00       	mov    esi,0x1
c0011fb6:	53                   	push   ebx
c0011fb7:	83 ec 10             	sub    esp,0x10
c0011fba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fbe:	c1 eb 0c             	shr    ebx,0xc
c0011fc1:	eb 3f                	jmp    c0012002 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011fc3:	e8 2b ff ff ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c0011fc8:	83 ec 08             	sub    esp,0x8
c0011fcb:	57                   	push   edi
c0011fcc:	50                   	push   eax
c0011fcd:	e8 be ff ff ff       	call   c0011f90 <VAS::getPageTableEntry(unsigned long)>
c0011fd2:	83 c4 10             	add    esp,0x10
c0011fd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fd7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fdb:	f6 c4 04             	test   ah,0x4
c0011fde:	75 5f                	jne    c001203f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011fe0:	80 fa 04             	cmp    dl,0x4
c0011fe3:	74 78                	je     c001205d <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011fe5:	80 fa 02             	cmp    dl,0x2
c0011fe8:	0f 84 88 00 00 00    	je     c0012076 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011fee:	80 fa 03             	cmp    dl,0x3
c0011ff1:	0f 84 ad 00 00 00    	je     c00120a4 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ff7:	fe ca                	dec    dl
c0011ff9:	0f 84 92 00 00 00    	je     c0012091 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fff:	43                   	inc    ebx
c0012000:	31 f6                	xor    esi,esi
c0012002:	53                   	push   ebx
c0012003:	e8 89 fc ff ff       	call   c0011c91 <Virt::getPageState(unsigned long)>
c0012008:	5f                   	pop    edi
c0012009:	89 df                	mov    edi,ebx
c001200b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001200f:	c1 e7 0c             	shl    edi,0xc
c0012012:	84 c0                	test   al,al
c0012014:	75 ad                	jne    c0011fc3 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	68 5e a5 02 c0       	push   0xc002a55e
c001201e:	e8 08 85 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0012023:	e8 cb fe ff ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c0012028:	5a                   	pop    edx
c0012029:	59                   	pop    ecx
c001202a:	57                   	push   edi
c001202b:	50                   	push   eax
c001202c:	e8 5f ff ff ff       	call   c0011f90 <VAS::getPageTableEntry(unsigned long)>
c0012031:	83 c4 10             	add    esp,0x10
c0012034:	8b 00                	mov    eax,DWORD PTR [eax]
c0012036:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001203a:	f6 c4 04             	test   ah,0x4
c001203d:	74 c0                	je     c0011fff <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001203f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0012043:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012048:	83 ec 0c             	sub    esp,0xc
c001204b:	50                   	push   eax
c001204c:	e8 02 de ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0012051:	83 c4 10             	add    esp,0x10
c0012054:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012058:	80 fa 04             	cmp    dl,0x4
c001205b:	75 88                	jne    c0011fe5 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001205d:	89 f0                	mov    eax,esi
c001205f:	84 c0                	test   al,al
c0012061:	75 47                	jne    c00120aa <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0012063:	c7 44 24 20 30 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a630
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	5b                   	pop    ebx
c001206f:	5e                   	pop    esi
c0012070:	5f                   	pop    edi
c0012071:	e9 b5 84 00 00       	jmp    c001a52b <Krnl::panic(char const*)>
c0012076:	89 f0                	mov    eax,esi
c0012078:	84 c0                	test   al,al
c001207a:	75 15                	jne    c0012091 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001207c:	83 ec 0c             	sub    esp,0xc
c001207f:	68 7a a5 02 c0       	push   0xc002a57a
c0012084:	e8 a2 84 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0012089:	83 c4 10             	add    esp,0x10
c001208c:	e9 6e ff ff ff       	jmp    c0011fff <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012091:	83 ec 08             	sub    esp,0x8
c0012094:	6a 00                	push   0x0
c0012096:	53                   	push   ebx
c0012097:	e8 c0 fb ff ff       	call   c0011c5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001209c:	83 c4 10             	add    esp,0x10
c001209f:	e9 5b ff ff ff       	jmp    c0011fff <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120a4:	89 f0                	mov    eax,esi
c00120a6:	84 c0                	test   al,al
c00120a8:	75 15                	jne    c00120bf <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120aa:	83 ec 08             	sub    esp,0x8
c00120ad:	6a 00                	push   0x0
c00120af:	53                   	push   ebx
c00120b0:	e8 a7 fb ff ff       	call   c0011c5c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120b5:	83 c4 10             	add    esp,0x10
c00120b8:	83 c4 10             	add    esp,0x10
c00120bb:	5b                   	pop    ebx
c00120bc:	5e                   	pop    esi
c00120bd:	5f                   	pop    edi
c00120be:	c3                   	ret    
c00120bf:	c7 44 24 20 96 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a596
c00120c7:	83 c4 10             	add    esp,0x10
c00120ca:	5b                   	pop    ebx
c00120cb:	5e                   	pop    esi
c00120cc:	5f                   	pop    edi
c00120cd:	e9 59 84 00 00       	jmp    c001a52b <Krnl::panic(char const*)>

c00120d2 <VAS::freeAllocatedPages(unsigned long)>:
c00120d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120da:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00120de:	74 09                	je     c00120e9 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00120e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00120e4:	e9 c6 fe ff ff       	jmp    c0011faf <Virt::freeKernelVirtualPages(unsigned long)>
c00120e9:	c7 44 24 04 54 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a654
c00120f1:	e9 90 0d 00 00       	jmp    c0012e86 <Dbg::kprintf(char const*, ...)>

c00120f6 <VAS::virtualToPhysical(unsigned long)>:
c00120f6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120fa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120fe:	e8 8d fe ff ff       	call   c0011f90 <VAS::getPageTableEntry(unsigned long)>
c0012103:	5a                   	pop    edx
c0012104:	8b 00                	mov    eax,DWORD PTR [eax]
c0012106:	59                   	pop    ecx
c0012107:	25 00 f0 ff ff       	and    eax,0xfffff000
c001210c:	c3                   	ret    
c001210d:	90                   	nop

c001210e <VAS::reflagRange(unsigned long, int, int, int)>:
c001210e:	55                   	push   ebp
c001210f:	57                   	push   edi
c0012110:	56                   	push   esi
c0012111:	53                   	push   ebx
c0012112:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012116:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001211a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001211e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012122:	85 db                	test   ebx,ebx
c0012124:	7e 22                	jle    c0012148 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012126:	c1 e3 0c             	shl    ebx,0xc
c0012129:	01 f3                	add    ebx,esi
c001212b:	56                   	push   esi
c001212c:	81 c6 00 10 00 00    	add    esi,0x1000
c0012132:	55                   	push   ebp
c0012133:	e8 58 fe ff ff       	call   c0011f90 <VAS::getPageTableEntry(unsigned long)>
c0012138:	5a                   	pop    edx
c0012139:	59                   	pop    ecx
c001213a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001213c:	21 f9                	and    ecx,edi
c001213e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012142:	39 f3                	cmp    ebx,esi
c0012144:	89 08                	mov    DWORD PTR [eax],ecx
c0012146:	75 e3                	jne    c001212b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012148:	5b                   	pop    ebx
c0012149:	5e                   	pop    esi
c001214a:	5f                   	pop    edi
c001214b:	5d                   	pop    ebp
c001214c:	c3                   	ret    
c001214d:	90                   	nop

c001214e <VAS::setToWriteCombining(unsigned long, int)>:
c001214e:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0012153:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012159:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012160:	75 01                	jne    c0012163 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012162:	c3                   	ret    
c0012163:	68 80 00 00 00       	push   0x80
c0012168:	6a ff                	push   0xffffffff
c001216a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001216e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012172:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012176:	e8 93 ff ff ff       	call   c001210e <VAS::reflagRange(unsigned long, int, int, int)>
c001217b:	83 c4 14             	add    esp,0x14
c001217e:	c3                   	ret    
c001217f:	90                   	nop

c0012180 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012180:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012189:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001218c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012190:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012193:	19 c0                	sbb    eax,eax
c0012195:	83 ca 03             	or     edx,0x3
c0012198:	83 e0 fc             	and    eax,0xfffffffc
c001219b:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121a2:	0f 20 d8             	mov    eax,cr3
c00121a5:	0f 22 d8             	mov    cr3,eax
c00121a8:	c3                   	ret    
c00121a9:	90                   	nop

c00121aa <VAS::~VAS()>:
c00121aa:	83 ec 2c             	sub    esp,0x2c
c00121ad:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121b5:	e8 66 bb 00 00       	call   c001dd20 <lockScheduler()>
c00121ba:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00121c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121c4:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121ca:	83 ec 04             	sub    esp,0x4
c00121cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00121d1:	6a 01                	push   0x1
c00121d3:	50                   	push   eax
c00121d4:	e8 a7 ff ff ff       	call   c0012180 <VAS::mapOtherVASIn(bool, VAS*)>
c00121d9:	83 c4 10             	add    esp,0x10
c00121dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121e4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00121ec:	0f 8f d7 00 00 00    	jg     c00122c9 <VAS::~VAS()+0x11f>
c00121f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121f6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121fd:	c1 e2 02             	shl    edx,0x2
c0012200:	01 d0                	add    eax,edx
c0012202:	8b 00                	mov    eax,DWORD PTR [eax]
c0012204:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001220c:	83 e0 01             	and    eax,0x1
c001220f:	0f 84 ab 00 00 00    	je     c00122c0 <VAS::~VAS()+0x116>
c0012215:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001221d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012225:	7f 75                	jg     c001229c <VAS::~VAS()+0xf2>
c0012227:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001222b:	c1 e0 0a             	shl    eax,0xa
c001222e:	89 c2                	mov    edx,eax
c0012230:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012234:	01 d0                	add    eax,edx
c0012236:	c1 e0 0c             	shl    eax,0xc
c0012239:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001223d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012242:	8b 00                	mov    eax,DWORD PTR [eax]
c0012244:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012247:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001224d:	83 ec 04             	sub    esp,0x4
c0012250:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012254:	6a 01                	push   0x1
c0012256:	50                   	push   eax
c0012257:	e8 08 fd ff ff       	call   c0011f64 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001225c:	83 c4 10             	add    esp,0x10
c001225f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012263:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012267:	8b 00                	mov    eax,DWORD PTR [eax]
c0012269:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001226d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012271:	25 01 04 00 00       	and    eax,0x401
c0012276:	3d 01 04 00 00       	cmp    eax,0x401
c001227b:	75 19                	jne    c0012296 <VAS::~VAS()+0xec>
c001227d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012281:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012286:	83 ec 0c             	sub    esp,0xc
c0012289:	50                   	push   eax
c001228a:	e8 c4 db ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001228f:	83 c4 10             	add    esp,0x10
c0012292:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012296:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001229a:	eb 81                	jmp    c001221d <VAS::~VAS()+0x73>
c001229c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122a0:	25 00 04 00 00       	and    eax,0x400
c00122a5:	74 19                	je     c00122c0 <VAS::~VAS()+0x116>
c00122a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122b0:	83 ec 0c             	sub    esp,0xc
c00122b3:	50                   	push   eax
c00122b4:	e8 9a db ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00122b9:	83 c4 10             	add    esp,0x10
c00122bc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122c0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122c4:	e9 1b ff ff ff       	jmp    c00121e4 <VAS::~VAS()+0x3a>
c00122c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122d0:	83 ec 0c             	sub    esp,0xc
c00122d3:	50                   	push   eax
c00122d4:	e8 d6 fc ff ff       	call   c0011faf <Virt::freeKernelVirtualPages(unsigned long)>
c00122d9:	83 c4 10             	add    esp,0x10
c00122dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122e3:	83 ec 0c             	sub    esp,0xc
c00122e6:	50                   	push   eax
c00122e7:	e8 67 db ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00122ec:	83 c4 10             	add    esp,0x10
c00122ef:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00122f7:	c1 e0 02             	shl    eax,0x2
c00122fa:	83 ec 08             	sub    esp,0x8
c00122fd:	50                   	push   eax
c00122fe:	68 78 a6 02 c0       	push   0xc002a678
c0012303:	e8 7e 0b 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0012308:	83 c4 10             	add    esp,0x10
c001230b:	e8 12 ba 00 00       	call   c001dd22 <unlockScheduler()>
c0012310:	90                   	nop
c0012311:	83 c4 2c             	add    esp,0x2c
c0012314:	c3                   	ret    
c0012315:	90                   	nop

c0012316 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012316:	55                   	push   ebp
c0012317:	57                   	push   edi
c0012318:	56                   	push   esi
c0012319:	53                   	push   ebx
c001231a:	83 ec 1c             	sub    esp,0x1c
c001231d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012321:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012325:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001232b:	77 08                	ja     c0012335 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001232d:	0f 20 d8             	mov    eax,cr3
c0012330:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012333:	75 47                	jne    c001237c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012335:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012339:	09 d8                	or     eax,ebx
c001233b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012340:	75 57                	jne    c0012399 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012342:	89 de                	mov    esi,ebx
c0012344:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012347:	c1 ee 16             	shr    esi,0x16
c001234a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012351:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012355:	74 54                	je     c00123ab <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012357:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001235b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012361:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012365:	c1 e6 0c             	shl    esi,0xc
c0012368:	c1 eb 0a             	shr    ebx,0xa
c001236b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012371:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012374:	83 c4 1c             	add    esp,0x1c
c0012377:	5b                   	pop    ebx
c0012378:	5e                   	pop    esi
c0012379:	5f                   	pop    edi
c001237a:	5d                   	pop    ebp
c001237b:	c3                   	ret    
c001237c:	83 ec 0c             	sub    esp,0xc
c001237f:	68 98 a6 02 c0       	push   0xc002a698
c0012384:	e8 fd 0a 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0012389:	83 c4 10             	add    esp,0x10
c001238c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012390:	09 d8                	or     eax,ebx
c0012392:	a9 ff 0f 00 00       	test   eax,0xfff
c0012397:	74 a9                	je     c0012342 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012399:	83 ec 0c             	sub    esp,0xc
c001239c:	68 00 a7 02 c0       	push   0xc002a700
c00123a1:	e8 85 81 00 00       	call   c001a52b <Krnl::panic(char const*)>
c00123a6:	83 c4 10             	add    esp,0x10
c00123a9:	eb 97                	jmp    c0012342 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123af:	e8 29 db ff ff       	call   c000fedd <Phys::allocatePage()>
c00123b4:	89 c5                	mov    ebp,eax
c00123b6:	e8 38 fb ff ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c00123bb:	83 ec 0c             	sub    esp,0xc
c00123be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123c2:	6a 01                	push   0x1
c00123c4:	e8 ec f8 ff ff       	call   c0011cb5 <Virt::allocateKernelVirtualPages(int)>
c00123c9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123d0:	6a 01                	push   0x1
c00123d2:	50                   	push   eax
c00123d3:	55                   	push   ebp
c00123d4:	81 cd 07 04 00 00    	or     ebp,0x407
c00123da:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123de:	51                   	push   ecx
c00123df:	e8 26 02 00 00       	call   c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123e4:	83 c4 1c             	add    esp,0x1c
c00123e7:	68 00 10 00 00       	push   0x1000
c00123ec:	6a 00                	push   0x0
c00123ee:	50                   	push   eax
c00123ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123f3:	e8 80 e3 fe ff       	call   c0000778 <memset>
c00123f8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00123fc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00123ff:	e8 ab fb ff ff       	call   c0011faf <Virt::freeKernelVirtualPages(unsigned long)>
c0012404:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012408:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001240b:	83 c4 10             	add    esp,0x10
c001240e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012411:	e9 41 ff ff ff       	jmp    c0012357 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012416 <VAS::allocatePages(int, int)>:
c0012416:	55                   	push   ebp
c0012417:	57                   	push   edi
c0012418:	56                   	push   esi
c0012419:	53                   	push   ebx
c001241a:	83 ec 1c             	sub    esp,0x1c
c001241d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012421:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0012426:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001242c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012432:	83 e0 01             	and    eax,0x1
c0012435:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012439:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001243d:	0f 85 cc 00 00 00    	jne    c001250f <VAS::allocatePages(int, int)+0xf9>
c0012443:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012446:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001244a:	85 c0                	test   eax,eax
c001244c:	0f 84 a1 00 00 00    	je     c00124f3 <VAS::allocatePages(int, int)+0xdd>
c0012452:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012456:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001245a:	c1 e6 0c             	shl    esi,0xc
c001245d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012461:	85 c0                	test   eax,eax
c0012463:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012466:	7e 33                	jle    c001249b <VAS::allocatePages(int, int)+0x85>
c0012468:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001246c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012470:	81 cd 00 04 00 00    	or     ebp,0x400
c0012476:	e8 62 da ff ff       	call   c000fedd <Phys::allocatePage()>
c001247b:	55                   	push   ebp
c001247c:	53                   	push   ebx
c001247d:	50                   	push   eax
c001247e:	57                   	push   edi
c001247f:	e8 92 fe ff ff       	call   c0012316 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012484:	83 c4 10             	add    esp,0x10
c0012487:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001248c:	74 03                	je     c0012491 <VAS::allocatePages(int, int)+0x7b>
c001248e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012491:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012497:	39 de                	cmp    esi,ebx
c0012499:	75 db                	jne    c0012476 <VAS::allocatePages(int, int)+0x60>
c001249b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124a0:	75 12                	jne    c00124b4 <VAS::allocatePages(int, int)+0x9e>
c00124a2:	0f 20 d8             	mov    eax,cr3
c00124a5:	0f 22 d8             	mov    cr3,eax
c00124a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124ac:	83 c4 1c             	add    esp,0x1c
c00124af:	5b                   	pop    ebx
c00124b0:	5e                   	pop    esi
c00124b1:	5f                   	pop    edi
c00124b2:	5d                   	pop    ebp
c00124b3:	c3                   	ret    
c00124b4:	c1 ee 0a             	shr    esi,0xa
c00124b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124bb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124c1:	c1 eb 0a             	shr    ebx,0xa
c00124c4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00124ca:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124d0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124d6:	39 c3                	cmp    ebx,eax
c00124d8:	77 ce                	ja     c00124a8 <VAS::allocatePages(int, int)+0x92>
c00124da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e3:	39 d8                	cmp    eax,ebx
c00124e5:	73 f3                	jae    c00124da <VAS::allocatePages(int, int)+0xc4>
c00124e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124eb:	83 c4 1c             	add    esp,0x1c
c00124ee:	5b                   	pop    ebx
c00124ef:	5e                   	pop    esi
c00124f0:	5f                   	pop    edi
c00124f1:	5d                   	pop    ebp
c00124f2:	c3                   	ret    
c00124f3:	83 ec 0c             	sub    esp,0xc
c00124f6:	68 24 a7 02 c0       	push   0xc002a724
c00124fb:	e8 2b 80 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0012500:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012503:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012507:	83 c4 10             	add    esp,0x10
c001250a:	e9 43 ff ff ff       	jmp    c0012452 <VAS::allocatePages(int, int)+0x3c>
c001250f:	83 ec 0c             	sub    esp,0xc
c0012512:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012516:	e8 9a f7 ff ff       	call   c0011cb5 <Virt::allocateKernelVirtualPages(int)>
c001251b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001251f:	83 c4 10             	add    esp,0x10
c0012522:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012527:	0f 87 9b 00 00 00    	ja     c00125c8 <VAS::allocatePages(int, int)+0x1b2>
c001252d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012531:	85 d2                	test   edx,edx
c0012533:	7e 3c                	jle    c0012571 <VAS::allocatePages(int, int)+0x15b>
c0012535:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012539:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001253d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012541:	c1 e5 0c             	shl    ebp,0xc
c0012544:	81 ce 00 04 00 00    	or     esi,0x400
c001254a:	01 dd                	add    ebp,ebx
c001254c:	e8 8c d9 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012551:	56                   	push   esi
c0012552:	53                   	push   ebx
c0012553:	50                   	push   eax
c0012554:	57                   	push   edi
c0012555:	e8 bc fd ff ff       	call   c0012316 <VAS::mapPage(unsigned long, unsigned long, int)>
c001255a:	83 c4 10             	add    esp,0x10
c001255d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012562:	74 03                	je     c0012567 <VAS::allocatePages(int, int)+0x151>
c0012564:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012567:	81 c3 00 10 00 00    	add    ebx,0x1000
c001256d:	39 dd                	cmp    ebp,ebx
c001256f:	75 db                	jne    c001254c <VAS::allocatePages(int, int)+0x136>
c0012571:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012576:	0f 84 26 ff ff ff    	je     c00124a2 <VAS::allocatePages(int, int)+0x8c>
c001257c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012580:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012584:	89 d3                	mov    ebx,edx
c0012586:	c1 e0 0c             	shl    eax,0xc
c0012589:	c1 eb 0a             	shr    ebx,0xa
c001258c:	01 d0                	add    eax,edx
c001258e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012594:	c1 e8 0a             	shr    eax,0xa
c0012597:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001259d:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125a2:	2d 00 00 40 00       	sub    eax,0x400000
c00125a7:	39 c3                	cmp    ebx,eax
c00125a9:	0f 87 f9 fe ff ff    	ja     c00124a8 <VAS::allocatePages(int, int)+0x92>
c00125af:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125b2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125b8:	39 d8                	cmp    eax,ebx
c00125ba:	73 f3                	jae    c00125af <VAS::allocatePages(int, int)+0x199>
c00125bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125c0:	83 c4 1c             	add    esp,0x1c
c00125c3:	5b                   	pop    ebx
c00125c4:	5e                   	pop    esi
c00125c5:	5f                   	pop    edi
c00125c6:	5d                   	pop    ebp
c00125c7:	c3                   	ret    
c00125c8:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00125cd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125d3:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00125da:	0f 84 4d ff ff ff    	je     c001252d <VAS::allocatePages(int, int)+0x117>
c00125e0:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00125e8:	e9 40 ff ff ff       	jmp    c001252d <VAS::allocatePages(int, int)+0x117>
c00125ed:	90                   	nop

c00125ee <VAS::setCPUSpecific(unsigned long)>:
c00125ee:	83 ec 0c             	sub    esp,0xc
c00125f1:	6a 05                	push   0x5
c00125f3:	68 00 00 40 c2       	push   0xc2400000
c00125f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012600:	e8 11 fd ff ff       	call   c0012316 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012605:	83 c4 1c             	add    esp,0x1c
c0012608:	c3                   	ret    
c0012609:	90                   	nop

c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001260a:	55                   	push   ebp
c001260b:	57                   	push   edi
c001260c:	56                   	push   esi
c001260d:	53                   	push   ebx
c001260e:	83 ec 1c             	sub    esp,0x1c
c0012611:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0012616:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001261a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012620:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012624:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001262a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001262e:	83 e0 01             	and    eax,0x1
c0012631:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012635:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012639:	85 c0                	test   eax,eax
c001263b:	7e 39                	jle    c0012676 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001263d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012641:	89 f3                	mov    ebx,esi
c0012643:	c1 e0 0c             	shl    eax,0xc
c0012646:	01 f0                	add    eax,esi
c0012648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001264c:	55                   	push   ebp
c001264d:	53                   	push   ebx
c001264e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012652:	29 f0                	sub    eax,esi
c0012654:	01 d8                	add    eax,ebx
c0012656:	50                   	push   eax
c0012657:	57                   	push   edi
c0012658:	e8 b9 fc ff ff       	call   c0012316 <VAS::mapPage(unsigned long, unsigned long, int)>
c001265d:	83 c4 10             	add    esp,0x10
c0012660:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012665:	74 03                	je     c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012667:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001266a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012670:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012674:	75 d6                	jne    c001264c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012676:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001267b:	75 10                	jne    c001268d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001267d:	0f 20 d8             	mov    eax,cr3
c0012680:	0f 22 d8             	mov    cr3,eax
c0012683:	83 c4 1c             	add    esp,0x1c
c0012686:	89 f0                	mov    eax,esi
c0012688:	5b                   	pop    ebx
c0012689:	5e                   	pop    esi
c001268a:	5f                   	pop    edi
c001268b:	5d                   	pop    ebp
c001268c:	c3                   	ret    
c001268d:	89 f3                	mov    ebx,esi
c001268f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012693:	c1 eb 0a             	shr    ebx,0xa
c0012696:	c1 e0 0c             	shl    eax,0xc
c0012699:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001269f:	01 f0                	add    eax,esi
c00126a1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126a7:	c1 e8 0a             	shr    eax,0xa
c00126aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126af:	2d 00 00 40 00       	sub    eax,0x400000
c00126b4:	39 c3                	cmp    ebx,eax
c00126b6:	77 cb                	ja     c0012683 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126b8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126bb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126c1:	39 d8                	cmp    eax,ebx
c00126c3:	73 f3                	jae    c00126b8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00126c5:	83 c4 1c             	add    esp,0x1c
c00126c8:	89 f0                	mov    eax,esi
c00126ca:	5b                   	pop    ebx
c00126cb:	5e                   	pop    esi
c00126cc:	5f                   	pop    edi
c00126cd:	5d                   	pop    ebp
c00126ce:	c3                   	ret    
c00126cf:	90                   	nop

c00126d0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00126d0:	55                   	push   ebp
c00126d1:	57                   	push   edi
c00126d2:	56                   	push   esi
c00126d3:	53                   	push   ebx
c00126d4:	83 ec 1c             	sub    esp,0x1c
c00126d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126db:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00126df:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00126e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00126e7:	a9 ff 0f 00 00       	test   eax,0xfff
c00126ec:	75 4a                	jne    c0012738 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00126ee:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00126f2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00126f5:	c1 eb 16             	shr    ebx,0x16
c00126f8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00126ff:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012703:	74 4d                	je     c0012752 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012705:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012709:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001270d:	c1 e8 0a             	shr    eax,0xa
c0012710:	80 fa 01             	cmp    dl,0x1
c0012713:	19 d2                	sbb    edx,edx
c0012715:	c1 e3 0c             	shl    ebx,0xc
c0012718:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001271c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012722:	25 fc 0f 00 00       	and    eax,0xffc
c0012727:	01 d8                	add    eax,ebx
c0012729:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012730:	83 c4 1c             	add    esp,0x1c
c0012733:	5b                   	pop    ebx
c0012734:	5e                   	pop    esi
c0012735:	5f                   	pop    edi
c0012736:	5d                   	pop    ebp
c0012737:	c3                   	ret    
c0012738:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001273c:	83 ec 0c             	sub    esp,0xc
c001273f:	68 50 a7 02 c0       	push   0xc002a750
c0012744:	e8 e2 7d 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0012749:	83 c4 10             	add    esp,0x10
c001274c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012750:	eb 9c                	jmp    c00126ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012752:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012756:	e8 82 d7 ff ff       	call   c000fedd <Phys::allocatePage()>
c001275b:	89 c5                	mov    ebp,eax
c001275d:	e8 91 f7 ff ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c0012762:	83 ec 0c             	sub    esp,0xc
c0012765:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012769:	6a 01                	push   0x1
c001276b:	e8 45 f5 ff ff       	call   c0011cb5 <Virt::allocateKernelVirtualPages(int)>
c0012770:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012777:	6a 01                	push   0x1
c0012779:	50                   	push   eax
c001277a:	55                   	push   ebp
c001277b:	81 cd 07 04 00 00    	or     ebp,0x407
c0012781:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012785:	51                   	push   ecx
c0012786:	e8 7f fe ff ff       	call   c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001278b:	83 c4 1c             	add    esp,0x1c
c001278e:	68 00 10 00 00       	push   0x1000
c0012793:	6a 00                	push   0x0
c0012795:	50                   	push   eax
c0012796:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001279a:	e8 d9 df fe ff       	call   c0000778 <memset>
c001279f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127a6:	e8 04 f8 ff ff       	call   c0011faf <Virt::freeKernelVirtualPages(unsigned long)>
c00127ab:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127ae:	83 c4 10             	add    esp,0x10
c00127b1:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00127b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127b8:	e9 48 ff ff ff       	jmp    c0012705 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00127bd:	90                   	nop

c00127be <VAS::VAS(bool)>:
c00127be:	53                   	push   ebx
c00127bf:	83 ec 28             	sub    esp,0x28
c00127c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127c6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00127e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00127e8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00127eb:	e8 ed d6 ff ff       	call   c000fedd <Phys::allocatePage()>
c00127f0:	89 c2                	mov    edx,eax
c00127f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127f6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00127f9:	e8 f5 f6 ff ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c00127fe:	89 c3                	mov    ebx,eax
c0012800:	83 ec 0c             	sub    esp,0xc
c0012803:	6a 01                	push   0x1
c0012805:	e8 ab f4 ff ff       	call   c0011cb5 <Virt::allocateKernelVirtualPages(int)>
c001280a:	83 c4 10             	add    esp,0x10
c001280d:	89 c2                	mov    edx,eax
c001280f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012813:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012816:	83 ec 0c             	sub    esp,0xc
c0012819:	6a 03                	push   0x3
c001281b:	6a 01                	push   0x1
c001281d:	52                   	push   edx
c001281e:	50                   	push   eax
c001281f:	53                   	push   ebx
c0012820:	e8 e5 fd ff ff       	call   c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012825:	83 c4 20             	add    esp,0x20
c0012828:	89 c2                	mov    edx,eax
c001282a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012831:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012839:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012841:	7f 1c                	jg     c001285f <VAS::VAS(bool)+0xa1>
c0012843:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012847:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001284a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001284e:	c1 e2 02             	shl    edx,0x2
c0012851:	01 d0                	add    eax,edx
c0012853:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012859:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001285d:	eb da                	jmp    c0012839 <VAS::VAS(bool)+0x7b>
c001285f:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012867:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001286f:	7f 7a                	jg     c00128eb <VAS::VAS(bool)+0x12d>
c0012871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012875:	2d 00 02 00 00       	sub    eax,0x200
c001287a:	c1 e0 0c             	shl    eax,0xc
c001287d:	83 c8 03             	or     eax,0x3
c0012880:	89 c2                	mov    edx,eax
c0012882:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0012887:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001288d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012893:	83 e0 10             	and    eax,0x10
c0012896:	84 c0                	test   al,al
c0012898:	74 07                	je     c00128a1 <VAS::VAS(bool)+0xe3>
c001289a:	b8 00 01 00 00       	mov    eax,0x100
c001289f:	eb 05                	jmp    c00128a6 <VAS::VAS(bool)+0xe8>
c00128a1:	b8 00 00 00 00       	mov    eax,0x0
c00128a6:	09 d0                	or     eax,edx
c00128a8:	89 c1                	mov    ecx,eax
c00128aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128b5:	c1 e2 02             	shl    edx,0x2
c00128b8:	01 d0                	add    eax,edx
c00128ba:	89 ca                	mov    edx,ecx
c00128bc:	89 10                	mov    DWORD PTR [eax],edx
c00128be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128c2:	2d 40 03 00 00       	sub    eax,0x340
c00128c7:	83 f8 7f             	cmp    eax,0x7f
c00128ca:	77 16                	ja     c00128e2 <VAS::VAS(bool)+0x124>
c00128cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128d7:	c1 e2 02             	shl    edx,0x2
c00128da:	01 d0                	add    eax,edx
c00128dc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128e2:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00128e6:	e9 7c ff ff ff       	jmp    c0012867 <VAS::VAS(bool)+0xa9>
c00128eb:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00128f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128f6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128fc:	83 e0 10             	and    eax,0x10
c00128ff:	84 c0                	test   al,al
c0012901:	74 07                	je     c001290a <VAS::VAS(bool)+0x14c>
c0012903:	b8 03 41 00 00       	mov    eax,0x4103
c0012908:	eb 05                	jmp    c001290f <VAS::VAS(bool)+0x151>
c001290a:	b8 03 40 00 00       	mov    eax,0x4003
c001290f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012913:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012916:	81 c2 20 0c 00 00    	add    edx,0xc20
c001291c:	89 02                	mov    DWORD PTR [edx],eax
c001291e:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0012923:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012929:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001292f:	83 ec 08             	sub    esp,0x8
c0012932:	50                   	push   eax
c0012933:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012937:	e8 b2 fc ff ff       	call   c00125ee <VAS::setCPUSpecific(unsigned long)>
c001293c:	83 c4 10             	add    esp,0x10
c001293f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012943:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012946:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c001294b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012951:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012957:	83 e0 10             	and    eax,0x10
c001295a:	84 c0                	test   al,al
c001295c:	74 07                	je     c0012965 <VAS::VAS(bool)+0x1a7>
c001295e:	b8 00 01 00 00       	mov    eax,0x100
c0012963:	eb 05                	jmp    c001296a <VAS::VAS(bool)+0x1ac>
c0012965:	b8 00 00 00 00       	mov    eax,0x0
c001296a:	09 c2                	or     edx,eax
c001296c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012970:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012973:	05 fc 0f 00 00       	add    eax,0xffc
c0012978:	83 ca 03             	or     edx,0x3
c001297b:	89 10                	mov    DWORD PTR [eax],edx
c001297d:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0012982:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012988:	83 ec 0c             	sub    esp,0xc
c001298b:	50                   	push   eax
c001298c:	e8 07 1c 00 00       	call   c0014598 <Device::getName()>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	83 ec 08             	sub    esp,0x8
c0012997:	68 b0 a5 02 c0       	push   0xc002a5b0
c001299c:	50                   	push   eax
c001299d:	e8 1e df fe ff       	call   c00008c0 <strcmp>
c00129a2:	83 c4 10             	add    esp,0x10
c00129a5:	85 c0                	test   eax,eax
c00129a7:	0f 94 c0             	sete   al
c00129aa:	84 c0                	test   al,al
c00129ac:	74 70                	je     c0012a1e <VAS::VAS(bool)+0x260>
c00129ae:	e8 50 b3 00 00       	call   c001dd03 <disableIRQs()>
c00129b3:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00129b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129be:	05 7c 09 00 00       	add    eax,0x97c
c00129c3:	83 ec 0c             	sub    esp,0xc
c00129c6:	50                   	push   eax
c00129c7:	e8 f0 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129cc:	83 c4 10             	add    esp,0x10
c00129cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129d4:	89 c3                	mov    ebx,eax
c00129d6:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00129db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129e1:	05 7c 09 00 00       	add    eax,0x97c
c00129e6:	83 ec 0c             	sub    esp,0xc
c00129e9:	50                   	push   eax
c00129ea:	e8 cd c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	83 ec 08             	sub    esp,0x8
c00129f5:	50                   	push   eax
c00129f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129fa:	e8 91 f5 ff ff       	call   c0011f90 <VAS::getPageTableEntry(unsigned long)>
c00129ff:	83 c4 10             	add    esp,0x10
c0012a02:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a04:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a09:	6a 11                	push   0x11
c0012a0b:	53                   	push   ebx
c0012a0c:	50                   	push   eax
c0012a0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a11:	e8 00 f9 ff ff       	call   c0012316 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a16:	83 c4 10             	add    esp,0x10
c0012a19:	e8 f3 b2 00 00       	call   c001dd11 <enableIRQs()>
c0012a1e:	90                   	nop
c0012a1f:	83 c4 28             	add    esp,0x28
c0012a22:	5b                   	pop    ebx
c0012a23:	c3                   	ret    

c0012a24 <VAS::evict(unsigned long)>:
c0012a24:	55                   	push   ebp
c0012a25:	57                   	push   edi
c0012a26:	56                   	push   esi
c0012a27:	53                   	push   ebx
c0012a28:	83 ec 0c             	sub    esp,0xc
c0012a2b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012a2f:	e8 c2 f3 ff ff       	call   c0011df6 <Virt::allocateSwapfilePage()>
c0012a34:	89 c7                	mov    edi,eax
c0012a36:	a1 8c d2 02 c0       	mov    eax,ds:0xc002d28c
c0012a3b:	85 c0                	test   eax,eax
c0012a3d:	7e 3d                	jle    c0012a7c <VAS::evict(unsigned long)+0x58>
c0012a3f:	89 ee                	mov    esi,ebp
c0012a41:	31 db                	xor    ebx,ebx
c0012a43:	83 ec 0c             	sub    esp,0xc
c0012a46:	57                   	push   edi
c0012a47:	e8 98 f3 ff ff       	call   c0011de4 <Virt::swapIDToSector(unsigned long)>
c0012a4c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a4f:	01 d8                	add    eax,ebx
c0012a51:	6a 01                	push   0x1
c0012a53:	31 d2                	xor    edx,edx
c0012a55:	43                   	inc    ebx
c0012a56:	52                   	push   edx
c0012a57:	81 c6 00 02 00 00    	add    esi,0x200
c0012a5d:	50                   	push   eax
c0012a5e:	0f be 05 98 d2 02 c0 	movsx  eax,BYTE PTR ds:0xc002d298
c0012a65:	ff 34 85 fc e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd1804]
c0012a6c:	e8 91 3c 00 00       	call   c0016702 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a71:	83 c4 20             	add    esp,0x20
c0012a74:	39 1d 8c d2 02 c0    	cmp    DWORD PTR ds:0xc002d28c,ebx
c0012a7a:	7f c7                	jg     c0012a43 <VAS::evict(unsigned long)+0x1f>
c0012a7c:	83 ec 08             	sub    esp,0x8
c0012a7f:	c1 e7 0b             	shl    edi,0xb
c0012a82:	55                   	push   ebp
c0012a83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a87:	e8 04 f5 ff ff       	call   c0011f90 <VAS::getPageTableEntry(unsigned long)>
c0012a8c:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a8e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a94:	09 d7                	or     edi,edx
c0012a96:	89 38                	mov    DWORD PTR [eax],edi
c0012a98:	ff 05 64 e4 02 c0    	inc    DWORD PTR ds:0xc002e464
c0012a9e:	0f 20 d8             	mov    eax,cr3
c0012aa1:	0f 22 d8             	mov    cr3,eax
c0012aa4:	83 c4 1c             	add    esp,0x1c
c0012aa7:	5b                   	pop    ebx
c0012aa8:	5e                   	pop    esi
c0012aa9:	5f                   	pop    edi
c0012aaa:	5d                   	pop    ebp
c0012aab:	c3                   	ret    

c0012aac <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012aac:	57                   	push   edi
c0012aad:	56                   	push   esi
c0012aae:	53                   	push   ebx
c0012aaf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ab3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012ab9:	74 1c                	je     c0012ad7 <VAS::tryLoadBackOffDisk(unsigned long)+0x2b>
c0012abb:	53                   	push   ebx
c0012abc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ac0:	e8 cb f4 ff ff       	call   c0011f90 <VAS::getPageTableEntry(unsigned long)>
c0012ac5:	5a                   	pop    edx
c0012ac6:	89 c6                	mov    esi,eax
c0012ac8:	59                   	pop    ecx
c0012ac9:	85 c0                	test   eax,eax
c0012acb:	74 0a                	je     c0012ad7 <VAS::tryLoadBackOffDisk(unsigned long)+0x2b>
c0012acd:	8b 38                	mov    edi,DWORD PTR [eax]
c0012acf:	f7 c7 01 00 00 00    	test   edi,0x1
c0012ad5:	74 06                	je     c0012add <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0012ad7:	31 c0                	xor    eax,eax
c0012ad9:	5b                   	pop    ebx
c0012ada:	5e                   	pop    esi
c0012adb:	5f                   	pop    edi
c0012adc:	c3                   	ret    
c0012add:	e8 fb d3 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012ae2:	c1 ef 0b             	shr    edi,0xb
c0012ae5:	8b 16                	mov    edx,DWORD PTR [esi]
c0012ae7:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012aed:	09 c2                	or     edx,eax
c0012aef:	81 ca 01 08 00 00    	or     edx,0x801
c0012af5:	89 16                	mov    DWORD PTR [esi],edx
c0012af7:	0f 20 d8             	mov    eax,cr3
c0012afa:	0f 22 d8             	mov    cr3,eax
c0012afd:	a1 8c d2 02 c0       	mov    eax,ds:0xc002d28c
c0012b02:	85 c0                	test   eax,eax
c0012b04:	7e 3b                	jle    c0012b41 <VAS::tryLoadBackOffDisk(unsigned long)+0x95>
c0012b06:	31 f6                	xor    esi,esi
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	57                   	push   edi
c0012b0c:	e8 d3 f2 ff ff       	call   c0011de4 <Virt::swapIDToSector(unsigned long)>
c0012b11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012b14:	01 f0                	add    eax,esi
c0012b16:	6a 01                	push   0x1
c0012b18:	31 d2                	xor    edx,edx
c0012b1a:	46                   	inc    esi
c0012b1b:	52                   	push   edx
c0012b1c:	81 c3 00 02 00 00    	add    ebx,0x200
c0012b22:	50                   	push   eax
c0012b23:	0f be 05 98 d2 02 c0 	movsx  eax,BYTE PTR ds:0xc002d298
c0012b2a:	ff 34 85 fc e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd1804]
c0012b31:	e8 60 3b 00 00       	call   c0016696 <LogicalDisk::read(unsigned long long, int, void*)>
c0012b36:	83 c4 20             	add    esp,0x20
c0012b39:	39 35 8c d2 02 c0    	cmp    DWORD PTR ds:0xc002d28c,esi
c0012b3f:	7f c7                	jg     c0012b08 <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c0012b41:	83 ec 0c             	sub    esp,0xc
c0012b44:	ff 0d 64 e4 02 c0    	dec    DWORD PTR ds:0xc002e464
c0012b4a:	57                   	push   edi
c0012b4b:	e8 76 f2 ff ff       	call   c0011dc6 <Virt::freeSwapfilePage(unsigned long)>
c0012b50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b54:	83 c4 10             	add    esp,0x10
c0012b57:	25 ff 0f 00 00       	and    eax,0xfff
c0012b5c:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b61:	77 07                	ja     c0012b6a <VAS::tryLoadBackOffDisk(unsigned long)+0xbe>
c0012b63:	b0 01                	mov    al,0x1
c0012b65:	e9 6f ff ff ff       	jmp    c0012ad9 <VAS::tryLoadBackOffDisk(unsigned long)+0x2d>
c0012b6a:	83 ec 0c             	sub    esp,0xc
c0012b6d:	68 be a5 02 c0       	push   0xc002a5be
c0012b72:	e8 0f 03 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	b0 01                	mov    al,0x1
c0012b7c:	e9 58 ff ff ff       	jmp    c0012ad9 <VAS::tryLoadBackOffDisk(unsigned long)+0x2d>
c0012b81:	90                   	nop

c0012b82 <VAS::scanForEviction()>:
c0012b82:	55                   	push   ebp
c0012b83:	57                   	push   edi
c0012b84:	31 ff                	xor    edi,edi
c0012b86:	56                   	push   esi
c0012b87:	31 f6                	xor    esi,esi
c0012b89:	53                   	push   ebx
c0012b8a:	83 ec 1c             	sub    esp,0x1c
c0012b8d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012b91:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0012b94:	89 d8                	mov    eax,ebx
c0012b96:	39 c3                	cmp    ebx,eax
c0012b98:	74 72                	je     c0012c0c <VAS::scanForEviction()+0x8a>
c0012b9a:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012b9f:	75 0e                	jne    c0012baf <VAS::scanForEviction()+0x2d>
c0012ba1:	89 c1                	mov    ecx,eax
c0012ba3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012ba6:	c1 e9 16             	shr    ecx,0x16
c0012ba9:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012bad:	74 51                	je     c0012c00 <VAS::scanForEviction()+0x7e>
c0012baf:	50                   	push   eax
c0012bb0:	55                   	push   ebp
c0012bb1:	e8 da f3 ff ff       	call   c0011f90 <VAS::getPageTableEntry(unsigned long)>
c0012bb6:	5a                   	pop    edx
c0012bb7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bb9:	59                   	pop    ecx
c0012bba:	89 d1                	mov    ecx,edx
c0012bbc:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012bc2:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012bc8:	74 54                	je     c0012c1e <VAS::scanForEviction()+0x9c>
c0012bca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012bcd:	05 00 10 00 00       	add    eax,0x1000
c0012bd2:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0012bd7:	76 3d                	jbe    c0012c16 <VAS::scanForEviction()+0x94>
c0012bd9:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012be0:	85 db                	test   ebx,ebx
c0012be2:	74 79                	je     c0012c5d <VAS::scanForEviction()+0xdb>
c0012be4:	31 c0                	xor    eax,eax
c0012be6:	be 01 00 00 00       	mov    esi,0x1
c0012beb:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012bf0:	75 bd                	jne    c0012baf <VAS::scanForEviction()+0x2d>
c0012bf2:	89 c1                	mov    ecx,eax
c0012bf4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012bf7:	c1 e9 16             	shr    ecx,0x16
c0012bfa:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012bfe:	75 af                	jne    c0012baf <VAS::scanForEviction()+0x2d>
c0012c00:	05 00 00 40 00       	add    eax,0x400000
c0012c05:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012c08:	39 c3                	cmp    ebx,eax
c0012c0a:	75 8e                	jne    c0012b9a <VAS::scanForEviction()+0x18>
c0012c0c:	89 f1                	mov    ecx,esi
c0012c0e:	84 c9                	test   cl,cl
c0012c10:	74 88                	je     c0012b9a <VAS::scanForEviction()+0x18>
c0012c12:	89 f7                	mov    edi,esi
c0012c14:	eb 84                	jmp    c0012b9a <VAS::scanForEviction()+0x18>
c0012c16:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012c19:	e9 78 ff ff ff       	jmp    c0012b96 <VAS::scanForEviction()+0x14>
c0012c1e:	f6 c2 01             	test   dl,0x1
c0012c21:	74 a7                	je     c0012bca <VAS::scanForEviction()+0x48>
c0012c23:	f6 c2 40             	test   dl,0x40
c0012c26:	74 0b                	je     c0012c33 <VAS::scanForEviction()+0xb1>
c0012c28:	83 e2 bf             	and    edx,0xffffffbf
c0012c2b:	89 10                	mov    DWORD PTR [eax],edx
c0012c2d:	89 f8                	mov    eax,edi
c0012c2f:	84 c0                	test   al,al
c0012c31:	74 97                	je     c0012bca <VAS::scanForEviction()+0x48>
c0012c33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c37:	83 ec 08             	sub    esp,0x8
c0012c3a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0012c3d:	55                   	push   ebp
c0012c3e:	e8 e1 fd ff ff       	call   c0012a24 <VAS::evict(unsigned long)>
c0012c43:	81 45 10 00 10 00 00 	add    DWORD PTR [ebp+0x10],0x1000
c0012c4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012c4e:	83 c4 2c             	add    esp,0x2c
c0012c51:	89 d0                	mov    eax,edx
c0012c53:	5b                   	pop    ebx
c0012c54:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c59:	5e                   	pop    esi
c0012c5a:	5f                   	pop    edi
c0012c5b:	5d                   	pop    ebp
c0012c5c:	c3                   	ret    
c0012c5d:	bf 01 00 00 00       	mov    edi,0x1
c0012c62:	eb 80                	jmp    c0012be4 <VAS::scanForEviction()+0x62>

c0012c64 <mapVASFirstTime>:
c0012c64:	55                   	push   ebp
c0012c65:	57                   	push   edi
c0012c66:	56                   	push   esi
c0012c67:	53                   	push   ebx
c0012c68:	83 ec 0c             	sub    esp,0xc
c0012c6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c70:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c73:	4a                   	dec    edx
c0012c74:	0f 84 8e 00 00 00    	je     c0012d08 <mapVASFirstTime+0xa4>
c0012c7a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c7d:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c80:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c85:	c1 e5 15             	shl    ebp,0x15
c0012c88:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c8d:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c93:	29 eb                	sub    ebx,ebp
c0012c95:	29 ee                	sub    esi,ebp
c0012c97:	e8 41 d2 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012c9c:	83 ec 0c             	sub    esp,0xc
c0012c9f:	68 03 04 00 00       	push   0x403
c0012ca4:	6a 01                	push   0x1
c0012ca6:	53                   	push   ebx
c0012ca7:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012cad:	50                   	push   eax
c0012cae:	57                   	push   edi
c0012caf:	e8 56 f9 ff ff       	call   c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cb4:	83 c4 20             	add    esp,0x20
c0012cb7:	39 f3                	cmp    ebx,esi
c0012cb9:	75 dc                	jne    c0012c97 <mapVASFirstTime+0x33>
c0012cbb:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012cc0:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012cc5:	29 ee                	sub    esi,ebp
c0012cc7:	29 e8                	sub    eax,ebp
c0012cc9:	89 c5                	mov    ebp,eax
c0012ccb:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012ccf:	19 db                	sbb    ebx,ebx
c0012cd1:	e8 07 d2 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012cd6:	83 e3 04             	and    ebx,0x4
c0012cd9:	83 ec 0c             	sub    esp,0xc
c0012cdc:	81 c3 03 04 00 00    	add    ebx,0x403
c0012ce2:	53                   	push   ebx
c0012ce3:	6a 01                	push   0x1
c0012ce5:	56                   	push   esi
c0012ce6:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012cec:	50                   	push   eax
c0012ced:	57                   	push   edi
c0012cee:	e8 17 f9 ff ff       	call   c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cf3:	83 c4 20             	add    esp,0x20
c0012cf6:	39 f5                	cmp    ebp,esi
c0012cf8:	75 d1                	jne    c0012ccb <mapVASFirstTime+0x67>
c0012cfa:	0f 20 d8             	mov    eax,cr3
c0012cfd:	0f 22 d8             	mov    cr3,eax
c0012d00:	83 c4 0c             	add    esp,0xc
c0012d03:	5b                   	pop    ebx
c0012d04:	5e                   	pop    esi
c0012d05:	5f                   	pop    edi
c0012d06:	5d                   	pop    ebp
c0012d07:	c3                   	ret    
c0012d08:	83 ec 0c             	sub    esp,0xc
c0012d0b:	68 d2 a5 02 c0       	push   0xc002a5d2
c0012d10:	e8 71 01 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0012d15:	83 c4 10             	add    esp,0x10
c0012d18:	83 c4 0c             	add    esp,0xc
c0012d1b:	5b                   	pop    ebx
c0012d1c:	5e                   	pop    esi
c0012d1d:	5f                   	pop    edi
c0012d1e:	5d                   	pop    ebp
c0012d1f:	c3                   	ret    

c0012d20 <__cxa_atexit>:
c0012d20:	31 c0                	xor    eax,eax
c0012d22:	c3                   	ret    

c0012d23 <__cxa_finalize>:
c0012d23:	c3                   	ret    

c0012d24 <__stack_chk_fail>:
c0012d24:	55                   	push   ebp
c0012d25:	89 e5                	mov    ebp,esp
c0012d27:	83 ec 14             	sub    esp,0x14
c0012d2a:	68 73 a7 02 c0       	push   0xc002a773
c0012d2f:	e8 52 01 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0012d34:	58                   	pop    eax
c0012d35:	5a                   	pop    edx
c0012d36:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d39:	68 c3 a7 02 c0       	push   0xc002a7c3
c0012d3e:	e8 43 01 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0012d43:	59                   	pop    ecx
c0012d44:	58                   	pop    eax
c0012d45:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d48:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d4b:	68 c3 a7 02 c0       	push   0xc002a7c3
c0012d50:	e8 31 01 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0012d55:	5a                   	pop    edx
c0012d56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d59:	59                   	pop    ecx
c0012d5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d5c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d5f:	68 c3 a7 02 c0       	push   0xc002a7c3
c0012d64:	e8 1d 01 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0012d69:	5a                   	pop    edx
c0012d6a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d6d:	59                   	pop    ecx
c0012d6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d70:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d72:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d75:	68 c3 a7 02 c0       	push   0xc002a7c3
c0012d7a:	e8 07 01 00 00       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0012d7f:	c7 04 24 cb a7 02 c0 	mov    DWORD PTR [esp],0xc002a7cb
c0012d86:	e8 a0 77 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0012d8b:	83 c4 10             	add    esp,0x10
c0012d8e:	c9                   	leave  
c0012d8f:	c3                   	ret    

c0012d90 <__cxa_pure_virtual>:
c0012d90:	83 ec 18             	sub    esp,0x18
c0012d93:	68 e3 a7 02 c0       	push   0xc002a7e3
c0012d98:	e8 8e 77 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0012d9d:	83 c4 1c             	add    esp,0x1c
c0012da0:	c3                   	ret    

c0012da1 <operator new[](unsigned long)>:
c0012da1:	e9 9a ca ff ff       	jmp    c000f840 <malloc>

c0012da6 <operator delete(void*, unsigned long)>:
c0012da6:	e9 b5 ca ff ff       	jmp    c000f860 <rfree>

c0012dab <operator delete[](void*)>:
c0012dab:	e9 b0 ca ff ff       	jmp    c000f860 <rfree>

c0012db0 <operator delete[](void*, unsigned long)>:
c0012db0:	e9 ab ca ff ff       	jmp    c000f860 <rfree>

c0012db5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012db5:	57                   	push   edi
c0012db6:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012dbb:	56                   	push   esi
c0012dbc:	be f8 a7 02 c0       	mov    esi,0xc002a7f8
c0012dc1:	53                   	push   ebx
c0012dc2:	83 ec 40             	sub    esp,0x40
c0012dc5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012dc9:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012dcd:	fc                   	cld    
c0012dce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012dd0:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012dd4:	83 f9 3e             	cmp    ecx,0x3e
c0012dd7:	7e 05                	jle    c0012dde <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012dd9:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012dde:	89 df                	mov    edi,ebx
c0012de0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012de4:	eb 02                	jmp    c0012de8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012de6:	89 c7                	mov    edi,eax
c0012de8:	31 d2                	xor    edx,edx
c0012dea:	46                   	inc    esi
c0012deb:	89 f8                	mov    eax,edi
c0012ded:	f7 f1                	div    ecx
c0012def:	39 cf                	cmp    edi,ecx
c0012df1:	73 f3                	jae    c0012de6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012df3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012df6:	eb 02                	jmp    c0012dfa <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012df8:	89 c3                	mov    ebx,eax
c0012dfa:	31 d2                	xor    edx,edx
c0012dfc:	4e                   	dec    esi
c0012dfd:	89 d8                	mov    eax,ebx
c0012dff:	f7 f1                	div    ecx
c0012e01:	39 cb                	cmp    ebx,ecx
c0012e03:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e07:	88 16                	mov    BYTE PTR [esi],dl
c0012e09:	73 ed                	jae    c0012df8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e0f:	83 c4 40             	add    esp,0x40
c0012e12:	5b                   	pop    ebx
c0012e13:	5e                   	pop    esi
c0012e14:	5f                   	pop    edi
c0012e15:	c3                   	ret    

c0012e16 <Dbg::logc(char)>:
c0012e16:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e1a:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e1f:	ec                   	in     al,dx
c0012e20:	a8 20                	test   al,0x20
c0012e22:	74 fb                	je     c0012e1f <Dbg::logc(char)+0x9>
c0012e24:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e29:	88 c8                	mov    al,cl
c0012e2b:	ee                   	out    dx,al
c0012e2c:	c3                   	ret    

c0012e2d <Dbg::logs(char*)>:
c0012e2d:	53                   	push   ebx
c0012e2e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e32:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e35:	84 c0                	test   al,al
c0012e37:	74 0f                	je     c0012e48 <Dbg::logs(char*)+0x1b>
c0012e39:	50                   	push   eax
c0012e3a:	43                   	inc    ebx
c0012e3b:	e8 d6 ff ff ff       	call   c0012e16 <Dbg::logc(char)>
c0012e40:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e43:	5a                   	pop    edx
c0012e44:	84 c0                	test   al,al
c0012e46:	75 f1                	jne    c0012e39 <Dbg::logs(char*)+0xc>
c0012e48:	5b                   	pop    ebx
c0012e49:	c3                   	ret    

c0012e4a <Dbg::logWriteInt(unsigned int)>:
c0012e4a:	83 ec 10             	sub    esp,0x10
c0012e4d:	6a 0a                	push   0xa
c0012e4f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e53:	50                   	push   eax
c0012e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e58:	e8 58 ff ff ff       	call   c0012db5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e5d:	50                   	push   eax
c0012e5e:	e8 ca ff ff ff       	call   c0012e2d <Dbg::logs(char*)>
c0012e63:	83 c4 20             	add    esp,0x20
c0012e66:	c3                   	ret    

c0012e67 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e67:	83 ec 10             	sub    esp,0x10
c0012e6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e6e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e72:	50                   	push   eax
c0012e73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e77:	e8 39 ff ff ff       	call   c0012db5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e7c:	50                   	push   eax
c0012e7d:	e8 ab ff ff ff       	call   c0012e2d <Dbg::logs(char*)>
c0012e82:	83 c4 20             	add    esp,0x20
c0012e85:	c3                   	ret    

c0012e86 <Dbg::kprintf(char const*, ...)>:
c0012e86:	55                   	push   ebp
c0012e87:	57                   	push   edi
c0012e88:	56                   	push   esi
c0012e89:	53                   	push   ebx
c0012e8a:	83 ec 0c             	sub    esp,0xc
c0012e8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e91:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e99:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e9c:	84 c0                	test   al,al
c0012e9e:	74 4a                	je     c0012eea <Dbg::kprintf(char const*, ...)+0x64>
c0012ea0:	31 db                	xor    ebx,ebx
c0012ea2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ea5:	3c 25                	cmp    al,0x25
c0012ea7:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012eaa:	0f 85 e4 00 00 00    	jne    c0012f94 <Dbg::kprintf(char const*, ...)+0x10e>
c0012eb0:	83 c3 02             	add    ebx,0x2
c0012eb3:	8a 07                	mov    al,BYTE PTR [edi]
c0012eb5:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012eb8:	83 e8 25             	sub    eax,0x25
c0012ebb:	3c 53                	cmp    al,0x53
c0012ebd:	0f 87 ba 00 00 00    	ja     c0012f7d <Dbg::kprintf(char const*, ...)+0xf7>
c0012ec3:	0f b6 c0             	movzx  eax,al
c0012ec6:	ff 24 85 38 a8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd57c8]
c0012ecd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ed1:	89 c8                	mov    eax,ecx
c0012ed3:	83 c1 04             	add    ecx,0x4
c0012ed6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012eda:	ff 30                	push   DWORD PTR [eax]
c0012edc:	e8 4c ff ff ff       	call   c0012e2d <Dbg::logs(char*)>
c0012ee1:	58                   	pop    eax
c0012ee2:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012ee6:	84 c0                	test   al,al
c0012ee8:	75 b8                	jne    c0012ea2 <Dbg::kprintf(char const*, ...)+0x1c>
c0012eea:	83 c4 0c             	add    esp,0xc
c0012eed:	5b                   	pop    ebx
c0012eee:	5e                   	pop    esi
c0012eef:	5f                   	pop    edi
c0012ef0:	5d                   	pop    ebp
c0012ef1:	c3                   	ret    
c0012ef2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ef6:	89 d0                	mov    eax,edx
c0012ef8:	83 c2 04             	add    edx,0x4
c0012efb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012eff:	ff 30                	push   DWORD PTR [eax]
c0012f01:	e8 44 ff ff ff       	call   c0012e4a <Dbg::logWriteInt(unsigned int)>
c0012f06:	58                   	pop    eax
c0012f07:	eb d9                	jmp    c0012ee2 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f09:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f0d:	89 d0                	mov    eax,edx
c0012f0f:	83 c2 04             	add    edx,0x4
c0012f12:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f19:	50                   	push   eax
c0012f1a:	e8 f7 fe ff ff       	call   c0012e16 <Dbg::logc(char)>
c0012f1f:	58                   	pop    eax
c0012f20:	eb c0                	jmp    c0012ee2 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f22:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f26:	89 c8                	mov    eax,ecx
c0012f28:	83 c1 04             	add    ecx,0x4
c0012f2b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f2f:	ff 30                	push   DWORD PTR [eax]
c0012f31:	e8 14 ff ff ff       	call   c0012e4a <Dbg::logWriteInt(unsigned int)>
c0012f36:	5f                   	pop    edi
c0012f37:	eb a9                	jmp    c0012ee2 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f3d:	89 c8                	mov    eax,ecx
c0012f3f:	83 c1 04             	add    ecx,0x4
c0012f42:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f46:	6a 10                	push   0x10
c0012f48:	ff 30                	push   DWORD PTR [eax]
c0012f4a:	e8 18 ff ff ff       	call   c0012e67 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f4f:	59                   	pop    ecx
c0012f50:	5f                   	pop    edi
c0012f51:	eb 8f                	jmp    c0012ee2 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f57:	89 d0                	mov    eax,edx
c0012f59:	83 c2 08             	add    edx,0x8
c0012f5c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f60:	6a 10                	push   0x10
c0012f62:	ff 30                	push   DWORD PTR [eax]
c0012f64:	e8 fe fe ff ff       	call   c0012e67 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f69:	58                   	pop    eax
c0012f6a:	5a                   	pop    edx
c0012f6b:	e9 72 ff ff ff       	jmp    c0012ee2 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f70:	6a 25                	push   0x25
c0012f72:	e8 9f fe ff ff       	call   c0012e16 <Dbg::logc(char)>
c0012f77:	58                   	pop    eax
c0012f78:	e9 65 ff ff ff       	jmp    c0012ee2 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f7d:	6a 25                	push   0x25
c0012f7f:	e8 92 fe ff ff       	call   c0012e16 <Dbg::logc(char)>
c0012f84:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f87:	50                   	push   eax
c0012f88:	e8 89 fe ff ff       	call   c0012e16 <Dbg::logc(char)>
c0012f8d:	5a                   	pop    edx
c0012f8e:	59                   	pop    ecx
c0012f8f:	e9 4e ff ff ff       	jmp    c0012ee2 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f94:	50                   	push   eax
c0012f95:	89 eb                	mov    ebx,ebp
c0012f97:	e8 7a fe ff ff       	call   c0012e16 <Dbg::logc(char)>
c0012f9c:	89 fd                	mov    ebp,edi
c0012f9e:	58                   	pop    eax
c0012f9f:	e9 3e ff ff ff       	jmp    c0012ee2 <Dbg::kprintf(char const*, ...)+0x5c>

c0012fa4 <File::read(unsigned long long, void*, int*)>:
c0012fa4:	53                   	push   ebx
c0012fa5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fa9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fad:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fb4:	3c 19                	cmp    al,0x19
c0012fb6:	77 35                	ja     c0012fed <File::read(unsigned long long, void*, int*)+0x49>
c0012fb8:	8b 04 85 00 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1700]
c0012fbf:	85 c0                	test   eax,eax
c0012fc1:	74 2a                	je     c0012fed <File::read(unsigned long long, void*, int*)+0x49>
c0012fc3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fc9:	85 c0                	test   eax,eax
c0012fcb:	74 20                	je     c0012fed <File::read(unsigned long long, void*, int*)+0x49>
c0012fcd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fd1:	74 21                	je     c0012ff4 <File::read(unsigned long long, void*, int*)+0x50>
c0012fd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fd5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fd9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fe3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fe7:	5b                   	pop    ebx
c0012fe8:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012feb:	ff e0                	jmp    eax
c0012fed:	b8 0b 00 00 00       	mov    eax,0xb
c0012ff2:	eb 05                	jmp    c0012ff9 <File::read(unsigned long long, void*, int*)+0x55>
c0012ff4:	b8 05 00 00 00       	mov    eax,0x5
c0012ff9:	5b                   	pop    ebx
c0012ffa:	c3                   	ret    
c0012ffb:	90                   	nop

c0012ffc <File::write(unsigned long long, void*, int*)>:
c0012ffc:	53                   	push   ebx
c0012ffd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013001:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013005:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001300c:	3c 19                	cmp    al,0x19
c001300e:	77 35                	ja     c0013045 <File::write(unsigned long long, void*, int*)+0x49>
c0013010:	8b 04 85 00 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1700]
c0013017:	85 c0                	test   eax,eax
c0013019:	74 2a                	je     c0013045 <File::write(unsigned long long, void*, int*)+0x49>
c001301b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013021:	85 c0                	test   eax,eax
c0013023:	74 20                	je     c0013045 <File::write(unsigned long long, void*, int*)+0x49>
c0013025:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013029:	74 21                	je     c001304c <File::write(unsigned long long, void*, int*)+0x50>
c001302b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001302d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013031:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013037:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001303b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001303f:	5b                   	pop    ebx
c0013040:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013043:	ff e0                	jmp    eax
c0013045:	b8 0b 00 00 00       	mov    eax,0xb
c001304a:	eb 05                	jmp    c0013051 <File::write(unsigned long long, void*, int*)+0x55>
c001304c:	b8 05 00 00 00       	mov    eax,0x5
c0013051:	5b                   	pop    ebx
c0013052:	c3                   	ret    
c0013053:	90                   	nop

c0013054 <Directory::read(unsigned long long, void*, int*)>:
c0013054:	53                   	push   ebx
c0013055:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013059:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001305d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013064:	3c 19                	cmp    al,0x19
c0013066:	77 35                	ja     c001309d <Directory::read(unsigned long long, void*, int*)+0x49>
c0013068:	8b 04 85 00 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1700]
c001306f:	85 c0                	test   eax,eax
c0013071:	74 2a                	je     c001309d <Directory::read(unsigned long long, void*, int*)+0x49>
c0013073:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013079:	85 c0                	test   eax,eax
c001307b:	74 20                	je     c001309d <Directory::read(unsigned long long, void*, int*)+0x49>
c001307d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013081:	74 21                	je     c00130a4 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013083:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013085:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013089:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001308f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013093:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013097:	5b                   	pop    ebx
c0013098:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001309b:	ff e0                	jmp    eax
c001309d:	b8 0b 00 00 00       	mov    eax,0xb
c00130a2:	eb 05                	jmp    c00130a9 <Directory::read(unsigned long long, void*, int*)+0x55>
c00130a4:	b8 05 00 00 00       	mov    eax,0x5
c00130a9:	5b                   	pop    ebx
c00130aa:	c3                   	ret    
c00130ab:	90                   	nop

c00130ac <Directory::write(unsigned long long, void*, int*)>:
c00130ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130b0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00130b7:	b8 0b 00 00 00       	mov    eax,0xb
c00130bc:	80 fa 19             	cmp    dl,0x19
c00130bf:	77 18                	ja     c00130d9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130c1:	8b 14 95 00 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1700]
c00130c8:	85 d2                	test   edx,edx
c00130ca:	74 0d                	je     c00130d9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130cc:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00130d3:	19 c0                	sbb    eax,eax
c00130d5:	83 e0 0a             	and    eax,0xa
c00130d8:	40                   	inc    eax
c00130d9:	c3                   	ret    

c00130da <File::isAtty()>:
c00130da:	31 c0                	xor    eax,eax
c00130dc:	c3                   	ret    
c00130dd:	90                   	nop

c00130de <Directory::isAtty()>:
c00130de:	31 c0                	xor    eax,eax
c00130e0:	c3                   	ret    
c00130e1:	90                   	nop

c00130e2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130e2:	b8 0a 00 00 00       	mov    eax,0xa
c00130e7:	c3                   	ret    

c00130e8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00130e8:	b8 0a 00 00 00       	mov    eax,0xa
c00130ed:	c3                   	ret    

c00130ee <File::~File()>:
c00130ee:	83 ec 0c             	sub    esp,0xc
c00130f1:	ba f4 a9 02 c0       	mov    edx,0xc002a9f4
c00130f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130fa:	89 10                	mov    DWORD PTR [eax],edx
c00130fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	50                   	push   eax
c0013104:	e8 d1 e7 ff ff       	call   c00118da <UnixFile::~UnixFile()>
c0013109:	83 c4 10             	add    esp,0x10
c001310c:	90                   	nop
c001310d:	83 c4 0c             	add    esp,0xc
c0013110:	c3                   	ret    
c0013111:	90                   	nop

c0013112 <File::~File()>:
c0013112:	83 ec 0c             	sub    esp,0xc
c0013115:	83 ec 0c             	sub    esp,0xc
c0013118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001311c:	e8 cd ff ff ff       	call   c00130ee <File::~File()>
c0013121:	83 c4 10             	add    esp,0x10
c0013124:	83 ec 08             	sub    esp,0x8
c0013127:	68 14 01 00 00       	push   0x114
c001312c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013130:	e8 71 fc ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0013135:	83 c4 10             	add    esp,0x10
c0013138:	83 c4 0c             	add    esp,0xc
c001313b:	c3                   	ret    

c001313c <Directory::~Directory()>:
c001313c:	83 ec 0c             	sub    esp,0xc
c001313f:	ba 10 aa 02 c0       	mov    edx,0xc002aa10
c0013144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013148:	89 10                	mov    DWORD PTR [eax],edx
c001314a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001314e:	83 ec 0c             	sub    esp,0xc
c0013151:	50                   	push   eax
c0013152:	e8 83 e7 ff ff       	call   c00118da <UnixFile::~UnixFile()>
c0013157:	83 c4 10             	add    esp,0x10
c001315a:	90                   	nop
c001315b:	83 c4 0c             	add    esp,0xc
c001315e:	c3                   	ret    
c001315f:	90                   	nop

c0013160 <Directory::~Directory()>:
c0013160:	83 ec 0c             	sub    esp,0xc
c0013163:	83 ec 0c             	sub    esp,0xc
c0013166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001316a:	e8 cd ff ff ff       	call   c001313c <Directory::~Directory()>
c001316f:	83 c4 10             	add    esp,0x10
c0013172:	83 ec 08             	sub    esp,0x8
c0013175:	68 14 01 00 00       	push   0x114
c001317a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001317e:	e8 23 fc ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0013183:	83 c4 10             	add    esp,0x10
c0013186:	83 c4 0c             	add    esp,0xc
c0013189:	c3                   	ret    

c001318a <Filesystem::Filesystem()>:
c001318a:	ba 90 a9 02 c0       	mov    edx,0xc002a990
c001318f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013193:	89 10                	mov    DWORD PTR [eax],edx
c0013195:	8b 15 70 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e470
c001319b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001319f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131a6:	a3 70 e4 02 c0       	mov    ds:0xc002e470,eax
c00131ab:	90                   	nop
c00131ac:	c3                   	ret    
c00131ad:	90                   	nop

c00131ae <Filesystem::~Filesystem()>:
c00131ae:	ba 90 a9 02 c0       	mov    edx,0xc002a990
c00131b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131b7:	89 10                	mov    DWORD PTR [eax],edx
c00131b9:	90                   	nop
c00131ba:	c3                   	ret    
c00131bb:	90                   	nop

c00131bc <Filesystem::~Filesystem()>:
c00131bc:	83 ec 0c             	sub    esp,0xc
c00131bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131c3:	e8 e6 ff ff ff       	call   c00131ae <Filesystem::~Filesystem()>
c00131c8:	83 c4 04             	add    esp,0x4
c00131cb:	83 ec 08             	sub    esp,0x8
c00131ce:	6a 08                	push   0x8
c00131d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131d4:	e8 cd fb ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c00131d9:	83 c4 10             	add    esp,0x10
c00131dc:	83 c4 0c             	add    esp,0xc
c00131df:	c3                   	ret    

c00131e0 <Fs::getcwd(Process*, char*, int)>:
c00131e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131e4:	31 c0                	xor    eax,eax
c00131e6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131e9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131ed:	7d 15                	jge    c0013204 <Fs::getcwd(Process*, char*, int)+0x24>
c00131ef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131f3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00131fa:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00131fd:	84 c9                	test   cl,cl
c00131ff:	74 06                	je     c0013207 <Fs::getcwd(Process*, char*, int)+0x27>
c0013201:	40                   	inc    eax
c0013202:	eb e2                	jmp    c00131e6 <Fs::getcwd(Process*, char*, int)+0x6>
c0013204:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013207:	31 c0                	xor    eax,eax
c0013209:	c3                   	ret    

c001320a <Fs::initVFS()>:
c001320a:	83 ec 18             	sub    esp,0x18
c001320d:	6a 08                	push   0x8
c001320f:	e8 2c c6 ff ff       	call   c000f840 <malloc>
c0013214:	89 04 24             	mov    DWORD PTR [esp],eax
c0013217:	e8 78 dc 00 00       	call   c0020e94 <FAT::FAT()>
c001321c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013223:	e8 18 c6 ff ff       	call   c000f840 <malloc>
c0013228:	89 04 24             	mov    DWORD PTR [esp],eax
c001322b:	e8 bc ee 00 00       	call   c00220ec <ISO9660::ISO9660()>
c0013230:	83 c4 1c             	add    esp,0x1c
c0013233:	c3                   	ret    

c0013234 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013234:	55                   	push   ebp
c0013235:	57                   	push   edi
c0013236:	56                   	push   esi
c0013237:	53                   	push   ebx
c0013238:	81 ec 10 04 00 00    	sub    esp,0x410
c001323e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013245:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001324c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013253:	68 00 04 00 00       	push   0x400
c0013258:	6a 00                	push   0x0
c001325a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001325e:	56                   	push   esi
c001325f:	e8 14 d5 fe ff       	call   c0000778 <memset>
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001326b:	75 0b                	jne    c0013278 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001326d:	50                   	push   eax
c001326e:	50                   	push   eax
c001326f:	57                   	push   edi
c0013270:	56                   	push   esi
c0013271:	e8 be d5 fe ff       	call   c0000834 <strcpy>
c0013276:	eb 41                	jmp    c00132b9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013278:	8a 07                	mov    al,BYTE PTR [edi]
c001327a:	3c 5c                	cmp    al,0x5c
c001327c:	74 04                	je     c0013282 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001327e:	3c 2f                	cmp    al,0x2f
c0013280:	75 18                	jne    c001329a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013282:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013285:	3c 60                	cmp    al,0x60
c0013287:	7e 03                	jle    c001328c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013289:	83 e8 20             	sub    eax,0x20
c001328c:	88 04 24             	mov    BYTE PTR [esp],al
c001328f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013296:	50                   	push   eax
c0013297:	50                   	push   eax
c0013298:	eb 18                	jmp    c00132b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001329a:	50                   	push   eax
c001329b:	50                   	push   eax
c001329c:	55                   	push   ebp
c001329d:	56                   	push   esi
c001329e:	e8 91 d5 fe ff       	call   c0000834 <strcpy>
c00132a3:	5a                   	pop    edx
c00132a4:	59                   	pop    ecx
c00132a5:	68 bc c0 02 c0       	push   0xc002c0bc
c00132aa:	56                   	push   esi
c00132ab:	e8 c4 d6 fe ff       	call   c0000974 <strcat>
c00132b0:	5d                   	pop    ebp
c00132b1:	58                   	pop    eax
c00132b2:	57                   	push   edi
c00132b3:	56                   	push   esi
c00132b4:	e8 bb d6 fe ff       	call   c0000974 <strcat>
c00132b9:	83 c4 10             	add    esp,0x10
c00132bc:	8a 04 24             	mov    al,BYTE PTR [esp]
c00132bf:	3c 60                	cmp    al,0x60
c00132c1:	7e 03                	jle    c00132c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00132c3:	83 e8 20             	sub    eax,0x20
c00132c6:	88 04 24             	mov    BYTE PTR [esp],al
c00132c9:	88 03                	mov    BYTE PTR [ebx],al
c00132cb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132d2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00132d8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132dc:	bf 03 00 00 00       	mov    edi,0x3
c00132e1:	b8 03 00 00 00       	mov    eax,0x3
c00132e6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132e9:	84 d2                	test   dl,dl
c00132eb:	0f 84 91 00 00 00    	je     c0013382 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132f1:	8d 4f 01             	lea    ecx,[edi+0x1]
c00132f4:	80 fa 5c             	cmp    dl,0x5c
c00132f7:	74 05                	je     c00132fe <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00132f9:	80 fa 2f             	cmp    dl,0x2f
c00132fc:	75 12                	jne    c0013310 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132fe:	89 c5                	mov    ebp,eax
c0013300:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013305:	74 09                	je     c0013310 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013307:	40                   	inc    eax
c0013308:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001330c:	89 cf                	mov    edi,ecx
c001330e:	eb d6                	jmp    c00132e6 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013310:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013315:	75 5b                	jne    c0013372 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013317:	80 fa 2e             	cmp    dl,0x2e
c001331a:	75 56                	jne    c0013372 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001331c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013320:	74 19                	je     c001333b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013322:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013327:	74 53                	je     c001337c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013329:	89 f9                	mov    ecx,edi
c001332b:	41                   	inc    ecx
c001332c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001332f:	80 fa 2f             	cmp    dl,0x2f
c0013332:	74 f7                	je     c001332b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013334:	80 fa 5c             	cmp    dl,0x5c
c0013337:	74 f2                	je     c001332b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013339:	eb d1                	jmp    c001330c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001333b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013340:	74 3a                	je     c001337c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013342:	83 f8 03             	cmp    eax,0x3
c0013345:	74 c5                	je     c001330c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013347:	41                   	inc    ecx
c0013348:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001334b:	80 fa 2f             	cmp    dl,0x2f
c001334e:	74 f7                	je     c0013347 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013350:	80 fa 5c             	cmp    dl,0x5c
c0013353:	74 f2                	je     c0013347 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013355:	48                   	dec    eax
c0013356:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001335a:	75 06                	jne    c0013362 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001335c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013360:	eb f3                	jmp    c0013355 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013362:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013366:	74 07                	je     c001336f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013368:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001336c:	48                   	dec    eax
c001336d:	eb f3                	jmp    c0013362 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001336f:	40                   	inc    eax
c0013370:	eb 9a                	jmp    c001330c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013372:	80 fa 2f             	cmp    dl,0x2f
c0013375:	74 95                	je     c001330c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013377:	80 fa 5c             	cmp    dl,0x5c
c001337a:	74 90                	je     c001330c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001337c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001337f:	40                   	inc    eax
c0013380:	eb 8a                	jmp    c001330c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013382:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013386:	83 ec 0c             	sub    esp,0xc
c0013389:	53                   	push   ebx
c001338a:	e8 05 d4 fe ff       	call   c0000794 <strlen>
c001338f:	83 c4 10             	add    esp,0x10
c0013392:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013397:	75 26                	jne    c00133bf <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013399:	83 ec 0c             	sub    esp,0xc
c001339c:	53                   	push   ebx
c001339d:	e8 f2 d3 fe ff       	call   c0000794 <strlen>
c00133a2:	83 c4 10             	add    esp,0x10
c00133a5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133aa:	74 26                	je     c00133d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133ac:	83 ec 0c             	sub    esp,0xc
c00133af:	53                   	push   ebx
c00133b0:	e8 df d3 fe ff       	call   c0000794 <strlen>
c00133b5:	83 c4 10             	add    esp,0x10
c00133b8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00133bd:	eb c7                	jmp    c0013386 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00133bf:	83 ec 0c             	sub    esp,0xc
c00133c2:	53                   	push   ebx
c00133c3:	e8 cc d3 fe ff       	call   c0000794 <strlen>
c00133c8:	83 c4 10             	add    esp,0x10
c00133cb:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133d0:	74 c7                	je     c0013399 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00133d2:	81 c4 0c 04 00 00    	add    esp,0x40c
c00133d8:	5b                   	pop    ebx
c00133d9:	5e                   	pop    esi
c00133da:	5f                   	pop    edi
c00133db:	5d                   	pop    ebp
c00133dc:	c3                   	ret    
c00133dd:	90                   	nop

c00133de <File::File(char const*, Process*)>:
c00133de:	83 ec 0c             	sub    esp,0xc
c00133e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e5:	83 ec 08             	sub    esp,0x8
c00133e8:	6a 00                	push   0x0
c00133ea:	50                   	push   eax
c00133eb:	e8 08 e3 ff ff       	call   c00116f8 <UnixFile::UnixFile(int)>
c00133f0:	83 c4 10             	add    esp,0x10
c00133f3:	ba f4 a9 02 c0       	mov    edx,0xc002a9f4
c00133f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fc:	89 10                	mov    DWORD PTR [eax],edx
c00133fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013402:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340c:	83 c0 0d             	add    eax,0xd
c001340f:	83 ec 04             	sub    esp,0x4
c0013412:	52                   	push   edx
c0013413:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013417:	50                   	push   eax
c0013418:	e8 17 fe ff ff       	call   c0013234 <Fs::standardiseFiles(char*, char const*, char const*)>
c001341d:	83 c4 10             	add    esp,0x10
c0013420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013424:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013427:	8d 50 bf             	lea    edx,[eax-0x41]
c001342a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013438:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001343c:	90                   	nop
c001343d:	83 c4 0c             	add    esp,0xc
c0013440:	c3                   	ret    
c0013441:	90                   	nop

c0013442 <File::open(FileOpenMode)>:
c0013442:	53                   	push   ebx
c0013443:	b8 0b 00 00 00       	mov    eax,0xb
c0013448:	83 ec 08             	sub    esp,0x8
c001344b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001344f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013456:	80 fa 19             	cmp    dl,0x19
c0013459:	77 40                	ja     c001349b <File::open(FileOpenMode)+0x59>
c001345b:	8b 14 95 00 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1700]
c0013462:	85 d2                	test   edx,edx
c0013464:	74 35                	je     c001349b <File::open(FileOpenMode)+0x59>
c0013466:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001346c:	85 d2                	test   edx,edx
c001346e:	74 2b                	je     c001349b <File::open(FileOpenMode)+0x59>
c0013470:	b8 06 00 00 00       	mov    eax,0x6
c0013475:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013479:	75 20                	jne    c001349b <File::open(FileOpenMode)+0x59>
c001347b:	8b 02                	mov    eax,DWORD PTR [edx]
c001347d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013483:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013487:	51                   	push   ecx
c0013488:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001348b:	51                   	push   ecx
c001348c:	52                   	push   edx
c001348d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013490:	83 c4 10             	add    esp,0x10
c0013493:	85 c0                	test   eax,eax
c0013495:	75 04                	jne    c001349b <File::open(FileOpenMode)+0x59>
c0013497:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001349b:	83 c4 08             	add    esp,0x8
c001349e:	5b                   	pop    ebx
c001349f:	c3                   	ret    

c00134a0 <File::close()>:
c00134a0:	53                   	push   ebx
c00134a1:	b8 0b 00 00 00       	mov    eax,0xb
c00134a6:	83 ec 08             	sub    esp,0x8
c00134a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134ad:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134b4:	80 fa 19             	cmp    dl,0x19
c00134b7:	77 41                	ja     c00134fa <File::close()+0x5a>
c00134b9:	8b 1c 95 00 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1700]
c00134c0:	85 db                	test   ebx,ebx
c00134c2:	74 36                	je     c00134fa <File::close()+0x5a>
c00134c4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134cb:	74 2d                	je     c00134fa <File::close()+0x5a>
c00134cd:	b8 05 00 00 00       	mov    eax,0x5
c00134d2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134d6:	74 22                	je     c00134fa <File::close()+0x5a>
c00134d8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134dc:	8b 04 95 00 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1700]
c00134e3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134e9:	53                   	push   ebx
c00134ea:	53                   	push   ebx
c00134eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00134ed:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134f3:	50                   	push   eax
c00134f4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00134f7:	83 c4 10             	add    esp,0x10
c00134fa:	83 c4 08             	add    esp,0x8
c00134fd:	5b                   	pop    ebx
c00134fe:	c3                   	ret    
c00134ff:	90                   	nop

c0013500 <File::seek(unsigned long long)>:
c0013500:	56                   	push   esi
c0013501:	53                   	push   ebx
c0013502:	b8 0b 00 00 00       	mov    eax,0xb
c0013507:	51                   	push   ecx
c0013508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001350c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013510:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013517:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001351b:	80 fa 19             	cmp    dl,0x19
c001351e:	77 31                	ja     c0013551 <File::seek(unsigned long long)+0x51>
c0013520:	8b 14 95 00 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1700]
c0013527:	85 d2                	test   edx,edx
c0013529:	74 26                	je     c0013551 <File::seek(unsigned long long)+0x51>
c001352b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013531:	85 d2                	test   edx,edx
c0013533:	74 1c                	je     c0013551 <File::seek(unsigned long long)+0x51>
c0013535:	b8 05 00 00 00       	mov    eax,0x5
c001353a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001353e:	74 11                	je     c0013551 <File::seek(unsigned long long)+0x51>
c0013540:	8b 02                	mov    eax,DWORD PTR [edx]
c0013542:	53                   	push   ebx
c0013543:	51                   	push   ecx
c0013544:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001354a:	52                   	push   edx
c001354b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001354e:	83 c4 10             	add    esp,0x10
c0013551:	5a                   	pop    edx
c0013552:	5b                   	pop    ebx
c0013553:	5e                   	pop    esi
c0013554:	c3                   	ret    
c0013555:	90                   	nop

c0013556 <File::tell(unsigned long long*)>:
c0013556:	83 ec 0c             	sub    esp,0xc
c0013559:	b8 0b 00 00 00       	mov    eax,0xb
c001355e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013562:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013569:	80 fa 19             	cmp    dl,0x19
c001356c:	77 34                	ja     c00135a2 <File::tell(unsigned long long*)+0x4c>
c001356e:	8b 14 95 00 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1700]
c0013575:	85 d2                	test   edx,edx
c0013577:	74 29                	je     c00135a2 <File::tell(unsigned long long*)+0x4c>
c0013579:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001357f:	85 d2                	test   edx,edx
c0013581:	74 1f                	je     c00135a2 <File::tell(unsigned long long*)+0x4c>
c0013583:	b8 05 00 00 00       	mov    eax,0x5
c0013588:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001358c:	74 14                	je     c00135a2 <File::tell(unsigned long long*)+0x4c>
c001358e:	50                   	push   eax
c001358f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013591:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013595:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001359b:	52                   	push   edx
c001359c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001359f:	83 c4 10             	add    esp,0x10
c00135a2:	83 c4 0c             	add    esp,0xc
c00135a5:	c3                   	ret    

c00135a6 <File::rewind()>:
c00135a6:	83 ec 10             	sub    esp,0x10
c00135a9:	6a 00                	push   0x0
c00135ab:	6a 00                	push   0x0
c00135ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135b1:	e8 4a ff ff ff       	call   c0013500 <File::seek(unsigned long long)>
c00135b6:	83 c4 1c             	add    esp,0x1c
c00135b9:	c3                   	ret    

c00135ba <File::unlink()>:
c00135ba:	83 ec 0c             	sub    esp,0xc
c00135bd:	b8 0b 00 00 00       	mov    eax,0xb
c00135c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135cd:	80 f9 19             	cmp    cl,0x19
c00135d0:	77 2f                	ja     c0013601 <File::unlink()+0x47>
c00135d2:	8b 0c 8d 00 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1700]
c00135d9:	85 c9                	test   ecx,ecx
c00135db:	74 24                	je     c0013601 <File::unlink()+0x47>
c00135dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135e3:	85 c9                	test   ecx,ecx
c00135e5:	74 1a                	je     c0013601 <File::unlink()+0x47>
c00135e7:	b8 06 00 00 00       	mov    eax,0x6
c00135ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135f0:	75 0f                	jne    c0013601 <File::unlink()+0x47>
c00135f2:	83 c2 0d             	add    edx,0xd
c00135f5:	50                   	push   eax
c00135f6:	50                   	push   eax
c00135f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135f9:	52                   	push   edx
c00135fa:	51                   	push   ecx
c00135fb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00135fe:	83 c4 10             	add    esp,0x10
c0013601:	83 c4 0c             	add    esp,0xc
c0013604:	c3                   	ret    
c0013605:	90                   	nop

c0013606 <File::rename(char const*)>:
c0013606:	83 ec 0c             	sub    esp,0xc
c0013609:	b8 0b 00 00 00       	mov    eax,0xb
c001360e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013612:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013619:	80 f9 19             	cmp    cl,0x19
c001361c:	77 32                	ja     c0013650 <File::rename(char const*)+0x4a>
c001361e:	8b 0c 8d 00 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1700]
c0013625:	85 c9                	test   ecx,ecx
c0013627:	74 27                	je     c0013650 <File::rename(char const*)+0x4a>
c0013629:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001362f:	85 c9                	test   ecx,ecx
c0013631:	74 1d                	je     c0013650 <File::rename(char const*)+0x4a>
c0013633:	b8 06 00 00 00       	mov    eax,0x6
c0013638:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001363c:	75 12                	jne    c0013650 <File::rename(char const*)+0x4a>
c001363e:	83 c2 0d             	add    edx,0xd
c0013641:	50                   	push   eax
c0013642:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013644:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013648:	52                   	push   edx
c0013649:	51                   	push   ecx
c001364a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001364d:	83 c4 10             	add    esp,0x10
c0013650:	83 c4 0c             	add    esp,0xc
c0013653:	c3                   	ret    

c0013654 <File::chfatattr(unsigned char, unsigned char)>:
c0013654:	57                   	push   edi
c0013655:	b8 0b 00 00 00       	mov    eax,0xb
c001365a:	56                   	push   esi
c001365b:	53                   	push   ebx
c001365c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013660:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013664:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001366b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001366f:	80 f9 19             	cmp    cl,0x19
c0013672:	77 37                	ja     c00136ab <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013674:	8b 0c 8d 00 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1700]
c001367b:	85 c9                	test   ecx,ecx
c001367d:	74 2c                	je     c00136ab <File::chfatattr(unsigned char, unsigned char)+0x57>
c001367f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013685:	85 c9                	test   ecx,ecx
c0013687:	74 22                	je     c00136ab <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013689:	b8 06 00 00 00       	mov    eax,0x6
c001368e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013692:	75 17                	jne    c00136ab <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013694:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013696:	89 f0                	mov    eax,esi
c0013698:	83 c2 0d             	add    edx,0xd
c001369b:	0f b6 f0             	movzx  esi,al
c001369e:	0f b6 db             	movzx  ebx,bl
c00136a1:	56                   	push   esi
c00136a2:	53                   	push   ebx
c00136a3:	52                   	push   edx
c00136a4:	51                   	push   ecx
c00136a5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136a8:	83 c4 10             	add    esp,0x10
c00136ab:	5b                   	pop    ebx
c00136ac:	5e                   	pop    esi
c00136ad:	5f                   	pop    edi
c00136ae:	c3                   	ret    
c00136af:	90                   	nop

c00136b0 <File::exists()>:
c00136b0:	83 ec 0c             	sub    esp,0xc
c00136b3:	31 c0                	xor    eax,eax
c00136b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136b9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136c0:	80 f9 19             	cmp    cl,0x19
c00136c3:	77 24                	ja     c00136e9 <File::exists()+0x39>
c00136c5:	8b 0c 8d 00 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1700]
c00136cc:	85 c9                	test   ecx,ecx
c00136ce:	74 19                	je     c00136e9 <File::exists()+0x39>
c00136d0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136d6:	85 c9                	test   ecx,ecx
c00136d8:	74 0f                	je     c00136e9 <File::exists()+0x39>
c00136da:	83 c2 0d             	add    edx,0xd
c00136dd:	50                   	push   eax
c00136de:	50                   	push   eax
c00136df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136e1:	52                   	push   edx
c00136e2:	51                   	push   ecx
c00136e3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136e6:	83 c4 10             	add    esp,0x10
c00136e9:	83 c4 0c             	add    esp,0xc
c00136ec:	c3                   	ret    
c00136ed:	90                   	nop

c00136ee <File::stat(unsigned long long*, bool*)>:
c00136ee:	56                   	push   esi
c00136ef:	53                   	push   ebx
c00136f0:	50                   	push   eax
c00136f1:	b8 0b 00 00 00       	mov    eax,0xb
c00136f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136fa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013705:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013709:	80 f9 19             	cmp    cl,0x19
c001370c:	77 3d                	ja     c001374b <File::stat(unsigned long long*, bool*)+0x5d>
c001370e:	8b 0c 8d 00 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1700]
c0013715:	85 c9                	test   ecx,ecx
c0013717:	74 32                	je     c001374b <File::stat(unsigned long long*, bool*)+0x5d>
c0013719:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001371f:	85 c9                	test   ecx,ecx
c0013721:	74 28                	je     c001374b <File::stat(unsigned long long*, bool*)+0x5d>
c0013723:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013725:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013729:	74 13                	je     c001373e <File::stat(unsigned long long*, bool*)+0x50>
c001372b:	83 ec 04             	sub    esp,0x4
c001372e:	56                   	push   esi
c001372f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013735:	51                   	push   ecx
c0013736:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013739:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001373c:	eb 0a                	jmp    c0013748 <File::stat(unsigned long long*, bool*)+0x5a>
c001373e:	53                   	push   ebx
c001373f:	83 c2 0d             	add    edx,0xd
c0013742:	56                   	push   esi
c0013743:	52                   	push   edx
c0013744:	51                   	push   ecx
c0013745:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013748:	83 c4 10             	add    esp,0x10
c001374b:	5a                   	pop    edx
c001374c:	5b                   	pop    ebx
c001374d:	5e                   	pop    esi
c001374e:	c3                   	ret    

c001374f <Fs::setcwd(Process*, char*)>:
c001374f:	55                   	push   ebp
c0013750:	57                   	push   edi
c0013751:	56                   	push   esi
c0013752:	53                   	push   ebx
c0013753:	81 ec 20 02 00 00    	sub    esp,0x220
c0013759:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013760:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013766:	57                   	push   edi
c0013767:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001376e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013772:	56                   	push   esi
c0013773:	e8 bc fa ff ff       	call   c0013234 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013778:	89 34 24             	mov    DWORD PTR [esp],esi
c001377b:	e8 14 d0 fe ff       	call   c0000794 <strlen>
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	83 f8 02             	cmp    eax,0x2
c0013786:	77 17                	ja     c001379f <Fs::setcwd(Process*, char*)+0x50>
c0013788:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001378d:	83 e8 41             	sub    eax,0x41
c0013790:	83 f8 19             	cmp    eax,0x19
c0013793:	76 24                	jbe    c00137b9 <Fs::setcwd(Process*, char*)+0x6a>
c0013795:	b8 03 00 00 00       	mov    eax,0x3
c001379a:	e9 e0 00 00 00       	jmp    c001387f <Fs::setcwd(Process*, char*)+0x130>
c001379f:	83 ec 0c             	sub    esp,0xc
c00137a2:	56                   	push   esi
c00137a3:	e8 ec cf fe ff       	call   c0000794 <strlen>
c00137a8:	83 c4 10             	add    esp,0x10
c00137ab:	83 f8 03             	cmp    eax,0x3
c00137ae:	75 34                	jne    c00137e4 <Fs::setcwd(Process*, char*)+0x95>
c00137b0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00137b5:	75 2d                	jne    c00137e4 <Fs::setcwd(Process*, char*)+0x95>
c00137b7:	eb cf                	jmp    c0013788 <Fs::setcwd(Process*, char*)+0x39>
c00137b9:	8b 14 85 00 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1700]
c00137c0:	b8 05 00 00 00       	mov    eax,0x5
c00137c5:	85 d2                	test   edx,edx
c00137c7:	0f 84 b2 00 00 00    	je     c001387f <Fs::setcwd(Process*, char*)+0x130>
c00137cd:	b8 06 00 00 00       	mov    eax,0x6
c00137d2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137d9:	0f 85 92 00 00 00    	jne    c0013871 <Fs::setcwd(Process*, char*)+0x122>
c00137df:	e9 9b 00 00 00       	jmp    c001387f <Fs::setcwd(Process*, char*)+0x130>
c00137e4:	83 ec 0c             	sub    esp,0xc
c00137e7:	68 14 01 00 00       	push   0x114
c00137ec:	e8 4f c0 ff ff       	call   c000f840 <malloc>
c00137f1:	83 c4 0c             	add    esp,0xc
c00137f4:	89 c3                	mov    ebx,eax
c00137f6:	55                   	push   ebp
c00137f7:	56                   	push   esi
c00137f8:	50                   	push   eax
c00137f9:	e8 e0 fb ff ff       	call   c00133de <File::File(char const*, Process*)>
c00137fe:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013803:	83 c4 0c             	add    esp,0xc
c0013806:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001380a:	50                   	push   eax
c001380b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001380f:	50                   	push   eax
c0013810:	53                   	push   ebx
c0013811:	e8 d8 fe ff ff       	call   c00136ee <File::stat(unsigned long long*, bool*)>
c0013816:	83 c4 10             	add    esp,0x10
c0013819:	83 f8 02             	cmp    eax,0x2
c001381c:	74 04                	je     c0013822 <Fs::setcwd(Process*, char*)+0xd3>
c001381e:	85 c0                	test   eax,eax
c0013820:	74 1c                	je     c001383e <Fs::setcwd(Process*, char*)+0xef>
c0013822:	b8 01 00 00 00       	mov    eax,0x1
c0013827:	85 db                	test   ebx,ebx
c0013829:	74 54                	je     c001387f <Fs::setcwd(Process*, char*)+0x130>
c001382b:	83 ec 0c             	sub    esp,0xc
c001382e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013830:	53                   	push   ebx
c0013831:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013834:	83 c4 10             	add    esp,0x10
c0013837:	b8 01 00 00 00       	mov    eax,0x1
c001383c:	eb 41                	jmp    c001387f <Fs::setcwd(Process*, char*)+0x130>
c001383e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013843:	75 1c                	jne    c0013861 <Fs::setcwd(Process*, char*)+0x112>
c0013845:	b8 02 00 00 00       	mov    eax,0x2
c001384a:	85 db                	test   ebx,ebx
c001384c:	74 31                	je     c001387f <Fs::setcwd(Process*, char*)+0x130>
c001384e:	83 ec 0c             	sub    esp,0xc
c0013851:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013853:	53                   	push   ebx
c0013854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013857:	83 c4 10             	add    esp,0x10
c001385a:	b8 02 00 00 00       	mov    eax,0x2
c001385f:	eb 1e                	jmp    c001387f <Fs::setcwd(Process*, char*)+0x130>
c0013861:	85 db                	test   ebx,ebx
c0013863:	74 0c                	je     c0013871 <Fs::setcwd(Process*, char*)+0x122>
c0013865:	83 ec 0c             	sub    esp,0xc
c0013868:	8b 03                	mov    eax,DWORD PTR [ebx]
c001386a:	53                   	push   ebx
c001386b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001386e:	83 c4 10             	add    esp,0x10
c0013871:	50                   	push   eax
c0013872:	50                   	push   eax
c0013873:	56                   	push   esi
c0013874:	57                   	push   edi
c0013875:	e8 ba cf fe ff       	call   c0000834 <strcpy>
c001387a:	83 c4 10             	add    esp,0x10
c001387d:	31 c0                	xor    eax,eax
c001387f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013885:	5b                   	pop    ebx
c0013886:	5e                   	pop    esi
c0013887:	5f                   	pop    edi
c0013888:	5d                   	pop    ebp
c0013889:	c3                   	ret    

c001388a <Directory::Directory(char const*, Process*)>:
c001388a:	83 ec 0c             	sub    esp,0xc
c001388d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013891:	83 ec 08             	sub    esp,0x8
c0013894:	6a 00                	push   0x0
c0013896:	50                   	push   eax
c0013897:	e8 5c de ff ff       	call   c00116f8 <UnixFile::UnixFile(int)>
c001389c:	83 c4 10             	add    esp,0x10
c001389f:	ba 10 aa 02 c0       	mov    edx,0xc002aa10
c00138a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a8:	89 10                	mov    DWORD PTR [eax],edx
c00138aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138ae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00138b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b8:	83 c0 0d             	add    eax,0xd
c00138bb:	83 ec 04             	sub    esp,0x4
c00138be:	52                   	push   edx
c00138bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138c3:	50                   	push   eax
c00138c4:	e8 6b f9 ff ff       	call   c0013234 <Fs::standardiseFiles(char*, char const*, char const*)>
c00138c9:	83 c4 10             	add    esp,0x10
c00138cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00138d3:	8d 50 bf             	lea    edx,[eax-0x41]
c00138d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138da:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138e8:	90                   	nop
c00138e9:	83 c4 0c             	add    esp,0xc
c00138ec:	c3                   	ret    
c00138ed:	90                   	nop

c00138ee <Directory::open()>:
c00138ee:	53                   	push   ebx
c00138ef:	b8 0b 00 00 00       	mov    eax,0xb
c00138f4:	83 ec 08             	sub    esp,0x8
c00138f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138fb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013902:	80 fa 19             	cmp    dl,0x19
c0013905:	77 3d                	ja     c0013944 <Directory::open()+0x56>
c0013907:	8b 14 95 00 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1700]
c001390e:	85 d2                	test   edx,edx
c0013910:	74 32                	je     c0013944 <Directory::open()+0x56>
c0013912:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013918:	85 d2                	test   edx,edx
c001391a:	74 28                	je     c0013944 <Directory::open()+0x56>
c001391c:	b8 06 00 00 00       	mov    eax,0x6
c0013921:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013925:	75 1d                	jne    c0013944 <Directory::open()+0x56>
c0013927:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001392d:	50                   	push   eax
c001392e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013930:	51                   	push   ecx
c0013931:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013934:	51                   	push   ecx
c0013935:	52                   	push   edx
c0013936:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013939:	83 c4 10             	add    esp,0x10
c001393c:	85 c0                	test   eax,eax
c001393e:	75 04                	jne    c0013944 <Directory::open()+0x56>
c0013940:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013944:	83 c4 08             	add    esp,0x8
c0013947:	5b                   	pop    ebx
c0013948:	c3                   	ret    
c0013949:	90                   	nop

c001394a <Directory::close()>:
c001394a:	53                   	push   ebx
c001394b:	b8 0b 00 00 00       	mov    eax,0xb
c0013950:	83 ec 08             	sub    esp,0x8
c0013953:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013957:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001395e:	80 fa 19             	cmp    dl,0x19
c0013961:	77 41                	ja     c00139a4 <Directory::close()+0x5a>
c0013963:	8b 1c 95 00 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1700]
c001396a:	85 db                	test   ebx,ebx
c001396c:	74 36                	je     c00139a4 <Directory::close()+0x5a>
c001396e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013975:	74 2d                	je     c00139a4 <Directory::close()+0x5a>
c0013977:	b8 05 00 00 00       	mov    eax,0x5
c001397c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013980:	74 22                	je     c00139a4 <Directory::close()+0x5a>
c0013982:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013986:	8b 04 95 00 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1700]
c001398d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013993:	53                   	push   ebx
c0013994:	53                   	push   ebx
c0013995:	8b 10                	mov    edx,DWORD PTR [eax]
c0013997:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001399d:	50                   	push   eax
c001399e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139a1:	83 c4 10             	add    esp,0x10
c00139a4:	83 c4 08             	add    esp,0x8
c00139a7:	5b                   	pop    ebx
c00139a8:	c3                   	ret    
c00139a9:	90                   	nop

c00139aa <Directory::unlink()>:
c00139aa:	83 ec 0c             	sub    esp,0xc
c00139ad:	b8 0b 00 00 00       	mov    eax,0xb
c00139b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139bd:	80 f9 19             	cmp    cl,0x19
c00139c0:	77 2f                	ja     c00139f1 <Directory::unlink()+0x47>
c00139c2:	8b 0c 8d 00 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1700]
c00139c9:	85 c9                	test   ecx,ecx
c00139cb:	74 24                	je     c00139f1 <Directory::unlink()+0x47>
c00139cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139d3:	85 c9                	test   ecx,ecx
c00139d5:	74 1a                	je     c00139f1 <Directory::unlink()+0x47>
c00139d7:	b8 06 00 00 00       	mov    eax,0x6
c00139dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139e0:	75 0f                	jne    c00139f1 <Directory::unlink()+0x47>
c00139e2:	83 c2 0d             	add    edx,0xd
c00139e5:	50                   	push   eax
c00139e6:	50                   	push   eax
c00139e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139e9:	52                   	push   edx
c00139ea:	51                   	push   ecx
c00139eb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139ee:	83 c4 10             	add    esp,0x10
c00139f1:	83 c4 0c             	add    esp,0xc
c00139f4:	c3                   	ret    
c00139f5:	90                   	nop

c00139f6 <Directory::rename(char const*)>:
c00139f6:	83 ec 0c             	sub    esp,0xc
c00139f9:	b8 0b 00 00 00       	mov    eax,0xb
c00139fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a02:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a09:	80 f9 19             	cmp    cl,0x19
c0013a0c:	77 32                	ja     c0013a40 <Directory::rename(char const*)+0x4a>
c0013a0e:	8b 0c 8d 00 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1700]
c0013a15:	85 c9                	test   ecx,ecx
c0013a17:	74 27                	je     c0013a40 <Directory::rename(char const*)+0x4a>
c0013a19:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a1f:	85 c9                	test   ecx,ecx
c0013a21:	74 1d                	je     c0013a40 <Directory::rename(char const*)+0x4a>
c0013a23:	b8 06 00 00 00       	mov    eax,0x6
c0013a28:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a2c:	75 12                	jne    c0013a40 <Directory::rename(char const*)+0x4a>
c0013a2e:	83 c2 0d             	add    edx,0xd
c0013a31:	50                   	push   eax
c0013a32:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a38:	52                   	push   edx
c0013a39:	51                   	push   ecx
c0013a3a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a3d:	83 c4 10             	add    esp,0x10
c0013a40:	83 c4 0c             	add    esp,0xc
c0013a43:	c3                   	ret    

c0013a44 <Directory::exists()>:
c0013a44:	83 ec 0c             	sub    esp,0xc
c0013a47:	31 c0                	xor    eax,eax
c0013a49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a4d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a54:	80 f9 19             	cmp    cl,0x19
c0013a57:	77 24                	ja     c0013a7d <Directory::exists()+0x39>
c0013a59:	8b 0c 8d 00 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1700]
c0013a60:	85 c9                	test   ecx,ecx
c0013a62:	74 19                	je     c0013a7d <Directory::exists()+0x39>
c0013a64:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a6a:	85 c9                	test   ecx,ecx
c0013a6c:	74 0f                	je     c0013a7d <Directory::exists()+0x39>
c0013a6e:	83 c2 0d             	add    edx,0xd
c0013a71:	50                   	push   eax
c0013a72:	50                   	push   eax
c0013a73:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a75:	52                   	push   edx
c0013a76:	51                   	push   ecx
c0013a77:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a7a:	83 c4 10             	add    esp,0x10
c0013a7d:	83 c4 0c             	add    esp,0xc
c0013a80:	c3                   	ret    
c0013a81:	90                   	nop

c0013a82 <Directory::read(dirent*)>:
c0013a82:	83 ec 1c             	sub    esp,0x1c
c0013a85:	b8 0b 00 00 00       	mov    eax,0xb
c0013a8a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a8e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a95:	80 fa 19             	cmp    dl,0x19
c0013a98:	77 30                	ja     c0013aca <Directory::read(dirent*)+0x48>
c0013a9a:	8b 14 95 00 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1700]
c0013aa1:	85 d2                	test   edx,edx
c0013aa3:	74 25                	je     c0013aca <Directory::read(dirent*)+0x48>
c0013aa5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013aac:	74 1c                	je     c0013aca <Directory::read(dirent*)+0x48>
c0013aae:	83 ec 0c             	sub    esp,0xc
c0013ab1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ab3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013ab7:	52                   	push   edx
c0013ab8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013abc:	6a 00                	push   0x0
c0013abe:	68 10 01 00 00       	push   0x110
c0013ac3:	51                   	push   ecx
c0013ac4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ac7:	83 c4 20             	add    esp,0x20
c0013aca:	83 c4 1c             	add    esp,0x1c
c0013acd:	c3                   	ret    

c0013ace <Directory::create()>:
c0013ace:	83 ec 0c             	sub    esp,0xc
c0013ad1:	b8 0b 00 00 00       	mov    eax,0xb
c0013ad6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ada:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ae1:	80 f9 19             	cmp    cl,0x19
c0013ae4:	77 2f                	ja     c0013b15 <Directory::create()+0x47>
c0013ae6:	8b 0c 8d 00 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1700]
c0013aed:	85 c9                	test   ecx,ecx
c0013aef:	74 24                	je     c0013b15 <Directory::create()+0x47>
c0013af1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013af7:	85 c9                	test   ecx,ecx
c0013af9:	74 1a                	je     c0013b15 <Directory::create()+0x47>
c0013afb:	b8 06 00 00 00       	mov    eax,0x6
c0013b00:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b04:	75 0f                	jne    c0013b15 <Directory::create()+0x47>
c0013b06:	83 c2 0d             	add    edx,0xd
c0013b09:	50                   	push   eax
c0013b0a:	50                   	push   eax
c0013b0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b0d:	52                   	push   edx
c0013b0e:	51                   	push   ecx
c0013b0f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b12:	83 c4 10             	add    esp,0x10
c0013b15:	83 c4 0c             	add    esp,0xc
c0013b18:	c3                   	ret    
c0013b19:	90                   	nop

c0013b1a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b1a:	b8 0a 00 00 00       	mov    eax,0xa
c0013b1f:	c3                   	ret    

c0013b20 <Bus::Bus(char const*)>:
c0013b20:	83 ec 0c             	sub    esp,0xc
c0013b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b27:	83 ec 08             	sub    esp,0x8
c0013b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b2e:	50                   	push   eax
c0013b2f:	e8 68 09 00 00       	call   c001449c <Device::Device(char const*)>
c0013b34:	83 c4 10             	add    esp,0x10
c0013b37:	ba 2c aa 02 c0       	mov    edx,0xc002aa2c
c0013b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b40:	89 10                	mov    DWORD PTR [eax],edx
c0013b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b46:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b50:	90                   	nop
c0013b51:	83 c4 0c             	add    esp,0xc
c0013b54:	c3                   	ret    
c0013b55:	90                   	nop

c0013b56 <Bus::~Bus()>:
c0013b56:	83 ec 0c             	sub    esp,0xc
c0013b59:	ba 2c aa 02 c0       	mov    edx,0xc002aa2c
c0013b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b62:	89 10                	mov    DWORD PTR [eax],edx
c0013b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b68:	83 ec 0c             	sub    esp,0xc
c0013b6b:	50                   	push   eax
c0013b6c:	e8 0d 06 00 00       	call   c001417e <Device::~Device()>
c0013b71:	83 c4 10             	add    esp,0x10
c0013b74:	90                   	nop
c0013b75:	83 c4 0c             	add    esp,0xc
c0013b78:	c3                   	ret    
c0013b79:	90                   	nop

c0013b7a <Bus::~Bus()>:
c0013b7a:	83 ec 0c             	sub    esp,0xc
c0013b7d:	83 ec 0c             	sub    esp,0xc
c0013b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b84:	e8 cd ff ff ff       	call   c0013b56 <Bus::~Bus()>
c0013b89:	83 c4 10             	add    esp,0x10
c0013b8c:	83 ec 08             	sub    esp,0x8
c0013b8f:	68 58 01 00 00       	push   0x158
c0013b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b98:	e8 09 f2 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0013b9d:	83 c4 10             	add    esp,0x10
c0013ba0:	83 c4 0c             	add    esp,0xc
c0013ba3:	c3                   	ret    

c0013ba4 <Buzzer::Buzzer(char const*)>:
c0013ba4:	83 ec 0c             	sub    esp,0xc
c0013ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bab:	83 ec 08             	sub    esp,0x8
c0013bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb2:	50                   	push   eax
c0013bb3:	e8 e4 08 00 00       	call   c001449c <Device::Device(char const*)>
c0013bb8:	83 c4 10             	add    esp,0x10
c0013bbb:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c0013bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc4:	89 10                	mov    DWORD PTR [eax],edx
c0013bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bca:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013be2:	90                   	nop
c0013be3:	83 c4 0c             	add    esp,0xc
c0013be6:	c3                   	ret    
c0013be7:	90                   	nop

c0013be8 <Buzzer::~Buzzer()>:
c0013be8:	83 ec 0c             	sub    esp,0xc
c0013beb:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c0013bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf4:	89 10                	mov    DWORD PTR [eax],edx
c0013bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bfa:	83 ec 0c             	sub    esp,0xc
c0013bfd:	50                   	push   eax
c0013bfe:	e8 7b 05 00 00       	call   c001417e <Device::~Device()>
c0013c03:	83 c4 10             	add    esp,0x10
c0013c06:	90                   	nop
c0013c07:	83 c4 0c             	add    esp,0xc
c0013c0a:	c3                   	ret    
c0013c0b:	90                   	nop

c0013c0c <Buzzer::~Buzzer()>:
c0013c0c:	83 ec 0c             	sub    esp,0xc
c0013c0f:	83 ec 0c             	sub    esp,0xc
c0013c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c16:	e8 cd ff ff ff       	call   c0013be8 <Buzzer::~Buzzer()>
c0013c1b:	83 c4 10             	add    esp,0x10
c0013c1e:	83 ec 08             	sub    esp,0x8
c0013c21:	68 5c 01 00 00       	push   0x15c
c0013c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c2a:	e8 77 f1 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0013c2f:	83 c4 10             	add    esp,0x10
c0013c32:	83 c4 0c             	add    esp,0xc
c0013c35:	c3                   	ret    

c0013c36 <Buzzer::stop()>:
c0013c36:	83 ec 14             	sub    esp,0x14
c0013c39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c3f:	6a 00                	push   0x0
c0013c41:	50                   	push   eax
c0013c42:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c45:	83 c4 1c             	add    esp,0x1c
c0013c48:	c3                   	ret    

c0013c49 <beepThread(void*)>:
c0013c49:	53                   	push   ebx
c0013c4a:	83 ec 08             	sub    esp,0x8
c0013c4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c51:	e8 cc a0 00 00       	call   c001dd22 <unlockScheduler()>
c0013c56:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c5b:	52                   	push   edx
c0013c5c:	52                   	push   edx
c0013c5d:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c63:	52                   	push   edx
c0013c64:	50                   	push   eax
c0013c65:	e8 06 a6 00 00       	call   c001e270 <nanoSleep(unsigned long long)>
c0013c6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c6d:	e8 c4 ff ff ff       	call   c0013c36 <Buzzer::stop()>
c0013c72:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c7a:	83 c4 18             	add    esp,0x18
c0013c7d:	5b                   	pop    ebx
c0013c7e:	e9 33 a5 00 00       	jmp    c001e1b6 <blockTask(TaskState)>
c0013c83:	90                   	nop

c0013c84 <Buzzer::beep(int, int, bool)>:
c0013c84:	57                   	push   edi
c0013c85:	56                   	push   esi
c0013c86:	53                   	push   ebx
c0013c87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c8f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c93:	52                   	push   edx
c0013c94:	52                   	push   edx
c0013c95:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c9b:	56                   	push   esi
c0013c9c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c9f:	83 c4 10             	add    esp,0x10
c0013ca2:	89 f8                	mov    eax,edi
c0013ca4:	84 c0                	test   al,al
c0013ca6:	74 1f                	je     c0013cc7 <Buzzer::beep(int, int, bool)+0x43>
c0013ca8:	50                   	push   eax
c0013ca9:	50                   	push   eax
c0013caa:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013cb0:	99                   	cdq    
c0013cb1:	52                   	push   edx
c0013cb2:	50                   	push   eax
c0013cb3:	e8 b8 a5 00 00       	call   c001e270 <nanoSleep(unsigned long long)>
c0013cb8:	83 c4 10             	add    esp,0x10
c0013cbb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013cbf:	5b                   	pop    ebx
c0013cc0:	5e                   	pop    esi
c0013cc1:	5f                   	pop    edi
c0013cc2:	e9 6f ff ff ff       	jmp    c0013c36 <Buzzer::stop()>
c0013cc7:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013ccd:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0013cd2:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013cda:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013cde:	c7 44 24 14 49 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c49
c0013ce6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cea:	5b                   	pop    ebx
c0013ceb:	5e                   	pop    esi
c0013cec:	5f                   	pop    edi
c0013ced:	e9 60 a1 00 00       	jmp    c001de52 <Process::createThread(void (*)(void*), void*, int)>

c0013cf2 <User::loadClockSettings(int)>:
c0013cf2:	53                   	push   ebx
c0013cf3:	83 ec 14             	sub    esp,0x14
c0013cf6:	68 14 01 00 00       	push   0x114
c0013cfb:	e8 40 bb ff ff       	call   c000f840 <malloc>
c0013d00:	83 c4 0c             	add    esp,0xc
c0013d03:	89 c3                	mov    ebx,eax
c0013d05:	ff 35 54 18 03 c0    	push   DWORD PTR ds:0xc0031854
c0013d0b:	68 80 aa 02 c0       	push   0xc002aa80
c0013d10:	50                   	push   eax
c0013d11:	e8 c8 f6 ff ff       	call   c00133de <File::File(char const*, Process*)>
c0013d16:	58                   	pop    eax
c0013d17:	5a                   	pop    edx
c0013d18:	6a 01                	push   0x1
c0013d1a:	53                   	push   ebx
c0013d1b:	e8 22 f7 ff ff       	call   c0013442 <File::open(FileOpenMode)>
c0013d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d23:	e8 78 f7 ff ff       	call   c00134a0 <File::close()>
c0013d28:	83 c4 10             	add    esp,0x10
c0013d2b:	85 db                	test   ebx,ebx
c0013d2d:	74 0f                	je     c0013d3e <User::loadClockSettings(int)+0x4c>
c0013d2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d31:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d35:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d38:	83 c4 08             	add    esp,0x8
c0013d3b:	5b                   	pop    ebx
c0013d3c:	ff e0                	jmp    eax
c0013d3e:	83 c4 08             	add    esp,0x8
c0013d41:	5b                   	pop    ebx
c0013d42:	c3                   	ret    
c0013d43:	90                   	nop

c0013d44 <Clock::Clock(char const*)>:
c0013d44:	83 ec 0c             	sub    esp,0xc
c0013d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4b:	83 ec 08             	sub    esp,0x8
c0013d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d52:	50                   	push   eax
c0013d53:	e8 44 07 00 00       	call   c001449c <Device::Device(char const*)>
c0013d58:	83 c4 10             	add    esp,0x10
c0013d5b:	ba a8 aa 02 c0       	mov    edx,0xc002aaa8
c0013d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d64:	89 10                	mov    DWORD PTR [eax],edx
c0013d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d6a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d74:	90                   	nop
c0013d75:	83 c4 0c             	add    esp,0xc
c0013d78:	c3                   	ret    
c0013d79:	90                   	nop

c0013d7a <Clock::~Clock()>:
c0013d7a:	83 ec 0c             	sub    esp,0xc
c0013d7d:	ba a8 aa 02 c0       	mov    edx,0xc002aaa8
c0013d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d86:	89 10                	mov    DWORD PTR [eax],edx
c0013d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d8c:	83 ec 0c             	sub    esp,0xc
c0013d8f:	50                   	push   eax
c0013d90:	e8 e9 03 00 00       	call   c001417e <Device::~Device()>
c0013d95:	83 c4 10             	add    esp,0x10
c0013d98:	90                   	nop
c0013d99:	83 c4 0c             	add    esp,0xc
c0013d9c:	c3                   	ret    
c0013d9d:	90                   	nop

c0013d9e <Clock::~Clock()>:
c0013d9e:	83 ec 0c             	sub    esp,0xc
c0013da1:	83 ec 0c             	sub    esp,0xc
c0013da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013da8:	e8 cd ff ff ff       	call   c0013d7a <Clock::~Clock()>
c0013dad:	83 c4 10             	add    esp,0x10
c0013db0:	83 ec 08             	sub    esp,0x8
c0013db3:	68 58 01 00 00       	push   0x158
c0013db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dbc:	e8 e5 ef ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0013dc1:	83 c4 10             	add    esp,0x10
c0013dc4:	83 c4 0c             	add    esp,0xc
c0013dc7:	c3                   	ret    

c0013dc8 <Clock::timeInSecondsLocal()>:
c0013dc8:	53                   	push   ebx
c0013dc9:	83 ec 14             	sub    esp,0x14
c0013dcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dd0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dd2:	50                   	push   eax
c0013dd3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013dd6:	0f b6 0d 78 e4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e478
c0013ddd:	03 0d 7c e4 02 c0    	add    ecx,DWORD PTR ds:0xc002e47c
c0013de3:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013de9:	89 cb                	mov    ebx,ecx
c0013deb:	c1 fb 1f             	sar    ebx,0x1f
c0013dee:	01 c8                	add    eax,ecx
c0013df0:	11 da                	adc    edx,ebx
c0013df2:	83 c4 10             	add    esp,0x10
c0013df5:	31 c9                	xor    ecx,ecx
c0013df7:	80 3d 79 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e479,0x0
c0013dfe:	74 05                	je     c0013e05 <Clock::timeInSecondsLocal()+0x3d>
c0013e00:	b9 08 07 00 00       	mov    ecx,0x708
c0013e05:	31 db                	xor    ebx,ebx
c0013e07:	01 c8                	add    eax,ecx
c0013e09:	11 da                	adc    edx,ebx
c0013e0b:	83 c4 08             	add    esp,0x8
c0013e0e:	5b                   	pop    ebx
c0013e0f:	c3                   	ret    

c0013e10 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e10:	57                   	push   edi
c0013e11:	56                   	push   esi
c0013e12:	53                   	push   ebx
c0013e13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e1b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e1d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e21:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e24:	0f b6 05 78 e4 02 c0 	movzx  eax,BYTE PTR ds:0xc002e478
c0013e2b:	03 05 7c e4 02 c0    	add    eax,DWORD PTR ds:0xc002e47c
c0013e31:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e37:	99                   	cdq    
c0013e38:	29 c6                	sub    esi,eax
c0013e3a:	19 d7                	sbb    edi,edx
c0013e3c:	89 f0                	mov    eax,esi
c0013e3e:	89 fa                	mov    edx,edi
c0013e40:	31 f6                	xor    esi,esi
c0013e42:	80 3d 79 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e479,0x0
c0013e49:	74 05                	je     c0013e50 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e4b:	be 08 07 00 00       	mov    esi,0x708
c0013e50:	31 ff                	xor    edi,edi
c0013e52:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e56:	29 f0                	sub    eax,esi
c0013e58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e5c:	19 fa                	sbb    edx,edi
c0013e5e:	89 d8                	mov    eax,ebx
c0013e60:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e64:	5b                   	pop    ebx
c0013e65:	5e                   	pop    esi
c0013e66:	5f                   	pop    edi
c0013e67:	ff e0                	jmp    eax

c0013e69 <datetimeToSeconds(datetime_t)>:
c0013e69:	55                   	push   ebp
c0013e6a:	57                   	push   edi
c0013e6b:	56                   	push   esi
c0013e6c:	53                   	push   ebx
c0013e6d:	83 ec 14             	sub    esp,0x14
c0013e70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e74:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e78:	89 d3                	mov    ebx,edx
c0013e7a:	0f b6 c6             	movzx  eax,dh
c0013e7d:	c1 eb 10             	shr    ebx,0x10
c0013e80:	48                   	dec    eax
c0013e81:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e86:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e8a:	0f b6 f5             	movzx  esi,ch
c0013e8d:	89 cf                	mov    edi,ecx
c0013e8f:	6b f6 3c             	imul   esi,esi,0x3c
c0013e92:	c1 ef 10             	shr    edi,0x10
c0013e95:	0f b6 c9             	movzx  ecx,cl
c0013e98:	89 f8                	mov    eax,edi
c0013e9a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ea0:	0f b6 f8             	movzx  edi,al
c0013ea3:	0f b6 d2             	movzx  edx,dl
c0013ea6:	01 fe                	add    esi,edi
c0013ea8:	01 f1                	add    ecx,esi
c0013eaa:	0f b7 f3             	movzx  esi,bx
c0013ead:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013eb1:	c1 f9 1f             	sar    ecx,0x1f
c0013eb4:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013eb9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ebd:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013ec2:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0013ec9:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013ecd:	76 29                	jbe    c0013ef8 <datetimeToSeconds(datetime_t)+0x8f>
c0013ecf:	f6 c3 03             	test   bl,0x3
c0013ed2:	75 24                	jne    c0013ef8 <datetimeToSeconds(datetime_t)+0x8f>
c0013ed4:	31 d2                	xor    edx,edx
c0013ed6:	bf 64 00 00 00       	mov    edi,0x64
c0013edb:	89 d8                	mov    eax,ebx
c0013edd:	66 f7 f7             	div    di
c0013ee0:	66 85 d2             	test   dx,dx
c0013ee3:	75 12                	jne    c0013ef7 <datetimeToSeconds(datetime_t)+0x8e>
c0013ee5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013eeb:	bf 90 01 00 00       	mov    edi,0x190
c0013ef0:	99                   	cdq    
c0013ef1:	f7 ff                	idiv   edi
c0013ef3:	85 d2                	test   edx,edx
c0013ef5:	75 01                	jne    c0013ef8 <datetimeToSeconds(datetime_t)+0x8f>
c0013ef7:	41                   	inc    ecx
c0013ef8:	66 83 fb 46          	cmp    bx,0x46
c0013efc:	76 45                	jbe    c0013f43 <datetimeToSeconds(datetime_t)+0xda>
c0013efe:	bb 46 00 00 00       	mov    ebx,0x46
c0013f03:	bf 64 00 00 00       	mov    edi,0x64
c0013f08:	bd 90 01 00 00       	mov    ebp,0x190
c0013f0d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f12:	f6 c3 03             	test   bl,0x3
c0013f15:	75 23                	jne    c0013f3a <datetimeToSeconds(datetime_t)+0xd1>
c0013f17:	89 d8                	mov    eax,ebx
c0013f19:	99                   	cdq    
c0013f1a:	f7 ff                	idiv   edi
c0013f1c:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f21:	85 d2                	test   edx,edx
c0013f23:	75 15                	jne    c0013f3a <datetimeToSeconds(datetime_t)+0xd1>
c0013f25:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f2b:	99                   	cdq    
c0013f2c:	f7 fd                	idiv   ebp
c0013f2e:	83 fa 01             	cmp    edx,0x1
c0013f31:	19 c0                	sbb    eax,eax
c0013f33:	f7 d0                	not    eax
c0013f35:	05 6e 01 00 00       	add    eax,0x16e
c0013f3a:	01 c1                	add    ecx,eax
c0013f3c:	43                   	inc    ebx
c0013f3d:	39 f3                	cmp    ebx,esi
c0013f3f:	7c cc                	jl     c0013f0d <datetimeToSeconds(datetime_t)+0xa4>
c0013f41:	eb 35                	jmp    c0013f78 <datetimeToSeconds(datetime_t)+0x10f>
c0013f43:	74 33                	je     c0013f78 <datetimeToSeconds(datetime_t)+0x10f>
c0013f45:	b8 45 00 00 00       	mov    eax,0x45
c0013f4a:	89 c2                	mov    edx,eax
c0013f4c:	83 e2 03             	and    edx,0x3
c0013f4f:	39 f0                	cmp    eax,esi
c0013f51:	7e 0f                	jle    c0013f62 <datetimeToSeconds(datetime_t)+0xf9>
c0013f53:	83 fa 01             	cmp    edx,0x1
c0013f56:	19 d2                	sbb    edx,edx
c0013f58:	48                   	dec    eax
c0013f59:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f60:	eb e8                	jmp    c0013f4a <datetimeToSeconds(datetime_t)+0xe1>
c0013f62:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f67:	85 d2                	test   edx,edx
c0013f69:	75 0b                	jne    c0013f76 <datetimeToSeconds(datetime_t)+0x10d>
c0013f6b:	66 83 fb 01          	cmp    bx,0x1
c0013f6f:	19 c0                	sbb    eax,eax
c0013f71:	05 6e 01 00 00       	add    eax,0x16e
c0013f76:	29 c1                	sub    ecx,eax
c0013f78:	b8 80 51 01 00       	mov    eax,0x15180
c0013f7d:	f7 e9                	imul   ecx
c0013f7f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f83:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f87:	83 c4 14             	add    esp,0x14
c0013f8a:	5b                   	pop    ebx
c0013f8b:	5e                   	pop    esi
c0013f8c:	5f                   	pop    edi
c0013f8d:	5d                   	pop    ebp
c0013f8e:	c3                   	ret    
c0013f8f:	90                   	nop

c0013f90 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f90:	57                   	push   edi
c0013f91:	56                   	push   esi
c0013f92:	53                   	push   ebx
c0013f93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f97:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f99:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fa0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fa4:	e8 c0 fe ff ff       	call   c0013e69 <datetimeToSeconds(datetime_t)>
c0013fa9:	59                   	pop    ecx
c0013faa:	0f b6 0d 78 e4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e478
c0013fb1:	5b                   	pop    ebx
c0013fb2:	03 0d 7c e4 02 c0    	add    ecx,DWORD PTR ds:0xc002e47c
c0013fb8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fbe:	89 cb                	mov    ebx,ecx
c0013fc0:	c1 fb 1f             	sar    ebx,0x1f
c0013fc3:	29 c8                	sub    eax,ecx
c0013fc5:	19 da                	sbb    edx,ebx
c0013fc7:	31 c9                	xor    ecx,ecx
c0013fc9:	80 3d 79 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e479,0x0
c0013fd0:	74 05                	je     c0013fd7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013fd2:	b9 08 07 00 00       	mov    ecx,0x708
c0013fd7:	31 db                	xor    ebx,ebx
c0013fd9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013fdd:	29 c8                	sub    eax,ecx
c0013fdf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fe3:	19 da                	sbb    edx,ebx
c0013fe5:	89 f8                	mov    eax,edi
c0013fe7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013feb:	5b                   	pop    ebx
c0013fec:	5e                   	pop    esi
c0013fed:	5f                   	pop    edi
c0013fee:	ff e0                	jmp    eax

c0013ff0 <secondsToDatetime(unsigned long long)>:
c0013ff0:	55                   	push   ebp
c0013ff1:	57                   	push   edi
c0013ff2:	56                   	push   esi
c0013ff3:	53                   	push   ebx
c0013ff4:	83 ec 1c             	sub    esp,0x1c
c0013ff7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013ffb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013fff:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014003:	6a 00                	push   0x0
c0014005:	68 80 51 01 00       	push   0x15180
c001400a:	55                   	push   ebp
c001400b:	57                   	push   edi
c001400c:	e8 eb 28 01 00       	call   c00268fc <__udivdi3>
c0014011:	83 c4 10             	add    esp,0x10
c0014014:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001401a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001401e:	6a 00                	push   0x0
c0014020:	68 80 51 01 00       	push   0x15180
c0014025:	55                   	push   ebp
c0014026:	57                   	push   edi
c0014027:	bf 10 0e 00 00       	mov    edi,0xe10
c001402c:	e8 cb 29 01 00       	call   c00269fc <__umoddi3>
c0014031:	83 c4 10             	add    esp,0x10
c0014034:	99                   	cdq    
c0014035:	f7 ff                	idiv   edi
c0014037:	bf 3c 00 00 00       	mov    edi,0x3c
c001403c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001403f:	89 d0                	mov    eax,edx
c0014041:	99                   	cdq    
c0014042:	f7 ff                	idiv   edi
c0014044:	85 db                	test   ebx,ebx
c0014046:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014049:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001404c:	79 11                	jns    c001405f <secondsToDatetime(unsigned long long)+0x6f>
c001404e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014052:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014058:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001405d:	eb 07                	jmp    c0014066 <secondsToDatetime(unsigned long long)+0x76>
c001405f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014064:	89 d8                	mov    eax,ebx
c0014066:	bf b4 05 00 00       	mov    edi,0x5b4
c001406b:	99                   	cdq    
c001406c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014071:	f7 f9                	idiv   ecx
c0014073:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014078:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001407c:	31 d2                	xor    edx,edx
c001407e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014086:	01 c3                	add    ebx,eax
c0014088:	89 d8                	mov    eax,ebx
c001408a:	f7 f1                	div    ecx
c001408c:	31 d2                	xor    edx,edx
c001408e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014091:	89 d8                	mov    eax,ebx
c0014093:	f7 f7                	div    edi
c0014095:	31 d2                	xor    edx,edx
c0014097:	29 c1                	sub    ecx,eax
c0014099:	89 d8                	mov    eax,ebx
c001409b:	f7 f5                	div    ebp
c001409d:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140a2:	29 c1                	sub    ecx,eax
c00140a4:	31 d2                	xor    edx,edx
c00140a6:	89 c8                	mov    eax,ecx
c00140a8:	f7 f5                	div    ebp
c00140aa:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00140af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140b3:	31 d2                	xor    edx,edx
c00140b5:	89 c8                	mov    eax,ecx
c00140b7:	f7 f5                	div    ebp
c00140b9:	31 d2                	xor    edx,edx
c00140bb:	01 c3                	add    ebx,eax
c00140bd:	89 c8                	mov    eax,ecx
c00140bf:	f7 f7                	div    edi
c00140c1:	bf 99 00 00 00       	mov    edi,0x99
c00140c6:	29 c3                	sub    ebx,eax
c00140c8:	31 d2                	xor    edx,edx
c00140ca:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140d2:	29 c3                	sub    ebx,eax
c00140d4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140d7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140da:	bb 05 00 00 00       	mov    ebx,0x5
c00140df:	83 c1 02             	add    ecx,0x2
c00140e2:	89 c8                	mov    eax,ecx
c00140e4:	f7 f7                	div    edi
c00140e6:	31 d2                	xor    edx,edx
c00140e8:	89 c7                	mov    edi,eax
c00140ea:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140f0:	83 c0 02             	add    eax,0x2
c00140f3:	f7 f3                	div    ebx
c00140f5:	89 eb                	mov    ebx,ebp
c00140f7:	29 c3                	sub    ebx,eax
c00140f9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00140ff:	88 1e                	mov    BYTE PTR [esi],bl
c0014101:	19 c0                	sbb    eax,eax
c0014103:	31 d2                	xor    edx,edx
c0014105:	83 e0 0c             	and    eax,0xc
c0014108:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001410c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014114:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014118:	83 f9 01             	cmp    ecx,0x1
c001411b:	0f 96 c2             	setbe  dl
c001411e:	41                   	inc    ecx
c001411f:	01 d0                	add    eax,edx
c0014121:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014124:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014128:	83 c4 1c             	add    esp,0x1c
c001412b:	89 f0                	mov    eax,esi
c001412d:	5b                   	pop    ebx
c001412e:	5e                   	pop    esi
c001412f:	5f                   	pop    edi
c0014130:	5d                   	pop    ebp
c0014131:	c2 04 00             	ret    0x4

c0014134 <Clock::timeInDatetimeLocal()>:
c0014134:	53                   	push   ebx
c0014135:	83 ec 14             	sub    esp,0x14
c0014138:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001413c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014140:	e8 83 fc ff ff       	call   c0013dc8 <Clock::timeInSecondsLocal()>
c0014145:	83 c4 0c             	add    esp,0xc
c0014148:	52                   	push   edx
c0014149:	50                   	push   eax
c001414a:	53                   	push   ebx
c001414b:	e8 a0 fe ff ff       	call   c0013ff0 <secondsToDatetime(unsigned long long)>
c0014150:	89 d8                	mov    eax,ebx
c0014152:	83 c4 14             	add    esp,0x14
c0014155:	5b                   	pop    ebx
c0014156:	c2 04 00             	ret    0x4
c0014159:	90                   	nop

c001415a <Device::hibernate()>:
c001415a:	c3                   	ret    
c001415b:	90                   	nop

c001415c <Device::wake()>:
c001415c:	c3                   	ret    
c001415d:	90                   	nop

c001415e <Device::detect()>:
c001415e:	c3                   	ret    
c001415f:	90                   	nop

c0014160 <Device::disableLegacy()>:
c0014160:	c3                   	ret    
c0014161:	90                   	nop

c0014162 <Device::powerSaving(PowerSavingLevel)>:
c0014162:	c3                   	ret    
c0014163:	90                   	nop

c0014164 <DriverlessDevice::close(int, int, void*)>:
c0014164:	31 c0                	xor    eax,eax
c0014166:	c3                   	ret    
c0014167:	90                   	nop

c0014168 <DriverlessDevice::detect()>:
c0014168:	c3                   	ret    
c0014169:	90                   	nop

c001416a <DriverlessDevice::open(int, int, void*)>:
c001416a:	83 ec 18             	sub    esp,0x18
c001416d:	68 10 ab 02 c0       	push   0xc002ab10
c0014172:	e8 b4 63 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0014177:	83 c8 ff             	or     eax,0xffffffff
c001417a:	83 c4 1c             	add    esp,0x1c
c001417d:	c3                   	ret    

c001417e <Device::~Device()>:
c001417e:	ba 38 ab 02 c0       	mov    edx,0xc002ab38
c0014183:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014187:	89 10                	mov    DWORD PTR [eax],edx
c0014189:	90                   	nop
c001418a:	c3                   	ret    
c001418b:	90                   	nop

c001418c <Device::~Device()>:
c001418c:	83 ec 0c             	sub    esp,0xc
c001418f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014193:	e8 e6 ff ff ff       	call   c001417e <Device::~Device()>
c0014198:	83 c4 04             	add    esp,0x4
c001419b:	83 ec 08             	sub    esp,0x8
c001419e:	68 58 01 00 00       	push   0x158
c00141a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141a7:	e8 fa eb ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c00141ac:	83 c4 10             	add    esp,0x10
c00141af:	83 c4 0c             	add    esp,0xc
c00141b2:	c3                   	ret    
c00141b3:	90                   	nop

c00141b4 <Device::findAndLoadDriver()>:
c00141b4:	c3                   	ret    
c00141b5:	90                   	nop

c00141b6 <Device::preOpenPCI(PCIDeviceInfo)>:
c00141b6:	57                   	push   edi
c00141b7:	b9 09 00 00 00       	mov    ecx,0x9
c00141bc:	56                   	push   esi
c00141bd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141c1:	8d 74 24 10          	lea    esi,[esp+0x10]
c00141c5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00141cf:	81 c7 18 01 00 00    	add    edi,0x118
c00141d5:	fc                   	cld    
c00141d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141d8:	5e                   	pop    esi
c00141d9:	5f                   	pop    edi
c00141da:	c3                   	ret    
c00141db:	90                   	nop

c00141dc <Device::preOpenACPI(void*, char*, char*)>:
c00141dc:	56                   	push   esi
c00141dd:	53                   	push   ebx
c00141de:	83 ec 08             	sub    esp,0x8
c00141e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141e5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00141e9:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00141f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141f7:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00141fd:	6a 1e                	push   0x1e
c00141ff:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014205:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014209:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001420f:	50                   	push   eax
c0014210:	e8 2f c5 fe ff       	call   c0000744 <memcpy>
c0014215:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014219:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001421d:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014225:	83 c4 14             	add    esp,0x14
c0014228:	5b                   	pop    ebx
c0014229:	5e                   	pop    esi
c001422a:	e9 15 c5 fe ff       	jmp    c0000744 <memcpy>
c001422f:	90                   	nop

c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014234:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014239:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014240:	75 0b                	jne    c001424d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014242:	8b 00                	mov    eax,DWORD PTR [eax]
c0014244:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014248:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001424b:	eb 1e                	jmp    c001426b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001424d:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0014252:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014258:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001425e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014260:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014264:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014268:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001426b:	ff e0                	jmp    eax
c001426d:	90                   	nop

c001426e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001426e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014272:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014277:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001427e:	75 0b                	jne    c001428b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014280:	8b 00                	mov    eax,DWORD PTR [eax]
c0014282:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014286:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014289:	eb 1e                	jmp    c00142a9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001428b:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0014290:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014296:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001429c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001429e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142a6:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142a9:	ff e0                	jmp    eax
c00142ab:	90                   	nop

c00142ac <Device::addChild(Device*)>:
c00142ac:	53                   	push   ebx
c00142ad:	83 ec 08             	sub    esp,0x8
c00142b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142b8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00142be:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00142c4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00142c6:	85 d2                	test   edx,edx
c00142c8:	74 04                	je     c00142ce <Device::addChild(Device*)+0x22>
c00142ca:	89 d3                	mov    ebx,edx
c00142cc:	eb f6                	jmp    c00142c4 <Device::addChild(Device*)+0x18>
c00142ce:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00142d1:	83 ec 0c             	sub    esp,0xc
c00142d4:	6a 08                	push   0x8
c00142d6:	e8 65 b5 ff ff       	call   c000f840 <malloc>
c00142db:	89 03                	mov    DWORD PTR [ebx],eax
c00142dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142ea:	83 c4 18             	add    esp,0x18
c00142ed:	5b                   	pop    ebx
c00142ee:	c3                   	ret    
c00142ef:	90                   	nop

c00142f0 <Device::removeAllChildren()>:
c00142f0:	56                   	push   esi
c00142f1:	53                   	push   ebx
c00142f2:	52                   	push   edx
c00142f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142f7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00142fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014300:	74 17                	je     c0014319 <Device::removeAllChildren()+0x29>
c0014302:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014305:	85 c0                	test   eax,eax
c0014307:	74 0c                	je     c0014315 <Device::removeAllChildren()+0x25>
c0014309:	83 ec 0c             	sub    esp,0xc
c001430c:	8b 10                	mov    edx,DWORD PTR [eax]
c001430e:	50                   	push   eax
c001430f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014312:	83 c4 10             	add    esp,0x10
c0014315:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014317:	eb e4                	jmp    c00142fd <Device::removeAllChildren()+0xd>
c0014319:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001431f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014325:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001432b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014332:	58                   	pop    eax
c0014333:	5b                   	pop    ebx
c0014334:	5e                   	pop    esi
c0014335:	c3                   	ret    

c0014336 <Device::hibernateAll()>:
c0014336:	53                   	push   ebx
c0014337:	83 ec 14             	sub    esp,0x14
c001433a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001433e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014340:	53                   	push   ebx
c0014341:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014344:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001434a:	83 c4 10             	add    esp,0x10
c001434d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014350:	74 0f                	je     c0014361 <Device::hibernateAll()+0x2b>
c0014352:	83 ec 0c             	sub    esp,0xc
c0014355:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014358:	e8 d9 ff ff ff       	call   c0014336 <Device::hibernateAll()>
c001435d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001435f:	eb e9                	jmp    c001434a <Device::hibernateAll()+0x14>
c0014361:	83 c4 08             	add    esp,0x8
c0014364:	5b                   	pop    ebx
c0014365:	c3                   	ret    

c0014366 <Device::wakeAll()>:
c0014366:	53                   	push   ebx
c0014367:	83 ec 14             	sub    esp,0x14
c001436a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001436e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014370:	53                   	push   ebx
c0014371:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014374:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001437a:	83 c4 10             	add    esp,0x10
c001437d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014380:	74 0f                	je     c0014391 <Device::wakeAll()+0x2b>
c0014382:	83 ec 0c             	sub    esp,0xc
c0014385:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014388:	e8 d9 ff ff ff       	call   c0014366 <Device::wakeAll()>
c001438d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001438f:	eb e9                	jmp    c001437a <Device::wakeAll()+0x14>
c0014391:	83 c4 08             	add    esp,0x8
c0014394:	5b                   	pop    ebx
c0014395:	c3                   	ret    

c0014396 <Device::detectAll()>:
c0014396:	53                   	push   ebx
c0014397:	83 ec 14             	sub    esp,0x14
c001439a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001439e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143a0:	53                   	push   ebx
c00143a1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143a4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143aa:	83 c4 10             	add    esp,0x10
c00143ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143b0:	74 0f                	je     c00143c1 <Device::detectAll()+0x2b>
c00143b2:	83 ec 0c             	sub    esp,0xc
c00143b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143b8:	e8 d9 ff ff ff       	call   c0014396 <Device::detectAll()>
c00143bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143bf:	eb e9                	jmp    c00143aa <Device::detectAll()+0x14>
c00143c1:	83 c4 08             	add    esp,0x8
c00143c4:	5b                   	pop    ebx
c00143c5:	c3                   	ret    

c00143c6 <Device::disableLegacyAll()>:
c00143c6:	53                   	push   ebx
c00143c7:	83 ec 14             	sub    esp,0x14
c00143ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143d0:	53                   	push   ebx
c00143d1:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00143d4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143da:	83 c4 10             	add    esp,0x10
c00143dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143e0:	74 0f                	je     c00143f1 <Device::disableLegacyAll()+0x2b>
c00143e2:	83 ec 0c             	sub    esp,0xc
c00143e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143e8:	e8 d9 ff ff ff       	call   c00143c6 <Device::disableLegacyAll()>
c00143ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143ef:	eb e9                	jmp    c00143da <Device::disableLegacyAll()+0x14>
c00143f1:	83 c4 08             	add    esp,0x8
c00143f4:	5b                   	pop    ebx
c00143f5:	c3                   	ret    

c00143f6 <Device::loadDriversForAll()>:
c00143f6:	53                   	push   ebx
c00143f7:	83 ec 08             	sub    esp,0x8
c00143fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143fe:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014404:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014406:	85 db                	test   ebx,ebx
c0014408:	74 12                	je     c001441c <Device::loadDriversForAll()+0x26>
c001440a:	83 ec 0c             	sub    esp,0xc
c001440d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014410:	e8 e1 ff ff ff       	call   c00143f6 <Device::loadDriversForAll()>
c0014415:	83 c4 10             	add    esp,0x10
c0014418:	89 d8                	mov    eax,ebx
c001441a:	eb e8                	jmp    c0014404 <Device::loadDriversForAll()+0xe>
c001441c:	83 c4 08             	add    esp,0x8
c001441f:	5b                   	pop    ebx
c0014420:	c3                   	ret    
c0014421:	90                   	nop

c0014422 <Device::closeAll()>:
c0014422:	53                   	push   ebx
c0014423:	83 ec 08             	sub    esp,0x8
c0014426:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001442a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001442c:	6a 00                	push   0x0
c001442e:	6a 00                	push   0x0
c0014430:	6a 00                	push   0x0
c0014432:	53                   	push   ebx
c0014433:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014436:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001443c:	83 c4 10             	add    esp,0x10
c001443f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014442:	74 0f                	je     c0014453 <Device::closeAll()+0x31>
c0014444:	83 ec 0c             	sub    esp,0xc
c0014447:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001444a:	e8 d3 ff ff ff       	call   c0014422 <Device::closeAll()>
c001444f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014451:	eb e9                	jmp    c001443c <Device::closeAll()+0x1a>
c0014453:	83 c4 08             	add    esp,0x8
c0014456:	5b                   	pop    ebx
c0014457:	c3                   	ret    

c0014458 <Device::powerSavingAll(PowerSavingLevel)>:
c0014458:	56                   	push   esi
c0014459:	53                   	push   ebx
c001445a:	83 ec 0c             	sub    esp,0xc
c001445d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014461:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014465:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014467:	56                   	push   esi
c0014468:	53                   	push   ebx
c0014469:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001446c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014472:	83 c4 10             	add    esp,0x10
c0014475:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014478:	74 0f                	je     c0014489 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001447a:	52                   	push   edx
c001447b:	52                   	push   edx
c001447c:	56                   	push   esi
c001447d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014480:	e8 d3 ff ff ff       	call   c0014458 <Device::powerSavingAll(PowerSavingLevel)>
c0014485:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014487:	eb e9                	jmp    c0014472 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014489:	58                   	pop    eax
c001448a:	5b                   	pop    ebx
c001448b:	5e                   	pop    esi
c001448c:	c3                   	ret    
c001448d:	90                   	nop

c001448e <Device::setName(char const*)>:
c001448e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014496:	e9 99 c3 fe ff       	jmp    c0000834 <strcpy>
c001449b:	90                   	nop

c001449c <Device::Device(char const*)>:
c001449c:	83 ec 1c             	sub    esp,0x1c
c001449f:	ba 38 ab 02 c0       	mov    edx,0xc002ab38
c00144a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a8:	89 10                	mov    DWORD PTR [eax],edx
c00144aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ae:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00144b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144bc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ca:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144e2:	83 ec 08             	sub    esp,0x8
c00144e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144ed:	e8 9c ff ff ff       	call   c001448e <Device::setName(char const*)>
c00144f2:	83 c4 10             	add    esp,0x10
c00144f5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00144fd:	83 ec 0c             	sub    esp,0xc
c0014500:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014504:	e8 37 b3 ff ff       	call   c000f840 <malloc>
c0014509:	83 c4 10             	add    esp,0x10
c001450c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014512:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014519:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001451d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014527:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001452d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014537:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001453d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014548:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001454f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014553:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001455a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014588:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014592:	90                   	nop
c0014593:	83 c4 1c             	add    esp,0x1c
c0014596:	c3                   	ret    
c0014597:	90                   	nop

c0014598 <Device::getName()>:
c0014598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001459c:	05 d0 00 00 00       	add    eax,0xd0
c00145a1:	c3                   	ret    

c00145a2 <DriverlessDevice::DriverlessDevice(char const*)>:
c00145a2:	83 ec 0c             	sub    esp,0xc
c00145a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a9:	83 ec 08             	sub    esp,0x8
c00145ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145b0:	50                   	push   eax
c00145b1:	e8 e6 fe ff ff       	call   c001449c <Device::Device(char const*)>
c00145b6:	83 c4 10             	add    esp,0x10
c00145b9:	ba 64 ab 02 c0       	mov    edx,0xc002ab64
c00145be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145c2:	89 10                	mov    DWORD PTR [eax],edx
c00145c4:	90                   	nop
c00145c5:	83 c4 0c             	add    esp,0xc
c00145c8:	c3                   	ret    
c00145c9:	90                   	nop

c00145ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145ca:	57                   	push   edi
c00145cb:	56                   	push   esi
c00145cc:	53                   	push   ebx
c00145cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145d9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145df:	75 0c                	jne    c00145ed <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145e1:	52                   	push   edx
c00145e2:	52                   	push   edx
c00145e3:	53                   	push   ebx
c00145e4:	56                   	push   esi
c00145e5:	e8 50 42 01 00       	call   c002883a <LinkedList<Device>::addElement(Device*)>
c00145ea:	83 c4 10             	add    esp,0x10
c00145ed:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145f6:	74 12                	je     c001460a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00145f8:	50                   	push   eax
c00145f9:	57                   	push   edi
c00145fa:	56                   	push   esi
c00145fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145fe:	e8 c7 ff ff ff       	call   c00145ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014603:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014605:	83 c4 10             	add    esp,0x10
c0014608:	eb e9                	jmp    c00145f3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001460a:	5b                   	pop    ebx
c001460b:	5e                   	pop    esi
c001460c:	5f                   	pop    edi
c001460d:	c3                   	ret    

c001460e <getDevicesOfType(DeviceType)>:
c001460e:	53                   	push   ebx
c001460f:	83 ec 14             	sub    esp,0x14
c0014612:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014616:	53                   	push   ebx
c0014617:	e8 fa 42 01 00       	call   c0028916 <LinkedList<Device>::LinkedList()>
c001461c:	83 c4 0c             	add    esp,0xc
c001461f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014623:	53                   	push   ebx
c0014624:	ff 35 e8 e2 02 c0    	push   DWORD PTR ds:0xc002e2e8
c001462a:	e8 9b ff ff ff       	call   c00145ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001462f:	89 d8                	mov    eax,ebx
c0014631:	83 c4 18             	add    esp,0x18
c0014634:	5b                   	pop    ebx
c0014635:	c2 04 00             	ret    0x4

c0014638 <HardDiskController::HardDiskController(char const*)>:
c0014638:	83 ec 0c             	sub    esp,0xc
c001463b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463f:	83 ec 08             	sub    esp,0x8
c0014642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014646:	50                   	push   eax
c0014647:	e8 50 fe ff ff       	call   c001449c <Device::Device(char const*)>
c001464c:	83 c4 10             	add    esp,0x10
c001464f:	ba 90 ab 02 c0       	mov    edx,0xc002ab90
c0014654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014658:	89 10                	mov    DWORD PTR [eax],edx
c001465a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014668:	90                   	nop
c0014669:	83 c4 0c             	add    esp,0xc
c001466c:	c3                   	ret    
c001466d:	90                   	nop

c001466e <HardDiskController::~HardDiskController()>:
c001466e:	83 ec 0c             	sub    esp,0xc
c0014671:	ba 90 ab 02 c0       	mov    edx,0xc002ab90
c0014676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467a:	89 10                	mov    DWORD PTR [eax],edx
c001467c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014680:	83 ec 0c             	sub    esp,0xc
c0014683:	50                   	push   eax
c0014684:	e8 f5 fa ff ff       	call   c001417e <Device::~Device()>
c0014689:	83 c4 10             	add    esp,0x10
c001468c:	90                   	nop
c001468d:	83 c4 0c             	add    esp,0xc
c0014690:	c3                   	ret    
c0014691:	90                   	nop

c0014692 <HardDiskController::~HardDiskController()>:
c0014692:	83 ec 0c             	sub    esp,0xc
c0014695:	83 ec 0c             	sub    esp,0xc
c0014698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001469c:	e8 cd ff ff ff       	call   c001466e <HardDiskController::~HardDiskController()>
c00146a1:	83 c4 10             	add    esp,0x10
c00146a4:	83 ec 08             	sub    esp,0x8
c00146a7:	68 58 01 00 00       	push   0x158
c00146ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b0:	e8 f1 e6 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c00146b5:	83 c4 10             	add    esp,0x10
c00146b8:	83 c4 0c             	add    esp,0xc
c00146bb:	c3                   	ret    

c00146bc <PhysicalDisk::eject()>:
c00146bc:	83 ec 18             	sub    esp,0x18
c00146bf:	68 b4 ab 02 c0       	push   0xc002abb4
c00146c4:	e8 bd e7 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00146c9:	83 c8 ff             	or     eax,0xffffffff
c00146cc:	83 c4 1c             	add    esp,0x1c
c00146cf:	c3                   	ret    

c00146d0 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146d0:	83 ec 0c             	sub    esp,0xc
c00146d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d7:	83 ec 08             	sub    esp,0x8
c00146da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146de:	50                   	push   eax
c00146df:	e8 b8 fd ff ff       	call   c001449c <Device::Device(char const*)>
c00146e4:	83 c4 10             	add    esp,0x10
c00146e7:	ba e4 ab 02 c0       	mov    edx,0xc002abe4
c00146ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f0:	89 10                	mov    DWORD PTR [eax],edx
c00146f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00146fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014701:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001471a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001471e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014728:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014732:	90                   	nop
c0014733:	83 c4 0c             	add    esp,0xc
c0014736:	c3                   	ret    
c0014737:	90                   	nop

c0014738 <PhysicalDisk::startCache()>:
c0014738:	56                   	push   esi
c0014739:	53                   	push   ebx
c001473a:	83 ec 10             	sub    esp,0x10
c001473d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014741:	6a 44                	push   0x44
c0014743:	e8 f8 b0 ff ff       	call   c000f840 <malloc>
c0014748:	89 c6                	mov    esi,eax
c001474a:	58                   	pop    eax
c001474b:	5a                   	pop    edx
c001474c:	53                   	push   ebx
c001474d:	56                   	push   esi
c001474e:	e8 29 27 00 00       	call   c0016e7c <VCache::VCache(PhysicalDisk*)>
c0014753:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014759:	83 c4 14             	add    esp,0x14
c001475c:	5b                   	pop    ebx
c001475d:	5e                   	pop    esi
c001475e:	c3                   	ret    
c001475f:	90                   	nop

c0014760 <PhysicalDisk::~PhysicalDisk()>:
c0014760:	83 ec 0c             	sub    esp,0xc
c0014763:	ba e4 ab 02 c0       	mov    edx,0xc002abe4
c0014768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476c:	89 10                	mov    DWORD PTR [eax],edx
c001476e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014772:	83 ec 0c             	sub    esp,0xc
c0014775:	50                   	push   eax
c0014776:	e8 03 fa ff ff       	call   c001417e <Device::~Device()>
c001477b:	83 c4 10             	add    esp,0x10
c001477e:	90                   	nop
c001477f:	83 c4 0c             	add    esp,0xc
c0014782:	c3                   	ret    
c0014783:	90                   	nop

c0014784 <PhysicalDisk::~PhysicalDisk()>:
c0014784:	83 ec 0c             	sub    esp,0xc
c0014787:	83 ec 0c             	sub    esp,0xc
c001478a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001478e:	e8 cd ff ff ff       	call   c0014760 <PhysicalDisk::~PhysicalDisk()>
c0014793:	83 c4 10             	add    esp,0x10
c0014796:	83 ec 08             	sub    esp,0x8
c0014799:	68 6c 01 00 00       	push   0x16c
c001479e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147a2:	e8 ff e5 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c00147a7:	83 c4 10             	add    esp,0x10
c00147aa:	83 c4 0c             	add    esp,0xc
c00147ad:	c3                   	ret    

c00147ae <FPU::FPU(char const*)>:
c00147ae:	83 ec 0c             	sub    esp,0xc
c00147b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b5:	83 ec 08             	sub    esp,0x8
c00147b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147bc:	50                   	push   eax
c00147bd:	e8 da fc ff ff       	call   c001449c <Device::Device(char const*)>
c00147c2:	83 c4 10             	add    esp,0x10
c00147c5:	ba 28 ac 02 c0       	mov    edx,0xc002ac28
c00147ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ce:	89 10                	mov    DWORD PTR [eax],edx
c00147d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d4:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147de:	90                   	nop
c00147df:	83 c4 0c             	add    esp,0xc
c00147e2:	c3                   	ret    
c00147e3:	90                   	nop

c00147e4 <FPU::~FPU()>:
c00147e4:	83 ec 0c             	sub    esp,0xc
c00147e7:	ba 28 ac 02 c0       	mov    edx,0xc002ac28
c00147ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f0:	89 10                	mov    DWORD PTR [eax],edx
c00147f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f6:	83 ec 0c             	sub    esp,0xc
c00147f9:	50                   	push   eax
c00147fa:	e8 7f f9 ff ff       	call   c001417e <Device::~Device()>
c00147ff:	83 c4 10             	add    esp,0x10
c0014802:	90                   	nop
c0014803:	83 c4 0c             	add    esp,0xc
c0014806:	c3                   	ret    
c0014807:	90                   	nop

c0014808 <FPU::~FPU()>:
c0014808:	83 ec 0c             	sub    esp,0xc
c001480b:	83 ec 0c             	sub    esp,0xc
c001480e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014812:	e8 cd ff ff ff       	call   c00147e4 <FPU::~FPU()>
c0014817:	83 c4 10             	add    esp,0x10
c001481a:	83 ec 08             	sub    esp,0x8
c001481d:	68 58 01 00 00       	push   0x158
c0014822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014826:	e8 7b e5 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c001482b:	83 c4 10             	add    esp,0x10
c001482e:	83 c4 0c             	add    esp,0xc
c0014831:	c3                   	ret    

c0014832 <setupFPU()>:
c0014832:	53                   	push   ebx
c0014833:	83 ec 08             	sub    esp,0x8
c0014836:	8b 15 e8 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e8
c001483c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014843:	74 19                	je     c001485e <setupFPU()+0x2c>
c0014845:	83 ec 0c             	sub    esp,0xc
c0014848:	68 58 01 00 00       	push   0x158
c001484d:	e8 ee af ff ff       	call   c000f840 <malloc>
c0014852:	89 c3                	mov    ebx,eax
c0014854:	89 04 24             	mov    DWORD PTR [esp],eax
c0014857:	e8 2a 0c 01 00       	call   c0025486 <AVX::AVX()>
c001485c:	eb 5b                	jmp    c00148b9 <setupFPU()+0x87>
c001485e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014864:	84 c0                	test   al,al
c0014866:	79 19                	jns    c0014881 <setupFPU()+0x4f>
c0014868:	83 ec 0c             	sub    esp,0xc
c001486b:	68 58 01 00 00       	push   0x158
c0014870:	e8 cb af ff ff       	call   c000f840 <malloc>
c0014875:	89 c3                	mov    ebx,eax
c0014877:	89 04 24             	mov    DWORD PTR [esp],eax
c001487a:	e8 2d 0d 01 00       	call   c00255ac <SSE::SSE()>
c001487f:	eb 38                	jmp    c00148b9 <setupFPU()+0x87>
c0014881:	a8 20                	test   al,0x20
c0014883:	74 19                	je     c001489e <setupFPU()+0x6c>
c0014885:	83 ec 0c             	sub    esp,0xc
c0014888:	68 58 01 00 00       	push   0x158
c001488d:	e8 ae af ff ff       	call   c000f840 <malloc>
c0014892:	89 c3                	mov    ebx,eax
c0014894:	89 04 24             	mov    DWORD PTR [esp],eax
c0014897:	e8 7a 0c 01 00       	call   c0025516 <MMX::MMX()>
c001489c:	eb 1b                	jmp    c00148b9 <setupFPU()+0x87>
c001489e:	a8 10                	test   al,0x10
c00148a0:	74 1c                	je     c00148be <setupFPU()+0x8c>
c00148a2:	83 ec 0c             	sub    esp,0xc
c00148a5:	68 58 01 00 00       	push   0x158
c00148aa:	e8 91 af ff ff       	call   c000f840 <malloc>
c00148af:	89 c3                	mov    ebx,eax
c00148b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00148b4:	e8 81 0d 01 00       	call   c002563a <x87::x87()>
c00148b9:	83 c4 10             	add    esp,0x10
c00148bc:	eb 24                	jmp    c00148e2 <setupFPU()+0xb0>
c00148be:	83 e0 ef             	and    eax,0xffffffef
c00148c1:	83 ec 0c             	sub    esp,0xc
c00148c4:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148ca:	68 14 ac 02 c0       	push   0xc002ac14
c00148cf:	e8 b2 e5 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00148d4:	0f 20 c0             	mov    eax,cr0
c00148d7:	83 c8 04             	or     eax,0x4
c00148da:	0f 22 c0             	mov    cr0,eax
c00148dd:	31 db                	xor    ebx,ebx
c00148df:	83 c4 10             	add    esp,0x10
c00148e2:	89 d8                	mov    eax,ebx
c00148e4:	83 c4 08             	add    esp,0x8
c00148e7:	5b                   	pop    ebx
c00148e8:	c3                   	ret    
c00148e9:	90                   	nop

c00148ea <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148f2:	c1 e0 04             	shl    eax,0x4
c00148f5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00148f9:	8d 50 10             	lea    edx,[eax+0x10]
c00148fc:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014902:	74 08                	je     c001490c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014904:	83 c0 04             	add    eax,0x4
c0014907:	39 d0                	cmp    eax,edx
c0014909:	75 f1                	jne    c00148fc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001490b:	c3                   	ret    
c001490c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014916:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014920:	eb e2                	jmp    c0014904 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014922 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014922:	57                   	push   edi
c0014923:	31 c0                	xor    eax,eax
c0014925:	56                   	push   esi
c0014926:	53                   	push   ebx
c0014927:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001492b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001492f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014933:	89 da                	mov    edx,ebx
c0014935:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014939:	c1 e2 04             	shl    edx,0x4
c001493c:	01 ca                	add    edx,ecx
c001493e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014946:	74 16                	je     c001495e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014948:	40                   	inc    eax
c0014949:	83 f8 04             	cmp    eax,0x4
c001494c:	75 f0                	jne    c001493e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001494e:	c7 44 24 10 58 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac58
c0014956:	5b                   	pop    ebx
c0014957:	5e                   	pop    esi
c0014958:	5f                   	pop    edi
c0014959:	e9 cd 5b 00 00       	jmp    c001a52b <Krnl::panic(char const*)>
c001495e:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014961:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014964:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001496a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014970:	5b                   	pop    ebx
c0014971:	5e                   	pop    esi
c0014972:	5f                   	pop    edi
c0014973:	c3                   	ret    

c0014974 <doubleFault(regs*, void*)>:
c0014974:	55                   	push   ebp
c0014975:	89 e5                	mov    ebp,esp
c0014977:	83 ec 08             	sub    esp,0x8
c001497a:	83 ec 0c             	sub    esp,0xc
c001497d:	68 93 ac 02 c0       	push   0xc002ac93
c0014982:	e8 a4 5b 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0014987:	83 c4 10             	add    esp,0x10
c001498a:	90                   	nop
c001498b:	c9                   	leave  
c001498c:	c3                   	ret    
c001498d:	90                   	nop

c001498e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001498e:	56                   	push   esi
c001498f:	53                   	push   ebx
c0014990:	50                   	push   eax
c0014991:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014995:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014999:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001499e:	75 35                	jne    c00149d5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149a0:	8d 43 20             	lea    eax,[ebx+0x20]
c00149a3:	31 d2                	xor    edx,edx
c00149a5:	89 c1                	mov    ecx,eax
c00149a7:	c1 e1 04             	shl    ecx,0x4
c00149aa:	01 f1                	add    ecx,esi
c00149ac:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00149b4:	74 3e                	je     c00149f4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00149b6:	42                   	inc    edx
c00149b7:	83 fa 04             	cmp    edx,0x4
c00149ba:	75 f0                	jne    c00149ac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00149bc:	83 ec 0c             	sub    esp,0xc
c00149bf:	68 d8 ac 02 c0       	push   0xc002acd8
c00149c4:	e8 62 5b 00 00       	call   c001a52b <Krnl::panic(char const*)>
c00149c9:	83 c4 10             	add    esp,0x10
c00149cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149d1:	5a                   	pop    edx
c00149d2:	5b                   	pop    ebx
c00149d3:	5e                   	pop    esi
c00149d4:	c3                   	ret    
c00149d5:	83 ec 0c             	sub    esp,0xc
c00149d8:	56                   	push   esi
c00149d9:	e8 ba fb ff ff       	call   c0014598 <Device::getName()>
c00149de:	83 c4 10             	add    esp,0x10
c00149e1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149e4:	75 ba                	jne    c00149a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149e6:	83 fb 0f             	cmp    ebx,0xf
c00149e9:	7f 29                	jg     c0014a14 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149eb:	0f b6 9b 40 d5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2ac0]
c00149f2:	eb ac                	jmp    c00149a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149f4:	8d 04 82             	lea    eax,[edx+eax*4]
c00149f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00149fb:	8d 04 86             	lea    eax,[esi+eax*4]
c00149fe:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a08:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a0e:	89 d8                	mov    eax,ebx
c0014a10:	5a                   	pop    edx
c0014a11:	5b                   	pop    ebx
c0014a12:	5e                   	pop    esi
c0014a13:	c3                   	ret    
c0014a14:	83 ec 0c             	sub    esp,0xc
c0014a17:	68 a0 ac 02 c0       	push   0xc002aca0
c0014a1c:	e8 0a 5b 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0014a21:	83 c4 10             	add    esp,0x10
c0014a24:	e9 77 ff ff ff       	jmp    c00149a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a29:	90                   	nop

c0014a2a <InterruptController::clearAllHandlers(int, bool)>:
c0014a2a:	56                   	push   esi
c0014a2b:	53                   	push   ebx
c0014a2c:	52                   	push   edx
c0014a2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a31:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a35:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a3a:	75 61                	jne    c0014a9d <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a3c:	8d 46 20             	lea    eax,[esi+0x20]
c0014a3f:	c1 e6 04             	shl    esi,0x4
c0014a42:	c1 e0 04             	shl    eax,0x4
c0014a45:	01 de                	add    esi,ebx
c0014a47:	01 d8                	add    eax,ebx
c0014a49:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a53:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a5d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a67:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a71:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a7b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a85:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a8f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014a99:	58                   	pop    eax
c0014a9a:	5b                   	pop    ebx
c0014a9b:	5e                   	pop    esi
c0014a9c:	c3                   	ret    
c0014a9d:	83 ec 0c             	sub    esp,0xc
c0014aa0:	53                   	push   ebx
c0014aa1:	e8 f2 fa ff ff       	call   c0014598 <Device::getName()>
c0014aa6:	83 c4 10             	add    esp,0x10
c0014aa9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014aac:	75 8e                	jne    c0014a3c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014aae:	83 fe 0f             	cmp    esi,0xf
c0014ab1:	7f 09                	jg     c0014abc <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014ab3:	0f b6 b6 40 d5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2ac0]
c0014aba:	eb 80                	jmp    c0014a3c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014abc:	83 ec 0c             	sub    esp,0xc
c0014abf:	68 14 ad 02 c0       	push   0xc002ad14
c0014ac4:	e8 62 5a 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0014ac9:	83 c4 10             	add    esp,0x10
c0014acc:	e9 6b ff ff ff       	jmp    c0014a3c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ad1:	90                   	nop

c0014ad2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014ad2:	56                   	push   esi
c0014ad3:	53                   	push   ebx
c0014ad4:	52                   	push   edx
c0014ad5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ad9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014add:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ae2:	75 3a                	jne    c0014b1e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014ae4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ae8:	8d 50 20             	lea    edx,[eax+0x20]
c0014aeb:	c1 e2 04             	shl    edx,0x4
c0014aee:	8d 04 16             	lea    eax,[esi+edx*1]
c0014af1:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014af5:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014afb:	74 0b                	je     c0014b08 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014afd:	83 c0 04             	add    eax,0x4
c0014b00:	39 d0                	cmp    eax,edx
c0014b02:	75 f1                	jne    c0014af5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b04:	58                   	pop    eax
c0014b05:	5b                   	pop    ebx
c0014b06:	5e                   	pop    esi
c0014b07:	c3                   	ret    
c0014b08:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b12:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b1c:	eb df                	jmp    c0014afd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b1e:	83 ec 0c             	sub    esp,0xc
c0014b21:	56                   	push   esi
c0014b22:	e8 71 fa ff ff       	call   c0014598 <Device::getName()>
c0014b27:	83 c4 10             	add    esp,0x10
c0014b2a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b2d:	75 b5                	jne    c0014ae4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b2f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b34:	7f 11                	jg     c0014b47 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b3a:	0f b6 80 40 d5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2ac0]
c0014b41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b45:	eb 9d                	jmp    c0014ae4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b47:	83 ec 0c             	sub    esp,0xc
c0014b4a:	68 14 ad 02 c0       	push   0xc002ad14
c0014b4f:	e8 d7 59 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0014b54:	83 c4 10             	add    esp,0x10
c0014b57:	eb 8b                	jmp    c0014ae4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b59 <nmiHandler(regs*, void*)>:
c0014b59:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0014b5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b62:	e9 25 a4 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014b67 <int_handler>:
c0014b67:	55                   	push   ebp
c0014b68:	57                   	push   edi
c0014b69:	56                   	push   esi
c0014b6a:	53                   	push   ebx
c0014b6b:	83 ec 0c             	sub    esp,0xc
c0014b6e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b72:	80 3d 44 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e44,0x0
c0014b79:	74 0b                	je     c0014b86 <int_handler+0x1f>
c0014b7b:	fa                   	cli    
c0014b7c:	f4                   	hlt    
c0014b7d:	80 3d 44 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e44,0x0
c0014b84:	75 f5                	jne    c0014b7b <int_handler+0x14>
c0014b86:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0014b8b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b94:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014b9a:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b9d:	83 f8 17             	cmp    eax,0x17
c0014ba0:	77 13                	ja     c0014bb5 <int_handler+0x4e>
c0014ba2:	83 ec 08             	sub    esp,0x8
c0014ba5:	8b 17                	mov    edx,DWORD PTR [edi]
c0014ba7:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014baa:	0f b6 c0             	movzx  eax,al
c0014bad:	50                   	push   eax
c0014bae:	57                   	push   edi
c0014baf:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014bb2:	83 c4 10             	add    esp,0x10
c0014bb5:	83 c3 15             	add    ebx,0x15
c0014bb8:	c1 e3 04             	shl    ebx,0x4
c0014bbb:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014bbf:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014bc6:	31 db                	xor    ebx,ebx
c0014bc8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014bcc:	85 c0                	test   eax,eax
c0014bce:	74 13                	je     c0014be3 <int_handler+0x7c>
c0014bd0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014bd3:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014bd7:	74 1c                	je     c0014bf5 <int_handler+0x8e>
c0014bd9:	83 ec 08             	sub    esp,0x8
c0014bdc:	52                   	push   edx
c0014bdd:	56                   	push   esi
c0014bde:	ff d0                	call   eax
c0014be0:	83 c4 10             	add    esp,0x10
c0014be3:	43                   	inc    ebx
c0014be4:	83 fb 04             	cmp    ebx,0x4
c0014be7:	75 df                	jne    c0014bc8 <int_handler+0x61>
c0014be9:	83 c4 0c             	add    esp,0xc
c0014bec:	31 c0                	xor    eax,eax
c0014bee:	5b                   	pop    ebx
c0014bef:	31 d2                	xor    edx,edx
c0014bf1:	5e                   	pop    esi
c0014bf2:	5f                   	pop    edi
c0014bf3:	5d                   	pop    ebp
c0014bf4:	c3                   	ret    
c0014bf5:	83 ec 08             	sub    esp,0x8
c0014bf8:	52                   	push   edx
c0014bf9:	56                   	push   esi
c0014bfa:	ff d0                	call   eax
c0014bfc:	83 c4 10             	add    esp,0x10
c0014bff:	83 c4 0c             	add    esp,0xc
c0014c02:	5b                   	pop    ebx
c0014c03:	5e                   	pop    esi
c0014c04:	5f                   	pop    edi
c0014c05:	5d                   	pop    ebp
c0014c06:	c3                   	ret    
c0014c07:	90                   	nop

c0014c08 <InterruptController::InterruptController(char const*)>:
c0014c08:	83 ec 1c             	sub    esp,0x1c
c0014c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c0f:	83 ec 08             	sub    esp,0x8
c0014c12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c16:	50                   	push   eax
c0014c17:	e8 80 f8 ff ff       	call   c001449c <Device::Device(char const*)>
c0014c1c:	83 c4 10             	add    esp,0x10
c0014c1f:	ba b4 af 02 c0       	mov    edx,0xc002afb4
c0014c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c28:	89 10                	mov    DWORD PTR [eax],edx
c0014c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c2e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c38:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c40:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c48:	7f 5e                	jg     c0014ca8 <InterruptController::InterruptController(char const*)+0xa0>
c0014c4a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c52:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c57:	7f 49                	jg     c0014ca2 <InterruptController::InterruptController(char const*)+0x9a>
c0014c59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c61:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c6c:	01 ca                	add    edx,ecx
c0014c6e:	83 c2 54             	add    edx,0x54
c0014c71:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c81:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c8c:	01 ca                	add    edx,ecx
c0014c8e:	81 c2 54 04 00 00    	add    edx,0x454
c0014c94:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c9c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014ca0:	eb b0                	jmp    c0014c52 <InterruptController::InterruptController(char const*)+0x4a>
c0014ca2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014ca6:	eb 98                	jmp    c0014c40 <InterruptController::InterruptController(char const*)+0x38>
c0014ca8:	90                   	nop
c0014ca9:	83 c4 1c             	add    esp,0x1c
c0014cac:	c3                   	ret    
c0014cad:	90                   	nop

c0014cae <InterruptController::~InterruptController()>:
c0014cae:	83 ec 0c             	sub    esp,0xc
c0014cb1:	ba b4 af 02 c0       	mov    edx,0xc002afb4
c0014cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cba:	89 10                	mov    DWORD PTR [eax],edx
c0014cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cc0:	83 ec 0c             	sub    esp,0xc
c0014cc3:	50                   	push   eax
c0014cc4:	e8 b5 f4 ff ff       	call   c001417e <Device::~Device()>
c0014cc9:	83 c4 10             	add    esp,0x10
c0014ccc:	90                   	nop
c0014ccd:	83 c4 0c             	add    esp,0xc
c0014cd0:	c3                   	ret    
c0014cd1:	90                   	nop

c0014cd2 <InterruptController::~InterruptController()>:
c0014cd2:	83 ec 0c             	sub    esp,0xc
c0014cd5:	83 ec 0c             	sub    esp,0xc
c0014cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cdc:	e8 cd ff ff ff       	call   c0014cae <InterruptController::~InterruptController()>
c0014ce1:	83 c4 10             	add    esp,0x10
c0014ce4:	83 ec 08             	sub    esp,0x8
c0014ce7:	68 58 21 00 00       	push   0x2158
c0014cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cf0:	e8 b1 e0 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	83 c4 0c             	add    esp,0xc
c0014cfb:	c3                   	ret    

c0014cfc <displayDebugInfo(regs*)>:
c0014cfc:	55                   	push   ebp
c0014cfd:	57                   	push   edi
c0014cfe:	56                   	push   esi
c0014cff:	53                   	push   ebx
c0014d00:	83 ec 24             	sub    esp,0x24
c0014d03:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d07:	0f 20 c2             	mov    edx,cr0
c0014d0a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d0e:	0f 20 d7             	mov    edi,cr2
c0014d11:	0f 20 de             	mov    esi,cr3
c0014d14:	0f 20 e5             	mov    ebp,cr4
c0014d17:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d1a:	68 4e ad 02 c0       	push   0xc002ad4e
c0014d1f:	e8 62 e1 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014d24:	59                   	pop    ecx
c0014d25:	58                   	pop    eax
c0014d26:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d29:	68 59 ad 02 c0       	push   0xc002ad59
c0014d2e:	e8 53 e1 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014d33:	58                   	pop    eax
c0014d34:	5a                   	pop    edx
c0014d35:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d38:	68 64 ad 02 c0       	push   0xc002ad64
c0014d3d:	e8 44 e1 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014d42:	59                   	pop    ecx
c0014d43:	58                   	pop    eax
c0014d44:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d47:	68 6f ad 02 c0       	push   0xc002ad6f
c0014d4c:	e8 35 e1 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014d51:	58                   	pop    eax
c0014d52:	5a                   	pop    edx
c0014d53:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d56:	68 7a ad 02 c0       	push   0xc002ad7a
c0014d5b:	e8 26 e1 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014d60:	59                   	pop    ecx
c0014d61:	58                   	pop    eax
c0014d62:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d65:	68 85 ad 02 c0       	push   0xc002ad85
c0014d6a:	e8 17 e1 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014d6f:	58                   	pop    eax
c0014d70:	5a                   	pop    edx
c0014d71:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d74:	68 90 ad 02 c0       	push   0xc002ad90
c0014d79:	e8 08 e1 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014d7e:	59                   	pop    ecx
c0014d7f:	58                   	pop    eax
c0014d80:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d83:	68 9b ad 02 c0       	push   0xc002ad9b
c0014d88:	e8 f9 e0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014d8d:	58                   	pop    eax
c0014d8e:	5a                   	pop    edx
c0014d8f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d92:	68 a6 ad 02 c0       	push   0xc002ada6
c0014d97:	e8 ea e0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014d9c:	59                   	pop    ecx
c0014d9d:	58                   	pop    eax
c0014d9e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014da1:	68 b5 ad 02 c0       	push   0xc002adb5
c0014da6:	e8 db e0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014dab:	58                   	pop    eax
c0014dac:	5a                   	pop    edx
c0014dad:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014db0:	68 c0 ad 02 c0       	push   0xc002adc0
c0014db5:	e8 cc e0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014dba:	59                   	pop    ecx
c0014dbb:	58                   	pop    eax
c0014dbc:	57                   	push   edi
c0014dbd:	68 cb ad 02 c0       	push   0xc002adcb
c0014dc2:	e8 bf e0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014dc7:	58                   	pop    eax
c0014dc8:	5a                   	pop    edx
c0014dc9:	56                   	push   esi
c0014dca:	68 d6 ad 02 c0       	push   0xc002add6
c0014dcf:	e8 b2 e0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0014dd4:	59                   	pop    ecx
c0014dd5:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014dda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de0:	e8 08 bf ff ff       	call   c0010ced <setActiveTerminal(VgaText*)>
c0014de5:	58                   	pop    eax
c0014de6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014de9:	5a                   	pop    edx
c0014dea:	c1 e0 05             	shl    eax,0x5
c0014ded:	05 a0 d2 02 c0       	add    eax,0xc002d2a0
c0014df2:	50                   	push   eax
c0014df3:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014df8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dfe:	e8 09 c3 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e03:	59                   	pop    ecx
c0014e04:	58                   	pop    eax
c0014e05:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014e0a:	68 e1 ad 02 c0       	push   0xc002ade1
c0014e0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e15:	e8 f2 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e1a:	58                   	pop    eax
c0014e1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e20:	5a                   	pop    edx
c0014e21:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e24:	83 c0 0c             	add    eax,0xc
c0014e27:	50                   	push   eax
c0014e28:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014e2d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e33:	e8 d4 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e38:	59                   	pop    ecx
c0014e39:	58                   	pop    eax
c0014e3a:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014e3f:	68 ea ad 02 c0       	push   0xc002adea
c0014e44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4a:	e8 bd c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e4f:	58                   	pop    eax
c0014e50:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014e55:	5a                   	pop    edx
c0014e56:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e5f:	e8 ce c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014e64:	59                   	pop    ecx
c0014e65:	58                   	pop    eax
c0014e66:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014e6b:	68 f2 ad 02 c0       	push   0xc002adf2
c0014e70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e76:	e8 91 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e7b:	58                   	pop    eax
c0014e7c:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014e81:	5a                   	pop    edx
c0014e82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e8b:	e8 a2 c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014e90:	59                   	pop    ecx
c0014e91:	58                   	pop    eax
c0014e92:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014e97:	68 fa ad 02 c0       	push   0xc002adfa
c0014e9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea2:	e8 65 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014ea7:	58                   	pop    eax
c0014ea8:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014ead:	5a                   	pop    edx
c0014eae:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014eb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb7:	e8 76 c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014ebc:	59                   	pop    ecx
c0014ebd:	58                   	pop    eax
c0014ebe:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014ec3:	68 02 ae 02 c0       	push   0xc002ae02
c0014ec8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ece:	e8 39 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014ed3:	58                   	pop    eax
c0014ed4:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014ed9:	5a                   	pop    edx
c0014eda:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014edd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee3:	e8 4a c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014ee8:	59                   	pop    ecx
c0014ee9:	58                   	pop    eax
c0014eea:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014eef:	68 0a ae 02 c0       	push   0xc002ae0a
c0014ef4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014efa:	e8 0d c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014eff:	58                   	pop    eax
c0014f00:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014f05:	5a                   	pop    edx
c0014f06:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0f:	e8 1e c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014f14:	59                   	pop    ecx
c0014f15:	58                   	pop    eax
c0014f16:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014f1b:	68 12 ae 02 c0       	push   0xc002ae12
c0014f20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f26:	e8 e1 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014f2b:	58                   	pop    eax
c0014f2c:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014f31:	5a                   	pop    edx
c0014f32:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f3b:	e8 f2 c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014f40:	59                   	pop    ecx
c0014f41:	58                   	pop    eax
c0014f42:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014f47:	68 1a ae 02 c0       	push   0xc002ae1a
c0014f4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f52:	e8 b5 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014f57:	58                   	pop    eax
c0014f58:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014f5d:	5a                   	pop    edx
c0014f5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f62:	52                   	push   edx
c0014f63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f69:	e8 c4 c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014f6e:	59                   	pop    ecx
c0014f6f:	58                   	pop    eax
c0014f70:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014f75:	68 23 ae 02 c0       	push   0xc002ae23
c0014f7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f80:	e8 87 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014f85:	58                   	pop    eax
c0014f86:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014f8b:	5a                   	pop    edx
c0014f8c:	57                   	push   edi
c0014f8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f93:	e8 9a c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014f98:	59                   	pop    ecx
c0014f99:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014f9e:	5f                   	pop    edi
c0014f9f:	68 2b ae 02 c0       	push   0xc002ae2b
c0014fa4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014faa:	e8 5d c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014faf:	58                   	pop    eax
c0014fb0:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014fb5:	5a                   	pop    edx
c0014fb6:	56                   	push   esi
c0014fb7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbd:	e8 70 c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014fc2:	59                   	pop    ecx
c0014fc3:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014fc8:	5e                   	pop    esi
c0014fc9:	68 33 ae 02 c0       	push   0xc002ae33
c0014fce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd4:	e8 33 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014fd9:	5f                   	pop    edi
c0014fda:	58                   	pop    eax
c0014fdb:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014fe0:	55                   	push   ebp
c0014fe1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe7:	e8 46 c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014fec:	58                   	pop    eax
c0014fed:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0014ff2:	5a                   	pop    edx
c0014ff3:	68 3b ae 02 c0       	push   0xc002ae3b
c0014ff8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffe:	e8 09 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0015003:	0f 21 c0             	mov    eax,db0
c0015006:	59                   	pop    ecx
c0015007:	5e                   	pop    esi
c0015008:	50                   	push   eax
c0015009:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001500e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015014:	e8 19 c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0015019:	5f                   	pop    edi
c001501a:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001501f:	5d                   	pop    ebp
c0015020:	68 44 ae 02 c0       	push   0xc002ae44
c0015025:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001502b:	e8 dc c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0015030:	0f 21 c8             	mov    eax,db1
c0015033:	5a                   	pop    edx
c0015034:	59                   	pop    ecx
c0015035:	50                   	push   eax
c0015036:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001503b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015041:	e8 ec c0 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0015046:	5e                   	pop    esi
c0015047:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001504c:	5f                   	pop    edi
c001504d:	68 4c ae 02 c0       	push   0xc002ae4c
c0015052:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015058:	e8 af c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001505d:	0f 21 d0             	mov    eax,db2
c0015060:	5d                   	pop    ebp
c0015061:	5a                   	pop    edx
c0015062:	50                   	push   eax
c0015063:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0015068:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506e:	e8 bf c0 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0015073:	59                   	pop    ecx
c0015074:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0015079:	5e                   	pop    esi
c001507a:	68 54 ae 02 c0       	push   0xc002ae54
c001507f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015085:	e8 82 c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001508a:	0f 21 d8             	mov    eax,db3
c001508d:	5f                   	pop    edi
c001508e:	5d                   	pop    ebp
c001508f:	50                   	push   eax
c0015090:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0015095:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509b:	e8 92 c0 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c00150a0:	58                   	pop    eax
c00150a1:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c00150a6:	5a                   	pop    edx
c00150a7:	68 5c ae 02 c0       	push   0xc002ae5c
c00150ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b2:	e8 55 c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c00150b7:	0f 21 f0             	mov    eax,db6
c00150ba:	59                   	pop    ecx
c00150bb:	5e                   	pop    esi
c00150bc:	50                   	push   eax
c00150bd:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c00150c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c8:	e8 65 c0 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c00150cd:	5f                   	pop    edi
c00150ce:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c00150d3:	5d                   	pop    ebp
c00150d4:	68 64 ae 02 c0       	push   0xc002ae64
c00150d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150df:	e8 28 c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c00150e4:	0f 21 f8             	mov    eax,db7
c00150e7:	5a                   	pop    edx
c00150e8:	59                   	pop    ecx
c00150e9:	50                   	push   eax
c00150ea:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c00150ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f5:	e8 38 c0 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c00150fa:	5e                   	pop    esi
c00150fb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150fe:	e8 0a 85 00 00       	call   c001d60d <Thr::getDriverNameFromAddress(unsigned long)>
c0015103:	83 c4 10             	add    esp,0x10
c0015106:	85 c0                	test   eax,eax
c0015108:	74 7d                	je     c0015187 <displayDebugInfo(regs*)+0x48b>
c001510a:	89 c6                	mov    esi,eax
c001510c:	50                   	push   eax
c001510d:	50                   	push   eax
c001510e:	56                   	push   esi
c001510f:	68 6c ae 02 c0       	push   0xc002ae6c
c0015114:	e8 6d dd ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0015119:	5a                   	pop    edx
c001511a:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001511f:	59                   	pop    ecx
c0015120:	68 7a ae 02 c0       	push   0xc002ae7a
c0015125:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512b:	e8 dc bf ff ff       	call   c001110c <VgaText::puts(char const*)>
c0015130:	5f                   	pop    edi
c0015131:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0015136:	5d                   	pop    ebp
c0015137:	56                   	push   esi
c0015138:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001513e:	e8 c9 bf ff ff       	call   c001110c <VgaText::puts(char const*)>
c0015143:	58                   	pop    eax
c0015144:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0015149:	5a                   	pop    edx
c001514a:	68 86 ae 02 c0       	push   0xc002ae86
c001514f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015155:	e8 b2 bf ff ff       	call   c001110c <VgaText::puts(char const*)>
c001515a:	59                   	pop    ecx
c001515b:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0015160:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015166:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015169:	e8 d6 84 00 00       	call   c001d644 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001516e:	5b                   	pop    ebx
c001516f:	5d                   	pop    ebp
c0015170:	50                   	push   eax
c0015171:	57                   	push   edi
c0015172:	e8 bb bf ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0015177:	58                   	pop    eax
c0015178:	5a                   	pop    edx
c0015179:	56                   	push   esi
c001517a:	68 92 ae 02 c0       	push   0xc002ae92
c001517f:	e8 02 dd ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0015184:	83 c4 10             	add    esp,0x10
c0015187:	fa                   	cli    
c0015188:	f4                   	hlt    
c0015189:	eb fe                	jmp    c0015189 <displayDebugInfo(regs*)+0x48d>

c001518b <x87EmulHandler(regs*, void*)>:
c001518b:	53                   	push   ebx
c001518c:	83 ec 14             	sub    esp,0x14
c001518f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015193:	53                   	push   ebx
c0015194:	e8 1b a8 00 00       	call   c001f9b4 <Vm::x87Handler(regs*)>
c0015199:	83 c4 10             	add    esp,0x10
c001519c:	84 c0                	test   al,al
c001519e:	74 05                	je     c00151a5 <x87EmulHandler(regs*, void*)+0x1a>
c00151a0:	83 c4 08             	add    esp,0x8
c00151a3:	5b                   	pop    ebx
c00151a4:	c3                   	ret    
c00151a5:	83 ec 0c             	sub    esp,0xc
c00151a8:	68 a2 ae 02 c0       	push   0xc002aea2
c00151ad:	e8 d4 dc ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00151b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151b5:	e8 42 fb ff ff       	call   c0014cfc <displayDebugInfo(regs*)>

c00151ba <gpFault(regs*, void*)>:
c00151ba:	53                   	push   ebx
c00151bb:	83 ec 14             	sub    esp,0x14
c00151be:	c7 05 98 e4 02 c0 31 ed 01 c0 	mov    DWORD PTR ds:0xc002e498,0xc001ed31
c00151c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151cc:	53                   	push   ebx
c00151cd:	e8 5f 9b 00 00       	call   c001ed31 <Vm::faultHandler(regs*)>
c00151d2:	83 c4 10             	add    esp,0x10
c00151d5:	84 c0                	test   al,al
c00151d7:	74 05                	je     c00151de <gpFault(regs*, void*)+0x24>
c00151d9:	83 c4 08             	add    esp,0x8
c00151dc:	5b                   	pop    ebx
c00151dd:	c3                   	ret    
c00151de:	83 ec 0c             	sub    esp,0xc
c00151e1:	68 b8 ae 02 c0       	push   0xc002aeb8
c00151e6:	e8 9b dc ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00151eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151ee:	e8 09 fb ff ff       	call   c0014cfc <displayDebugInfo(regs*)>

c00151f3 <pgFault(regs*, void*)>:
c00151f3:	83 ec 14             	sub    esp,0x14
c00151f6:	0f 20 d0             	mov    eax,cr2
c00151f9:	50                   	push   eax
c00151fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015202:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015208:	e8 9f d8 ff ff       	call   c0012aac <VAS::tryLoadBackOffDisk(unsigned long)>
c001520d:	83 c4 10             	add    esp,0x10
c0015210:	84 c0                	test   al,al
c0015212:	74 04                	je     c0015218 <pgFault(regs*, void*)+0x25>
c0015214:	83 c4 0c             	add    esp,0xc
c0015217:	c3                   	ret    
c0015218:	83 ec 0c             	sub    esp,0xc
c001521b:	68 d3 ae 02 c0       	push   0xc002aed3
c0015220:	e8 61 dc ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0015225:	58                   	pop    eax
c0015226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001522a:	e8 cd fa ff ff       	call   c0014cfc <displayDebugInfo(regs*)>

c001522f <otherISRHandler(regs*, void*)>:
c001522f:	53                   	push   ebx
c0015230:	83 ec 0c             	sub    esp,0xc
c0015233:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015237:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001523a:	50                   	push   eax
c001523b:	50                   	push   eax
c001523c:	68 e5 ae 02 c0       	push   0xc002aee5
c0015241:	e8 40 dc ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0015246:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015249:	e8 ae fa ff ff       	call   c0014cfc <displayDebugInfo(regs*)>

c001524e <opcodeFault(regs*, void*)>:
c001524e:	55                   	push   ebp
c001524f:	89 e5                	mov    ebp,esp
c0015251:	56                   	push   esi
c0015252:	53                   	push   ebx
c0015253:	83 ec 40             	sub    esp,0x40
c0015256:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c001525b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015261:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015267:	84 c0                	test   al,al
c0015269:	74 24                	je     c001528f <opcodeFault(regs*, void*)+0x41>
c001526b:	83 ec 0c             	sub    esp,0xc
c001526e:	68 04 af 02 c0       	push   0xc002af04
c0015273:	e8 0e dc ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0015278:	83 c4 10             	add    esp,0x10
c001527b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015281:	8d 50 19             	lea    edx,[eax+0x19]
c0015284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015287:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001528a:	e9 be 05 00 00       	jmp    c001584d <opcodeFault(regs*, void*)+0x5ff>
c001528f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015292:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015295:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015298:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001529c:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152a6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ac:	8a 00                	mov    al,BYTE PTR [eax]
c00152ae:	3c f0                	cmp    al,0xf0
c00152b0:	75 17                	jne    c00152c9 <opcodeFault(regs*, void*)+0x7b>
c00152b2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152bb:	8d 50 01             	lea    edx,[eax+0x1]
c00152be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152c4:	e9 da 00 00 00       	jmp    c00153a3 <opcodeFault(regs*, void*)+0x155>
c00152c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cc:	8a 00                	mov    al,BYTE PTR [eax]
c00152ce:	3c f2                	cmp    al,0xf2
c00152d0:	74 09                	je     c00152db <opcodeFault(regs*, void*)+0x8d>
c00152d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d5:	8a 00                	mov    al,BYTE PTR [eax]
c00152d7:	3c f3                	cmp    al,0xf3
c00152d9:	75 1b                	jne    c00152f6 <opcodeFault(regs*, void*)+0xa8>
c00152db:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152df:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e8:	8d 50 01             	lea    edx,[eax+0x1]
c00152eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152f1:	e9 ad 00 00 00       	jmp    c00153a3 <opcodeFault(regs*, void*)+0x155>
c00152f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f9:	8a 00                	mov    al,BYTE PTR [eax]
c00152fb:	3c 66                	cmp    al,0x66
c00152fd:	75 1f                	jne    c001531e <opcodeFault(regs*, void*)+0xd0>
c00152ff:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015303:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015307:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001530a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015310:	8d 50 01             	lea    edx,[eax+0x1]
c0015313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015316:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015319:	e9 85 00 00 00       	jmp    c00153a3 <opcodeFault(regs*, void*)+0x155>
c001531e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015321:	8a 00                	mov    al,BYTE PTR [eax]
c0015323:	3c 67                	cmp    al,0x67
c0015325:	75 18                	jne    c001533f <opcodeFault(regs*, void*)+0xf1>
c0015327:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001532b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001532e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015331:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015334:	8d 50 01             	lea    edx,[eax+0x1]
c0015337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001533d:	eb 64                	jmp    c00153a3 <opcodeFault(regs*, void*)+0x155>
c001533f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015342:	8a 00                	mov    al,BYTE PTR [eax]
c0015344:	3c 2e                	cmp    al,0x2e
c0015346:	74 09                	je     c0015351 <opcodeFault(regs*, void*)+0x103>
c0015348:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534b:	8a 00                	mov    al,BYTE PTR [eax]
c001534d:	3c 3e                	cmp    al,0x3e
c001534f:	75 18                	jne    c0015369 <opcodeFault(regs*, void*)+0x11b>
c0015351:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015355:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001535e:	8d 50 01             	lea    edx,[eax+0x1]
c0015361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015364:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015367:	eb 3a                	jmp    c00153a3 <opcodeFault(regs*, void*)+0x155>
c0015369:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536c:	8a 00                	mov    al,BYTE PTR [eax]
c001536e:	3c 36                	cmp    al,0x36
c0015370:	74 1b                	je     c001538d <opcodeFault(regs*, void*)+0x13f>
c0015372:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015375:	8a 00                	mov    al,BYTE PTR [eax]
c0015377:	3c 26                	cmp    al,0x26
c0015379:	74 12                	je     c001538d <opcodeFault(regs*, void*)+0x13f>
c001537b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537e:	8a 00                	mov    al,BYTE PTR [eax]
c0015380:	3c 64                	cmp    al,0x64
c0015382:	74 09                	je     c001538d <opcodeFault(regs*, void*)+0x13f>
c0015384:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015387:	8a 00                	mov    al,BYTE PTR [eax]
c0015389:	3c 65                	cmp    al,0x65
c001538b:	75 16                	jne    c00153a3 <opcodeFault(regs*, void*)+0x155>
c001538d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015391:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015397:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001539a:	8d 50 01             	lea    edx,[eax+0x1]
c001539d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a6:	8a 00                	mov    al,BYTE PTR [eax]
c00153a8:	3c 0f                	cmp    al,0xf
c00153aa:	0f 85 ad 00 00 00    	jne    c001545d <opcodeFault(regs*, void*)+0x20f>
c00153b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b3:	40                   	inc    eax
c00153b4:	8a 00                	mov    al,BYTE PTR [eax]
c00153b6:	3c c2                	cmp    al,0xc2
c00153b8:	74 0e                	je     c00153c8 <opcodeFault(regs*, void*)+0x17a>
c00153ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bd:	40                   	inc    eax
c00153be:	8a 00                	mov    al,BYTE PTR [eax]
c00153c0:	3c c3                	cmp    al,0xc3
c00153c2:	0f 85 95 00 00 00    	jne    c001545d <opcodeFault(regs*, void*)+0x20f>
c00153c8:	83 ec 0c             	sub    esp,0xc
c00153cb:	68 27 af 02 c0       	push   0xc002af27
c00153d0:	e8 b1 da ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153de:	8d 50 01             	lea    edx,[eax+0x1]
c00153e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ed:	8a 00                	mov    al,BYTE PTR [eax]
c00153ef:	8d 50 fe             	lea    edx,[eax-0x2]
c00153f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f5:	88 10                	mov    BYTE PTR [eax],dl
c00153f7:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00153fa:	50                   	push   eax
c00153fb:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00153fe:	50                   	push   eax
c00153ff:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015402:	50                   	push   eax
c0015403:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015406:	e8 e7 47 00 00       	call   c0019bf2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001540b:	83 c4 10             	add    esp,0x10
c001540e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015411:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015414:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015417:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001541a:	01 d0                	add    eax,edx
c001541c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001541f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015422:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015425:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015428:	48                   	dec    eax
c0015429:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001542c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542f:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015432:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015438:	83 ec 04             	sub    esp,0x4
c001543b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001543e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015441:	50                   	push   eax
c0015442:	e8 6d ad fe ff       	call   c00001b4 <voodooXADD>
c0015447:	83 c4 10             	add    esp,0x10
c001544a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001544d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015450:	01 c2                	add    edx,eax
c0015452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015455:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015458:	e9 f0 03 00 00       	jmp    c001584d <opcodeFault(regs*, void*)+0x5ff>
c001545d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015460:	8a 00                	mov    al,BYTE PTR [eax]
c0015462:	3c 0f                	cmp    al,0xf
c0015464:	0f 85 8b 01 00 00    	jne    c00155f5 <opcodeFault(regs*, void*)+0x3a7>
c001546a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546d:	40                   	inc    eax
c001546e:	8a 00                	mov    al,BYTE PTR [eax]
c0015470:	3c c7                	cmp    al,0xc7
c0015472:	0f 86 7d 01 00 00    	jbe    c00155f5 <opcodeFault(regs*, void*)+0x3a7>
c0015478:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547b:	40                   	inc    eax
c001547c:	8a 00                	mov    al,BYTE PTR [eax]
c001547e:	3c cf                	cmp    al,0xcf
c0015480:	0f 87 6f 01 00 00    	ja     c00155f5 <opcodeFault(regs*, void*)+0x3a7>
c0015486:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015489:	40                   	inc    eax
c001548a:	8a 00                	mov    al,BYTE PTR [eax]
c001548c:	83 c0 38             	add    eax,0x38
c001548f:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015492:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015496:	75 0b                	jne    c00154a3 <opcodeFault(regs*, void*)+0x255>
c0015498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001549e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154a1:	eb 75                	jmp    c0015518 <opcodeFault(regs*, void*)+0x2ca>
c00154a3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154a7:	75 0b                	jne    c00154b4 <opcodeFault(regs*, void*)+0x266>
c00154a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ac:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154b2:	eb 64                	jmp    c0015518 <opcodeFault(regs*, void*)+0x2ca>
c00154b4:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154b8:	75 0b                	jne    c00154c5 <opcodeFault(regs*, void*)+0x277>
c00154ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00154c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154c3:	eb 53                	jmp    c0015518 <opcodeFault(regs*, void*)+0x2ca>
c00154c5:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154c9:	75 0b                	jne    c00154d6 <opcodeFault(regs*, void*)+0x288>
c00154cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ce:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154d4:	eb 42                	jmp    c0015518 <opcodeFault(regs*, void*)+0x2ca>
c00154d6:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154da:	75 0b                	jne    c00154e7 <opcodeFault(regs*, void*)+0x299>
c00154dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154df:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00154e2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154e5:	eb 31                	jmp    c0015518 <opcodeFault(regs*, void*)+0x2ca>
c00154e7:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00154eb:	75 0b                	jne    c00154f8 <opcodeFault(regs*, void*)+0x2aa>
c00154ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00154f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154f6:	eb 20                	jmp    c0015518 <opcodeFault(regs*, void*)+0x2ca>
c00154f8:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00154fc:	75 0b                	jne    c0015509 <opcodeFault(regs*, void*)+0x2bb>
c00154fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015501:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015504:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015507:	eb 0f                	jmp    c0015518 <opcodeFault(regs*, void*)+0x2ca>
c0015509:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001550d:	75 09                	jne    c0015518 <opcodeFault(regs*, void*)+0x2ca>
c001550f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015512:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015515:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015518:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001551c:	74 10                	je     c001552e <opcodeFault(regs*, void*)+0x2e0>
c001551e:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015525:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001552c:	eb 2d                	jmp    c001555b <opcodeFault(regs*, void*)+0x30d>
c001552e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015531:	c1 e0 18             	shl    eax,0x18
c0015534:	89 c2                	mov    edx,eax
c0015536:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015539:	c1 e0 08             	shl    eax,0x8
c001553c:	25 00 00 ff 00       	and    eax,0xff0000
c0015541:	09 c2                	or     edx,eax
c0015543:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015546:	c1 e8 08             	shr    eax,0x8
c0015549:	25 00 ff 00 00       	and    eax,0xff00
c001554e:	09 c2                	or     edx,eax
c0015550:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015553:	c1 e8 18             	shr    eax,0x18
c0015556:	09 d0                	or     eax,edx
c0015558:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001555b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001555f:	75 0b                	jne    c001556c <opcodeFault(regs*, void*)+0x31e>
c0015561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015564:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015567:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001556a:	eb 75                	jmp    c00155e1 <opcodeFault(regs*, void*)+0x393>
c001556c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015570:	75 0b                	jne    c001557d <opcodeFault(regs*, void*)+0x32f>
c0015572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015575:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015578:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001557b:	eb 64                	jmp    c00155e1 <opcodeFault(regs*, void*)+0x393>
c001557d:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015581:	75 0b                	jne    c001558e <opcodeFault(regs*, void*)+0x340>
c0015583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015586:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015589:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001558c:	eb 53                	jmp    c00155e1 <opcodeFault(regs*, void*)+0x393>
c001558e:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015592:	75 0b                	jne    c001559f <opcodeFault(regs*, void*)+0x351>
c0015594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015597:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001559a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001559d:	eb 42                	jmp    c00155e1 <opcodeFault(regs*, void*)+0x393>
c001559f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155a3:	75 0b                	jne    c00155b0 <opcodeFault(regs*, void*)+0x362>
c00155a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ab:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155ae:	eb 31                	jmp    c00155e1 <opcodeFault(regs*, void*)+0x393>
c00155b0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155b4:	75 0b                	jne    c00155c1 <opcodeFault(regs*, void*)+0x373>
c00155b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155bf:	eb 20                	jmp    c00155e1 <opcodeFault(regs*, void*)+0x393>
c00155c1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155c5:	75 0b                	jne    c00155d2 <opcodeFault(regs*, void*)+0x384>
c00155c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155cd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155d0:	eb 0f                	jmp    c00155e1 <opcodeFault(regs*, void*)+0x393>
c00155d2:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155d6:	75 09                	jne    c00155e1 <opcodeFault(regs*, void*)+0x393>
c00155d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155db:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00155e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155e7:	8d 50 02             	lea    edx,[eax+0x2]
c00155ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155f0:	e9 58 02 00 00       	jmp    c001584d <opcodeFault(regs*, void*)+0x5ff>
c00155f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f8:	8a 00                	mov    al,BYTE PTR [eax]
c00155fa:	3c 0f                	cmp    al,0xf
c00155fc:	0f 85 76 01 00 00    	jne    c0015778 <opcodeFault(regs*, void*)+0x52a>
c0015602:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015605:	40                   	inc    eax
c0015606:	8a 00                	mov    al,BYTE PTR [eax]
c0015608:	3c c7                	cmp    al,0xc7
c001560a:	0f 85 68 01 00 00    	jne    c0015778 <opcodeFault(regs*, void*)+0x52a>
c0015610:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015616:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015619:	8d 50 01             	lea    edx,[eax+0x1]
c001561c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015622:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015625:	50                   	push   eax
c0015626:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015629:	50                   	push   eax
c001562a:	8d 45 bc             	lea    eax,[ebp-0x44]
c001562d:	50                   	push   eax
c001562e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015631:	e8 bc 45 00 00       	call   c0019bf2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015636:	83 c4 10             	add    esp,0x10
c0015639:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001563c:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001563f:	83 f0 01             	xor    eax,0x1
c0015642:	84 c0                	test   al,al
c0015644:	0f 84 2e 01 00 00    	je     c0015778 <opcodeFault(regs*, void*)+0x52a>
c001564a:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001564d:	3c 01                	cmp    al,0x1
c001564f:	0f 85 23 01 00 00    	jne    c0015778 <opcodeFault(regs*, void*)+0x52a>
c0015655:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015658:	83 f0 01             	xor    eax,0x1
c001565b:	84 c0                	test   al,al
c001565d:	0f 84 15 01 00 00    	je     c0015778 <opcodeFault(regs*, void*)+0x52a>
c0015663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015666:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015669:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001566c:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015673:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015676:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015679:	89 c2                	mov    edx,eax
c001567b:	b8 00 00 00 00       	mov    eax,0x0
c0015680:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015683:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015689:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001568c:	ba 00 00 00 00       	mov    edx,0x0
c0015691:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015694:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001569d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156a0:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156a7:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156aa:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156ad:	89 c2                	mov    edx,eax
c00156af:	b8 00 00 00 00       	mov    eax,0x0
c00156b4:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156b7:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156c0:	ba 00 00 00 00       	mov    edx,0x0
c00156c5:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00156c8:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00156cb:	e8 50 86 00 00       	call   c001dd20 <lockScheduler()>
c00156d0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00156d3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00156d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d8:	89 c1                	mov    ecx,eax
c00156da:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00156dd:	89 cb                	mov    ebx,ecx
c00156df:	89 d0                	mov    eax,edx
c00156e1:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00156e4:	89 c6                	mov    esi,eax
c00156e6:	89 f0                	mov    eax,esi
c00156e8:	09 d8                	or     eax,ebx
c00156ea:	85 c0                	test   eax,eax
c00156ec:	75 21                	jne    c001570f <opcodeFault(regs*, void*)+0x4c1>
c00156ee:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00156f1:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156f4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156f7:	89 01                	mov    DWORD PTR [ecx],eax
c00156f9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00156fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015702:	83 c8 40             	or     eax,0x40
c0015705:	89 c2                	mov    edx,eax
c0015707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001570d:	eb 3e                	jmp    c001574d <opcodeFault(regs*, void*)+0x4ff>
c001570f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015712:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015715:	8b 00                	mov    eax,DWORD PTR [eax]
c0015717:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001571a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001571d:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015723:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015726:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015729:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001572c:	89 d0                	mov    eax,edx
c001572e:	31 d2                	xor    edx,edx
c0015730:	89 c3                	mov    ebx,eax
c0015732:	89 d6                	mov    esi,edx
c0015734:	89 da                	mov    edx,ebx
c0015736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015739:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001573c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015742:	83 e0 bf             	and    eax,0xffffffbf
c0015745:	89 c2                	mov    edx,eax
c0015747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001574d:	e8 d0 85 00 00       	call   c001dd22 <unlockScheduler()>
c0015752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015755:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015758:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001575b:	01 c2                	add    edx,eax
c001575d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015760:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015763:	83 ec 0c             	sub    esp,0xc
c0015766:	68 36 af 02 c0       	push   0xc002af36
c001576b:	e8 16 d7 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0015770:	83 c4 10             	add    esp,0x10
c0015773:	e9 d5 00 00 00       	jmp    c001584d <opcodeFault(regs*, void*)+0x5ff>
c0015778:	83 ec 0c             	sub    esp,0xc
c001577b:	68 49 af 02 c0       	push   0xc002af49
c0015780:	e8 01 d7 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0015785:	83 c4 10             	add    esp,0x10
c0015788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001578e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015791:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015794:	c1 e0 04             	shl    eax,0x4
c0015797:	01 d0                	add    eax,edx
c0015799:	83 c0 03             	add    eax,0x3
c001579c:	8a 00                	mov    al,BYTE PTR [eax]
c001579e:	0f b6 d8             	movzx  ebx,al
c00157a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157ad:	c1 e0 04             	shl    eax,0x4
c00157b0:	01 d0                	add    eax,edx
c00157b2:	83 c0 02             	add    eax,0x2
c00157b5:	8a 00                	mov    al,BYTE PTR [eax]
c00157b7:	0f b6 c8             	movzx  ecx,al
c00157ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bd:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157c6:	c1 e0 04             	shl    eax,0x4
c00157c9:	01 d0                	add    eax,edx
c00157cb:	40                   	inc    eax
c00157cc:	8a 00                	mov    al,BYTE PTR [eax]
c00157ce:	0f b6 d0             	movzx  edx,al
c00157d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d4:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00157d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157dd:	c1 e0 04             	shl    eax,0x4
c00157e0:	01 f0                	add    eax,esi
c00157e2:	8a 00                	mov    al,BYTE PTR [eax]
c00157e4:	0f b6 c0             	movzx  eax,al
c00157e7:	83 ec 0c             	sub    esp,0xc
c00157ea:	53                   	push   ebx
c00157eb:	51                   	push   ecx
c00157ec:	52                   	push   edx
c00157ed:	50                   	push   eax
c00157ee:	68 5c af 02 c0       	push   0xc002af5c
c00157f3:	e8 8e d6 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00157f8:	83 c4 20             	add    esp,0x20
c00157fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015801:	83 c0 03             	add    eax,0x3
c0015804:	8a 00                	mov    al,BYTE PTR [eax]
c0015806:	0f b6 d8             	movzx  ebx,al
c0015809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001580f:	83 c0 02             	add    eax,0x2
c0015812:	8a 00                	mov    al,BYTE PTR [eax]
c0015814:	0f b6 c8             	movzx  ecx,al
c0015817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001581d:	40                   	inc    eax
c001581e:	8a 00                	mov    al,BYTE PTR [eax]
c0015820:	0f b6 d0             	movzx  edx,al
c0015823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015826:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015829:	8a 00                	mov    al,BYTE PTR [eax]
c001582b:	0f b6 c0             	movzx  eax,al
c001582e:	83 ec 0c             	sub    esp,0xc
c0015831:	53                   	push   ebx
c0015832:	51                   	push   ecx
c0015833:	52                   	push   edx
c0015834:	50                   	push   eax
c0015835:	68 84 af 02 c0       	push   0xc002af84
c001583a:	e8 47 d6 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001583f:	83 c4 20             	add    esp,0x20
c0015842:	83 ec 0c             	sub    esp,0xc
c0015845:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015848:	e8 af f4 ff ff       	call   c0014cfc <displayDebugInfo(regs*)>
c001584d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015850:	5b                   	pop    ebx
c0015851:	5e                   	pop    esi
c0015852:	5d                   	pop    ebp
c0015853:	c3                   	ret    

c0015854 <displayProgramFault(char const*)>:
c0015854:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015859:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001585c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015862:	85 c0                	test   eax,eax
c0015864:	74 15                	je     c001587b <displayProgramFault(char const*)+0x27>
c0015866:	83 ec 0c             	sub    esp,0xc
c0015869:	6a 04                	push   0x4
c001586b:	6a 0f                	push   0xf
c001586d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015871:	50                   	push   eax
c0015872:	e8 57 b5 ff ff       	call   c0010dce <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015877:	83 c4 1c             	add    esp,0x1c
c001587a:	c3                   	ret    
c001587b:	c3                   	ret    

c001587c <setupInterruptController()>:
c001587c:	55                   	push   ebp
c001587d:	89 e5                	mov    ebp,esp
c001587f:	53                   	push   ebx
c0015880:	83 ec 24             	sub    esp,0x24
c0015883:	b8 00 00 00 00       	mov    eax,0x0
c0015888:	85 c0                	test   eax,eax
c001588a:	0f 95 c0             	setne  al
c001588d:	84 c0                	test   al,al
c001588f:	74 5b                	je     c00158ec <setupInterruptController()+0x70>
c0015891:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015898:	83 ec 0c             	sub    esp,0xc
c001589b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001589e:	e8 9d 9f ff ff       	call   c000f840 <malloc>
c00158a3:	83 c4 10             	add    esp,0x10
c00158a6:	89 c3                	mov    ebx,eax
c00158a8:	83 ec 0c             	sub    esp,0xc
c00158ab:	53                   	push   ebx
c00158ac:	e8 c7 ff 00 00       	call   c0025878 <APIC::APIC()>
c00158b1:	83 c4 10             	add    esp,0x10
c00158b4:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158b7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00158bf:	83 c0 08             	add    eax,0x8
c00158c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00158c4:	6a 00                	push   0x0
c00158c6:	6a 00                	push   0x0
c00158c8:	6a 00                	push   0x0
c00158ca:	52                   	push   edx
c00158cb:	ff d0                	call   eax
c00158cd:	83 c4 10             	add    esp,0x10
c00158d0:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00158d5:	83 ec 08             	sub    esp,0x8
c00158d8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158db:	50                   	push   eax
c00158dc:	e8 cb e9 ff ff       	call   c00142ac <Device::addChild(Device*)>
c00158e1:	83 c4 10             	add    esp,0x10
c00158e4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158e7:	e9 52 03 00 00       	jmp    c0015c3e <setupInterruptController()+0x3c2>
c00158ec:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00158f1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00158f7:	83 e0 01             	and    eax,0x1
c00158fa:	84 c0                	test   al,al
c00158fc:	0f 95 c0             	setne  al
c00158ff:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015902:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015909:	83 ec 0c             	sub    esp,0xc
c001590c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001590f:	e8 2c 9f ff ff       	call   c000f840 <malloc>
c0015914:	83 c4 10             	add    esp,0x10
c0015917:	89 c3                	mov    ebx,eax
c0015919:	83 ec 0c             	sub    esp,0xc
c001591c:	53                   	push   ebx
c001591d:	e8 ae 04 01 00       	call   c0025dd0 <PIC::PIC()>
c0015922:	83 c4 10             	add    esp,0x10
c0015925:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015928:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001592b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001592e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015930:	83 c0 08             	add    eax,0x8
c0015933:	8b 00                	mov    eax,DWORD PTR [eax]
c0015935:	6a 00                	push   0x0
c0015937:	6a 00                	push   0x0
c0015939:	6a 00                	push   0x0
c001593b:	52                   	push   edx
c001593c:	ff d0                	call   eax
c001593e:	83 c4 10             	add    esp,0x10
c0015941:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015945:	74 73                	je     c00159ba <setupInterruptController()+0x13e>
c0015947:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001594a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001594d:	8b 00                	mov    eax,DWORD PTR [eax]
c001594f:	83 c0 0c             	add    eax,0xc
c0015952:	8b 00                	mov    eax,DWORD PTR [eax]
c0015954:	6a 00                	push   0x0
c0015956:	6a 00                	push   0x0
c0015958:	6a 00                	push   0x0
c001595a:	52                   	push   edx
c001595b:	ff d0                	call   eax
c001595d:	83 c4 10             	add    esp,0x10
c0015960:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015964:	74 15                	je     c001597b <setupInterruptController()+0xff>
c0015966:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015969:	8b 00                	mov    eax,DWORD PTR [eax]
c001596b:	83 c0 04             	add    eax,0x4
c001596e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015970:	83 ec 0c             	sub    esp,0xc
c0015973:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015976:	ff d0                	call   eax
c0015978:	83 c4 10             	add    esp,0x10
c001597b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015982:	83 ec 0c             	sub    esp,0xc
c0015985:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015988:	e8 b3 9e ff ff       	call   c000f840 <malloc>
c001598d:	83 c4 10             	add    esp,0x10
c0015990:	89 c3                	mov    ebx,eax
c0015992:	83 ec 0c             	sub    esp,0xc
c0015995:	53                   	push   ebx
c0015996:	e8 dd fe 00 00       	call   c0025878 <APIC::APIC()>
c001599b:	83 c4 10             	add    esp,0x10
c001599e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159a1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a9:	83 c0 08             	add    eax,0x8
c00159ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ae:	6a 00                	push   0x0
c00159b0:	6a 00                	push   0x0
c00159b2:	6a 00                	push   0x0
c00159b4:	52                   	push   edx
c00159b5:	ff d0                	call   eax
c00159b7:	83 c4 10             	add    esp,0x10
c00159ba:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00159bf:	83 ec 08             	sub    esp,0x8
c00159c2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159c5:	50                   	push   eax
c00159c6:	e8 e1 e8 ff ff       	call   c00142ac <Device::addChild(Device*)>
c00159cb:	83 c4 10             	add    esp,0x10
c00159ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d3:	83 c0 24             	add    eax,0x24
c00159d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d8:	6a 00                	push   0x0
c00159da:	68 2f 52 01 c0       	push   0xc001522f
c00159df:	6a 00                	push   0x0
c00159e1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159e4:	ff d0                	call   eax
c00159e6:	83 c4 10             	add    esp,0x10
c00159e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ee:	83 c0 24             	add    eax,0x24
c00159f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f3:	6a 00                	push   0x0
c00159f5:	68 2f 52 01 c0       	push   0xc001522f
c00159fa:	6a 01                	push   0x1
c00159fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159ff:	ff d0                	call   eax
c0015a01:	83 c4 10             	add    esp,0x10
c0015a04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a09:	83 c0 24             	add    eax,0x24
c0015a0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0e:	6a 00                	push   0x0
c0015a10:	68 59 4b 01 c0       	push   0xc0014b59
c0015a15:	6a 02                	push   0x2
c0015a17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a1a:	ff d0                	call   eax
c0015a1c:	83 c4 10             	add    esp,0x10
c0015a1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a24:	83 c0 24             	add    eax,0x24
c0015a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a29:	6a 00                	push   0x0
c0015a2b:	68 2f 52 01 c0       	push   0xc001522f
c0015a30:	6a 03                	push   0x3
c0015a32:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a35:	ff d0                	call   eax
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3f:	83 c0 24             	add    eax,0x24
c0015a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a44:	6a 00                	push   0x0
c0015a46:	68 2f 52 01 c0       	push   0xc001522f
c0015a4b:	6a 04                	push   0x4
c0015a4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a50:	ff d0                	call   eax
c0015a52:	83 c4 10             	add    esp,0x10
c0015a55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5a:	83 c0 24             	add    eax,0x24
c0015a5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5f:	6a 00                	push   0x0
c0015a61:	68 2f 52 01 c0       	push   0xc001522f
c0015a66:	6a 05                	push   0x5
c0015a68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a6b:	ff d0                	call   eax
c0015a6d:	83 c4 10             	add    esp,0x10
c0015a70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a75:	83 c0 24             	add    eax,0x24
c0015a78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7a:	6a 00                	push   0x0
c0015a7c:	68 4e 52 01 c0       	push   0xc001524e
c0015a81:	6a 06                	push   0x6
c0015a83:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a86:	ff d0                	call   eax
c0015a88:	83 c4 10             	add    esp,0x10
c0015a8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a90:	83 c0 24             	add    eax,0x24
c0015a93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a95:	6a 00                	push   0x0
c0015a97:	68 8b 51 01 c0       	push   0xc001518b
c0015a9c:	6a 07                	push   0x7
c0015a9e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa1:	ff d0                	call   eax
c0015aa3:	83 c4 10             	add    esp,0x10
c0015aa6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aab:	83 c0 24             	add    eax,0x24
c0015aae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab0:	6a 00                	push   0x0
c0015ab2:	68 74 49 01 c0       	push   0xc0014974
c0015ab7:	6a 08                	push   0x8
c0015ab9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abc:	ff d0                	call   eax
c0015abe:	83 c4 10             	add    esp,0x10
c0015ac1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac6:	83 c0 24             	add    eax,0x24
c0015ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acb:	6a 00                	push   0x0
c0015acd:	68 2f 52 01 c0       	push   0xc001522f
c0015ad2:	6a 09                	push   0x9
c0015ad4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad7:	ff d0                	call   eax
c0015ad9:	83 c4 10             	add    esp,0x10
c0015adc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015adf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae1:	83 c0 24             	add    eax,0x24
c0015ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae6:	6a 00                	push   0x0
c0015ae8:	68 2f 52 01 c0       	push   0xc001522f
c0015aed:	6a 0a                	push   0xa
c0015aef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af2:	ff d0                	call   eax
c0015af4:	83 c4 10             	add    esp,0x10
c0015af7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015afa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afc:	83 c0 24             	add    eax,0x24
c0015aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b01:	6a 00                	push   0x0
c0015b03:	68 2f 52 01 c0       	push   0xc001522f
c0015b08:	6a 0b                	push   0xb
c0015b0a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0d:	ff d0                	call   eax
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b17:	83 c0 24             	add    eax,0x24
c0015b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1c:	6a 00                	push   0x0
c0015b1e:	68 2f 52 01 c0       	push   0xc001522f
c0015b23:	6a 0c                	push   0xc
c0015b25:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b28:	ff d0                	call   eax
c0015b2a:	83 c4 10             	add    esp,0x10
c0015b2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b32:	83 c0 24             	add    eax,0x24
c0015b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b37:	6a 00                	push   0x0
c0015b39:	68 ba 51 01 c0       	push   0xc00151ba
c0015b3e:	6a 0d                	push   0xd
c0015b40:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b43:	ff d0                	call   eax
c0015b45:	83 c4 10             	add    esp,0x10
c0015b48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4d:	83 c0 24             	add    eax,0x24
c0015b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b52:	6a 00                	push   0x0
c0015b54:	68 f3 51 01 c0       	push   0xc00151f3
c0015b59:	6a 0e                	push   0xe
c0015b5b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5e:	ff d0                	call   eax
c0015b60:	83 c4 10             	add    esp,0x10
c0015b63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b68:	83 c0 24             	add    eax,0x24
c0015b6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6d:	6a 00                	push   0x0
c0015b6f:	68 2f 52 01 c0       	push   0xc001522f
c0015b74:	6a 0f                	push   0xf
c0015b76:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b79:	ff d0                	call   eax
c0015b7b:	83 c4 10             	add    esp,0x10
c0015b7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b83:	83 c0 24             	add    eax,0x24
c0015b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b88:	6a 00                	push   0x0
c0015b8a:	68 2f 52 01 c0       	push   0xc001522f
c0015b8f:	6a 10                	push   0x10
c0015b91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b94:	ff d0                	call   eax
c0015b96:	83 c4 10             	add    esp,0x10
c0015b99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9e:	83 c0 24             	add    eax,0x24
c0015ba1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba3:	6a 00                	push   0x0
c0015ba5:	68 2f 52 01 c0       	push   0xc001522f
c0015baa:	6a 11                	push   0x11
c0015bac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015baf:	ff d0                	call   eax
c0015bb1:	83 c4 10             	add    esp,0x10
c0015bb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb9:	83 c0 24             	add    eax,0x24
c0015bbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbe:	6a 00                	push   0x0
c0015bc0:	68 2f 52 01 c0       	push   0xc001522f
c0015bc5:	6a 12                	push   0x12
c0015bc7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bca:	ff d0                	call   eax
c0015bcc:	83 c4 10             	add    esp,0x10
c0015bcf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd4:	83 c0 24             	add    eax,0x24
c0015bd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd9:	6a 00                	push   0x0
c0015bdb:	68 2f 52 01 c0       	push   0xc001522f
c0015be0:	6a 13                	push   0x13
c0015be2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be5:	ff d0                	call   eax
c0015be7:	83 c4 10             	add    esp,0x10
c0015bea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bed:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bef:	83 c0 24             	add    eax,0x24
c0015bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf4:	6a 00                	push   0x0
c0015bf6:	68 2f 52 01 c0       	push   0xc001522f
c0015bfb:	6a 14                	push   0x14
c0015bfd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c00:	ff d0                	call   eax
c0015c02:	83 c4 10             	add    esp,0x10
c0015c05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0a:	83 c0 24             	add    eax,0x24
c0015c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0f:	6a 00                	push   0x0
c0015c11:	68 2f 52 01 c0       	push   0xc001522f
c0015c16:	6a 1e                	push   0x1e
c0015c18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c1b:	ff d0                	call   eax
c0015c1d:	83 c4 10             	add    esp,0x10
c0015c20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c23:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c25:	83 c0 24             	add    eax,0x24
c0015c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2a:	6a 00                	push   0x0
c0015c2c:	68 b5 c6 01 c0       	push   0xc001c6b5
c0015c31:	6a 60                	push   0x60
c0015c33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c36:	ff d0                	call   eax
c0015c38:	83 c4 10             	add    esp,0x10
c0015c3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c41:	c9                   	leave  
c0015c42:	c3                   	ret    
c0015c43:	90                   	nop

c0015c44 <InterruptController::convertLegacyIRQNumber(int)>:
c0015c44:	55                   	push   ebp
c0015c45:	89 e5                	mov    ebp,esp
c0015c47:	83 ec 08             	sub    esp,0x8
c0015c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c4d:	83 ec 0c             	sub    esp,0xc
c0015c50:	50                   	push   eax
c0015c51:	e8 42 e9 ff ff       	call   c0014598 <Device::getName()>
c0015c56:	83 c4 10             	add    esp,0x10
c0015c59:	8a 00                	mov    al,BYTE PTR [eax]
c0015c5b:	3c 41                	cmp    al,0x41
c0015c5d:	0f 94 c0             	sete   al
c0015c60:	84 c0                	test   al,al
c0015c62:	74 28                	je     c0015c8c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c64:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015c68:	7f 12                	jg     c0015c7c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015c6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c6d:	05 40 d5 02 c0       	add    eax,0xc002d540
c0015c72:	8a 00                	mov    al,BYTE PTR [eax]
c0015c74:	0f b6 c0             	movzx  eax,al
c0015c77:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015c7a:	eb 10                	jmp    c0015c8c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c7c:	83 ec 0c             	sub    esp,0xc
c0015c7f:	68 a0 ac 02 c0       	push   0xc002aca0
c0015c84:	e8 a2 48 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0015c89:	83 c4 10             	add    esp,0x10
c0015c8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c8f:	c9                   	leave  
c0015c90:	c3                   	ret    
c0015c91:	90                   	nop

c0015c92 <startGUI(void*)>:
c0015c92:	55                   	push   ebp
c0015c93:	89 e5                	mov    ebp,esp
c0015c95:	53                   	push   ebx
c0015c96:	83 ec 04             	sub    esp,0x4
c0015c99:	e8 84 80 00 00       	call   c001dd22 <unlockScheduler()>
c0015c9e:	8b 1d e8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2e8
c0015ca4:	83 ec 08             	sub    esp,0x8
c0015ca7:	6a 01                	push   0x1
c0015ca9:	68 f4 af 02 c0       	push   0xc002aff4
c0015cae:	e8 ab 79 00 00       	call   c001d65e <Thr::loadDLL(char const*, bool)>
c0015cb3:	83 c4 10             	add    esp,0x10
c0015cb6:	83 ec 08             	sub    esp,0x8
c0015cb9:	53                   	push   ebx
c0015cba:	50                   	push   eax
c0015cbb:	e8 ed 7b 00 00       	call   c001d8ad <Thr::executeDLL(unsigned long, void*)>
c0015cc0:	83 c4 10             	add    esp,0x10
c0015cc3:	8b 1d e8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2e8
c0015cc9:	83 ec 08             	sub    esp,0x8
c0015ccc:	6a 01                	push   0x1
c0015cce:	68 0e b0 02 c0       	push   0xc002b00e
c0015cd3:	e8 86 79 00 00       	call   c001d65e <Thr::loadDLL(char const*, bool)>
c0015cd8:	83 c4 10             	add    esp,0x10
c0015cdb:	83 ec 08             	sub    esp,0x8
c0015cde:	53                   	push   ebx
c0015cdf:	50                   	push   eax
c0015ce0:	e8 c8 7b 00 00       	call   c001d8ad <Thr::executeDLL(unsigned long, void*)>
c0015ce5:	83 c4 10             	add    esp,0x10
c0015ce8:	90                   	nop
c0015ce9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cec:	c9                   	leave  
c0015ced:	c3                   	ret    

c0015cee <startGUIVESA(void*)>:
c0015cee:	55                   	push   ebp
c0015cef:	89 e5                	mov    ebp,esp
c0015cf1:	53                   	push   ebx
c0015cf2:	83 ec 04             	sub    esp,0x4
c0015cf5:	e8 28 80 00 00       	call   c001dd22 <unlockScheduler()>
c0015cfa:	8b 1d e8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2e8
c0015d00:	83 ec 08             	sub    esp,0x8
c0015d03:	6a 01                	push   0x1
c0015d05:	68 28 b0 02 c0       	push   0xc002b028
c0015d0a:	e8 4f 79 00 00       	call   c001d65e <Thr::loadDLL(char const*, bool)>
c0015d0f:	83 c4 10             	add    esp,0x10
c0015d12:	83 ec 08             	sub    esp,0x8
c0015d15:	53                   	push   ebx
c0015d16:	50                   	push   eax
c0015d17:	e8 91 7b 00 00       	call   c001d8ad <Thr::executeDLL(unsigned long, void*)>
c0015d1c:	83 c4 10             	add    esp,0x10
c0015d1f:	8b 1d e8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2e8
c0015d25:	83 ec 08             	sub    esp,0x8
c0015d28:	6a 01                	push   0x1
c0015d2a:	68 0e b0 02 c0       	push   0xc002b00e
c0015d2f:	e8 2a 79 00 00       	call   c001d65e <Thr::loadDLL(char const*, bool)>
c0015d34:	83 c4 10             	add    esp,0x10
c0015d37:	83 ec 08             	sub    esp,0x8
c0015d3a:	53                   	push   ebx
c0015d3b:	50                   	push   eax
c0015d3c:	e8 6c 7b 00 00       	call   c001d8ad <Thr::executeDLL(unsigned long, void*)>
c0015d41:	83 c4 10             	add    esp,0x10
c0015d44:	90                   	nop
c0015d45:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d48:	c9                   	leave  
c0015d49:	c3                   	ret    

c0015d4a <sendKeyToTerminal(unsigned char)>:
c0015d4a:	55                   	push   ebp
c0015d4b:	89 e5                	mov    ebp,esp
c0015d4d:	83 ec 28             	sub    esp,0x28
c0015d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d53:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015d56:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c0015d5b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015d5f:	83 ec 08             	sub    esp,0x8
c0015d62:	52                   	push   edx
c0015d63:	50                   	push   eax
c0015d64:	e8 a1 b5 ff ff       	call   c001130a <VgaText::receiveKey(unsigned char)>
c0015d69:	83 c4 10             	add    esp,0x10
c0015d6c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015d70:	75 41                	jne    c0015db3 <sendKeyToTerminal(unsigned char)+0x69>
c0015d72:	e8 d0 7f 00 00       	call   c001dd47 <lockStuff()>
c0015d77:	a1 a0 e4 02 c0       	mov    eax,ds:0xc002e4a0
c0015d7c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d7f:	c7 05 a0 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4a0,0x0
c0015d89:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015d8d:	74 1f                	je     c0015dae <sendKeyToTerminal(unsigned char)+0x64>
c0015d8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d92:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015d95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d98:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d9b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d9e:	83 ec 0c             	sub    esp,0xc
c0015da1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015da4:	e8 8f 85 00 00       	call   c001e338 <unblockTask(ThreadControlBlock*)>
c0015da9:	83 c4 10             	add    esp,0x10
c0015dac:	eb db                	jmp    c0015d89 <sendKeyToTerminal(unsigned char)+0x3f>
c0015dae:	e8 2e 83 00 00       	call   c001e0e1 <unlockStuff()>
c0015db3:	90                   	nop
c0015db4:	c9                   	leave  
c0015db5:	c3                   	ret    

c0015db6 <sendKeyboardToken(KeyboardToken)>:
c0015db6:	55                   	push   ebp
c0015db7:	89 e5                	mov    ebp,esp
c0015db9:	83 ec 18             	sub    esp,0x18
c0015dbc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc2:	0f b7 c0             	movzx  eax,ax
c0015dc5:	83 f2 01             	xor    edx,0x1
c0015dc8:	88 90 c0 e4 02 c0    	mov    BYTE PTR [eax-0x3ffd1b40],dl
c0015dce:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0015dd3:	85 c0                	test   eax,eax
c0015dd5:	74 24                	je     c0015dfb <sendKeyboardToken(KeyboardToken)+0x45>
c0015dd7:	8b 0d a8 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e4a8
c0015ddd:	83 ec 04             	sub    esp,0x4
c0015de0:	68 c0 e4 02 c0       	push   0xc002e4c0
c0015de5:	83 ec 08             	sub    esp,0x8
c0015de8:	89 e2                	mov    edx,esp
c0015dea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ded:	89 02                	mov    DWORD PTR [edx],eax
c0015def:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015df2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015df6:	ff d1                	call   ecx
c0015df8:	83 c4 10             	add    esp,0x10
c0015dfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dfe:	66 3d 03 02          	cmp    ax,0x203
c0015e02:	75 07                	jne    c0015e0b <sendKeyboardToken(KeyboardToken)+0x55>
c0015e04:	a0 c0 e5 02 c0       	mov    al,ds:0xc002e5c0
c0015e09:	84 c0                	test   al,al
c0015e0b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015e0f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015e12:	a0 c8 e8 02 c0       	mov    al,ds:0xc002e8c8
c0015e17:	38 c2                	cmp    dl,al
c0015e19:	74 1c                	je     c0015e37 <sendKeyboardToken(KeyboardToken)+0x81>
c0015e1b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015e1e:	a2 c8 e8 02 c0       	mov    ds:0xc002e8c8,al
c0015e23:	a0 c8 e8 02 c0       	mov    al,ds:0xc002e8c8
c0015e28:	0f b6 c0             	movzx  eax,al
c0015e2b:	83 ec 0c             	sub    esp,0xc
c0015e2e:	50                   	push   eax
c0015e2f:	e8 36 a7 ff ff       	call   c001056a <setTerminalScrollLock(bool)>
c0015e34:	83 c4 10             	add    esp,0x10
c0015e37:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015e3a:	84 c0                	test   al,al
c0015e3c:	0f 84 ae 00 00 00    	je     c0015ef0 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015e42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e45:	66 3d 10 03          	cmp    ax,0x310
c0015e49:	75 06                	jne    c0015e51 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015e4b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015e51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e54:	66 3d 11 03          	cmp    ax,0x311
c0015e58:	75 06                	jne    c0015e60 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015e5a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e63:	66 3d 12 03          	cmp    ax,0x312
c0015e67:	75 06                	jne    c0015e6f <sendKeyboardToken(KeyboardToken)+0xb9>
c0015e69:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e72:	66 3d 13 03          	cmp    ax,0x313
c0015e76:	75 06                	jne    c0015e7e <sendKeyboardToken(KeyboardToken)+0xc8>
c0015e78:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015e7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e81:	66 3d 14 03          	cmp    ax,0x314
c0015e85:	75 06                	jne    c0015e8d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015e87:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e90:	66 3d 15 03          	cmp    ax,0x315
c0015e94:	75 06                	jne    c0015e9c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015e96:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9f:	66 3d 16 03          	cmp    ax,0x316
c0015ea3:	75 06                	jne    c0015eab <sendKeyboardToken(KeyboardToken)+0xf5>
c0015ea5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eae:	66 3d 17 03          	cmp    ax,0x317
c0015eb2:	75 06                	jne    c0015eba <sendKeyboardToken(KeyboardToken)+0x104>
c0015eb4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ebd:	66 3d 18 03          	cmp    ax,0x318
c0015ec1:	75 06                	jne    c0015ec9 <sendKeyboardToken(KeyboardToken)+0x113>
c0015ec3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ecc:	66 3d 19 03          	cmp    ax,0x319
c0015ed0:	75 06                	jne    c0015ed8 <sendKeyboardToken(KeyboardToken)+0x122>
c0015ed2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015edb:	66 3d 1a 03          	cmp    ax,0x31a
c0015edf:	0f 85 c9 00 00 00    	jne    c0015fae <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ee5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015eeb:	e9 be 00 00 00       	jmp    c0015fae <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef3:	66 3d 10 03          	cmp    ax,0x310
c0015ef7:	75 0a                	jne    c0015f03 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015ef9:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015eff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f06:	66 3d 11 03          	cmp    ax,0x311
c0015f0a:	75 0a                	jne    c0015f16 <sendKeyboardToken(KeyboardToken)+0x160>
c0015f0c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015f12:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f19:	66 3d 12 03          	cmp    ax,0x312
c0015f1d:	75 0a                	jne    c0015f29 <sendKeyboardToken(KeyboardToken)+0x173>
c0015f1f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015f25:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2c:	66 3d 13 03          	cmp    ax,0x313
c0015f30:	75 0a                	jne    c0015f3c <sendKeyboardToken(KeyboardToken)+0x186>
c0015f32:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015f38:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3f:	66 3d 14 03          	cmp    ax,0x314
c0015f43:	75 0a                	jne    c0015f4f <sendKeyboardToken(KeyboardToken)+0x199>
c0015f45:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015f4b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f52:	66 3d 15 03          	cmp    ax,0x315
c0015f56:	75 0a                	jne    c0015f62 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015f58:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f5e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f65:	66 3d 16 03          	cmp    ax,0x316
c0015f69:	75 0a                	jne    c0015f75 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015f6b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015f71:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f78:	66 3d 17 03          	cmp    ax,0x317
c0015f7c:	75 0a                	jne    c0015f88 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015f7e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015f84:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8b:	66 3d 18 03          	cmp    ax,0x318
c0015f8f:	75 0a                	jne    c0015f9b <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015f91:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015f97:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9e:	66 3d 19 03          	cmp    ax,0x319
c0015fa2:	75 0a                	jne    c0015fae <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fa4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015faa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb1:	66 3d 00 02          	cmp    ax,0x200
c0015fb5:	75 2c                	jne    c0015fe3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015fb7:	a0 c0 e8 02 c0       	mov    al,ds:0xc002e8c0
c0015fbc:	83 f0 01             	xor    eax,0x1
c0015fbf:	84 c0                	test   al,al
c0015fc1:	74 20                	je     c0015fe3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015fc3:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0015fc8:	6a 01                	push   0x1
c0015fca:	6a 00                	push   0x0
c0015fcc:	68 92 5c 01 c0       	push   0xc0015c92
c0015fd1:	50                   	push   eax
c0015fd2:	e8 7b 7e 00 00       	call   c001de52 <Process::createThread(void (*)(void*), void*, int)>
c0015fd7:	83 c4 10             	add    esp,0x10
c0015fda:	c6 05 c0 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e8c0,0x1
c0015fe1:	eb 33                	jmp    c0016016 <sendKeyboardToken(KeyboardToken)+0x260>
c0015fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe6:	66 3d 01 02          	cmp    ax,0x201
c0015fea:	75 2a                	jne    c0016016 <sendKeyboardToken(KeyboardToken)+0x260>
c0015fec:	a0 c0 e8 02 c0       	mov    al,ds:0xc002e8c0
c0015ff1:	83 f0 01             	xor    eax,0x1
c0015ff4:	84 c0                	test   al,al
c0015ff6:	74 1e                	je     c0016016 <sendKeyboardToken(KeyboardToken)+0x260>
c0015ff8:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0015ffd:	6a 01                	push   0x1
c0015fff:	6a 00                	push   0x0
c0016001:	68 ee 5c 01 c0       	push   0xc0015cee
c0016006:	50                   	push   eax
c0016007:	e8 46 7e 00 00       	call   c001de52 <Process::createThread(void (*)(void*), void*, int)>
c001600c:	83 c4 10             	add    esp,0x10
c001600f:	c6 05 c0 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e8c0,0x1
c0016016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016019:	66 3d 1d 03          	cmp    ax,0x31d
c001601d:	75 06                	jne    c0016025 <sendKeyboardToken(KeyboardToken)+0x26f>
c001601f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016028:	66 3d 1c 03          	cmp    ax,0x31c
c001602c:	75 06                	jne    c0016034 <sendKeyboardToken(KeyboardToken)+0x27e>
c001602e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016037:	66 3d 1b 03          	cmp    ax,0x31b
c001603b:	75 06                	jne    c0016043 <sendKeyboardToken(KeyboardToken)+0x28d>
c001603d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016046:	66 3d 1e 03          	cmp    ax,0x31e
c001604a:	75 06                	jne    c0016052 <sendKeyboardToken(KeyboardToken)+0x29c>
c001604c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016055:	66 3d 1f 03          	cmp    ax,0x31f
c0016059:	75 06                	jne    c0016061 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001605b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016064:	66 3d 1a 03          	cmp    ax,0x31a
c0016068:	75 06                	jne    c0016070 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001606a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016070:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016074:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016077:	83 f0 01             	xor    eax,0x1
c001607a:	84 c0                	test   al,al
c001607c:	74 77                	je     c00160f5 <sendKeyboardToken(KeyboardToken)+0x33f>
c001607e:	a0 c1 e5 02 c0       	mov    al,ds:0xc002e5c1
c0016083:	84 c0                	test   al,al
c0016085:	74 41                	je     c00160c8 <sendKeyboardToken(KeyboardToken)+0x312>
c0016087:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001608b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001608f:	74 2b                	je     c00160bc <sendKeyboardToken(KeyboardToken)+0x306>
c0016091:	8b 15 c4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8c4
c0016097:	89 d0                	mov    eax,edx
c0016099:	c1 e0 02             	shl    eax,0x2
c001609c:	01 d0                	add    eax,edx
c001609e:	01 c0                	add    eax,eax
c00160a0:	a3 c4 e8 02 c0       	mov    ds:0xc002e8c4,eax
c00160a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a8:	0f b7 c0             	movzx  eax,ax
c00160ab:	8d 50 d0             	lea    edx,[eax-0x30]
c00160ae:	a1 c4 e8 02 c0       	mov    eax,ds:0xc002e8c4
c00160b3:	01 d0                	add    eax,edx
c00160b5:	a3 c4 e8 02 c0       	mov    ds:0xc002e8c4,eax
c00160ba:	eb 6d                	jmp    c0016129 <sendKeyboardToken(KeyboardToken)+0x373>
c00160bc:	c7 05 c4 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e8c4,0x0
c00160c6:	eb 61                	jmp    c0016129 <sendKeyboardToken(KeyboardToken)+0x373>
c00160c8:	a1 c4 e8 02 c0       	mov    eax,ds:0xc002e8c4
c00160cd:	85 c0                	test   eax,eax
c00160cf:	74 18                	je     c00160e9 <sendKeyboardToken(KeyboardToken)+0x333>
c00160d1:	a1 c4 e8 02 c0       	mov    eax,ds:0xc002e8c4
c00160d6:	0f b6 c0             	movzx  eax,al
c00160d9:	83 ec 0c             	sub    esp,0xc
c00160dc:	50                   	push   eax
c00160dd:	e8 68 fc ff ff       	call   c0015d4a <sendKeyToTerminal(unsigned char)>
c00160e2:	83 c4 10             	add    esp,0x10
c00160e5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160e9:	c7 05 c4 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e8c4,0x0
c00160f3:	eb 34                	jmp    c0016129 <sendKeyboardToken(KeyboardToken)+0x373>
c00160f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f8:	66 3d 01 01          	cmp    ax,0x101
c00160fc:	75 2b                	jne    c0016129 <sendKeyboardToken(KeyboardToken)+0x373>
c00160fe:	a1 c4 e8 02 c0       	mov    eax,ds:0xc002e8c4
c0016103:	85 c0                	test   eax,eax
c0016105:	74 18                	je     c001611f <sendKeyboardToken(KeyboardToken)+0x369>
c0016107:	a1 c4 e8 02 c0       	mov    eax,ds:0xc002e8c4
c001610c:	0f b6 c0             	movzx  eax,al
c001610f:	83 ec 0c             	sub    esp,0xc
c0016112:	50                   	push   eax
c0016113:	e8 32 fc ff ff       	call   c0015d4a <sendKeyToTerminal(unsigned char)>
c0016118:	83 c4 10             	add    esp,0x10
c001611b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001611f:	c7 05 c4 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e8c4,0x0
c0016129:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001612c:	83 f0 01             	xor    eax,0x1
c001612f:	84 c0                	test   al,al
c0016131:	74 4c                	je     c001617f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016133:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016136:	83 f0 01             	xor    eax,0x1
c0016139:	84 c0                	test   al,al
c001613b:	74 42                	je     c001617f <sendKeyboardToken(KeyboardToken)+0x3c9>
c001613d:	a0 c0 e5 02 c0       	mov    al,ds:0xc002e5c0
c0016142:	83 f0 01             	xor    eax,0x1
c0016145:	84 c0                	test   al,al
c0016147:	74 36                	je     c001617f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614c:	66 83 f8 1f          	cmp    ax,0x1f
c0016150:	76 09                	jbe    c001615b <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016155:	66 83 f8 7e          	cmp    ax,0x7e
c0016159:	76 12                	jbe    c001616d <sendKeyboardToken(KeyboardToken)+0x3b7>
c001615b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001615e:	66 83 f8 0a          	cmp    ax,0xa
c0016162:	74 09                	je     c001616d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016167:	66 83 f8 08          	cmp    ax,0x8
c001616b:	75 12                	jne    c001617f <sendKeyboardToken(KeyboardToken)+0x3c9>
c001616d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016170:	0f b6 c0             	movzx  eax,al
c0016173:	83 ec 0c             	sub    esp,0xc
c0016176:	50                   	push   eax
c0016177:	e8 ce fb ff ff       	call   c0015d4a <sendKeyToTerminal(unsigned char)>
c001617c:	83 c4 10             	add    esp,0x10
c001617f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016182:	83 f0 01             	xor    eax,0x1
c0016185:	84 c0                	test   al,al
c0016187:	74 4f                	je     c00161d8 <sendKeyboardToken(KeyboardToken)+0x422>
c0016189:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001618c:	83 f0 01             	xor    eax,0x1
c001618f:	84 c0                	test   al,al
c0016191:	74 45                	je     c00161d8 <sendKeyboardToken(KeyboardToken)+0x422>
c0016193:	a0 c0 e5 02 c0       	mov    al,ds:0xc002e5c0
c0016198:	84 c0                	test   al,al
c001619a:	74 3c                	je     c00161d8 <sendKeyboardToken(KeyboardToken)+0x422>
c001619c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619f:	66 83 f8 3f          	cmp    ax,0x3f
c00161a3:	76 33                	jbe    c00161d8 <sendKeyboardToken(KeyboardToken)+0x422>
c00161a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a8:	66 83 f8 7f          	cmp    ax,0x7f
c00161ac:	77 2a                	ja     c00161d8 <sendKeyboardToken(KeyboardToken)+0x422>
c00161ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b1:	88 c2                	mov    dl,al
c00161b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b6:	66 83 f8 5f          	cmp    ax,0x5f
c00161ba:	76 04                	jbe    c00161c0 <sendKeyboardToken(KeyboardToken)+0x40a>
c00161bc:	b0 20                	mov    al,0x20
c00161be:	eb 02                	jmp    c00161c2 <sendKeyboardToken(KeyboardToken)+0x40c>
c00161c0:	b0 00                	mov    al,0x0
c00161c2:	29 c2                	sub    edx,eax
c00161c4:	88 d0                	mov    al,dl
c00161c6:	83 e8 40             	sub    eax,0x40
c00161c9:	0f b6 c0             	movzx  eax,al
c00161cc:	83 ec 0c             	sub    esp,0xc
c00161cf:	50                   	push   eax
c00161d0:	e8 75 fb ff ff       	call   c0015d4a <sendKeyToTerminal(unsigned char)>
c00161d5:	83 c4 10             	add    esp,0x10
c00161d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161db:	66 3d 00 03          	cmp    ax,0x300
c00161df:	75 0f                	jne    c00161f0 <sendKeyboardToken(KeyboardToken)+0x43a>
c00161e1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161e4:	83 f0 01             	xor    eax,0x1
c00161e7:	84 c0                	test   al,al
c00161e9:	74 05                	je     c00161f0 <sendKeyboardToken(KeyboardToken)+0x43a>
c00161eb:	e8 af ab ff ff       	call   c0010d9f <doTerminalCycle()>
c00161f0:	90                   	nop
c00161f1:	c9                   	leave  
c00161f2:	c3                   	ret    

c00161f3 <clearInternalKeybuffer(VgaText*)>:
c00161f3:	55                   	push   ebp
c00161f4:	89 e5                	mov    ebp,esp
c00161f6:	83 ec 08             	sub    esp,0x8
c00161f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161fc:	05 34 11 00 00       	add    eax,0x1134
c0016201:	83 ec 0c             	sub    esp,0xc
c0016204:	50                   	push   eax
c0016205:	e8 8a a5 fe ff       	call   c0000794 <strlen>
c001620a:	83 c4 10             	add    esp,0x10
c001620d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016210:	81 c2 34 11 00 00    	add    edx,0x1134
c0016216:	83 ec 04             	sub    esp,0x4
c0016219:	50                   	push   eax
c001621a:	6a 00                	push   0x0
c001621c:	52                   	push   edx
c001621d:	e8 56 a5 fe ff       	call   c0000778 <memset>
c0016222:	83 c4 10             	add    esp,0x10
c0016225:	90                   	nop
c0016226:	c9                   	leave  
c0016227:	c3                   	ret    

c0016228 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016228:	55                   	push   ebp
c0016229:	89 e5                	mov    ebp,esp
c001622b:	83 ec 18             	sub    esp,0x18
c001622e:	fb                   	sti    
c001622f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016236:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001623a:	0f 84 8a 00 00 00    	je     c00162ca <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016243:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016249:	84 c0                	test   al,al
c001624b:	75 11                	jne    c001625e <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001624d:	e8 ce 7a 00 00       	call   c001dd20 <lockScheduler()>
c0016252:	e8 05 7e 00 00       	call   c001e05c <schedule()>
c0016257:	e8 c6 7a 00 00       	call   c001dd22 <unlockScheduler()>
c001625c:	eb e2                	jmp    c0016240 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001625e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016261:	8d 50 01             	lea    edx,[eax+0x1]
c0016264:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016267:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001626a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016270:	88 10                	mov    BYTE PTR [eax],dl
c0016272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016275:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001627b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001627e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016281:	05 34 11 00 00       	add    eax,0x1134
c0016286:	83 ec 0c             	sub    esp,0xc
c0016289:	50                   	push   eax
c001628a:	e8 05 a5 fe ff       	call   c0000794 <strlen>
c001628f:	83 c4 10             	add    esp,0x10
c0016292:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016295:	81 c2 34 11 00 00    	add    edx,0x1134
c001629b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001629e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162a1:	81 c2 34 11 00 00    	add    edx,0x1134
c00162a7:	83 ec 04             	sub    esp,0x4
c00162aa:	50                   	push   eax
c00162ab:	51                   	push   ecx
c00162ac:	52                   	push   edx
c00162ad:	e8 ca a3 fe ff       	call   c000067c <memmove>
c00162b2:	83 c4 10             	add    esp,0x10
c00162b5:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00162b8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00162bb:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00162bf:	0f 85 71 ff ff ff    	jne    c0016236 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00162c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00162c8:	eb 03                	jmp    c00162cd <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00162ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00162cd:	c9                   	leave  
c00162ce:	c3                   	ret    
c00162cf:	90                   	nop

c00162d0 <Keyboard::Keyboard(char const*)>:
c00162d0:	83 ec 0c             	sub    esp,0xc
c00162d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162d7:	83 ec 08             	sub    esp,0x8
c00162da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162de:	50                   	push   eax
c00162df:	e8 b8 e1 ff ff       	call   c001449c <Device::Device(char const*)>
c00162e4:	83 c4 10             	add    esp,0x10
c00162e7:	ba 4c b0 02 c0       	mov    edx,0xc002b04c
c00162ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162f0:	89 10                	mov    DWORD PTR [eax],edx
c00162f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162f6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016300:	c6 05 a4 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4a4,0x1
c0016307:	90                   	nop
c0016308:	83 c4 0c             	add    esp,0xc
c001630b:	c3                   	ret    

c001630c <Keyboard::~Keyboard()>:
c001630c:	83 ec 0c             	sub    esp,0xc
c001630f:	ba 4c b0 02 c0       	mov    edx,0xc002b04c
c0016314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016318:	89 10                	mov    DWORD PTR [eax],edx
c001631a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001631e:	83 ec 0c             	sub    esp,0xc
c0016321:	50                   	push   eax
c0016322:	e8 57 de ff ff       	call   c001417e <Device::~Device()>
c0016327:	83 c4 10             	add    esp,0x10
c001632a:	90                   	nop
c001632b:	83 c4 0c             	add    esp,0xc
c001632e:	c3                   	ret    
c001632f:	90                   	nop

c0016330 <Keyboard::~Keyboard()>:
c0016330:	83 ec 0c             	sub    esp,0xc
c0016333:	83 ec 0c             	sub    esp,0xc
c0016336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001633a:	e8 cd ff ff ff       	call   c001630c <Keyboard::~Keyboard()>
c001633f:	83 c4 10             	add    esp,0x10
c0016342:	83 ec 08             	sub    esp,0x8
c0016345:	68 5c 01 00 00       	push   0x15c
c001634a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001634e:	e8 53 ca ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0016353:	83 c4 10             	add    esp,0x10
c0016356:	83 c4 0c             	add    esp,0xc
c0016359:	c3                   	ret    

c001635a <LogicalDisk::close(int, int, void*)>:
c001635a:	83 c8 ff             	or     eax,0xffffffff
c001635d:	c3                   	ret    

c001635e <LogicalDisk::~LogicalDisk()>:
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	ba fc b0 02 c0       	mov    edx,0xc002b0fc
c0016366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001636a:	89 10                	mov    DWORD PTR [eax],edx
c001636c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016370:	83 ec 0c             	sub    esp,0xc
c0016373:	50                   	push   eax
c0016374:	e8 05 de ff ff       	call   c001417e <Device::~Device()>
c0016379:	83 c4 10             	add    esp,0x10
c001637c:	90                   	nop
c001637d:	83 c4 0c             	add    esp,0xc
c0016380:	c3                   	ret    
c0016381:	90                   	nop

c0016382 <LogicalDisk::~LogicalDisk()>:
c0016382:	83 ec 0c             	sub    esp,0xc
c0016385:	83 ec 0c             	sub    esp,0xc
c0016388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001638c:	e8 cd ff ff ff       	call   c001635e <LogicalDisk::~LogicalDisk()>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	83 ec 08             	sub    esp,0x8
c0016397:	68 74 01 00 00       	push   0x174
c001639c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a0:	e8 01 ca ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c00163a5:	83 c4 10             	add    esp,0x10
c00163a8:	83 c4 0c             	add    esp,0xc
c00163ab:	c3                   	ret    

c00163ac <LogicalDisk::open(int, int, void*)>:
c00163ac:	83 ec 18             	sub    esp,0x18
c00163af:	68 78 b0 02 c0       	push   0xc002b078
c00163b4:	e8 72 41 00 00       	call   c001a52b <Krnl::panic(char const*)>
c00163b9:	83 c8 ff             	or     eax,0xffffffff
c00163bc:	83 c4 1c             	add    esp,0x1c
c00163bf:	c3                   	ret    

c00163c0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00163c0:	53                   	push   ebx
c00163c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00163c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163cd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00163d3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00163d9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00163df:	77 10                	ja     c00163f1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00163e1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00163e7:	89 d3                	mov    ebx,edx
c00163e9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00163ef:	72 05                	jb     c00163f6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00163f1:	83 c8 ff             	or     eax,0xffffffff
c00163f4:	89 c2                	mov    edx,eax
c00163f6:	5b                   	pop    ebx
c00163f7:	c3                   	ret    

c00163f8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00163f8:	56                   	push   esi
c00163f9:	83 c8 ff             	or     eax,0xffffffff
c00163fc:	53                   	push   ebx
c00163fd:	89 c2                	mov    edx,eax
c00163ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016403:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016407:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001640b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016411:	77 27                	ja     c001643a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016413:	89 d8                	mov    eax,ebx
c0016415:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001641b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016421:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016426:	89 c2                	mov    edx,eax
c0016428:	73 10                	jae    c001643a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001642a:	89 c8                	mov    eax,ecx
c001642c:	89 da                	mov    edx,ebx
c001642e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016434:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001643a:	5b                   	pop    ebx
c001643b:	5e                   	pop    esi
c001643c:	c3                   	ret    
c001643d:	90                   	nop

c001643e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001643e:	83 ec 1c             	sub    esp,0x1c
c0016441:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016445:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016449:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001644d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016451:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016455:	89 04 24             	mov    DWORD PTR [esp],eax
c0016458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001645c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016464:	83 ec 08             	sub    esp,0x8
c0016467:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001646b:	50                   	push   eax
c001646c:	e8 2b e0 ff ff       	call   c001449c <Device::Device(char const*)>
c0016471:	83 c4 10             	add    esp,0x10
c0016474:	ba fc b0 02 c0       	mov    edx,0xc002b0fc
c0016479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001647d:	89 10                	mov    DWORD PTR [eax],edx
c001647f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016483:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001648a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001648e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016499:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00164a3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164af:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00164b5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00164bb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00164c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00164c6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00164cc:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00164d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164da:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00164e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164e4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00164ee:	90                   	nop
c00164ef:	83 c4 1c             	add    esp,0x1c
c00164f2:	c3                   	ret    
c00164f3:	90                   	nop

c00164f4 <LogicalDisk::assignDriveLetter()>:
c00164f4:	55                   	push   ebp
c00164f5:	57                   	push   edi
c00164f6:	56                   	push   esi
c00164f7:	53                   	push   ebx
c00164f8:	83 ec 14             	sub    esp,0x14
c00164fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164ff:	8b 3d e0 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e8e0
c0016505:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001650b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001650f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016515:	8b 3d e4 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e8e4
c001651b:	3c 01                	cmp    al,0x1
c001651d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016521:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016525:	19 c0                	sbb    eax,eax
c0016527:	83 e0 02             	and    eax,0x2
c001652a:	83 c0 41             	add    eax,0x41
c001652d:	0f be e8             	movsx  ebp,al
c0016530:	3c 43                	cmp    al,0x43
c0016532:	75 10                	jne    c0016544 <LogicalDisk::assignDriveLetter()+0x50>
c0016534:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001653b:	75 5d                	jne    c001659a <LogicalDisk::assignDriveLetter()+0xa6>
c001653d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016542:	75 56                	jne    c001659a <LogicalDisk::assignDriveLetter()+0xa6>
c0016544:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016547:	ba 01 00 00 00       	mov    edx,0x1
c001654c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016550:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016554:	d3 e2                	shl    edx,cl
c0016556:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001655a:	89 d7                	mov    edi,edx
c001655c:	89 d6                	mov    esi,edx
c001655e:	c1 ff 1f             	sar    edi,0x1f
c0016561:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016565:	21 f9                	and    ecx,edi
c0016567:	09 d1                	or     ecx,edx
c0016569:	75 2f                	jne    c001659a <LogicalDisk::assignDriveLetter()+0xa6>
c001656b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001656f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016573:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016579:	09 f2                	or     edx,esi
c001657b:	89 15 e0 e8 02 c0    	mov    DWORD PTR ds:0xc002e8e0,edx
c0016581:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016585:	09 fa                	or     edx,edi
c0016587:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001658b:	89 15 e4 e8 02 c0    	mov    DWORD PTR ds:0xc002e8e4,edx
c0016591:	89 1c bd 00 e9 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1700],ebx
c0016598:	eb 08                	jmp    c00165a2 <LogicalDisk::assignDriveLetter()+0xae>
c001659a:	45                   	inc    ebp
c001659b:	40                   	inc    eax
c001659c:	3c 5b                	cmp    al,0x5b
c001659e:	75 90                	jne    c0016530 <LogicalDisk::assignDriveLetter()+0x3c>
c00165a0:	31 c0                	xor    eax,eax
c00165a2:	83 c4 14             	add    esp,0x14
c00165a5:	5b                   	pop    ebx
c00165a6:	5e                   	pop    esi
c00165a7:	5f                   	pop    edi
c00165a8:	5d                   	pop    ebp
c00165a9:	c3                   	ret    

c00165aa <LogicalDisk::mount()>:
c00165aa:	56                   	push   esi
c00165ab:	53                   	push   ebx
c00165ac:	51                   	push   ecx
c00165ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165b1:	8b 1d 70 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e470
c00165b7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00165c1:	85 db                	test   ebx,ebx
c00165c3:	74 50                	je     c0016615 <LogicalDisk::mount()+0x6b>
c00165c5:	e8 41 77 00 00       	call   c001dd0b <getIRQNestingLevel()>
c00165ca:	52                   	push   edx
c00165cb:	52                   	push   edx
c00165cc:	50                   	push   eax
c00165cd:	68 9c b0 02 c0       	push   0xc002b09c
c00165d2:	e8 af c8 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00165d7:	83 c4 0c             	add    esp,0xc
c00165da:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00165e1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00165e3:	83 e8 41             	sub    eax,0x41
c00165e6:	50                   	push   eax
c00165e7:	56                   	push   esi
c00165e8:	53                   	push   ebx
c00165e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00165ec:	83 c4 10             	add    esp,0x10
c00165ef:	84 c0                	test   al,al
c00165f1:	74 08                	je     c00165fb <LogicalDisk::mount()+0x51>
c00165f3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00165f9:	eb 1c                	jmp    c0016617 <LogicalDisk::mount()+0x6d>
c00165fb:	e8 0b 77 00 00       	call   c001dd0b <getIRQNestingLevel()>
c0016600:	51                   	push   ecx
c0016601:	51                   	push   ecx
c0016602:	50                   	push   eax
c0016603:	68 b7 b0 02 c0       	push   0xc002b0b7
c0016608:	e8 79 c8 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001660d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016610:	83 c4 10             	add    esp,0x10
c0016613:	eb ac                	jmp    c00165c1 <LogicalDisk::mount()+0x17>
c0016615:	31 c0                	xor    eax,eax
c0016617:	5a                   	pop    edx
c0016618:	5b                   	pop    ebx
c0016619:	5e                   	pop    esi
c001661a:	c3                   	ret    
c001661b:	90                   	nop

c001661c <LogicalDisk::unmount()>:
c001661c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016620:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001662a:	c3                   	ret    
c001662b:	90                   	nop

c001662c <LogicalDisk::eject()>:
c001662c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016630:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016636:	8b 10                	mov    edx,DWORD PTR [eax]
c0016638:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001663c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001663f:	90                   	nop

c0016640 <LogicalDisk::unassignDriveLetter()>:
c0016640:	57                   	push   edi
c0016641:	56                   	push   esi
c0016642:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016646:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001664d:	84 c9                	test   cl,cl
c001664f:	75 0f                	jne    c0016660 <LogicalDisk::unassignDriveLetter()+0x20>
c0016651:	c7 44 24 0c d2 b0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b0d2
c0016659:	5e                   	pop    esi
c001665a:	5f                   	pop    edi
c001665b:	e9 cb 3e 00 00       	jmp    c001a52b <Krnl::panic(char const*)>
c0016660:	83 e9 41             	sub    ecx,0x41
c0016663:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001666a:	b8 01 00 00 00       	mov    eax,0x1
c001666f:	c7 04 8d 00 e9 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1700],0x0
c001667a:	d3 e0                	shl    eax,cl
c001667c:	89 c7                	mov    edi,eax
c001667e:	f7 d0                	not    eax
c0016680:	c1 ff 1f             	sar    edi,0x1f
c0016683:	21 05 e0 e8 02 c0    	and    DWORD PTR ds:0xc002e8e0,eax
c0016689:	89 fe                	mov    esi,edi
c001668b:	f7 d6                	not    esi
c001668d:	21 35 e4 e8 02 c0    	and    DWORD PTR ds:0xc002e8e4,esi
c0016693:	5e                   	pop    esi
c0016694:	5f                   	pop    edi
c0016695:	c3                   	ret    

c0016696 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016696:	57                   	push   edi
c0016697:	56                   	push   esi
c0016698:	53                   	push   ebx
c0016699:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001669d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166a1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00166a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166a9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00166af:	77 41                	ja     c00166f2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00166b1:	99                   	cdq    
c00166b2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00166b8:	01 c8                	add    eax,ecx
c00166ba:	11 da                	adc    edx,ebx
c00166bc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00166c2:	19 d7                	sbb    edi,edx
c00166c4:	72 33                	jb     c00166f9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00166c6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00166cc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00166d2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00166d6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00166da:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00166e0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00166e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166ea:	5b                   	pop    ebx
c00166eb:	5e                   	pop    esi
c00166ec:	5f                   	pop    edi
c00166ed:	e9 b0 0a 00 00       	jmp    c00171a2 <VCache::read(unsigned long long, int, void*)>
c00166f2:	b8 05 00 00 00       	mov    eax,0x5
c00166f7:	eb 05                	jmp    c00166fe <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00166f9:	b8 07 00 00 00       	mov    eax,0x7
c00166fe:	5b                   	pop    ebx
c00166ff:	5e                   	pop    esi
c0016700:	5f                   	pop    edi
c0016701:	c3                   	ret    

c0016702 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016702:	57                   	push   edi
c0016703:	56                   	push   esi
c0016704:	53                   	push   ebx
c0016705:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016709:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001670d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016715:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001671b:	77 41                	ja     c001675e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001671d:	99                   	cdq    
c001671e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016724:	01 c8                	add    eax,ecx
c0016726:	11 da                	adc    edx,ebx
c0016728:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001672e:	19 d7                	sbb    edi,edx
c0016730:	72 33                	jb     c0016765 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016732:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016738:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001673e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016742:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016746:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001674c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016752:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016756:	5b                   	pop    ebx
c0016757:	5e                   	pop    esi
c0016758:	5f                   	pop    edi
c0016759:	e9 4e 09 00 00       	jmp    c00170ac <VCache::write(unsigned long long, int, void*)>
c001675e:	b8 05 00 00 00       	mov    eax,0x5
c0016763:	eb 05                	jmp    c001676a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016765:	b8 07 00 00 00       	mov    eax,0x7
c001676a:	5b                   	pop    ebx
c001676b:	5e                   	pop    esi
c001676c:	5f                   	pop    edi
c001676d:	c3                   	ret    

c001676e <Mouse::Mouse(char const*)>:
c001676e:	83 ec 0c             	sub    esp,0xc
c0016771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016775:	83 ec 08             	sub    esp,0x8
c0016778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001677c:	50                   	push   eax
c001677d:	e8 1a dd ff ff       	call   c001449c <Device::Device(char const*)>
c0016782:	83 c4 10             	add    esp,0x10
c0016785:	ba 28 b1 02 c0       	mov    edx,0xc002b128
c001678a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001678e:	89 10                	mov    DWORD PTR [eax],edx
c0016790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016794:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001679e:	90                   	nop
c001679f:	83 c4 0c             	add    esp,0xc
c00167a2:	c3                   	ret    
c00167a3:	90                   	nop

c00167a4 <Mouse::~Mouse()>:
c00167a4:	83 ec 0c             	sub    esp,0xc
c00167a7:	ba 28 b1 02 c0       	mov    edx,0xc002b128
c00167ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b0:	89 10                	mov    DWORD PTR [eax],edx
c00167b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b6:	83 ec 0c             	sub    esp,0xc
c00167b9:	50                   	push   eax
c00167ba:	e8 bf d9 ff ff       	call   c001417e <Device::~Device()>
c00167bf:	83 c4 10             	add    esp,0x10
c00167c2:	90                   	nop
c00167c3:	83 c4 0c             	add    esp,0xc
c00167c6:	c3                   	ret    
c00167c7:	90                   	nop

c00167c8 <Mouse::~Mouse()>:
c00167c8:	83 ec 0c             	sub    esp,0xc
c00167cb:	83 ec 0c             	sub    esp,0xc
c00167ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167d2:	e8 cd ff ff ff       	call   c00167a4 <Mouse::~Mouse()>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	83 ec 08             	sub    esp,0x8
c00167dd:	68 58 01 00 00       	push   0x158
c00167e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167e6:	e8 bb c5 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c00167eb:	83 c4 10             	add    esp,0x10
c00167ee:	83 c4 0c             	add    esp,0xc
c00167f1:	c3                   	ret    

c00167f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00167f2:	55                   	push   ebp
c00167f3:	57                   	push   edi
c00167f4:	56                   	push   esi
c00167f5:	53                   	push   ebx
c00167f6:	81 ec 28 01 00 00    	sub    esp,0x128
c00167fc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016803:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001680a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016811:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016818:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001681c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016820:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016827:	e8 6c dd ff ff       	call   c0014598 <Device::getName()>
c001682c:	5a                   	pop    edx
c001682d:	59                   	pop    ecx
c001682e:	50                   	push   eax
c001682f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016833:	55                   	push   ebp
c0016834:	e8 fb 9f fe ff       	call   c0000834 <strcpy>
c0016839:	5b                   	pop    ebx
c001683a:	58                   	pop    eax
c001683b:	68 4c b1 02 c0       	push   0xc002b14c
c0016840:	55                   	push   ebp
c0016841:	e8 2e a1 fe ff       	call   c0000974 <strcat>
c0016846:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001684d:	e8 ee 8f ff ff       	call   c000f840 <malloc>
c0016852:	83 c4 0c             	add    esp,0xc
c0016855:	89 c3                	mov    ebx,eax
c0016857:	57                   	push   edi
c0016858:	56                   	push   esi
c0016859:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001685d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016861:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016868:	55                   	push   ebp
c0016869:	50                   	push   eax
c001686a:	e8 cf fb ff ff       	call   c001643e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001686f:	83 c4 14             	add    esp,0x14
c0016872:	53                   	push   ebx
c0016873:	e8 7c fc ff ff       	call   c00164f4 <LogicalDisk::assignDriveLetter()>
c0016878:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001687b:	89 c6                	mov    esi,eax
c001687d:	e8 28 fd ff ff       	call   c00165aa <LogicalDisk::mount()>
c0016882:	58                   	pop    eax
c0016883:	5a                   	pop    edx
c0016884:	53                   	push   ebx
c0016885:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001688c:	e8 1b da ff ff       	call   c00142ac <Device::addChild(Device*)>
c0016891:	59                   	pop    ecx
c0016892:	89 f0                	mov    eax,esi
c0016894:	5b                   	pop    ebx
c0016895:	0f be f0             	movsx  esi,al
c0016898:	56                   	push   esi
c0016899:	68 57 b1 02 c0       	push   0xc002b157
c001689e:	e8 e3 c5 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00168a3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00168a9:	5b                   	pop    ebx
c00168aa:	5e                   	pop    esi
c00168ab:	5f                   	pop    edi
c00168ac:	5d                   	pop    ebp
c00168ad:	c3                   	ret    

c00168ae <createPartitionsForDisk(PhysicalDisk*)>:
c00168ae:	55                   	push   ebp
c00168af:	57                   	push   edi
c00168b0:	56                   	push   esi
c00168b1:	53                   	push   ebx
c00168b2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00168b8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00168bf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00168c5:	3d 00 02 00 00       	cmp    eax,0x200
c00168ca:	74 27                	je     c00168f3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00168cc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00168d2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00168d8:	83 ec 10             	sub    esp,0x10
c00168db:	0f a4 f7 0a          	shld   edi,esi,0xa
c00168df:	99                   	cdq    
c00168e0:	c1 e6 0a             	shl    esi,0xa
c00168e3:	52                   	push   edx
c00168e4:	89 fd                	mov    ebp,edi
c00168e6:	50                   	push   eax
c00168e7:	55                   	push   ebp
c00168e8:	56                   	push   esi
c00168e9:	e8 0e 00 01 00       	call   c00268fc <__udivdi3>
c00168ee:	e9 b1 00 00 00       	jmp    c00169a4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00168f3:	83 ec 0c             	sub    esp,0xc
c00168f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168f8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00168fc:	56                   	push   esi
c00168fd:	6a 01                	push   0x1
c00168ff:	6a 00                	push   0x0
c0016901:	6a 00                	push   0x0
c0016903:	53                   	push   ebx
c0016904:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016907:	83 c4 20             	add    esp,0x20
c001690a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016912:	75 0a                	jne    c001691e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016914:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001691c:	74 2c                	je     c001694a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001691e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016924:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001692a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016930:	83 ec 10             	sub    esp,0x10
c0016933:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016937:	89 f7                	mov    edi,esi
c0016939:	c1 e0 0a             	shl    eax,0xa
c001693c:	c1 ff 1f             	sar    edi,0x1f
c001693f:	57                   	push   edi
c0016940:	56                   	push   esi
c0016941:	52                   	push   edx
c0016942:	50                   	push   eax
c0016943:	e8 b4 ff 00 00       	call   c00268fc <__udivdi3>
c0016948:	eb 5a                	jmp    c00169a4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001694a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016951:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016958:	83 e1 7f             	and    ecx,0x7f
c001695b:	83 e0 7f             	and    eax,0x7f
c001695e:	01 c1                	add    ecx,eax
c0016960:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016967:	83 e0 7f             	and    eax,0x7f
c001696a:	01 c1                	add    ecx,eax
c001696c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016973:	83 e0 7f             	and    eax,0x7f
c0016976:	00 c1                	add    cl,al
c0016978:	74 41                	je     c00169bb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001697a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016980:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016986:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001698c:	83 ec 10             	sub    esp,0x10
c001698f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016993:	89 f7                	mov    edi,esi
c0016995:	c1 e0 0a             	shl    eax,0xa
c0016998:	c1 ff 1f             	sar    edi,0x1f
c001699b:	57                   	push   edi
c001699c:	56                   	push   esi
c001699d:	52                   	push   edx
c001699e:	50                   	push   eax
c001699f:	e8 58 ff 00 00       	call   c00268fc <__udivdi3>
c00169a4:	83 c4 14             	add    esp,0x14
c00169a7:	52                   	push   edx
c00169a8:	50                   	push   eax
c00169a9:	6a 00                	push   0x0
c00169ab:	6a 00                	push   0x0
c00169ad:	53                   	push   ebx
c00169ae:	e8 3f fe ff ff       	call   c00167f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00169b3:	83 c4 20             	add    esp,0x20
c00169b6:	e9 79 01 00 00       	jmp    c0016b34 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00169bb:	89 f0                	mov    eax,esi
c00169bd:	31 f6                	xor    esi,esi
c00169bf:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00169c6:	75 02                	jne    c00169ca <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00169c8:	89 f1                	mov    ecx,esi
c00169ca:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00169d1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00169d8:	c1 e2 08             	shl    edx,0x8
c00169db:	c1 e7 10             	shl    edi,0x10
c00169de:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00169e6:	09 fa                	or     edx,edi
c00169e8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00169f0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00169f7:	83 c0 10             	add    eax,0x10
c00169fa:	09 fa                	or     edx,edi
c00169fc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016a03:	c1 e7 18             	shl    edi,0x18
c0016a06:	09 fa                	or     edx,edi
c0016a08:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016a0f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016a13:	c1 e7 10             	shl    edi,0x10
c0016a16:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016a1d:	c1 e2 08             	shl    edx,0x8
c0016a20:	09 fa                	or     edx,edi
c0016a22:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016a29:	09 fa                	or     edx,edi
c0016a2b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016a32:	c1 e7 18             	shl    edi,0x18
c0016a35:	09 fa                	or     edx,edi
c0016a37:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016a3b:	46                   	inc    esi
c0016a3c:	83 fe 04             	cmp    esi,0x4
c0016a3f:	0f 85 7a ff ff ff    	jne    c00169bf <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a49:	83 f0 01             	xor    eax,0x1
c0016a4c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016a50:	75 57                	jne    c0016aa9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016a52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a56:	83 f0 01             	xor    eax,0x1
c0016a59:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016a5d:	75 4a                	jne    c0016aa9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016a5f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016a63:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016a6b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016a73:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a79:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a7f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a85:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a89:	89 f7                	mov    edi,esi
c0016a8b:	c1 e0 0a             	shl    eax,0xa
c0016a8e:	c1 ff 1f             	sar    edi,0x1f
c0016a91:	57                   	push   edi
c0016a92:	56                   	push   esi
c0016a93:	52                   	push   edx
c0016a94:	50                   	push   eax
c0016a95:	e8 62 fe 00 00       	call   c00268fc <__udivdi3>
c0016a9a:	83 c4 10             	add    esp,0x10
c0016a9d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016aa1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016aa5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016aa9:	84 c9                	test   cl,cl
c0016aab:	74 53                	je     c0016b00 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016aad:	0f b6 c9             	movzx  ecx,cl
c0016ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ab4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ab8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016abc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016ac0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ac4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016ac8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016acc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016ad0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ad4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ae0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016ae4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016ae8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016aec:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016af0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016af4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016af8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016afc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016b00:	31 ed                	xor    ebp,ebp
c0016b02:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016b06:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016b0a:	89 f8                	mov    eax,edi
c0016b0c:	09 f0                	or     eax,esi
c0016b0e:	74 1e                	je     c0016b2e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b10:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016b14:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016b18:	89 d1                	mov    ecx,edx
c0016b1a:	09 c1                	or     ecx,eax
c0016b1c:	74 10                	je     c0016b2e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b1e:	83 ec 0c             	sub    esp,0xc
c0016b21:	57                   	push   edi
c0016b22:	56                   	push   esi
c0016b23:	52                   	push   edx
c0016b24:	50                   	push   eax
c0016b25:	53                   	push   ebx
c0016b26:	e8 c7 fc ff ff       	call   c00167f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b2b:	83 c4 20             	add    esp,0x20
c0016b2e:	45                   	inc    ebp
c0016b2f:	83 fd 04             	cmp    ebp,0x4
c0016b32:	75 ce                	jne    c0016b02 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016b34:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016b3a:	5b                   	pop    ebx
c0016b3b:	5e                   	pop    esi
c0016b3c:	5f                   	pop    edi
c0016b3d:	5d                   	pop    ebp
c0016b3e:	c3                   	ret    
c0016b3f:	90                   	nop

c0016b40 <Serial::Serial(char const*)>:
c0016b40:	83 ec 0c             	sub    esp,0xc
c0016b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b47:	83 ec 08             	sub    esp,0x8
c0016b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b4e:	50                   	push   eax
c0016b4f:	e8 48 d9 ff ff       	call   c001449c <Device::Device(char const*)>
c0016b54:	83 c4 10             	add    esp,0x10
c0016b57:	ba 84 b1 02 c0       	mov    edx,0xc002b184
c0016b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b60:	89 10                	mov    DWORD PTR [eax],edx
c0016b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b66:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016b70:	90                   	nop
c0016b71:	83 c4 0c             	add    esp,0xc
c0016b74:	c3                   	ret    
c0016b75:	90                   	nop

c0016b76 <Serial::~Serial()>:
c0016b76:	83 ec 0c             	sub    esp,0xc
c0016b79:	ba 84 b1 02 c0       	mov    edx,0xc002b184
c0016b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b82:	89 10                	mov    DWORD PTR [eax],edx
c0016b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b88:	83 ec 0c             	sub    esp,0xc
c0016b8b:	50                   	push   eax
c0016b8c:	e8 ed d5 ff ff       	call   c001417e <Device::~Device()>
c0016b91:	83 c4 10             	add    esp,0x10
c0016b94:	90                   	nop
c0016b95:	83 c4 0c             	add    esp,0xc
c0016b98:	c3                   	ret    
c0016b99:	90                   	nop

c0016b9a <Serial::~Serial()>:
c0016b9a:	83 ec 0c             	sub    esp,0xc
c0016b9d:	83 ec 0c             	sub    esp,0xc
c0016ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ba4:	e8 cd ff ff ff       	call   c0016b76 <Serial::~Serial()>
c0016ba9:	83 c4 10             	add    esp,0x10
c0016bac:	83 ec 08             	sub    esp,0x8
c0016baf:	68 58 01 00 00       	push   0x158
c0016bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bb8:	e8 e9 c1 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0016bbd:	83 c4 10             	add    esp,0x10
c0016bc0:	83 c4 0c             	add    esp,0xc
c0016bc3:	c3                   	ret    

c0016bc4 <Timer::Timer(char const*)>:
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bcb:	83 ec 08             	sub    esp,0x8
c0016bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bd2:	50                   	push   eax
c0016bd3:	e8 c4 d8 ff ff       	call   c001449c <Device::Device(char const*)>
c0016bd8:	83 c4 10             	add    esp,0x10
c0016bdb:	ba c8 b1 02 c0       	mov    edx,0xc002b1c8
c0016be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be4:	89 10                	mov    DWORD PTR [eax],edx
c0016be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bea:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016bf4:	90                   	nop
c0016bf5:	83 c4 0c             	add    esp,0xc
c0016bf8:	c3                   	ret    
c0016bf9:	90                   	nop

c0016bfa <Timer::~Timer()>:
c0016bfa:	83 ec 0c             	sub    esp,0xc
c0016bfd:	ba c8 b1 02 c0       	mov    edx,0xc002b1c8
c0016c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c06:	89 10                	mov    DWORD PTR [eax],edx
c0016c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0c:	83 ec 0c             	sub    esp,0xc
c0016c0f:	50                   	push   eax
c0016c10:	e8 69 d5 ff ff       	call   c001417e <Device::~Device()>
c0016c15:	83 c4 10             	add    esp,0x10
c0016c18:	90                   	nop
c0016c19:	83 c4 0c             	add    esp,0xc
c0016c1c:	c3                   	ret    
c0016c1d:	90                   	nop

c0016c1e <Timer::~Timer()>:
c0016c1e:	83 ec 0c             	sub    esp,0xc
c0016c21:	83 ec 0c             	sub    esp,0xc
c0016c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c28:	e8 cd ff ff ff       	call   c0016bfa <Timer::~Timer()>
c0016c2d:	83 c4 10             	add    esp,0x10
c0016c30:	83 ec 08             	sub    esp,0x8
c0016c33:	68 5c 01 00 00       	push   0x15c
c0016c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c3c:	e8 65 c1 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0016c41:	83 c4 10             	add    esp,0x10
c0016c44:	83 c4 0c             	add    esp,0xc
c0016c47:	c3                   	ret    

c0016c48 <Timer::read()>:
c0016c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c4c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c52:	c3                   	ret    

c0016c53 <timerHandler(unsigned long long)>:
c0016c53:	55                   	push   ebp
c0016c54:	57                   	push   edi
c0016c55:	56                   	push   esi
c0016c56:	53                   	push   ebx
c0016c57:	83 ec 0c             	sub    esp,0xc
c0016c5a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016c5e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016c62:	01 35 70 e9 02 c0    	add    DWORD PTR ds:0xc002e970,esi
c0016c68:	11 3d 74 e9 02 c0    	adc    DWORD PTR ds:0xc002e974,edi
c0016c6e:	80 3d ed e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2ed,0x0
c0016c75:	0f 84 07 01 00 00    	je     c0016d82 <timerHandler(unsigned long long)+0x12f>
c0016c7b:	e8 c7 70 00 00       	call   c001dd47 <lockStuff()>
c0016c80:	83 ec 0c             	sub    esp,0xc
c0016c83:	68 3c 18 03 c0       	push   0xc003183c
c0016c88:	e8 e1 1c 01 00       	call   c002896e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c8d:	c7 04 24 3c 18 03 c0 	mov    DWORD PTR [esp],0xc003183c
c0016c94:	89 c3                	mov    ebx,eax
c0016c96:	e8 db 1c 01 00       	call   c0028976 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c9b:	83 c4 10             	add    esp,0x10
c0016c9e:	84 c0                	test   al,al
c0016ca0:	74 60                	je     c0016d02 <timerHandler(unsigned long long)+0xaf>
c0016ca2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ca8:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016cab:	85 c0                	test   eax,eax
c0016cad:	0f 85 91 00 00 00    	jne    c0016d44 <timerHandler(unsigned long long)+0xf1>
c0016cb3:	e9 be 00 00 00       	jmp    c0016d76 <timerHandler(unsigned long long)+0x123>
c0016cb8:	83 ec 0c             	sub    esp,0xc
c0016cbb:	55                   	push   ebp
c0016cbc:	e8 77 76 00 00       	call   c001e338 <unblockTask(ThreadControlBlock*)>
c0016cc1:	83 c4 10             	add    esp,0x10
c0016cc4:	39 eb                	cmp    ebx,ebp
c0016cc6:	75 12                	jne    c0016cda <timerHandler(unsigned long long)+0x87>
c0016cc8:	83 ec 0c             	sub    esp,0xc
c0016ccb:	68 3c 18 03 c0       	push   0xc003183c
c0016cd0:	e8 99 1c 01 00       	call   c002896e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016cd5:	89 c3                	mov    ebx,eax
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	83 ec 0c             	sub    esp,0xc
c0016cdd:	68 3c 18 03 c0       	push   0xc003183c
c0016ce2:	e8 8f 1c 01 00       	call   c0028976 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ce7:	83 c4 10             	add    esp,0x10
c0016cea:	84 c0                	test   al,al
c0016cec:	75 b4                	jne    c0016ca2 <timerHandler(unsigned long long)+0x4f>
c0016cee:	83 ec 0c             	sub    esp,0xc
c0016cf1:	68 3c 18 03 c0       	push   0xc003183c
c0016cf6:	e8 73 1c 01 00       	call   c002896e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016cfb:	83 c4 10             	add    esp,0x10
c0016cfe:	39 d8                	cmp    eax,ebx
c0016d00:	74 a0                	je     c0016ca2 <timerHandler(unsigned long long)+0x4f>
c0016d02:	83 ec 0c             	sub    esp,0xc
c0016d05:	68 3c 18 03 c0       	push   0xc003183c
c0016d0a:	e8 5f 1c 01 00       	call   c002896e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d0f:	c7 04 24 3c 18 03 c0 	mov    DWORD PTR [esp],0xc003183c
c0016d16:	89 c5                	mov    ebp,eax
c0016d18:	e8 75 1c 01 00       	call   c0028992 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016d1d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016d20:	83 c4 10             	add    esp,0x10
c0016d23:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016d26:	39 15 70 e9 02 c0    	cmp    DWORD PTR ds:0xc002e970,edx
c0016d2c:	a1 74 e9 02 c0       	mov    eax,ds:0xc002e974
c0016d31:	19 c8                	sbb    eax,ecx
c0016d33:	73 83                	jae    c0016cb8 <timerHandler(unsigned long long)+0x65>
c0016d35:	50                   	push   eax
c0016d36:	50                   	push   eax
c0016d37:	55                   	push   ebp
c0016d38:	68 3c 18 03 c0       	push   0xc003183c
c0016d3d:	e8 fe 1c 01 00       	call   c0028a40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016d42:	eb 93                	jmp    c0016cd7 <timerHandler(unsigned long long)+0x84>
c0016d44:	80 3d ec e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2ec,0x0
c0016d4b:	74 29                	je     c0016d76 <timerHandler(unsigned long long)+0x123>
c0016d4d:	39 c6                	cmp    esi,eax
c0016d4f:	bb 00 00 00 00       	mov    ebx,0x0
c0016d54:	19 df                	sbb    edi,ebx
c0016d56:	72 19                	jb     c0016d71 <timerHandler(unsigned long long)+0x11e>
c0016d58:	e8 c3 6f 00 00       	call   c001dd20 <lockScheduler()>
c0016d5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d62:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016d65:	e8 f2 72 00 00       	call   c001e05c <schedule()>
c0016d6a:	e8 b3 6f 00 00       	call   c001dd22 <unlockScheduler()>
c0016d6f:	eb 05                	jmp    c0016d76 <timerHandler(unsigned long long)+0x123>
c0016d71:	29 f0                	sub    eax,esi
c0016d73:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016d76:	83 c4 0c             	add    esp,0xc
c0016d79:	5b                   	pop    ebx
c0016d7a:	5e                   	pop    esi
c0016d7b:	5f                   	pop    edi
c0016d7c:	5d                   	pop    ebp
c0016d7d:	e9 5f 73 00 00       	jmp    c001e0e1 <unlockStuff()>
c0016d82:	83 c4 0c             	add    esp,0xc
c0016d85:	5b                   	pop    ebx
c0016d86:	5e                   	pop    esi
c0016d87:	5f                   	pop    edi
c0016d88:	5d                   	pop    ebp
c0016d89:	c3                   	ret    

c0016d8a <setupTimer(int)>:
c0016d8a:	57                   	push   edi
c0016d8b:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0016d90:	56                   	push   esi
c0016d91:	53                   	push   ebx
c0016d92:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d9c:	83 ec 0c             	sub    esp,0xc
c0016d9f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016da5:	e8 ee d7 ff ff       	call   c0014598 <Device::getName()>
c0016daa:	83 c4 10             	add    esp,0x10
c0016dad:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016db0:	0f 85 8d 00 00 00    	jne    c0016e43 <setupTimer(int)+0xb9>
c0016db6:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0016dbb:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016dc2:	74 7f                	je     c0016e43 <setupTimer(int)+0xb9>
c0016dc4:	83 ec 0c             	sub    esp,0xc
c0016dc7:	68 5c 01 00 00       	push   0x15c
c0016dcc:	e8 6f 8a ff ff       	call   c000f840 <malloc>
c0016dd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0016dd4:	89 c3                	mov    ebx,eax
c0016dd6:	e8 ff f6 00 00       	call   c00264da <PIT::PIT()>
c0016ddb:	59                   	pop    ecx
c0016ddc:	5f                   	pop    edi
c0016ddd:	53                   	push   ebx
c0016dde:	ff 35 e8 e2 02 c0    	push   DWORD PTR ds:0xc002e2e8
c0016de4:	e8 c3 d4 ff ff       	call   c00142ac <Device::addChild(Device*)>
c0016de9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016deb:	6a 00                	push   0x0
c0016ded:	6a 00                	push   0x0
c0016def:	56                   	push   esi
c0016df0:	53                   	push   ebx
c0016df1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016df4:	83 c4 14             	add    esp,0x14
c0016df7:	68 60 01 00 00       	push   0x160
c0016dfc:	e8 3f 8a ff ff       	call   c000f840 <malloc>
c0016e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e04:	89 c7                	mov    edi,eax
c0016e06:	e8 7f f5 00 00       	call   c002638a <APICTimer::APICTimer()>
c0016e0b:	6a 00                	push   0x0
c0016e0d:	6a 00                	push   0x0
c0016e0f:	56                   	push   esi
c0016e10:	57                   	push   edi
c0016e11:	e8 76 f4 00 00       	call   c002628c <APICTimer::open(int, int, void*)>
c0016e16:	83 c4 20             	add    esp,0x20
c0016e19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e1b:	6a 00                	push   0x0
c0016e1d:	6a 00                	push   0x0
c0016e1f:	6a 00                	push   0x0
c0016e21:	53                   	push   ebx
c0016e22:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e25:	58                   	pop    eax
c0016e26:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0016e2b:	5a                   	pop    edx
c0016e2c:	57                   	push   edi
c0016e2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e33:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e39:	e8 6e d4 ff ff       	call   c00142ac <Device::addChild(Device*)>
c0016e3e:	83 c4 10             	add    esp,0x10
c0016e41:	eb 33                	jmp    c0016e76 <setupTimer(int)+0xec>
c0016e43:	83 ec 0c             	sub    esp,0xc
c0016e46:	68 5c 01 00 00       	push   0x15c
c0016e4b:	e8 f0 89 ff ff       	call   c000f840 <malloc>
c0016e50:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e53:	89 c3                	mov    ebx,eax
c0016e55:	e8 80 f6 00 00       	call   c00264da <PIT::PIT()>
c0016e5a:	58                   	pop    eax
c0016e5b:	5a                   	pop    edx
c0016e5c:	53                   	push   ebx
c0016e5d:	ff 35 e8 e2 02 c0    	push   DWORD PTR ds:0xc002e2e8
c0016e63:	e8 44 d4 ff ff       	call   c00142ac <Device::addChild(Device*)>
c0016e68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e6a:	6a 00                	push   0x0
c0016e6c:	6a 00                	push   0x0
c0016e6e:	56                   	push   esi
c0016e6f:	53                   	push   ebx
c0016e70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e73:	83 c4 20             	add    esp,0x20
c0016e76:	89 d8                	mov    eax,ebx
c0016e78:	5b                   	pop    ebx
c0016e79:	5e                   	pop    esi
c0016e7a:	5f                   	pop    edi
c0016e7b:	c3                   	ret    

c0016e7c <VCache::VCache(PhysicalDisk*)>:
c0016e7c:	53                   	push   ebx
c0016e7d:	83 ec 18             	sub    esp,0x18
c0016e80:	ba f8 b1 02 c0       	mov    edx,0xc002b1f8
c0016e85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e89:	89 10                	mov    DWORD PTR [eax],edx
c0016e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e8f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e9a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ea5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016eac:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eb7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016ebe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016ec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ec9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016ed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ed4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016edc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016ee3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eee:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016efe:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f06:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f0d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016f15:	83 ec 0c             	sub    esp,0xc
c0016f18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f1c:	e8 1f 89 ff ff       	call   c000f840 <malloc>
c0016f21:	83 c4 10             	add    esp,0x10
c0016f24:	89 c3                	mov    ebx,eax
c0016f26:	83 ec 0c             	sub    esp,0xc
c0016f29:	53                   	push   ebx
c0016f2a:	e8 11 6f 00 00       	call   c001de40 <Mutex::Mutex()>
c0016f2f:	83 c4 10             	add    esp,0x10
c0016f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f36:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016f39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f3d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016f41:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f48:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016f4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f53:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016f60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f64:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016f6a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f70:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016f74:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016f77:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f7e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f86:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f8c:	05 00 01 00 00       	add    eax,0x100
c0016f91:	c1 e0 04             	shl    eax,0x4
c0016f94:	83 ec 0c             	sub    esp,0xc
c0016f97:	50                   	push   eax
c0016f98:	e8 a3 88 ff ff       	call   c000f840 <malloc>
c0016f9d:	83 c4 10             	add    esp,0x10
c0016fa0:	89 c2                	mov    edx,eax
c0016fa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fad:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fc0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fc6:	c1 e0 07             	shl    eax,0x7
c0016fc9:	83 ec 0c             	sub    esp,0xc
c0016fcc:	50                   	push   eax
c0016fcd:	e8 6e 88 ff ff       	call   c000f840 <malloc>
c0016fd2:	83 c4 10             	add    esp,0x10
c0016fd5:	89 c2                	mov    edx,eax
c0016fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fdb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016fde:	90                   	nop
c0016fdf:	83 c4 18             	add    esp,0x18
c0016fe2:	5b                   	pop    ebx
c0016fe3:	c3                   	ret    

c0016fe4 <VCache::invalidateReadBuffer()>:
c0016fe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fe8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016fee:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016ff2:	c3                   	ret    
c0016ff3:	90                   	nop

c0016ff4 <VCache::writeWriteBuffer()>:
c0016ff4:	53                   	push   ebx
c0016ff5:	83 ec 14             	sub    esp,0x14
c0016ff8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016ffc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016fff:	8b 10                	mov    edx,DWORD PTR [eax]
c0017001:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017004:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017007:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001700a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001700d:	50                   	push   eax
c001700e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017011:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017018:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001701f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017023:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001702a:	83 c4 28             	add    esp,0x28
c001702d:	5b                   	pop    ebx
c001702e:	c3                   	ret    
c001702f:	90                   	nop

c0017030 <VCache::~VCache()>:
c0017030:	83 ec 0c             	sub    esp,0xc
c0017033:	ba f8 b1 02 c0       	mov    edx,0xc002b1f8
c0017038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001703c:	89 10                	mov    DWORD PTR [eax],edx
c001703e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017042:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017045:	84 c0                	test   al,al
c0017047:	74 0f                	je     c0017058 <VCache::~VCache()+0x28>
c0017049:	83 ec 0c             	sub    esp,0xc
c001704c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017050:	e8 9f ff ff ff       	call   c0016ff4 <VCache::writeWriteBuffer()>
c0017055:	83 c4 10             	add    esp,0x10
c0017058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001705c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001705f:	83 ec 0c             	sub    esp,0xc
c0017062:	50                   	push   eax
c0017063:	e8 e8 87 ff ff       	call   c000f850 <free>
c0017068:	83 c4 10             	add    esp,0x10
c001706b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001706f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017072:	83 ec 0c             	sub    esp,0xc
c0017075:	50                   	push   eax
c0017076:	e8 d5 87 ff ff       	call   c000f850 <free>
c001707b:	83 c4 10             	add    esp,0x10
c001707e:	90                   	nop
c001707f:	83 c4 0c             	add    esp,0xc
c0017082:	c3                   	ret    
c0017083:	90                   	nop

c0017084 <VCache::~VCache()>:
c0017084:	83 ec 0c             	sub    esp,0xc
c0017087:	83 ec 0c             	sub    esp,0xc
c001708a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001708e:	e8 9d ff ff ff       	call   c0017030 <VCache::~VCache()>
c0017093:	83 c4 10             	add    esp,0x10
c0017096:	83 ec 08             	sub    esp,0x8
c0017099:	6a 44                	push   0x44
c001709b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001709f:	e8 02 bd ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c00170a4:	83 c4 10             	add    esp,0x10
c00170a7:	83 c4 0c             	add    esp,0xc
c00170aa:	c3                   	ret    
c00170ab:	90                   	nop

c00170ac <VCache::write(unsigned long long, int, void*)>:
c00170ac:	55                   	push   ebp
c00170ad:	57                   	push   edi
c00170ae:	56                   	push   esi
c00170af:	53                   	push   ebx
c00170b0:	83 ec 28             	sub    esp,0x28
c00170b3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00170b7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170bb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00170bf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00170c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00170c6:	e8 d7 71 00 00       	call   c001e2a2 <Semaphore::acquire()>
c00170cb:	83 c4 10             	add    esp,0x10
c00170ce:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00170d2:	74 0c                	je     c00170e0 <VCache::write(unsigned long long, int, void*)+0x34>
c00170d4:	83 ec 0c             	sub    esp,0xc
c00170d7:	53                   	push   ebx
c00170d8:	e8 07 ff ff ff       	call   c0016fe4 <VCache::invalidateReadBuffer()>
c00170dd:	83 c4 10             	add    esp,0x10
c00170e0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00170e4:	74 66                	je     c001714c <VCache::write(unsigned long long, int, void*)+0xa0>
c00170e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170e9:	99                   	cdq    
c00170ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170ee:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00170f1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00170f4:	89 c1                	mov    ecx,eax
c00170f6:	89 d0                	mov    eax,edx
c00170f8:	31 f1                	xor    ecx,esi
c00170fa:	31 f8                	xor    eax,edi
c00170fc:	89 ca                	mov    edx,ecx
c00170fe:	09 c2                	or     edx,eax
c0017100:	75 3e                	jne    c0017140 <VCache::write(unsigned long long, int, void*)+0x94>
c0017102:	83 fd 01             	cmp    ebp,0x1
c0017105:	75 39                	jne    c0017140 <VCache::write(unsigned long long, int, void*)+0x94>
c0017107:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001710a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017110:	51                   	push   ecx
c0017111:	50                   	push   eax
c0017112:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017116:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001711a:	0f af c8             	imul   ecx,eax
c001711d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017120:	51                   	push   ecx
c0017121:	e8 1e 96 fe ff       	call   c0000744 <memcpy>
c0017126:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	40                   	inc    eax
c001712d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017130:	83 c0 80             	add    eax,0xffffff80
c0017133:	75 57                	jne    c001718c <VCache::write(unsigned long long, int, void*)+0xe0>
c0017135:	83 ec 0c             	sub    esp,0xc
c0017138:	53                   	push   ebx
c0017139:	e8 b6 fe ff ff       	call   c0016ff4 <VCache::writeWriteBuffer()>
c001713e:	eb 34                	jmp    c0017174 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017140:	83 ec 0c             	sub    esp,0xc
c0017143:	53                   	push   ebx
c0017144:	e8 ab fe ff ff       	call   c0016ff4 <VCache::writeWriteBuffer()>
c0017149:	83 c4 10             	add    esp,0x10
c001714c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001714f:	83 fd 7f             	cmp    ebp,0x7f
c0017152:	7f 25                	jg     c0017179 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017154:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017157:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001715a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001715d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017161:	52                   	push   edx
c0017162:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017168:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001716c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001716f:	e8 d0 95 fe ff       	call   c0000744 <memcpy>
c0017174:	83 c4 10             	add    esp,0x10
c0017177:	eb 13                	jmp    c001718c <VCache::write(unsigned long long, int, void*)+0xe0>
c0017179:	83 ec 0c             	sub    esp,0xc
c001717c:	8b 10                	mov    edx,DWORD PTR [eax]
c001717e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017182:	55                   	push   ebp
c0017183:	57                   	push   edi
c0017184:	56                   	push   esi
c0017185:	50                   	push   eax
c0017186:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017189:	83 c4 20             	add    esp,0x20
c001718c:	83 ec 0c             	sub    esp,0xc
c001718f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017192:	e8 b9 76 00 00       	call   c001e850 <Semaphore::release()>
c0017197:	83 c4 2c             	add    esp,0x2c
c001719a:	31 c0                	xor    eax,eax
c001719c:	5b                   	pop    ebx
c001719d:	5e                   	pop    esi
c001719e:	5f                   	pop    edi
c001719f:	5d                   	pop    ebp
c00171a0:	c3                   	ret    
c00171a1:	90                   	nop

c00171a2 <VCache::read(unsigned long long, int, void*)>:
c00171a2:	55                   	push   ebp
c00171a3:	57                   	push   edi
c00171a4:	56                   	push   esi
c00171a5:	53                   	push   ebx
c00171a6:	83 ec 28             	sub    esp,0x28
c00171a9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171b1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00171b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171b9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00171bd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00171c1:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00171c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171c8:	e8 d5 70 00 00       	call   c001e2a2 <Semaphore::acquire()>
c00171cd:	83 c4 10             	add    esp,0x10
c00171d0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171d4:	74 0c                	je     c00171e2 <VCache::read(unsigned long long, int, void*)+0x40>
c00171d6:	83 ec 0c             	sub    esp,0xc
c00171d9:	53                   	push   ebx
c00171da:	e8 15 fe ff ff       	call   c0016ff4 <VCache::writeWriteBuffer()>
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	83 fe 01             	cmp    esi,0x1
c00171e5:	0f 85 80 00 00 00    	jne    c001726b <VCache::read(unsigned long long, int, void*)+0xc9>
c00171eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171ee:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00171f5:	75 74                	jne    c001726b <VCache::read(unsigned long long, int, void*)+0xc9>
c00171f7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00171fa:	89 d1                	mov    ecx,edx
c00171fc:	f7 d9                	neg    ecx
c00171fe:	89 cf                	mov    edi,ecx
c0017200:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017204:	c1 ff 1f             	sar    edi,0x1f
c0017207:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001720a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001720e:	89 ce                	mov    esi,ecx
c0017210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017214:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017218:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001721c:	89 cf                	mov    edi,ecx
c001721e:	74 0a                	je     c001722a <VCache::read(unsigned long long, int, void*)+0x88>
c0017220:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017223:	75 05                	jne    c001722a <VCache::read(unsigned long long, int, void*)+0x88>
c0017225:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017228:	74 1c                	je     c0017246 <VCache::read(unsigned long long, int, void*)+0xa4>
c001722a:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001722e:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017231:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017234:	83 ec 0c             	sub    esp,0xc
c0017237:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017239:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001723c:	52                   	push   edx
c001723d:	57                   	push   edi
c001723e:	56                   	push   esi
c001723f:	50                   	push   eax
c0017240:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017243:	83 c4 20             	add    esp,0x20
c0017246:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017249:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001724f:	50                   	push   eax
c0017250:	52                   	push   edx
c0017251:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017254:	48                   	dec    eax
c0017255:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017259:	0f af c2             	imul   eax,edx
c001725c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001725f:	50                   	push   eax
c0017260:	55                   	push   ebp
c0017261:	e8 de 94 fe ff       	call   c0000744 <memcpy>
c0017266:	83 c4 10             	add    esp,0x10
c0017269:	eb 21                	jmp    c001728c <VCache::read(unsigned long long, int, void*)+0xea>
c001726b:	83 ec 0c             	sub    esp,0xc
c001726e:	53                   	push   ebx
c001726f:	e8 70 fd ff ff       	call   c0016fe4 <VCache::invalidateReadBuffer()>
c0017274:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017277:	8b 10                	mov    edx,DWORD PTR [eax]
c0017279:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001727c:	56                   	push   esi
c001727d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017281:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017285:	50                   	push   eax
c0017286:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017289:	83 c4 20             	add    esp,0x20
c001728c:	83 ec 0c             	sub    esp,0xc
c001728f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017292:	e8 b9 75 00 00       	call   c001e850 <Semaphore::release()>
c0017297:	83 c4 2c             	add    esp,0x2c
c001729a:	31 c0                	xor    eax,eax
c001729c:	5b                   	pop    ebx
c001729d:	5e                   	pop    esi
c001729e:	5f                   	pop    edi
c001729f:	5d                   	pop    ebp
c00172a0:	c3                   	ret    
c00172a1:	90                   	nop

c00172a2 <Video::putrect(int, int, int, int, unsigned int)>:
c00172a2:	55                   	push   ebp
c00172a3:	57                   	push   edi
c00172a4:	56                   	push   esi
c00172a5:	53                   	push   ebx
c00172a6:	83 ec 1c             	sub    esp,0x1c
c00172a9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00172ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00172b5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00172b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172c1:	01 df                	add    edi,ebx
c00172c3:	39 fb                	cmp    ebx,edi
c00172c5:	7d 1f                	jge    c00172e6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00172c7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00172cb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00172cf:	7d 12                	jge    c00172e3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00172d1:	8b 16                	mov    edx,DWORD PTR [esi]
c00172d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00172d7:	53                   	push   ebx
c00172d8:	55                   	push   ebp
c00172d9:	45                   	inc    ebp
c00172da:	56                   	push   esi
c00172db:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00172de:	83 c4 10             	add    esp,0x10
c00172e1:	eb e8                	jmp    c00172cb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00172e3:	43                   	inc    ebx
c00172e4:	eb dd                	jmp    c00172c3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00172e6:	83 c4 1c             	add    esp,0x1c
c00172e9:	5b                   	pop    ebx
c00172ea:	5e                   	pop    esi
c00172eb:	5f                   	pop    edi
c00172ec:	5d                   	pop    ebp
c00172ed:	c3                   	ret    

c00172ee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00172ee:	55                   	push   ebp
c00172ef:	57                   	push   edi
c00172f0:	31 ff                	xor    edi,edi
c00172f2:	56                   	push   esi
c00172f3:	53                   	push   ebx
c00172f4:	83 ec 1c             	sub    esp,0x1c
c00172f7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00172fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00172ff:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017306:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001730b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001730f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017313:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017317:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001731a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001731e:	01 f9                	add    ecx,edi
c0017320:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017324:	7d 2f                	jge    c0017355 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017326:	31 f6                	xor    esi,esi
c0017328:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001732c:	01 f2                	add    edx,esi
c001732e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017332:	7d 1a                	jge    c001734e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017334:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017337:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001733a:	46                   	inc    esi
c001733b:	51                   	push   ecx
c001733c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017340:	52                   	push   edx
c0017341:	55                   	push   ebp
c0017342:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017345:	83 c4 10             	add    esp,0x10
c0017348:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001734c:	eb da                	jmp    c0017328 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001734e:	47                   	inc    edi
c001734f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017353:	eb c5                	jmp    c001731a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017355:	83 c4 1c             	add    esp,0x1c
c0017358:	5b                   	pop    ebx
c0017359:	5e                   	pop    esi
c001735a:	5f                   	pop    edi
c001735b:	5d                   	pop    ebp
c001735c:	c3                   	ret    
c001735d:	90                   	nop

c001735e <Video::blit(unsigned int*, int, int, int, int)>:
c001735e:	55                   	push   ebp
c001735f:	57                   	push   edi
c0017360:	56                   	push   esi
c0017361:	53                   	push   ebx
c0017362:	83 ec 1c             	sub    esp,0x1c
c0017365:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017369:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001736d:	85 c0                	test   eax,eax
c001736f:	79 02                	jns    c0017373 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017371:	31 c0                	xor    eax,eax
c0017373:	c1 e0 02             	shl    eax,0x2
c0017376:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001737a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001737e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017382:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017386:	39 d8                	cmp    eax,ebx
c0017388:	7e 49                	jle    c00173d3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001738a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017390:	7c 41                	jl     c00173d3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017392:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017396:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001739a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001739e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00173a2:	39 f9                	cmp    ecx,edi
c00173a4:	7e 22                	jle    c00173c8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00173a6:	83 c5 04             	add    ebp,0x4
c00173a9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00173af:	7c 14                	jl     c00173c5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00173b1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00173b3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00173b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00173ba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00173be:	56                   	push   esi
c00173bf:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00173c2:	83 c4 10             	add    esp,0x10
c00173c5:	47                   	inc    edi
c00173c6:	eb d2                	jmp    c001739a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00173c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173cc:	43                   	inc    ebx
c00173cd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00173d1:	eb ab                	jmp    c001737e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00173d3:	83 c4 1c             	add    esp,0x1c
c00173d6:	5b                   	pop    ebx
c00173d7:	5e                   	pop    esi
c00173d8:	5f                   	pop    edi
c00173d9:	5d                   	pop    ebp
c00173da:	c3                   	ret    
c00173db:	90                   	nop

c00173dc <Video::clearScreen(unsigned int)>:
c00173dc:	57                   	push   edi
c00173dd:	56                   	push   esi
c00173de:	53                   	push   ebx
c00173df:	31 db                	xor    ebx,ebx
c00173e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00173e5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00173eb:	7e 1f                	jle    c001740c <Video::clearScreen(unsigned int)+0x30>
c00173ed:	31 ff                	xor    edi,edi
c00173ef:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00173f5:	7e 12                	jle    c0017409 <Video::clearScreen(unsigned int)+0x2d>
c00173f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00173f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00173fd:	53                   	push   ebx
c00173fe:	57                   	push   edi
c00173ff:	47                   	inc    edi
c0017400:	56                   	push   esi
c0017401:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017404:	83 c4 10             	add    esp,0x10
c0017407:	eb e6                	jmp    c00173ef <Video::clearScreen(unsigned int)+0x13>
c0017409:	43                   	inc    ebx
c001740a:	eb d9                	jmp    c00173e5 <Video::clearScreen(unsigned int)+0x9>
c001740c:	5b                   	pop    ebx
c001740d:	5e                   	pop    esi
c001740e:	5f                   	pop    edi
c001740f:	c3                   	ret    

c0017410 <Video::putpixel(int, int, unsigned int)>:
c0017410:	c7 44 24 04 00 b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b200
c0017418:	e9 0e 31 00 00       	jmp    c001a52b <Krnl::panic(char const*)>
c001741d:	90                   	nop

c001741e <Video::Video(char const*)>:
c001741e:	83 ec 0c             	sub    esp,0xc
c0017421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017425:	83 ec 08             	sub    esp,0x8
c0017428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001742c:	50                   	push   eax
c001742d:	e8 6a d0 ff ff       	call   c001449c <Device::Device(char const*)>
c0017432:	83 c4 10             	add    esp,0x10
c0017435:	ba 84 b2 02 c0       	mov    edx,0xc002b284
c001743a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001743e:	89 10                	mov    DWORD PTR [eax],edx
c0017440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017444:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001744e:	90                   	nop
c001744f:	83 c4 0c             	add    esp,0xc
c0017452:	c3                   	ret    
c0017453:	90                   	nop

c0017454 <Video::~Video()>:
c0017454:	83 ec 0c             	sub    esp,0xc
c0017457:	ba 84 b2 02 c0       	mov    edx,0xc002b284
c001745c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017460:	89 10                	mov    DWORD PTR [eax],edx
c0017462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017466:	83 ec 0c             	sub    esp,0xc
c0017469:	50                   	push   eax
c001746a:	e8 0f cd ff ff       	call   c001417e <Device::~Device()>
c001746f:	83 c4 10             	add    esp,0x10
c0017472:	90                   	nop
c0017473:	83 c4 0c             	add    esp,0xc
c0017476:	c3                   	ret    
c0017477:	90                   	nop

c0017478 <Video::~Video()>:
c0017478:	83 ec 0c             	sub    esp,0xc
c001747b:	83 ec 0c             	sub    esp,0xc
c001747e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017482:	e8 cd ff ff ff       	call   c0017454 <Video::~Video()>
c0017487:	83 c4 10             	add    esp,0x10
c001748a:	83 ec 08             	sub    esp,0x8
c001748d:	68 64 01 00 00       	push   0x164
c0017492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017496:	e8 0b b9 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c001749b:	83 c4 10             	add    esp,0x10
c001749e:	83 c4 0c             	add    esp,0xc
c00174a1:	c3                   	ret    

c00174a2 <Video::isMonochrome()>:
c00174a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174a6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00174ac:	c3                   	ret    
c00174ad:	90                   	nop

c00174ae <Video::getWidth()>:
c00174ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00174b8:	c3                   	ret    
c00174b9:	90                   	nop

c00174ba <Video::getHeight()>:
c00174ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174be:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00174c4:	c3                   	ret    
c00174c5:	90                   	nop

c00174c6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00174c6:	55                   	push   ebp
c00174c7:	57                   	push   edi
c00174c8:	56                   	push   esi
c00174c9:	53                   	push   ebx
c00174ca:	83 ec 2c             	sub    esp,0x2c
c00174cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174d1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00174d5:	83 f8 01             	cmp    eax,0x1
c00174d8:	19 c9                	sbb    ecx,ecx
c00174da:	31 db                	xor    ebx,ebx
c00174dc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00174e0:	89 cd                	mov    ebp,ecx
c00174e2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00174ea:	f7 d5                	not    ebp
c00174ec:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00174f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00174f6:	01 d8                	add    eax,ebx
c00174f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174fc:	56                   	push   esi
c00174fd:	e8 b8 ff ff ff       	call   c00174ba <Video::getHeight()>
c0017502:	59                   	pop    ecx
c0017503:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017507:	7e 70                	jle    c0017579 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017509:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001750d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017511:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017514:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017518:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001751c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017523:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017527:	89 f8                	mov    eax,edi
c0017529:	83 c0 20             	add    eax,0x20
c001752c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017530:	56                   	push   esi
c0017531:	e8 78 ff ff ff       	call   c00174ae <Video::getWidth()>
c0017536:	5a                   	pop    edx
c0017537:	39 c7                	cmp    edi,eax
c0017539:	7d 34                	jge    c001756f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001753b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017540:	74 05                	je     c0017547 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017542:	8b 06                	mov    eax,DWORD PTR [esi]
c0017544:	55                   	push   ebp
c0017545:	eb 0d                	jmp    c0017554 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017547:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001754c:	74 12                	je     c0017560 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001754e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017550:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017554:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017558:	57                   	push   edi
c0017559:	56                   	push   esi
c001755a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001755d:	83 c4 10             	add    esp,0x10
c0017560:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017564:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017568:	47                   	inc    edi
c0017569:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001756d:	75 c1                	jne    c0017530 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001756f:	43                   	inc    ebx
c0017570:	83 fb 20             	cmp    ebx,0x20
c0017573:	0f 85 79 ff ff ff    	jne    c00174f2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017579:	83 c4 2c             	add    esp,0x2c
c001757c:	5b                   	pop    ebx
c001757d:	5e                   	pop    esi
c001757e:	5f                   	pop    edi
c001757f:	5d                   	pop    ebp
c0017580:	c3                   	ret    
c0017581:	90                   	nop

c0017582 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017582:	55                   	push   ebp
c0017583:	57                   	push   edi
c0017584:	56                   	push   esi
c0017585:	53                   	push   ebx
c0017586:	83 ec 28             	sub    esp,0x28
c0017589:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001758d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017591:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017595:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017599:	c1 e7 08             	shl    edi,0x8
c001759c:	01 c7                	add    edi,eax
c001759e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00175a2:	c1 e0 08             	shl    eax,0x8
c00175a5:	01 d0                	add    eax,edx
c00175a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175af:	0f af c7             	imul   eax,edi
c00175b2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00175b9:	50                   	push   eax
c00175ba:	e8 81 82 ff ff       	call   c000f840 <malloc>
c00175bf:	83 c4 10             	add    esp,0x10
c00175c2:	89 c5                	mov    ebp,eax
c00175c4:	85 c0                	test   eax,eax
c00175c6:	75 15                	jne    c00175dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00175c8:	83 ec 0c             	sub    esp,0xc
c00175cb:	68 21 b2 02 c0       	push   0xc002b221
c00175d0:	e8 b1 b8 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00175d5:	83 c4 10             	add    esp,0x10
c00175d8:	e9 1c 01 00 00       	jmp    c00176f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00175dd:	be 12 00 00 00       	mov    esi,0x12
c00175e2:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00175e6:	74 11                	je     c00175f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00175e8:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00175ec:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00175f0:	c1 fe 03             	sar    esi,0x3
c00175f3:	0f af f0             	imul   esi,eax
c00175f6:	83 c6 12             	add    esi,0x12
c00175f9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00175fd:	74 04                	je     c0017603 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00175ff:	85 ff                	test   edi,edi
c0017601:	75 12                	jne    c0017615 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017603:	83 ec 0c             	sub    esp,0xc
c0017606:	68 38 b2 02 c0       	push   0xc002b238
c001760b:	e8 76 b8 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0017610:	e9 ce 00 00 00       	jmp    c00176e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017615:	52                   	push   edx
c0017616:	52                   	push   edx
c0017617:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001761b:	50                   	push   eax
c001761c:	68 4d b2 02 c0       	push   0xc002b24d
c0017621:	e8 60 b8 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0017626:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001762a:	83 c4 10             	add    esp,0x10
c001762d:	80 fa 02             	cmp    dl,0x2
c0017630:	0f 85 98 00 00 00    	jne    c00176ce <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017636:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001763b:	75 10                	jne    c001764d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001763d:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017641:	75 0a                	jne    c001764d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017643:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017646:	83 e8 18             	sub    eax,0x18
c0017649:	a8 f7                	test   al,0xf7
c001764b:	74 0a                	je     c0017657 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001764d:	83 ec 0c             	sub    esp,0xc
c0017650:	68 5a b2 02 c0       	push   0xc002b25a
c0017655:	eb 7f                	jmp    c00176d6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017657:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001765f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017667:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001766b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017673:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017677:	75 0c                	jne    c0017685 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017679:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001767e:	c1 e0 18             	shl    eax,0x18
c0017681:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017685:	41                   	inc    ecx
c0017686:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001768b:	c1 e2 10             	shl    edx,0x10
c001768e:	89 d0                	mov    eax,edx
c0017690:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017695:	c1 e2 08             	shl    edx,0x8
c0017698:	09 c2                	or     edx,eax
c001769a:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001769e:	09 c2                	or     edx,eax
c00176a0:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00176a4:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00176a8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00176ac:	c1 f8 03             	sar    eax,0x3
c00176af:	01 c6                	add    esi,eax
c00176b1:	89 c8                	mov    eax,ecx
c00176b3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00176b7:	39 c7                	cmp    edi,eax
c00176b9:	7f b0                	jg     c001766b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00176bb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00176bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176c3:	39 14 24             	cmp    DWORD PTR [esp],edx
c00176c6:	7e 22                	jle    c00176ea <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00176c8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00176cc:	eb 99                	jmp    c0017667 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00176ce:	50                   	push   eax
c00176cf:	50                   	push   eax
c00176d0:	52                   	push   edx
c00176d1:	68 68 b2 02 c0       	push   0xc002b268
c00176d6:	e8 ab b7 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00176db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00176de:	e8 6d 81 ff ff       	call   c000f850 <free>
c00176e3:	83 c4 10             	add    esp,0x10
c00176e6:	31 ed                	xor    ebp,ebp
c00176e8:	eb 0f                	jmp    c00176f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176ea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00176ee:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00176f1:	89 38                	mov    DWORD PTR [eax],edi
c00176f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00176f7:	89 08                	mov    DWORD PTR [eax],ecx
c00176f9:	83 c4 1c             	add    esp,0x1c
c00176fc:	89 e8                	mov    eax,ebp
c00176fe:	5b                   	pop    ebx
c00176ff:	5e                   	pop    esi
c0017700:	5f                   	pop    edi
c0017701:	5d                   	pop    ebp
c0017702:	c3                   	ret    
c0017703:	90                   	nop

c0017704 <Video::putTGA(int, int, unsigned char*, int)>:
c0017704:	55                   	push   ebp
c0017705:	57                   	push   edi
c0017706:	56                   	push   esi
c0017707:	53                   	push   ebx
c0017708:	83 ec 28             	sub    esp,0x28
c001770b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001770f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017713:	50                   	push   eax
c0017714:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017718:	50                   	push   eax
c0017719:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001771d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017721:	56                   	push   esi
c0017722:	e8 5b fe ff ff       	call   c0017582 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017727:	83 c4 20             	add    esp,0x20
c001772a:	85 c0                	test   eax,eax
c001772c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017730:	74 35                	je     c0017767 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017732:	89 c7                	mov    edi,eax
c0017734:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017738:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001773c:	39 d8                	cmp    eax,ebx
c001773e:	7e 27                	jle    c0017767 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017740:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017744:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017748:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001774c:	39 e8                	cmp    eax,ebp
c001774e:	7e 14                	jle    c0017764 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017750:	8b 06                	mov    eax,DWORD PTR [esi]
c0017752:	83 c7 04             	add    edi,0x4
c0017755:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017758:	53                   	push   ebx
c0017759:	55                   	push   ebp
c001775a:	45                   	inc    ebp
c001775b:	56                   	push   esi
c001775c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001775f:	83 c4 10             	add    esp,0x10
c0017762:	eb e0                	jmp    c0017744 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017764:	43                   	inc    ebx
c0017765:	eb cd                	jmp    c0017734 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017767:	83 c4 1c             	add    esp,0x1c
c001776a:	5b                   	pop    ebx
c001776b:	5e                   	pop    esi
c001776c:	5f                   	pop    edi
c001776d:	5d                   	pop    ebp
c001776e:	c3                   	ret    
c001776f:	90                   	nop

c0017770 <ACPI::close(int, int, void*)>:
c0017770:	83 ec 1c             	sub    esp,0x1c
c0017773:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001777b:	74 0a                	je     c0017787 <ACPI::close(int, int, void*)+0x17>
c001777d:	b8 00 00 00 00       	mov    eax,0x0
c0017782:	e9 9a 00 00 00       	jmp    c0017821 <ACPI::close(int, int, void*)+0xb1>
c0017787:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001778c:	75 37                	jne    c00177c5 <ACPI::close(int, int, void*)+0x55>
c001778e:	83 ec 0c             	sub    esp,0xc
c0017791:	68 c4 b2 02 c0       	push   0xc002b2c4
c0017796:	e8 eb b6 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001779b:	83 c4 10             	add    esp,0x10
c001779e:	a1 a8 09 03 c0       	mov    eax,ds:0xc00309a8
c00177a3:	85 c0                	test   eax,eax
c00177a5:	74 07                	je     c00177ae <ACPI::close(int, int, void*)+0x3e>
c00177a7:	a1 a8 09 03 c0       	mov    eax,ds:0xc00309a8
c00177ac:	ff d0                	call   eax
c00177ae:	83 ec 0c             	sub    esp,0xc
c00177b1:	68 e8 b3 02 c0       	push   0xc002b3e8
c00177b6:	e8 70 2d 00 00       	call   c001a52b <Krnl::panic(char const*)>
c00177bb:	83 c4 10             	add    esp,0x10
c00177be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00177c3:	eb 5c                	jmp    c0017821 <ACPI::close(int, int, void*)+0xb1>
c00177c5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00177ca:	75 50                	jne    c001781c <ACPI::close(int, int, void*)+0xac>
c00177cc:	a1 a4 09 03 c0       	mov    eax,ds:0xc00309a4
c00177d1:	85 c0                	test   eax,eax
c00177d3:	74 07                	je     c00177dc <ACPI::close(int, int, void*)+0x6c>
c00177d5:	a1 a4 09 03 c0       	mov    eax,ds:0xc00309a4
c00177da:	ff d0                	call   eax
c00177dc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00177e1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00177e6:	83 e0 02             	and    eax,0x2
c00177e9:	74 1c                	je     c0017807 <ACPI::close(int, int, void*)+0x97>
c00177eb:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00177f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177f6:	89 c2                	mov    edx,eax
c00177f8:	ec                   	in     al,dx
c00177f9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00177fd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017801:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017805:	eb da                	jmp    c00177e1 <ACPI::close(int, int, void*)+0x71>
c0017807:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001780e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017813:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017817:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001781b:	ee                   	out    dx,al
c001781c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017821:	83 c4 1c             	add    esp,0x1c
c0017824:	c3                   	ret    

c0017825 <findRSDP()>:
c0017825:	83 ec 1c             	sub    esp,0x1c
c0017828:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c001782d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017833:	83 e0 04             	and    eax,0x4
c0017836:	84 c0                	test   al,al
c0017838:	75 07                	jne    c0017841 <findRSDP()+0x1c>
c001783a:	b8 00 00 00 00       	mov    eax,0x0
c001783f:	eb 6a                	jmp    c00178ab <findRSDP()+0x86>
c0017841:	a1 34 e3 02 c0       	mov    eax,ds:0xc002e334
c0017846:	3d ff 07 00 00       	cmp    eax,0x7ff
c001784b:	7f 1b                	jg     c0017868 <findRSDP()+0x43>
c001784d:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0017852:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017858:	83 e2 fb             	and    edx,0xfffffffb
c001785b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017861:	b8 00 00 00 00       	mov    eax,0x0
c0017866:	eb 43                	jmp    c00178ab <findRSDP()+0x86>
c0017868:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017870:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017878:	77 2c                	ja     c00178a6 <findRSDP()+0x81>
c001787a:	83 ec 04             	sub    esp,0x4
c001787d:	6a 08                	push   0x8
c001787f:	68 d1 b2 02 c0       	push   0xc002b2d1
c0017884:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017888:	e8 b3 8d fe ff       	call   c0000640 <memcmp>
c001788d:	83 c4 10             	add    esp,0x10
c0017890:	85 c0                	test   eax,eax
c0017892:	0f 94 c0             	sete   al
c0017895:	84 c0                	test   al,al
c0017897:	74 06                	je     c001789f <findRSDP()+0x7a>
c0017899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001789d:	eb 0c                	jmp    c00178ab <findRSDP()+0x86>
c001789f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00178a4:	eb ca                	jmp    c0017870 <findRSDP()+0x4b>
c00178a6:	b8 00 00 00 00       	mov    eax,0x0
c00178ab:	83 c4 1c             	add    esp,0x1c
c00178ae:	c3                   	ret    

c00178af <loadACPITables(unsigned char*)>:
c00178af:	56                   	push   esi
c00178b0:	53                   	push   ebx
c00178b1:	83 ec 44             	sub    esp,0x44
c00178b4:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00178b9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178bf:	83 e0 04             	and    eax,0x4
c00178c2:	84 c0                	test   al,al
c00178c4:	0f 84 05 02 00 00    	je     c0017acf <loadACPITables(unsigned char*)+0x220>
c00178ca:	a0 c0 0b 03 c0       	mov    al,ds:0xc0030bc0
c00178cf:	84 c0                	test   al,al
c00178d1:	74 75                	je     c0017948 <loadACPITables(unsigned char*)+0x99>
c00178d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178d7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00178db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178e2:	83 e8 24             	sub    eax,0x24
c00178e5:	c1 e8 03             	shr    eax,0x3
c00178e8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00178ec:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00178f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178f8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00178fc:	0f 8d b2 00 00 00    	jge    c00179b4 <loadACPITables(unsigned char*)+0x105>
c0017902:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017906:	83 c0 24             	add    eax,0x24
c0017909:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001790d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017911:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017915:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017919:	c1 e0 03             	shl    eax,0x3
c001791c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017920:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017924:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017927:	8b 00                	mov    eax,DWORD PTR [eax]
c0017929:	89 c1                	mov    ecx,eax
c001792b:	a1 ac 09 03 c0       	mov    eax,ds:0xc00309ac
c0017930:	8d 50 01             	lea    edx,[eax+0x1]
c0017933:	89 15 ac 09 03 c0    	mov    DWORD PTR ds:0xc00309ac,edx
c0017939:	89 ca                	mov    edx,ecx
c001793b:	89 14 c5 c4 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf63c],edx
c0017942:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017946:	eb ac                	jmp    c00178f4 <loadACPITables(unsigned char*)+0x45>
c0017948:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001794c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017954:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017957:	83 e8 24             	sub    eax,0x24
c001795a:	c1 e8 02             	shr    eax,0x2
c001795d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017961:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017969:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001796d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017971:	7d 41                	jge    c00179b4 <loadACPITables(unsigned char*)+0x105>
c0017973:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017977:	83 c0 24             	add    eax,0x24
c001797a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017982:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017986:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001798a:	c1 e0 02             	shl    eax,0x2
c001798d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017991:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017995:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017997:	a1 ac 09 03 c0       	mov    eax,ds:0xc00309ac
c001799c:	8d 50 01             	lea    edx,[eax+0x1]
c001799f:	89 15 ac 09 03 c0    	mov    DWORD PTR ds:0xc00309ac,edx
c00179a5:	89 ca                	mov    edx,ecx
c00179a7:	89 14 c5 c4 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf63c],edx
c00179ae:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00179b2:	eb b5                	jmp    c0017969 <loadACPITables(unsigned char*)+0xba>
c00179b4:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00179bc:	a1 ac 09 03 c0       	mov    eax,ds:0xc00309ac
c00179c1:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00179c5:	0f 8d 05 01 00 00    	jge    c0017ad0 <loadACPITables(unsigned char*)+0x221>
c00179cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179cf:	8b 04 c5 c4 09 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf63c]
c00179d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179e6:	25 ff 0f 00 00       	and    eax,0xfff
c00179eb:	89 c6                	mov    esi,eax
c00179ed:	e8 01 a5 ff ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c00179f2:	89 c3                	mov    ebx,eax
c00179f4:	83 ec 0c             	sub    esp,0xc
c00179f7:	6a 01                	push   0x1
c00179f9:	e8 b7 a2 ff ff       	call   c0011cb5 <Virt::allocateKernelVirtualPages(int)>
c00179fe:	83 c4 10             	add    esp,0x10
c0017a01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a05:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a0b:	83 ec 0c             	sub    esp,0xc
c0017a0e:	6a 01                	push   0x1
c0017a10:	6a 01                	push   0x1
c0017a12:	50                   	push   eax
c0017a13:	52                   	push   edx
c0017a14:	53                   	push   ebx
c0017a15:	e8 f0 ab ff ff       	call   c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a1a:	83 c4 20             	add    esp,0x20
c0017a1d:	09 f0                	or     eax,esi
c0017a1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a27:	c1 e0 03             	shl    eax,0x3
c0017a2a:	05 c0 09 03 c0       	add    eax,0xc00309c0
c0017a2f:	83 ec 04             	sub    esp,0x4
c0017a32:	6a 04                	push   0x4
c0017a34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a38:	50                   	push   eax
c0017a39:	e8 06 8d fe ff       	call   c0000744 <memcpy>
c0017a3e:	83 c4 10             	add    esp,0x10
c0017a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a50:	05 00 10 00 00       	add    eax,0x1000
c0017a55:	c1 e8 0c             	shr    eax,0xc
c0017a58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a60:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a67:	25 ff 0f 00 00       	and    eax,0xfff
c0017a6c:	89 c6                	mov    esi,eax
c0017a6e:	e8 80 a4 ff ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c0017a73:	89 c3                	mov    ebx,eax
c0017a75:	83 ec 0c             	sub    esp,0xc
c0017a78:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a7c:	e8 34 a2 ff ff       	call   c0011cb5 <Virt::allocateKernelVirtualPages(int)>
c0017a81:	83 c4 10             	add    esp,0x10
c0017a84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a88:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a8e:	83 ec 0c             	sub    esp,0xc
c0017a91:	6a 01                	push   0x1
c0017a93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017a97:	50                   	push   eax
c0017a98:	52                   	push   edx
c0017a99:	53                   	push   ebx
c0017a9a:	e8 6b ab ff ff       	call   c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a9f:	83 c4 20             	add    esp,0x20
c0017aa2:	09 f0                	or     eax,esi
c0017aa4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017aab:	83 ec 0c             	sub    esp,0xc
c0017aae:	50                   	push   eax
c0017aaf:	e8 fb a4 ff ff       	call   c0011faf <Virt::freeKernelVirtualPages(unsigned long)>
c0017ab4:	83 c4 10             	add    esp,0x10
c0017ab7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017abb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017abf:	89 14 c5 c4 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf63c],edx
c0017ac6:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017aca:	e9 ed fe ff ff       	jmp    c00179bc <loadACPITables(unsigned char*)+0x10d>
c0017acf:	90                   	nop
c0017ad0:	83 c4 44             	add    esp,0x44
c0017ad3:	5b                   	pop    ebx
c0017ad4:	5e                   	pop    esi
c0017ad5:	c3                   	ret    

c0017ad6 <findRSDT(unsigned char*)>:
c0017ad6:	56                   	push   esi
c0017ad7:	53                   	push   ebx
c0017ad8:	83 ec 44             	sub    esp,0x44
c0017adb:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0017ae0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ae6:	83 e0 04             	and    eax,0x4
c0017ae9:	84 c0                	test   al,al
c0017aeb:	75 0a                	jne    c0017af7 <findRSDT(unsigned char*)+0x21>
c0017aed:	b8 00 00 00 00       	mov    eax,0x0
c0017af2:	e9 f7 00 00 00       	jmp    c0017bee <findRSDT(unsigned char*)+0x118>
c0017af7:	83 ec 04             	sub    esp,0x4
c0017afa:	6a 24                	push   0x24
c0017afc:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017b00:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b04:	50                   	push   eax
c0017b05:	e8 3a 8c fe ff       	call   c0000744 <memcpy>
c0017b0a:	83 c4 10             	add    esp,0x10
c0017b0d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017b11:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017b15:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017b1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b25:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b2d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b35:	25 ff 0f 00 00       	and    eax,0xfff
c0017b3a:	89 c6                	mov    esi,eax
c0017b3c:	e8 b2 a3 ff ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c0017b41:	89 c3                	mov    ebx,eax
c0017b43:	83 ec 0c             	sub    esp,0xc
c0017b46:	6a 02                	push   0x2
c0017b48:	e8 68 a1 ff ff       	call   c0011cb5 <Virt::allocateKernelVirtualPages(int)>
c0017b4d:	83 c4 10             	add    esp,0x10
c0017b50:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017b54:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b5a:	83 ec 0c             	sub    esp,0xc
c0017b5d:	6a 01                	push   0x1
c0017b5f:	6a 02                	push   0x2
c0017b61:	50                   	push   eax
c0017b62:	52                   	push   edx
c0017b63:	53                   	push   ebx
c0017b64:	e8 a1 aa ff ff       	call   c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b69:	83 c4 20             	add    esp,0x20
c0017b6c:	09 f0                	or     eax,esi
c0017b6e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b76:	25 ff 0f 00 00       	and    eax,0xfff
c0017b7b:	89 c6                	mov    esi,eax
c0017b7d:	e8 71 a3 ff ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c0017b82:	89 c3                	mov    ebx,eax
c0017b84:	83 ec 0c             	sub    esp,0xc
c0017b87:	6a 02                	push   0x2
c0017b89:	e8 27 a1 ff ff       	call   c0011cb5 <Virt::allocateKernelVirtualPages(int)>
c0017b8e:	83 c4 10             	add    esp,0x10
c0017b91:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b95:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b9b:	83 ec 0c             	sub    esp,0xc
c0017b9e:	6a 01                	push   0x1
c0017ba0:	6a 02                	push   0x2
c0017ba2:	50                   	push   eax
c0017ba3:	52                   	push   edx
c0017ba4:	53                   	push   ebx
c0017ba5:	e8 60 aa ff ff       	call   c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017baa:	83 c4 20             	add    esp,0x20
c0017bad:	09 f0                	or     eax,esi
c0017baf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bb3:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017bb8:	75 11                	jne    c0017bcb <findRSDT(unsigned char*)+0xf5>
c0017bba:	c6 05 c0 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030bc0,0x0
c0017bc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017bc9:	eb 1f                	jmp    c0017bea <findRSDT(unsigned char*)+0x114>
c0017bcb:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017bd0:	75 11                	jne    c0017be3 <findRSDT(unsigned char*)+0x10d>
c0017bd2:	c6 05 c0 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030bc0,0x1
c0017bd9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bdd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017be1:	eb 07                	jmp    c0017bea <findRSDT(unsigned char*)+0x114>
c0017be3:	b8 00 00 00 00       	mov    eax,0x0
c0017be8:	eb 04                	jmp    c0017bee <findRSDT(unsigned char*)+0x118>
c0017bea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017bee:	83 c4 44             	add    esp,0x44
c0017bf1:	5b                   	pop    ebx
c0017bf2:	5e                   	pop    esi
c0017bf3:	c3                   	ret    

c0017bf4 <findDataTable(unsigned char*, char*)>:
c0017bf4:	83 ec 1c             	sub    esp,0x1c
c0017bf7:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0017bfc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c02:	83 e0 04             	and    eax,0x4
c0017c05:	84 c0                	test   al,al
c0017c07:	75 07                	jne    c0017c10 <findDataTable(unsigned char*, char*)+0x1c>
c0017c09:	b8 00 00 00 00       	mov    eax,0x0
c0017c0e:	eb 7c                	jmp    c0017c8c <findDataTable(unsigned char*, char*)+0x98>
c0017c10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c18:	a1 ac 09 03 c0       	mov    eax,ds:0xc00309ac
c0017c1d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017c21:	7d 3a                	jge    c0017c5d <findDataTable(unsigned char*, char*)+0x69>
c0017c23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c27:	c1 e0 03             	shl    eax,0x3
c0017c2a:	05 c0 09 03 c0       	add    eax,0xc00309c0
c0017c2f:	83 ec 04             	sub    esp,0x4
c0017c32:	6a 04                	push   0x4
c0017c34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c38:	50                   	push   eax
c0017c39:	e8 02 8a fe ff       	call   c0000640 <memcmp>
c0017c3e:	83 c4 10             	add    esp,0x10
c0017c41:	85 c0                	test   eax,eax
c0017c43:	0f 94 c0             	sete   al
c0017c46:	84 c0                	test   al,al
c0017c48:	74 0d                	je     c0017c57 <findDataTable(unsigned char*, char*)+0x63>
c0017c4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c4e:	8b 04 c5 c4 09 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf63c]
c0017c55:	eb 35                	jmp    c0017c8c <findDataTable(unsigned char*, char*)+0x98>
c0017c57:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017c5b:	eb bb                	jmp    c0017c18 <findDataTable(unsigned char*, char*)+0x24>
c0017c5d:	a0 c0 0b 03 c0       	mov    al,ds:0xc0030bc0
c0017c62:	84 c0                	test   al,al
c0017c64:	74 07                	je     c0017c6d <findDataTable(unsigned char*, char*)+0x79>
c0017c66:	b8 58 00 00 00       	mov    eax,0x58
c0017c6b:	eb 05                	jmp    c0017c72 <findDataTable(unsigned char*, char*)+0x7e>
c0017c6d:	b8 52 00 00 00       	mov    eax,0x52
c0017c72:	83 ec 04             	sub    esp,0x4
c0017c75:	50                   	push   eax
c0017c76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c7a:	68 0c b4 02 c0       	push   0xc002b40c
c0017c7f:	e8 02 b2 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0017c84:	83 c4 10             	add    esp,0x10
c0017c87:	b8 00 00 00 00       	mov    eax,0x0
c0017c8c:	83 c4 1c             	add    esp,0x1c
c0017c8f:	c3                   	ret    

c0017c90 <scanMADT()>:
c0017c90:	53                   	push   ebx
c0017c91:	83 ec 38             	sub    esp,0x38
c0017c94:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0017c99:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c9f:	83 e0 04             	and    eax,0x4
c0017ca2:	84 c0                	test   al,al
c0017ca4:	0f 84 63 04 00 00    	je     c001810d <scanMADT()+0x47d>
c0017caa:	e8 76 fb ff ff       	call   c0017825 <findRSDP()>
c0017caf:	a3 cc 0b 03 c0       	mov    ds:0xc0030bcc,eax
c0017cb4:	a1 cc 0b 03 c0       	mov    eax,ds:0xc0030bcc
c0017cb9:	85 c0                	test   eax,eax
c0017cbb:	75 19                	jne    c0017cd6 <scanMADT()+0x46>
c0017cbd:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0017cc2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017cc8:	83 e2 fb             	and    edx,0xfffffffb
c0017ccb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017cd1:	e9 3b 04 00 00       	jmp    c0018111 <scanMADT()+0x481>
c0017cd6:	a1 cc 0b 03 c0       	mov    eax,ds:0xc0030bcc
c0017cdb:	83 ec 0c             	sub    esp,0xc
c0017cde:	50                   	push   eax
c0017cdf:	e8 f2 fd ff ff       	call   c0017ad6 <findRSDT(unsigned char*)>
c0017ce4:	83 c4 10             	add    esp,0x10
c0017ce7:	a3 c8 0b 03 c0       	mov    ds:0xc0030bc8,eax
c0017cec:	a1 c8 0b 03 c0       	mov    eax,ds:0xc0030bc8
c0017cf1:	85 c0                	test   eax,eax
c0017cf3:	75 19                	jne    c0017d0e <scanMADT()+0x7e>
c0017cf5:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0017cfa:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d00:	83 e2 fb             	and    edx,0xfffffffb
c0017d03:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d09:	e9 03 04 00 00       	jmp    c0018111 <scanMADT()+0x481>
c0017d0e:	a1 c8 0b 03 c0       	mov    eax,ds:0xc0030bc8
c0017d13:	83 ec 0c             	sub    esp,0xc
c0017d16:	50                   	push   eax
c0017d17:	e8 93 fb ff ff       	call   c00178af <loadACPITables(unsigned char*)>
c0017d1c:	83 c4 10             	add    esp,0x10
c0017d1f:	a1 c8 0b 03 c0       	mov    eax,ds:0xc0030bc8
c0017d24:	83 ec 08             	sub    esp,0x8
c0017d27:	68 da b2 02 c0       	push   0xc002b2da
c0017d2c:	50                   	push   eax
c0017d2d:	e8 c2 fe ff ff       	call   c0017bf4 <findDataTable(unsigned char*, char*)>
c0017d32:	83 c4 10             	add    esp,0x10
c0017d35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017d39:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017d3e:	75 19                	jne    c0017d59 <scanMADT()+0xc9>
c0017d40:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0017d45:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d4b:	83 e2 fe             	and    edx,0xfffffffe
c0017d4e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d54:	e9 b8 03 00 00       	jmp    c0018111 <scanMADT()+0x481>
c0017d59:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017d61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d68:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017d6c:	0f 87 9f 03 00 00    	ja     c0018111 <scanMADT()+0x481>
c0017d72:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017d7a:	0f 87 91 03 00 00    	ja     c0018111 <scanMADT()+0x481>
c0017d80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d84:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017d88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d8c:	8d 50 01             	lea    edx,[eax+0x1]
c0017d8f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d97:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d9b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017d9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017da3:	8d 50 01             	lea    edx,[eax+0x1]
c0017da6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017daa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dae:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017db2:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017db6:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017dbb:	0f 86 4f 03 00 00    	jbe    c0018110 <scanMADT()+0x480>
c0017dc1:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017dc6:	75 57                	jne    c0017e1f <scanMADT()+0x18f>
c0017dc8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dcc:	8d 50 01             	lea    edx,[eax+0x1]
c0017dcf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dd3:	8a 15 c0 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030dc0
c0017dd9:	0f b6 d2             	movzx  edx,dl
c0017ddc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017de0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017de4:	88 82 00 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf200],al
c0017dea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dee:	8d 50 01             	lea    edx,[eax+0x1]
c0017df1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017df5:	8a 15 c0 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030dc0
c0017dfb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017dfe:	88 0d c0 0d 03 c0    	mov    BYTE PTR ds:0xc0030dc0,cl
c0017e04:	0f b6 d2             	movzx  edx,dl
c0017e07:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e0b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e0f:	88 82 e0 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf220],al
c0017e15:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e1a:	e9 da 02 00 00       	jmp    c00180f9 <scanMADT()+0x469>
c0017e1f:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017e24:	0f 85 14 01 00 00    	jne    c0017f3e <scanMADT()+0x2ae>
c0017e2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e2e:	8d 50 01             	lea    edx,[eax+0x1]
c0017e31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e35:	8a 15 80 0c 03 c0    	mov    dl,BYTE PTR ds:0xc0030c80
c0017e3b:	0f b6 d2             	movzx  edx,dl
c0017e3e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e42:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e46:	88 82 a0 0c 03 c0    	mov    BYTE PTR [edx-0x3ffcf360],al
c0017e4c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017e50:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e58:	01 d0                	add    eax,edx
c0017e5a:	83 c0 2c             	add    eax,0x2c
c0017e5d:	8a 00                	mov    al,BYTE PTR [eax]
c0017e5f:	0f b6 d0             	movzx  edx,al
c0017e62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e66:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e6d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e71:	0f b6 c0             	movzx  eax,al
c0017e74:	c1 e0 08             	shl    eax,0x8
c0017e77:	89 d1                	mov    ecx,edx
c0017e79:	09 c1                	or     ecx,eax
c0017e7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e7f:	8d 50 02             	lea    edx,[eax+0x2]
c0017e82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e86:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e8a:	0f b6 c0             	movzx  eax,al
c0017e8d:	c1 e0 10             	shl    eax,0x10
c0017e90:	09 c1                	or     ecx,eax
c0017e92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e96:	8d 50 03             	lea    edx,[eax+0x3]
c0017e99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e9d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ea1:	0f b6 c0             	movzx  eax,al
c0017ea4:	c1 e0 18             	shl    eax,0x18
c0017ea7:	09 c1                	or     ecx,eax
c0017ea9:	89 ca                	mov    edx,ecx
c0017eab:	a0 80 0c 03 c0       	mov    al,ds:0xc0030c80
c0017eb0:	0f b6 c0             	movzx  eax,al
c0017eb3:	89 14 85 c0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf340],edx
c0017eba:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ebf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ec3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec7:	01 d0                	add    eax,edx
c0017ec9:	83 c0 2c             	add    eax,0x2c
c0017ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0017ece:	0f b6 d0             	movzx  edx,al
c0017ed1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed5:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ed8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017edc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ee0:	0f b6 c0             	movzx  eax,al
c0017ee3:	c1 e0 08             	shl    eax,0x8
c0017ee6:	89 d1                	mov    ecx,edx
c0017ee8:	09 c1                	or     ecx,eax
c0017eea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eee:	8d 50 02             	lea    edx,[eax+0x2]
c0017ef1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ef5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ef9:	0f b6 c0             	movzx  eax,al
c0017efc:	c1 e0 10             	shl    eax,0x10
c0017eff:	09 c1                	or     ecx,eax
c0017f01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f05:	8d 50 03             	lea    edx,[eax+0x3]
c0017f08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f0c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f10:	0f b6 c0             	movzx  eax,al
c0017f13:	c1 e0 18             	shl    eax,0x18
c0017f16:	09 c1                	or     ecx,eax
c0017f18:	89 ca                	mov    edx,ecx
c0017f1a:	a0 80 0c 03 c0       	mov    al,ds:0xc0030c80
c0017f1f:	0f b6 c0             	movzx  eax,al
c0017f22:	89 14 85 40 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2c0],edx
c0017f29:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f2e:	a0 80 0c 03 c0       	mov    al,ds:0xc0030c80
c0017f33:	40                   	inc    eax
c0017f34:	a2 80 0c 03 c0       	mov    ds:0xc0030c80,al
c0017f39:	e9 bb 01 00 00       	jmp    c00180f9 <scanMADT()+0x469>
c0017f3e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017f43:	0f 85 e9 00 00 00    	jne    c0018032 <scanMADT()+0x3a2>
c0017f49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f4d:	8d 50 01             	lea    edx,[eax+0x1]
c0017f50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f54:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f58:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f5c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017f60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f64:	8d 50 01             	lea    edx,[eax+0x1]
c0017f67:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f6f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f73:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017f77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7f:	01 d0                	add    eax,edx
c0017f81:	83 c0 2c             	add    eax,0x2c
c0017f84:	8a 00                	mov    al,BYTE PTR [eax]
c0017f86:	0f b6 d0             	movzx  edx,al
c0017f89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f8d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f94:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f98:	0f b6 c0             	movzx  eax,al
c0017f9b:	c1 e0 08             	shl    eax,0x8
c0017f9e:	89 d1                	mov    ecx,edx
c0017fa0:	09 c1                	or     ecx,eax
c0017fa2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa6:	8d 50 02             	lea    edx,[eax+0x2]
c0017fa9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fb1:	0f b6 c0             	movzx  eax,al
c0017fb4:	c1 e0 10             	shl    eax,0x10
c0017fb7:	09 c1                	or     ecx,eax
c0017fb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fbd:	8d 50 03             	lea    edx,[eax+0x3]
c0017fc0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fc8:	0f b6 c0             	movzx  eax,al
c0017fcb:	c1 e0 18             	shl    eax,0x18
c0017fce:	09 c8                	or     eax,ecx
c0017fd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017fd4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fdd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe1:	01 d0                	add    eax,edx
c0017fe3:	83 c0 2c             	add    eax,0x2c
c0017fe6:	8a 00                	mov    al,BYTE PTR [eax]
c0017fe8:	0f b6 c0             	movzx  eax,al
c0017feb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017fef:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ff2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ff6:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017ffa:	0f b6 d2             	movzx  edx,dl
c0017ffd:	c1 e2 08             	shl    edx,0x8
c0018000:	09 d0                	or     eax,edx
c0018002:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018007:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001800c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018011:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018015:	88 90 40 d5 02 c0    	mov    BYTE PTR [eax-0x3ffd2ac0],dl
c001801b:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018020:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018025:	66 89 84 12 60 0c 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf3a0],ax
c001802d:	e9 c7 00 00 00       	jmp    c00180f9 <scanMADT()+0x469>
c0018032:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018037:	0f 85 b0 00 00 00    	jne    c00180ed <scanMADT()+0x45d>
c001803d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018041:	8d 50 01             	lea    edx,[eax+0x1]
c0018044:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018048:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001804c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018050:	0f b6 c0             	movzx  eax,al
c0018053:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018057:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001805b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001805f:	01 d0                	add    eax,edx
c0018061:	83 c0 2c             	add    eax,0x2c
c0018064:	8a 00                	mov    al,BYTE PTR [eax]
c0018066:	0f b6 d0             	movzx  edx,al
c0018069:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018070:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018074:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018078:	0f b6 c0             	movzx  eax,al
c001807b:	c1 e0 08             	shl    eax,0x8
c001807e:	09 d0                	or     eax,edx
c0018080:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018084:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018089:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001808d:	8d 50 01             	lea    edx,[eax+0x1]
c0018090:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018094:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018098:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001809c:	0f b6 c0             	movzx  eax,al
c001809f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a7:	c1 e0 08             	shl    eax,0x8
c00180aa:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00180ae:	89 c1                	mov    ecx,eax
c00180b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180b4:	c1 e0 18             	shl    eax,0x18
c00180b7:	89 c3                	mov    ebx,eax
c00180b9:	a1 d0 0b 03 c0       	mov    eax,ds:0xc0030bd0
c00180be:	8d 50 01             	lea    edx,[eax+0x1]
c00180c1:	89 15 d0 0b 03 c0    	mov    DWORD PTR ds:0xc0030bd0,edx
c00180c7:	09 d9                	or     ecx,ebx
c00180c9:	89 ca                	mov    edx,ecx
c00180cb:	89 14 85 e0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf420],edx
c00180d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00180d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00180da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180de:	68 3c b4 02 c0       	push   0xc002b43c
c00180e3:	e8 9e ad ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00180e8:	83 c4 10             	add    esp,0x10
c00180eb:	eb 0c                	jmp    c00180f9 <scanMADT()+0x469>
c00180ed:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00180f2:	75 05                	jne    c00180f9 <scanMADT()+0x469>
c00180f4:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00180f9:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00180fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018102:	01 d0                	add    eax,edx
c0018104:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018108:	e9 54 fc ff ff       	jmp    c0017d61 <scanMADT()+0xd1>
c001810d:	90                   	nop
c001810e:	eb 01                	jmp    c0018111 <scanMADT()+0x481>
c0018110:	90                   	nop
c0018111:	83 c4 38             	add    esp,0x38
c0018114:	5b                   	pop    ebx
c0018115:	c3                   	ret    

c0018116 <ACPI::ACPI()>:
c0018116:	83 ec 0c             	sub    esp,0xc
c0018119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001811d:	83 ec 08             	sub    esp,0x8
c0018120:	68 df b2 02 c0       	push   0xc002b2df
c0018125:	50                   	push   eax
c0018126:	e8 71 c3 ff ff       	call   c001449c <Device::Device(char const*)>
c001812b:	83 c4 10             	add    esp,0x10
c001812e:	ba b0 b4 02 c0       	mov    edx,0xc002b4b0
c0018133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018137:	89 10                	mov    DWORD PTR [eax],edx
c0018139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001813d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018148:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018156:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018164:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001816b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001816f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018176:	e8 15 fb ff ff       	call   c0017c90 <scanMADT()>
c001817b:	90                   	nop
c001817c:	83 c4 0c             	add    esp,0xc
c001817f:	c3                   	ret    

c0018180 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018180:	83 ec 2c             	sub    esp,0x2c
c0018183:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018187:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001818b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001818f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018193:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018198:	88 d0                	mov    al,dl
c001819a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001819e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00181a3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00181ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181af:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00181b5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00181b9:	0f 8d 97 00 00 00    	jge    c0018256 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00181bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181c7:	83 c2 2a             	add    edx,0x2a
c00181ca:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00181ce:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00181d3:	75 78                	jne    c001824d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00181d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181dd:	83 c2 2a             	add    edx,0x2a
c00181e0:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00181e4:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00181e8:	75 63                	jne    c001824d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00181ea:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00181ef:	74 3a                	je     c001822b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00181f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181f9:	83 c2 2a             	add    edx,0x2a
c00181fc:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018200:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018204:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018207:	39 c2                	cmp    edx,eax
c0018209:	74 10                	je     c001821b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001820b:	83 ec 0c             	sub    esp,0xc
c001820e:	68 78 b4 02 c0       	push   0xc002b478
c0018213:	e8 13 23 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0018218:	83 c4 10             	add    esp,0x10
c001821b:	83 ec 0c             	sub    esp,0xc
c001821e:	68 e4 b2 02 c0       	push   0xc002b2e4
c0018223:	e8 03 23 00 00       	call   c001a52b <Krnl::panic(char const*)>
c0018228:	83 c4 10             	add    esp,0x10
c001822b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001822f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018233:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018237:	83 c2 2a             	add    edx,0x2a
c001823a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001823e:	8b 02                	mov    eax,DWORD PTR [edx]
c0018240:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018243:	89 01                	mov    DWORD PTR [ecx],eax
c0018245:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018248:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001824d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018251:	e9 55 ff ff ff       	jmp    c00181ab <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018256:	90                   	nop
c0018257:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001825b:	83 c4 2c             	add    esp,0x2c
c001825e:	c2 04 00             	ret    0x4
c0018261:	90                   	nop

c0018262 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018262:	83 ec 1c             	sub    esp,0x1c
c0018265:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018269:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001826d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018271:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018276:	88 c8                	mov    al,cl
c0018278:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001827c:	88 d0                	mov    al,dl
c001827e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018286:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001828c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018290:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018293:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018297:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001829b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001829f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00182a9:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00182ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182b0:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00182b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182b9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00182bf:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00182c3:	8d 48 01             	lea    ecx,[eax+0x1]
c00182c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182ca:	83 c2 2a             	add    edx,0x2a
c00182cd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00182d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182d5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00182db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182df:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00182e2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00182e6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00182ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182ee:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182f4:	8d 50 01             	lea    edx,[eax+0x1]
c00182f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182fb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018305:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001830b:	3d 00 02 00 00       	cmp    eax,0x200
c0018310:	75 10                	jne    c0018322 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018312:	83 ec 0c             	sub    esp,0xc
c0018315:	68 f3 b2 02 c0       	push   0xc002b2f3
c001831a:	e8 0c 22 00 00       	call   c001a52b <Krnl::panic(char const*)>
c001831f:	83 c4 10             	add    esp,0x10
c0018322:	90                   	nop
c0018323:	83 c4 1c             	add    esp,0x1c
c0018326:	c3                   	ret    
c0018327:	90                   	nop

c0018328 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018328:	b8 00 00 00 00       	mov    eax,0x0
c001832d:	c3                   	ret    

c001832e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001832e:	83 ec 1c             	sub    esp,0x1c
c0018331:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018335:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018338:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001833c:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0018341:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018346:	83 ec 08             	sub    esp,0x8
c0018349:	52                   	push   edx
c001834a:	50                   	push   eax
c001834b:	e8 08 6b ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018350:	83 c4 10             	add    esp,0x10
c0018353:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018357:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c001835c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018361:	83 ec 04             	sub    esp,0x4
c0018364:	6a 01                	push   0x1
c0018366:	52                   	push   edx
c0018367:	50                   	push   eax
c0018368:	e8 01 6c ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c001836d:	83 c4 10             	add    esp,0x10
c0018370:	90                   	nop
c0018371:	83 c4 1c             	add    esp,0x1c
c0018374:	c3                   	ret    
c0018375:	90                   	nop

c0018376 <ACPI::open(int, int, void*)>:
c0018376:	53                   	push   ebx
c0018377:	83 ec 28             	sub    esp,0x28
c001837a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001837e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018385:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018389:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018390:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0018395:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001839b:	83 e0 04             	and    eax,0x4
c001839e:	84 c0                	test   al,al
c00183a0:	74 47                	je     c00183e9 <ACPI::open(int, int, void*)+0x73>
c00183a2:	a1 c8 0b 03 c0       	mov    eax,ds:0xc0030bc8
c00183a7:	83 ec 08             	sub    esp,0x8
c00183aa:	68 10 b3 02 c0       	push   0xc002b310
c00183af:	50                   	push   eax
c00183b0:	e8 3f f8 ff ff       	call   c0017bf4 <findDataTable(unsigned char*, char*)>
c00183b5:	83 c4 10             	add    esp,0x10
c00183b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00183bc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00183c1:	74 26                	je     c00183e9 <ACPI::open(int, int, void*)+0x73>
c00183c3:	83 ec 0c             	sub    esp,0xc
c00183c6:	68 15 b3 02 c0       	push   0xc002b315
c00183cb:	e8 b6 aa ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00183d0:	83 c4 10             	add    esp,0x10
c00183d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d7:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183e2:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00183e9:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00183f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183f5:	8a 00                	mov    al,BYTE PTR [eax]
c00183f7:	3c 01                	cmp    al,0x1
c00183f9:	75 28                	jne    c0018423 <ACPI::open(int, int, void*)+0xad>
c00183fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ff:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018406:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001840a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018411:	83 ec 0c             	sub    esp,0xc
c0018414:	68 26 b3 02 c0       	push   0xc002b326
c0018419:	e8 68 aa ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001841e:	83 c4 10             	add    esp,0x10
c0018421:	eb 25                	jmp    c0018448 <ACPI::open(int, int, void*)+0xd2>
c0018423:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018427:	8a 00                	mov    al,BYTE PTR [eax]
c0018429:	3c 02                	cmp    al,0x2
c001842b:	75 1b                	jne    c0018448 <ACPI::open(int, int, void*)+0xd2>
c001842d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018431:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018438:	83 ec 0c             	sub    esp,0xc
c001843b:	68 2e b3 02 c0       	push   0xc002b32e
c0018440:	e8 41 aa ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018445:	83 c4 10             	add    esp,0x10
c0018448:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001844c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018452:	83 f0 01             	xor    eax,0x1
c0018455:	84 c0                	test   al,al
c0018457:	74 6a                	je     c00184c3 <ACPI::open(int, int, void*)+0x14d>
c0018459:	83 ec 0c             	sub    esp,0xc
c001845c:	68 36 b3 02 c0       	push   0xc002b336
c0018461:	e8 20 aa ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018466:	83 c4 10             	add    esp,0x10
c0018469:	e8 e2 7c fe ff       	call   c0000150 <manualPCIProbe>
c001846e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018472:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018477:	75 28                	jne    c00184a1 <ACPI::open(int, int, void*)+0x12b>
c0018479:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001847d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018484:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018488:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001848f:	83 ec 0c             	sub    esp,0xc
c0018492:	68 44 b3 02 c0       	push   0xc002b344
c0018497:	e8 ea a9 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001849c:	83 c4 10             	add    esp,0x10
c001849f:	eb 22                	jmp    c00184c3 <ACPI::open(int, int, void*)+0x14d>
c00184a1:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00184a6:	75 1b                	jne    c00184c3 <ACPI::open(int, int, void*)+0x14d>
c00184a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ac:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184b3:	83 ec 0c             	sub    esp,0xc
c00184b6:	68 4e b3 02 c0       	push   0xc002b34e
c00184bb:	e8 c6 a9 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00184c0:	83 c4 10             	add    esp,0x10
c00184c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184c7:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00184cd:	84 c0                	test   al,al
c00184cf:	74 13                	je     c00184e4 <ACPI::open(int, int, void*)+0x16e>
c00184d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d5:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00184db:	83 f0 01             	xor    eax,0x1
c00184de:	0f b6 c0             	movzx  eax,al
c00184e1:	40                   	inc    eax
c00184e2:	eb 05                	jmp    c00184e9 <ACPI::open(int, int, void*)+0x173>
c00184e4:	b8 00 00 00 00       	mov    eax,0x0
c00184e9:	83 ec 08             	sub    esp,0x8
c00184ec:	50                   	push   eax
c00184ed:	68 58 b3 02 c0       	push   0xc002b358
c00184f2:	e8 8f a9 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00184f7:	83 c4 10             	add    esp,0x10
c00184fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184fe:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018504:	84 c0                	test   al,al
c0018506:	74 67                	je     c001856f <ACPI::open(int, int, void*)+0x1f9>
c0018508:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018510:	83 ec 0c             	sub    esp,0xc
c0018513:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018517:	e8 24 73 ff ff       	call   c000f840 <malloc>
c001851c:	83 c4 10             	add    esp,0x10
c001851f:	89 c3                	mov    ebx,eax
c0018521:	83 ec 0c             	sub    esp,0xc
c0018524:	53                   	push   ebx
c0018525:	e8 fa a2 00 00       	call   c0022824 <PCI::PCI()>
c001852a:	83 c4 10             	add    esp,0x10
c001852d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018531:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018535:	83 ec 08             	sub    esp,0x8
c0018538:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001853c:	50                   	push   eax
c001853d:	e8 6a bd ff ff       	call   c00142ac <Device::addChild(Device*)>
c0018542:	83 c4 10             	add    esp,0x10
c0018545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018549:	8b 00                	mov    eax,DWORD PTR [eax]
c001854b:	83 c0 08             	add    eax,0x8
c001854e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018550:	6a 00                	push   0x0
c0018552:	6a 00                	push   0x0
c0018554:	6a 00                	push   0x0
c0018556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001855a:	ff d0                	call   eax
c001855c:	83 c4 10             	add    esp,0x10
c001855f:	83 ec 0c             	sub    esp,0xc
c0018562:	68 61 b3 02 c0       	push   0xc002b361
c0018567:	e8 1a a9 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001856c:	83 c4 10             	add    esp,0x10
c001856f:	e8 6e 95 ff ff       	call   c0011ae2 <Virt::swappingSetup()>
c0018574:	83 ec 0c             	sub    esp,0xc
c0018577:	68 6c b3 02 c0       	push   0xc002b36c
c001857c:	e8 80 46 00 00       	call   c001cc01 <Thr::loadKernelSymbolTable(char const*)>
c0018581:	83 c4 10             	add    esp,0x10
c0018584:	8b 1d e8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2e8
c001858a:	83 ec 08             	sub    esp,0x8
c001858d:	6a 01                	push   0x1
c001858f:	68 8a b3 02 c0       	push   0xc002b38a
c0018594:	e8 c5 50 00 00       	call   c001d65e <Thr::loadDLL(char const*, bool)>
c0018599:	83 c4 10             	add    esp,0x10
c001859c:	83 ec 08             	sub    esp,0x8
c001859f:	53                   	push   ebx
c00185a0:	50                   	push   eax
c00185a1:	e8 07 53 00 00       	call   c001d8ad <Thr::executeDLL(unsigned long, void*)>
c00185a6:	83 c4 10             	add    esp,0x10
c00185a9:	8b 1d e8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2e8
c00185af:	83 ec 08             	sub    esp,0x8
c00185b2:	6a 01                	push   0x1
c00185b4:	68 a7 b3 02 c0       	push   0xc002b3a7
c00185b9:	e8 a0 50 00 00       	call   c001d65e <Thr::loadDLL(char const*, bool)>
c00185be:	83 c4 10             	add    esp,0x10
c00185c1:	83 ec 08             	sub    esp,0x8
c00185c4:	53                   	push   ebx
c00185c5:	50                   	push   eax
c00185c6:	e8 e2 52 00 00       	call   c001d8ad <Thr::executeDLL(unsigned long, void*)>
c00185cb:	83 c4 10             	add    esp,0x10
c00185ce:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00185d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00185d9:	83 e0 04             	and    eax,0x4
c00185dc:	84 c0                	test   al,al
c00185de:	0f 84 d2 00 00 00    	je     c00186b6 <ACPI::open(int, int, void*)+0x340>
c00185e4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00185eb:	83 ec 0c             	sub    esp,0xc
c00185ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00185f2:	e8 49 72 ff ff       	call   c000f840 <malloc>
c00185f7:	83 c4 10             	add    esp,0x10
c00185fa:	89 c3                	mov    ebx,eax
c00185fc:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c0018601:	83 ec 04             	sub    esp,0x4
c0018604:	50                   	push   eax
c0018605:	68 c4 b3 02 c0       	push   0xc002b3c4
c001860a:	53                   	push   ebx
c001860b:	e8 ce ad ff ff       	call   c00133de <File::File(char const*, Process*)>
c0018610:	83 c4 10             	add    esp,0x10
c0018613:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018617:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001861c:	74 17                	je     c0018635 <ACPI::open(int, int, void*)+0x2bf>
c001861e:	83 ec 0c             	sub    esp,0xc
c0018621:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018625:	e8 86 b0 ff ff       	call   c00136b0 <File::exists()>
c001862a:	83 c4 10             	add    esp,0x10
c001862d:	84 c0                	test   al,al
c001862f:	74 04                	je     c0018635 <ACPI::open(int, int, void*)+0x2bf>
c0018631:	b0 01                	mov    al,0x1
c0018633:	eb 02                	jmp    c0018637 <ACPI::open(int, int, void*)+0x2c1>
c0018635:	b0 00                	mov    al,0x0
c0018637:	84 c0                	test   al,al
c0018639:	74 22                	je     c001865d <ACPI::open(int, int, void*)+0x2e7>
c001863b:	83 ec 08             	sub    esp,0x8
c001863e:	6a 01                	push   0x1
c0018640:	68 c4 b3 02 c0       	push   0xc002b3c4
c0018645:	e8 14 50 00 00       	call   c001d65e <Thr::loadDLL(char const*, bool)>
c001864a:	83 c4 10             	add    esp,0x10
c001864d:	83 ec 08             	sub    esp,0x8
c0018650:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018654:	50                   	push   eax
c0018655:	e8 53 52 00 00       	call   c001d8ad <Thr::executeDLL(unsigned long, void*)>
c001865a:	83 c4 10             	add    esp,0x10
c001865d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018662:	74 1e                	je     c0018682 <ACPI::open(int, int, void*)+0x30c>
c0018664:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018669:	74 17                	je     c0018682 <ACPI::open(int, int, void*)+0x30c>
c001866b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001866f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018671:	83 c0 08             	add    eax,0x8
c0018674:	8b 00                	mov    eax,DWORD PTR [eax]
c0018676:	83 ec 0c             	sub    esp,0xc
c0018679:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001867d:	ff d0                	call   eax
c001867f:	83 c4 10             	add    esp,0x10
c0018682:	a1 c8 0b 03 c0       	mov    eax,ds:0xc0030bc8
c0018687:	83 ec 08             	sub    esp,0x8
c001868a:	68 e1 b3 02 c0       	push   0xc002b3e1
c001868f:	50                   	push   eax
c0018690:	e8 5f f5 ff ff       	call   c0017bf4 <findDataTable(unsigned char*, char*)>
c0018695:	83 c4 10             	add    esp,0x10
c0018698:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001869c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00186a1:	74 13                	je     c00186b6 <ACPI::open(int, int, void*)+0x340>
c00186a3:	83 ec 08             	sub    esp,0x8
c00186a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00186aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00186ae:	e8 7b fc ff ff       	call   c001832e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00186b3:	83 c4 10             	add    esp,0x10
c00186b6:	b8 00 00 00 00       	mov    eax,0x0
c00186bb:	83 c4 28             	add    esp,0x28
c00186be:	5b                   	pop    ebx
c00186bf:	c3                   	ret    

c00186c0 <ACPI::sleep()>:
c00186c0:	83 ec 0c             	sub    esp,0xc
c00186c3:	a1 a0 09 03 c0       	mov    eax,ds:0xc00309a0
c00186c8:	85 c0                	test   eax,eax
c00186ca:	74 07                	je     c00186d3 <ACPI::sleep()+0x13>
c00186cc:	a1 a0 09 03 c0       	mov    eax,ds:0xc00309a0
c00186d1:	ff d0                	call   eax
c00186d3:	90                   	nop
c00186d4:	83 c4 0c             	add    esp,0xc
c00186d7:	c3                   	ret    

c00186d8 <CPU::close(int, int, void*)>:
c00186d8:	31 c0                	xor    eax,eax
c00186da:	c3                   	ret    
c00186db:	90                   	nop

c00186dc <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00186dc:	55                   	push   ebp
c00186dd:	57                   	push   edi
c00186de:	56                   	push   esi
c00186df:	53                   	push   ebx
c00186e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00186e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186e8:	89 ce                	mov    esi,ecx
c00186ea:	89 d5                	mov    ebp,edx
c00186ec:	80 f9 04             	cmp    cl,0x4
c00186ef:	75 28                	jne    c0018719 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00186f1:	8d 42 f9             	lea    eax,[edx-0x7]
c00186f4:	3c 03                	cmp    al,0x3
c00186f6:	0f 86 63 01 00 00    	jbe    c001885f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00186fc:	80 fa 03             	cmp    dl,0x3
c00186ff:	0f 84 5a 01 00 00    	je     c001885f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018705:	8d 7a f2             	lea    edi,[edx-0xe]
c0018708:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c001870d:	89 fb                	mov    ebx,edi
c001870f:	80 fb 01             	cmp    bl,0x1
c0018712:	77 4e                	ja     c0018762 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018714:	e9 52 01 00 00       	jmp    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018719:	80 f9 05             	cmp    cl,0x5
c001871c:	75 4d                	jne    c001876b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001871e:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018723:	80 fa 03             	cmp    dl,0x3
c0018726:	0f 86 3f 01 00 00    	jbe    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001872c:	8d 7a fa             	lea    edi,[edx-0x6]
c001872f:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018734:	89 fb                	mov    ebx,edi
c0018736:	80 fb 01             	cmp    bl,0x1
c0018739:	0f 86 2c 01 00 00    	jbe    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001873f:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018744:	80 fa 08             	cmp    dl,0x8
c0018747:	0f 84 1e 01 00 00    	je     c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001874d:	89 d7                	mov    edi,edx
c001874f:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018754:	83 e7 fb             	and    edi,0xfffffffb
c0018757:	89 fb                	mov    ebx,edi
c0018759:	80 fb 09             	cmp    bl,0x9
c001875c:	0f 84 09 01 00 00    	je     c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018762:	31 c0                	xor    eax,eax
c0018764:	89 eb                	mov    ebx,ebp
c0018766:	0f b6 fb             	movzx  edi,bl
c0018769:	eb 30                	jmp    c001879b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001876b:	31 c0                	xor    eax,eax
c001876d:	80 f9 06             	cmp    cl,0x6
c0018770:	75 f2                	jne    c0018764 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018772:	80 fa 0a             	cmp    dl,0xa
c0018775:	77 ed                	ja     c0018764 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018777:	bf de 05 00 00       	mov    edi,0x5de
c001877c:	0f a3 d7             	bt     edi,edx
c001877f:	73 e3                	jae    c0018764 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018781:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018786:	e9 e0 00 00 00       	jmp    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001878b:	39 c7                	cmp    edi,eax
c001878d:	0f 84 d3 00 00 00    	je     c0018866 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018793:	40                   	inc    eax
c0018794:	3d d0 00 00 00       	cmp    eax,0xd0
c0018799:	74 09                	je     c00187a4 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001879b:	89 f3                	mov    ebx,esi
c001879d:	80 fb 0f             	cmp    bl,0xf
c00187a0:	75 f1                	jne    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00187a2:	eb e7                	jmp    c001878b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00187a4:	80 f9 10             	cmp    cl,0x10
c00187a7:	75 14                	jne    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00187a9:	8d 42 fc             	lea    eax,[edx-0x4]
c00187ac:	83 e0 fb             	and    eax,0xfffffffb
c00187af:	3c 02                	cmp    al,0x2
c00187b1:	76 34                	jbe    c00187e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00187b3:	b8 c6 b7 02 c0       	mov    eax,0xc002b7c6
c00187b8:	80 fa 02             	cmp    dl,0x2
c00187bb:	eb 24                	jmp    c00187e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00187bd:	80 f9 11             	cmp    cl,0x11
c00187c0:	75 13                	jne    c00187d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00187c2:	b8 c6 b7 02 c0       	mov    eax,0xc002b7c6
c00187c7:	80 fa 03             	cmp    dl,0x3
c00187ca:	0f 85 9b 00 00 00    	jne    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d0:	e9 91 00 00 00       	jmp    c0018866 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00187d5:	80 f9 12             	cmp    cl,0x12
c00187d8:	75 14                	jne    c00187ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00187da:	b8 c6 b7 02 c0       	mov    eax,0xc002b7c6
c00187df:	fe ca                	dec    dl
c00187e1:	0f 85 84 00 00 00    	jne    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e7:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c00187ec:	eb 7d                	jmp    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ee:	80 f9 14             	cmp    cl,0x14
c00187f1:	75 12                	jne    c0018805 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00187f3:	4a                   	dec    edx
c00187f4:	b8 c6 b7 02 c0       	mov    eax,0xc002b7c6
c00187f9:	80 fa 01             	cmp    dl,0x1
c00187fc:	77 6d                	ja     c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187fe:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018803:	eb 66                	jmp    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018805:	80 f9 15             	cmp    cl,0x15
c0018808:	75 31                	jne    c001883b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001880a:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c001880f:	80 fa 01             	cmp    dl,0x1
c0018812:	74 57                	je     c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018814:	b8 c6 b7 02 c0       	mov    eax,0xc002b7c6
c0018819:	80 fa 13             	cmp    dl,0x13
c001881c:	76 0c                	jbe    c001882a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001881e:	80 fa 30             	cmp    dl,0x30
c0018821:	75 48                	jne    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018823:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018828:	eb 41                	jmp    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001882a:	b9 04 00 09 00       	mov    ecx,0x90004
c001882f:	0f a3 d1             	bt     ecx,edx
c0018832:	73 37                	jae    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018834:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018839:	eb 30                	jmp    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001883b:	b8 c6 b7 02 c0       	mov    eax,0xc002b7c6
c0018840:	80 f9 16             	cmp    cl,0x16
c0018843:	75 26                	jne    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018845:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c001884a:	84 d2                	test   dl,dl
c001884c:	74 1d                	je     c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001884e:	b8 c6 b7 02 c0       	mov    eax,0xc002b7c6
c0018853:	80 fa 30             	cmp    dl,0x30
c0018856:	75 13                	jne    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018858:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c001885d:	eb 0c                	jmp    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001885f:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018864:	eb 05                	jmp    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018866:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c001886b:	5b                   	pop    ebx
c001886c:	5e                   	pop    esi
c001886d:	5f                   	pop    edi
c001886e:	5d                   	pop    ebp
c001886f:	c3                   	ret    

c0018870 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018870:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018874:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018878:	80 f9 04             	cmp    cl,0x4
c001887b:	75 6b                	jne    c00188e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001887d:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c0018882:	80 fa 01             	cmp    dl,0x1
c0018885:	0f 86 92 02 00 00    	jbe    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001888b:	b8 70 d5 02 c0       	mov    eax,0xc002d570
c0018890:	80 fa 02             	cmp    dl,0x2
c0018893:	0f 84 84 02 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018899:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c001889e:	80 fa 03             	cmp    dl,0x3
c00188a1:	0f 84 76 02 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188a7:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c00188ac:	80 fa 04             	cmp    dl,0x4
c00188af:	0f 84 68 02 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b5:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c00188ba:	80 fa 05             	cmp    dl,0x5
c00188bd:	0f 84 5a 02 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c3:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c00188c8:	80 fa 07             	cmp    dl,0x7
c00188cb:	0f 84 4c 02 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d1:	83 ea 08             	sub    edx,0x8
c00188d4:	b8 c6 b7 02 c0       	mov    eax,0xc002b7c6
c00188d9:	80 fa 01             	cmp    dl,0x1
c00188dc:	0f 87 3b 02 00 00    	ja     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e2:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c00188e7:	c3                   	ret    
c00188e8:	80 f9 05             	cmp    cl,0x5
c00188eb:	75 45                	jne    c0018932 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00188ed:	8d 4a ff             	lea    ecx,[edx-0x1]
c00188f0:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c00188f5:	80 f9 02             	cmp    cl,0x2
c00188f8:	0f 86 1f 02 00 00    	jbe    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188fe:	80 fa 04             	cmp    dl,0x4
c0018901:	0f 84 f3 01 00 00    	je     c0018afa <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018907:	80 fa 07             	cmp    dl,0x7
c001890a:	0f 84 0d 02 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018910:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c0018915:	80 fa 08             	cmp    dl,0x8
c0018918:	0f 84 ff 01 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891e:	b8 c6 b7 02 c0       	mov    eax,0xc002b7c6
c0018923:	80 fa 09             	cmp    dl,0x9
c0018926:	0f 85 f1 01 00 00    	jne    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892c:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0018931:	c3                   	ret    
c0018932:	80 f9 06             	cmp    cl,0x6
c0018935:	0f 85 85 01 00 00    	jne    c0018ac0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001893b:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c0018940:	80 fa 01             	cmp    dl,0x1
c0018943:	0f 84 d4 01 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018949:	8d 42 fb             	lea    eax,[edx-0x5]
c001894c:	3c 01                	cmp    al,0x1
c001894e:	0f 86 ac 01 00 00    	jbe    c0018b00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018954:	80 fa 03             	cmp    dl,0x3
c0018957:	0f 84 a3 01 00 00    	je     c0018b00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001895d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018960:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c0018965:	80 f9 01             	cmp    cl,0x1
c0018968:	0f 86 af 01 00 00    	jbe    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896e:	80 fa 09             	cmp    dl,0x9
c0018971:	0f 84 8f 01 00 00    	je     c0018b06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018977:	8d 4a f6             	lea    ecx,[edx-0xa]
c001897a:	80 f9 01             	cmp    cl,0x1
c001897d:	0f 86 9a 01 00 00    	jbe    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018983:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c0018988:	80 fa 0d             	cmp    dl,0xd
c001898b:	0f 84 8c 01 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018991:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c0018996:	80 fa 0e             	cmp    dl,0xe
c0018999:	0f 84 7e 01 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899f:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c00189a4:	80 fa 0f             	cmp    dl,0xf
c00189a7:	0f 84 70 01 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ad:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c00189b2:	80 fa 15             	cmp    dl,0x15
c00189b5:	0f 84 62 01 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189bb:	8d 4a ea             	lea    ecx,[edx-0x16]
c00189be:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c00189c3:	80 f9 01             	cmp    cl,0x1
c00189c6:	0f 86 51 01 00 00    	jbe    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189cc:	80 fa 1a             	cmp    dl,0x1a
c00189cf:	0f 84 37 01 00 00    	je     c0018b0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00189d5:	80 fa 1c             	cmp    dl,0x1c
c00189d8:	0f 84 34 01 00 00    	je     c0018b12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00189de:	80 fa 1d             	cmp    dl,0x1d
c00189e1:	0f 84 36 01 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e7:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c00189ec:	80 fa 25             	cmp    dl,0x25
c00189ef:	0f 84 28 01 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f5:	8d 4a da             	lea    ecx,[edx-0x26]
c00189f8:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c00189fd:	80 f9 01             	cmp    cl,0x1
c0018a00:	0f 86 17 01 00 00    	jbe    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a06:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018a0b:	80 fa 2a             	cmp    dl,0x2a
c0018a0e:	0f 84 09 01 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a14:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018a19:	80 fa 2c             	cmp    dl,0x2c
c0018a1c:	0f 84 fb 00 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a22:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018a27:	80 fa 2d             	cmp    dl,0x2d
c0018a2a:	0f 84 ed 00 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a30:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018a35:	80 fa 2e             	cmp    dl,0x2e
c0018a38:	0f 84 df 00 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3e:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018a43:	80 fa 2f             	cmp    dl,0x2f
c0018a46:	0f 84 d1 00 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4c:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018a4f:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0018a54:	80 f9 01             	cmp    cl,0x1
c0018a57:	0f 86 c0 00 00 00    	jbe    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5d:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018a62:	80 fa 37             	cmp    dl,0x37
c0018a65:	0f 84 b2 00 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6b:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018a70:	80 fa 3a             	cmp    dl,0x3a
c0018a73:	0f 84 a4 00 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a79:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c0018a7e:	80 fa 3c             	cmp    dl,0x3c
c0018a81:	0f 84 96 00 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a87:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018a8c:	80 fa 3d             	cmp    dl,0x3d
c0018a8f:	0f 84 88 00 00 00    	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a95:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018a9a:	80 fa 3e             	cmp    dl,0x3e
c0018a9d:	74 7e                	je     c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9f:	8d 42 bb             	lea    eax,[edx-0x45]
c0018aa2:	3c 01                	cmp    al,0x1
c0018aa4:	76 72                	jbe    c0018b18 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018aa6:	80 fa 3f             	cmp    dl,0x3f
c0018aa9:	74 6d                	je     c0018b18 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018aab:	80 fa 4a             	cmp    dl,0x4a
c0018aae:	74 0a                	je     c0018aba <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018ab0:	b8 c6 b7 02 c0       	mov    eax,0xc002b7c6
c0018ab5:	80 fa 4d             	cmp    dl,0x4d
c0018ab8:	75 63                	jne    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aba:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018abf:	c3                   	ret    
c0018ac0:	b8 c6 b7 02 c0       	mov    eax,0xc002b7c6
c0018ac5:	80 f9 0b             	cmp    cl,0xb
c0018ac8:	75 0a                	jne    c0018ad4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018aca:	fe ca                	dec    dl
c0018acc:	75 4f                	jne    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ace:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018ad3:	c3                   	ret    
c0018ad4:	80 f9 0f             	cmp    cl,0xf
c0018ad7:	75 44                	jne    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad9:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018ade:	80 fa 02             	cmp    dl,0x2
c0018ae1:	76 3a                	jbe    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae3:	8d 42 fd             	lea    eax,[edx-0x3]
c0018ae6:	3c 01                	cmp    al,0x1
c0018ae8:	76 0a                	jbe    c0018af4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018aea:	b8 c6 b7 02 c0       	mov    eax,0xc002b7c6
c0018aef:	80 fa 06             	cmp    dl,0x6
c0018af2:	75 29                	jne    c0018b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af4:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018af9:	c3                   	ret    
c0018afa:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c0018aff:	c3                   	ret    
c0018b00:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0018b05:	c3                   	ret    
c0018b06:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c0018b0b:	c3                   	ret    
c0018b0c:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018b11:	c3                   	ret    
c0018b12:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0018b17:	c3                   	ret    
c0018b18:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c0018b1d:	c3                   	ret    

c0018b1e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018b1e:	60                   	pusha  
c0018b1f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b2b:	9c                   	pushf  
c0018b2c:	fa                   	cli    
c0018b2d:	0f 09                	wbinvd 
c0018b2f:	0f 30                	wrmsr  
c0018b31:	9d                   	popf   
c0018b32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018b36:	89 02                	mov    DWORD PTR [edx],eax
c0018b38:	61                   	popa   
c0018b39:	c3                   	ret    

c0018b3a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018b3a:	60                   	pusha  
c0018b3b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b3f:	9c                   	pushf  
c0018b40:	fa                   	cli    
c0018b41:	0f 09                	wbinvd 
c0018b43:	31 c0                	xor    eax,eax
c0018b45:	31 d2                	xor    edx,edx
c0018b47:	0f 32                	rdmsr  
c0018b49:	9d                   	popf   
c0018b4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b4e:	89 02                	mov    DWORD PTR [edx],eax
c0018b50:	61                   	popa   
c0018b51:	c3                   	ret    

c0018b52 <CPU::AMD_K6_writeback(int, int, int)>:
c0018b52:	56                   	push   esi
c0018b53:	53                   	push   ebx
c0018b54:	83 ec 10             	sub    esp,0x10
c0018b57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b5b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018b60:	75 5d                	jne    c0018bbf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b62:	83 f8 08             	cmp    eax,0x8
c0018b65:	75 09                	jne    c0018b70 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018b67:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018b6c:	7e 13                	jle    c0018b81 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018b6e:	eb 30                	jmp    c0018ba0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018b70:	83 f8 06             	cmp    eax,0x6
c0018b73:	7c 4a                	jl     c0018bbf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b75:	83 f8 07             	cmp    eax,0x7
c0018b78:	7e 07                	jle    c0018b81 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018b7a:	83 f8 09             	cmp    eax,0x9
c0018b7d:	74 21                	je     c0018ba0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018b7f:	eb 3e                	jmp    c0018bbf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b81:	89 e6                	mov    esi,esp
c0018b83:	8b 1d 28 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e328
c0018b89:	56                   	push   esi
c0018b8a:	c1 eb 15             	shr    ebx,0x15
c0018b8d:	68 82 00 00 c0       	push   0xc0000082
c0018b92:	83 e3 7e             	and    ebx,0x7e
c0018b95:	e8 a0 ff ff ff       	call   c0018b3a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018b9a:	56                   	push   esi
c0018b9b:	6a 00                	push   0x0
c0018b9d:	53                   	push   ebx
c0018b9e:	eb 12                	jmp    c0018bb2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018ba0:	89 e3                	mov    ebx,esp
c0018ba2:	53                   	push   ebx
c0018ba3:	68 82 00 00 c0       	push   0xc0000082
c0018ba8:	e8 8d ff ff ff       	call   c0018b3a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018bad:	53                   	push   ebx
c0018bae:	6a 00                	push   0x0
c0018bb0:	6a 00                	push   0x0
c0018bb2:	68 82 00 00 c0       	push   0xc0000082
c0018bb7:	e8 62 ff ff ff       	call   c0018b1e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018bbc:	83 c4 18             	add    esp,0x18
c0018bbf:	83 c4 10             	add    esp,0x10
c0018bc2:	5b                   	pop    ebx
c0018bc3:	5e                   	pop    esi
c0018bc4:	c3                   	ret    
c0018bc5:	90                   	nop

c0018bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018bc6:	55                   	push   ebp
c0018bc7:	57                   	push   edi
c0018bc8:	56                   	push   esi
c0018bc9:	53                   	push   ebx
c0018bca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018bce:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018bd2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018bd6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018bda:	39 05 00 d8 02 c0    	cmp    DWORD PTR ds:0xc002d800,eax
c0018be0:	75 23                	jne    c0018c05 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018be2:	a1 2c 0e 03 c0       	mov    eax,ds:0xc0030e2c
c0018be7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018beb:	89 06                	mov    DWORD PTR [esi],eax
c0018bed:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0018bf2:	89 07                	mov    DWORD PTR [edi],eax
c0018bf4:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c0018bf9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018bfc:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c0018c01:	89 02                	mov    DWORD PTR [edx],eax
c0018c03:	eb 3f                	jmp    c0018c44 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018c05:	31 c9                	xor    ecx,ecx
c0018c07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c0b:	0f a2                	cpuid  
c0018c0d:	89 06                	mov    DWORD PTR [esi],eax
c0018c0f:	89 1f                	mov    DWORD PTR [edi],ebx
c0018c11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c15:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018c18:	89 10                	mov    DWORD PTR [eax],edx
c0018c1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c1e:	a3 00 d8 02 c0       	mov    ds:0xc002d800,eax
c0018c23:	8b 06                	mov    eax,DWORD PTR [esi]
c0018c25:	a3 2c 0e 03 c0       	mov    ds:0xc0030e2c,eax
c0018c2a:	8b 07                	mov    eax,DWORD PTR [edi]
c0018c2c:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c0018c31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c34:	a3 24 0e 03 c0       	mov    ds:0xc0030e24,eax
c0018c39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c3f:	a3 20 0e 03 c0       	mov    ds:0xc0030e20,eax
c0018c44:	5b                   	pop    ebx
c0018c45:	5e                   	pop    esi
c0018c46:	5f                   	pop    edi
c0018c47:	5d                   	pop    ebp
c0018c48:	c3                   	ret    
c0018c49:	90                   	nop

c0018c4a <CPU::cpuidCheckEDX(unsigned int)>:
c0018c4a:	83 ec 10             	sub    esp,0x10
c0018c4d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c51:	50                   	push   eax
c0018c52:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c56:	50                   	push   eax
c0018c57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c5b:	50                   	push   eax
c0018c5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c60:	50                   	push   eax
c0018c61:	6a 01                	push   0x1
c0018c63:	e8 5e ff ff ff       	call   c0018bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c6c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018c70:	0f 95 c0             	setne  al
c0018c73:	83 c4 24             	add    esp,0x24
c0018c76:	c3                   	ret    
c0018c77:	90                   	nop

c0018c78 <CPU::cpuidCheckECX(unsigned int)>:
c0018c78:	83 ec 10             	sub    esp,0x10
c0018c7b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c7f:	50                   	push   eax
c0018c80:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c84:	50                   	push   eax
c0018c85:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c89:	50                   	push   eax
c0018c8a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c8e:	50                   	push   eax
c0018c8f:	6a 01                	push   0x1
c0018c91:	e8 30 ff ff ff       	call   c0018bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c9a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c9e:	0f 95 c0             	setne  al
c0018ca1:	83 c4 24             	add    esp,0x24
c0018ca4:	c3                   	ret    
c0018ca5:	90                   	nop

c0018ca6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018ca6:	83 ec 10             	sub    esp,0x10
c0018ca9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cad:	50                   	push   eax
c0018cae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cb2:	50                   	push   eax
c0018cb3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cb7:	50                   	push   eax
c0018cb8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cbc:	50                   	push   eax
c0018cbd:	6a 07                	push   0x7
c0018cbf:	e8 02 ff ff ff       	call   c0018bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cc8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018ccc:	0f 95 c0             	setne  al
c0018ccf:	83 c4 24             	add    esp,0x24
c0018cd2:	c3                   	ret    
c0018cd3:	90                   	nop

c0018cd4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018cd4:	83 ec 10             	sub    esp,0x10
c0018cd7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cdb:	50                   	push   eax
c0018cdc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce0:	50                   	push   eax
c0018ce1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce5:	50                   	push   eax
c0018ce6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cea:	50                   	push   eax
c0018ceb:	6a 07                	push   0x7
c0018ced:	e8 d4 fe ff ff       	call   c0018bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cf6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018cfa:	0f 95 c0             	setne  al
c0018cfd:	83 c4 24             	add    esp,0x24
c0018d00:	c3                   	ret    
c0018d01:	90                   	nop

c0018d02 <CPU::CPU()>:
c0018d02:	83 ec 0c             	sub    esp,0xc
c0018d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d09:	83 ec 08             	sub    esp,0x8
c0018d0c:	68 c6 b7 02 c0       	push   0xc002b7c6
c0018d11:	50                   	push   eax
c0018d12:	e8 85 b7 ff ff       	call   c001449c <Device::Device(char const*)>
c0018d17:	83 c4 10             	add    esp,0x10
c0018d1a:	ba a0 b8 02 c0       	mov    edx,0xc002b8a0
c0018d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d23:	89 10                	mov    DWORD PTR [eax],edx
c0018d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d29:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d37:	05 78 01 00 00       	add    eax,0x178
c0018d3c:	83 ec 0c             	sub    esp,0xc
c0018d3f:	50                   	push   eax
c0018d40:	e8 13 63 ff ff       	call   c000f058 <GDT::GDT()>
c0018d45:	83 c4 10             	add    esp,0x10
c0018d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d4c:	05 7c 09 00 00       	add    eax,0x97c
c0018d51:	83 ec 0c             	sub    esp,0xc
c0018d54:	50                   	push   eax
c0018d55:	e8 60 65 ff ff       	call   c000f2ba <IDT::IDT()>
c0018d5a:	83 c4 10             	add    esp,0x10
c0018d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d61:	05 7c 11 00 00       	add    eax,0x117c
c0018d66:	83 ec 0c             	sub    esp,0xc
c0018d69:	50                   	push   eax
c0018d6a:	e8 fd 86 ff ff       	call   c001146c <TSS::TSS()>
c0018d6f:	83 c4 10             	add    esp,0x10
c0018d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d76:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d81:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018d8b:	90                   	nop
c0018d8c:	83 c4 0c             	add    esp,0xc
c0018d8f:	c3                   	ret    

c0018d90 <CPU::displayFeatures()>:
c0018d90:	53                   	push   ebx
c0018d91:	83 ec 10             	sub    esp,0x10
c0018d94:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018d98:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018d9e:	68 d4 b4 02 c0       	push   0xc002b4d4
c0018da3:	e8 de a0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018da8:	59                   	pop    ecx
c0018da9:	58                   	pop    eax
c0018daa:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018db0:	50                   	push   eax
c0018db1:	68 e5 b4 02 c0       	push   0xc002b4e5
c0018db6:	e8 cb a0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018dbb:	58                   	pop    eax
c0018dbc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018dc2:	5a                   	pop    edx
c0018dc3:	c1 e8 0e             	shr    eax,0xe
c0018dc6:	0f b6 c0             	movzx  eax,al
c0018dc9:	50                   	push   eax
c0018dca:	68 f6 b4 02 c0       	push   0xc002b4f6
c0018dcf:	e8 b2 a0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018dd4:	59                   	pop    ecx
c0018dd5:	58                   	pop    eax
c0018dd6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ddc:	66 c1 e8 06          	shr    ax,0x6
c0018de0:	0f b6 c0             	movzx  eax,al
c0018de3:	50                   	push   eax
c0018de4:	68 07 b5 02 c0       	push   0xc002b507
c0018de9:	e8 98 a0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018dee:	c7 04 24 b4 b9 02 c0 	mov    DWORD PTR [esp],0xc002b9b4
c0018df5:	e8 8c a0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018dfa:	83 c4 10             	add    esp,0x10
c0018dfd:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018e02:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018e09:	74 05                	je     c0018e10 <CPU::displayFeatures()+0x80>
c0018e0b:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018e10:	52                   	push   edx
c0018e11:	52                   	push   edx
c0018e12:	50                   	push   eax
c0018e13:	68 18 b5 02 c0       	push   0xc002b518
c0018e18:	e8 69 a0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018e1d:	83 c4 10             	add    esp,0x10
c0018e20:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018e25:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018e2c:	78 05                	js     c0018e33 <CPU::displayFeatures()+0xa3>
c0018e2e:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018e33:	51                   	push   ecx
c0018e34:	51                   	push   ecx
c0018e35:	50                   	push   eax
c0018e36:	68 2f b5 02 c0       	push   0xc002b52f
c0018e3b:	e8 46 a0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018e40:	83 c4 10             	add    esp,0x10
c0018e43:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018e48:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018e4f:	75 05                	jne    c0018e56 <CPU::displayFeatures()+0xc6>
c0018e51:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018e56:	52                   	push   edx
c0018e57:	52                   	push   edx
c0018e58:	50                   	push   eax
c0018e59:	68 46 b5 02 c0       	push   0xc002b546
c0018e5e:	e8 23 a0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018e63:	83 c4 10             	add    esp,0x10
c0018e66:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018e6b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018e72:	75 05                	jne    c0018e79 <CPU::displayFeatures()+0xe9>
c0018e74:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018e79:	51                   	push   ecx
c0018e7a:	51                   	push   ecx
c0018e7b:	50                   	push   eax
c0018e7c:	68 5d b5 02 c0       	push   0xc002b55d
c0018e81:	e8 00 a0 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018e86:	83 c4 10             	add    esp,0x10
c0018e89:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018e8e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018e95:	75 05                	jne    c0018e9c <CPU::displayFeatures()+0x10c>
c0018e97:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018e9c:	52                   	push   edx
c0018e9d:	52                   	push   edx
c0018e9e:	50                   	push   eax
c0018e9f:	68 74 b5 02 c0       	push   0xc002b574
c0018ea4:	e8 dd 9f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018ea9:	83 c4 10             	add    esp,0x10
c0018eac:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018eb1:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018eb8:	75 05                	jne    c0018ebf <CPU::displayFeatures()+0x12f>
c0018eba:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018ebf:	51                   	push   ecx
c0018ec0:	51                   	push   ecx
c0018ec1:	50                   	push   eax
c0018ec2:	68 8b b5 02 c0       	push   0xc002b58b
c0018ec7:	e8 ba 9f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018ecc:	83 c4 10             	add    esp,0x10
c0018ecf:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018ed4:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018edb:	75 05                	jne    c0018ee2 <CPU::displayFeatures()+0x152>
c0018edd:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018ee2:	52                   	push   edx
c0018ee3:	52                   	push   edx
c0018ee4:	50                   	push   eax
c0018ee5:	68 a2 b5 02 c0       	push   0xc002b5a2
c0018eea:	e8 97 9f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018eef:	83 c4 10             	add    esp,0x10
c0018ef2:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018ef7:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018efe:	75 05                	jne    c0018f05 <CPU::displayFeatures()+0x175>
c0018f00:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018f05:	51                   	push   ecx
c0018f06:	51                   	push   ecx
c0018f07:	50                   	push   eax
c0018f08:	68 b9 b5 02 c0       	push   0xc002b5b9
c0018f0d:	e8 74 9f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018f12:	83 c4 10             	add    esp,0x10
c0018f15:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018f1a:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018f21:	75 05                	jne    c0018f28 <CPU::displayFeatures()+0x198>
c0018f23:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018f28:	52                   	push   edx
c0018f29:	52                   	push   edx
c0018f2a:	50                   	push   eax
c0018f2b:	68 d0 b5 02 c0       	push   0xc002b5d0
c0018f30:	e8 51 9f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018f35:	83 c4 10             	add    esp,0x10
c0018f38:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018f3d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018f44:	75 05                	jne    c0018f4b <CPU::displayFeatures()+0x1bb>
c0018f46:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018f4b:	51                   	push   ecx
c0018f4c:	51                   	push   ecx
c0018f4d:	50                   	push   eax
c0018f4e:	68 e7 b5 02 c0       	push   0xc002b5e7
c0018f53:	e8 2e 9f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018f58:	83 c4 10             	add    esp,0x10
c0018f5b:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018f60:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018f67:	75 05                	jne    c0018f6e <CPU::displayFeatures()+0x1de>
c0018f69:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018f6e:	52                   	push   edx
c0018f6f:	52                   	push   edx
c0018f70:	50                   	push   eax
c0018f71:	68 fe b5 02 c0       	push   0xc002b5fe
c0018f76:	e8 0b 9f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018f7b:	83 c4 10             	add    esp,0x10
c0018f7e:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018f83:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018f8a:	75 05                	jne    c0018f91 <CPU::displayFeatures()+0x201>
c0018f8c:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018f91:	51                   	push   ecx
c0018f92:	51                   	push   ecx
c0018f93:	50                   	push   eax
c0018f94:	68 15 b6 02 c0       	push   0xc002b615
c0018f99:	e8 e8 9e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018f9e:	83 c4 10             	add    esp,0x10
c0018fa1:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018fa6:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018fad:	75 05                	jne    c0018fb4 <CPU::displayFeatures()+0x224>
c0018faf:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018fb4:	52                   	push   edx
c0018fb5:	52                   	push   edx
c0018fb6:	50                   	push   eax
c0018fb7:	68 2c b6 02 c0       	push   0xc002b62c
c0018fbc:	e8 c5 9e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018fc1:	83 c4 10             	add    esp,0x10
c0018fc4:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018fc9:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018fd0:	78 05                	js     c0018fd7 <CPU::displayFeatures()+0x247>
c0018fd2:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018fd7:	51                   	push   ecx
c0018fd8:	51                   	push   ecx
c0018fd9:	50                   	push   eax
c0018fda:	68 43 b6 02 c0       	push   0xc002b643
c0018fdf:	e8 a2 9e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0018fe4:	83 c4 10             	add    esp,0x10
c0018fe7:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0018fec:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018ff3:	75 05                	jne    c0018ffa <CPU::displayFeatures()+0x26a>
c0018ff5:	b8 56 9f 02 c0       	mov    eax,0xc0029f56
c0018ffa:	52                   	push   edx
c0018ffb:	52                   	push   edx
c0018ffc:	50                   	push   eax
c0018ffd:	68 5a b6 02 c0       	push   0xc002b65a
c0019002:	e8 7f 9e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0019007:	83 c4 18             	add    esp,0x18
c001900a:	5b                   	pop    ebx
c001900b:	c3                   	ret    

c001900c <CPU::detectFeatures()>:
c001900c:	55                   	push   ebp
c001900d:	57                   	push   edi
c001900e:	56                   	push   esi
c001900f:	53                   	push   ebx
c0019010:	83 ec 50             	sub    esp,0x50
c0019013:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019017:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019021:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019028:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001902e:	6a 0d                	push   0xd
c0019030:	6a 00                	push   0x0
c0019032:	57                   	push   edi
c0019033:	e8 40 77 fe ff       	call   c0000778 <memset>
c0019038:	83 c4 10             	add    esp,0x10
c001903b:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0019040:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019047:	0f 84 20 09 00 00    	je     c001996d <CPU::detectFeatures()+0x961>
c001904d:	83 ec 0c             	sub    esp,0xc
c0019050:	6a 10                	push   0x10
c0019052:	e8 f3 fb ff ff       	call   c0018c4a <CPU::cpuidCheckEDX(unsigned int)>
c0019057:	83 e0 01             	and    eax,0x1
c001905a:	8d 14 00             	lea    edx,[eax+eax*1]
c001905d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019063:	83 e0 fd             	and    eax,0xfffffffd
c0019066:	09 d0                	or     eax,edx
c0019068:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001906e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019075:	e8 d0 fb ff ff       	call   c0018c4a <CPU::cpuidCheckEDX(unsigned int)>
c001907a:	83 e0 01             	and    eax,0x1
c001907d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019084:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001908a:	83 e0 fb             	and    eax,0xfffffffb
c001908d:	09 d0                	or     eax,edx
c001908f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019095:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001909c:	e8 a9 fb ff ff       	call   c0018c4a <CPU::cpuidCheckEDX(unsigned int)>
c00190a1:	83 e0 01             	and    eax,0x1
c00190a4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00190ab:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190b1:	83 e0 f7             	and    eax,0xfffffff7
c00190b4:	09 d0                	or     eax,edx
c00190b6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190bc:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00190c3:	e8 82 fb ff ff       	call   c0018c4a <CPU::cpuidCheckEDX(unsigned int)>
c00190c8:	83 e0 01             	and    eax,0x1
c00190cb:	c1 e0 04             	shl    eax,0x4
c00190ce:	88 c2                	mov    dl,al
c00190d0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190d6:	83 e0 ef             	and    eax,0xffffffef
c00190d9:	09 d0                	or     eax,edx
c00190db:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190e1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00190e8:	e8 5d fb ff ff       	call   c0018c4a <CPU::cpuidCheckEDX(unsigned int)>
c00190ed:	83 e0 01             	and    eax,0x1
c00190f0:	c1 e0 05             	shl    eax,0x5
c00190f3:	88 c2                	mov    dl,al
c00190f5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190fb:	83 e0 df             	and    eax,0xffffffdf
c00190fe:	09 d0                	or     eax,edx
c0019100:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019106:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001910d:	e8 38 fb ff ff       	call   c0018c4a <CPU::cpuidCheckEDX(unsigned int)>
c0019112:	83 e0 01             	and    eax,0x1
c0019115:	8d 14 00             	lea    edx,[eax+eax*1]
c0019118:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001911e:	83 e0 fd             	and    eax,0xfffffffd
c0019121:	09 d0                	or     eax,edx
c0019123:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019129:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019130:	e8 15 fb ff ff       	call   c0018c4a <CPU::cpuidCheckEDX(unsigned int)>
c0019135:	83 e0 01             	and    eax,0x1
c0019138:	c1 e0 06             	shl    eax,0x6
c001913b:	88 c2                	mov    dl,al
c001913d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019143:	83 e0 bf             	and    eax,0xffffffbf
c0019146:	09 d0                	or     eax,edx
c0019148:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001914e:	58                   	pop    eax
c001914f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019153:	56                   	push   esi
c0019154:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019158:	55                   	push   ebp
c0019159:	8d 44 24 28          	lea    eax,[esp+0x28]
c001915d:	50                   	push   eax
c001915e:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019162:	52                   	push   edx
c0019163:	6a 00                	push   0x0
c0019165:	e8 5c fa ff ff       	call   c0018bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001916a:	83 c4 1c             	add    esp,0x1c
c001916d:	6a 04                	push   0x4
c001916f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019173:	50                   	push   eax
c0019174:	57                   	push   edi
c0019175:	e8 ca 75 fe ff       	call   c0000744 <memcpy>
c001917a:	83 c4 0c             	add    esp,0xc
c001917d:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019183:	6a 04                	push   0x4
c0019185:	56                   	push   esi
c0019186:	50                   	push   eax
c0019187:	e8 b8 75 fe ff       	call   c0000744 <memcpy>
c001918c:	83 c4 0c             	add    esp,0xc
c001918f:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019195:	6a 04                	push   0x4
c0019197:	55                   	push   ebp
c0019198:	50                   	push   eax
c0019199:	e8 a6 75 fe ff       	call   c0000744 <memcpy>
c001919e:	58                   	pop    eax
c001919f:	5a                   	pop    edx
c00191a0:	68 71 b6 02 c0       	push   0xc002b671
c00191a5:	57                   	push   edi
c00191a6:	e8 15 77 fe ff       	call   c00008c0 <strcmp>
c00191ab:	83 c4 10             	add    esp,0x10
c00191ae:	85 c0                	test   eax,eax
c00191b0:	75 0f                	jne    c00191c1 <CPU::detectFeatures()+0x1b5>
c00191b2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00191bc:	e9 22 02 00 00       	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c00191c1:	50                   	push   eax
c00191c2:	50                   	push   eax
c00191c3:	68 7e b6 02 c0       	push   0xc002b67e
c00191c8:	57                   	push   edi
c00191c9:	e8 f2 76 fe ff       	call   c00008c0 <strcmp>
c00191ce:	83 c4 10             	add    esp,0x10
c00191d1:	85 c0                	test   eax,eax
c00191d3:	74 dd                	je     c00191b2 <CPU::detectFeatures()+0x1a6>
c00191d5:	51                   	push   ecx
c00191d6:	51                   	push   ecx
c00191d7:	68 8b b6 02 c0       	push   0xc002b68b
c00191dc:	57                   	push   edi
c00191dd:	e8 de 76 fe ff       	call   c00008c0 <strcmp>
c00191e2:	83 c4 10             	add    esp,0x10
c00191e5:	85 c0                	test   eax,eax
c00191e7:	74 2a                	je     c0019213 <CPU::detectFeatures()+0x207>
c00191e9:	52                   	push   edx
c00191ea:	52                   	push   edx
c00191eb:	68 98 b6 02 c0       	push   0xc002b698
c00191f0:	57                   	push   edi
c00191f1:	e8 ca 76 fe ff       	call   c00008c0 <strcmp>
c00191f6:	83 c4 10             	add    esp,0x10
c00191f9:	85 c0                	test   eax,eax
c00191fb:	74 16                	je     c0019213 <CPU::detectFeatures()+0x207>
c00191fd:	50                   	push   eax
c00191fe:	50                   	push   eax
c00191ff:	68 a5 b6 02 c0       	push   0xc002b6a5
c0019204:	57                   	push   edi
c0019205:	e8 b6 76 fe ff       	call   c00008c0 <strcmp>
c001920a:	83 c4 10             	add    esp,0x10
c001920d:	85 c0                	test   eax,eax
c001920f:	74 48                	je     c0019259 <CPU::detectFeatures()+0x24d>
c0019211:	eb 0f                	jmp    c0019222 <CPU::detectFeatures()+0x216>
c0019213:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001921d:	e9 c1 01 00 00       	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c0019222:	50                   	push   eax
c0019223:	50                   	push   eax
c0019224:	68 b2 b6 02 c0       	push   0xc002b6b2
c0019229:	57                   	push   edi
c001922a:	e8 91 76 fe ff       	call   c00008c0 <strcmp>
c001922f:	83 c4 10             	add    esp,0x10
c0019232:	85 c0                	test   eax,eax
c0019234:	74 23                	je     c0019259 <CPU::detectFeatures()+0x24d>
c0019236:	50                   	push   eax
c0019237:	50                   	push   eax
c0019238:	68 bf b6 02 c0       	push   0xc002b6bf
c001923d:	57                   	push   edi
c001923e:	e8 7d 76 fe ff       	call   c00008c0 <strcmp>
c0019243:	83 c4 10             	add    esp,0x10
c0019246:	85 c0                	test   eax,eax
c0019248:	75 1e                	jne    c0019268 <CPU::detectFeatures()+0x25c>
c001924a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019254:	e9 8a 01 00 00       	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c0019259:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019263:	e9 7b 01 00 00       	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c0019268:	50                   	push   eax
c0019269:	50                   	push   eax
c001926a:	68 cc b6 02 c0       	push   0xc002b6cc
c001926f:	57                   	push   edi
c0019270:	e8 4b 76 fe ff       	call   c00008c0 <strcmp>
c0019275:	83 c4 10             	add    esp,0x10
c0019278:	85 c0                	test   eax,eax
c001927a:	75 0f                	jne    c001928b <CPU::detectFeatures()+0x27f>
c001927c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019286:	e9 58 01 00 00       	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c001928b:	50                   	push   eax
c001928c:	50                   	push   eax
c001928d:	68 8b b6 02 c0       	push   0xc002b68b
c0019292:	57                   	push   edi
c0019293:	e8 28 76 fe ff       	call   c00008c0 <strcmp>
c0019298:	83 c4 10             	add    esp,0x10
c001929b:	85 c0                	test   eax,eax
c001929d:	75 0f                	jne    c00192ae <CPU::detectFeatures()+0x2a2>
c001929f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00192a9:	e9 35 01 00 00       	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c00192ae:	50                   	push   eax
c00192af:	50                   	push   eax
c00192b0:	68 d9 b6 02 c0       	push   0xc002b6d9
c00192b5:	57                   	push   edi
c00192b6:	e8 05 76 fe ff       	call   c00008c0 <strcmp>
c00192bb:	83 c4 10             	add    esp,0x10
c00192be:	85 c0                	test   eax,eax
c00192c0:	75 0f                	jne    c00192d1 <CPU::detectFeatures()+0x2c5>
c00192c2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00192cc:	e9 12 01 00 00       	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c00192d1:	51                   	push   ecx
c00192d2:	51                   	push   ecx
c00192d3:	68 e6 b6 02 c0       	push   0xc002b6e6
c00192d8:	57                   	push   edi
c00192d9:	e8 e2 75 fe ff       	call   c00008c0 <strcmp>
c00192de:	83 c4 10             	add    esp,0x10
c00192e1:	85 c0                	test   eax,eax
c00192e3:	75 0f                	jne    c00192f4 <CPU::detectFeatures()+0x2e8>
c00192e5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00192ef:	e9 ef 00 00 00       	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c00192f4:	52                   	push   edx
c00192f5:	52                   	push   edx
c00192f6:	68 f3 b6 02 c0       	push   0xc002b6f3
c00192fb:	57                   	push   edi
c00192fc:	e8 bf 75 fe ff       	call   c00008c0 <strcmp>
c0019301:	83 c4 10             	add    esp,0x10
c0019304:	85 c0                	test   eax,eax
c0019306:	75 0f                	jne    c0019317 <CPU::detectFeatures()+0x30b>
c0019308:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019312:	e9 cc 00 00 00       	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c0019317:	50                   	push   eax
c0019318:	50                   	push   eax
c0019319:	68 00 b7 02 c0       	push   0xc002b700
c001931e:	57                   	push   edi
c001931f:	e8 9c 75 fe ff       	call   c00008c0 <strcmp>
c0019324:	83 c4 10             	add    esp,0x10
c0019327:	85 c0                	test   eax,eax
c0019329:	75 0f                	jne    c001933a <CPU::detectFeatures()+0x32e>
c001932b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019335:	e9 a9 00 00 00       	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c001933a:	50                   	push   eax
c001933b:	50                   	push   eax
c001933c:	68 0d b7 02 c0       	push   0xc002b70d
c0019341:	57                   	push   edi
c0019342:	e8 79 75 fe ff       	call   c00008c0 <strcmp>
c0019347:	83 c4 10             	add    esp,0x10
c001934a:	85 c0                	test   eax,eax
c001934c:	75 0f                	jne    c001935d <CPU::detectFeatures()+0x351>
c001934e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019358:	e9 86 00 00 00       	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c001935d:	50                   	push   eax
c001935e:	50                   	push   eax
c001935f:	68 1a b7 02 c0       	push   0xc002b71a
c0019364:	57                   	push   edi
c0019365:	e8 56 75 fe ff       	call   c00008c0 <strcmp>
c001936a:	83 c4 10             	add    esp,0x10
c001936d:	85 c0                	test   eax,eax
c001936f:	75 0c                	jne    c001937d <CPU::detectFeatures()+0x371>
c0019371:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001937b:	eb 66                	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c001937d:	50                   	push   eax
c001937e:	50                   	push   eax
c001937f:	68 27 b7 02 c0       	push   0xc002b727
c0019384:	57                   	push   edi
c0019385:	e8 36 75 fe ff       	call   c00008c0 <strcmp>
c001938a:	83 c4 10             	add    esp,0x10
c001938d:	85 c0                	test   eax,eax
c001938f:	75 0c                	jne    c001939d <CPU::detectFeatures()+0x391>
c0019391:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001939b:	eb 46                	jmp    c00193e3 <CPU::detectFeatures()+0x3d7>
c001939d:	50                   	push   eax
c001939e:	50                   	push   eax
c001939f:	68 34 b7 02 c0       	push   0xc002b734
c00193a4:	57                   	push   edi
c00193a5:	e8 16 75 fe ff       	call   c00008c0 <strcmp>
c00193aa:	83 c4 10             	add    esp,0x10
c00193ad:	85 c0                	test   eax,eax
c00193af:	74 e0                	je     c0019391 <CPU::detectFeatures()+0x385>
c00193b1:	50                   	push   eax
c00193b2:	50                   	push   eax
c00193b3:	68 41 b7 02 c0       	push   0xc002b741
c00193b8:	57                   	push   edi
c00193b9:	e8 02 75 fe ff       	call   c00008c0 <strcmp>
c00193be:	83 c4 10             	add    esp,0x10
c00193c1:	85 c0                	test   eax,eax
c00193c3:	74 cc                	je     c0019391 <CPU::detectFeatures()+0x385>
c00193c5:	51                   	push   ecx
c00193c6:	51                   	push   ecx
c00193c7:	68 4e b7 02 c0       	push   0xc002b74e
c00193cc:	57                   	push   edi
c00193cd:	e8 ee 74 fe ff       	call   c00008c0 <strcmp>
c00193d2:	83 c4 10             	add    esp,0x10
c00193d5:	85 c0                	test   eax,eax
c00193d7:	74 b8                	je     c0019391 <CPU::detectFeatures()+0x385>
c00193d9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00193e3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00193e8:	0f 86 be 00 00 00    	jbe    c00194ac <CPU::detectFeatures()+0x4a0>
c00193ee:	83 ec 0c             	sub    esp,0xc
c00193f1:	68 80 00 00 00       	push   0x80
c00193f6:	e8 ab f8 ff ff       	call   c0018ca6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00193fb:	83 e0 01             	and    eax,0x1
c00193fe:	c1 e0 06             	shl    eax,0x6
c0019401:	88 c2                	mov    dl,al
c0019403:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019409:	83 e0 bf             	and    eax,0xffffffbf
c001940c:	09 d0                	or     eax,edx
c001940e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019414:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001941b:	e8 86 f8 ff ff       	call   c0018ca6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019420:	83 e0 01             	and    eax,0x1
c0019423:	c1 e0 04             	shl    eax,0x4
c0019426:	88 c2                	mov    dl,al
c0019428:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001942e:	83 e0 ef             	and    eax,0xffffffef
c0019431:	09 d0                	or     eax,edx
c0019433:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019439:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019440:	e8 61 f8 ff ff       	call   c0018ca6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019445:	c1 e0 07             	shl    eax,0x7
c0019448:	88 c2                	mov    dl,al
c001944a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019450:	83 e0 7f             	and    eax,0x7f
c0019453:	09 d0                	or     eax,edx
c0019455:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001945b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019462:	e8 6d f8 ff ff       	call   c0018cd4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019467:	83 e0 01             	and    eax,0x1
c001946a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019471:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019477:	83 e0 f7             	and    eax,0xfffffff7
c001947a:	09 d0                	or     eax,edx
c001947c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019482:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019489:	e8 46 f8 ff ff       	call   c0018cd4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001948e:	83 c4 10             	add    esp,0x10
c0019491:	83 e0 01             	and    eax,0x1
c0019494:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001949b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194a1:	83 e0 fb             	and    eax,0xfffffffb
c00194a4:	09 d0                	or     eax,edx
c00194a6:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194ac:	83 ec 0c             	sub    esp,0xc
c00194af:	56                   	push   esi
c00194b0:	55                   	push   ebp
c00194b1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00194b5:	57                   	push   edi
c00194b6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194ba:	50                   	push   eax
c00194bb:	6a 01                	push   0x1
c00194bd:	e8 04 f7 ff ff       	call   c0018bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194c2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00194c6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00194cc:	88 ca                	mov    dl,cl
c00194ce:	83 e0 f0             	and    eax,0xfffffff0
c00194d1:	83 e2 0f             	and    edx,0xf
c00194d4:	09 d0                	or     eax,edx
c00194d6:	88 ca                	mov    dl,cl
c00194d8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00194de:	c0 ea 04             	shr    dl,0x4
c00194e1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00194e5:	0f b6 c2             	movzx  eax,dl
c00194e8:	83 c4 20             	add    esp,0x20
c00194eb:	c1 e0 06             	shl    eax,0x6
c00194ee:	89 c5                	mov    ebp,eax
c00194f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194f6:	66 25 3f c0          	and    ax,0xc03f
c00194fa:	09 e8                	or     eax,ebp
c00194fc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019503:	89 c8                	mov    eax,ecx
c0019505:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001950b:	c1 e8 08             	shr    eax,0x8
c001950e:	83 e2 3f             	and    edx,0x3f
c0019511:	83 e0 0f             	and    eax,0xf
c0019514:	89 c5                	mov    ebp,eax
c0019516:	c1 e5 06             	shl    ebp,0x6
c0019519:	09 d5                	or     ebp,edx
c001951b:	89 ea                	mov    edx,ebp
c001951d:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019523:	88 c2                	mov    dl,al
c0019525:	c0 ea 02             	shr    dl,0x2
c0019528:	89 d5                	mov    ebp,edx
c001952a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019530:	83 e2 c0             	and    edx,0xffffffc0
c0019533:	09 d5                	or     ebp,edx
c0019535:	89 ea                	mov    edx,ebp
c0019537:	89 cd                	mov    ebp,ecx
c0019539:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001953f:	c1 ed 0c             	shr    ebp,0xc
c0019542:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019548:	83 e5 03             	and    ebp,0x3
c001954b:	83 e2 cf             	and    edx,0xffffffcf
c001954e:	c1 e5 04             	shl    ebp,0x4
c0019551:	09 d5                	or     ebp,edx
c0019553:	3c 06                	cmp    al,0x6
c0019555:	89 ea                	mov    edx,ebp
c0019557:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001955d:	74 04                	je     c0019563 <CPU::detectFeatures()+0x557>
c001955f:	3c 0f                	cmp    al,0xf
c0019561:	75 5c                	jne    c00195bf <CPU::detectFeatures()+0x5b3>
c0019563:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019567:	89 cd                	mov    ebp,ecx
c0019569:	c1 ed 10             	shr    ebp,0x10
c001956c:	c1 e5 04             	shl    ebp,0x4
c001956f:	09 ea                	or     edx,ebp
c0019571:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019577:	0f b6 d2             	movzx  edx,dl
c001957a:	66 81 e5 3f c0       	and    bp,0xc03f
c001957f:	c1 e2 06             	shl    edx,0x6
c0019582:	09 ea                	or     edx,ebp
c0019584:	3c 0f                	cmp    al,0xf
c0019586:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001958d:	75 30                	jne    c00195bf <CPU::detectFeatures()+0x5b3>
c001958f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019595:	c1 e9 14             	shr    ecx,0x14
c0019598:	83 e0 3f             	and    eax,0x3f
c001959b:	83 c1 0f             	add    ecx,0xf
c001959e:	88 ca                	mov    dl,cl
c00195a0:	c0 e9 02             	shr    cl,0x2
c00195a3:	c1 e2 06             	shl    edx,0x6
c00195a6:	09 d0                	or     eax,edx
c00195a8:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00195ae:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00195b4:	83 e0 c0             	and    eax,0xffffffc0
c00195b7:	09 c1                	or     ecx,eax
c00195b9:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00195bf:	83 ec 0c             	sub    esp,0xc
c00195c2:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00195c9:	56                   	push   esi
c00195ca:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195ce:	50                   	push   eax
c00195cf:	57                   	push   edi
c00195d0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00195d4:	55                   	push   ebp
c00195d5:	68 00 00 00 80       	push   0x80000000
c00195da:	e8 e7 f5 ff ff       	call   c0018bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195df:	83 c4 20             	add    esp,0x20
c00195e2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00195ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00195ee:	76 1e                	jbe    c001960e <CPU::detectFeatures()+0x602>
c00195f0:	83 ec 0c             	sub    esp,0xc
c00195f3:	56                   	push   esi
c00195f4:	50                   	push   eax
c00195f5:	57                   	push   edi
c00195f6:	55                   	push   ebp
c00195f7:	68 01 00 00 80       	push   0x80000001
c00195fc:	e8 c5 f5 ff ff       	call   c0018bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019601:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001960b:	83 c4 20             	add    esp,0x20
c001960e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019614:	83 f8 01             	cmp    eax,0x1
c0019617:	75 6f                	jne    c0019688 <CPU::detectFeatures()+0x67c>
c0019619:	51                   	push   ecx
c001961a:	51                   	push   ecx
c001961b:	68 5a b7 02 c0       	push   0xc002b75a
c0019620:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019624:	56                   	push   esi
c0019625:	e8 0a 72 fe ff       	call   c0000834 <strcpy>
c001962a:	5f                   	pop    edi
c001962b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019631:	5d                   	pop    ebp
c0019632:	66 c1 e8 06          	shr    ax,0x6
c0019636:	0f b6 c0             	movzx  eax,al
c0019639:	50                   	push   eax
c001963a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019640:	c1 e8 0e             	shr    eax,0xe
c0019643:	0f b6 c0             	movzx  eax,al
c0019646:	50                   	push   eax
c0019647:	e8 24 f2 ff ff       	call   c0018870 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001964c:	5a                   	pop    edx
c001964d:	59                   	pop    ecx
c001964e:	50                   	push   eax
c001964f:	56                   	push   esi
c0019650:	e8 1f 73 fe ff       	call   c0000974 <strcat>
c0019655:	5f                   	pop    edi
c0019656:	5d                   	pop    ebp
c0019657:	56                   	push   esi
c0019658:	53                   	push   ebx
c0019659:	e8 30 ae ff ff       	call   c001448e <Device::setName(char const*)>
c001965e:	58                   	pop    eax
c001965f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019665:	5a                   	pop    edx
c0019666:	68 61 b7 02 c0       	push   0xc002b761
c001966b:	50                   	push   eax
c001966c:	e8 4f 72 fe ff       	call   c00008c0 <strcmp>
c0019671:	83 c4 10             	add    esp,0x10
c0019674:	85 c0                	test   eax,eax
c0019676:	0f 85 71 03 00 00    	jne    c00199ed <CPU::detectFeatures()+0x9e1>
c001967c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019683:	e9 65 03 00 00       	jmp    c00199ed <CPU::detectFeatures()+0x9e1>
c0019688:	83 f8 02             	cmp    eax,0x2
c001968b:	0f 85 b5 00 00 00    	jne    c0019746 <CPU::detectFeatures()+0x73a>
c0019691:	57                   	push   edi
c0019692:	57                   	push   edi
c0019693:	68 73 b7 02 c0       	push   0xc002b773
c0019698:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001969c:	56                   	push   esi
c001969d:	e8 92 71 fe ff       	call   c0000834 <strcpy>
c00196a2:	5d                   	pop    ebp
c00196a3:	58                   	pop    eax
c00196a4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196aa:	66 c1 e8 06          	shr    ax,0x6
c00196ae:	0f b6 c0             	movzx  eax,al
c00196b1:	50                   	push   eax
c00196b2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196b8:	c1 e8 0e             	shr    eax,0xe
c00196bb:	0f b6 c0             	movzx  eax,al
c00196be:	50                   	push   eax
c00196bf:	e8 18 f0 ff ff       	call   c00186dc <CPU::lookupAMDName(unsigned char, unsigned char)>
c00196c4:	5a                   	pop    edx
c00196c5:	59                   	pop    ecx
c00196c6:	50                   	push   eax
c00196c7:	56                   	push   esi
c00196c8:	e8 a7 72 fe ff       	call   c0000974 <strcat>
c00196cd:	5f                   	pop    edi
c00196ce:	5d                   	pop    ebp
c00196cf:	56                   	push   esi
c00196d0:	53                   	push   ebx
c00196d1:	e8 b8 ad ff ff       	call   c001448e <Device::setName(char const*)>
c00196d6:	58                   	pop    eax
c00196d7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00196dd:	5a                   	pop    edx
c00196de:	68 78 b7 02 c0       	push   0xc002b778
c00196e3:	50                   	push   eax
c00196e4:	e8 d7 71 fe ff       	call   c00008c0 <strcmp>
c00196e9:	83 c4 10             	add    esp,0x10
c00196ec:	85 c0                	test   eax,eax
c00196ee:	75 20                	jne    c0019710 <CPU::detectFeatures()+0x704>
c00196f0:	8b 15 e8 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e8
c00196f6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00196fc:	a8 01                	test   al,0x1
c00196fe:	74 10                	je     c0019710 <CPU::detectFeatures()+0x704>
c0019700:	83 e0 fe             	and    eax,0xfffffffe
c0019703:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019709:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019710:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019716:	c1 e8 0e             	shr    eax,0xe
c0019719:	3c 05                	cmp    al,0x5
c001971b:	0f 85 cc 02 00 00    	jne    c00199ed <CPU::detectFeatures()+0x9e1>
c0019721:	56                   	push   esi
c0019722:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019728:	83 e0 0f             	and    eax,0xf
c001972b:	50                   	push   eax
c001972c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019732:	66 c1 e8 06          	shr    ax,0x6
c0019736:	0f b6 c0             	movzx  eax,al
c0019739:	50                   	push   eax
c001973a:	6a 05                	push   0x5
c001973c:	e8 11 f4 ff ff       	call   c0018b52 <CPU::AMD_K6_writeback(int, int, int)>
c0019741:	e9 1f 02 00 00       	jmp    c0019965 <CPU::detectFeatures()+0x959>
c0019746:	8d 50 fd             	lea    edx,[eax-0x3]
c0019749:	83 fa 01             	cmp    edx,0x1
c001974c:	76 09                	jbe    c0019757 <CPU::detectFeatures()+0x74b>
c001974e:	83 f8 06             	cmp    eax,0x6
c0019751:	0f 85 91 01 00 00    	jne    c00198e8 <CPU::detectFeatures()+0x8dc>
c0019757:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001975d:	c1 ea 0e             	shr    edx,0xe
c0019760:	80 fa 05             	cmp    dl,0x5
c0019763:	75 7b                	jne    c00197e0 <CPU::detectFeatures()+0x7d4>
c0019765:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001976b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019770:	66 81 fa 00 01       	cmp    dx,0x100
c0019775:	75 0c                	jne    c0019783 <CPU::detectFeatures()+0x777>
c0019777:	51                   	push   ecx
c0019778:	51                   	push   ecx
c0019779:	68 7f b7 02 c0       	push   0xc002b77f
c001977e:	e9 dc 01 00 00       	jmp    c001995f <CPU::detectFeatures()+0x953>
c0019783:	66 81 fa 00 02       	cmp    dx,0x200
c0019788:	75 0c                	jne    c0019796 <CPU::detectFeatures()+0x78a>
c001978a:	52                   	push   edx
c001978b:	52                   	push   edx
c001978c:	68 92 b7 02 c0       	push   0xc002b792
c0019791:	e9 c9 01 00 00       	jmp    c001995f <CPU::detectFeatures()+0x953>
c0019796:	66 81 fa 40 02       	cmp    dx,0x240
c001979b:	75 0c                	jne    c00197a9 <CPU::detectFeatures()+0x79d>
c001979d:	50                   	push   eax
c001979e:	50                   	push   eax
c001979f:	68 a4 b7 02 c0       	push   0xc002b7a4
c00197a4:	e9 b6 01 00 00       	jmp    c001995f <CPU::detectFeatures()+0x953>
c00197a9:	83 f8 06             	cmp    eax,0x6
c00197ac:	75 0c                	jne    c00197ba <CPU::detectFeatures()+0x7ae>
c00197ae:	50                   	push   eax
c00197af:	50                   	push   eax
c00197b0:	68 b6 b7 02 c0       	push   0xc002b7b6
c00197b5:	e9 a5 01 00 00       	jmp    c001995f <CPU::detectFeatures()+0x953>
c00197ba:	83 f8 04             	cmp    eax,0x4
c00197bd:	75 0c                	jne    c00197cb <CPU::detectFeatures()+0x7bf>
c00197bf:	50                   	push   eax
c00197c0:	50                   	push   eax
c00197c1:	68 c2 b7 02 c0       	push   0xc002b7c2
c00197c6:	e9 94 01 00 00       	jmp    c001995f <CPU::detectFeatures()+0x953>
c00197cb:	83 f8 03             	cmp    eax,0x3
c00197ce:	0f 85 19 02 00 00    	jne    c00199ed <CPU::detectFeatures()+0x9e1>
c00197d4:	50                   	push   eax
c00197d5:	50                   	push   eax
c00197d6:	68 ca b7 02 c0       	push   0xc002b7ca
c00197db:	e9 7f 01 00 00       	jmp    c001995f <CPU::detectFeatures()+0x953>
c00197e0:	80 fa 06             	cmp    dl,0x6
c00197e3:	0f 85 db 00 00 00    	jne    c00198c4 <CPU::detectFeatures()+0x8b8>
c00197e9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197ef:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00197f4:	66 81 fa 80 01       	cmp    dx,0x180
c00197f9:	75 0c                	jne    c0019807 <CPU::detectFeatures()+0x7fb>
c00197fb:	50                   	push   eax
c00197fc:	50                   	push   eax
c00197fd:	68 d5 b7 02 c0       	push   0xc002b7d5
c0019802:	e9 58 01 00 00       	jmp    c001995f <CPU::detectFeatures()+0x953>
c0019807:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001980d:	66 f7 c1 80 ff       	test   cx,0xff80
c0019812:	75 0c                	jne    c0019820 <CPU::detectFeatures()+0x814>
c0019814:	50                   	push   eax
c0019815:	50                   	push   eax
c0019816:	68 e5 b7 02 c0       	push   0xc002b7e5
c001981b:	e9 3f 01 00 00       	jmp    c001995f <CPU::detectFeatures()+0x953>
c0019820:	66 81 fa 40 02       	cmp    dx,0x240
c0019825:	75 0c                	jne    c0019833 <CPU::detectFeatures()+0x827>
c0019827:	55                   	push   ebp
c0019828:	55                   	push   ebp
c0019829:	68 ec b7 02 c0       	push   0xc002b7ec
c001982e:	e9 2c 01 00 00       	jmp    c001995f <CPU::detectFeatures()+0x953>
c0019833:	66 81 fa 80 02       	cmp    dx,0x280
c0019838:	75 0c                	jne    c0019846 <CPU::detectFeatures()+0x83a>
c001983a:	57                   	push   edi
c001983b:	57                   	push   edi
c001983c:	68 f5 b7 02 c0       	push   0xc002b7f5
c0019841:	e9 19 01 00 00       	jmp    c001995f <CPU::detectFeatures()+0x953>
c0019846:	66 81 fa 40 03       	cmp    dx,0x340
c001984b:	74 ed                	je     c001983a <CPU::detectFeatures()+0x82e>
c001984d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019852:	75 0c                	jne    c0019860 <CPU::detectFeatures()+0x854>
c0019854:	56                   	push   esi
c0019855:	56                   	push   esi
c0019856:	68 fc b7 02 c0       	push   0xc002b7fc
c001985b:	e9 ff 00 00 00       	jmp    c001995f <CPU::detectFeatures()+0x953>
c0019860:	83 f8 06             	cmp    eax,0x6
c0019863:	0f 84 45 ff ff ff    	je     c00197ae <CPU::detectFeatures()+0x7a2>
c0019869:	83 f8 04             	cmp    eax,0x4
c001986c:	0f 84 4d ff ff ff    	je     c00197bf <CPU::detectFeatures()+0x7b3>
c0019872:	83 f8 03             	cmp    eax,0x3
c0019875:	0f 85 72 01 00 00    	jne    c00199ed <CPU::detectFeatures()+0x9e1>
c001987b:	51                   	push   ecx
c001987c:	51                   	push   ecx
c001987d:	68 05 b8 02 c0       	push   0xc002b805
c0019882:	53                   	push   ebx
c0019883:	e8 06 ac ff ff       	call   c001448e <Device::setName(char const*)>
c0019888:	b1 c1                	mov    cl,0xc1
c001988a:	88 c8                	mov    al,cl
c001988c:	e6 22                	out    0x22,al
c001988e:	e4 23                	in     al,0x23
c0019890:	88 c2                	mov    dl,al
c0019892:	88 c8                	mov    al,cl
c0019894:	e6 22                	out    0x22,al
c0019896:	88 d0                	mov    al,dl
c0019898:	83 c8 10             	or     eax,0x10
c001989b:	e6 23                	out    0x23,al
c001989d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00198a4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00198a7:	89 d0                	mov    eax,edx
c00198a9:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00198af:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00198b3:	40                   	inc    eax
c00198b4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00198ba:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00198bf:	e9 a1 00 00 00       	jmp    c0019965 <CPU::detectFeatures()+0x959>
c00198c4:	83 f8 06             	cmp    eax,0x6
c00198c7:	0f 84 e1 fe ff ff    	je     c00197ae <CPU::detectFeatures()+0x7a2>
c00198cd:	83 f8 04             	cmp    eax,0x4
c00198d0:	0f 84 e9 fe ff ff    	je     c00197bf <CPU::detectFeatures()+0x7b3>
c00198d6:	83 f8 03             	cmp    eax,0x3
c00198d9:	0f 85 0e 01 00 00    	jne    c00199ed <CPU::detectFeatures()+0x9e1>
c00198df:	52                   	push   edx
c00198e0:	52                   	push   edx
c00198e1:	68 10 b8 02 c0       	push   0xc002b810
c00198e6:	eb 77                	jmp    c001995f <CPU::detectFeatures()+0x953>
c00198e8:	83 f8 07             	cmp    eax,0x7
c00198eb:	75 09                	jne    c00198f6 <CPU::detectFeatures()+0x8ea>
c00198ed:	50                   	push   eax
c00198ee:	50                   	push   eax
c00198ef:	68 1a b8 02 c0       	push   0xc002b81a
c00198f4:	eb 69                	jmp    c001995f <CPU::detectFeatures()+0x953>
c00198f6:	83 f8 0a             	cmp    eax,0xa
c00198f9:	75 09                	jne    c0019904 <CPU::detectFeatures()+0x8f8>
c00198fb:	50                   	push   eax
c00198fc:	50                   	push   eax
c00198fd:	68 25 b8 02 c0       	push   0xc002b825
c0019902:	eb 5b                	jmp    c001995f <CPU::detectFeatures()+0x953>
c0019904:	83 f8 0b             	cmp    eax,0xb
c0019907:	75 09                	jne    c0019912 <CPU::detectFeatures()+0x906>
c0019909:	50                   	push   eax
c001990a:	50                   	push   eax
c001990b:	68 2d b8 02 c0       	push   0xc002b82d
c0019910:	eb 4d                	jmp    c001995f <CPU::detectFeatures()+0x953>
c0019912:	83 f8 08             	cmp    eax,0x8
c0019915:	75 09                	jne    c0019920 <CPU::detectFeatures()+0x914>
c0019917:	50                   	push   eax
c0019918:	50                   	push   eax
c0019919:	68 36 b8 02 c0       	push   0xc002b836
c001991e:	eb 3f                	jmp    c001995f <CPU::detectFeatures()+0x953>
c0019920:	83 f8 09             	cmp    eax,0x9
c0019923:	75 09                	jne    c001992e <CPU::detectFeatures()+0x922>
c0019925:	50                   	push   eax
c0019926:	50                   	push   eax
c0019927:	68 3e b8 02 c0       	push   0xc002b83e
c001992c:	eb 31                	jmp    c001995f <CPU::detectFeatures()+0x953>
c001992e:	83 f8 05             	cmp    eax,0x5
c0019931:	75 09                	jne    c001993c <CPU::detectFeatures()+0x930>
c0019933:	50                   	push   eax
c0019934:	50                   	push   eax
c0019935:	68 46 b8 02 c0       	push   0xc002b846
c001993a:	eb 23                	jmp    c001995f <CPU::detectFeatures()+0x953>
c001993c:	83 f8 0c             	cmp    eax,0xc
c001993f:	75 09                	jne    c001994a <CPU::detectFeatures()+0x93e>
c0019941:	55                   	push   ebp
c0019942:	55                   	push   ebp
c0019943:	68 54 b8 02 c0       	push   0xc002b854
c0019948:	eb 15                	jmp    c001995f <CPU::detectFeatures()+0x953>
c001994a:	83 f8 0d             	cmp    eax,0xd
c001994d:	75 09                	jne    c0019958 <CPU::detectFeatures()+0x94c>
c001994f:	57                   	push   edi
c0019950:	57                   	push   edi
c0019951:	68 5f b8 02 c0       	push   0xc002b85f
c0019956:	eb 07                	jmp    c001995f <CPU::detectFeatures()+0x953>
c0019958:	56                   	push   esi
c0019959:	56                   	push   esi
c001995a:	68 73 b8 02 c0       	push   0xc002b873
c001995f:	53                   	push   ebx
c0019960:	e8 29 ab ff ff       	call   c001448e <Device::setName(char const*)>
c0019965:	83 c4 10             	add    esp,0x10
c0019968:	e9 80 00 00 00       	jmp    c00199ed <CPU::detectFeatures()+0x9e1>
c001996d:	51                   	push   ecx
c001996e:	51                   	push   ecx
c001996f:	68 bf b6 02 c0       	push   0xc002b6bf
c0019974:	57                   	push   edi
c0019975:	e8 ba 6e fe ff       	call   c0000834 <strcpy>
c001997a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019984:	e8 25 69 fe ff       	call   c00002ae <is486>
c0019989:	83 c4 10             	add    esp,0x10
c001998c:	85 c0                	test   eax,eax
c001998e:	74 2b                	je     c00199bb <CPU::detectFeatures()+0x9af>
c0019990:	52                   	push   edx
c0019991:	52                   	push   edx
c0019992:	68 7f b8 02 c0       	push   0xc002b87f
c0019997:	53                   	push   ebx
c0019998:	e8 f1 aa ff ff       	call   c001448e <Device::setName(char const*)>
c001999d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00199a4:	0f 20 c0             	mov    eax,cr0
c00199a7:	83 e0 14             	and    eax,0x14
c00199aa:	83 c4 10             	add    esp,0x10
c00199ad:	83 f8 04             	cmp    eax,0x4
c00199b0:	75 1f                	jne    c00199d1 <CPU::detectFeatures()+0x9c5>
c00199b2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00199b9:	eb 32                	jmp    c00199ed <CPU::detectFeatures()+0x9e1>
c00199bb:	50                   	push   eax
c00199bc:	50                   	push   eax
c00199bd:	68 8a b8 02 c0       	push   0xc002b88a
c00199c2:	53                   	push   ebx
c00199c3:	e8 c6 aa ff ff       	call   c001448e <Device::setName(char const*)>
c00199c8:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00199cf:	eb d3                	jmp    c00199a4 <CPU::detectFeatures()+0x998>
c00199d1:	e8 b3 68 fe ff       	call   c0000289 <hasLegacyFPU>
c00199d6:	83 e0 01             	and    eax,0x1
c00199d9:	8d 14 00             	lea    edx,[eax+eax*1]
c00199dc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00199e2:	83 e0 fd             	and    eax,0xfffffffd
c00199e5:	09 d0                	or     eax,edx
c00199e7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00199ed:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00199f4:	83 c4 4c             	add    esp,0x4c
c00199f7:	5b                   	pop    ebx
c00199f8:	5e                   	pop    esi
c00199f9:	5f                   	pop    edi
c00199fa:	5d                   	pop    ebp
c00199fb:	c3                   	ret    

c00199fc <CPU::setupSMEP()>:
c00199fc:	0f 20 e0             	mov    eax,cr4
c00199ff:	0d 00 00 10 00       	or     eax,0x100000
c0019a04:	0f 22 e0             	mov    cr4,eax
c0019a07:	c3                   	ret    

c0019a08 <CPU::setupUMIP()>:
c0019a08:	0f 20 e0             	mov    eax,cr4
c0019a0b:	80 cc 08             	or     ah,0x8
c0019a0e:	0f 22 e0             	mov    cr4,eax
c0019a11:	c3                   	ret    

c0019a12 <CPU::setupTSC()>:
c0019a12:	0f 20 e0             	mov    eax,cr4
c0019a15:	83 c8 04             	or     eax,0x4
c0019a18:	0f 22 e0             	mov    cr4,eax
c0019a1b:	c3                   	ret    

c0019a1c <CPU::setupLargePages()>:
c0019a1c:	0f 20 e0             	mov    eax,cr4
c0019a1f:	83 c8 10             	or     eax,0x10
c0019a22:	0f 22 e0             	mov    cr4,eax
c0019a25:	c3                   	ret    

c0019a26 <CPU::setupPAT()>:
c0019a26:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0019a2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019a32:	74 2c                	je     c0019a60 <CPU::setupPAT()+0x3a>
c0019a34:	53                   	push   ebx
c0019a35:	83 ec 10             	sub    esp,0x10
c0019a38:	68 77 02 00 00       	push   0x277
c0019a3d:	50                   	push   eax
c0019a3e:	e8 a5 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019a43:	83 e2 f8             	and    edx,0xfffffff8
c0019a46:	83 ca 01             	or     edx,0x1
c0019a49:	52                   	push   edx
c0019a4a:	50                   	push   eax
c0019a4b:	68 77 02 00 00       	push   0x277
c0019a50:	ff 35 e8 e2 02 c0    	push   DWORD PTR ds:0xc002e2e8
c0019a56:	e8 b9 53 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019a5b:	83 c4 28             	add    esp,0x28
c0019a5e:	5b                   	pop    ebx
c0019a5f:	c3                   	ret    
c0019a60:	c3                   	ret    
c0019a61:	90                   	nop

c0019a62 <CPU::setupMTRR()>:
c0019a62:	c3                   	ret    
c0019a63:	90                   	nop

c0019a64 <CPU::setupGlobalPages()>:
c0019a64:	0f 20 e0             	mov    eax,cr4
c0019a67:	0c 80                	or     al,0x80
c0019a69:	0f 22 e0             	mov    cr4,eax
c0019a6c:	c3                   	ret    
c0019a6d:	90                   	nop

c0019a6e <CPU::allowUsermodeDataAccess()>:
c0019a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a72:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019a79:	74 03                	je     c0019a7e <CPU::allowUsermodeDataAccess()+0x10>
c0019a7b:	0f 01 cb             	stac   
c0019a7e:	c3                   	ret    
c0019a7f:	90                   	nop

c0019a80 <CPU::prohibitUsermodeDataAccess()>:
c0019a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a84:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019a8b:	74 03                	je     c0019a90 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019a8d:	0f 01 ca             	clac   
c0019a90:	c3                   	ret    
c0019a91:	90                   	nop

c0019a92 <CPU::setupSMAP()>:
c0019a92:	0f 20 e0             	mov    eax,cr4
c0019a95:	0d 00 00 20 00       	or     eax,0x200000
c0019a9a:	0f 22 e0             	mov    cr4,eax
c0019a9d:	eb e1                	jmp    c0019a80 <CPU::prohibitUsermodeDataAccess()>
c0019a9f:	90                   	nop

c0019aa0 <CPU::setupFeatures()>:
c0019aa0:	83 ec 0c             	sub    esp,0xc
c0019aa3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019aa7:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019aae:	74 07                	je     c0019ab7 <CPU::setupFeatures()+0x17>
c0019ab0:	52                   	push   edx
c0019ab1:	e8 46 ff ff ff       	call   c00199fc <CPU::setupSMEP()>
c0019ab6:	58                   	pop    eax
c0019ab7:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019abe:	74 07                	je     c0019ac7 <CPU::setupFeatures()+0x27>
c0019ac0:	52                   	push   edx
c0019ac1:	e8 cc ff ff ff       	call   c0019a92 <CPU::setupSMAP()>
c0019ac6:	58                   	pop    eax
c0019ac7:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019ace:	74 07                	je     c0019ad7 <CPU::setupFeatures()+0x37>
c0019ad0:	52                   	push   edx
c0019ad1:	e8 32 ff ff ff       	call   c0019a08 <CPU::setupUMIP()>
c0019ad6:	58                   	pop    eax
c0019ad7:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019ade:	74 07                	je     c0019ae7 <CPU::setupFeatures()+0x47>
c0019ae0:	52                   	push   edx
c0019ae1:	e8 2c ff ff ff       	call   c0019a12 <CPU::setupTSC()>
c0019ae6:	58                   	pop    eax
c0019ae7:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019aee:	74 07                	je     c0019af7 <CPU::setupFeatures()+0x57>
c0019af0:	52                   	push   edx
c0019af1:	e8 26 ff ff ff       	call   c0019a1c <CPU::setupLargePages()>
c0019af6:	59                   	pop    ecx
c0019af7:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019afe:	74 07                	je     c0019b07 <CPU::setupFeatures()+0x67>
c0019b00:	52                   	push   edx
c0019b01:	e8 5e ff ff ff       	call   c0019a64 <CPU::setupGlobalPages()>
c0019b06:	58                   	pop    eax
c0019b07:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019b0e:	74 0c                	je     c0019b1c <CPU::setupFeatures()+0x7c>
c0019b10:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019b14:	83 c4 0c             	add    esp,0xc
c0019b17:	e9 0a ff ff ff       	jmp    c0019a26 <CPU::setupPAT()>
c0019b1c:	83 c4 0c             	add    esp,0xc
c0019b1f:	c3                   	ret    

c0019b20 <CPU::open(int, int, void*)>:
c0019b20:	57                   	push   edi
c0019b21:	56                   	push   esi
c0019b22:	53                   	push   ebx
c0019b23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b2b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019b31:	83 ec 0c             	sub    esp,0xc
c0019b34:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019b3a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019b40:	50                   	push   eax
c0019b41:	e8 8e 55 ff ff       	call   c000f0d4 <GDT::setup()>
c0019b46:	83 c4 0c             	add    esp,0xc
c0019b49:	6a 00                	push   0x0
c0019b4b:	68 ef be ad de       	push   0xdeadbeef
c0019b50:	57                   	push   edi
c0019b51:	e8 56 79 ff ff       	call   c00114ac <TSS::setup(unsigned long, unsigned long)>
c0019b56:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019b59:	e8 2e 79 ff ff       	call   c001148c <TSS::flush()>
c0019b5e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019b64:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b67:	e8 c4 57 ff ff       	call   c000f330 <IDT::setup()>
c0019b6c:	b8 00 04 00 00       	mov    eax,0x400
c0019b71:	0f 23 f8             	mov    db7,eax
c0019b74:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019b7e:	e8 5a 63 ff ff       	call   c000fedd <Phys::allocatePage()>
c0019b83:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019b89:	89 30                	mov    DWORD PTR [eax],esi
c0019b8b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019b91:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019b94:	58                   	pop    eax
c0019b95:	5a                   	pop    edx
c0019b96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b9c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ba0:	e8 49 8a ff ff       	call   c00125ee <VAS::setCPUSpecific(unsigned long)>
c0019ba5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ba8:	e8 5f f4 ff ff       	call   c001900c <CPU::detectFeatures()>
c0019bad:	e8 ca bc ff ff       	call   c001587c <setupInterruptController()>
c0019bb2:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019bb8:	a1 00 e3 02 c0       	mov    eax,ds:0xc002e300
c0019bbd:	83 e0 10             	and    eax,0x10
c0019bc0:	83 f8 01             	cmp    eax,0x1
c0019bc3:	19 c0                	sbb    eax,eax
c0019bc5:	83 e0 46             	and    eax,0x46
c0019bc8:	83 c0 1e             	add    eax,0x1e
c0019bcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bce:	e8 b7 d1 ff ff       	call   c0016d8a <setupTimer(int)>
c0019bd3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019bd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bdc:	e8 bf fe ff ff       	call   c0019aa0 <CPU::setupFeatures()>
c0019be1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019be4:	e8 a7 f1 ff ff       	call   c0018d90 <CPU::displayFeatures()>
c0019be9:	83 c4 10             	add    esp,0x10
c0019bec:	31 c0                	xor    eax,eax
c0019bee:	5b                   	pop    ebx
c0019bef:	5e                   	pop    esi
c0019bf0:	5f                   	pop    edi
c0019bf1:	c3                   	ret    

c0019bf2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019bf2:	57                   	push   edi
c0019bf3:	56                   	push   esi
c0019bf4:	53                   	push   ebx
c0019bf5:	51                   	push   ecx
c0019bf6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bfa:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019bfd:	0f 02 c0             	lar    eax,ax
c0019c00:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019c03:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019c07:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019c0a:	88 ca                	mov    dl,cl
c0019c0c:	c0 ea 06             	shr    dl,0x6
c0019c0f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019c13:	89 ca                	mov    edx,ecx
c0019c15:	66 c1 ea 03          	shr    dx,0x3
c0019c19:	83 e2 07             	and    edx,0x7
c0019c1c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019c21:	88 17                	mov    BYTE PTR [edi],dl
c0019c23:	0f 84 a6 01 00 00    	je     c0019dcf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019c29:	83 e1 07             	and    ecx,0x7
c0019c2c:	80 f9 04             	cmp    cl,0x4
c0019c2f:	0f 84 98 00 00 00    	je     c0019ccd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019c35:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c3a:	0f 95 c0             	setne  al
c0019c3d:	80 f9 05             	cmp    cl,0x5
c0019c40:	0f 95 c2             	setne  dl
c0019c43:	08 c2                	or     dl,al
c0019c45:	74 79                	je     c0019cc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019c47:	84 c9                	test   cl,cl
c0019c49:	75 05                	jne    c0019c50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019c4b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c4e:	eb 3c                	jmp    c0019c8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c50:	80 f9 01             	cmp    cl,0x1
c0019c53:	75 05                	jne    c0019c5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019c55:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c58:	eb 32                	jmp    c0019c8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c5a:	80 f9 02             	cmp    cl,0x2
c0019c5d:	75 05                	jne    c0019c64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019c5f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c62:	eb 28                	jmp    c0019c8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c64:	31 c0                	xor    eax,eax
c0019c66:	80 f9 03             	cmp    cl,0x3
c0019c69:	75 05                	jne    c0019c70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019c6b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c6e:	eb 1c                	jmp    c0019c8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c70:	80 f9 05             	cmp    cl,0x5
c0019c73:	75 05                	jne    c0019c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019c75:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019c78:	eb 12                	jmp    c0019c8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c7a:	80 f9 06             	cmp    cl,0x6
c0019c7d:	75 05                	jne    c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019c7f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019c82:	eb 08                	jmp    c0019c8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c84:	80 f9 07             	cmp    cl,0x7
c0019c87:	75 03                	jne    c0019c8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c89:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019c8c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019c91:	75 10                	jne    c0019ca3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019c93:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019c97:	b9 03 00 00 00       	mov    ecx,0x3
c0019c9c:	01 d0                	add    eax,edx
c0019c9e:	e9 37 01 00 00       	jmp    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ca3:	b9 02 00 00 00       	mov    ecx,0x2
c0019ca8:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019cad:	0f 85 27 01 00 00    	jne    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019cb3:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019cb6:	b9 06 00 00 00       	mov    ecx,0x6
c0019cbb:	e9 1a 01 00 00       	jmp    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019cc0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019cc3:	b9 06 00 00 00       	mov    ecx,0x6
c0019cc8:	e9 0f 01 00 00       	jmp    c0019ddc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ccd:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019cd0:	88 ca                	mov    dl,cl
c0019cd2:	c0 ea 06             	shr    dl,0x6
c0019cd5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019cd9:	89 ca                	mov    edx,ecx
c0019cdb:	66 c1 ea 03          	shr    dx,0x3
c0019cdf:	83 e2 07             	and    edx,0x7
c0019ce2:	80 e1 07             	and    cl,0x7
c0019ce5:	75 05                	jne    c0019cec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019ce7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019cea:	eb 4c                	jmp    c0019d38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cec:	80 f9 01             	cmp    cl,0x1
c0019cef:	75 05                	jne    c0019cf6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019cf1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019cf4:	eb 42                	jmp    c0019d38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cf6:	80 f9 02             	cmp    cl,0x2
c0019cf9:	75 05                	jne    c0019d00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019cfb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019cfe:	eb 38                	jmp    c0019d38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d00:	80 f9 03             	cmp    cl,0x3
c0019d03:	75 05                	jne    c0019d0a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019d05:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019d08:	eb 2e                	jmp    c0019d38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d0a:	80 f9 04             	cmp    cl,0x4
c0019d0d:	75 12                	jne    c0019d21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019d0f:	f6 c4 60             	test   ah,0x60
c0019d12:	75 08                	jne    c0019d1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019d14:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019d17:	8d 78 14             	lea    edi,[eax+0x14]
c0019d1a:	eb 1c                	jmp    c0019d38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d1c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019d1f:	eb 17                	jmp    c0019d38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d21:	80 f9 05             	cmp    cl,0x5
c0019d24:	75 05                	jne    c0019d2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019d26:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019d29:	eb 0d                	jmp    c0019d38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d2b:	80 f9 06             	cmp    cl,0x6
c0019d2e:	75 05                	jne    c0019d35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019d30:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019d33:	eb 03                	jmp    c0019d38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d35:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019d38:	84 d2                	test   dl,dl
c0019d3a:	75 05                	jne    c0019d41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019d3c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d3f:	eb 3c                	jmp    c0019d7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d41:	80 fa 01             	cmp    dl,0x1
c0019d44:	75 05                	jne    c0019d4b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019d46:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d49:	eb 32                	jmp    c0019d7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d4b:	80 fa 02             	cmp    dl,0x2
c0019d4e:	75 05                	jne    c0019d55 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019d50:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d53:	eb 28                	jmp    c0019d7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d55:	80 fa 03             	cmp    dl,0x3
c0019d58:	75 05                	jne    c0019d5f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019d5a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d5d:	eb 1e                	jmp    c0019d7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d5f:	31 c0                	xor    eax,eax
c0019d61:	80 fa 04             	cmp    dl,0x4
c0019d64:	74 17                	je     c0019d7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d66:	80 fa 05             	cmp    dl,0x5
c0019d69:	75 05                	jne    c0019d70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019d6b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d6e:	eb 0d                	jmp    c0019d7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d70:	80 fa 06             	cmp    dl,0x6
c0019d73:	75 05                	jne    c0019d7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019d75:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d78:	eb 03                	jmp    c0019d7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d7a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d7d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d82:	0f 94 c2             	sete   dl
c0019d85:	80 f9 05             	cmp    cl,0x5
c0019d88:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019d8c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019d91:	d3 e0                	shl    eax,cl
c0019d93:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019d97:	74 0a                	je     c0019da3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019d99:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d9c:	b9 07 00 00 00       	mov    ecx,0x7
c0019da1:	eb 37                	jmp    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019da3:	01 f8                	add    eax,edi
c0019da5:	b9 03 00 00 00       	mov    ecx,0x3
c0019daa:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019daf:	74 2b                	je     c0019ddc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019db1:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019db6:	75 0d                	jne    c0019dc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019db8:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019dbc:	01 c8                	add    eax,ecx
c0019dbe:	b9 04 00 00 00       	mov    ecx,0x4
c0019dc3:	eb 17                	jmp    c0019ddc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019dc5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019dc8:	b9 07 00 00 00       	mov    ecx,0x7
c0019dcd:	eb 0d                	jmp    c0019ddc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019dcf:	b9 02 00 00 00       	mov    ecx,0x2
c0019dd4:	b2 01                	mov    dl,0x1
c0019dd6:	31 c0                	xor    eax,eax
c0019dd8:	eb 02                	jmp    c0019ddc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019dda:	31 d2                	xor    edx,edx
c0019ddc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019de0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019de2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019de6:	88 11                	mov    BYTE PTR [ecx],dl
c0019de8:	5a                   	pop    edx
c0019de9:	5b                   	pop    ebx
c0019dea:	5e                   	pop    esi
c0019deb:	5f                   	pop    edi
c0019dec:	c3                   	ret    

c0019ded <Krnl::smpEntry()>:
c0019ded:	eb fe                	jmp    c0019ded <Krnl::smpEntry()>

c0019def <Krnl::startCPU(int)>:
c0019def:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0019df4:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019dfb:	0f 84 36 01 00 00    	je     c0019f37 <Krnl::startCPU(int)+0x148>
c0019e01:	53                   	push   ebx
c0019e02:	83 ec 08             	sub    esp,0x8
c0019e05:	e8 16 3f 00 00       	call   c001dd20 <lockScheduler()>
c0019e0a:	52                   	push   edx
c0019e0b:	52                   	push   edx
c0019e0c:	6a 1b                	push   0x1b
c0019e0e:	ff 35 e8 e2 02 c0    	push   DWORD PTR ds:0xc002e2e8
c0019e14:	e8 cf 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019e19:	59                   	pop    ecx
c0019e1a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019e1f:	89 c3                	mov    ebx,eax
c0019e21:	58                   	pop    eax
c0019e22:	53                   	push   ebx
c0019e23:	68 c4 b8 02 c0       	push   0xc002b8c4
c0019e28:	e8 59 90 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0019e2d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e3b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e45:	c1 e0 18             	shl    eax,0x18
c0019e48:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019e4e:	83 c4 10             	add    esp,0x10
c0019e51:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019e57:	09 c2                	or     edx,eax
c0019e59:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019e5f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019e65:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e6b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019e71:	80 cd c5             	or     ch,0xc5
c0019e74:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e7a:	f3 90                	pause  
c0019e7c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e7e:	0f ba e1 0c          	bt     ecx,0xc
c0019e82:	72 f6                	jb     c0019e7a <Krnl::startCPU(int)+0x8b>
c0019e84:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e8a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e90:	09 c1                	or     ecx,eax
c0019e92:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e98:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e9e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ea4:	80 cd 85             	or     ch,0x85
c0019ea7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ead:	f3 90                	pause  
c0019eaf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019eb1:	0f ba e1 0c          	bt     ecx,0xc
c0019eb5:	72 f6                	jb     c0019ead <Krnl::startCPU(int)+0xbe>
c0019eb7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ec1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ec7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ecd:	09 c1                	or     ecx,eax
c0019ecf:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019ed5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019edb:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019ee1:	81 c9 02 06 00 00    	or     ecx,0x602
c0019ee7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019eed:	f3 90                	pause  
c0019eef:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ef1:	0f ba e1 0c          	bt     ecx,0xc
c0019ef5:	72 f6                	jb     c0019eed <Krnl::startCPU(int)+0xfe>
c0019ef7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f01:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f07:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f0d:	09 c8                	or     eax,ecx
c0019f0f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019f15:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019f1b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019f20:	0d 02 06 00 00       	or     eax,0x602
c0019f25:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019f2b:	f3 90                	pause  
c0019f2d:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f2f:	0f ba e0 0c          	bt     eax,0xc
c0019f33:	72 f6                	jb     c0019f2b <Krnl::startCPU(int)+0x13c>
c0019f35:	eb fe                	jmp    c0019f35 <Krnl::startCPU(int)+0x146>
c0019f37:	c3                   	ret    

c0019f38 <Krnl::startCPUs()>:
c0019f38:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0019f3d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019f43:	88 c2                	mov    dl,al
c0019f45:	83 e2 0a             	and    edx,0xa
c0019f48:	80 fa 0a             	cmp    dl,0xa
c0019f4b:	75 09                	jne    c0019f56 <Krnl::startCPUs()+0x1e>
c0019f4d:	a8 01                	test   al,0x1
c0019f4f:	74 05                	je     c0019f56 <Krnl::startCPUs()+0x1e>
c0019f51:	e9 45 62 fe ff       	jmp    c000019b <prepareTramp>
c0019f56:	c3                   	ret    
c0019f57:	90                   	nop

c0019f58 <EnvVarContainer::getEnv(char const*)>:
c0019f58:	57                   	push   edi
c0019f59:	56                   	push   esi
c0019f5a:	53                   	push   ebx
c0019f5b:	31 db                	xor    ebx,ebx
c0019f5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f61:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019f63:	7e 2b                	jle    c0019f90 <EnvVarContainer::getEnv(char const*)+0x38>
c0019f65:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019f6c:	50                   	push   eax
c0019f6d:	50                   	push   eax
c0019f6e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f71:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019f74:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019f78:	e8 43 69 fe ff       	call   c00008c0 <strcmp>
c0019f7d:	83 c4 10             	add    esp,0x10
c0019f80:	85 c0                	test   eax,eax
c0019f82:	75 09                	jne    c0019f8d <EnvVarContainer::getEnv(char const*)+0x35>
c0019f84:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f87:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019f8b:	eb 05                	jmp    c0019f92 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019f8d:	43                   	inc    ebx
c0019f8e:	eb d1                	jmp    c0019f61 <EnvVarContainer::getEnv(char const*)+0x9>
c0019f90:	31 c0                	xor    eax,eax
c0019f92:	5b                   	pop    ebx
c0019f93:	5e                   	pop    esi
c0019f94:	5f                   	pop    edi
c0019f95:	c3                   	ret    

c0019f96 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019f96:	57                   	push   edi
c0019f97:	56                   	push   esi
c0019f98:	53                   	push   ebx
c0019f99:	83 ec 1c             	sub    esp,0x1c
c0019f9c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019fa0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019fa4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019fa8:	57                   	push   edi
c0019fa9:	e8 e6 67 fe ff       	call   c0000794 <strlen>
c0019fae:	40                   	inc    eax
c0019faf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fb2:	e8 89 58 ff ff       	call   c000f840 <malloc>
c0019fb7:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019fbe:	e8 d1 67 fe ff       	call   c0000794 <strlen>
c0019fc3:	40                   	inc    eax
c0019fc4:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fc7:	e8 74 58 ff ff       	call   c000f840 <malloc>
c0019fcc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019fcf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019fd3:	e8 bc 67 fe ff       	call   c0000794 <strlen>
c0019fd8:	83 c4 0c             	add    esp,0xc
c0019fdb:	40                   	inc    eax
c0019fdc:	50                   	push   eax
c0019fdd:	6a 00                	push   0x0
c0019fdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019fe3:	e8 90 67 fe ff       	call   c0000778 <memset>
c0019fe8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019feb:	e8 a4 67 fe ff       	call   c0000794 <strlen>
c0019ff0:	83 c4 0c             	add    esp,0xc
c0019ff3:	40                   	inc    eax
c0019ff4:	50                   	push   eax
c0019ff5:	57                   	push   edi
c0019ff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019ffa:	e8 45 67 fe ff       	call   c0000744 <memcpy>
c0019fff:	89 34 24             	mov    DWORD PTR [esp],esi
c001a002:	e8 8d 67 fe ff       	call   c0000794 <strlen>
c001a007:	83 c4 0c             	add    esp,0xc
c001a00a:	40                   	inc    eax
c001a00b:	50                   	push   eax
c001a00c:	6a 00                	push   0x0
c001a00e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a012:	e8 61 67 fe ff       	call   c0000778 <memset>
c001a017:	89 34 24             	mov    DWORD PTR [esp],esi
c001a01a:	e8 75 67 fe ff       	call   c0000794 <strlen>
c001a01f:	83 c4 0c             	add    esp,0xc
c001a022:	40                   	inc    eax
c001a023:	50                   	push   eax
c001a024:	56                   	push   esi
c001a025:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a029:	e8 16 67 fe ff       	call   c0000744 <memcpy>
c001a02e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a030:	40                   	inc    eax
c001a031:	89 03                	mov    DWORD PTR [ebx],eax
c001a033:	c1 e0 03             	shl    eax,0x3
c001a036:	5a                   	pop    edx
c001a037:	59                   	pop    ecx
c001a038:	50                   	push   eax
c001a039:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a03c:	e8 eb 57 ff ff       	call   c000f82c <realloc>
c001a041:	83 c4 0c             	add    esp,0xc
c001a044:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a047:	6a 08                	push   0x8
c001a049:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a04d:	52                   	push   edx
c001a04e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a050:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a054:	50                   	push   eax
c001a055:	e8 ea 66 fe ff       	call   c0000744 <memcpy>
c001a05a:	83 c4 20             	add    esp,0x20
c001a05d:	5b                   	pop    ebx
c001a05e:	5e                   	pop    esi
c001a05f:	5f                   	pop    edi
c001a060:	c3                   	ret    
c001a061:	90                   	nop

c001a062 <EnvVarContainer::deleteEnv(char const*)>:
c001a062:	c3                   	ret    
c001a063:	90                   	nop

c001a064 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a064:	55                   	push   ebp
c001a065:	57                   	push   edi
c001a066:	56                   	push   esi
c001a067:	53                   	push   ebx
c001a068:	81 ec 38 01 00 00    	sub    esp,0x138
c001a06e:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a075:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a07c:	68 14 01 00 00       	push   0x114
c001a081:	e8 ba 57 ff ff       	call   c000f840 <malloc>
c001a086:	83 c4 0c             	add    esp,0xc
c001a089:	89 c7                	mov    edi,eax
c001a08b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a08e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a095:	50                   	push   eax
c001a096:	e8 43 93 ff ff       	call   c00133de <File::File(char const*, Process*)>
c001a09b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a09e:	e8 0d 96 ff ff       	call   c00136b0 <File::exists()>
c001a0a3:	83 c4 10             	add    esp,0x10
c001a0a6:	84 c0                	test   al,al
c001a0a8:	75 31                	jne    c001a0db <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a0aa:	51                   	push   ecx
c001a0ab:	51                   	push   ecx
c001a0ac:	6a 12                	push   0x12
c001a0ae:	57                   	push   edi
c001a0af:	e8 8e 93 ff ff       	call   c0013442 <File::open(FileOpenMode)>
c001a0b4:	8b 07                	mov    eax,DWORD PTR [edi]
c001a0b6:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a0b9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a0bc:	e8 d3 66 fe ff       	call   c0000794 <strlen>
c001a0c1:	5a                   	pop    edx
c001a0c2:	31 d2                	xor    edx,edx
c001a0c4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a0c8:	51                   	push   ecx
c001a0c9:	55                   	push   ebp
c001a0ca:	52                   	push   edx
c001a0cb:	50                   	push   eax
c001a0cc:	57                   	push   edi
c001a0cd:	ff d3                	call   ebx
c001a0cf:	83 c4 14             	add    esp,0x14
c001a0d2:	57                   	push   edi
c001a0d3:	e8 c8 93 ff ff       	call   c00134a0 <File::close()>
c001a0d8:	83 c4 10             	add    esp,0x10
c001a0db:	31 db                	xor    ebx,ebx
c001a0dd:	50                   	push   eax
c001a0de:	31 ed                	xor    ebp,ebp
c001a0e0:	68 00 01 00 00       	push   0x100
c001a0e5:	6a 00                	push   0x0
c001a0e7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a0eb:	50                   	push   eax
c001a0ec:	e8 87 66 fe ff       	call   c0000778 <memset>
c001a0f1:	58                   	pop    eax
c001a0f2:	5a                   	pop    edx
c001a0f3:	6a 01                	push   0x1
c001a0f5:	57                   	push   edi
c001a0f6:	e8 47 93 ff ff       	call   c0013442 <File::open(FileOpenMode)>
c001a0fb:	83 c4 10             	add    esp,0x10
c001a0fe:	83 ec 0c             	sub    esp,0xc
c001a101:	8b 07                	mov    eax,DWORD PTR [edi]
c001a103:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a107:	51                   	push   ecx
c001a108:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a10c:	52                   	push   edx
c001a10d:	6a 00                	push   0x0
c001a10f:	6a 01                	push   0x1
c001a111:	57                   	push   edi
c001a112:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a115:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a119:	83 c4 20             	add    esp,0x20
c001a11c:	3c 0d                	cmp    al,0xd
c001a11e:	0f 84 12 01 00 00    	je     c001a236 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a124:	85 db                	test   ebx,ebx
c001a126:	0f 84 fd 00 00 00    	je     c001a229 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a12c:	3c 0a                	cmp    al,0xa
c001a12e:	74 13                	je     c001a143 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a130:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a135:	74 0c                	je     c001a143 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a137:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a13d:	0f 8e e6 00 00 00    	jle    c001a229 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a143:	83 ec 0c             	sub    esp,0xc
c001a146:	8d 53 01             	lea    edx,[ebx+0x1]
c001a149:	29 dd                	sub    ebp,ebx
c001a14b:	52                   	push   edx
c001a14c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a150:	e8 eb 56 ff ff       	call   c000f840 <malloc>
c001a155:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a158:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a15c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a15f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a163:	e8 d8 56 ff ff       	call   c000f840 <malloc>
c001a168:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a16c:	83 c4 0c             	add    esp,0xc
c001a16f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a173:	52                   	push   edx
c001a174:	6a 00                	push   0x0
c001a176:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a17a:	e8 f9 65 fe ff       	call   c0000778 <memset>
c001a17f:	83 c4 0c             	add    esp,0xc
c001a182:	53                   	push   ebx
c001a183:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a187:	55                   	push   ebp
c001a188:	01 eb                	add    ebx,ebp
c001a18a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a18e:	e8 b1 65 fe ff       	call   c0000744 <memcpy>
c001a193:	83 c4 0c             	add    esp,0xc
c001a196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a19a:	51                   	push   ecx
c001a19b:	6a 00                	push   0x0
c001a19d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a1a1:	e8 d2 65 fe ff       	call   c0000778 <memset>
c001a1a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1a9:	e8 e6 65 fe ff       	call   c0000794 <strlen>
c001a1ae:	83 c4 0c             	add    esp,0xc
c001a1b1:	50                   	push   eax
c001a1b2:	53                   	push   ebx
c001a1b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a1b7:	e8 88 65 fe ff       	call   c0000744 <memcpy>
c001a1bc:	5b                   	pop    ebx
c001a1bd:	58                   	pop    eax
c001a1be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1c2:	68 d5 b8 02 c0       	push   0xc002b8d5
c001a1c7:	e8 ba 8c ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001a1cc:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1ce:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a1d1:	40                   	inc    eax
c001a1d2:	83 c4 10             	add    esp,0x10
c001a1d5:	89 06                	mov    DWORD PTR [esi],eax
c001a1d7:	85 d2                	test   edx,edx
c001a1d9:	75 0c                	jne    c001a1e7 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a1db:	83 ec 0c             	sub    esp,0xc
c001a1de:	6a 08                	push   0x8
c001a1e0:	e8 5b 56 ff ff       	call   c000f840 <malloc>
c001a1e5:	eb 0c                	jmp    c001a1f3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a1e7:	c1 e0 03             	shl    eax,0x3
c001a1ea:	51                   	push   ecx
c001a1eb:	51                   	push   ecx
c001a1ec:	50                   	push   eax
c001a1ed:	52                   	push   edx
c001a1ee:	e8 39 56 ff ff       	call   c000f82c <realloc>
c001a1f3:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a1f6:	83 c4 10             	add    esp,0x10
c001a1f9:	31 db                	xor    ebx,ebx
c001a1fb:	52                   	push   edx
c001a1fc:	6a 08                	push   0x8
c001a1fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a202:	50                   	push   eax
c001a203:	8b 16                	mov    edx,DWORD PTR [esi]
c001a205:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a208:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a20c:	50                   	push   eax
c001a20d:	e8 32 65 fe ff       	call   c0000744 <memcpy>
c001a212:	83 c4 0c             	add    esp,0xc
c001a215:	68 00 01 00 00       	push   0x100
c001a21a:	6a 00                	push   0x0
c001a21c:	55                   	push   ebp
c001a21d:	31 ed                	xor    ebp,ebp
c001a21f:	e8 54 65 fe ff       	call   c0000778 <memset>
c001a224:	83 c4 10             	add    esp,0x10
c001a227:	eb 0d                	jmp    c001a236 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a229:	3c 3d                	cmp    al,0x3d
c001a22b:	74 07                	je     c001a234 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a22d:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a231:	45                   	inc    ebp
c001a232:	eb 02                	jmp    c001a236 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a234:	89 eb                	mov    ebx,ebp
c001a236:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a23b:	0f 85 bd fe ff ff    	jne    c001a0fe <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a241:	50                   	push   eax
c001a242:	50                   	push   eax
c001a243:	ff 36                	push   DWORD PTR [esi]
c001a245:	68 e3 b8 02 c0       	push   0xc002b8e3
c001a24a:	e8 37 8c ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001a24f:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a255:	5b                   	pop    ebx
c001a256:	5e                   	pop    esi
c001a257:	5f                   	pop    edi
c001a258:	5d                   	pop    ebp
c001a259:	c3                   	ret    

c001a25a <EnvVarContainer::__loadSystem()>:
c001a25a:	83 ec 10             	sub    esp,0x10
c001a25d:	68 20 d8 02 c0       	push   0xc002d820
c001a262:	68 0e b9 02 c0       	push   0xc002b90e
c001a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a26b:	e8 f4 fd ff ff       	call   c001a064 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a270:	83 c4 1c             	add    esp,0x1c
c001a273:	c3                   	ret    

c001a274 <EnvVarContainer::__loadUser()>:
c001a274:	c3                   	ret    
c001a275:	90                   	nop

c001a276 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a27a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a284:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a288:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a28b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a28f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a296:	90                   	nop
c001a297:	c3                   	ret    

c001a298 <EnvVarContainer::~EnvVarContainer()>:
c001a298:	83 ec 0c             	sub    esp,0xc
c001a29b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a29f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a2a2:	85 c0                	test   eax,eax
c001a2a4:	74 1d                	je     c001a2c3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2aa:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2ac:	85 c0                	test   eax,eax
c001a2ae:	74 13                	je     c001a2c3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a2b7:	83 ec 0c             	sub    esp,0xc
c001a2ba:	50                   	push   eax
c001a2bb:	e8 90 55 ff ff       	call   c000f850 <free>
c001a2c0:	83 c4 10             	add    esp,0x10
c001a2c3:	90                   	nop
c001a2c4:	83 c4 0c             	add    esp,0xc
c001a2c7:	c3                   	ret    

c001a2c8 <Krnl::getEnv(Process*, char const*)>:
c001a2c8:	53                   	push   ebx
c001a2c9:	83 ec 08             	sub    esp,0x8
c001a2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2d0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a2d4:	39 05 54 18 03 c0    	cmp    DWORD PTR ds:0xc0031854,eax
c001a2da:	74 04                	je     c001a2e0 <Krnl::getEnv(Process*, char const*)+0x18>
c001a2dc:	85 c0                	test   eax,eax
c001a2de:	75 0b                	jne    c001a2eb <Krnl::getEnv(Process*, char const*)+0x23>
c001a2e0:	a1 34 0e 03 c0       	mov    eax,ds:0xc0030e34
c001a2e5:	85 c0                	test   eax,eax
c001a2e7:	75 19                	jne    c001a302 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a2e9:	eb 27                	jmp    c001a312 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a2eb:	52                   	push   edx
c001a2ec:	52                   	push   edx
c001a2ed:	53                   	push   ebx
c001a2ee:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a2f4:	e8 5f fc ff ff       	call   c0019f58 <EnvVarContainer::getEnv(char const*)>
c001a2f9:	83 c4 10             	add    esp,0x10
c001a2fc:	85 c0                	test   eax,eax
c001a2fe:	75 28                	jne    c001a328 <Krnl::getEnv(Process*, char const*)+0x60>
c001a300:	eb de                	jmp    c001a2e0 <Krnl::getEnv(Process*, char const*)+0x18>
c001a302:	52                   	push   edx
c001a303:	52                   	push   edx
c001a304:	53                   	push   ebx
c001a305:	50                   	push   eax
c001a306:	e8 4d fc ff ff       	call   c0019f58 <EnvVarContainer::getEnv(char const*)>
c001a30b:	83 c4 10             	add    esp,0x10
c001a30e:	85 c0                	test   eax,eax
c001a310:	75 16                	jne    c001a328 <Krnl::getEnv(Process*, char const*)+0x60>
c001a312:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a316:	a1 38 0e 03 c0       	mov    eax,ds:0xc0030e38
c001a31b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a31f:	83 c4 08             	add    esp,0x8
c001a322:	5b                   	pop    ebx
c001a323:	e9 30 fc ff ff       	jmp    c0019f58 <EnvVarContainer::getEnv(char const*)>
c001a328:	83 c4 08             	add    esp,0x8
c001a32b:	5b                   	pop    ebx
c001a32c:	c3                   	ret    

c001a32d <Krnl::setEnvSystem(char const*, char const*)>:
c001a32d:	83 ec 10             	sub    esp,0x10
c001a330:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a334:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a338:	ff 35 38 0e 03 c0    	push   DWORD PTR ds:0xc0030e38
c001a33e:	e8 53 fc ff ff       	call   c0019f96 <EnvVarContainer::setEnv(char const*, char const*)>
c001a343:	83 c4 1c             	add    esp,0x1c
c001a346:	c3                   	ret    

c001a347 <Krnl::setEnvUser(char const*, char const*)>:
c001a347:	a1 34 0e 03 c0       	mov    eax,ds:0xc0030e34
c001a34c:	85 c0                	test   eax,eax
c001a34e:	74 15                	je     c001a365 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a350:	83 ec 10             	sub    esp,0x10
c001a353:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a357:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a35b:	50                   	push   eax
c001a35c:	e8 35 fc ff ff       	call   c0019f96 <EnvVarContainer::setEnv(char const*, char const*)>
c001a361:	83 c4 1c             	add    esp,0x1c
c001a364:	c3                   	ret    
c001a365:	c3                   	ret    

c001a366 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a36a:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a370:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a374:	e9 1d fc ff ff       	jmp    c0019f96 <EnvVarContainer::setEnv(char const*, char const*)>

c001a379 <Krnl::deleteEnvSystem(char const*)>:
c001a379:	c3                   	ret    

c001a37a <Krnl::deleteEnvUser(char const*)>:
c001a37a:	c3                   	ret    

c001a37b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a37b:	c3                   	ret    

c001a37c <Krnl::newProcessEnv(Process*)>:
c001a37c:	83 ec 28             	sub    esp,0x28
c001a37f:	6a 0c                	push   0xc
c001a381:	e8 ba 54 ff ff       	call   c000f840 <malloc>
c001a386:	5a                   	pop    edx
c001a387:	59                   	pop    ecx
c001a388:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a38c:	50                   	push   eax
c001a38d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a391:	e8 e0 fe ff ff       	call   c001a276 <EnvVarContainer::EnvVarContainer(Process*)>
c001a396:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a39a:	83 c4 2c             	add    esp,0x2c
c001a39d:	c3                   	ret    

c001a39e <Krnl::copyProcessEnv(Process*, Process*)>:
c001a39e:	56                   	push   esi
c001a39f:	53                   	push   ebx
c001a3a0:	83 ec 10             	sub    esp,0x10
c001a3a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3a7:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a3ad:	6a 0c                	push   0xc
c001a3af:	e8 8c 54 ff ff       	call   c000f840 <malloc>
c001a3b4:	89 c3                	mov    ebx,eax
c001a3b6:	58                   	pop    eax
c001a3b7:	5a                   	pop    edx
c001a3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3bc:	53                   	push   ebx
c001a3bd:	e8 b4 fe ff ff       	call   c001a276 <EnvVarContainer::EnvVarContainer(Process*)>
c001a3c2:	8b 06                	mov    eax,DWORD PTR [esi]
c001a3c4:	89 03                	mov    DWORD PTR [ebx],eax
c001a3c6:	c1 e0 03             	shl    eax,0x3
c001a3c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3cc:	e8 6f 54 ff ff       	call   c000f840 <malloc>
c001a3d1:	83 c4 0c             	add    esp,0xc
c001a3d4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a3d7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a3d9:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a3e0:	52                   	push   edx
c001a3e1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3e4:	50                   	push   eax
c001a3e5:	e8 5a 63 fe ff       	call   c0000744 <memcpy>
c001a3ea:	89 d8                	mov    eax,ebx
c001a3ec:	83 c4 14             	add    esp,0x14
c001a3ef:	5b                   	pop    ebx
c001a3f0:	5e                   	pop    esi
c001a3f1:	c3                   	ret    

c001a3f2 <Krnl::loadSystemEnv()>:
c001a3f2:	53                   	push   ebx
c001a3f3:	83 ec 14             	sub    esp,0x14
c001a3f6:	6a 0c                	push   0xc
c001a3f8:	e8 43 54 ff ff       	call   c000f840 <malloc>
c001a3fd:	89 c3                	mov    ebx,eax
c001a3ff:	58                   	pop    eax
c001a400:	5a                   	pop    edx
c001a401:	ff 35 54 18 03 c0    	push   DWORD PTR ds:0xc0031854
c001a407:	53                   	push   ebx
c001a408:	e8 69 fe ff ff       	call   c001a276 <EnvVarContainer::EnvVarContainer(Process*)>
c001a40d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a410:	89 1d 38 0e 03 c0    	mov    DWORD PTR ds:0xc0030e38,ebx
c001a416:	e8 3f fe ff ff       	call   c001a25a <EnvVarContainer::__loadSystem()>
c001a41b:	83 c4 18             	add    esp,0x18
c001a41e:	5b                   	pop    ebx
c001a41f:	c3                   	ret    

c001a420 <Krnl::loadUserEnv()>:
c001a420:	53                   	push   ebx
c001a421:	83 ec 14             	sub    esp,0x14
c001a424:	6a 0c                	push   0xc
c001a426:	e8 15 54 ff ff       	call   c000f840 <malloc>
c001a42b:	89 c3                	mov    ebx,eax
c001a42d:	58                   	pop    eax
c001a42e:	5a                   	pop    edx
c001a42f:	ff 35 54 18 03 c0    	push   DWORD PTR ds:0xc0031854
c001a435:	53                   	push   ebx
c001a436:	e8 3b fe ff ff       	call   c001a276 <EnvVarContainer::EnvVarContainer(Process*)>
c001a43b:	89 1d 34 0e 03 c0    	mov    DWORD PTR ds:0xc0030e34,ebx
c001a441:	83 c4 18             	add    esp,0x18
c001a444:	5b                   	pop    ebx
c001a445:	c3                   	ret    

c001a446 <Krnl::flushEnv()>:
c001a446:	c3                   	ret    

c001a447 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a44b:	8b 15 34 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e34
c001a451:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a457:	a1 38 0e 03 c0       	mov    eax,ds:0xc0030e38
c001a45c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a45e:	03 01                	add    eax,DWORD PTR [ecx]
c001a460:	85 d2                	test   edx,edx
c001a462:	74 02                	je     c001a466 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a464:	03 02                	add    eax,DWORD PTR [edx]
c001a466:	c3                   	ret    

c001a467 <Krnl::getProcessEnvPair(Process*, int)>:
c001a467:	57                   	push   edi
c001a468:	8b 0d 34 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e34
c001a46e:	56                   	push   esi
c001a46f:	85 c9                	test   ecx,ecx
c001a471:	53                   	push   ebx
c001a472:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a476:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a47a:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a480:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a484:	8b 02                	mov    eax,DWORD PTR [edx]
c001a486:	75 47                	jne    c001a4cf <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a488:	39 c3                	cmp    ebx,eax
c001a48a:	7c 47                	jl     c001a4d3 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a48c:	8b 15 38 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e38
c001a492:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a494:	01 c1                	add    ecx,eax
c001a496:	39 d9                	cmp    ecx,ebx
c001a498:	7e 6c                	jle    c001a506 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a49a:	51                   	push   ecx
c001a49b:	89 d9                	mov    ecx,ebx
c001a49d:	29 c1                	sub    ecx,eax
c001a49f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a4a2:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a4a6:	53                   	push   ebx
c001a4a7:	68 30 b9 02 c0       	push   0xc002b930
c001a4ac:	e8 d5 89 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001a4b1:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a4b7:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a4b9:	a1 38 0e 03 c0       	mov    eax,ds:0xc0030e38
c001a4be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a4c1:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a4c5:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a4c8:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a4cb:	89 06                	mov    DWORD PTR [esi],eax
c001a4cd:	eb 51                	jmp    c001a520 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a4cf:	39 c3                	cmp    ebx,eax
c001a4d1:	7d 05                	jge    c001a4d8 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a4d3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a4d6:	eb 20                	jmp    c001a4f8 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a4d8:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a4da:	8d 14 07             	lea    edx,[edi+eax*1]
c001a4dd:	39 da                	cmp    edx,ebx
c001a4df:	7e 04                	jle    c001a4e5 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a4e1:	29 c3                	sub    ebx,eax
c001a4e3:	eb 10                	jmp    c001a4f5 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a4e5:	8b 0d 38 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e38
c001a4eb:	03 11                	add    edx,DWORD PTR [ecx]
c001a4ed:	39 da                	cmp    edx,ebx
c001a4ef:	7e 15                	jle    c001a506 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a4f1:	29 c3                	sub    ebx,eax
c001a4f3:	29 fb                	sub    ebx,edi
c001a4f5:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a4f8:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a4fc:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a4ff:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a502:	89 06                	mov    DWORD PTR [esi],eax
c001a504:	eb 1d                	jmp    c001a523 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a506:	83 ec 0c             	sub    esp,0xc
c001a509:	68 44 b9 02 c0       	push   0xc002b944
c001a50e:	e8 18 00 00 00       	call   c001a52b <Krnl::panic(char const*)>
c001a513:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a519:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a520:	83 c4 10             	add    esp,0x10
c001a523:	89 f0                	mov    eax,esi
c001a525:	5b                   	pop    ebx
c001a526:	5e                   	pop    esi
c001a527:	5f                   	pop    edi
c001a528:	c2 04 00             	ret    0x4

c001a52b <Krnl::panic(char const*)>:
c001a52b:	55                   	push   ebp
c001a52c:	89 e5                	mov    ebp,esp
c001a52e:	53                   	push   ebx
c001a52f:	83 ec 0c             	sub    esp,0xc
c001a532:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a535:	fa                   	cli    
c001a536:	c6 05 44 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e44,0x1
c001a53d:	53                   	push   ebx
c001a53e:	c6 05 24 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d224,0x0
c001a545:	68 5e b9 02 c0       	push   0xc002b95e
c001a54a:	e8 37 89 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001a54f:	58                   	pop    eax
c001a550:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a555:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a55b:	e8 8d 67 ff ff       	call   c0010ced <setActiveTerminal(VgaText*)>
c001a560:	83 c4 0c             	add    esp,0xc
c001a563:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a568:	6a 01                	push   0x1
c001a56a:	6a 0f                	push   0xf
c001a56c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a572:	e8 a7 61 ff ff       	call   c001071e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a577:	58                   	pop    eax
c001a578:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a57d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a583:	e8 06 6a ff ff       	call   c0010f8e <VgaText::clearScreen()>
c001a588:	58                   	pop    eax
c001a589:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a58e:	5a                   	pop    edx
c001a58f:	68 77 b9 02 c0       	push   0xc002b977
c001a594:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a59a:	e8 6d 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a59f:	59                   	pop    ecx
c001a5a0:	58                   	pop    eax
c001a5a1:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a5a6:	68 1c ba 02 c0       	push   0xc002ba1c
c001a5ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5b1:	e8 56 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a5b6:	58                   	pop    eax
c001a5b7:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a5bc:	5a                   	pop    edx
c001a5bd:	68 93 b9 02 c0       	push   0xc002b993
c001a5c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5c8:	e8 3f 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a5cd:	59                   	pop    ecx
c001a5ce:	58                   	pop    eax
c001a5cf:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a5d4:	53                   	push   ebx
c001a5d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5db:	e8 2c 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a5e0:	58                   	pop    eax
c001a5e1:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a5e6:	5a                   	pop    edx
c001a5e7:	68 b3 b9 02 c0       	push   0xc002b9b3
c001a5ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5f2:	e8 15 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a5f7:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001a5fc:	83 c4 10             	add    esp,0x10
c001a5ff:	85 c0                	test   eax,eax
c001a601:	74 02                	je     c001a605 <Krnl::panic(char const*)+0xda>
c001a603:	ff d0                	call   eax
c001a605:	83 ec 0c             	sub    esp,0xc
c001a608:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a60b:	e8 fd 2f 00 00       	call   c001d60d <Thr::getDriverNameFromAddress(unsigned long)>
c001a610:	83 c4 10             	add    esp,0x10
c001a613:	89 c3                	mov    ebx,eax
c001a615:	85 c0                	test   eax,eax
c001a617:	0f 84 50 02 00 00    	je     c001a86d <Krnl::panic(char const*)+0x342>
c001a61d:	83 ec 08             	sub    esp,0x8
c001a620:	8b 15 54 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031854
c001a626:	68 58 ba 02 c0       	push   0xc002ba58
c001a62b:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a631:	e8 d6 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a636:	58                   	pop    eax
c001a637:	5a                   	pop    edx
c001a638:	8b 15 54 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031854
c001a63e:	68 93 b9 02 c0       	push   0xc002b993
c001a643:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a649:	e8 be 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a64e:	59                   	pop    ecx
c001a64f:	58                   	pop    eax
c001a650:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a655:	53                   	push   ebx
c001a656:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a65c:	e8 ab 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a661:	83 c4 10             	add    esp,0x10
c001a664:	83 ec 08             	sub    esp,0x8
c001a667:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a66c:	68 b2 b9 02 c0       	push   0xc002b9b2
c001a671:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a677:	e8 90 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a67c:	58                   	pop    eax
c001a67d:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a682:	5a                   	pop    edx
c001a683:	68 b0 ba 02 c0       	push   0xc002bab0
c001a688:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a68e:	e8 79 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a693:	59                   	pop    ecx
c001a694:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a699:	5b                   	pop    ebx
c001a69a:	68 f0 ba 02 c0       	push   0xc002baf0
c001a69f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6a5:	e8 62 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a6aa:	58                   	pop    eax
c001a6ab:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a6b0:	5a                   	pop    edx
c001a6b1:	68 9e b9 02 c0       	push   0xc002b99e
c001a6b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6bc:	e8 4b 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a6c1:	59                   	pop    ecx
c001a6c2:	5b                   	pop    ebx
c001a6c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6c6:	68 b6 b9 02 c0       	push   0xc002b9b6
c001a6cb:	e8 b6 87 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001a6d0:	58                   	pop    eax
c001a6d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a6d4:	5a                   	pop    edx
c001a6d5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a6d8:	68 bf b9 02 c0       	push   0xc002b9bf
c001a6dd:	e8 a4 87 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001a6e2:	59                   	pop    ecx
c001a6e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a6e6:	5b                   	pop    ebx
c001a6e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a6e9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a6ec:	68 c8 b9 02 c0       	push   0xc002b9c8
c001a6f1:	e8 90 87 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001a6f6:	58                   	pop    eax
c001a6f7:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a6fc:	5a                   	pop    edx
c001a6fd:	68 34 bb 02 c0       	push   0xc002bb34
c001a702:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a708:	e8 ff 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a70d:	59                   	pop    ecx
c001a70e:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a713:	5b                   	pop    ebx
c001a714:	68 d1 b9 02 c0       	push   0xc002b9d1
c001a719:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a71f:	e8 e8 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a724:	0f 20 c0             	mov    eax,cr0
c001a727:	5a                   	pop    edx
c001a728:	59                   	pop    ecx
c001a729:	50                   	push   eax
c001a72a:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a72f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a735:	e8 f8 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a73a:	5b                   	pop    ebx
c001a73b:	58                   	pop    eax
c001a73c:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a741:	68 db b9 02 c0       	push   0xc002b9db
c001a746:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a74c:	e8 bb 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a751:	0f 20 d0             	mov    eax,cr2
c001a754:	5a                   	pop    edx
c001a755:	59                   	pop    ecx
c001a756:	50                   	push   eax
c001a757:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a75c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a762:	e8 cb 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a767:	5b                   	pop    ebx
c001a768:	58                   	pop    eax
c001a769:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a76e:	68 e5 b9 02 c0       	push   0xc002b9e5
c001a773:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a779:	e8 8e 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a77e:	0f 20 d8             	mov    eax,cr3
c001a781:	5a                   	pop    edx
c001a782:	59                   	pop    ecx
c001a783:	50                   	push   eax
c001a784:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a789:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a78f:	e8 9e 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a794:	5b                   	pop    ebx
c001a795:	58                   	pop    eax
c001a796:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a79b:	68 f8 b9 02 c0       	push   0xc002b9f8
c001a7a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7a6:	e8 61 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a7ab:	0f 20 e0             	mov    eax,cr4
c001a7ae:	5a                   	pop    edx
c001a7af:	59                   	pop    ecx
c001a7b0:	50                   	push   eax
c001a7b1:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a7b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7bc:	e8 71 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a7c1:	5b                   	pop    ebx
c001a7c2:	58                   	pop    eax
c001a7c3:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a7c8:	68 02 ba 02 c0       	push   0xc002ba02
c001a7cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d3:	e8 34 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a7d8:	5a                   	pop    edx
c001a7d9:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a7de:	59                   	pop    ecx
c001a7df:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a7e5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7e8:	50                   	push   eax
c001a7e9:	e8 44 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a7ee:	5b                   	pop    ebx
c001a7ef:	58                   	pop    eax
c001a7f0:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a7f5:	68 19 ba 02 c0       	push   0xc002ba19
c001a7fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a800:	e8 07 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a805:	5a                   	pop    edx
c001a806:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a80b:	59                   	pop    ecx
c001a80c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a812:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a815:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a818:	50                   	push   eax
c001a819:	e8 14 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a81e:	5b                   	pop    ebx
c001a81f:	58                   	pop    eax
c001a820:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a825:	68 19 ba 02 c0       	push   0xc002ba19
c001a82a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a830:	e8 d7 68 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a835:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a83a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a83d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a843:	8b 12                	mov    edx,DWORD PTR [edx]
c001a845:	59                   	pop    ecx
c001a846:	5b                   	pop    ebx
c001a847:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a84a:	50                   	push   eax
c001a84b:	e8 e2 68 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a850:	83 c4 10             	add    esp,0x10
c001a853:	b2 fe                	mov    dl,0xfe
c001a855:	e4 60                	in     al,0x60
c001a857:	3c 1c                	cmp    al,0x1c
c001a859:	74 04                	je     c001a85f <Krnl::panic(char const*)+0x334>
c001a85b:	3c 5a                	cmp    al,0x5a
c001a85d:	75 f6                	jne    c001a855 <Krnl::panic(char const*)+0x32a>
c001a85f:	e4 64                	in     al,0x64
c001a861:	a8 02                	test   al,0x2
c001a863:	75 fa                	jne    c001a85f <Krnl::panic(char const*)+0x334>
c001a865:	88 d0                	mov    al,dl
c001a867:	e6 64                	out    0x64,al
c001a869:	fa                   	cli    
c001a86a:	f4                   	hlt    
c001a86b:	eb e8                	jmp    c001a855 <Krnl::panic(char const*)+0x32a>
c001a86d:	50                   	push   eax
c001a86e:	50                   	push   eax
c001a86f:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a874:	68 84 ba 02 c0       	push   0xc002ba84
c001a879:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a87f:	e8 88 68 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a884:	58                   	pop    eax
c001a885:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a88a:	5a                   	pop    edx
c001a88b:	68 93 b9 02 c0       	push   0xc002b993
c001a890:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a896:	e8 71 68 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a89b:	59                   	pop    ecx
c001a89c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8a1:	5b                   	pop    ebx
c001a8a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a8a5:	83 c0 0c             	add    eax,0xc
c001a8a8:	50                   	push   eax
c001a8a9:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001a8ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b4:	e8 53 68 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a8b9:	83 c4 10             	add    esp,0x10
c001a8bc:	e9 a3 fd ff ff       	jmp    c001a664 <Krnl::panic(char const*)+0x139>

c001a8c1 <Net::switchEndian16(unsigned short)>:
c001a8c1:	83 ec 04             	sub    esp,0x4
c001a8c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a8cc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a8d0:	c1 f8 08             	sar    eax,0x8
c001a8d3:	89 c2                	mov    edx,eax
c001a8d5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a8d9:	c1 e0 08             	shl    eax,0x8
c001a8dc:	09 d0                	or     eax,edx
c001a8de:	83 c4 04             	add    esp,0x4
c001a8e1:	c3                   	ret    

c001a8e2 <Net::switchEndian32(unsigned int)>:
c001a8e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8e6:	c1 e8 18             	shr    eax,0x18
c001a8e9:	89 c2                	mov    edx,eax
c001a8eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ef:	c1 e0 08             	shl    eax,0x8
c001a8f2:	25 00 00 ff 00       	and    eax,0xff0000
c001a8f7:	09 c2                	or     edx,eax
c001a8f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8fd:	c1 e8 08             	shr    eax,0x8
c001a900:	25 00 ff 00 00       	and    eax,0xff00
c001a905:	09 c2                	or     edx,eax
c001a907:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a90b:	c1 e0 18             	shl    eax,0x18
c001a90e:	09 d0                	or     eax,edx
c001a910:	c3                   	ret    

c001a911 <Net::crc32Calc(unsigned char*, int)>:
c001a911:	83 ec 10             	sub    esp,0x10
c001a914:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a919:	75 07                	jne    c001a922 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a91b:	b8 00 00 00 00       	mov    eax,0x0
c001a920:	eb 7c                	jmp    c001a99e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a922:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a927:	7f 07                	jg     c001a930 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a929:	b8 00 00 00 00       	mov    eax,0x0
c001a92e:	eb 6e                	jmp    c001a99e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a930:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a938:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a940:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a944:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a948:	7d 4e                	jge    c001a998 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a94a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a94e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a952:	01 d0                	add    eax,edx
c001a954:	8a 00                	mov    al,BYTE PTR [eax]
c001a956:	0f b6 c0             	movzx  eax,al
c001a959:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a95d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a965:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a96a:	7f 26                	jg     c001a992 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a96c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a970:	83 e0 01             	and    eax,0x1
c001a973:	74 0d                	je     c001a982 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a975:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a979:	d1 e8                	shr    eax,1
c001a97b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a980:	eb 06                	jmp    c001a988 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a986:	d1 e8                	shr    eax,1
c001a988:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a98c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a990:	eb d3                	jmp    c001a965 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a992:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a996:	eb a8                	jmp    c001a940 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a99c:	f7 d0                	not    eax
c001a99e:	83 c4 10             	add    esp,0x10
c001a9a1:	c3                   	ret    

c001a9a2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a9a2:	83 ec 1c             	sub    esp,0x1c
c001a9a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a9ad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9b5:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a9ba:	7f 14                	jg     c001a9d0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a9bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9c0:	8d 50 01             	lea    edx,[eax+0x1]
c001a9c3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9c7:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a9ca:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9ce:	eb e5                	jmp    c001a9b5 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a9d0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9d4:	8d 50 01             	lea    edx,[eax+0x1]
c001a9d7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9db:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a9de:	83 ec 04             	sub    esp,0x4
c001a9e1:	6a 06                	push   0x6
c001a9e3:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a9e7:	50                   	push   eax
c001a9e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a9ec:	e8 53 5d fe ff       	call   c0000744 <memcpy>
c001a9f1:	83 c4 10             	add    esp,0x10
c001a9f4:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a9f9:	83 ec 04             	sub    esp,0x4
c001a9fc:	6a 06                	push   0x6
c001a9fe:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aa02:	50                   	push   eax
c001aa03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa07:	e8 38 5d fe ff       	call   c0000744 <memcpy>
c001aa0c:	83 c4 10             	add    esp,0x10
c001aa0f:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa18:	0f b7 c0             	movzx  eax,ax
c001aa1b:	c1 f8 08             	sar    eax,0x8
c001aa1e:	89 c1                	mov    ecx,eax
c001aa20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa24:	8d 50 01             	lea    edx,[eax+0x1]
c001aa27:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa2b:	88 ca                	mov    dl,cl
c001aa2d:	88 10                	mov    BYTE PTR [eax],dl
c001aa2f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa37:	8d 48 01             	lea    ecx,[eax+0x1]
c001aa3a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aa3e:	88 10                	mov    BYTE PTR [eax],dl
c001aa40:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa48:	83 ec 04             	sub    esp,0x4
c001aa4b:	52                   	push   edx
c001aa4c:	50                   	push   eax
c001aa4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa51:	e8 ee 5c fe ff       	call   c0000744 <memcpy>
c001aa56:	83 c4 10             	add    esp,0x10
c001aa59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa5d:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aa61:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa65:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aa69:	83 ec 08             	sub    esp,0x8
c001aa6c:	50                   	push   eax
c001aa6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aa71:	e8 9b fe ff ff       	call   c001a911 <Net::crc32Calc(unsigned char*, int)>
c001aa76:	83 c4 10             	add    esp,0x10
c001aa79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa81:	c1 e8 18             	shr    eax,0x18
c001aa84:	89 c1                	mov    ecx,eax
c001aa86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa8a:	8d 50 01             	lea    edx,[eax+0x1]
c001aa8d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa91:	88 ca                	mov    dl,cl
c001aa93:	88 10                	mov    BYTE PTR [eax],dl
c001aa95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa99:	c1 e8 10             	shr    eax,0x10
c001aa9c:	89 c1                	mov    ecx,eax
c001aa9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaa2:	8d 50 01             	lea    edx,[eax+0x1]
c001aaa5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaa9:	88 ca                	mov    dl,cl
c001aaab:	88 10                	mov    BYTE PTR [eax],dl
c001aaad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab1:	c1 e8 08             	shr    eax,0x8
c001aab4:	89 c1                	mov    ecx,eax
c001aab6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaba:	8d 50 01             	lea    edx,[eax+0x1]
c001aabd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aac1:	88 ca                	mov    dl,cl
c001aac3:	88 10                	mov    BYTE PTR [eax],dl
c001aac5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aac9:	8d 50 01             	lea    edx,[eax+0x1]
c001aacc:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aad4:	88 10                	mov    BYTE PTR [eax],dl
c001aad6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aada:	83 c4 1c             	add    esp,0x1c
c001aadd:	c3                   	ret    

c001aade <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aade:	83 ec 2c             	sub    esp,0x2c
c001aae1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aae5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aae9:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001aaee:	83 ec 04             	sub    esp,0x4
c001aaf1:	6a 06                	push   0x6
c001aaf3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aaf7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aafb:	83 c0 0e             	add    eax,0xe
c001aafe:	50                   	push   eax
c001aaff:	e8 40 5c fe ff       	call   c0000744 <memcpy>
c001ab04:	83 c4 10             	add    esp,0x10
c001ab07:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab0c:	83 ec 04             	sub    esp,0x4
c001ab0f:	6a 06                	push   0x6
c001ab11:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab15:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab19:	83 c0 08             	add    eax,0x8
c001ab1c:	50                   	push   eax
c001ab1d:	e8 22 5c fe ff       	call   c0000744 <memcpy>
c001ab22:	83 c4 10             	add    esp,0x10
c001ab25:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab2e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab31:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab35:	8a 00                	mov    al,BYTE PTR [eax]
c001ab37:	0f b6 c0             	movzx  eax,al
c001ab3a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ab3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab43:	8d 50 01             	lea    edx,[eax+0x1]
c001ab46:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab4a:	8a 00                	mov    al,BYTE PTR [eax]
c001ab4c:	0f b6 c0             	movzx  eax,al
c001ab4f:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ab54:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ab59:	c1 e0 08             	shl    eax,0x8
c001ab5c:	89 c2                	mov    edx,eax
c001ab5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab62:	09 d0                	or     eax,edx
c001ab64:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ab68:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ab6c:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ab71:	75 3a                	jne    c001abad <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ab73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab77:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab7a:	66 3d dc 05          	cmp    ax,0x5dc
c001ab7e:	77 10                	ja     c001ab90 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ab80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab84:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab87:	0f b7 c0             	movzx  eax,ax
c001ab8a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ab8e:	eb 1d                	jmp    c001abad <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ab90:	83 ec 0c             	sub    esp,0xc
c001ab93:	68 5c bb 02 c0       	push   0xc002bb5c
c001ab98:	e8 e9 82 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001ab9d:	83 c4 10             	add    esp,0x10
c001aba0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aba4:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aba8:	e9 c0 00 00 00       	jmp    c001ac6d <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001abad:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001abb7:	83 ec 04             	sub    esp,0x4
c001abba:	52                   	push   edx
c001abbb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abbf:	50                   	push   eax
c001abc0:	e8 7f 5b fe ff       	call   c0000744 <memcpy>
c001abc5:	83 c4 10             	add    esp,0x10
c001abc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abcc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001abd0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abd4:	8d 50 01             	lea    edx,[eax+0x1]
c001abd7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abdb:	8a 00                	mov    al,BYTE PTR [eax]
c001abdd:	0f b6 c0             	movzx  eax,al
c001abe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abe4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abe8:	8d 50 01             	lea    edx,[eax+0x1]
c001abeb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abef:	8a 00                	mov    al,BYTE PTR [eax]
c001abf1:	0f b6 c0             	movzx  eax,al
c001abf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001abf8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abfc:	8d 50 01             	lea    edx,[eax+0x1]
c001abff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac03:	8a 00                	mov    al,BYTE PTR [eax]
c001ac05:	0f b6 c0             	movzx  eax,al
c001ac08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac10:	8d 50 01             	lea    edx,[eax+0x1]
c001ac13:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac17:	8a 00                	mov    al,BYTE PTR [eax]
c001ac19:	0f b6 c0             	movzx  eax,al
c001ac1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac24:	c1 e0 18             	shl    eax,0x18
c001ac27:	89 c2                	mov    edx,eax
c001ac29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2d:	c1 e0 10             	shl    eax,0x10
c001ac30:	09 c2                	or     edx,eax
c001ac32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac36:	c1 e0 08             	shl    eax,0x8
c001ac39:	09 d0                	or     eax,edx
c001ac3b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ac3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac47:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ac4b:	83 e8 04             	sub    eax,0x4
c001ac4e:	83 ec 08             	sub    esp,0x8
c001ac51:	50                   	push   eax
c001ac52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ac56:	e8 b6 fc ff ff       	call   c001a911 <Net::crc32Calc(unsigned char*, int)>
c001ac5b:	83 c4 10             	add    esp,0x10
c001ac5e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ac62:	0f 94 c2             	sete   dl
c001ac65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac69:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ac6c:	90                   	nop
c001ac6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac71:	83 c4 2c             	add    esp,0x2c
c001ac74:	c2 04 00             	ret    0x4

c001ac77 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ac77:	55                   	push   ebp
c001ac78:	57                   	push   edi
c001ac79:	56                   	push   esi
c001ac7a:	53                   	push   ebx
c001ac7b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac81:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ac88:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ac8a:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ac8d:	80 fb 40             	cmp    bl,0x40
c001ac90:	75 1b                	jne    c001acad <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ac92:	8a 16                	mov    dl,BYTE PTR [esi]
c001ac94:	84 d2                	test   dl,dl
c001ac96:	0f 84 f1 00 00 00    	je     c001ad8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac9c:	8d 46 01             	lea    eax,[esi+0x1]
c001ac9f:	80 fa 3a             	cmp    dl,0x3a
c001aca2:	74 04                	je     c001aca8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001aca4:	89 c6                	mov    esi,eax
c001aca6:	eb ea                	jmp    c001ac92 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001aca8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001acab:	89 c6                	mov    esi,eax
c001acad:	50                   	push   eax
c001acae:	6a 40                	push   0x40
c001acb0:	6a 00                	push   0x0
c001acb2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acb6:	50                   	push   eax
c001acb7:	e8 bc 5a fe ff       	call   c0000778 <memset>
c001acbc:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001acc3:	31 c0                	xor    eax,eax
c001acc5:	83 c4 10             	add    esp,0x10
c001acc8:	8a 0f                	mov    cl,BYTE PTR [edi]
c001acca:	84 c9                	test   cl,cl
c001accc:	0f 84 bb 00 00 00    	je     c001ad8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acd2:	3d c7 00 00 00       	cmp    eax,0xc7
c001acd7:	0f 8f b0 00 00 00    	jg     c001ad8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acdd:	80 f9 0a             	cmp    cl,0xa
c001ace0:	0f 85 98 00 00 00    	jne    c001ad7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ace6:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001aceb:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001acef:	a8 df                	test   al,0xdf
c001acf1:	0f 94 c1             	sete   cl
c001acf4:	3c 23                	cmp    al,0x23
c001acf6:	0f 94 c2             	sete   dl
c001acf9:	08 d1                	or     cl,dl
c001acfb:	75 4a                	jne    c001ad47 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acfd:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad00:	80 fa 01             	cmp    dl,0x1
c001ad03:	76 42                	jbe    c001ad47 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad05:	3c 5b                	cmp    al,0x5b
c001ad07:	75 42                	jne    c001ad4b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad09:	80 fb 40             	cmp    bl,0x40
c001ad0c:	75 39                	jne    c001ad47 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad0e:	83 ec 0c             	sub    esp,0xc
c001ad11:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad15:	52                   	push   edx
c001ad16:	e8 79 5a fe ff       	call   c0000794 <strlen>
c001ad1b:	83 c4 10             	add    esp,0x10
c001ad1e:	83 f8 3f             	cmp    eax,0x3f
c001ad21:	77 6a                	ja     c001ad8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad23:	50                   	push   eax
c001ad24:	50                   	push   eax
c001ad25:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad29:	52                   	push   edx
c001ad2a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad2e:	52                   	push   edx
c001ad2f:	e8 00 5b fe ff       	call   c0000834 <strcpy>
c001ad34:	58                   	pop    eax
c001ad35:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad39:	52                   	push   edx
c001ad3a:	e8 55 5a fe ff       	call   c0000794 <strlen>
c001ad3f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad44:	83 c4 10             	add    esp,0x10
c001ad47:	31 d2                	xor    edx,edx
c001ad49:	eb 3a                	jmp    c001ad85 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad4b:	80 fb 40             	cmp    bl,0x40
c001ad4e:	74 06                	je     c001ad56 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad50:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ad54:	eb 20                	jmp    c001ad76 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ad56:	50                   	push   eax
c001ad57:	50                   	push   eax
c001ad58:	55                   	push   ebp
c001ad59:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad5d:	50                   	push   eax
c001ad5e:	e8 5d 5b fe ff       	call   c00008c0 <strcmp>
c001ad63:	83 c4 10             	add    esp,0x10
c001ad66:	85 c0                	test   eax,eax
c001ad68:	75 dd                	jne    c001ad47 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad6a:	eb e4                	jmp    c001ad50 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ad6c:	8d 50 01             	lea    edx,[eax+0x1]
c001ad6f:	80 f9 3d             	cmp    cl,0x3d
c001ad72:	74 1d                	je     c001ad91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ad74:	89 d0                	mov    eax,edx
c001ad76:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad78:	84 c9                	test   cl,cl
c001ad7a:	75 f0                	jne    c001ad6c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ad7c:	eb 0f                	jmp    c001ad8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad7e:	8d 50 01             	lea    edx,[eax+0x1]
c001ad81:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ad85:	47                   	inc    edi
c001ad86:	89 d0                	mov    eax,edx
c001ad88:	e9 3b ff ff ff       	jmp    c001acc8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ad8d:	31 c0                	xor    eax,eax
c001ad8f:	eb 33                	jmp    c001adc4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ad91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad95:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ad98:	50                   	push   eax
c001ad99:	50                   	push   eax
c001ad9a:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ad9e:	50                   	push   eax
c001ad9f:	56                   	push   esi
c001ada0:	e8 1b 5b fe ff       	call   c00008c0 <strcmp>
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	85 c0                	test   eax,eax
c001adaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001adae:	75 97                	jne    c001ad47 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adb0:	51                   	push   ecx
c001adb1:	51                   	push   ecx
c001adb2:	52                   	push   edx
c001adb3:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001adba:	e8 75 5a fe ff       	call   c0000834 <strcpy>
c001adbf:	83 c4 10             	add    esp,0x10
c001adc2:	b0 01                	mov    al,0x1
c001adc4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001adca:	5b                   	pop    ebx
c001adcb:	5e                   	pop    esi
c001adcc:	5f                   	pop    edi
c001adcd:	5d                   	pop    ebp
c001adce:	c3                   	ret    

c001adcf <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001adcf:	57                   	push   edi
c001add0:	56                   	push   esi
c001add1:	53                   	push   ebx
c001add2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001add8:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001addf:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ade6:	53                   	push   ebx
c001ade7:	e8 a8 59 fe ff       	call   c0000794 <strlen>
c001adec:	89 34 24             	mov    DWORD PTR [esp],esi
c001adef:	89 c7                	mov    edi,eax
c001adf1:	e8 9e 59 fe ff       	call   c0000794 <strlen>
c001adf6:	83 c4 10             	add    esp,0x10
c001adf9:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001adfd:	3d ff 00 00 00       	cmp    eax,0xff
c001ae02:	0f 87 d3 00 00 00    	ja     c001aedb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae08:	57                   	push   edi
c001ae09:	57                   	push   edi
c001ae0a:	56                   	push   esi
c001ae0b:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae0f:	56                   	push   esi
c001ae10:	e8 1f 5a fe ff       	call   c0000834 <strcpy>
c001ae15:	58                   	pop    eax
c001ae16:	5a                   	pop    edx
c001ae17:	68 bc c0 02 c0       	push   0xc002c0bc
c001ae1c:	56                   	push   esi
c001ae1d:	e8 52 5b fe ff       	call   c0000974 <strcat>
c001ae22:	59                   	pop    ecx
c001ae23:	5f                   	pop    edi
c001ae24:	53                   	push   ebx
c001ae25:	56                   	push   esi
c001ae26:	e8 49 5b fe ff       	call   c0000974 <strcat>
c001ae2b:	58                   	pop    eax
c001ae2c:	5a                   	pop    edx
c001ae2d:	68 a8 bb 02 c0       	push   0xc002bba8
c001ae32:	56                   	push   esi
c001ae33:	e8 3c 5b fe ff       	call   c0000974 <strcat>
c001ae38:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae3f:	e8 fc 49 ff ff       	call   c000f840 <malloc>
c001ae44:	83 c4 0c             	add    esp,0xc
c001ae47:	89 c3                	mov    ebx,eax
c001ae49:	ff 35 54 18 03 c0    	push   DWORD PTR ds:0xc0031854
c001ae4f:	56                   	push   esi
c001ae50:	50                   	push   eax
c001ae51:	e8 88 85 ff ff       	call   c00133de <File::File(char const*, Process*)>
c001ae56:	83 c4 10             	add    esp,0x10
c001ae59:	85 db                	test   ebx,ebx
c001ae5b:	74 7e                	je     c001aedb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae5d:	51                   	push   ecx
c001ae5e:	51                   	push   ecx
c001ae5f:	6a 01                	push   0x1
c001ae61:	53                   	push   ebx
c001ae62:	e8 db 85 ff ff       	call   c0013442 <File::open(FileOpenMode)>
c001ae67:	83 c4 10             	add    esp,0x10
c001ae6a:	85 c0                	test   eax,eax
c001ae6c:	74 08                	je     c001ae76 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ae6e:	83 ec 0c             	sub    esp,0xc
c001ae71:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae73:	53                   	push   ebx
c001ae74:	eb 5f                	jmp    c001aed5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ae76:	52                   	push   edx
c001ae77:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ae7b:	50                   	push   eax
c001ae7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ae80:	50                   	push   eax
c001ae81:	53                   	push   ebx
c001ae82:	e8 67 88 ff ff       	call   c00136ee <File::stat(unsigned long long*, bool*)>
c001ae87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae8b:	83 c4 10             	add    esp,0x10
c001ae8e:	89 c1                	mov    ecx,eax
c001ae90:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ae94:	74 31                	je     c001aec7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae96:	83 ec 0c             	sub    esp,0xc
c001ae99:	50                   	push   eax
c001ae9a:	e8 a1 49 ff ff       	call   c000f840 <malloc>
c001ae9f:	89 c6                	mov    esi,eax
c001aea1:	58                   	pop    eax
c001aea2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aea4:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aea8:	52                   	push   edx
c001aea9:	56                   	push   esi
c001aeaa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeb2:	53                   	push   ebx
c001aeb3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aeb6:	83 c4 20             	add    esp,0x20
c001aeb9:	85 c0                	test   eax,eax
c001aebb:	75 0a                	jne    c001aec7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aec1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001aec5:	74 18                	je     c001aedf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001aec7:	83 ec 0c             	sub    esp,0xc
c001aeca:	53                   	push   ebx
c001aecb:	e8 d0 85 ff ff       	call   c00134a0 <File::close()>
c001aed0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aed2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aed5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aed8:	83 c4 10             	add    esp,0x10
c001aedb:	31 c0                	xor    eax,eax
c001aedd:	eb 3b                	jmp    c001af1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001aedf:	83 ec 0c             	sub    esp,0xc
c001aee2:	53                   	push   ebx
c001aee3:	e8 b8 85 ff ff       	call   c00134a0 <File::close()>
c001aee8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aeea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aeed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aef0:	83 c4 0c             	add    esp,0xc
c001aef3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aefa:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af01:	56                   	push   esi
c001af02:	e8 70 fd ff ff       	call   c001ac77 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af07:	89 34 24             	mov    DWORD PTR [esp],esi
c001af0a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af0e:	e8 3d 49 ff ff       	call   c000f850 <free>
c001af13:	83 c4 10             	add    esp,0x10
c001af16:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af1a:	81 c4 20 01 00 00    	add    esp,0x120
c001af20:	5b                   	pop    ebx
c001af21:	5e                   	pop    esi
c001af22:	5f                   	pop    edi
c001af23:	c3                   	ret    

c001af24 <Reg::getLine(char*, char*, char*)>:
c001af24:	57                   	push   edi
c001af25:	56                   	push   esi
c001af26:	53                   	push   ebx
c001af27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af2f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af33:	57                   	push   edi
c001af34:	56                   	push   esi
c001af35:	53                   	push   ebx
c001af36:	68 ad bb 02 c0       	push   0xc002bbad
c001af3b:	e8 8f fe ff ff       	call   c001adcf <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af40:	83 c4 10             	add    esp,0x10
c001af43:	84 c0                	test   al,al
c001af45:	75 10                	jne    c001af57 <Reg::getLine(char*, char*, char*)+0x33>
c001af47:	57                   	push   edi
c001af48:	56                   	push   esi
c001af49:	53                   	push   ebx
c001af4a:	68 d2 bb 02 c0       	push   0xc002bbd2
c001af4f:	e8 7b fe ff ff       	call   c001adcf <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af54:	83 c4 10             	add    esp,0x10
c001af57:	5b                   	pop    ebx
c001af58:	5e                   	pop    esi
c001af59:	5f                   	pop    edi
c001af5a:	c3                   	ret    

c001af5b <Reg::readInt(char*, char*, int*)>:
c001af5b:	55                   	push   ebp
c001af5c:	57                   	push   edi
c001af5d:	56                   	push   esi
c001af5e:	53                   	push   ebx
c001af5f:	81 ec f0 00 00 00    	sub    esp,0xf0
c001af65:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001af69:	57                   	push   edi
c001af6a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af71:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af78:	e8 a7 ff ff ff       	call   c001af24 <Reg::getLine(char*, char*, char*)>
c001af7d:	83 c4 10             	add    esp,0x10
c001af80:	84 c0                	test   al,al
c001af82:	0f 84 b3 00 00 00    	je     c001b03b <Reg::readInt(char*, char*, int*)+0xe0>
c001af88:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001af8c:	80 fa 2b             	cmp    dl,0x2b
c001af8f:	74 0c                	je     c001af9d <Reg::readInt(char*, char*, int*)+0x42>
c001af91:	80 fa 2d             	cmp    dl,0x2d
c001af94:	75 0e                	jne    c001afa4 <Reg::readInt(char*, char*, int*)+0x49>
c001af96:	ba 01 00 00 00       	mov    edx,0x1
c001af9b:	eb 0b                	jmp    c001afa8 <Reg::readInt(char*, char*, int*)+0x4d>
c001af9d:	ba 01 00 00 00       	mov    edx,0x1
c001afa2:	eb 02                	jmp    c001afa6 <Reg::readInt(char*, char*, int*)+0x4b>
c001afa4:	31 d2                	xor    edx,edx
c001afa6:	31 c0                	xor    eax,eax
c001afa8:	be 0a 00 00 00       	mov    esi,0xa
c001afad:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001afb2:	75 20                	jne    c001afd4 <Reg::readInt(char*, char*, int*)+0x79>
c001afb4:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001afb8:	80 f9 78             	cmp    cl,0x78
c001afbb:	75 0a                	jne    c001afc7 <Reg::readInt(char*, char*, int*)+0x6c>
c001afbd:	83 c2 02             	add    edx,0x2
c001afc0:	be 10 00 00 00       	mov    esi,0x10
c001afc5:	eb 0d                	jmp    c001afd4 <Reg::readInt(char*, char*, int*)+0x79>
c001afc7:	80 f9 62             	cmp    cl,0x62
c001afca:	75 08                	jne    c001afd4 <Reg::readInt(char*, char*, int*)+0x79>
c001afcc:	83 c2 02             	add    edx,0x2
c001afcf:	be 02 00 00 00       	mov    esi,0x2
c001afd4:	01 d7                	add    edi,edx
c001afd6:	31 d2                	xor    edx,edx
c001afd8:	8a 1f                	mov    bl,BYTE PTR [edi]
c001afda:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001afde:	80 fb 0d             	cmp    bl,0xd
c001afe1:	0f 94 c3             	sete   bl
c001afe4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001afe9:	0f 94 c1             	sete   cl
c001afec:	08 cb                	or     bl,cl
c001afee:	75 3a                	jne    c001b02a <Reg::readInt(char*, char*, int*)+0xcf>
c001aff0:	0f af d6             	imul   edx,esi
c001aff3:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aff8:	83 fe 10             	cmp    esi,0x10
c001affb:	75 26                	jne    c001b023 <Reg::readInt(char*, char*, int*)+0xc8>
c001affd:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b001:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b004:	89 e9                	mov    ecx,ebp
c001b006:	80 f9 05             	cmp    cl,0x5
c001b009:	77 06                	ja     c001b011 <Reg::readInt(char*, char*, int*)+0xb6>
c001b00b:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b00f:	eb 16                	jmp    c001b027 <Reg::readInt(char*, char*, int*)+0xcc>
c001b011:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b015:	83 e9 61             	sub    ecx,0x61
c001b018:	80 f9 05             	cmp    cl,0x5
c001b01b:	77 06                	ja     c001b023 <Reg::readInt(char*, char*, int*)+0xc8>
c001b01d:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b021:	eb 04                	jmp    c001b027 <Reg::readInt(char*, char*, int*)+0xcc>
c001b023:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b027:	47                   	inc    edi
c001b028:	eb ae                	jmp    c001afd8 <Reg::readInt(char*, char*, int*)+0x7d>
c001b02a:	84 c0                	test   al,al
c001b02c:	74 02                	je     c001b030 <Reg::readInt(char*, char*, int*)+0xd5>
c001b02e:	f7 da                	neg    edx
c001b030:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b037:	89 10                	mov    DWORD PTR [eax],edx
c001b039:	88 d8                	mov    al,bl
c001b03b:	81 c4 ec 00 00 00    	add    esp,0xec
c001b041:	5b                   	pop    ebx
c001b042:	5e                   	pop    esi
c001b043:	5f                   	pop    edi
c001b044:	5d                   	pop    ebp
c001b045:	c3                   	ret    

c001b046 <Reg::readString(char*, char*, char*, int)>:
c001b046:	57                   	push   edi
c001b047:	56                   	push   esi
c001b048:	53                   	push   ebx
c001b049:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b04f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b056:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b05a:	57                   	push   edi
c001b05b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b062:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b069:	e8 b6 fe ff ff       	call   c001af24 <Reg::getLine(char*, char*, char*)>
c001b06e:	83 c4 10             	add    esp,0x10
c001b071:	89 c6                	mov    esi,eax
c001b073:	84 c0                	test   al,al
c001b075:	74 44                	je     c001b0bb <Reg::readString(char*, char*, char*, int)+0x75>
c001b077:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b07e:	31 c0                	xor    eax,eax
c001b080:	4a                   	dec    edx
c001b081:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b084:	84 c9                	test   cl,cl
c001b086:	74 0f                	je     c001b097 <Reg::readString(char*, char*, char*, int)+0x51>
c001b088:	39 c2                	cmp    edx,eax
c001b08a:	7e 0b                	jle    c001b097 <Reg::readString(char*, char*, char*, int)+0x51>
c001b08c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b08f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b094:	40                   	inc    eax
c001b095:	eb ea                	jmp    c001b081 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b097:	83 ec 0c             	sub    esp,0xc
c001b09a:	53                   	push   ebx
c001b09b:	e8 f4 56 fe ff       	call   c0000794 <strlen>
c001b0a0:	83 c4 10             	add    esp,0x10
c001b0a3:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b0a8:	75 11                	jne    c001b0bb <Reg::readString(char*, char*, char*, int)+0x75>
c001b0aa:	83 ec 0c             	sub    esp,0xc
c001b0ad:	53                   	push   ebx
c001b0ae:	e8 e1 56 fe ff       	call   c0000794 <strlen>
c001b0b3:	83 c4 10             	add    esp,0x10
c001b0b6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b0bb:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b0c1:	89 f0                	mov    eax,esi
c001b0c3:	5b                   	pop    ebx
c001b0c4:	5e                   	pop    esi
c001b0c5:	5f                   	pop    edi
c001b0c6:	c3                   	ret    

c001b0c7 <Reg::readBool(char*, char*, bool*)>:
c001b0c7:	83 ec 20             	sub    esp,0x20
c001b0ca:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0ce:	50                   	push   eax
c001b0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0d7:	e8 7f fe ff ff       	call   c001af5b <Reg::readInt(char*, char*, int*)>
c001b0dc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b0e1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b0e5:	0f 95 02             	setne  BYTE PTR [edx]
c001b0e8:	83 c4 2c             	add    esp,0x2c
c001b0eb:	c3                   	ret    

c001b0ec <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b0ec:	53                   	push   ebx
c001b0ed:	83 ec 1c             	sub    esp,0x1c
c001b0f0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b0f4:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b0f8:	50                   	push   eax
c001b0f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b101:	e8 c1 ff ff ff       	call   c001b0c7 <Reg::readBool(char*, char*, bool*)>
c001b106:	83 c4 10             	add    esp,0x10
c001b109:	84 c0                	test   al,al
c001b10b:	74 04                	je     c001b111 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b10d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b111:	88 d8                	mov    al,bl
c001b113:	83 c4 18             	add    esp,0x18
c001b116:	5b                   	pop    ebx
c001b117:	c3                   	ret    

c001b118 <Reg::readIntWithDefault(char*, char*, int)>:
c001b118:	53                   	push   ebx
c001b119:	83 ec 1c             	sub    esp,0x1c
c001b11c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b120:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b124:	50                   	push   eax
c001b125:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b129:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b12d:	e8 29 fe ff ff       	call   c001af5b <Reg::readInt(char*, char*, int*)>
c001b132:	83 c4 10             	add    esp,0x10
c001b135:	84 c0                	test   al,al
c001b137:	74 04                	je     c001b13d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b139:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b13d:	89 d8                	mov    eax,ebx
c001b13f:	83 c4 18             	add    esp,0x18
c001b142:	5b                   	pop    ebx
c001b143:	c3                   	ret    

c001b144 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b144:	57                   	push   edi
c001b145:	56                   	push   esi
c001b146:	53                   	push   ebx
c001b147:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b14b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b14f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b153:	56                   	push   esi
c001b154:	53                   	push   ebx
c001b155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b15d:	e8 e4 fe ff ff       	call   c001b046 <Reg::readString(char*, char*, char*, int)>
c001b162:	83 c4 10             	add    esp,0x10
c001b165:	84 c0                	test   al,al
c001b167:	75 1b                	jne    c001b184 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b169:	50                   	push   eax
c001b16a:	56                   	push   esi
c001b16b:	4e                   	dec    esi
c001b16c:	6a 00                	push   0x0
c001b16e:	53                   	push   ebx
c001b16f:	e8 04 56 fe ff       	call   c0000778 <memset>
c001b174:	83 c4 0c             	add    esp,0xc
c001b177:	56                   	push   esi
c001b178:	57                   	push   edi
c001b179:	53                   	push   ebx
c001b17a:	89 fb                	mov    ebx,edi
c001b17c:	e8 c3 55 fe ff       	call   c0000744 <memcpy>
c001b181:	83 c4 10             	add    esp,0x10
c001b184:	89 d8                	mov    eax,ebx
c001b186:	5b                   	pop    ebx
c001b187:	5e                   	pop    esi
c001b188:	5f                   	pop    edi
c001b189:	c3                   	ret    

c001b18a <Sys::eject(regs*)>:
c001b18a:	83 ec 0c             	sub    esp,0xc
c001b18d:	83 ca ff             	or     edx,0xffffffff
c001b190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b194:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b197:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b19c:	83 e9 41             	sub    ecx,0x41
c001b19f:	83 f9 19             	cmp    ecx,0x19
c001b1a2:	77 18                	ja     c001b1bc <Sys::eject(regs*)+0x32>
c001b1a4:	8b 0c 8d 00 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1700]
c001b1ab:	85 c9                	test   ecx,ecx
c001b1ad:	74 0d                	je     c001b1bc <Sys::eject(regs*)+0x32>
c001b1af:	83 ec 0c             	sub    esp,0xc
c001b1b2:	51                   	push   ecx
c001b1b3:	e8 74 b4 ff ff       	call   c001662c <LogicalDisk::eject()>
c001b1b8:	83 c4 10             	add    esp,0x10
c001b1bb:	99                   	cdq    
c001b1bc:	83 c4 0c             	add    esp,0xc
c001b1bf:	c3                   	ret    

c001b1c0 <Sys::exit(regs*)>:
c001b1c0:	83 ec 18             	sub    esp,0x18
c001b1c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1c7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b1ca:	e8 94 35 00 00       	call   c001e763 <terminateTask(int)>
c001b1cf:	83 c8 ff             	or     eax,0xffffffff
c001b1d2:	83 c4 1c             	add    esp,0x1c
c001b1d5:	89 c2                	mov    edx,eax
c001b1d7:	c3                   	ret    

c001b1d8 <Sys::getCwd(regs*)>:
c001b1d8:	83 ec 10             	sub    esp,0x10
c001b1db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1df:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b1e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b1e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1ed:	e8 ee 7f ff ff       	call   c00131e0 <Fs::getcwd(Process*, char*, int)>
c001b1f2:	83 c4 1c             	add    esp,0x1c
c001b1f5:	99                   	cdq    
c001b1f6:	c3                   	ret    

c001b1f7 <Sys::getPID(regs*)>:
c001b1f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001b201:	99                   	cdq    
c001b202:	c3                   	ret    

c001b203 <Sys::getRAMData(regs*)>:
c001b203:	8b 0d 34 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e334
c001b209:	6b 05 30 e3 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e330,0x64
c001b210:	99                   	cdq    
c001b211:	f7 f9                	idiv   ecx
c001b213:	c1 e0 18             	shl    eax,0x18
c001b216:	09 c8                	or     eax,ecx
c001b218:	99                   	cdq    
c001b219:	c3                   	ret    

c001b21a <Sys::loadDLL(regs*)>:
c001b21a:	56                   	push   esi
c001b21b:	53                   	push   ebx
c001b21c:	31 d2                	xor    edx,edx
c001b21e:	51                   	push   ecx
c001b21f:	b8 01 00 00 00       	mov    eax,0x1
c001b224:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b228:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b22c:	0f 84 8c 00 00 00    	je     c001b2be <Sys::loadDLL(regs*)+0xa4>
c001b232:	83 ec 0c             	sub    esp,0xc
c001b235:	68 14 01 00 00       	push   0x114
c001b23a:	e8 01 46 ff ff       	call   c000f840 <malloc>
c001b23f:	83 c4 0c             	add    esp,0xc
c001b242:	89 c3                	mov    ebx,eax
c001b244:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b249:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b24c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b24f:	53                   	push   ebx
c001b250:	e8 89 81 ff ff       	call   c00133de <File::File(char const*, Process*)>
c001b255:	83 c4 10             	add    esp,0x10
c001b258:	31 d2                	xor    edx,edx
c001b25a:	b8 02 00 00 00       	mov    eax,0x2
c001b25f:	85 db                	test   ebx,ebx
c001b261:	74 5b                	je     c001b2be <Sys::loadDLL(regs*)+0xa4>
c001b263:	83 ec 0c             	sub    esp,0xc
c001b266:	53                   	push   ebx
c001b267:	e8 44 84 ff ff       	call   c00136b0 <File::exists()>
c001b26c:	83 c4 10             	add    esp,0x10
c001b26f:	84 c0                	test   al,al
c001b271:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b273:	75 11                	jne    c001b286 <Sys::loadDLL(regs*)+0x6c>
c001b275:	83 ec 0c             	sub    esp,0xc
c001b278:	53                   	push   ebx
c001b279:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b27c:	83 c4 10             	add    esp,0x10
c001b27f:	b8 03 00 00 00       	mov    eax,0x3
c001b284:	eb 36                	jmp    c001b2bc <Sys::loadDLL(regs*)+0xa2>
c001b286:	83 ec 0c             	sub    esp,0xc
c001b289:	53                   	push   ebx
c001b28a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b28d:	58                   	pop    eax
c001b28e:	5a                   	pop    edx
c001b28f:	6a 00                	push   0x0
c001b291:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b294:	e8 c5 23 00 00       	call   c001d65e <Thr::loadDLL(char const*, bool)>
c001b299:	83 c4 10             	add    esp,0x10
c001b29c:	89 c1                	mov    ecx,eax
c001b29e:	31 d2                	xor    edx,edx
c001b2a0:	b8 04 00 00 00       	mov    eax,0x4
c001b2a5:	85 c9                	test   ecx,ecx
c001b2a7:	74 15                	je     c001b2be <Sys::loadDLL(regs*)+0xa4>
c001b2a9:	53                   	push   ebx
c001b2aa:	53                   	push   ebx
c001b2ab:	ff 35 e8 e2 02 c0    	push   DWORD PTR ds:0xc002e2e8
c001b2b1:	51                   	push   ecx
c001b2b2:	e8 f6 25 00 00       	call   c001d8ad <Thr::executeDLL(unsigned long, void*)>
c001b2b7:	83 c4 10             	add    esp,0x10
c001b2ba:	31 c0                	xor    eax,eax
c001b2bc:	31 d2                	xor    edx,edx
c001b2be:	59                   	pop    ecx
c001b2bf:	5b                   	pop    ebx
c001b2c0:	5e                   	pop    esi
c001b2c1:	c3                   	ret    

c001b2c2 <Sys::read(regs*)>:
c001b2c2:	57                   	push   edi
c001b2c3:	56                   	push   esi
c001b2c4:	53                   	push   ebx
c001b2c5:	83 ec 10             	sub    esp,0x10
c001b2c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2cf:	83 f8 02             	cmp    eax,0x2
c001b2d2:	77 10                	ja     c001b2e4 <Sys::read(regs*)+0x22>
c001b2d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2dc:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b2e2:	eb 0e                	jmp    c001b2f2 <Sys::read(regs*)+0x30>
c001b2e4:	83 ec 0c             	sub    esp,0xc
c001b2e7:	50                   	push   eax
c001b2e8:	e8 f8 66 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b2ed:	83 c4 10             	add    esp,0x10
c001b2f0:	89 c1                	mov    ecx,eax
c001b2f2:	83 c8 ff             	or     eax,0xffffffff
c001b2f5:	85 c9                	test   ecx,ecx
c001b2f7:	89 c2                	mov    edx,eax
c001b2f9:	74 28                	je     c001b323 <Sys::read(regs*)+0x61>
c001b2fb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b303:	31 ff                	xor    edi,edi
c001b305:	83 ec 0c             	sub    esp,0xc
c001b308:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b30a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b30e:	52                   	push   edx
c001b30f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b312:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b315:	57                   	push   edi
c001b316:	56                   	push   esi
c001b317:	51                   	push   ecx
c001b318:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b31b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b31f:	83 c4 20             	add    esp,0x20
c001b322:	99                   	cdq    
c001b323:	83 c4 10             	add    esp,0x10
c001b326:	5b                   	pop    ebx
c001b327:	5e                   	pop    esi
c001b328:	5f                   	pop    edi
c001b329:	c3                   	ret    

c001b32a <Sys::sbrk(regs*)>:
c001b32a:	56                   	push   esi
c001b32b:	53                   	push   ebx
c001b32c:	50                   	push   eax
c001b32d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b332:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b336:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b339:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b33c:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b342:	85 db                	test   ebx,ebx
c001b344:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b347:	74 02                	je     c001b34b <Sys::sbrk(regs*)+0x21>
c001b349:	79 06                	jns    c001b351 <Sys::sbrk(regs*)+0x27>
c001b34b:	89 f0                	mov    eax,esi
c001b34d:	31 d2                	xor    edx,edx
c001b34f:	eb 2a                	jmp    c001b37b <Sys::sbrk(regs*)+0x51>
c001b351:	83 c8 ff             	or     eax,0xffffffff
c001b354:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b35a:	89 c2                	mov    edx,eax
c001b35c:	77 1d                	ja     c001b37b <Sys::sbrk(regs*)+0x51>
c001b35e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b364:	50                   	push   eax
c001b365:	c1 ea 0c             	shr    edx,0xc
c001b368:	68 07 0c 00 00       	push   0xc07
c001b36d:	52                   	push   edx
c001b36e:	51                   	push   ecx
c001b36f:	e8 a2 70 ff ff       	call   c0012416 <VAS::allocatePages(int, int)>
c001b374:	89 f0                	mov    eax,esi
c001b376:	31 d2                	xor    edx,edx
c001b378:	83 c4 10             	add    esp,0x10
c001b37b:	59                   	pop    ecx
c001b37c:	5b                   	pop    ebx
c001b37d:	5e                   	pop    esi
c001b37e:	c3                   	ret    

c001b37f <Sys::setCwd(regs*)>:
c001b37f:	83 ec 14             	sub    esp,0x14
c001b382:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b386:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b389:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b38e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b391:	e8 b9 83 ff ff       	call   c001374f <Fs::setcwd(Process*, char*)>
c001b396:	83 c4 1c             	add    esp,0x1c
c001b399:	99                   	cdq    
c001b39a:	c3                   	ret    

c001b39b <Sys::setTime(regs*)>:
c001b39b:	55                   	push   ebp
c001b39c:	31 d2                	xor    edx,edx
c001b39e:	57                   	push   edi
c001b39f:	bf 18 00 00 00       	mov    edi,0x18
c001b3a4:	56                   	push   esi
c001b3a5:	53                   	push   ebx
c001b3a6:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b3ab:	83 ec 30             	sub    esp,0x30
c001b3ae:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b3b2:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b3b5:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b3b8:	f7 f3                	div    ebx
c001b3ba:	89 d6                	mov    esi,edx
c001b3bc:	31 d2                	xor    edx,edx
c001b3be:	f7 f3                	div    ebx
c001b3c0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b3c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b3c7:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b3cc:	31 d2                	xor    edx,edx
c001b3ce:	f7 f3                	div    ebx
c001b3d0:	31 d2                	xor    edx,edx
c001b3d2:	bb 0c 00 00 00       	mov    ebx,0xc
c001b3d7:	f7 f7                	div    edi
c001b3d9:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b3dc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b3e0:	0f b7 cd             	movzx  ecx,bp
c001b3e3:	56                   	push   esi
c001b3e4:	89 c7                	mov    edi,eax
c001b3e6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b3ea:	c1 e6 10             	shl    esi,0x10
c001b3ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3f1:	83 e7 1f             	and    edi,0x1f
c001b3f4:	51                   	push   ecx
c001b3f5:	47                   	inc    edi
c001b3f6:	c1 e8 05             	shr    eax,0x5
c001b3f9:	31 d2                	xor    edx,edx
c001b3fb:	f7 f3                	div    ebx
c001b3fd:	31 db                	xor    ebx,ebx
c001b3ff:	52                   	push   edx
c001b400:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b404:	57                   	push   edi
c001b405:	68 ed bb 02 c0       	push   0xc002bbed
c001b40a:	e8 77 7a ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001b40f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b413:	89 f8                	mov    eax,edi
c001b415:	31 c9                	xor    ecx,ecx
c001b417:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b41b:	88 c1                	mov    cl,al
c001b41d:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b423:	88 d5                	mov    ch,dl
c001b425:	c1 e0 10             	shl    eax,0x10
c001b428:	0f b7 d1             	movzx  edx,cx
c001b42b:	09 c2                	or     edx,eax
c001b42d:	89 d8                	mov    eax,ebx
c001b42f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b434:	09 f0                	or     eax,esi
c001b436:	89 c3                	mov    ebx,eax
c001b438:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b43c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b440:	83 c4 18             	add    esp,0x18
c001b443:	53                   	push   ebx
c001b444:	52                   	push   edx
c001b445:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b449:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b44d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b451:	e8 13 8a ff ff       	call   c0013e69 <datetimeToSeconds(datetime_t)>
c001b456:	83 c4 0c             	add    esp,0xc
c001b459:	52                   	push   edx
c001b45a:	50                   	push   eax
c001b45b:	56                   	push   esi
c001b45c:	e8 8f 8b ff ff       	call   c0013ff0 <secondsToDatetime(unsigned long long)>
c001b461:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b465:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b469:	51                   	push   ecx
c001b46a:	89 d6                	mov    esi,edx
c001b46c:	51                   	push   ecx
c001b46d:	c1 ee 10             	shr    esi,0x10
c001b470:	89 f3                	mov    ebx,esi
c001b472:	0f b6 f3             	movzx  esi,bl
c001b475:	56                   	push   esi
c001b476:	0f b6 f6             	movzx  esi,dh
c001b479:	0f b6 d2             	movzx  edx,dl
c001b47c:	56                   	push   esi
c001b47d:	52                   	push   edx
c001b47e:	89 c2                	mov    edx,eax
c001b480:	c1 ea 10             	shr    edx,0x10
c001b483:	52                   	push   edx
c001b484:	0f b6 d4             	movzx  edx,ah
c001b487:	0f b6 c0             	movzx  eax,al
c001b48a:	52                   	push   edx
c001b48b:	50                   	push   eax
c001b48c:	68 09 bc 02 c0       	push   0xc002bc09
c001b491:	e8 f0 79 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001b496:	83 c4 2c             	add    esp,0x2c
c001b499:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c001b49e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b4a2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b4a6:	53                   	push   ebx
c001b4a7:	51                   	push   ecx
c001b4a8:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b4ae:	e8 dd 8a ff ff       	call   c0013f90 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b4b3:	83 f0 01             	xor    eax,0x1
c001b4b6:	31 d2                	xor    edx,edx
c001b4b8:	0f b6 c0             	movzx  eax,al
c001b4bb:	83 c4 3c             	add    esp,0x3c
c001b4be:	5b                   	pop    ebx
c001b4bf:	5e                   	pop    esi
c001b4c0:	5f                   	pop    edi
c001b4c1:	5d                   	pop    ebp
c001b4c2:	c3                   	ret    

c001b4c3 <Sys::timezone(regs*)>:
c001b4c3:	53                   	push   ebx
c001b4c4:	83 ec 08             	sub    esp,0x8
c001b4c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4cb:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b4cf:	75 17                	jne    c001b4e8 <Sys::timezone(regs*)+0x25>
c001b4d1:	83 ec 0c             	sub    esp,0xc
c001b4d4:	68 25 bc 02 c0       	push   0xc002bc25
c001b4d9:	e8 a8 79 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001b4de:	83 c8 ff             	or     eax,0xffffffff
c001b4e1:	83 c4 10             	add    esp,0x10
c001b4e4:	89 c2                	mov    edx,eax
c001b4e6:	eb 20                	jmp    c001b508 <Sys::timezone(regs*)+0x45>
c001b4e8:	83 ec 0c             	sub    esp,0xc
c001b4eb:	68 5d bc 02 c0       	push   0xc002bc5d
c001b4f0:	e8 91 79 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001b4f5:	58                   	pop    eax
c001b4f6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b4f9:	e8 f4 87 ff ff       	call   c0013cf2 <User::loadClockSettings(int)>
c001b4fe:	83 c4 10             	add    esp,0x10
c001b501:	b8 01 00 00 00       	mov    eax,0x1
c001b506:	31 d2                	xor    edx,edx
c001b508:	83 c4 08             	add    esp,0x8
c001b50b:	5b                   	pop    ebx
c001b50c:	c3                   	ret    

c001b50d <Sys::write(regs*)>:
c001b50d:	57                   	push   edi
c001b50e:	56                   	push   esi
c001b50f:	53                   	push   ebx
c001b510:	83 ec 10             	sub    esp,0x10
c001b513:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b517:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b51a:	83 f8 02             	cmp    eax,0x2
c001b51d:	77 10                	ja     c001b52f <Sys::write(regs*)+0x22>
c001b51f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b524:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b527:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b52d:	eb 0e                	jmp    c001b53d <Sys::write(regs*)+0x30>
c001b52f:	83 ec 0c             	sub    esp,0xc
c001b532:	50                   	push   eax
c001b533:	e8 ad 64 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b538:	83 c4 10             	add    esp,0x10
c001b53b:	89 c1                	mov    ecx,eax
c001b53d:	83 c8 ff             	or     eax,0xffffffff
c001b540:	85 c9                	test   ecx,ecx
c001b542:	89 c2                	mov    edx,eax
c001b544:	74 28                	je     c001b56e <Sys::write(regs*)+0x61>
c001b546:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b54e:	31 ff                	xor    edi,edi
c001b550:	83 ec 0c             	sub    esp,0xc
c001b553:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b555:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b559:	52                   	push   edx
c001b55a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b55d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b560:	57                   	push   edi
c001b561:	56                   	push   esi
c001b562:	51                   	push   ecx
c001b563:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b566:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b56a:	83 c4 20             	add    esp,0x20
c001b56d:	99                   	cdq    
c001b56e:	83 c4 10             	add    esp,0x10
c001b571:	5b                   	pop    ebx
c001b572:	5e                   	pop    esi
c001b573:	5f                   	pop    edi
c001b574:	c3                   	ret    

c001b575 <Sys::wsbe(regs*)>:
c001b575:	57                   	push   edi
c001b576:	b9 0b 00 00 00       	mov    ecx,0xb
c001b57b:	56                   	push   esi
c001b57c:	be 9c bc 02 c0       	mov    esi,0xc002bc9c
c001b581:	53                   	push   ebx
c001b582:	83 ec 30             	sub    esp,0x30
c001b585:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b589:	fc                   	cld    
c001b58a:	83 ec 0c             	sub    esp,0xc
c001b58d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b58f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b593:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b598:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b59b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b5a1:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5a3:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b5a6:	57                   	push   edi
c001b5a7:	e8 e8 51 fe ff       	call   c0000794 <strlen>
c001b5ac:	5a                   	pop    edx
c001b5ad:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b5b1:	52                   	push   edx
c001b5b2:	31 d2                	xor    edx,edx
c001b5b4:	57                   	push   edi
c001b5b5:	52                   	push   edx
c001b5b6:	50                   	push   eax
c001b5b7:	56                   	push   esi
c001b5b8:	ff d3                	call   ebx
c001b5ba:	83 c4 14             	add    esp,0x14
c001b5bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b5c1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5c4:	e8 9a 31 00 00       	call   c001e763 <terminateTask(int)>
c001b5c9:	83 c4 40             	add    esp,0x40
c001b5cc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b5d1:	5b                   	pop    ebx
c001b5d2:	31 d2                	xor    edx,edx
c001b5d4:	5e                   	pop    esi
c001b5d5:	5f                   	pop    edi
c001b5d6:	c3                   	ret    

c001b5d7 <Sys::yield(regs*)>:
c001b5d7:	57                   	push   edi
c001b5d8:	56                   	push   esi
c001b5d9:	53                   	push   ebx
c001b5da:	e8 41 27 00 00       	call   c001dd20 <lockScheduler()>
c001b5df:	e8 78 2a 00 00       	call   c001e05c <schedule()>
c001b5e4:	e8 39 27 00 00       	call   c001dd22 <unlockScheduler()>
c001b5e9:	8b 35 70 e9 02 c0    	mov    esi,DWORD PTR ds:0xc002e970
c001b5ef:	8b 3d 74 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e974
c001b5f5:	89 f0                	mov    eax,esi
c001b5f7:	89 fb                	mov    ebx,edi
c001b5f9:	89 f1                	mov    ecx,esi
c001b5fb:	c1 e0 07             	shl    eax,0x7
c001b5fe:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b602:	25 80 30 0f 00       	and    eax,0xf3080
c001b607:	c1 eb 17             	shr    ebx,0x17
c001b60a:	31 c8                	xor    eax,ecx
c001b60c:	89 da                	mov    edx,ebx
c001b60e:	5b                   	pop    ebx
c001b60f:	5e                   	pop    esi
c001b610:	5f                   	pop    edi
c001b611:	c3                   	ret    

c001b612 <sysCallSeekDir(regs*)>:
c001b612:	31 c0                	xor    eax,eax
c001b614:	31 d2                	xor    edx,edx
c001b616:	c3                   	ret    

c001b617 <sysCallTellDir(regs*)>:
c001b617:	31 c0                	xor    eax,eax
c001b619:	31 d2                	xor    edx,edx
c001b61b:	c3                   	ret    

c001b61c <sysCallVerify(regs*)>:
c001b61c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b620:	31 d2                	xor    edx,edx
c001b622:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b625:	c3                   	ret    

c001b626 <sysFormatDisk(regs*)>:
c001b626:	56                   	push   esi
c001b627:	53                   	push   ebx
c001b628:	53                   	push   ebx
c001b629:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b62d:	8b 1d 70 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e470
c001b633:	eb 25                	jmp    c001b65a <sysFormatDisk(regs*)+0x34>
c001b635:	83 ec 0c             	sub    esp,0xc
c001b638:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b63b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b63d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b640:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b643:	50                   	push   eax
c001b644:	ff 34 85 00 e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1700]
c001b64b:	53                   	push   ebx
c001b64c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b64f:	83 c4 20             	add    esp,0x20
c001b652:	83 f8 08             	cmp    eax,0x8
c001b655:	75 12                	jne    c001b669 <sysFormatDisk(regs*)+0x43>
c001b657:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b65a:	85 db                	test   ebx,ebx
c001b65c:	75 d7                	jne    c001b635 <sysFormatDisk(regs*)+0xf>
c001b65e:	59                   	pop    ecx
c001b65f:	b8 03 00 00 00       	mov    eax,0x3
c001b664:	31 d2                	xor    edx,edx
c001b666:	5b                   	pop    ebx
c001b667:	5e                   	pop    esi
c001b668:	c3                   	ret    
c001b669:	85 c0                	test   eax,eax
c001b66b:	74 1b                	je     c001b688 <sysFormatDisk(regs*)+0x62>
c001b66d:	83 f8 09             	cmp    eax,0x9
c001b670:	74 0b                	je     c001b67d <sysFormatDisk(regs*)+0x57>
c001b672:	59                   	pop    ecx
c001b673:	b8 02 00 00 00       	mov    eax,0x2
c001b678:	31 d2                	xor    edx,edx
c001b67a:	5b                   	pop    ebx
c001b67b:	5e                   	pop    esi
c001b67c:	c3                   	ret    
c001b67d:	59                   	pop    ecx
c001b67e:	b8 01 00 00 00       	mov    eax,0x1
c001b683:	31 d2                	xor    edx,edx
c001b685:	5b                   	pop    ebx
c001b686:	5e                   	pop    esi
c001b687:	c3                   	ret    
c001b688:	59                   	pop    ecx
c001b689:	31 c0                	xor    eax,eax
c001b68b:	31 d2                	xor    edx,edx
c001b68d:	5b                   	pop    ebx
c001b68e:	5e                   	pop    esi
c001b68f:	c3                   	ret    

c001b690 <sysSetDiskVolumeLabel(regs*)>:
c001b690:	56                   	push   esi
c001b691:	53                   	push   ebx
c001b692:	53                   	push   ebx
c001b693:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b697:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b69a:	83 f8 19             	cmp    eax,0x19
c001b69d:	77 29                	ja     c001b6c8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b69f:	8b 0c 85 00 e9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1700]
c001b6a6:	85 c9                	test   ecx,ecx
c001b6a8:	74 1e                	je     c001b6c8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6aa:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b6ad:	85 d2                	test   edx,edx
c001b6af:	74 17                	je     c001b6c8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6b1:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b6b7:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b6b9:	52                   	push   edx
c001b6ba:	50                   	push   eax
c001b6bb:	51                   	push   ecx
c001b6bc:	53                   	push   ebx
c001b6bd:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b6c0:	83 c4 10             	add    esp,0x10
c001b6c3:	99                   	cdq    
c001b6c4:	59                   	pop    ecx
c001b6c5:	5b                   	pop    ebx
c001b6c6:	5e                   	pop    esi
c001b6c7:	c3                   	ret    
c001b6c8:	59                   	pop    ecx
c001b6c9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6d3:	5b                   	pop    ebx
c001b6d4:	5e                   	pop    esi
c001b6d5:	c3                   	ret    

c001b6d6 <sysGetDiskVolumeLabel(regs*)>:
c001b6d6:	57                   	push   edi
c001b6d7:	56                   	push   esi
c001b6d8:	53                   	push   ebx
c001b6d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6dd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b6e0:	83 fa 19             	cmp    edx,0x19
c001b6e3:	77 34                	ja     c001b719 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6e5:	8b 0c 95 00 e9 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1700]
c001b6ec:	85 c9                	test   ecx,ecx
c001b6ee:	74 29                	je     c001b719 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6f0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b6f3:	85 db                	test   ebx,ebx
c001b6f5:	74 22                	je     c001b719 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6f7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b6fa:	85 c0                	test   eax,eax
c001b6fc:	74 1b                	je     c001b719 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6fe:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b704:	83 ec 0c             	sub    esp,0xc
c001b707:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b709:	50                   	push   eax
c001b70a:	53                   	push   ebx
c001b70b:	52                   	push   edx
c001b70c:	51                   	push   ecx
c001b70d:	56                   	push   esi
c001b70e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b711:	83 c4 20             	add    esp,0x20
c001b714:	99                   	cdq    
c001b715:	5b                   	pop    ebx
c001b716:	5e                   	pop    esi
c001b717:	5f                   	pop    edi
c001b718:	c3                   	ret    
c001b719:	5b                   	pop    ebx
c001b71a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b71f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b724:	5e                   	pop    esi
c001b725:	5f                   	pop    edi
c001b726:	c3                   	ret    

c001b727 <sysShutdown(regs*)>:
c001b727:	83 ec 0c             	sub    esp,0xc
c001b72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b72e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b731:	85 c0                	test   eax,eax
c001b733:	74 18                	je     c001b74d <sysShutdown(regs*)+0x26>
c001b735:	83 f8 01             	cmp    eax,0x1
c001b738:	74 38                	je     c001b772 <sysShutdown(regs*)+0x4b>
c001b73a:	83 f8 02             	cmp    eax,0x2
c001b73d:	74 24                	je     c001b763 <sysShutdown(regs*)+0x3c>
c001b73f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b744:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b749:	83 c4 0c             	add    esp,0xc
c001b74c:	c3                   	ret    
c001b74d:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c001b752:	8b 10                	mov    edx,DWORD PTR [eax]
c001b754:	6a 00                	push   0x0
c001b756:	6a 00                	push   0x0
c001b758:	6a 00                	push   0x0
c001b75a:	50                   	push   eax
c001b75b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b75e:	83 c4 10             	add    esp,0x10
c001b761:	eb dc                	jmp    c001b73f <sysShutdown(regs*)+0x18>
c001b763:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c001b768:	8b 10                	mov    edx,DWORD PTR [eax]
c001b76a:	6a 00                	push   0x0
c001b76c:	6a 00                	push   0x0
c001b76e:	6a 01                	push   0x1
c001b770:	eb e8                	jmp    c001b75a <sysShutdown(regs*)+0x33>
c001b772:	a1 a0 09 03 c0       	mov    eax,ds:0xc00309a0
c001b777:	85 c0                	test   eax,eax
c001b779:	74 02                	je     c001b77d <sysShutdown(regs*)+0x56>
c001b77b:	ff d0                	call   eax
c001b77d:	31 c0                	xor    eax,eax
c001b77f:	31 d2                	xor    edx,edx
c001b781:	83 c4 0c             	add    esp,0xc
c001b784:	c3                   	ret    

c001b785 <sysCallRealpath(regs*)>:
c001b785:	83 ec 0c             	sub    esp,0xc
c001b788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b78c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b78f:	85 d2                	test   edx,edx
c001b791:	74 07                	je     c001b79a <sysCallRealpath(regs*)+0x15>
c001b793:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b796:	85 c0                	test   eax,eax
c001b798:	75 0b                	jne    c001b7a5 <sysCallRealpath(regs*)+0x20>
c001b79a:	b8 01 00 00 00       	mov    eax,0x1
c001b79f:	31 d2                	xor    edx,edx
c001b7a1:	83 c4 0c             	add    esp,0xc
c001b7a4:	c3                   	ret    
c001b7a5:	51                   	push   ecx
c001b7a6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b7ac:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b7af:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b7b5:	51                   	push   ecx
c001b7b6:	52                   	push   edx
c001b7b7:	50                   	push   eax
c001b7b8:	e8 77 7a ff ff       	call   c0013234 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b7bd:	83 c4 10             	add    esp,0x10
c001b7c0:	31 c0                	xor    eax,eax
c001b7c2:	31 d2                	xor    edx,edx
c001b7c4:	83 c4 0c             	add    esp,0xc
c001b7c7:	c3                   	ret    

c001b7c8 <sysCallGetArgc(regs*)>:
c001b7c8:	83 ec 14             	sub    esp,0x14
c001b7cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7d3:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b7d9:	68 c8 bc 02 c0       	push   0xc002bcc8
c001b7de:	e8 a3 76 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001b7e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7eb:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b7f1:	83 c4 1c             	add    esp,0x1c
c001b7f4:	99                   	cdq    
c001b7f5:	c3                   	ret    

c001b7f6 <sysCallReadDir(regs*)>:
c001b7f6:	53                   	push   ebx
c001b7f7:	83 ec 18             	sub    esp,0x18
c001b7fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7fe:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b801:	83 f8 02             	cmp    eax,0x2
c001b804:	76 53                	jbe    c001b859 <sysCallReadDir(regs*)+0x63>
c001b806:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b809:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b80f:	77 4f                	ja     c001b860 <sysCallReadDir(regs*)+0x6a>
c001b811:	83 ec 0c             	sub    esp,0xc
c001b814:	50                   	push   eax
c001b815:	e8 cb 61 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b81a:	83 c4 10             	add    esp,0x10
c001b81d:	85 c0                	test   eax,eax
c001b81f:	74 50                	je     c001b871 <sysCallReadDir(regs*)+0x7b>
c001b821:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b829:	83 ec 0c             	sub    esp,0xc
c001b82c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b82e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b832:	51                   	push   ecx
c001b833:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b836:	6a 00                	push   0x0
c001b838:	68 10 01 00 00       	push   0x110
c001b83d:	50                   	push   eax
c001b83e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b841:	83 c4 20             	add    esp,0x20
c001b844:	85 c0                	test   eax,eax
c001b846:	74 38                	je     c001b880 <sysCallReadDir(regs*)+0x8a>
c001b848:	83 f8 07             	cmp    eax,0x7
c001b84b:	74 0c                	je     c001b859 <sysCallReadDir(regs*)+0x63>
c001b84d:	b8 02 00 00 00       	mov    eax,0x2
c001b852:	31 d2                	xor    edx,edx
c001b854:	83 c4 18             	add    esp,0x18
c001b857:	5b                   	pop    ebx
c001b858:	c3                   	ret    
c001b859:	b8 01 00 00 00       	mov    eax,0x1
c001b85e:	eb f2                	jmp    c001b852 <sysCallReadDir(regs*)+0x5c>
c001b860:	83 ec 08             	sub    esp,0x8
c001b863:	52                   	push   edx
c001b864:	68 e0 bd 02 c0       	push   0xc002bde0
c001b869:	e8 18 76 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001b86e:	83 c4 10             	add    esp,0x10
c001b871:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b876:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b87b:	83 c4 18             	add    esp,0x18
c001b87e:	5b                   	pop    ebx
c001b87f:	c3                   	ret    
c001b880:	31 c0                	xor    eax,eax
c001b882:	eb ce                	jmp    c001b852 <sysCallReadDir(regs*)+0x5c>

c001b884 <sysCallIsATTY(regs*)>:
c001b884:	83 ec 0c             	sub    esp,0xc
c001b887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b88b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b88e:	83 f8 02             	cmp    eax,0x2
c001b891:	76 07                	jbe    c001b89a <sysCallIsATTY(regs*)+0x16>
c001b893:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b898:	75 26                	jne    c001b8c0 <sysCallIsATTY(regs*)+0x3c>
c001b89a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b89f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8a2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8a8:	85 c0                	test   eax,eax
c001b8aa:	74 24                	je     c001b8d0 <sysCallIsATTY(regs*)+0x4c>
c001b8ac:	83 ec 0c             	sub    esp,0xc
c001b8af:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8b1:	50                   	push   eax
c001b8b2:	ff 12                	call   DWORD PTR [edx]
c001b8b4:	31 d2                	xor    edx,edx
c001b8b6:	0f b6 c0             	movzx  eax,al
c001b8b9:	83 c4 10             	add    esp,0x10
c001b8bc:	83 c4 0c             	add    esp,0xc
c001b8bf:	c3                   	ret    
c001b8c0:	83 ec 0c             	sub    esp,0xc
c001b8c3:	50                   	push   eax
c001b8c4:	e8 1c 61 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b8c9:	83 c4 10             	add    esp,0x10
c001b8cc:	85 c0                	test   eax,eax
c001b8ce:	75 dc                	jne    c001b8ac <sysCallIsATTY(regs*)+0x28>
c001b8d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8da:	83 c4 0c             	add    esp,0xc
c001b8dd:	c3                   	ret    

c001b8de <sysCallSeek(regs*)>:
c001b8de:	53                   	push   ebx
c001b8df:	83 ec 08             	sub    esp,0x8
c001b8e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8e6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8e9:	83 f8 02             	cmp    eax,0x2
c001b8ec:	76 4a                	jbe    c001b938 <sysCallSeek(regs*)+0x5a>
c001b8ee:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b8f3:	77 32                	ja     c001b927 <sysCallSeek(regs*)+0x49>
c001b8f5:	83 ec 0c             	sub    esp,0xc
c001b8f8:	50                   	push   eax
c001b8f9:	e8 e7 60 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b8fe:	83 c4 0c             	add    esp,0xc
c001b901:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b904:	31 db                	xor    ebx,ebx
c001b906:	53                   	push   ebx
c001b907:	51                   	push   ecx
c001b908:	50                   	push   eax
c001b909:	e8 f2 7b ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001b90e:	83 c4 10             	add    esp,0x10
c001b911:	85 c0                	test   eax,eax
c001b913:	0f 95 c0             	setne  al
c001b916:	31 d2                	xor    edx,edx
c001b918:	0f b6 c0             	movzx  eax,al
c001b91b:	f7 d8                	neg    eax
c001b91d:	83 d2 00             	adc    edx,0x0
c001b920:	83 c4 08             	add    esp,0x8
c001b923:	f7 da                	neg    edx
c001b925:	5b                   	pop    ebx
c001b926:	c3                   	ret    
c001b927:	83 ec 08             	sub    esp,0x8
c001b92a:	50                   	push   eax
c001b92b:	68 d3 bc 02 c0       	push   0xc002bcd3
c001b930:	e8 51 75 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001b935:	83 c4 10             	add    esp,0x10
c001b938:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b93d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b942:	83 c4 08             	add    esp,0x8
c001b945:	5b                   	pop    ebx
c001b946:	c3                   	ret    

c001b947 <sysCallTell(regs*)>:
c001b947:	53                   	push   ebx
c001b948:	83 ec 08             	sub    esp,0x8
c001b94b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b94f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b952:	83 f8 02             	cmp    eax,0x2
c001b955:	76 5e                	jbe    c001b9b5 <sysCallTell(regs*)+0x6e>
c001b957:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b95c:	77 2d                	ja     c001b98b <sysCallTell(regs*)+0x44>
c001b95e:	83 ec 0c             	sub    esp,0xc
c001b961:	50                   	push   eax
c001b962:	e8 7e 60 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b967:	5a                   	pop    edx
c001b968:	59                   	pop    ecx
c001b969:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b96c:	50                   	push   eax
c001b96d:	e8 e4 7b ff ff       	call   c0013556 <File::tell(unsigned long long*)>
c001b972:	83 c4 10             	add    esp,0x10
c001b975:	85 c0                	test   eax,eax
c001b977:	0f 95 c0             	setne  al
c001b97a:	31 d2                	xor    edx,edx
c001b97c:	0f b6 c0             	movzx  eax,al
c001b97f:	f7 d8                	neg    eax
c001b981:	83 d2 00             	adc    edx,0x0
c001b984:	83 c4 08             	add    esp,0x8
c001b987:	f7 da                	neg    edx
c001b989:	5b                   	pop    ebx
c001b98a:	c3                   	ret    
c001b98b:	83 ec 08             	sub    esp,0x8
c001b98e:	50                   	push   eax
c001b98f:	68 ed bc 02 c0       	push   0xc002bced
c001b994:	e8 ed 74 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001b999:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b99c:	83 c4 10             	add    esp,0x10
c001b99f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9ac:	31 d2                	xor    edx,edx
c001b9ae:	31 c0                	xor    eax,eax
c001b9b0:	83 c4 08             	add    esp,0x8
c001b9b3:	5b                   	pop    ebx
c001b9b4:	c3                   	ret    
c001b9b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9bf:	83 c4 08             	add    esp,0x8
c001b9c2:	5b                   	pop    ebx
c001b9c3:	c3                   	ret    

c001b9c4 <sysCallSize(regs*)>:
c001b9c4:	53                   	push   ebx
c001b9c5:	83 ec 18             	sub    esp,0x18
c001b9c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9cf:	83 f8 02             	cmp    eax,0x2
c001b9d2:	76 64                	jbe    c001ba38 <sysCallSize(regs*)+0x74>
c001b9d4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9d9:	77 33                	ja     c001ba0e <sysCallSize(regs*)+0x4a>
c001b9db:	83 ec 0c             	sub    esp,0xc
c001b9de:	50                   	push   eax
c001b9df:	e8 01 60 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b9e4:	83 c4 0c             	add    esp,0xc
c001b9e7:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b9eb:	52                   	push   edx
c001b9ec:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9ef:	50                   	push   eax
c001b9f0:	e8 f9 7c ff ff       	call   c00136ee <File::stat(unsigned long long*, bool*)>
c001b9f5:	83 c4 10             	add    esp,0x10
c001b9f8:	85 c0                	test   eax,eax
c001b9fa:	0f 95 c0             	setne  al
c001b9fd:	31 d2                	xor    edx,edx
c001b9ff:	0f b6 c0             	movzx  eax,al
c001ba02:	f7 d8                	neg    eax
c001ba04:	83 d2 00             	adc    edx,0x0
c001ba07:	83 c4 18             	add    esp,0x18
c001ba0a:	f7 da                	neg    edx
c001ba0c:	5b                   	pop    ebx
c001ba0d:	c3                   	ret    
c001ba0e:	83 ec 08             	sub    esp,0x8
c001ba11:	50                   	push   eax
c001ba12:	68 07 bd 02 c0       	push   0xc002bd07
c001ba17:	e8 6a 74 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001ba1c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba1f:	83 c4 10             	add    esp,0x10
c001ba22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba28:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba2f:	31 d2                	xor    edx,edx
c001ba31:	31 c0                	xor    eax,eax
c001ba33:	83 c4 18             	add    esp,0x18
c001ba36:	5b                   	pop    ebx
c001ba37:	c3                   	ret    
c001ba38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba3d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba42:	83 c4 18             	add    esp,0x18
c001ba45:	5b                   	pop    ebx
c001ba46:	c3                   	ret    

c001ba47 <sysCallSizeFromFilename(regs*)>:
c001ba47:	57                   	push   edi
c001ba48:	56                   	push   esi
c001ba49:	53                   	push   ebx
c001ba4a:	83 ec 20             	sub    esp,0x20
c001ba4d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba51:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ba54:	83 fb 02             	cmp    ebx,0x2
c001ba57:	0f 86 99 00 00 00    	jbe    c001baf6 <sysCallSizeFromFilename(regs*)+0xaf>
c001ba5d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ba63:	77 65                	ja     c001baca <sysCallSizeFromFilename(regs*)+0x83>
c001ba65:	83 ec 0c             	sub    esp,0xc
c001ba68:	68 14 01 00 00       	push   0x114
c001ba6d:	e8 ce 3d ff ff       	call   c000f840 <malloc>
c001ba72:	83 c4 0c             	add    esp,0xc
c001ba75:	89 c6                	mov    esi,eax
c001ba77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba7c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba7f:	53                   	push   ebx
c001ba80:	56                   	push   esi
c001ba81:	e8 58 79 ff ff       	call   c00133de <File::File(char const*, Process*)>
c001ba86:	83 c4 0c             	add    esp,0xc
c001ba89:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ba8d:	50                   	push   eax
c001ba8e:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ba91:	56                   	push   esi
c001ba92:	e8 57 7c ff ff       	call   c00136ee <File::stat(unsigned long long*, bool*)>
c001ba97:	83 c4 10             	add    esp,0x10
c001ba9a:	85 f6                	test   esi,esi
c001ba9c:	74 14                	je     c001bab2 <sysCallSizeFromFilename(regs*)+0x6b>
c001ba9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baa2:	8b 16                	mov    edx,DWORD PTR [esi]
c001baa4:	83 ec 0c             	sub    esp,0xc
c001baa7:	56                   	push   esi
c001baa8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001baab:	83 c4 10             	add    esp,0x10
c001baae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bab2:	85 c0                	test   eax,eax
c001bab4:	0f 95 c0             	setne  al
c001bab7:	31 d2                	xor    edx,edx
c001bab9:	0f b6 c0             	movzx  eax,al
c001babc:	f7 d8                	neg    eax
c001babe:	83 d2 00             	adc    edx,0x0
c001bac1:	83 c4 20             	add    esp,0x20
c001bac4:	f7 da                	neg    edx
c001bac6:	5b                   	pop    ebx
c001bac7:	5e                   	pop    esi
c001bac8:	5f                   	pop    edi
c001bac9:	c3                   	ret    
c001baca:	83 ec 08             	sub    esp,0x8
c001bacd:	53                   	push   ebx
c001bace:	68 07 bd 02 c0       	push   0xc002bd07
c001bad3:	e8 ae 73 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001bad8:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001badb:	83 c4 10             	add    esp,0x10
c001bade:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bae4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baeb:	31 d2                	xor    edx,edx
c001baed:	83 c4 20             	add    esp,0x20
c001baf0:	31 c0                	xor    eax,eax
c001baf2:	5b                   	pop    ebx
c001baf3:	5e                   	pop    esi
c001baf4:	5f                   	pop    edi
c001baf5:	c3                   	ret    
c001baf6:	83 c4 20             	add    esp,0x20
c001baf9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bafe:	5b                   	pop    ebx
c001baff:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb04:	5e                   	pop    esi
c001bb05:	5f                   	pop    edi
c001bb06:	c3                   	ret    

c001bb07 <sysCallClose(regs*)>:
c001bb07:	53                   	push   ebx
c001bb08:	83 ec 08             	sub    esp,0x8
c001bb0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb12:	83 f8 02             	cmp    eax,0x2
c001bb15:	76 50                	jbe    c001bb67 <sysCallClose(regs*)+0x60>
c001bb17:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bb1c:	74 58                	je     c001bb76 <sysCallClose(regs*)+0x6f>
c001bb1e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb23:	74 60                	je     c001bb85 <sysCallClose(regs*)+0x7e>
c001bb25:	77 2f                	ja     c001bb56 <sysCallClose(regs*)+0x4f>
c001bb27:	83 ec 0c             	sub    esp,0xc
c001bb2a:	50                   	push   eax
c001bb2b:	e8 b5 5e ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001bb30:	89 c3                	mov    ebx,eax
c001bb32:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb35:	e8 66 79 ff ff       	call   c00134a0 <File::close()>
c001bb3a:	83 c4 10             	add    esp,0x10
c001bb3d:	85 db                	test   ebx,ebx
c001bb3f:	74 0c                	je     c001bb4d <sysCallClose(regs*)+0x46>
c001bb41:	83 ec 0c             	sub    esp,0xc
c001bb44:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb46:	53                   	push   ebx
c001bb47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb4a:	83 c4 10             	add    esp,0x10
c001bb4d:	31 c0                	xor    eax,eax
c001bb4f:	31 d2                	xor    edx,edx
c001bb51:	83 c4 08             	add    esp,0x8
c001bb54:	5b                   	pop    ebx
c001bb55:	c3                   	ret    
c001bb56:	83 ec 08             	sub    esp,0x8
c001bb59:	50                   	push   eax
c001bb5a:	68 04 be 02 c0       	push   0xc002be04
c001bb5f:	e8 22 73 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001bb64:	83 c4 10             	add    esp,0x10
c001bb67:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb6c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb71:	83 c4 08             	add    esp,0x8
c001bb74:	5b                   	pop    ebx
c001bb75:	c3                   	ret    
c001bb76:	83 ec 0c             	sub    esp,0xc
c001bb79:	68 22 bd 02 c0       	push   0xc002bd22
c001bb7e:	e8 03 73 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001bb83:	eb c5                	jmp    c001bb4a <sysCallClose(regs*)+0x43>
c001bb85:	83 ec 0c             	sub    esp,0xc
c001bb88:	68 30 bd 02 c0       	push   0xc002bd30
c001bb8d:	eb ef                	jmp    c001bb7e <sysCallClose(regs*)+0x77>

c001bb8f <sysCallOpenDir(regs*)>:
c001bb8f:	56                   	push   esi
c001bb90:	53                   	push   ebx
c001bb91:	53                   	push   ebx
c001bb92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb96:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bb99:	85 f6                	test   esi,esi
c001bb9b:	74 59                	je     c001bbf6 <sysCallOpenDir(regs*)+0x67>
c001bb9d:	83 ec 0c             	sub    esp,0xc
c001bba0:	68 14 01 00 00       	push   0x114
c001bba5:	e8 96 3c ff ff       	call   c000f840 <malloc>
c001bbaa:	83 c4 0c             	add    esp,0xc
c001bbad:	89 c6                	mov    esi,eax
c001bbaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbb4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbb7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbba:	56                   	push   esi
c001bbbb:	e8 ca 7c ff ff       	call   c001388a <Directory::Directory(char const*, Process*)>
c001bbc0:	83 c4 10             	add    esp,0x10
c001bbc3:	85 f6                	test   esi,esi
c001bbc5:	74 2f                	je     c001bbf6 <sysCallOpenDir(regs*)+0x67>
c001bbc7:	83 ec 0c             	sub    esp,0xc
c001bbca:	56                   	push   esi
c001bbcb:	e8 1e 7d ff ff       	call   c00138ee <Directory::open()>
c001bbd0:	83 c4 10             	add    esp,0x10
c001bbd3:	85 c0                	test   eax,eax
c001bbd5:	75 1f                	jne    c001bbf6 <sysCallOpenDir(regs*)+0x67>
c001bbd7:	83 ec 0c             	sub    esp,0xc
c001bbda:	56                   	push   esi
c001bbdb:	e8 10 5b ff ff       	call   c00116f0 <UnixFile::getFileDescriptor()>
c001bbe0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bbe3:	83 c4 10             	add    esp,0x10
c001bbe6:	89 02                	mov    DWORD PTR [edx],eax
c001bbe8:	c1 f8 1f             	sar    eax,0x1f
c001bbeb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bbee:	31 c0                	xor    eax,eax
c001bbf0:	59                   	pop    ecx
c001bbf1:	31 d2                	xor    edx,edx
c001bbf3:	5b                   	pop    ebx
c001bbf4:	5e                   	pop    esi
c001bbf5:	c3                   	ret    
c001bbf6:	59                   	pop    ecx
c001bbf7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbfc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc01:	5b                   	pop    ebx
c001bc02:	5e                   	pop    esi
c001bc03:	c3                   	ret    

c001bc04 <sysCallCloseDir(regs*)>:
c001bc04:	53                   	push   ebx
c001bc05:	83 ec 08             	sub    esp,0x8
c001bc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc0c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc0f:	83 f8 02             	cmp    eax,0x2
c001bc12:	76 47                	jbe    c001bc5b <sysCallCloseDir(regs*)+0x57>
c001bc14:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc19:	77 2f                	ja     c001bc4a <sysCallCloseDir(regs*)+0x46>
c001bc1b:	83 ec 0c             	sub    esp,0xc
c001bc1e:	50                   	push   eax
c001bc1f:	e8 c1 5d ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001bc24:	89 c3                	mov    ebx,eax
c001bc26:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc29:	e8 1c 7d ff ff       	call   c001394a <Directory::close()>
c001bc2e:	83 c4 10             	add    esp,0x10
c001bc31:	85 db                	test   ebx,ebx
c001bc33:	74 0c                	je     c001bc41 <sysCallCloseDir(regs*)+0x3d>
c001bc35:	83 ec 0c             	sub    esp,0xc
c001bc38:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc3a:	53                   	push   ebx
c001bc3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc3e:	83 c4 10             	add    esp,0x10
c001bc41:	31 c0                	xor    eax,eax
c001bc43:	31 d2                	xor    edx,edx
c001bc45:	83 c4 08             	add    esp,0x8
c001bc48:	5b                   	pop    ebx
c001bc49:	c3                   	ret    
c001bc4a:	83 ec 08             	sub    esp,0x8
c001bc4d:	50                   	push   eax
c001bc4e:	68 2c be 02 c0       	push   0xc002be2c
c001bc53:	e8 2e 72 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001bc58:	83 c4 10             	add    esp,0x10
c001bc5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc60:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc65:	83 c4 08             	add    esp,0x8
c001bc68:	5b                   	pop    ebx
c001bc69:	c3                   	ret    

c001bc6a <sysCallMakeDir(regs*)>:
c001bc6a:	56                   	push   esi
c001bc6b:	53                   	push   ebx
c001bc6c:	83 ec 10             	sub    esp,0x10
c001bc6f:	68 14 01 00 00       	push   0x114
c001bc74:	e8 c7 3b ff ff       	call   c000f840 <malloc>
c001bc79:	83 c4 0c             	add    esp,0xc
c001bc7c:	89 c3                	mov    ebx,eax
c001bc7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc83:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc8a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc8d:	53                   	push   ebx
c001bc8e:	e8 f7 7b ff ff       	call   c001388a <Directory::Directory(char const*, Process*)>
c001bc93:	83 c4 10             	add    esp,0x10
c001bc96:	85 db                	test   ebx,ebx
c001bc98:	74 32                	je     c001bccc <sysCallMakeDir(regs*)+0x62>
c001bc9a:	83 ec 0c             	sub    esp,0xc
c001bc9d:	53                   	push   ebx
c001bc9e:	e8 2b 7e ff ff       	call   c0013ace <Directory::create()>
c001bca3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bca6:	89 c6                	mov    esi,eax
c001bca8:	e8 9d 7c ff ff       	call   c001394a <Directory::close()>
c001bcad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcb5:	83 c4 10             	add    esp,0x10
c001bcb8:	31 c0                	xor    eax,eax
c001bcba:	59                   	pop    ecx
c001bcbb:	85 f6                	test   esi,esi
c001bcbd:	5b                   	pop    ebx
c001bcbe:	0f 95 c0             	setne  al
c001bcc1:	5e                   	pop    esi
c001bcc2:	31 d2                	xor    edx,edx
c001bcc4:	f7 d8                	neg    eax
c001bcc6:	83 d2 00             	adc    edx,0x0
c001bcc9:	f7 da                	neg    edx
c001bccb:	c3                   	ret    
c001bccc:	59                   	pop    ecx
c001bccd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcd2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcd7:	5b                   	pop    ebx
c001bcd8:	5e                   	pop    esi
c001bcd9:	c3                   	ret    

c001bcda <sysCallWait(regs*)>:
c001bcda:	83 ec 10             	sub    esp,0x10
c001bcdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bce1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bce4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bce7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bcea:	e8 e8 24 00 00       	call   c001e1d7 <waitTask(int, int*, int)>
c001bcef:	83 c4 1c             	add    esp,0x1c
c001bcf2:	99                   	cdq    
c001bcf3:	c3                   	ret    

c001bcf4 <sysCallNotImpl(regs*)>:
c001bcf4:	83 ec 18             	sub    esp,0x18
c001bcf7:	68 3e bd 02 c0       	push   0xc002bd3e
c001bcfc:	e8 2a e8 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001bd01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd06:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd0b:	83 c4 1c             	add    esp,0x1c
c001bd0e:	c3                   	ret    

c001bd0f <sysPanic(regs*)>:
c001bd0f:	83 ec 18             	sub    esp,0x18
c001bd12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd16:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd19:	e8 0d e8 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001bd1e:	c7 04 24 58 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd58
c001bd25:	e8 01 e8 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001bd2a:	b8 01 00 00 00       	mov    eax,0x1
c001bd2f:	31 d2                	xor    edx,edx
c001bd31:	83 c4 1c             	add    esp,0x1c
c001bd34:	c3                   	ret    

c001bd35 <sysCallRmdir(regs*)>:
c001bd35:	56                   	push   esi
c001bd36:	53                   	push   ebx
c001bd37:	83 ec 20             	sub    esp,0x20
c001bd3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd3e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd41:	68 14 01 00 00       	push   0x114
c001bd46:	e8 f5 3a ff ff       	call   c000f840 <malloc>
c001bd4b:	83 c4 0c             	add    esp,0xc
c001bd4e:	89 c3                	mov    ebx,eax
c001bd50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd55:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd58:	56                   	push   esi
c001bd59:	53                   	push   ebx
c001bd5a:	e8 7f 76 ff ff       	call   c00133de <File::File(char const*, Process*)>
c001bd5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd62:	e8 53 78 ff ff       	call   c00135ba <File::unlink()>
c001bd67:	83 c4 10             	add    esp,0x10
c001bd6a:	85 db                	test   ebx,ebx
c001bd6c:	74 14                	je     c001bd82 <sysCallRmdir(regs*)+0x4d>
c001bd6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd72:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd74:	83 ec 0c             	sub    esp,0xc
c001bd77:	53                   	push   ebx
c001bd78:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd7b:	83 c4 10             	add    esp,0x10
c001bd7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd82:	85 c0                	test   eax,eax
c001bd84:	0f 95 c0             	setne  al
c001bd87:	31 d2                	xor    edx,edx
c001bd89:	0f b6 c0             	movzx  eax,al
c001bd8c:	f7 d8                	neg    eax
c001bd8e:	83 d2 00             	adc    edx,0x0
c001bd91:	83 c4 14             	add    esp,0x14
c001bd94:	f7 da                	neg    edx
c001bd96:	5b                   	pop    ebx
c001bd97:	5e                   	pop    esi
c001bd98:	c3                   	ret    

c001bd99 <sysCallUnlink(regs*)>:
c001bd99:	56                   	push   esi
c001bd9a:	53                   	push   ebx
c001bd9b:	83 ec 20             	sub    esp,0x20
c001bd9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bda2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bda5:	68 14 01 00 00       	push   0x114
c001bdaa:	e8 91 3a ff ff       	call   c000f840 <malloc>
c001bdaf:	83 c4 0c             	add    esp,0xc
c001bdb2:	89 c3                	mov    ebx,eax
c001bdb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdb9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdbc:	56                   	push   esi
c001bdbd:	53                   	push   ebx
c001bdbe:	e8 1b 76 ff ff       	call   c00133de <File::File(char const*, Process*)>
c001bdc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdc6:	e8 ef 77 ff ff       	call   c00135ba <File::unlink()>
c001bdcb:	83 c4 10             	add    esp,0x10
c001bdce:	85 db                	test   ebx,ebx
c001bdd0:	74 14                	je     c001bde6 <sysCallUnlink(regs*)+0x4d>
c001bdd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdd6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bdd8:	83 ec 0c             	sub    esp,0xc
c001bddb:	53                   	push   ebx
c001bddc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bddf:	83 c4 10             	add    esp,0x10
c001bde2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bde6:	85 c0                	test   eax,eax
c001bde8:	0f 95 c0             	setne  al
c001bdeb:	31 d2                	xor    edx,edx
c001bded:	0f b6 c0             	movzx  eax,al
c001bdf0:	f7 d8                	neg    eax
c001bdf2:	83 d2 00             	adc    edx,0x0
c001bdf5:	83 c4 14             	add    esp,0x14
c001bdf8:	f7 da                	neg    edx
c001bdfa:	5b                   	pop    ebx
c001bdfb:	5e                   	pop    esi
c001bdfc:	c3                   	ret    

c001bdfd <sysCallGetArgv(regs*)>:
c001bdfd:	83 ec 0c             	sub    esp,0xc
c001be00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be04:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001be07:	85 c0                	test   eax,eax
c001be09:	78 2b                	js     c001be36 <sysCallGetArgv(regs*)+0x39>
c001be0b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be11:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be14:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001be1a:	7d 1a                	jge    c001be36 <sysCallGetArgv(regs*)+0x39>
c001be1c:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001be23:	85 c0                	test   eax,eax
c001be25:	74 17                	je     c001be3e <sysCallGetArgv(regs*)+0x41>
c001be27:	83 ec 08             	sub    esp,0x8
c001be2a:	50                   	push   eax
c001be2b:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001be2e:	e8 01 4a fe ff       	call   c0000834 <strcpy>
c001be33:	83 c4 10             	add    esp,0x10
c001be36:	31 c0                	xor    eax,eax
c001be38:	31 d2                	xor    edx,edx
c001be3a:	83 c4 0c             	add    esp,0xc
c001be3d:	c3                   	ret    
c001be3e:	b8 01 00 00 00       	mov    eax,0x1
c001be43:	31 d2                	xor    edx,edx
c001be45:	83 c4 0c             	add    esp,0xc
c001be48:	c3                   	ret    

c001be49 <sysCallTTYName(regs*)>:
c001be49:	56                   	push   esi
c001be4a:	53                   	push   ebx
c001be4b:	53                   	push   ebx
c001be4c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be50:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001be53:	85 c0                	test   eax,eax
c001be55:	74 5f                	je     c001beb6 <sysCallTTYName(regs*)+0x6d>
c001be57:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001be5a:	83 f8 02             	cmp    eax,0x2
c001be5d:	77 3e                	ja     c001be9d <sysCallTTYName(regs*)+0x54>
c001be5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be64:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be67:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001be6d:	85 db                	test   ebx,ebx
c001be6f:	74 45                	je     c001beb6 <sysCallTTYName(regs*)+0x6d>
c001be71:	83 ec 0c             	sub    esp,0xc
c001be74:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be76:	53                   	push   ebx
c001be77:	ff 10                	call   DWORD PTR [eax]
c001be79:	83 c4 10             	add    esp,0x10
c001be7c:	84 c0                	test   al,al
c001be7e:	74 41                	je     c001bec1 <sysCallTTYName(regs*)+0x78>
c001be80:	83 ec 08             	sub    esp,0x8
c001be83:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001be89:	53                   	push   ebx
c001be8a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001be8d:	e8 a2 49 fe ff       	call   c0000834 <strcpy>
c001be92:	83 c4 10             	add    esp,0x10
c001be95:	31 c0                	xor    eax,eax
c001be97:	59                   	pop    ecx
c001be98:	31 d2                	xor    edx,edx
c001be9a:	5b                   	pop    ebx
c001be9b:	5e                   	pop    esi
c001be9c:	c3                   	ret    
c001be9d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bea2:	74 bb                	je     c001be5f <sysCallTTYName(regs*)+0x16>
c001bea4:	83 ec 0c             	sub    esp,0xc
c001bea7:	50                   	push   eax
c001bea8:	e8 38 5b ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001bead:	83 c4 10             	add    esp,0x10
c001beb0:	89 c3                	mov    ebx,eax
c001beb2:	85 db                	test   ebx,ebx
c001beb4:	75 bb                	jne    c001be71 <sysCallTTYName(regs*)+0x28>
c001beb6:	59                   	pop    ecx
c001beb7:	b8 01 00 00 00       	mov    eax,0x1
c001bebc:	31 d2                	xor    edx,edx
c001bebe:	5b                   	pop    ebx
c001bebf:	5e                   	pop    esi
c001bec0:	c3                   	ret    
c001bec1:	59                   	pop    ecx
c001bec2:	b8 02 00 00 00       	mov    eax,0x2
c001bec7:	31 d2                	xor    edx,edx
c001bec9:	5b                   	pop    ebx
c001beca:	5e                   	pop    esi
c001becb:	c3                   	ret    

c001becc <sysCallUSleep(regs*)>:
c001becc:	83 ec 14             	sub    esp,0x14
c001becf:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bed4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bed8:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bedf:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bee2:	01 ca                	add    edx,ecx
c001bee4:	52                   	push   edx
c001bee5:	50                   	push   eax
c001bee6:	e8 85 23 00 00       	call   c001e270 <nanoSleep(unsigned long long)>
c001beeb:	31 c0                	xor    eax,eax
c001beed:	31 d2                	xor    edx,edx
c001beef:	83 c4 1c             	add    esp,0x1c
c001bef2:	c3                   	ret    

c001bef3 <sysCallSpawn(regs*)>:
c001bef3:	56                   	push   esi
c001bef4:	53                   	push   ebx
c001bef5:	53                   	push   ebx
c001bef6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001befa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001befd:	85 f6                	test   esi,esi
c001beff:	75 08                	jne    c001bf09 <sysCallSpawn(regs*)+0x16>
c001bf01:	59                   	pop    ecx
c001bf02:	31 c0                	xor    eax,eax
c001bf04:	31 d2                	xor    edx,edx
c001bf06:	5b                   	pop    ebx
c001bf07:	5e                   	pop    esi
c001bf08:	c3                   	ret    
c001bf09:	83 ec 0c             	sub    esp,0xc
c001bf0c:	68 3f 07 00 00       	push   0x73f
c001bf11:	e8 2a 39 ff ff       	call   c000f840 <malloc>
c001bf16:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf19:	89 c6                	mov    esi,eax
c001bf1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf20:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf23:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf26:	56                   	push   esi
c001bf27:	e8 44 1a 00 00       	call   c001d970 <Process::Process(char const*, Process*, char**)>
c001bf2c:	83 c4 20             	add    esp,0x20
c001bf2f:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bf36:	75 c9                	jne    c001bf01 <sysCallSpawn(regs*)+0xe>
c001bf38:	83 ec 0c             	sub    esp,0xc
c001bf3b:	56                   	push   esi
c001bf3c:	e8 f5 1f 00 00       	call   c001df36 <Process::createUserThread()>
c001bf41:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf43:	83 c4 10             	add    esp,0x10
c001bf46:	99                   	cdq    
c001bf47:	59                   	pop    ecx
c001bf48:	5b                   	pop    ebx
c001bf49:	5e                   	pop    esi
c001bf4a:	c3                   	ret    

c001bf4b <sysCallGetEnv(regs*)>:
c001bf4b:	55                   	push   ebp
c001bf4c:	57                   	push   edi
c001bf4d:	56                   	push   esi
c001bf4e:	53                   	push   ebx
c001bf4f:	83 ec 28             	sub    esp,0x28
c001bf52:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bf56:	68 67 bd 02 c0       	push   0xc002bd67
c001bf5b:	e8 26 6f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001bf60:	5f                   	pop    edi
c001bf61:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bf64:	5d                   	pop    ebp
c001bf65:	53                   	push   ebx
c001bf66:	68 ad c0 02 c0       	push   0xc002c0ad
c001bf6b:	e8 16 6f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001bf70:	58                   	pop    eax
c001bf71:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bf74:	5a                   	pop    edx
c001bf75:	57                   	push   edi
c001bf76:	68 70 bd 02 c0       	push   0xc002bd70
c001bf7b:	e8 06 6f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001bf80:	59                   	pop    ecx
c001bf81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf86:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf89:	e8 b9 e4 ff ff       	call   c001a447 <Krnl::getProcessTotalEnvCount(Process*)>
c001bf8e:	5a                   	pop    edx
c001bf8f:	89 c5                	mov    ebp,eax
c001bf91:	59                   	pop    ecx
c001bf92:	50                   	push   eax
c001bf93:	68 7a bd 02 c0       	push   0xc002bd7a
c001bf98:	e8 e9 6e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001bf9d:	83 c4 10             	add    esp,0x10
c001bfa0:	39 ef                	cmp    edi,ebp
c001bfa2:	7c 15                	jl     c001bfb9 <sysCallGetEnv(regs*)+0x6e>
c001bfa4:	85 db                	test   ebx,ebx
c001bfa6:	75 0c                	jne    c001bfb4 <sysCallGetEnv(regs*)+0x69>
c001bfa8:	83 c4 1c             	add    esp,0x1c
c001bfab:	31 c0                	xor    eax,eax
c001bfad:	5b                   	pop    ebx
c001bfae:	31 d2                	xor    edx,edx
c001bfb0:	5e                   	pop    esi
c001bfb1:	5f                   	pop    edi
c001bfb2:	5d                   	pop    ebp
c001bfb3:	c3                   	ret    
c001bfb4:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bfb7:	eb ef                	jmp    c001bfa8 <sysCallGetEnv(regs*)+0x5d>
c001bfb9:	83 ec 0c             	sub    esp,0xc
c001bfbc:	68 86 bd 02 c0       	push   0xc002bd86
c001bfc1:	e8 c0 6e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001bfc6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bfca:	83 c4 0c             	add    esp,0xc
c001bfcd:	57                   	push   edi
c001bfce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bfd4:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bfd7:	50                   	push   eax
c001bfd8:	e8 8a e4 ff ff       	call   c001a467 <Krnl::getProcessEnvPair(Process*, int)>
c001bfdd:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bfe1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bfe5:	68 2c c1 02 c0       	push   0xc002c12c
c001bfea:	e8 97 6e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001bfef:	83 c4 10             	add    esp,0x10
c001bff2:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bff5:	85 f6                	test   esi,esi
c001bff7:	75 47                	jne    c001c040 <sysCallGetEnv(regs*)+0xf5>
c001bff9:	83 ec 0c             	sub    esp,0xc
c001bffc:	55                   	push   ebp
c001bffd:	e8 92 47 fe ff       	call   c0000794 <strlen>
c001c002:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c005:	89 c3                	mov    ebx,eax
c001c007:	e8 88 47 fe ff       	call   c0000794 <strlen>
c001c00c:	5a                   	pop    edx
c001c00d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c011:	59                   	pop    ecx
c001c012:	50                   	push   eax
c001c013:	68 89 bd 02 c0       	push   0xc002bd89
c001c018:	e8 69 6e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001c01d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c020:	e8 6f 47 fe ff       	call   c0000794 <strlen>
c001c025:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c028:	89 c3                	mov    ebx,eax
c001c02a:	e8 65 47 fe ff       	call   c0000794 <strlen>
c001c02f:	83 c4 10             	add    esp,0x10
c001c032:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c036:	83 c4 1c             	add    esp,0x1c
c001c039:	31 d2                	xor    edx,edx
c001c03b:	5b                   	pop    ebx
c001c03c:	5e                   	pop    esi
c001c03d:	5f                   	pop    edi
c001c03e:	5d                   	pop    ebp
c001c03f:	c3                   	ret    
c001c040:	83 ec 0c             	sub    esp,0xc
c001c043:	68 46 c1 02 c0       	push   0xc002c146
c001c048:	e8 39 6e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001c04d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c050:	58                   	pop    eax
c001c051:	5a                   	pop    edx
c001c052:	55                   	push   ebp
c001c053:	53                   	push   ebx
c001c054:	e8 db 47 fe ff       	call   c0000834 <strcpy>
c001c059:	59                   	pop    ecx
c001c05a:	5e                   	pop    esi
c001c05b:	68 93 bd 02 c0       	push   0xc002bd93
c001c060:	53                   	push   ebx
c001c061:	e8 0e 49 fe ff       	call   c0000974 <strcat>
c001c066:	5d                   	pop    ebp
c001c067:	58                   	pop    eax
c001c068:	57                   	push   edi
c001c069:	53                   	push   ebx
c001c06a:	e8 05 49 fe ff       	call   c0000974 <strcat>
c001c06f:	c7 04 24 60 c1 02 c0 	mov    DWORD PTR [esp],0xc002c160
c001c076:	e8 0b 6e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001c07b:	83 c4 10             	add    esp,0x10
c001c07e:	e9 25 ff ff ff       	jmp    c001bfa8 <sysCallGetEnv(regs*)+0x5d>

c001c083 <sysAppSettings(regs*)>:
c001c083:	53                   	push   ebx
c001c084:	83 ec 08             	sub    esp,0x8
c001c087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c08b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c08e:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c094:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c099:	66 3d c0 09          	cmp    ax,0x9c0
c001c09d:	75 2f                	jne    c001c0ce <sysAppSettings(regs*)+0x4b>
c001c09f:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c0a5:	83 e0 1f             	and    eax,0x1f
c001c0a8:	3c 01                	cmp    al,0x1
c001c0aa:	74 2e                	je     c001c0da <sysAppSettings(regs*)+0x57>
c001c0ac:	3c 07                	cmp    al,0x7
c001c0ae:	0f 84 bd 00 00 00    	je     c001c171 <sysAppSettings(regs*)+0xee>
c001c0b4:	84 c0                	test   al,al
c001c0b6:	0f 84 dc 00 00 00    	je     c001c198 <sysAppSettings(regs*)+0x115>
c001c0bc:	3c 08                	cmp    al,0x8
c001c0be:	74 6d                	je     c001c12d <sysAppSettings(regs*)+0xaa>
c001c0c0:	0f b6 c0             	movzx  eax,al
c001c0c3:	83 c4 08             	add    esp,0x8
c001c0c6:	05 e8 03 00 00       	add    eax,0x3e8
c001c0cb:	5b                   	pop    ebx
c001c0cc:	99                   	cdq    
c001c0cd:	c3                   	ret    
c001c0ce:	b8 01 00 00 00       	mov    eax,0x1
c001c0d3:	31 d2                	xor    edx,edx
c001c0d5:	83 c4 08             	add    esp,0x8
c001c0d8:	5b                   	pop    ebx
c001c0d9:	c3                   	ret    
c001c0da:	51                   	push   ecx
c001c0db:	68 00 01 00 00       	push   0x100
c001c0e0:	6a 00                	push   0x0
c001c0e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0ea:	83 c0 0c             	add    eax,0xc
c001c0ed:	50                   	push   eax
c001c0ee:	e8 85 46 fe ff       	call   c0000778 <memset>
c001c0f3:	83 c4 0c             	add    esp,0xc
c001c0f6:	68 ff 00 00 00       	push   0xff
c001c0fb:	53                   	push   ebx
c001c0fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c101:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c104:	83 c0 0c             	add    eax,0xc
c001c107:	50                   	push   eax
c001c108:	e8 37 46 fe ff       	call   c0000744 <memcpy>
c001c10d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c112:	5b                   	pop    ebx
c001c113:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c116:	5a                   	pop    edx
c001c117:	8d 50 0c             	lea    edx,[eax+0xc]
c001c11a:	52                   	push   edx
c001c11b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c121:	e8 3a 4a ff ff       	call   c0010b60 <VgaText::setTitle(char*)>
c001c126:	83 c4 10             	add    esp,0x10
c001c129:	31 c0                	xor    eax,eax
c001c12b:	eb a6                	jmp    c001c0d3 <sysAppSettings(regs*)+0x50>
c001c12d:	83 ec 08             	sub    esp,0x8
c001c130:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c136:	83 e0 0f             	and    eax,0xf
c001c139:	50                   	push   eax
c001c13a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c13f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c142:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c148:	e8 03 4a ff ff       	call   c0010b50 <VgaText::setTitleColour(VgaColour)>
c001c14d:	58                   	pop    eax
c001c14e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c154:	5a                   	pop    edx
c001c155:	c1 e8 04             	shr    eax,0x4
c001c158:	83 e0 0f             	and    eax,0xf
c001c15b:	50                   	push   eax
c001c15c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c161:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c164:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c16a:	e8 d1 49 ff ff       	call   c0010b40 <VgaText::setTitleTextColour(VgaColour)>
c001c16f:	eb b5                	jmp    c001c126 <sysAppSettings(regs*)+0xa3>
c001c171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c176:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c179:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c17f:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c185:	c0 e8 06             	shr    al,0x6
c001c188:	83 e0 01             	and    eax,0x1
c001c18b:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c191:	31 c0                	xor    eax,eax
c001c193:	e9 3b ff ff ff       	jmp    c001c0d3 <sysAppSettings(regs*)+0x50>
c001c198:	b8 02 00 00 00       	mov    eax,0x2
c001c19d:	e9 31 ff ff ff       	jmp    c001c0d3 <sysAppSettings(regs*)+0x50>

c001c1a2 <sysSetFatAttrib(regs*)>:
c001c1a2:	57                   	push   edi
c001c1a3:	56                   	push   esi
c001c1a4:	53                   	push   ebx
c001c1a5:	83 ec 1c             	sub    esp,0x1c
c001c1a8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c1ac:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c1af:	68 14 01 00 00       	push   0x114
c001c1b4:	e8 87 36 ff ff       	call   c000f840 <malloc>
c001c1b9:	83 c4 0c             	add    esp,0xc
c001c1bc:	89 c3                	mov    ebx,eax
c001c1be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1c3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1c6:	57                   	push   edi
c001c1c7:	53                   	push   ebx
c001c1c8:	e8 11 72 ff ff       	call   c00133de <File::File(char const*, Process*)>
c001c1cd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c1d0:	83 c4 0c             	add    esp,0xc
c001c1d3:	0f b6 d4             	movzx  edx,ah
c001c1d6:	0f b6 c0             	movzx  eax,al
c001c1d9:	52                   	push   edx
c001c1da:	50                   	push   eax
c001c1db:	53                   	push   ebx
c001c1dc:	e8 73 74 ff ff       	call   c0013654 <File::chfatattr(unsigned char, unsigned char)>
c001c1e1:	83 c4 10             	add    esp,0x10
c001c1e4:	85 db                	test   ebx,ebx
c001c1e6:	74 14                	je     c001c1fc <sysSetFatAttrib(regs*)+0x5a>
c001c1e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1ec:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1ee:	83 ec 0c             	sub    esp,0xc
c001c1f1:	53                   	push   ebx
c001c1f2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1f5:	83 c4 10             	add    esp,0x10
c001c1f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1fc:	85 c0                	test   eax,eax
c001c1fe:	0f 95 c0             	setne  al
c001c201:	31 d2                	xor    edx,edx
c001c203:	0f b6 c0             	movzx  eax,al
c001c206:	f7 d8                	neg    eax
c001c208:	83 d2 00             	adc    edx,0x0
c001c20b:	83 c4 10             	add    esp,0x10
c001c20e:	f7 da                	neg    edx
c001c210:	5b                   	pop    ebx
c001c211:	5e                   	pop    esi
c001c212:	5f                   	pop    edi
c001c213:	c3                   	ret    

c001c214 <sysPipe(regs*)>:
c001c214:	57                   	push   edi
c001c215:	56                   	push   esi
c001c216:	53                   	push   ebx
c001c217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c21b:	83 ec 0c             	sub    esp,0xc
c001c21e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c221:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c224:	6a 20                	push   0x20
c001c226:	e8 15 36 ff ff       	call   c000f840 <malloc>
c001c22b:	89 c3                	mov    ebx,eax
c001c22d:	58                   	pop    eax
c001c22e:	5a                   	pop    edx
c001c22f:	68 00 50 00 00       	push   0x5000
c001c234:	53                   	push   ebx
c001c235:	e8 56 42 ff ff       	call   c0010490 <Pipe::Pipe(int)>
c001c23a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c23d:	e8 ae 54 ff ff       	call   c00116f0 <UnixFile::getFileDescriptor()>
c001c242:	89 07                	mov    DWORD PTR [edi],eax
c001c244:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c247:	e8 a4 54 ff ff       	call   c00116f0 <UnixFile::getFileDescriptor()>
c001c24c:	83 c4 10             	add    esp,0x10
c001c24f:	89 06                	mov    DWORD PTR [esi],eax
c001c251:	31 d2                	xor    edx,edx
c001c253:	5b                   	pop    ebx
c001c254:	31 c0                	xor    eax,eax
c001c256:	5e                   	pop    esi
c001c257:	5f                   	pop    edi
c001c258:	c3                   	ret    

c001c259 <sysGetUnixTime(regs*)>:
c001c259:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c001c25e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c264:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c268:	e9 5b 7b ff ff       	jmp    c0013dc8 <Clock::timeInSecondsLocal()>

c001c26d <string_ends_with(char const*, char const*)>:
c001c26d:	57                   	push   edi
c001c26e:	56                   	push   esi
c001c26f:	53                   	push   ebx
c001c270:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c274:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c278:	83 ec 0c             	sub    esp,0xc
c001c27b:	53                   	push   ebx
c001c27c:	e8 13 45 fe ff       	call   c0000794 <strlen>
c001c281:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c284:	89 c6                	mov    esi,eax
c001c286:	e8 09 45 fe ff       	call   c0000794 <strlen>
c001c28b:	83 c4 10             	add    esp,0x10
c001c28e:	39 c6                	cmp    esi,eax
c001c290:	7d 06                	jge    c001c298 <string_ends_with(char const*, char const*)+0x2b>
c001c292:	5b                   	pop    ebx
c001c293:	31 c0                	xor    eax,eax
c001c295:	5e                   	pop    esi
c001c296:	5f                   	pop    edi
c001c297:	c3                   	ret    
c001c298:	83 ec 08             	sub    esp,0x8
c001c29b:	29 c6                	sub    esi,eax
c001c29d:	57                   	push   edi
c001c29e:	01 f3                	add    ebx,esi
c001c2a0:	53                   	push   ebx
c001c2a1:	e8 1a 46 fe ff       	call   c00008c0 <strcmp>
c001c2a6:	83 c4 10             	add    esp,0x10
c001c2a9:	85 c0                	test   eax,eax
c001c2ab:	5b                   	pop    ebx
c001c2ac:	0f 94 c0             	sete   al
c001c2af:	5e                   	pop    esi
c001c2b0:	0f b6 c0             	movzx  eax,al
c001c2b3:	5f                   	pop    edi
c001c2b4:	c3                   	ret    

c001c2b5 <sysCallOpen(regs*)>:
c001c2b5:	56                   	push   esi
c001c2b6:	53                   	push   ebx
c001c2b7:	81 ec 04 01 00 00    	sub    esp,0x104
c001c2bd:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c2c4:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c2c7:	85 c9                	test   ecx,ecx
c001c2c9:	0f 84 b3 00 00 00    	je     c001c382 <sysCallOpen(regs*)+0xcd>
c001c2cf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c2d2:	85 c0                	test   eax,eax
c001c2d4:	0f 84 a8 00 00 00    	je     c001c382 <sysCallOpen(regs*)+0xcd>
c001c2da:	52                   	push   edx
c001c2db:	68 95 bd 02 c0       	push   0xc002bd95
c001c2e0:	50                   	push   eax
c001c2e1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c2e5:	56                   	push   esi
c001c2e6:	e8 49 6f ff ff       	call   c0013234 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c2eb:	89 34 24             	mov    DWORD PTR [esp],esi
c001c2ee:	e8 a1 44 fe ff       	call   c0000794 <strlen>
c001c2f3:	83 c4 10             	add    esp,0x10
c001c2f6:	48                   	dec    eax
c001c2f7:	74 1d                	je     c001c316 <sysCallOpen(regs*)+0x61>
c001c2f9:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c2fc:	eb 0f                	jmp    c001c30d <sysCallOpen(regs*)+0x58>
c001c2fe:	80 fa 3a             	cmp    dl,0x3a
c001c301:	74 0f                	je     c001c312 <sysCallOpen(regs*)+0x5d>
c001c303:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c307:	48                   	dec    eax
c001c308:	74 0c                	je     c001c316 <sysCallOpen(regs*)+0x61>
c001c30a:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c30d:	80 fa 2e             	cmp    dl,0x2e
c001c310:	75 ec                	jne    c001c2fe <sysCallOpen(regs*)+0x49>
c001c312:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c316:	83 ec 08             	sub    esp,0x8
c001c319:	68 99 bd 02 c0       	push   0xc002bd99
c001c31e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c321:	e8 47 ff ff ff       	call   c001c26d <string_ends_with(char const*, char const*)>
c001c326:	83 c4 10             	add    esp,0x10
c001c329:	85 c0                	test   eax,eax
c001c32b:	75 17                	jne    c001c344 <sysCallOpen(regs*)+0x8f>
c001c32d:	83 ec 08             	sub    esp,0x8
c001c330:	68 ba bd 02 c0       	push   0xc002bdba
c001c335:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c338:	e8 30 ff ff ff       	call   c001c26d <string_ends_with(char const*, char const*)>
c001c33d:	83 c4 10             	add    esp,0x10
c001c340:	85 c0                	test   eax,eax
c001c342:	74 51                	je     c001c395 <sysCallOpen(regs*)+0xe0>
c001c344:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c347:	83 ec 08             	sub    esp,0x8
c001c34a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c350:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c357:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c35a:	ff 30                	push   DWORD PTR [eax]
c001c35c:	68 9e bd 02 c0       	push   0xc002bd9e
c001c361:	e8 20 6b ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001c366:	c7 04 24 ad bd 02 c0 	mov    DWORD PTR [esp],0xc002bdad
c001c36d:	e8 14 6b ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001c372:	83 c4 10             	add    esp,0x10
c001c375:	81 c4 04 01 00 00    	add    esp,0x104
c001c37b:	31 c0                	xor    eax,eax
c001c37d:	31 d2                	xor    edx,edx
c001c37f:	5b                   	pop    ebx
c001c380:	5e                   	pop    esi
c001c381:	c3                   	ret    
c001c382:	81 c4 04 01 00 00    	add    esp,0x104
c001c388:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c38d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c392:	5b                   	pop    ebx
c001c393:	5e                   	pop    esi
c001c394:	c3                   	ret    
c001c395:	83 ec 08             	sub    esp,0x8
c001c398:	68 9a bd 02 c0       	push   0xc002bd9a
c001c39d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3a0:	e8 1b 45 fe ff       	call   c00008c0 <strcmp>
c001c3a5:	83 c4 10             	add    esp,0x10
c001c3a8:	85 c0                	test   eax,eax
c001c3aa:	74 98                	je     c001c344 <sysCallOpen(regs*)+0x8f>
c001c3ac:	83 ec 08             	sub    esp,0x8
c001c3af:	68 99 bd 02 c0       	push   0xc002bd99
c001c3b4:	56                   	push   esi
c001c3b5:	e8 b3 fe ff ff       	call   c001c26d <string_ends_with(char const*, char const*)>
c001c3ba:	83 c4 10             	add    esp,0x10
c001c3bd:	85 c0                	test   eax,eax
c001c3bf:	75 83                	jne    c001c344 <sysCallOpen(regs*)+0x8f>
c001c3c1:	83 ec 08             	sub    esp,0x8
c001c3c4:	68 bf bd 02 c0       	push   0xc002bdbf
c001c3c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3cc:	e8 9c fe ff ff       	call   c001c26d <string_ends_with(char const*, char const*)>
c001c3d1:	83 c4 10             	add    esp,0x10
c001c3d4:	85 c0                	test   eax,eax
c001c3d6:	0f 85 d9 00 00 00    	jne    c001c4b5 <sysCallOpen(regs*)+0x200>
c001c3dc:	83 ec 08             	sub    esp,0x8
c001c3df:	68 c4 bd 02 c0       	push   0xc002bdc4
c001c3e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3e7:	e8 81 fe ff ff       	call   c001c26d <string_ends_with(char const*, char const*)>
c001c3ec:	83 c4 10             	add    esp,0x10
c001c3ef:	85 c0                	test   eax,eax
c001c3f1:	0f 85 be 00 00 00    	jne    c001c4b5 <sysCallOpen(regs*)+0x200>
c001c3f7:	83 ec 08             	sub    esp,0x8
c001c3fa:	68 c0 bd 02 c0       	push   0xc002bdc0
c001c3ff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c402:	e8 b9 44 fe ff       	call   c00008c0 <strcmp>
c001c407:	83 c4 10             	add    esp,0x10
c001c40a:	85 c0                	test   eax,eax
c001c40c:	0f 84 a3 00 00 00    	je     c001c4b5 <sysCallOpen(regs*)+0x200>
c001c412:	83 ec 08             	sub    esp,0x8
c001c415:	68 bf bd 02 c0       	push   0xc002bdbf
c001c41a:	56                   	push   esi
c001c41b:	e8 4d fe ff ff       	call   c001c26d <string_ends_with(char const*, char const*)>
c001c420:	83 c4 10             	add    esp,0x10
c001c423:	85 c0                	test   eax,eax
c001c425:	0f 85 8a 00 00 00    	jne    c001c4b5 <sysCallOpen(regs*)+0x200>
c001c42b:	83 ec 0c             	sub    esp,0xc
c001c42e:	68 14 01 00 00       	push   0x114
c001c433:	e8 08 34 ff ff       	call   c000f840 <malloc>
c001c438:	83 c4 0c             	add    esp,0xc
c001c43b:	89 c6                	mov    esi,eax
c001c43d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c442:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c445:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c448:	56                   	push   esi
c001c449:	e8 90 6f ff ff       	call   c00133de <File::File(char const*, Process*)>
c001c44e:	83 c4 10             	add    esp,0x10
c001c451:	85 f6                	test   esi,esi
c001c453:	0f 84 29 ff ff ff    	je     c001c382 <sysCallOpen(regs*)+0xcd>
c001c459:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c45c:	0f b6 c2             	movzx  eax,dl
c001c45f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c462:	89 d0                	mov    eax,edx
c001c464:	83 e0 01             	and    eax,0x1
c001c467:	f6 c2 02             	test   dl,0x2
c001c46a:	74 03                	je     c001c46f <sysCallOpen(regs*)+0x1ba>
c001c46c:	83 c8 02             	or     eax,0x2
c001c46f:	f6 c2 04             	test   dl,0x4
c001c472:	74 03                	je     c001c477 <sysCallOpen(regs*)+0x1c2>
c001c474:	83 c8 04             	or     eax,0x4
c001c477:	f6 c2 08             	test   dl,0x8
c001c47a:	74 03                	je     c001c47f <sysCallOpen(regs*)+0x1ca>
c001c47c:	83 c8 0a             	or     eax,0xa
c001c47f:	83 e2 10             	and    edx,0x10
c001c482:	74 03                	je     c001c487 <sysCallOpen(regs*)+0x1d2>
c001c484:	83 c8 12             	or     eax,0x12
c001c487:	83 ec 08             	sub    esp,0x8
c001c48a:	50                   	push   eax
c001c48b:	56                   	push   esi
c001c48c:	e8 b1 6f ff ff       	call   c0013442 <File::open(FileOpenMode)>
c001c491:	83 c4 10             	add    esp,0x10
c001c494:	85 c0                	test   eax,eax
c001c496:	0f 85 e6 fe ff ff    	jne    c001c382 <sysCallOpen(regs*)+0xcd>
c001c49c:	83 ec 0c             	sub    esp,0xc
c001c49f:	56                   	push   esi
c001c4a0:	e8 4b 52 ff ff       	call   c00116f0 <UnixFile::getFileDescriptor()>
c001c4a5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c4a8:	89 02                	mov    DWORD PTR [edx],eax
c001c4aa:	c1 f8 1f             	sar    eax,0x1f
c001c4ad:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4b0:	e9 bd fe ff ff       	jmp    c001c372 <sysCallOpen(regs*)+0xbd>
c001c4b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4b8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c4be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4c5:	e9 ab fe ff ff       	jmp    c001c375 <sysCallOpen(regs*)+0xc0>

c001c4ca <Sys::loadSyscalls()>:
c001c4ca:	c7 05 60 0e 03 c0 d7 b5 01 c0 	mov    DWORD PTR ds:0xc0030e60,0xc001b5d7
c001c4d4:	c7 05 64 0e 03 c0 c0 b1 01 c0 	mov    DWORD PTR ds:0xc0030e64,0xc001b1c0
c001c4de:	c7 05 68 0e 03 c0 2a b3 01 c0 	mov    DWORD PTR ds:0xc0030e68,0xc001b32a
c001c4e8:	c7 05 6c 0e 03 c0 0d b5 01 c0 	mov    DWORD PTR ds:0xc0030e6c,0xc001b50d
c001c4f2:	c7 05 70 0e 03 c0 c2 b2 01 c0 	mov    DWORD PTR ds:0xc0030e70,0xc001b2c2
c001c4fc:	c7 05 74 0e 03 c0 f7 b1 01 c0 	mov    DWORD PTR ds:0xc0030e74,0xc001b1f7
c001c506:	c7 05 78 0e 03 c0 d8 b1 01 c0 	mov    DWORD PTR ds:0xc0030e78,0xc001b1d8
c001c510:	c7 05 7c 0e 03 c0 7f b3 01 c0 	mov    DWORD PTR ds:0xc0030e7c,0xc001b37f
c001c51a:	c7 05 84 0e 03 c0 07 bb 01 c0 	mov    DWORD PTR ds:0xc0030e84,0xc001bb07
c001c524:	c7 05 80 0e 03 c0 b5 c2 01 c0 	mov    DWORD PTR ds:0xc0030e80,0xc001c2b5
c001c52e:	c7 05 88 0e 03 c0 8f bb 01 c0 	mov    DWORD PTR ds:0xc0030e88,0xc001bb8f
c001c538:	c7 05 8c 0e 03 c0 f6 b7 01 c0 	mov    DWORD PTR ds:0xc0030e8c,0xc001b7f6
c001c542:	c7 05 90 0e 03 c0 12 b6 01 c0 	mov    DWORD PTR ds:0xc0030e90,0xc001b612
c001c54c:	c7 05 94 0e 03 c0 17 b6 01 c0 	mov    DWORD PTR ds:0xc0030e94,0xc001b617
c001c556:	c7 05 98 0e 03 c0 6a bc 01 c0 	mov    DWORD PTR ds:0xc0030e98,0xc001bc6a
c001c560:	c7 05 9c 0e 03 c0 04 bc 01 c0 	mov    DWORD PTR ds:0xc0030e9c,0xc001bc04
c001c56a:	c7 05 a0 0e 03 c0 de b8 01 c0 	mov    DWORD PTR ds:0xc0030ea0,0xc001b8de
c001c574:	c7 05 a4 0e 03 c0 47 b9 01 c0 	mov    DWORD PTR ds:0xc0030ea4,0xc001b947
c001c57e:	c7 05 a8 0e 03 c0 c4 b9 01 c0 	mov    DWORD PTR ds:0xc0030ea8,0xc001b9c4
c001c588:	c7 05 ac 0e 03 c0 1c b6 01 c0 	mov    DWORD PTR ds:0xc0030eac,0xc001b61c
c001c592:	c7 05 b0 0e 03 c0 da bc 01 c0 	mov    DWORD PTR ds:0xc0030eb0,0xc001bcda
c001c59c:	c7 05 b4 0e 03 c0 f4 bc 01 c0 	mov    DWORD PTR ds:0xc0030eb4,0xc001bcf4
c001c5a6:	c7 05 b8 0e 03 c0 f4 bc 01 c0 	mov    DWORD PTR ds:0xc0030eb8,0xc001bcf4
c001c5b0:	c7 05 bc 0e 03 c0 35 bd 01 c0 	mov    DWORD PTR ds:0xc0030ebc,0xc001bd35
c001c5ba:	c7 05 c0 0e 03 c0 99 bd 01 c0 	mov    DWORD PTR ds:0xc0030ec0,0xc001bd99
c001c5c4:	c7 05 c4 0e 03 c0 c8 b7 01 c0 	mov    DWORD PTR ds:0xc0030ec4,0xc001b7c8
c001c5ce:	c7 05 c8 0e 03 c0 fd bd 01 c0 	mov    DWORD PTR ds:0xc0030ec8,0xc001bdfd
c001c5d8:	c7 05 cc 0e 03 c0 85 b7 01 c0 	mov    DWORD PTR ds:0xc0030ecc,0xc001b785
c001c5e2:	c7 05 d0 0e 03 c0 49 be 01 c0 	mov    DWORD PTR ds:0xc0030ed0,0xc001be49
c001c5ec:	c7 05 d4 0e 03 c0 84 b8 01 c0 	mov    DWORD PTR ds:0xc0030ed4,0xc001b884
c001c5f6:	c7 05 d8 0e 03 c0 cc be 01 c0 	mov    DWORD PTR ds:0xc0030ed8,0xc001becc
c001c600:	c7 05 dc 0e 03 c0 47 ba 01 c0 	mov    DWORD PTR ds:0xc0030edc,0xc001ba47
c001c60a:	c7 05 e0 0e 03 c0 f3 be 01 c0 	mov    DWORD PTR ds:0xc0030ee0,0xc001bef3
c001c614:	c7 05 e4 0e 03 c0 4b bf 01 c0 	mov    DWORD PTR ds:0xc0030ee4,0xc001bf4b
c001c61e:	c7 05 e8 0e 03 c0 83 c0 01 c0 	mov    DWORD PTR ds:0xc0030ee8,0xc001c083
c001c628:	c7 05 ec 0e 03 c0 26 b6 01 c0 	mov    DWORD PTR ds:0xc0030eec,0xc001b626
c001c632:	c7 05 f0 0e 03 c0 90 b6 01 c0 	mov    DWORD PTR ds:0xc0030ef0,0xc001b690
c001c63c:	c7 05 f4 0e 03 c0 d6 b6 01 c0 	mov    DWORD PTR ds:0xc0030ef4,0xc001b6d6
c001c646:	c7 05 f8 0e 03 c0 a2 c1 01 c0 	mov    DWORD PTR ds:0xc0030ef8,0xc001c1a2
c001c650:	c7 05 fc 0e 03 c0 0f bd 01 c0 	mov    DWORD PTR ds:0xc0030efc,0xc001bd0f
c001c65a:	c7 05 00 0f 03 c0 27 b7 01 c0 	mov    DWORD PTR ds:0xc0030f00,0xc001b727
c001c664:	c7 05 04 0f 03 c0 14 c2 01 c0 	mov    DWORD PTR ds:0xc0030f04,0xc001c214
c001c66e:	c7 05 08 0f 03 c0 59 c2 01 c0 	mov    DWORD PTR ds:0xc0030f08,0xc001c259
c001c678:	c7 05 0c 0f 03 c0 1a b2 01 c0 	mov    DWORD PTR ds:0xc0030f0c,0xc001b21a
c001c682:	c7 05 10 0f 03 c0 9b b3 01 c0 	mov    DWORD PTR ds:0xc0030f10,0xc001b39b
c001c68c:	c7 05 14 0f 03 c0 c3 b4 01 c0 	mov    DWORD PTR ds:0xc0030f14,0xc001b4c3
c001c696:	c7 05 18 0f 03 c0 8a b1 01 c0 	mov    DWORD PTR ds:0xc0030f18,0xc001b18a
c001c6a0:	c7 05 1c 0f 03 c0 75 b5 01 c0 	mov    DWORD PTR ds:0xc0030f1c,0xc001b575
c001c6aa:	c7 05 20 0f 03 c0 03 b2 01 c0 	mov    DWORD PTR ds:0xc0030f20,0xc001b203
c001c6b4:	c3                   	ret    

c001c6b5 <Sys::systemCall(regs*, void*)>:
c001c6b5:	53                   	push   ebx
c001c6b6:	83 ec 08             	sub    esp,0x8
c001c6b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6bd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c6c0:	83 f8 7f             	cmp    eax,0x7f
c001c6c3:	77 16                	ja     c001c6db <Sys::systemCall(regs*, void*)+0x26>
c001c6c5:	8b 14 85 60 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf1a0]
c001c6cc:	85 d2                	test   edx,edx
c001c6ce:	74 0b                	je     c001c6db <Sys::systemCall(regs*, void*)+0x26>
c001c6d0:	83 ec 0c             	sub    esp,0xc
c001c6d3:	53                   	push   ebx
c001c6d4:	ff d2                	call   edx
c001c6d6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c6d9:	eb 0d                	jmp    c001c6e8 <Sys::systemCall(regs*, void*)+0x33>
c001c6db:	52                   	push   edx
c001c6dc:	52                   	push   edx
c001c6dd:	50                   	push   eax
c001c6de:	68 c9 bd 02 c0       	push   0xc002bdc9
c001c6e3:	e8 9e 67 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001c6e8:	83 c4 10             	add    esp,0x10
c001c6eb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c6f0:	31 d2                	xor    edx,edx
c001c6f2:	83 c4 08             	add    esp,0x8
c001c6f5:	5b                   	pop    ebx
c001c6f6:	c3                   	ret    

c001c6f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c6f7:	55                   	push   ebp
c001c6f8:	57                   	push   edi
c001c6f9:	56                   	push   esi
c001c6fa:	53                   	push   ebx
c001c6fb:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c701:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c708:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c70f:	85 c0                	test   eax,eax
c001c711:	0f 95 c1             	setne  cl
c001c714:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c71c:	0f 94 c2             	sete   dl
c001c71f:	84 d1                	test   cl,dl
c001c721:	74 23                	je     c001c746 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c723:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c729:	74 1b                	je     c001c746 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c72b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c731:	89 da                	mov    edx,ebx
c001c733:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c739:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c73f:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c746:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c74d:	05 ff 0f 00 00       	add    eax,0xfff
c001c752:	83 ec 0c             	sub    esp,0xc
c001c755:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c759:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c75f:	c1 e8 0c             	shr    eax,0xc
c001c762:	89 ef                	mov    edi,ebp
c001c764:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c768:	c1 ef 0c             	shr    edi,0xc
c001c76b:	6a 01                	push   0x1
c001c76d:	e8 43 55 ff ff       	call   c0011cb5 <Virt::allocateKernelVirtualPages(int)>
c001c772:	89 c6                	mov    esi,eax
c001c774:	58                   	pop    eax
c001c775:	5a                   	pop    edx
c001c776:	57                   	push   edi
c001c777:	68 4f be 02 c0       	push   0xc002be4f
c001c77c:	e8 05 67 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001c781:	59                   	pop    ecx
c001c782:	58                   	pop    eax
c001c783:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c787:	68 61 be 02 c0       	push   0xc002be61
c001c78c:	e8 f5 66 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001c791:	83 c4 10             	add    esp,0x10
c001c794:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c79a:	0f 86 24 01 00 00    	jbe    c001c8c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c7a0:	c1 e7 0c             	shl    edi,0xc
c001c7a3:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c7a6:	89 df                	mov    edi,ebx
c001c7a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7ac:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c7b3:	01 dd                	add    ebp,ebx
c001c7b5:	29 fd                	sub    ebp,edi
c001c7b7:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c7bb:	0f 84 01 01 00 00    	je     c001c8c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c7c1:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c7c7:	76 05                	jbe    c001c7ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c7c9:	bd 00 10 00 00       	mov    ebp,0x1000
c001c7ce:	83 ec 0c             	sub    esp,0xc
c001c7d1:	31 d2                	xor    edx,edx
c001c7d3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7da:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c7dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c7e0:	50                   	push   eax
c001c7e1:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c7e5:	50                   	push   eax
c001c7e6:	52                   	push   edx
c001c7e7:	55                   	push   ebp
c001c7e8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c7ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7f2:	83 c4 20             	add    esp,0x20
c001c7f5:	85 c0                	test   eax,eax
c001c7f7:	74 0a                	je     c001c803 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c7f9:	53                   	push   ebx
c001c7fa:	53                   	push   ebx
c001c7fb:	50                   	push   eax
c001c7fc:	68 73 be 02 c0       	push   0xc002be73
c001c801:	eb 0f                	jmp    c001c812 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c803:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c807:	74 20                	je     c001c829 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c809:	51                   	push   ecx
c001c80a:	51                   	push   ecx
c001c80b:	6a 00                	push   0x0
c001c80d:	68 9e be 02 c0       	push   0xc002be9e
c001c812:	e8 6f 66 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001c817:	89 34 24             	mov    DWORD PTR [esp],esi
c001c81a:	e8 90 57 ff ff       	call   c0011faf <Virt::freeKernelVirtualPages(unsigned long)>
c001c81f:	83 c4 10             	add    esp,0x10
c001c822:	31 c0                	xor    eax,eax
c001c824:	e9 55 01 00 00       	jmp    c001c97e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c829:	e8 f2 14 00 00       	call   c001dd20 <lockScheduler()>
c001c82e:	e8 aa 36 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c833:	6a 07                	push   0x7
c001c835:	89 c5                	mov    ebp,eax
c001c837:	56                   	push   esi
c001c838:	50                   	push   eax
c001c839:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c83e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c841:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c847:	e8 ca 5a ff ff       	call   c0012316 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c84c:	83 c4 0c             	add    esp,0xc
c001c84f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c856:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c85c:	6a 00                	push   0x0
c001c85e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c863:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c866:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c86c:	e8 0f 59 ff ff       	call   c0012180 <VAS::mapOtherVASIn(bool, VAS*)>
c001c871:	58                   	pop    eax
c001c872:	5a                   	pop    edx
c001c873:	68 07 0c 00 00       	push   0xc07
c001c878:	57                   	push   edi
c001c879:	81 c7 00 10 00 00    	add    edi,0x1000
c001c87f:	55                   	push   ebp
c001c880:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c887:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c88d:	6a 00                	push   0x0
c001c88f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c894:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c897:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c89d:	e8 2e 5e ff ff       	call   c00126d0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c8a2:	83 c4 1c             	add    esp,0x1c
c001c8a5:	68 00 10 00 00       	push   0x1000
c001c8aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8ae:	50                   	push   eax
c001c8af:	56                   	push   esi
c001c8b0:	e8 8f 3e fe ff       	call   c0000744 <memcpy>
c001c8b5:	e8 68 14 00 00       	call   c001dd22 <unlockScheduler()>
c001c8ba:	83 c4 10             	add    esp,0x10
c001c8bd:	e9 ea fe ff ff       	jmp    c001c7ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c8c2:	89 fb                	mov    ebx,edi
c001c8c4:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c8cc:	0f 86 9e 00 00 00    	jbe    c001c970 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c8d2:	e8 49 14 00 00       	call   c001dd20 <lockScheduler()>
c001c8d7:	51                   	push   ecx
c001c8d8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c8df:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8e5:	6a 00                	push   0x0
c001c8e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8ef:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8f5:	e8 86 58 ff ff       	call   c0012180 <VAS::mapOtherVASIn(bool, VAS*)>
c001c8fa:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c8fe:	c1 e7 0c             	shl    edi,0xc
c001c901:	01 df                	add    edi,ebx
c001c903:	83 c4 10             	add    esp,0x10
c001c906:	39 fb                	cmp    ebx,edi
c001c908:	74 61                	je     c001c96b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c90a:	e8 ce 35 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c90f:	6a 07                	push   0x7
c001c911:	89 c5                	mov    ebp,eax
c001c913:	56                   	push   esi
c001c914:	50                   	push   eax
c001c915:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c91a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c91d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c923:	e8 ee 59 ff ff       	call   c0012316 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c928:	58                   	pop    eax
c001c929:	5a                   	pop    edx
c001c92a:	68 07 0c 00 00       	push   0xc07
c001c92f:	53                   	push   ebx
c001c930:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c936:	55                   	push   ebp
c001c937:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c93e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c944:	6a 00                	push   0x0
c001c946:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c94b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c94e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c954:	e8 77 5d ff ff       	call   c00126d0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c959:	83 c4 1c             	add    esp,0x1c
c001c95c:	68 00 10 00 00       	push   0x1000
c001c961:	6a 00                	push   0x0
c001c963:	56                   	push   esi
c001c964:	e8 0f 3e fe ff       	call   c0000778 <memset>
c001c969:	eb 98                	jmp    c001c903 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c96b:	e8 b2 13 00 00       	call   c001dd22 <unlockScheduler()>
c001c970:	83 ec 0c             	sub    esp,0xc
c001c973:	56                   	push   esi
c001c974:	e8 36 56 ff ff       	call   c0011faf <Virt::freeKernelVirtualPages(unsigned long)>
c001c979:	83 c4 10             	add    esp,0x10
c001c97c:	b0 01                	mov    al,0x1
c001c97e:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c984:	5b                   	pop    ebx
c001c985:	5e                   	pop    esi
c001c986:	5f                   	pop    edi
c001c987:	5d                   	pop    ebp
c001c988:	c3                   	ret    

c001c989 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c989:	55                   	push   ebp
c001c98a:	57                   	push   edi
c001c98b:	56                   	push   esi
c001c98c:	53                   	push   ebx
c001c98d:	83 ec 48             	sub    esp,0x48
c001c990:	68 14 01 00 00       	push   0x114
c001c995:	e8 a6 2e ff ff       	call   c000f840 <malloc>
c001c99a:	83 c4 0c             	add    esp,0xc
c001c99d:	89 c6                	mov    esi,eax
c001c99f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c9a3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c9a7:	50                   	push   eax
c001c9a8:	e8 31 6a ff ff       	call   c00133de <File::File(char const*, Process*)>
c001c9ad:	58                   	pop    eax
c001c9ae:	5a                   	pop    edx
c001c9af:	6a 01                	push   0x1
c001c9b1:	56                   	push   esi
c001c9b2:	e8 8b 6a ff ff       	call   c0013442 <File::open(FileOpenMode)>
c001c9b7:	83 c4 10             	add    esp,0x10
c001c9ba:	85 c0                	test   eax,eax
c001c9bc:	0f 85 47 01 00 00    	jne    c001cb09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9c2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c9ca:	83 ec 0c             	sub    esp,0xc
c001c9cd:	6a 34                	push   0x34
c001c9cf:	e8 6c 2e ff ff       	call   c000f840 <malloc>
c001c9d4:	89 c3                	mov    ebx,eax
c001c9d6:	58                   	pop    eax
c001c9d7:	8b 06                	mov    eax,DWORD PTR [esi]
c001c9d9:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c9dd:	57                   	push   edi
c001c9de:	53                   	push   ebx
c001c9df:	6a 00                	push   0x0
c001c9e1:	6a 34                	push   0x34
c001c9e3:	56                   	push   esi
c001c9e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9e7:	83 c4 20             	add    esp,0x20
c001c9ea:	85 c0                	test   eax,eax
c001c9ec:	0f 85 17 01 00 00    	jne    c001cb09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9f2:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c9f8:	0f 85 0b 01 00 00    	jne    c001cb09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9fe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca01:	85 c0                	test   eax,eax
c001ca03:	0f 84 00 01 00 00    	je     c001cb09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca09:	31 d2                	xor    edx,edx
c001ca0b:	55                   	push   ebp
c001ca0c:	52                   	push   edx
c001ca0d:	50                   	push   eax
c001ca0e:	56                   	push   esi
c001ca0f:	e8 ec 6a ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001ca14:	83 c4 10             	add    esp,0x10
c001ca17:	85 c0                	test   eax,eax
c001ca19:	0f 85 ea 00 00 00    	jne    c001cb09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca1f:	83 ec 0c             	sub    esp,0xc
c001ca22:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ca25:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca2d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca31:	0f af c2             	imul   eax,edx
c001ca34:	50                   	push   eax
c001ca35:	e8 06 2e ff ff       	call   c000f840 <malloc>
c001ca3a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca40:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca47:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca4b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca4f:	0f af c2             	imul   eax,edx
c001ca52:	99                   	cdq    
c001ca53:	52                   	push   edx
c001ca54:	50                   	push   eax
c001ca55:	56                   	push   esi
c001ca56:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca59:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ca5c:	83 c4 20             	add    esp,0x20
c001ca5f:	85 c0                	test   eax,eax
c001ca61:	0f 84 a2 00 00 00    	je     c001cb09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca67:	31 d2                	xor    edx,edx
c001ca69:	51                   	push   ecx
c001ca6a:	52                   	push   edx
c001ca6b:	50                   	push   eax
c001ca6c:	56                   	push   esi
c001ca6d:	e8 8e 6a ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001ca72:	83 c4 10             	add    esp,0x10
c001ca75:	85 c0                	test   eax,eax
c001ca77:	0f 85 8c 00 00 00    	jne    c001cb09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca7d:	83 ec 0c             	sub    esp,0xc
c001ca80:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ca84:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ca88:	31 ed                	xor    ebp,ebp
c001ca8a:	0f af c2             	imul   eax,edx
c001ca8d:	50                   	push   eax
c001ca8e:	e8 ad 2d ff ff       	call   c000f840 <malloc>
c001ca93:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca99:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caa0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001caa4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001caa8:	0f af c2             	imul   eax,edx
c001caab:	99                   	cdq    
c001caac:	52                   	push   edx
c001caad:	50                   	push   eax
c001caae:	56                   	push   esi
c001caaf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cab2:	83 c4 20             	add    esp,0x20
c001cab5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cabd:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cac1:	0f 86 80 00 00 00    	jbe    c001cb47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cac7:	0f b7 fd             	movzx  edi,bp
c001caca:	c1 e7 05             	shl    edi,0x5
c001cacd:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cad1:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cad4:	75 6b                	jne    c001cb41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cad6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cad9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cadd:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cae0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cae4:	52                   	push   edx
c001cae5:	31 d2                	xor    edx,edx
c001cae7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001caea:	52                   	push   edx
c001caeb:	50                   	push   eax
c001caec:	56                   	push   esi
c001caed:	e8 0e 6a ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001caf2:	83 c4 10             	add    esp,0x10
c001caf5:	85 c0                	test   eax,eax
c001caf7:	74 17                	je     c001cb10 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001caf9:	83 ec 0c             	sub    esp,0xc
c001cafc:	68 ca be 02 c0       	push   0xc002beca
c001cb01:	e8 80 63 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001cb06:	83 c4 10             	add    esp,0x10
c001cb09:	31 c0                	xor    eax,eax
c001cb0b:	e9 87 00 00 00       	jmp    c001cb97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cb10:	83 ec 0c             	sub    esp,0xc
c001cb13:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cb16:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cb19:	50                   	push   eax
c001cb1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb22:	56                   	push   esi
c001cb23:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cb27:	e8 cb fb ff ff       	call   c001c6f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cb2c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb30:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cb34:	83 c4 20             	add    esp,0x20
c001cb37:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cb3b:	73 04                	jae    c001cb41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb41:	45                   	inc    ebp
c001cb42:	e9 76 ff ff ff       	jmp    c001cabd <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cb47:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cb4b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb53:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cb59:	83 ec 0c             	sub    esp,0xc
c001cb5c:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cb62:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cb67:	05 00 10 00 00       	add    eax,0x1000
c001cb6c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cb6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb73:	e8 d8 2c ff ff       	call   c000f850 <free>
c001cb78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb7b:	e8 d0 2c ff ff       	call   c000f850 <free>
c001cb80:	58                   	pop    eax
c001cb81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb85:	e8 c6 2c ff ff       	call   c000f850 <free>
c001cb8a:	89 34 24             	mov    DWORD PTR [esp],esi
c001cb8d:	e8 0e 69 ff ff       	call   c00134a0 <File::close()>
c001cb92:	83 c4 10             	add    esp,0x10
c001cb95:	b0 01                	mov    al,0x1
c001cb97:	83 c4 3c             	add    esp,0x3c
c001cb9a:	5b                   	pop    ebx
c001cb9b:	5e                   	pop    esi
c001cb9c:	5f                   	pop    edi
c001cb9d:	5d                   	pop    ebp
c001cb9e:	c3                   	ret    

c001cb9f <Thr::runtimeReferenceHelper()>:
c001cb9f:	83 ec 18             	sub    esp,0x18
c001cba2:	68 d2 be 02 c0       	push   0xc002bed2
c001cba7:	e8 da 62 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001cbac:	fa                   	cli    
c001cbad:	83 c4 10             	add    esp,0x10
c001cbb0:	eb fe                	jmp    c001cbb0 <Thr::runtimeReferenceHelper()+0x11>

c001cbb2 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cbb2:	57                   	push   edi
c001cbb3:	56                   	push   esi
c001cbb4:	53                   	push   ebx
c001cbb5:	31 db                	xor    ebx,ebx
c001cbb7:	39 1d 00 18 03 c0    	cmp    DWORD PTR ds:0xc0031800,ebx
c001cbbd:	7e 3c                	jle    c001cbfb <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cbbf:	8b 34 9d 80 17 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce880]
c001cbc6:	31 ff                	xor    edi,edi
c001cbc8:	39 3c 9d 80 16 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce980],edi
c001cbcf:	7e 27                	jle    c001cbf8 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cbd1:	50                   	push   eax
c001cbd2:	50                   	push   eax
c001cbd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbd7:	8b 06                	mov    eax,DWORD PTR [esi]
c001cbd9:	03 04 9d 00 17 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce900]
c001cbe0:	50                   	push   eax
c001cbe1:	e8 da 3c fe ff       	call   c00008c0 <strcmp>
c001cbe6:	83 c4 10             	add    esp,0x10
c001cbe9:	85 c0                	test   eax,eax
c001cbeb:	75 05                	jne    c001cbf2 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cbed:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cbf0:	eb 0b                	jmp    c001cbfd <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cbf2:	83 c6 10             	add    esi,0x10
c001cbf5:	47                   	inc    edi
c001cbf6:	eb d0                	jmp    c001cbc8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cbf8:	43                   	inc    ebx
c001cbf9:	eb bc                	jmp    c001cbb7 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cbfb:	31 c0                	xor    eax,eax
c001cbfd:	5b                   	pop    ebx
c001cbfe:	5e                   	pop    esi
c001cbff:	5f                   	pop    edi
c001cc00:	c3                   	ret    

c001cc01 <Thr::loadKernelSymbolTable(char const*)>:
c001cc01:	55                   	push   ebp
c001cc02:	57                   	push   edi
c001cc03:	56                   	push   esi
c001cc04:	53                   	push   ebx
c001cc05:	83 ec 68             	sub    esp,0x68
c001cc08:	8b 35 54 18 03 c0    	mov    esi,DWORD PTR ds:0xc0031854
c001cc0e:	68 14 01 00 00       	push   0x114
c001cc13:	e8 28 2c ff ff       	call   c000f840 <malloc>
c001cc18:	83 c4 0c             	add    esp,0xc
c001cc1b:	89 c3                	mov    ebx,eax
c001cc1d:	56                   	push   esi
c001cc1e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cc22:	50                   	push   eax
c001cc23:	e8 b6 67 ff ff       	call   c00133de <File::File(char const*, Process*)>
c001cc28:	5e                   	pop    esi
c001cc29:	5f                   	pop    edi
c001cc2a:	6a 01                	push   0x1
c001cc2c:	53                   	push   ebx
c001cc2d:	e8 10 68 ff ff       	call   c0013442 <File::open(FileOpenMode)>
c001cc32:	83 c4 10             	add    esp,0x10
c001cc35:	85 c0                	test   eax,eax
c001cc37:	74 0a                	je     c001cc43 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cc39:	83 ec 0c             	sub    esp,0xc
c001cc3c:	68 f4 be 02 c0       	push   0xc002bef4
c001cc41:	eb 34                	jmp    c001cc77 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cc43:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cc4b:	83 ec 0c             	sub    esp,0xc
c001cc4e:	6a 34                	push   0x34
c001cc50:	e8 eb 2b ff ff       	call   c000f840 <malloc>
c001cc55:	59                   	pop    ecx
c001cc56:	89 c7                	mov    edi,eax
c001cc58:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cc5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc5e:	56                   	push   esi
c001cc5f:	57                   	push   edi
c001cc60:	6a 00                	push   0x0
c001cc62:	6a 34                	push   0x34
c001cc64:	53                   	push   ebx
c001cc65:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc68:	83 c4 20             	add    esp,0x20
c001cc6b:	85 c0                	test   eax,eax
c001cc6d:	74 17                	je     c001cc86 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cc6f:	83 ec 0c             	sub    esp,0xc
c001cc72:	68 0b bf 02 c0       	push   0xc002bf0b
c001cc77:	e8 af d8 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001cc7c:	83 c4 10             	add    esp,0x10
c001cc7f:	31 c0                	xor    eax,eax
c001cc81:	e9 31 02 00 00       	jmp    c001ceb7 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cc86:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cc8c:	75 e1                	jne    c001cc6f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc8e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cc91:	85 c0                	test   eax,eax
c001cc93:	74 da                	je     c001cc6f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc95:	52                   	push   edx
c001cc96:	31 d2                	xor    edx,edx
c001cc98:	52                   	push   edx
c001cc99:	50                   	push   eax
c001cc9a:	53                   	push   ebx
c001cc9b:	e8 60 68 ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001cca0:	83 c4 10             	add    esp,0x10
c001cca3:	85 c0                	test   eax,eax
c001cca5:	75 c8                	jne    c001cc6f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cca7:	83 ec 0c             	sub    esp,0xc
c001ccaa:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ccae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccb2:	31 ed                	xor    ebp,ebp
c001ccb4:	0f af c2             	imul   eax,edx
c001ccb7:	50                   	push   eax
c001ccb8:	e8 83 2b ff ff       	call   c000f840 <malloc>
c001ccbd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ccbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ccc3:	89 34 24             	mov    DWORD PTR [esp],esi
c001ccc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccca:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ccce:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccd2:	0f af c2             	imul   eax,edx
c001ccd5:	99                   	cdq    
c001ccd6:	52                   	push   edx
c001ccd7:	50                   	push   eax
c001ccd8:	53                   	push   ebx
c001ccd9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ccdc:	83 c4 20             	add    esp,0x20
c001ccdf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cce7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ccef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ccf7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ccff:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd03:	0f 86 aa 00 00 00    	jbe    c001cdb3 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd09:	0f b7 f5             	movzx  esi,bp
c001cd0c:	6b f6 28             	imul   esi,esi,0x28
c001cd0f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd13:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd1a:	50                   	push   eax
c001cd1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd1f:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cd23:	8b 16                	mov    edx,DWORD PTR [esi]
c001cd25:	6b c0 28             	imul   eax,eax,0x28
c001cd28:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cd2c:	89 d0                	mov    eax,edx
c001cd2e:	31 d2                	xor    edx,edx
c001cd30:	52                   	push   edx
c001cd31:	50                   	push   eax
c001cd32:	53                   	push   ebx
c001cd33:	e8 c8 67 ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001cd38:	83 c4 0c             	add    esp,0xc
c001cd3b:	6a 20                	push   0x20
c001cd3d:	6a 00                	push   0x0
c001cd3f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cd43:	52                   	push   edx
c001cd44:	e8 2f 3a fe ff       	call   c0000778 <memset>
c001cd49:	58                   	pop    eax
c001cd4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd4c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cd50:	51                   	push   ecx
c001cd51:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cd55:	52                   	push   edx
c001cd56:	6a 00                	push   0x0
c001cd58:	6a 1f                	push   0x1f
c001cd5a:	53                   	push   ebx
c001cd5b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd5e:	83 c4 18             	add    esp,0x18
c001cd61:	68 22 bf 02 c0       	push   0xc002bf22
c001cd66:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cd6a:	52                   	push   edx
c001cd6b:	e8 50 3b fe ff       	call   c00008c0 <strcmp>
c001cd70:	83 c4 10             	add    esp,0x10
c001cd73:	85 c0                	test   eax,eax
c001cd75:	75 0f                	jne    c001cd86 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cd77:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd86:	50                   	push   eax
c001cd87:	50                   	push   eax
c001cd88:	68 2a bf 02 c0       	push   0xc002bf2a
c001cd8d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cd91:	50                   	push   eax
c001cd92:	e8 29 3b fe ff       	call   c00008c0 <strcmp>
c001cd97:	83 c4 10             	add    esp,0x10
c001cd9a:	85 c0                	test   eax,eax
c001cd9c:	75 0f                	jne    c001cdad <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cd9e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cda1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cda5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cda9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdad:	45                   	inc    ebp
c001cdae:	e9 4c ff ff ff       	jmp    c001ccff <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cdb3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cdb8:	75 10                	jne    c001cdca <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cdba:	83 ec 0c             	sub    esp,0xc
c001cdbd:	68 32 bf 02 c0       	push   0xc002bf32
c001cdc2:	e8 64 d7 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001cdc7:	83 c4 10             	add    esp,0x10
c001cdca:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cdcf:	75 10                	jne    c001cde1 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cdd1:	83 ec 0c             	sub    esp,0xc
c001cdd4:	68 32 bf 02 c0       	push   0xc002bf32
c001cdd9:	e8 4d d7 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001cdde:	83 c4 10             	add    esp,0x10
c001cde1:	31 d2                	xor    edx,edx
c001cde3:	50                   	push   eax
c001cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde8:	52                   	push   edx
c001cde9:	50                   	push   eax
c001cdea:	53                   	push   ebx
c001cdeb:	e8 10 67 ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001cdf0:	5a                   	pop    edx
c001cdf1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cdf5:	e8 46 2a ff ff       	call   c000f840 <malloc>
c001cdfa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdfe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce02:	31 c9                	xor    ecx,ecx
c001ce04:	5e                   	pop    esi
c001ce05:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce07:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce0b:	55                   	push   ebp
c001ce0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce10:	51                   	push   ecx
c001ce11:	52                   	push   edx
c001ce12:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce16:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ce1a:	53                   	push   ebx
c001ce1b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce1e:	83 c4 14             	add    esp,0x14
c001ce21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce25:	e8 16 2a ff ff       	call   c000f840 <malloc>
c001ce2a:	89 c6                	mov    esi,eax
c001ce2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce2e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce31:	56                   	push   esi
c001ce32:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce36:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ce3a:	51                   	push   ecx
c001ce3b:	52                   	push   edx
c001ce3c:	53                   	push   ebx
c001ce3d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce44:	8b 15 00 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031800
c001ce4a:	83 c4 1c             	add    esp,0x1c
c001ce4d:	c1 e8 04             	shr    eax,0x4
c001ce50:	89 04 95 80 16 03 c0 	mov    DWORD PTR [edx*4-0x3ffce980],eax
c001ce57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce5b:	31 d2                	xor    edx,edx
c001ce5d:	52                   	push   edx
c001ce5e:	50                   	push   eax
c001ce5f:	53                   	push   ebx
c001ce60:	e8 9b 66 ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001ce65:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce67:	31 d2                	xor    edx,edx
c001ce69:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce6c:	56                   	push   esi
c001ce6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce71:	52                   	push   edx
c001ce72:	50                   	push   eax
c001ce73:	53                   	push   ebx
c001ce74:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce77:	83 c4 14             	add    esp,0x14
c001ce7a:	53                   	push   ebx
c001ce7b:	e8 20 66 ff ff       	call   c00134a0 <File::close()>
c001ce80:	5d                   	pop    ebp
c001ce81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce85:	e8 c6 29 ff ff       	call   c000f850 <free>
c001ce8a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce8d:	e8 be 29 ff ff       	call   c000f850 <free>
c001ce92:	a1 00 18 03 c0       	mov    eax,ds:0xc0031800
c001ce97:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce9b:	8d 50 01             	lea    edx,[eax+0x1]
c001ce9e:	89 0c 85 80 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce880],ecx
c001cea5:	89 34 85 00 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce900],esi
c001ceac:	89 15 00 18 03 c0    	mov    DWORD PTR ds:0xc0031800,edx
c001ceb2:	83 c4 10             	add    esp,0x10
c001ceb5:	b0 01                	mov    al,0x1
c001ceb7:	83 c4 5c             	add    esp,0x5c
c001ceba:	5b                   	pop    ebx
c001cebb:	5e                   	pop    esi
c001cebc:	5f                   	pop    edi
c001cebd:	5d                   	pop    ebp
c001cebe:	c3                   	ret    

c001cebf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cebf:	55                   	push   ebp
c001cec0:	57                   	push   edi
c001cec1:	56                   	push   esi
c001cec2:	53                   	push   ebx
c001cec3:	81 ec 68 03 00 00    	sub    esp,0x368
c001cec9:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ced0:	8b 1d 54 18 03 c0    	mov    ebx,DWORD PTR ds:0xc0031854
c001ced6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ceda:	68 14 01 00 00       	push   0x114
c001cedf:	e8 5c 29 ff ff       	call   c000f840 <malloc>
c001cee4:	83 c4 0c             	add    esp,0xc
c001cee7:	89 c5                	mov    ebp,eax
c001cee9:	53                   	push   ebx
c001ceea:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cef1:	50                   	push   eax
c001cef2:	e8 e7 64 ff ff       	call   c00133de <File::File(char const*, Process*)>
c001cef7:	5e                   	pop    esi
c001cef8:	5f                   	pop    edi
c001cef9:	6a 01                	push   0x1
c001cefb:	55                   	push   ebp
c001cefc:	e8 41 65 ff ff       	call   c0013442 <File::open(FileOpenMode)>
c001cf01:	83 c4 10             	add    esp,0x10
c001cf04:	85 c0                	test   eax,eax
c001cf06:	0f 85 8d 06 00 00    	jne    c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf0c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf14:	83 ec 0c             	sub    esp,0xc
c001cf17:	6a 34                	push   0x34
c001cf19:	e8 22 29 ff ff       	call   c000f840 <malloc>
c001cf1e:	5b                   	pop    ebx
c001cf1f:	89 c7                	mov    edi,eax
c001cf21:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cf25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf28:	53                   	push   ebx
c001cf29:	57                   	push   edi
c001cf2a:	6a 00                	push   0x0
c001cf2c:	6a 34                	push   0x34
c001cf2e:	55                   	push   ebp
c001cf2f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf32:	83 c4 20             	add    esp,0x20
c001cf35:	85 c0                	test   eax,eax
c001cf37:	0f 85 5c 06 00 00    	jne    c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf3d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cf43:	0f 85 50 06 00 00    	jne    c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf49:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cf4c:	85 c0                	test   eax,eax
c001cf4e:	0f 84 45 06 00 00    	je     c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf54:	31 d2                	xor    edx,edx
c001cf56:	51                   	push   ecx
c001cf57:	52                   	push   edx
c001cf58:	50                   	push   eax
c001cf59:	55                   	push   ebp
c001cf5a:	e8 a1 65 ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001cf5f:	83 c4 10             	add    esp,0x10
c001cf62:	85 c0                	test   eax,eax
c001cf64:	0f 85 2f 06 00 00    	jne    c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf6a:	83 ec 0c             	sub    esp,0xc
c001cf6d:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cf70:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cf74:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cf78:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf7c:	0f af c2             	imul   eax,edx
c001cf7f:	50                   	push   eax
c001cf80:	e8 bb 28 ff ff       	call   c000f840 <malloc>
c001cf85:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf93:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cf97:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf9b:	0f af c2             	imul   eax,edx
c001cf9e:	99                   	cdq    
c001cf9f:	52                   	push   edx
c001cfa0:	50                   	push   eax
c001cfa1:	55                   	push   ebp
c001cfa2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfa5:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cfa8:	83 c4 20             	add    esp,0x20
c001cfab:	85 c0                	test   eax,eax
c001cfad:	0f 84 e6 05 00 00    	je     c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfb3:	52                   	push   edx
c001cfb4:	31 d2                	xor    edx,edx
c001cfb6:	52                   	push   edx
c001cfb7:	50                   	push   eax
c001cfb8:	55                   	push   ebp
c001cfb9:	e8 42 65 ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001cfbe:	83 c4 10             	add    esp,0x10
c001cfc1:	85 c0                	test   eax,eax
c001cfc3:	0f 85 d0 05 00 00    	jne    c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfc9:	83 ec 0c             	sub    esp,0xc
c001cfcc:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cfd0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cfd4:	31 f6                	xor    esi,esi
c001cfd6:	0f af c2             	imul   eax,edx
c001cfd9:	50                   	push   eax
c001cfda:	e8 61 28 ff ff       	call   c000f840 <malloc>
c001cfdf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfe2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cfe6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfe9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfed:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cff1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cff5:	0f af c2             	imul   eax,edx
c001cff8:	99                   	cdq    
c001cff9:	52                   	push   edx
c001cffa:	50                   	push   eax
c001cffb:	55                   	push   ebp
c001cffc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfff:	83 c4 20             	add    esp,0x20
c001d002:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d006:	0f 86 8a 00 00 00    	jbe    c001d096 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d00c:	0f b7 de             	movzx  ebx,si
c001d00f:	c1 e3 05             	shl    ebx,0x5
c001d012:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d016:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d019:	75 75                	jne    c001d090 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d01b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d01e:	31 d2                	xor    edx,edx
c001d020:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d024:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d02b:	50                   	push   eax
c001d02c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d02f:	52                   	push   edx
c001d030:	50                   	push   eax
c001d031:	55                   	push   ebp
c001d032:	e8 c9 64 ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001d037:	83 c4 10             	add    esp,0x10
c001d03a:	85 c0                	test   eax,eax
c001d03c:	0f 85 57 05 00 00    	jne    c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d042:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d049:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d04c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d050:	31 d2                	xor    edx,edx
c001d052:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d056:	83 ec 0c             	sub    esp,0xc
c001d059:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d05d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d064:	50                   	push   eax
c001d065:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d06d:	52                   	push   edx
c001d06e:	50                   	push   eax
c001d06f:	55                   	push   ebp
c001d070:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d073:	83 c4 1c             	add    esp,0x1c
c001d076:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d079:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d07c:	50                   	push   eax
c001d07d:	6a 00                	push   0x0
c001d07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d083:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d087:	50                   	push   eax
c001d088:	e8 eb 36 fe ff       	call   c0000778 <memset>
c001d08d:	83 c4 10             	add    esp,0x10
c001d090:	46                   	inc    esi
c001d091:	e9 6c ff ff ff       	jmp    c001d002 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d096:	53                   	push   ebx
c001d097:	31 db                	xor    ebx,ebx
c001d099:	68 00 01 00 00       	push   0x100
c001d09e:	6a 00                	push   0x0
c001d0a0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d0a4:	50                   	push   eax
c001d0a5:	e8 ce 36 fe ff       	call   c0000778 <memset>
c001d0aa:	83 c4 0c             	add    esp,0xc
c001d0ad:	68 00 01 00 00       	push   0x100
c001d0b2:	6a 00                	push   0x0
c001d0b4:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d0bb:	50                   	push   eax
c001d0bc:	e8 b7 36 fe ff       	call   c0000778 <memset>
c001d0c1:	83 c4 10             	add    esp,0x10
c001d0c4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d0cc:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d0d4:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d0dc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d0e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d0ec:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d0f0:	0f 86 30 01 00 00    	jbe    c001d226 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d0f6:	0f b7 f3             	movzx  esi,bx
c001d0f9:	6b f6 28             	imul   esi,esi,0x28
c001d0fc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d100:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d103:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d107:	52                   	push   edx
c001d108:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d10c:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d110:	8b 06                	mov    eax,DWORD PTR [esi]
c001d112:	6b d2 28             	imul   edx,edx,0x28
c001d115:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d119:	31 d2                	xor    edx,edx
c001d11b:	52                   	push   edx
c001d11c:	50                   	push   eax
c001d11d:	55                   	push   ebp
c001d11e:	e8 dd 63 ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001d123:	83 c4 0c             	add    esp,0xc
c001d126:	6a 20                	push   0x20
c001d128:	6a 00                	push   0x0
c001d12a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d131:	51                   	push   ecx
c001d132:	e8 41 36 fe ff       	call   c0000778 <memset>
c001d137:	59                   	pop    ecx
c001d138:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d13b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d13f:	52                   	push   edx
c001d140:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d147:	51                   	push   ecx
c001d148:	6a 00                	push   0x0
c001d14a:	6a 1f                	push   0x1f
c001d14c:	55                   	push   ebp
c001d14d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d150:	83 c4 1c             	add    esp,0x1c
c001d153:	6a 09                	push   0x9
c001d155:	68 4c bf 02 c0       	push   0xc002bf4c
c001d15a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d161:	51                   	push   ecx
c001d162:	e8 d9 34 fe ff       	call   c0000640 <memcmp>
c001d167:	83 c4 10             	add    esp,0x10
c001d16a:	85 c0                	test   eax,eax
c001d16c:	75 21                	jne    c001d18f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d16e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d172:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d176:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d17a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d17e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d181:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d188:	89 d0                	mov    eax,edx
c001d18a:	40                   	inc    eax
c001d18b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d18f:	50                   	push   eax
c001d190:	6a 09                	push   0x9
c001d192:	68 56 bf 02 c0       	push   0xc002bf56
c001d197:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d19e:	50                   	push   eax
c001d19f:	e8 9c 34 fe ff       	call   c0000640 <memcmp>
c001d1a4:	83 c4 10             	add    esp,0x10
c001d1a7:	85 c0                	test   eax,eax
c001d1a9:	75 21                	jne    c001d1cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d1ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1b3:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1b7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1bb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1be:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d1c5:	89 d0                	mov    eax,edx
c001d1c7:	40                   	inc    eax
c001d1c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1cc:	50                   	push   eax
c001d1cd:	50                   	push   eax
c001d1ce:	68 22 bf 02 c0       	push   0xc002bf22
c001d1d3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1da:	50                   	push   eax
c001d1db:	e8 e0 36 fe ff       	call   c00008c0 <strcmp>
c001d1e0:	83 c4 10             	add    esp,0x10
c001d1e3:	85 c0                	test   eax,eax
c001d1e5:	75 0f                	jne    c001d1f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d1e7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d1f6:	50                   	push   eax
c001d1f7:	50                   	push   eax
c001d1f8:	68 2a bf 02 c0       	push   0xc002bf2a
c001d1fd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d204:	50                   	push   eax
c001d205:	e8 b6 36 fe ff       	call   c00008c0 <strcmp>
c001d20a:	83 c4 10             	add    esp,0x10
c001d20d:	85 c0                	test   eax,eax
c001d20f:	75 0f                	jne    c001d220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d211:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d214:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d218:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d21c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d220:	43                   	inc    ebx
c001d221:	e9 c6 fe ff ff       	jmp    c001d0ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d226:	31 d2                	xor    edx,edx
c001d228:	50                   	push   eax
c001d229:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d22d:	52                   	push   edx
c001d22e:	50                   	push   eax
c001d22f:	55                   	push   ebp
c001d230:	e8 cb 62 ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001d235:	58                   	pop    eax
c001d236:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d23a:	e8 01 26 ff ff       	call   c000f840 <malloc>
c001d23f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d242:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d246:	31 d2                	xor    edx,edx
c001d248:	58                   	pop    eax
c001d249:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d24d:	53                   	push   ebx
c001d24e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d252:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d256:	52                   	push   edx
c001d257:	50                   	push   eax
c001d258:	55                   	push   ebp
c001d259:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d25c:	83 c4 14             	add    esp,0x14
c001d25f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d263:	e8 d8 25 ff ff       	call   c000f840 <malloc>
c001d268:	31 d2                	xor    edx,edx
c001d26a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d26e:	83 c4 0c             	add    esp,0xc
c001d271:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d275:	52                   	push   edx
c001d276:	50                   	push   eax
c001d277:	55                   	push   ebp
c001d278:	e8 83 62 ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001d27d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d280:	31 d2                	xor    edx,edx
c001d282:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d285:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d289:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d28d:	52                   	push   edx
c001d28e:	50                   	push   eax
c001d28f:	55                   	push   ebp
c001d290:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d293:	83 c4 20             	add    esp,0x20
c001d296:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d29e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d2a2:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d2a6:	0f 84 f1 02 00 00    	je     c001d59d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d2ac:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d2b3:	31 d2                	xor    edx,edx
c001d2b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2b9:	c1 e8 03             	shr    eax,0x3
c001d2bc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d2c0:	51                   	push   ecx
c001d2c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2c5:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d2c9:	52                   	push   edx
c001d2ca:	50                   	push   eax
c001d2cb:	55                   	push   ebp
c001d2cc:	e8 2f 62 ff ff       	call   c0013500 <File::seek(unsigned long long)>
c001d2d1:	5b                   	pop    ebx
c001d2d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2d6:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d2dd:	e8 5e 25 ff ff       	call   c000f840 <malloc>
c001d2e2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d2e9:	31 d2                	xor    edx,edx
c001d2eb:	5e                   	pop    esi
c001d2ec:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d2f0:	50                   	push   eax
c001d2f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2f9:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d300:	52                   	push   edx
c001d301:	50                   	push   eax
c001d302:	55                   	push   ebp
c001d303:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d306:	83 c4 20             	add    esp,0x20
c001d309:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d311:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d315:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d319:	0f 8d 62 02 00 00    	jge    c001d581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d31f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d323:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d327:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d32c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d32f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d333:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d337:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d33b:	89 d8                	mov    eax,ebx
c001d33d:	c1 e8 08             	shr    eax,0x8
c001d340:	89 c6                	mov    esi,eax
c001d342:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d346:	c1 e6 04             	shl    esi,0x4
c001d349:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d34d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d350:	85 d2                	test   edx,edx
c001d352:	0f 85 bf 00 00 00    	jne    c001d417 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d358:	83 ec 0c             	sub    esp,0xc
c001d35b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d35f:	03 06                	add    eax,DWORD PTR [esi]
c001d361:	50                   	push   eax
c001d362:	e8 4b f8 ff ff       	call   c001cbb2 <Thr::getAddressOfKernelSymbol(char const*)>
c001d367:	83 c4 10             	add    esp,0x10
c001d36a:	89 c2                	mov    edx,eax
c001d36c:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d371:	85 c0                	test   eax,eax
c001d373:	0f 85 9e 00 00 00    	jne    c001d417 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d379:	83 ec 0c             	sub    esp,0xc
c001d37c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d380:	03 06                	add    eax,DWORD PTR [esi]
c001d382:	50                   	push   eax
c001d383:	e8 6d 11 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d388:	83 c4 10             	add    esp,0x10
c001d38b:	89 c2                	mov    edx,eax
c001d38d:	85 c0                	test   eax,eax
c001d38f:	0f 85 82 00 00 00    	jne    c001d417 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d395:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d399:	50                   	push   eax
c001d39a:	50                   	push   eax
c001d39b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d39f:	03 06                	add    eax,DWORD PTR [esi]
c001d3a1:	50                   	push   eax
c001d3a2:	68 60 bf 02 c0       	push   0xc002bf60
c001d3a7:	e8 da 5a ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001d3ac:	58                   	pop    eax
c001d3ad:	5a                   	pop    edx
c001d3ae:	68 7a bf 02 c0       	push   0xc002bf7a
c001d3b3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3ba:	50                   	push   eax
c001d3bb:	e8 74 34 fe ff       	call   c0000834 <strcpy>
c001d3c0:	59                   	pop    ecx
c001d3c1:	58                   	pop    eax
c001d3c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3c6:	03 06                	add    eax,DWORD PTR [esi]
c001d3c8:	50                   	push   eax
c001d3c9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3d0:	50                   	push   eax
c001d3d1:	e8 9e 35 fe ff       	call   c0000974 <strcat>
c001d3d6:	58                   	pop    eax
c001d3d7:	5a                   	pop    edx
c001d3d8:	68 10 c0 02 c0       	push   0xc002c010
c001d3dd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3e4:	50                   	push   eax
c001d3e5:	e8 8a 35 fe ff       	call   c0000974 <strcat>
c001d3ea:	83 c4 10             	add    esp,0x10
c001d3ed:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3f2:	0f 84 43 01 00 00    	je     c001d53b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d3f8:	83 ec 0c             	sub    esp,0xc
c001d3fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d402:	50                   	push   eax
c001d403:	e8 23 d1 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001d408:	83 c4 10             	add    esp,0x10
c001d40b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d40f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d413:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d417:	80 fb 01             	cmp    bl,0x1
c001d41a:	75 7d                	jne    c001d499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d41c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d423:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d427:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d42b:	01 ce                	add    esi,ecx
c001d42d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d433:	0f 94 c0             	sete   al
c001d436:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d43c:	0f 94 c3             	sete   bl
c001d43f:	09 c3                	or     ebx,eax
c001d441:	8b 06                	mov    eax,DWORD PTR [esi]
c001d443:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d448:	74 36                	je     c001d480 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d44a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d44d:	84 db                	test   bl,bl
c001d44f:	75 0a                	jne    c001d45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d451:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d455:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d459:	76 37                	jbe    c001d492 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d45b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d45f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d464:	0f 84 d1 00 00 00    	je     c001d53b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d46a:	83 ec 0c             	sub    esp,0xc
c001d46d:	68 91 bf 02 c0       	push   0xc002bf91
c001d472:	e8 b4 d0 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001d477:	83 c4 10             	add    esp,0x10
c001d47a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d47e:	eb 12                	jmp    c001d492 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d480:	01 c1                	add    ecx,eax
c001d482:	84 db                	test   bl,bl
c001d484:	75 0c                	jne    c001d492 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d486:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d48a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d48e:	77 02                	ja     c001d492 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d490:	01 d1                	add    ecx,edx
c001d492:	89 0e                	mov    DWORD PTR [esi],ecx
c001d494:	e9 df 00 00 00       	jmp    c001d578 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d499:	80 fb 02             	cmp    bl,0x2
c001d49c:	75 71                	jne    c001d50f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d49e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d4a5:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d4a9:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d4ad:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d4b3:	74 15                	je     c001d4ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d4b5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d4bb:	74 0d                	je     c001d4ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d4bd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4c1:	83 e8 04             	sub    eax,0x4
c001d4c4:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4c8:	76 1f                	jbe    c001d4e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d4ca:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d4ce:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4d3:	74 66                	je     c001d53b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4d5:	83 ec 0c             	sub    esp,0xc
c001d4d8:	68 ad bf 02 c0       	push   0xc002bfad
c001d4dd:	e8 49 d0 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001d4e2:	83 c4 10             	add    esp,0x10
c001d4e5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d4e9:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4eb:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d4f0:	74 13                	je     c001d505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d4f2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d4f6:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d4fd:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d501:	01 c8                	add    eax,ecx
c001d503:	eb 04                	jmp    c001d509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d505:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d509:	01 c2                	add    edx,eax
c001d50b:	89 16                	mov    DWORD PTR [esi],edx
c001d50d:	eb 69                	jmp    c001d578 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d50f:	0f b6 db             	movzx  ebx,bl
c001d512:	50                   	push   eax
c001d513:	50                   	push   eax
c001d514:	53                   	push   ebx
c001d515:	68 c9 bf 02 c0       	push   0xc002bfc9
c001d51a:	e8 67 59 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001d51f:	83 c4 10             	add    esp,0x10
c001d522:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d527:	74 12                	je     c001d53b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d529:	83 ec 0c             	sub    esp,0xc
c001d52c:	68 d4 bf 02 c0       	push   0xc002bfd4
c001d531:	e8 f5 cf ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001d536:	83 c4 10             	add    esp,0x10
c001d539:	eb 3d                	jmp    c001d578 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d53b:	83 ec 0c             	sub    esp,0xc
c001d53e:	55                   	push   ebp
c001d53f:	e8 5c 5f ff ff       	call   c00134a0 <File::close()>
c001d544:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d547:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d54a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d54d:	59                   	pop    ecx
c001d54e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d552:	e8 f9 22 ff ff       	call   c000f850 <free>
c001d557:	5b                   	pop    ebx
c001d558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d55c:	e8 ef 22 ff ff       	call   c000f850 <free>
c001d561:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d564:	e8 e7 22 ff ff       	call   c000f850 <free>
c001d569:	5e                   	pop    esi
c001d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d56e:	e8 dd 22 ff ff       	call   c000f850 <free>
c001d573:	83 c4 10             	add    esp,0x10
c001d576:	eb 21                	jmp    c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d578:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d57c:	e9 90 fd ff ff       	jmp    c001d311 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d581:	83 ec 0c             	sub    esp,0xc
c001d584:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d588:	e8 c3 22 ff ff       	call   c000f850 <free>
c001d58d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d591:	83 c4 10             	add    esp,0x10
c001d594:	e9 05 fd ff ff       	jmp    c001d29e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d599:	31 c0                	xor    eax,eax
c001d59b:	eb 33                	jmp    c001d5d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d59d:	83 ec 0c             	sub    esp,0xc
c001d5a0:	55                   	push   ebp
c001d5a1:	e8 fa 5e ff ff       	call   c00134a0 <File::close()>
c001d5a6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5af:	58                   	pop    eax
c001d5b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5b4:	e8 97 22 ff ff       	call   c000f850 <free>
c001d5b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5bc:	e8 8f 22 ff ff       	call   c000f850 <free>
c001d5c1:	5a                   	pop    edx
c001d5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5c6:	e8 85 22 ff ff       	call   c000f850 <free>
c001d5cb:	83 c4 10             	add    esp,0x10
c001d5ce:	b0 01                	mov    al,0x1
c001d5d0:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d5d6:	5b                   	pop    ebx
c001d5d7:	5e                   	pop    esi
c001d5d8:	5f                   	pop    edi
c001d5d9:	5d                   	pop    ebp
c001d5da:	c3                   	ret    

c001d5db <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d5db:	56                   	push   esi
c001d5dc:	31 d2                	xor    edx,edx
c001d5de:	53                   	push   ebx
c001d5df:	8b 1d 60 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031060
c001d5e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d5e9:	39 d3                	cmp    ebx,edx
c001d5eb:	7e 1b                	jle    c001d608 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d5ed:	8b 04 95 80 12 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffced80]
c001d5f4:	39 c8                	cmp    eax,ecx
c001d5f6:	77 0d                	ja     c001d605 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d5f8:	8b 34 95 80 10 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcef80]
c001d5ff:	01 c6                	add    esi,eax
c001d601:	39 ce                	cmp    esi,ecx
c001d603:	77 05                	ja     c001d60a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d605:	42                   	inc    edx
c001d606:	eb e1                	jmp    c001d5e9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d608:	31 c0                	xor    eax,eax
c001d60a:	5b                   	pop    ebx
c001d60b:	5e                   	pop    esi
c001d60c:	c3                   	ret    

c001d60d <Thr::getDriverNameFromAddress(unsigned long)>:
c001d60d:	53                   	push   ebx
c001d60e:	31 c0                	xor    eax,eax
c001d610:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d614:	8b 1d 60 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031060
c001d61a:	39 c3                	cmp    ebx,eax
c001d61c:	7e 22                	jle    c001d640 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d61e:	8b 14 85 80 12 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffced80]
c001d625:	39 ca                	cmp    edx,ecx
c001d627:	77 14                	ja     c001d63d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d629:	03 14 85 80 10 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcef80]
c001d630:	39 ca                	cmp    edx,ecx
c001d632:	76 09                	jbe    c001d63d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d634:	8b 04 85 80 14 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceb80]
c001d63b:	eb 05                	jmp    c001d642 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d63d:	40                   	inc    eax
c001d63e:	eb da                	jmp    c001d61a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d640:	31 c0                	xor    eax,eax
c001d642:	5b                   	pop    ebx
c001d643:	c3                   	ret    

c001d644 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d644:	53                   	push   ebx
c001d645:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d649:	53                   	push   ebx
c001d64a:	e8 8c ff ff ff       	call   c001d5db <Thr::getDriverBaseFromAddress(unsigned long)>
c001d64f:	5a                   	pop    edx
c001d650:	31 d2                	xor    edx,edx
c001d652:	85 c0                	test   eax,eax
c001d654:	74 04                	je     c001d65a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d656:	89 da                	mov    edx,ebx
c001d658:	29 c2                	sub    edx,eax
c001d65a:	89 d0                	mov    eax,edx
c001d65c:	5b                   	pop    ebx
c001d65d:	c3                   	ret    

c001d65e <Thr::loadDLL(char const*, bool)>:
c001d65e:	55                   	push   ebp
c001d65f:	57                   	push   edi
c001d660:	56                   	push   esi
c001d661:	53                   	push   ebx
c001d662:	81 ec 34 01 00 00    	sub    esp,0x134
c001d668:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d66f:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d676:	56                   	push   esi
c001d677:	68 ec bf 02 c0       	push   0xc002bfec
c001d67c:	e8 05 58 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001d681:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d688:	e8 b3 21 ff ff       	call   c000f840 <malloc>
c001d68d:	83 c4 0c             	add    esp,0xc
c001d690:	89 c3                	mov    ebx,eax
c001d692:	ff 35 54 18 03 c0    	push   DWORD PTR ds:0xc0031854
c001d698:	56                   	push   esi
c001d699:	50                   	push   eax
c001d69a:	e8 3f 5d ff ff       	call   c00133de <File::File(char const*, Process*)>
c001d69f:	83 c4 10             	add    esp,0x10
c001d6a2:	85 db                	test   ebx,ebx
c001d6a4:	75 3c                	jne    c001d6e2 <Thr::loadDLL(char const*, bool)+0x84>
c001d6a6:	89 e8                	mov    eax,ebp
c001d6a8:	84 c0                	test   al,al
c001d6aa:	0f 84 f0 01 00 00    	je     c001d8a0 <Thr::loadDLL(char const*, bool)+0x242>
c001d6b0:	50                   	push   eax
c001d6b1:	50                   	push   eax
c001d6b2:	68 fd bf 02 c0       	push   0xc002bffd
c001d6b7:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d6bb:	57                   	push   edi
c001d6bc:	e8 73 31 fe ff       	call   c0000834 <strcpy>
c001d6c1:	58                   	pop    eax
c001d6c2:	5a                   	pop    edx
c001d6c3:	56                   	push   esi
c001d6c4:	57                   	push   edi
c001d6c5:	e8 aa 32 fe ff       	call   c0000974 <strcat>
c001d6ca:	59                   	pop    ecx
c001d6cb:	58                   	pop    eax
c001d6cc:	68 10 c0 02 c0       	push   0xc002c010
c001d6d1:	57                   	push   edi
c001d6d2:	e8 9d 32 fe ff       	call   c0000974 <strcat>
c001d6d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6da:	e8 4c ce ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001d6df:	83 c4 10             	add    esp,0x10
c001d6e2:	50                   	push   eax
c001d6e3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d6e7:	50                   	push   eax
c001d6e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d6ec:	50                   	push   eax
c001d6ed:	53                   	push   ebx
c001d6ee:	e8 fb 5f ff ff       	call   c00136ee <File::stat(unsigned long long*, bool*)>
c001d6f3:	83 c4 10             	add    esp,0x10
c001d6f6:	85 db                	test   ebx,ebx
c001d6f8:	74 0c                	je     c001d706 <Thr::loadDLL(char const*, bool)+0xa8>
c001d6fa:	83 ec 0c             	sub    esp,0xc
c001d6fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d6ff:	53                   	push   ebx
c001d700:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d703:	83 c4 10             	add    esp,0x10
c001d706:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d70b:	75 0a                	jne    c001d717 <Thr::loadDLL(char const*, bool)+0xb9>
c001d70d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d711:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d715:	75 3c                	jne    c001d753 <Thr::loadDLL(char const*, bool)+0xf5>
c001d717:	89 e8                	mov    eax,ebp
c001d719:	84 c0                	test   al,al
c001d71b:	0f 84 67 01 00 00    	je     c001d888 <Thr::loadDLL(char const*, bool)+0x22a>
c001d721:	50                   	push   eax
c001d722:	50                   	push   eax
c001d723:	68 fd bf 02 c0       	push   0xc002bffd
c001d728:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d72c:	53                   	push   ebx
c001d72d:	e8 02 31 fe ff       	call   c0000834 <strcpy>
c001d732:	58                   	pop    eax
c001d733:	5a                   	pop    edx
c001d734:	56                   	push   esi
c001d735:	53                   	push   ebx
c001d736:	e8 39 32 fe ff       	call   c0000974 <strcat>
c001d73b:	59                   	pop    ecx
c001d73c:	5f                   	pop    edi
c001d73d:	68 10 c0 02 c0       	push   0xc002c010
c001d742:	53                   	push   ebx
c001d743:	e8 2c 32 fe ff       	call   c0000974 <strcat>
c001d748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d74b:	e8 db cd ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001d750:	83 c4 10             	add    esp,0x10
c001d753:	e8 9b 47 ff ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c001d758:	51                   	push   ecx
c001d759:	68 03 08 00 00       	push   0x803
c001d75e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d762:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d766:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d76c:	83 d3 00             	adc    ebx,0x0
c001d76f:	89 ca                	mov    edx,ecx
c001d771:	89 d1                	mov    ecx,edx
c001d773:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d777:	51                   	push   ecx
c001d778:	50                   	push   eax
c001d779:	e8 98 4c ff ff       	call   c0012416 <VAS::allocatePages(int, int)>
c001d77e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d782:	89 c3                	mov    ebx,eax
c001d784:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d788:	05 ff 0f 00 00       	add    eax,0xfff
c001d78d:	83 d2 00             	adc    edx,0x0
c001d790:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d794:	c1 ea 0c             	shr    edx,0xc
c001d797:	52                   	push   edx
c001d798:	50                   	push   eax
c001d799:	53                   	push   ebx
c001d79a:	68 12 c0 02 c0       	push   0xc002c012
c001d79f:	e8 e2 56 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001d7a4:	83 c4 14             	add    esp,0x14
c001d7a7:	56                   	push   esi
c001d7a8:	e8 e7 2f fe ff       	call   c0000794 <strlen>
c001d7ad:	8b 3d 60 10 03 c0    	mov    edi,DWORD PTR ds:0xc0031060
c001d7b3:	40                   	inc    eax
c001d7b4:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7b7:	e8 84 20 ff ff       	call   c000f840 <malloc>
c001d7bc:	89 04 bd 80 14 03 c0 	mov    DWORD PTR [edi*4-0x3ffceb80],eax
c001d7c3:	5f                   	pop    edi
c001d7c4:	58                   	pop    eax
c001d7c5:	a1 60 10 03 c0       	mov    eax,ds:0xc0031060
c001d7ca:	56                   	push   esi
c001d7cb:	ff 34 85 80 14 03 c0 	push   DWORD PTR [eax*4-0x3ffceb80]
c001d7d2:	e8 5d 30 fe ff       	call   c0000834 <strcpy>
c001d7d7:	a1 60 10 03 c0       	mov    eax,ds:0xc0031060
c001d7dc:	8d 50 01             	lea    edx,[eax+0x1]
c001d7df:	89 1c 85 80 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffced80],ebx
c001d7e6:	89 15 60 10 03 c0    	mov    DWORD PTR ds:0xc0031060,edx
c001d7ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d7f0:	83 c4 0c             	add    esp,0xc
c001d7f3:	89 14 85 80 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef80],edx
c001d7fa:	6a 01                	push   0x1
c001d7fc:	53                   	push   ebx
c001d7fd:	56                   	push   esi
c001d7fe:	e8 bc f6 ff ff       	call   c001cebf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d803:	83 c4 10             	add    esp,0x10
c001d806:	89 c7                	mov    edi,eax
c001d808:	84 c0                	test   al,al
c001d80a:	0f 85 8c 00 00 00    	jne    c001d89c <Thr::loadDLL(char const*, bool)+0x23e>
c001d810:	89 e8                	mov    eax,ebp
c001d812:	84 c0                	test   al,al
c001d814:	74 76                	je     c001d88c <Thr::loadDLL(char const*, bool)+0x22e>
c001d816:	83 ec 0c             	sub    esp,0xc
c001d819:	68 36 c0 02 c0       	push   0xc002c036
c001d81e:	e8 08 cd ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001d823:	83 c4 10             	add    esp,0x10
c001d826:	eb 64                	jmp    c001d88c <Thr::loadDLL(char const*, bool)+0x22e>
c001d828:	e8 c6 46 ff ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c001d82d:	89 f5                	mov    ebp,esi
c001d82f:	c1 e5 0c             	shl    ebp,0xc
c001d832:	52                   	push   edx
c001d833:	01 dd                	add    ebp,ebx
c001d835:	52                   	push   edx
c001d836:	55                   	push   ebp
c001d837:	50                   	push   eax
c001d838:	e8 53 47 ff ff       	call   c0011f90 <VAS::getPageTableEntry(unsigned long)>
c001d83d:	83 c4 10             	add    esp,0x10
c001d840:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d843:	75 0c                	jne    c001d851 <Thr::loadDLL(char const*, bool)+0x1f3>
c001d845:	83 ec 0c             	sub    esp,0xc
c001d848:	55                   	push   ebp
c001d849:	e8 05 26 ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001d84e:	83 c4 10             	add    esp,0x10
c001d851:	46                   	inc    esi
c001d852:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d856:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d85a:	05 ff 0f 00 00       	add    eax,0xfff
c001d85f:	83 d2 00             	adc    edx,0x0
c001d862:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d866:	c1 ea 0c             	shr    edx,0xc
c001d869:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d86d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d871:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d875:	ba 00 00 00 00       	mov    edx,0x0
c001d87a:	89 d0                	mov    eax,edx
c001d87c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d880:	72 a6                	jb     c001d828 <Thr::loadDLL(char const*, bool)+0x1ca>
c001d882:	89 f8                	mov    eax,edi
c001d884:	84 c0                	test   al,al
c001d886:	75 18                	jne    c001d8a0 <Thr::loadDLL(char const*, bool)+0x242>
c001d888:	31 db                	xor    ebx,ebx
c001d88a:	eb 14                	jmp    c001d8a0 <Thr::loadDLL(char const*, bool)+0x242>
c001d88c:	83 ec 0c             	sub    esp,0xc
c001d88f:	68 55 c0 02 c0       	push   0xc002c055
c001d894:	e8 92 cc ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001d899:	83 c4 10             	add    esp,0x10
c001d89c:	31 f6                	xor    esi,esi
c001d89e:	eb b2                	jmp    c001d852 <Thr::loadDLL(char const*, bool)+0x1f4>
c001d8a0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d8a6:	89 d8                	mov    eax,ebx
c001d8a8:	5b                   	pop    ebx
c001d8a9:	5e                   	pop    esi
c001d8aa:	5f                   	pop    edi
c001d8ab:	5d                   	pop    ebp
c001d8ac:	c3                   	ret    

c001d8ad <Thr::executeDLL(unsigned long, void*)>:
c001d8ad:	56                   	push   esi
c001d8ae:	53                   	push   ebx
c001d8af:	52                   	push   edx
c001d8b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d8b8:	85 db                	test   ebx,ebx
c001d8ba:	75 10                	jne    c001d8cc <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d8bc:	83 ec 0c             	sub    esp,0xc
c001d8bf:	68 71 c0 02 c0       	push   0xc002c071
c001d8c4:	e8 62 cc ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001d8c9:	83 c4 10             	add    esp,0x10
c001d8cc:	50                   	push   eax
c001d8cd:	50                   	push   eax
c001d8ce:	53                   	push   ebx
c001d8cf:	68 9b c0 02 c0       	push   0xc002c09b
c001d8d4:	e8 ad 55 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001d8d9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d8dd:	89 d8                	mov    eax,ebx
c001d8df:	83 c4 14             	add    esp,0x14
c001d8e2:	5b                   	pop    ebx
c001d8e3:	5e                   	pop    esi
c001d8e4:	ff e0                	jmp    eax

c001d8e6 <changeTSS>:
c001d8e6:	83 ec 14             	sub    esp,0x14
c001d8e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d8ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d8f1:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d8f6:	c1 e2 15             	shl    edx,0x15
c001d8f9:	29 d0                	sub    eax,edx
c001d8fb:	50                   	push   eax
c001d8fc:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c001d901:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d907:	05 7c 11 00 00       	add    eax,0x117c
c001d90c:	50                   	push   eax
c001d90d:	e8 68 3b ff ff       	call   c001147a <TSS::setESP(unsigned long)>
c001d912:	83 c4 1c             	add    esp,0x1c
c001d915:	c3                   	ret    

c001d916 <Process::addArgs(char**)>:
c001d916:	57                   	push   edi
c001d917:	56                   	push   esi
c001d918:	53                   	push   ebx
c001d919:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d91d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d921:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d92b:	85 ff                	test   edi,edi
c001d92d:	74 3d                	je     c001d96c <Process::addArgs(char**)+0x56>
c001d92f:	8b 07                	mov    eax,DWORD PTR [edi]
c001d931:	85 c0                	test   eax,eax
c001d933:	74 37                	je     c001d96c <Process::addArgs(char**)+0x56>
c001d935:	31 db                	xor    ebx,ebx
c001d937:	83 ec 0c             	sub    esp,0xc
c001d93a:	50                   	push   eax
c001d93b:	e8 54 2e fe ff       	call   c0000794 <strlen>
c001d940:	40                   	inc    eax
c001d941:	89 04 24             	mov    DWORD PTR [esp],eax
c001d944:	e8 f7 1e ff ff       	call   c000f840 <malloc>
c001d949:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d950:	5a                   	pop    edx
c001d951:	59                   	pop    ecx
c001d952:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d955:	43                   	inc    ebx
c001d956:	50                   	push   eax
c001d957:	e8 d8 2e fe ff       	call   c0000834 <strcpy>
c001d95c:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d962:	83 c4 10             	add    esp,0x10
c001d965:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d968:	85 c0                	test   eax,eax
c001d96a:	75 cb                	jne    c001d937 <Process::addArgs(char**)+0x21>
c001d96c:	5b                   	pop    ebx
c001d96d:	5e                   	pop    esi
c001d96e:	5f                   	pop    edi
c001d96f:	c3                   	ret    

c001d970 <Process::Process(char const*, Process*, char**)>:
c001d970:	56                   	push   esi
c001d971:	53                   	push   ebx
c001d972:	83 ec 14             	sub    esp,0x14
c001d975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d979:	05 0c 02 00 00       	add    eax,0x20c
c001d97e:	bb 07 00 00 00       	mov    ebx,0x7
c001d983:	89 c6                	mov    esi,eax
c001d985:	85 db                	test   ebx,ebx
c001d987:	78 12                	js     c001d99b <Process::Process(char const*, Process*, char**)+0x2b>
c001d989:	83 ec 0c             	sub    esp,0xc
c001d98c:	56                   	push   esi
c001d98d:	e8 20 b2 00 00       	call   c0028bb2 <ThreadControlBlock::ThreadControlBlock()>
c001d992:	83 c4 10             	add    esp,0x10
c001d995:	83 c6 63             	add    esi,0x63
c001d998:	4b                   	dec    ebx
c001d999:	eb ea                	jmp    c001d985 <Process::Process(char const*, Process*, char**)+0x15>
c001d99b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d99f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d9a6:	83 ec 0c             	sub    esp,0xc
c001d9a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9ad:	e8 ca c9 ff ff       	call   c001a37c <Krnl::newProcessEnv(Process*)>
c001d9b2:	83 c4 10             	add    esp,0x10
c001d9b5:	89 c2                	mov    edx,eax
c001d9b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9bb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d9c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9c5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d9ce:	a1 70 d8 02 c0       	mov    eax,ds:0xc002d870
c001d9d3:	8d 50 01             	lea    edx,[eax+0x1]
c001d9d6:	89 15 70 d8 02 c0    	mov    DWORD PTR ds:0xc002d870,edx
c001d9dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d9e0:	89 02                	mov    DWORD PTR [edx],eax
c001d9e2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d9ea:	83 ec 0c             	sub    esp,0xc
c001d9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9f1:	e8 4a 1e ff ff       	call   c000f840 <malloc>
c001d9f6:	83 c4 10             	add    esp,0x10
c001d9f9:	89 c3                	mov    ebx,eax
c001d9fb:	83 ec 08             	sub    esp,0x8
c001d9fe:	6a 00                	push   0x0
c001da00:	53                   	push   ebx
c001da01:	e8 b8 4d ff ff       	call   c00127be <VAS::VAS(bool)>
c001da06:	83 c4 10             	add    esp,0x10
c001da09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da0d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001da13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da17:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001da21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da29:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001da2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da33:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da39:	85 c0                	test   eax,eax
c001da3b:	74 42                	je     c001da7f <Process::Process(char const*, Process*, char**)+0x10f>
c001da3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da41:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da47:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001da4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da51:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001da57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da5b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da61:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001da67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da6b:	05 0c 01 00 00       	add    eax,0x10c
c001da70:	83 ec 08             	sub    esp,0x8
c001da73:	52                   	push   edx
c001da74:	50                   	push   eax
c001da75:	e8 ba 2d fe ff       	call   c0000834 <strcpy>
c001da7a:	83 c4 10             	add    esp,0x10
c001da7d:	eb 63                	jmp    c001dae2 <Process::Process(char const*, Process*, char**)+0x172>
c001da7f:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001da87:	83 ec 0c             	sub    esp,0xc
c001da8a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001da8e:	e8 ad 1d ff ff       	call   c000f840 <malloc>
c001da93:	83 c4 10             	add    esp,0x10
c001da96:	89 c3                	mov    ebx,eax
c001da98:	83 ec 08             	sub    esp,0x8
c001da9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da9f:	53                   	push   ebx
c001daa0:	e8 d3 36 ff ff       	call   c0011178 <VgaText::VgaText(char const*)>
c001daa5:	83 c4 10             	add    esp,0x10
c001daa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daac:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dab2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dabc:	83 ec 0c             	sub    esp,0xc
c001dabf:	50                   	push   eax
c001dac0:	e8 a6 2a ff ff       	call   c001056b <addToTerminalCycle(VgaText*)>
c001dac5:	83 c4 10             	add    esp,0x10
c001dac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dacc:	05 0c 01 00 00       	add    eax,0x10c
c001dad1:	83 ec 08             	sub    esp,0x8
c001dad4:	68 ba c0 02 c0       	push   0xc002c0ba
c001dad9:	50                   	push   eax
c001dada:	e8 55 2d fe ff       	call   c0000834 <strcpy>
c001dadf:	83 c4 10             	add    esp,0x10
c001dae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae6:	83 c0 0c             	add    eax,0xc
c001dae9:	83 ec 08             	sub    esp,0x8
c001daec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daf0:	50                   	push   eax
c001daf1:	e8 3e 2d fe ff       	call   c0000834 <strcpy>
c001daf6:	83 c4 10             	add    esp,0x10
c001daf9:	83 ec 08             	sub    esp,0x8
c001dafc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001db00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db04:	e8 0d fe ff ff       	call   c001d916 <Process::addArgs(char**)>
c001db09:	83 c4 10             	add    esp,0x10
c001db0c:	83 ec 08             	sub    esp,0x8
c001db0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db17:	e8 6d ee ff ff       	call   c001c989 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001db1c:	83 c4 10             	add    esp,0x10
c001db1f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db23:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001db27:	83 f0 01             	xor    eax,0x1
c001db2a:	88 c2                	mov    dl,al
c001db2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db30:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001db36:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001db3b:	83 ec 08             	sub    esp,0x8
c001db3e:	50                   	push   eax
c001db3f:	68 b8 c1 02 c0       	push   0xc002c1b8
c001db44:	e8 3d 53 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001db49:	83 c4 10             	add    esp,0x10
c001db4c:	90                   	nop
c001db4d:	83 c4 14             	add    esp,0x14
c001db50:	5b                   	pop    ebx
c001db51:	5e                   	pop    esi
c001db52:	c3                   	ret    
c001db53:	90                   	nop

c001db54 <Process::Process(bool, char const*, Process*, char**)>:
c001db54:	56                   	push   esi
c001db55:	53                   	push   ebx
c001db56:	83 ec 24             	sub    esp,0x24
c001db59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001db5d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001db61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db65:	05 0c 02 00 00       	add    eax,0x20c
c001db6a:	bb 07 00 00 00       	mov    ebx,0x7
c001db6f:	89 c6                	mov    esi,eax
c001db71:	85 db                	test   ebx,ebx
c001db73:	78 12                	js     c001db87 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001db75:	83 ec 0c             	sub    esp,0xc
c001db78:	56                   	push   esi
c001db79:	e8 34 b0 00 00       	call   c0028bb2 <ThreadControlBlock::ThreadControlBlock()>
c001db7e:	83 c4 10             	add    esp,0x10
c001db81:	83 c6 63             	add    esi,0x63
c001db84:	4b                   	dec    ebx
c001db85:	eb ea                	jmp    c001db71 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001db87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db8b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db92:	83 ec 0c             	sub    esp,0xc
c001db95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db99:	e8 de c7 ff ff       	call   c001a37c <Krnl::newProcessEnv(Process*)>
c001db9e:	83 c4 10             	add    esp,0x10
c001dba1:	89 c2                	mov    edx,eax
c001dba3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dba7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dbad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbb1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dbba:	a1 70 d8 02 c0       	mov    eax,ds:0xc002d870
c001dbbf:	8d 50 01             	lea    edx,[eax+0x1]
c001dbc2:	89 15 70 d8 02 c0    	mov    DWORD PTR ds:0xc002d870,edx
c001dbc8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dbcc:	89 02                	mov    DWORD PTR [edx],eax
c001dbce:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dbd6:	83 ec 0c             	sub    esp,0xc
c001dbd9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dbdd:	e8 5e 1c ff ff       	call   c000f840 <malloc>
c001dbe2:	83 c4 10             	add    esp,0x10
c001dbe5:	89 c3                	mov    ebx,eax
c001dbe7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dbec:	83 ec 08             	sub    esp,0x8
c001dbef:	50                   	push   eax
c001dbf0:	53                   	push   ebx
c001dbf1:	e8 c8 4b ff ff       	call   c00127be <VAS::VAS(bool)>
c001dbf6:	83 c4 10             	add    esp,0x10
c001dbf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbfd:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dc03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc07:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dc11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc15:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc19:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dc1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc23:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc29:	85 c0                	test   eax,eax
c001dc2b:	74 42                	je     c001dc6f <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dc2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc31:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc37:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dc3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc41:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dc47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc4b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc51:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5b:	05 0c 01 00 00       	add    eax,0x10c
c001dc60:	83 ec 08             	sub    esp,0x8
c001dc63:	52                   	push   edx
c001dc64:	50                   	push   eax
c001dc65:	e8 ca 2b fe ff       	call   c0000834 <strcpy>
c001dc6a:	83 c4 10             	add    esp,0x10
c001dc6d:	eb 63                	jmp    c001dcd2 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dc6f:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dc77:	83 ec 0c             	sub    esp,0xc
c001dc7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dc7e:	e8 bd 1b ff ff       	call   c000f840 <malloc>
c001dc83:	83 c4 10             	add    esp,0x10
c001dc86:	89 c3                	mov    ebx,eax
c001dc88:	83 ec 08             	sub    esp,0x8
c001dc8b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc8f:	53                   	push   ebx
c001dc90:	e8 e3 34 ff ff       	call   c0011178 <VgaText::VgaText(char const*)>
c001dc95:	83 c4 10             	add    esp,0x10
c001dc98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc9c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dca2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dcac:	83 ec 0c             	sub    esp,0xc
c001dcaf:	50                   	push   eax
c001dcb0:	e8 b6 28 ff ff       	call   c001056b <addToTerminalCycle(VgaText*)>
c001dcb5:	83 c4 10             	add    esp,0x10
c001dcb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcbc:	05 0c 01 00 00       	add    eax,0x10c
c001dcc1:	83 ec 08             	sub    esp,0x8
c001dcc4:	68 ba c0 02 c0       	push   0xc002c0ba
c001dcc9:	50                   	push   eax
c001dcca:	e8 65 2b fe ff       	call   c0000834 <strcpy>
c001dccf:	83 c4 10             	add    esp,0x10
c001dcd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd6:	83 c0 0c             	add    eax,0xc
c001dcd9:	83 ec 08             	sub    esp,0x8
c001dcdc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dce0:	50                   	push   eax
c001dce1:	e8 4e 2b fe ff       	call   c0000834 <strcpy>
c001dce6:	83 c4 10             	add    esp,0x10
c001dce9:	83 ec 08             	sub    esp,0x8
c001dcec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dcf0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcf4:	e8 1d fc ff ff       	call   c001d916 <Process::addArgs(char**)>
c001dcf9:	83 c4 10             	add    esp,0x10
c001dcfc:	90                   	nop
c001dcfd:	83 c4 24             	add    esp,0x24
c001dd00:	5b                   	pop    ebx
c001dd01:	5e                   	pop    esi
c001dd02:	c3                   	ret    

c001dd03 <disableIRQs()>:
c001dd03:	fa                   	cli    
c001dd04:	ff 05 2c 18 03 c0    	inc    DWORD PTR ds:0xc003182c
c001dd0a:	c3                   	ret    

c001dd0b <getIRQNestingLevel()>:
c001dd0b:	a1 2c 18 03 c0       	mov    eax,ds:0xc003182c
c001dd10:	c3                   	ret    

c001dd11 <enableIRQs()>:
c001dd11:	a1 2c 18 03 c0       	mov    eax,ds:0xc003182c
c001dd16:	48                   	dec    eax
c001dd17:	a3 2c 18 03 c0       	mov    ds:0xc003182c,eax
c001dd1c:	75 01                	jne    c001dd1f <enableIRQs()+0xe>
c001dd1e:	fb                   	sti    
c001dd1f:	c3                   	ret    

c001dd20 <lockScheduler()>:
c001dd20:	eb e1                	jmp    c001dd03 <disableIRQs()>

c001dd22 <unlockScheduler()>:
c001dd22:	eb ed                	jmp    c001dd11 <enableIRQs()>

c001dd24 <userModeEntryPoint(void*)>:
c001dd24:	83 ec 0c             	sub    esp,0xc
c001dd27:	e8 f6 ff ff ff       	call   c001dd22 <unlockScheduler()>
c001dd2c:	fb                   	sti    
c001dd2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd35:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dd3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd3f:	83 c4 0c             	add    esp,0xc
c001dd42:	e9 e3 25 fe ff       	jmp    c000032a <goToUsermode>

c001dd47 <lockStuff()>:
c001dd47:	e8 b7 ff ff ff       	call   c001dd03 <disableIRQs()>
c001dd4c:	ff 05 28 18 03 c0    	inc    DWORD PTR ds:0xc0031828
c001dd52:	c3                   	ret    

c001dd53 <taskStartupFunction>:
c001dd53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd58:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dd5b:	c3                   	ret    

c001dd5c <updateTimeUsed()>:
c001dd5c:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c001dd61:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd67:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dd6e:	74 50                	je     c001ddc0 <updateTimeUsed()+0x64>
c001dd70:	57                   	push   edi
c001dd71:	56                   	push   esi
c001dd72:	53                   	push   ebx
c001dd73:	0f 31                	rdtsc  
c001dd75:	89 c1                	mov    ecx,eax
c001dd77:	a3 68 18 03 c0       	mov    ds:0xc0031868,eax
c001dd7c:	2b 0d 58 18 03 c0    	sub    ecx,DWORD PTR ds:0xc0031858
c001dd82:	89 d3                	mov    ebx,edx
c001dd84:	89 0d 60 18 03 c0    	mov    DWORD PTR ds:0xc0031860,ecx
c001dd8a:	1b 1d 5c 18 03 c0    	sbb    ebx,DWORD PTR ds:0xc003185c
c001dd90:	a3 58 18 03 c0       	mov    ds:0xc0031858,eax
c001dd95:	89 1d 64 18 03 c0    	mov    DWORD PTR ds:0xc0031864,ebx
c001dd9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dda0:	89 15 6c 18 03 c0    	mov    DWORD PTR ds:0xc003186c,edx
c001dda6:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dda9:	89 15 5c 18 03 c0    	mov    DWORD PTR ds:0xc003185c,edx
c001ddaf:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001ddb2:	01 f1                	add    ecx,esi
c001ddb4:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001ddb7:	11 fb                	adc    ebx,edi
c001ddb9:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001ddbc:	5b                   	pop    ebx
c001ddbd:	5e                   	pop    esi
c001ddbe:	5f                   	pop    edi
c001ddbf:	c3                   	ret    
c001ddc0:	c3                   	ret    

c001ddc1 <switchToThread(ThreadControlBlock*)>:
c001ddc1:	53                   	push   ebx
c001ddc2:	83 ec 08             	sub    esp,0x8
c001ddc5:	a1 28 18 03 c0       	mov    eax,ds:0xc0031828
c001ddca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ddce:	85 c0                	test   eax,eax
c001ddd0:	75 30                	jne    c001de02 <switchToThread(ThreadControlBlock*)+0x41>
c001ddd2:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001ddd5:	3c ff                	cmp    al,0xff
c001ddd7:	74 25                	je     c001ddfe <switchToThread(ThreadControlBlock*)+0x3d>
c001ddd9:	0f b6 d0             	movzx  edx,al
c001dddc:	b8 84 03 00 00       	mov    eax,0x384
c001dde1:	29 d0                	sub    eax,edx
c001dde3:	c1 e0 10             	shl    eax,0x10
c001dde6:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dde9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001ddec:	e8 6b ff ff ff       	call   c001dd5c <updateTimeUsed()>
c001ddf1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ddf5:	83 c4 08             	add    esp,0x8
c001ddf8:	5b                   	pop    ebx
c001ddf9:	e9 64 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001ddfe:	31 c0                	xor    eax,eax
c001de00:	eb e7                	jmp    c001dde9 <switchToThread(ThreadControlBlock*)+0x28>
c001de02:	c7 05 24 18 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031824,0x1
c001de0c:	83 c4 08             	add    esp,0x8
c001de0f:	5b                   	pop    ebx
c001de10:	c3                   	ret    
c001de11:	90                   	nop

c001de12 <Semaphore::Semaphore(int)>:
c001de12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de1a:	89 10                	mov    DWORD PTR [eax],edx
c001de1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de20:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de36:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de3d:	90                   	nop
c001de3e:	c3                   	ret    
c001de3f:	90                   	nop

c001de40 <Mutex::Mutex()>:
c001de40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de44:	6a 01                	push   0x1
c001de46:	50                   	push   eax
c001de47:	e8 c6 ff ff ff       	call   c001de12 <Semaphore::Semaphore(int)>
c001de4c:	83 c4 08             	add    esp,0x8
c001de4f:	90                   	nop
c001de50:	c3                   	ret    
c001de51:	90                   	nop

c001de52 <Process::createThread(void (*)(void*), void*, int)>:
c001de52:	55                   	push   ebp
c001de53:	31 c9                	xor    ecx,ecx
c001de55:	57                   	push   edi
c001de56:	56                   	push   esi
c001de57:	53                   	push   ebx
c001de58:	83 ec 1c             	sub    esp,0x1c
c001de5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de5f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001de66:	89 f2                	mov    edx,esi
c001de68:	0f b7 c2             	movzx  eax,dx
c001de6b:	83 e2 01             	and    edx,0x1
c001de6e:	74 14                	je     c001de84 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001de70:	d1 f8                	sar    eax,1
c001de72:	41                   	inc    ecx
c001de73:	89 c2                	mov    edx,eax
c001de75:	83 f9 10             	cmp    ecx,0x10
c001de78:	75 ee                	jne    c001de68 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001de7a:	83 c4 1c             	add    esp,0x1c
c001de7d:	31 c0                	xor    eax,eax
c001de7f:	5b                   	pop    ebx
c001de80:	5e                   	pop    esi
c001de81:	5f                   	pop    edi
c001de82:	5d                   	pop    ebp
c001de83:	c3                   	ret    
c001de84:	83 ec 08             	sub    esp,0x8
c001de87:	b8 01 00 00 00       	mov    eax,0x1
c001de8c:	d3 e0                	shl    eax,cl
c001de8e:	09 c6                	or     esi,eax
c001de90:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001de96:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001de9d:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001dea0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dea3:	01 ce                	add    esi,ecx
c001dea5:	89 f0                	mov    eax,esi
c001dea7:	c1 e0 05             	shl    eax,0x5
c001deaa:	01 c6                	add    esi,eax
c001deac:	8d 04 33             	lea    eax,[ebx+esi*1]
c001deaf:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001deb5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001debb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001debf:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dec5:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001decb:	89 ca                	mov    edx,ecx
c001decd:	f7 da                	neg    edx
c001decf:	c1 e2 15             	shl    edx,0x15
c001ded2:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001ded8:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dede:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dee2:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001deec:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001def2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001def6:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001defc:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001df06:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df10:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001df17:	50                   	push   eax
c001df18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df1c:	68 48 18 03 c0       	push   0xc0031848
c001df21:	e8 1a ab 00 00       	call   c0028a40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df26:	83 c4 10             	add    esp,0x10
c001df29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df2d:	83 c4 1c             	add    esp,0x1c
c001df30:	5b                   	pop    ebx
c001df31:	5e                   	pop    esi
c001df32:	5f                   	pop    edi
c001df33:	5d                   	pop    ebp
c001df34:	c3                   	ret    
c001df35:	90                   	nop

c001df36 <Process::createUserThread()>:
c001df36:	83 ec 0c             	sub    esp,0xc
c001df39:	68 80 00 00 00       	push   0x80
c001df3e:	6a 00                	push   0x0
c001df40:	68 24 dd 01 c0       	push   0xc001dd24
c001df45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df49:	e8 04 ff ff ff       	call   c001de52 <Process::createThread(void (*)(void*), void*, int)>
c001df4e:	83 c4 1c             	add    esp,0x1c
c001df51:	c3                   	ret    

c001df52 <setupMultitasking(void (*)())>:
c001df52:	56                   	push   esi
c001df53:	53                   	push   ebx
c001df54:	53                   	push   ebx
c001df55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df59:	eb 10                	jmp    c001df6b <setupMultitasking(void (*)())+0x19>
c001df5b:	83 ec 0c             	sub    esp,0xc
c001df5e:	68 48 18 03 c0       	push   0xc0031848
c001df63:	e8 2a aa 00 00       	call   c0028992 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df68:	83 c4 10             	add    esp,0x10
c001df6b:	83 ec 0c             	sub    esp,0xc
c001df6e:	68 48 18 03 c0       	push   0xc0031848
c001df73:	e8 fe a9 00 00       	call   c0028976 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df78:	83 c4 10             	add    esp,0x10
c001df7b:	84 c0                	test   al,al
c001df7d:	74 dc                	je     c001df5b <setupMultitasking(void (*)())+0x9>
c001df7f:	83 ec 0c             	sub    esp,0xc
c001df82:	68 3f 07 00 00       	push   0x73f
c001df87:	e8 b4 18 ff ff       	call   c000f840 <malloc>
c001df8c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df93:	89 c3                	mov    ebx,eax
c001df95:	6a 00                	push   0x0
c001df97:	68 be c0 02 c0       	push   0xc002c0be
c001df9c:	6a 01                	push   0x1
c001df9e:	50                   	push   eax
c001df9f:	e8 b0 fb ff ff       	call   c001db54 <Process::Process(bool, char const*, Process*, char**)>
c001dfa4:	83 c4 18             	add    esp,0x18
c001dfa7:	89 1d 54 18 03 c0    	mov    DWORD PTR ds:0xc0031854,ebx
c001dfad:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dfb3:	68 e0 c1 02 c0       	push   0xc002c1e0
c001dfb8:	e8 c9 4e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001dfbd:	58                   	pop    eax
c001dfbe:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dfc4:	e8 24 2d ff ff       	call   c0010ced <setActiveTerminal(VgaText*)>
c001dfc9:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dfd1:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfd7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dfda:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dfe4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dfea:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dff0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001dffa:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e004:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e00e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e014:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e01a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e024:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e02a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e034:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e03a:	5a                   	pop    edx
c001e03b:	59                   	pop    ecx
c001e03c:	68 ba c0 02 c0       	push   0xc002c0ba
c001e041:	50                   	push   eax
c001e042:	e8 ed 27 fe ff       	call   c0000834 <strcpy>
c001e047:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e04e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e052:	83 c4 14             	add    esp,0x14
c001e055:	5b                   	pop    ebx
c001e056:	5e                   	pop    esi
c001e057:	e9 f8 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e05c <schedule()>:
c001e05c:	a1 28 18 03 c0       	mov    eax,ds:0xc0031828
c001e061:	85 c0                	test   eax,eax
c001e063:	74 0b                	je     c001e070 <schedule()+0x14>
c001e065:	c7 05 24 18 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031824,0x1
c001e06f:	c3                   	ret    
c001e070:	53                   	push   ebx
c001e071:	83 ec 14             	sub    esp,0x14
c001e074:	68 48 18 03 c0       	push   0xc0031848
c001e079:	e8 f8 a8 00 00       	call   c0028976 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e07e:	83 c4 10             	add    esp,0x10
c001e081:	84 c0                	test   al,al
c001e083:	75 38                	jne    c001e0bd <schedule()+0x61>
c001e085:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e08a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e08d:	4a                   	dec    edx
c001e08e:	74 32                	je     c001e0c2 <schedule()+0x66>
c001e090:	83 ec 0c             	sub    esp,0xc
c001e093:	68 48 18 03 c0       	push   0xc0031848
c001e098:	e8 d1 a8 00 00       	call   c002896e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e09d:	c7 04 24 48 18 03 c0 	mov    DWORD PTR [esp],0xc0031848
c001e0a4:	89 c3                	mov    ebx,eax
c001e0a6:	e8 e7 a8 00 00       	call   c0028992 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0ab:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e0b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e0b5:	e8 07 fd ff ff       	call   c001ddc1 <switchToThread(ThreadControlBlock*)>
c001e0ba:	83 c4 10             	add    esp,0x10
c001e0bd:	83 c4 08             	add    esp,0x8
c001e0c0:	5b                   	pop    ebx
c001e0c1:	c3                   	ret    
c001e0c2:	83 ec 08             	sub    esp,0x8
c001e0c5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e0cc:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e0d2:	68 48 18 03 c0       	push   0xc0031848
c001e0d7:	e8 64 a9 00 00       	call   c0028a40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0dc:	83 c4 10             	add    esp,0x10
c001e0df:	eb af                	jmp    c001e090 <schedule()+0x34>

c001e0e1 <unlockStuff()>:
c001e0e1:	a1 28 18 03 c0       	mov    eax,ds:0xc0031828
c001e0e6:	48                   	dec    eax
c001e0e7:	a3 28 18 03 c0       	mov    ds:0xc0031828,eax
c001e0ec:	75 09                	jne    c001e0f7 <unlockStuff()+0x16>
c001e0ee:	a1 24 18 03 c0       	mov    eax,ds:0xc0031824
c001e0f3:	85 c0                	test   eax,eax
c001e0f5:	75 05                	jne    c001e0fc <unlockStuff()+0x1b>
c001e0f7:	e9 15 fc ff ff       	jmp    c001dd11 <enableIRQs()>
c001e0fc:	83 ec 0c             	sub    esp,0xc
c001e0ff:	c7 05 24 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031824,0x0
c001e109:	e8 4e ff ff ff       	call   c001e05c <schedule()>
c001e10e:	83 c4 0c             	add    esp,0xc
c001e111:	e9 fb fb ff ff       	jmp    c001dd11 <enableIRQs()>

c001e116 <Semaphore::tryAcquire()>:
c001e116:	83 ec 0c             	sub    esp,0xc
c001e119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e11d:	e8 25 fc ff ff       	call   c001dd47 <lockStuff()>
c001e122:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e125:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e127:	7c 0b                	jl     c001e134 <Semaphore::tryAcquire()+0x1e>
c001e129:	e8 b3 ff ff ff       	call   c001e0e1 <unlockStuff()>
c001e12e:	31 c0                	xor    eax,eax
c001e130:	83 c4 0c             	add    esp,0xc
c001e133:	c3                   	ret    
c001e134:	42                   	inc    edx
c001e135:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e138:	e8 a4 ff ff ff       	call   c001e0e1 <unlockStuff()>
c001e13d:	b0 01                	mov    al,0x1
c001e13f:	83 c4 0c             	add    esp,0xc
c001e142:	c3                   	ret    
c001e143:	90                   	nop

c001e144 <Semaphore::assertLocked(char const*)>:
c001e144:	83 ec 0c             	sub    esp,0xc
c001e147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e14b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e14f:	e8 f3 fb ff ff       	call   c001dd47 <lockStuff()>
c001e154:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e156:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e159:	7c 05                	jl     c001e160 <Semaphore::assertLocked(char const*)+0x1c>
c001e15b:	83 c4 0c             	add    esp,0xc
c001e15e:	eb 81                	jmp    c001e0e1 <unlockStuff()>
c001e160:	83 ec 0c             	sub    esp,0xc
c001e163:	52                   	push   edx
c001e164:	e8 c2 c3 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001e169:	83 c4 10             	add    esp,0x10
c001e16c:	83 c4 0c             	add    esp,0xc
c001e16f:	e9 6d ff ff ff       	jmp    c001e0e1 <unlockStuff()>

c001e174 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e174:	83 ec 0c             	sub    esp,0xc
c001e177:	e8 8f fb ff ff       	call   c001dd0b <getIRQNestingLevel()>
c001e17c:	83 ec 08             	sub    esp,0x8
c001e17f:	50                   	push   eax
c001e180:	68 14 c2 02 c0       	push   0xc002c214
c001e185:	e8 fc 4c ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e18a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e18e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e193:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e196:	e8 c1 fe ff ff       	call   c001e05c <schedule()>
c001e19b:	e8 82 fb ff ff       	call   c001dd22 <unlockScheduler()>
c001e1a0:	e8 66 fb ff ff       	call   c001dd0b <getIRQNestingLevel()>
c001e1a5:	5a                   	pop    edx
c001e1a6:	59                   	pop    ecx
c001e1a7:	50                   	push   eax
c001e1a8:	68 48 c2 02 c0       	push   0xc002c248
c001e1ad:	e8 d4 4c ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e1b2:	83 c4 1c             	add    esp,0x1c
c001e1b5:	c3                   	ret    

c001e1b6 <blockTask(TaskState)>:
c001e1b6:	83 ec 0c             	sub    esp,0xc
c001e1b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1bd:	e8 5e fb ff ff       	call   c001dd20 <lockScheduler()>
c001e1c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1c7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1ca:	e8 8d fe ff ff       	call   c001e05c <schedule()>
c001e1cf:	83 c4 0c             	add    esp,0xc
c001e1d2:	e9 4b fb ff ff       	jmp    c001dd22 <unlockScheduler()>

c001e1d7 <waitTask(int, int*, int)>:
c001e1d7:	83 ec 18             	sub    esp,0x18
c001e1da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e1e3:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e1e6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e1ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1ef:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e1f2:	6a 07                	push   0x7
c001e1f4:	e8 bd ff ff ff       	call   c001e1b6 <blockTask(TaskState)>
c001e1f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1fe:	83 c4 10             	add    esp,0x10
c001e201:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e204:	85 d2                	test   edx,edx
c001e206:	74 0a                	je     c001e212 <waitTask(int, int*, int)+0x3b>
c001e208:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e20b:	89 02                	mov    DWORD PTR [edx],eax
c001e20d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e212:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e215:	83 c4 0c             	add    esp,0xc
c001e218:	c3                   	ret    

c001e219 <nanoSleepUntil(unsigned long long)>:
c001e219:	83 ec 0c             	sub    esp,0xc
c001e21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e220:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e224:	3b 05 70 e9 02 c0    	cmp    eax,DWORD PTR ds:0xc002e970
c001e22a:	89 d1                	mov    ecx,edx
c001e22c:	1b 0d 74 e9 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e974
c001e232:	73 04                	jae    c001e238 <nanoSleepUntil(unsigned long long)+0x1f>
c001e234:	83 c4 0c             	add    esp,0xc
c001e237:	c3                   	ret    
c001e238:	e8 0a fb ff ff       	call   c001dd47 <lockStuff()>
c001e23d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e243:	83 ec 08             	sub    esp,0x8
c001e246:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e249:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e24c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e252:	68 3c 18 03 c0       	push   0xc003183c
c001e257:	e8 e4 a7 00 00       	call   c0028a40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e25c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e263:	e8 4e ff ff ff       	call   c001e1b6 <blockTask(TaskState)>
c001e268:	83 c4 1c             	add    esp,0x1c
c001e26b:	e9 71 fe ff ff       	jmp    c001e0e1 <unlockStuff()>

c001e270 <nanoSleep(unsigned long long)>:
c001e270:	a1 70 e9 02 c0       	mov    eax,ds:0xc002e970
c001e275:	8b 15 74 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e974
c001e27b:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e27f:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e283:	eb 94                	jmp    c001e219 <nanoSleepUntil(unsigned long long)>

c001e285 <sleep(unsigned long long)>:
c001e285:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e28d:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e292:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e296:	01 ca                	add    edx,ecx
c001e298:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e29c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e2a0:	eb ce                	jmp    c001e270 <nanoSleep(unsigned long long)>

c001e2a2 <Semaphore::acquire()>:
c001e2a2:	83 ec 0c             	sub    esp,0xc
c001e2a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a9:	e8 99 fa ff ff       	call   c001dd47 <lockStuff()>
c001e2ae:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e2b1:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e2b3:	7d 0c                	jge    c001e2c1 <Semaphore::acquire()+0x1f>
c001e2b5:	42                   	inc    edx
c001e2b6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2b9:	83 c4 0c             	add    esp,0xc
c001e2bc:	e9 20 fe ff ff       	jmp    c001e0e1 <unlockStuff()>
c001e2c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e2c7:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e2ce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e2d1:	85 d2                	test   edx,edx
c001e2d3:	74 2a                	je     c001e2ff <Semaphore::acquire()+0x5d>
c001e2d5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e2d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2de:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e2e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e2e7:	83 ec 0c             	sub    esp,0xc
c001e2ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e2ed:	6a 05                	push   0x5
c001e2ef:	e8 c2 fe ff ff       	call   c001e1b6 <blockTask(TaskState)>
c001e2f4:	83 c4 10             	add    esp,0x10
c001e2f7:	83 c4 0c             	add    esp,0xc
c001e2fa:	e9 e2 fd ff ff       	jmp    c001e0e1 <unlockStuff()>
c001e2ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e305:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e308:	eb d7                	jmp    c001e2e1 <Semaphore::acquire()+0x3f>

c001e30a <taskReturned>:
c001e30a:	83 ec 18             	sub    esp,0x18
c001e30d:	68 7c c2 02 c0       	push   0xc002c27c
c001e312:	e8 14 c2 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001e317:	83 c4 10             	add    esp,0x10
c001e31a:	83 ec 0c             	sub    esp,0xc
c001e31d:	6a 02                	push   0x2
c001e31f:	e8 92 fe ff ff       	call   c001e1b6 <blockTask(TaskState)>
c001e324:	e8 f7 f9 ff ff       	call   c001dd20 <lockScheduler()>
c001e329:	e8 2e fd ff ff       	call   c001e05c <schedule()>
c001e32e:	e8 ef f9 ff ff       	call   c001dd22 <unlockScheduler()>
c001e333:	83 c4 10             	add    esp,0x10
c001e336:	eb e2                	jmp    c001e31a <taskReturned+0x10>

c001e338 <unblockTask(ThreadControlBlock*)>:
c001e338:	53                   	push   ebx
c001e339:	83 ec 08             	sub    esp,0x8
c001e33c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e340:	e8 db f9 ff ff       	call   c001dd20 <lockScheduler()>
c001e345:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e348:	85 c0                	test   eax,eax
c001e34a:	74 5c                	je     c001e3a8 <unblockTask(ThreadControlBlock*)+0x70>
c001e34c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e34f:	48                   	dec    eax
c001e350:	74 31                	je     c001e383 <unblockTask(ThreadControlBlock*)+0x4b>
c001e352:	83 ec 0c             	sub    esp,0xc
c001e355:	68 48 18 03 c0       	push   0xc0031848
c001e35a:	e8 0f a6 00 00       	call   c002896e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e35f:	83 c4 10             	add    esp,0x10
c001e362:	85 c0                	test   eax,eax
c001e364:	75 17                	jne    c001e37d <unblockTask(ThreadControlBlock*)+0x45>
c001e366:	eb 65                	jmp    c001e3cd <unblockTask(ThreadControlBlock*)+0x95>
c001e368:	83 ec 08             	sub    esp,0x8
c001e36b:	50                   	push   eax
c001e36c:	68 48 18 03 c0       	push   0xc0031848
c001e371:	e8 d2 a8 00 00       	call   c0028c48 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e376:	83 c4 10             	add    esp,0x10
c001e379:	85 c0                	test   eax,eax
c001e37b:	74 50                	je     c001e3cd <unblockTask(ThreadControlBlock*)+0x95>
c001e37d:	39 c3                	cmp    ebx,eax
c001e37f:	75 e7                	jne    c001e368 <unblockTask(ThreadControlBlock*)+0x30>
c001e381:	eb 1c                	jmp    c001e39f <unblockTask(ThreadControlBlock*)+0x67>
c001e383:	83 ec 0c             	sub    esp,0xc
c001e386:	68 6c c3 02 c0       	push   0xc002c36c
c001e38b:	e8 f6 4a ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e390:	c7 04 24 f8 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2f8
c001e397:	e8 ea 4a ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e39c:	83 c4 10             	add    esp,0x10
c001e39f:	83 c4 08             	add    esp,0x8
c001e3a2:	5b                   	pop    ebx
c001e3a3:	e9 7a f9 ff ff       	jmp    c001dd22 <unlockScheduler()>
c001e3a8:	83 ec 0c             	sub    esp,0xc
c001e3ab:	68 b0 c2 02 c0       	push   0xc002c2b0
c001e3b0:	e8 d1 4a ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e3b5:	c7 04 24 f8 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2f8
c001e3bc:	e8 c5 4a ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e3c1:	83 c4 10             	add    esp,0x10
c001e3c4:	83 c4 08             	add    esp,0x8
c001e3c7:	5b                   	pop    ebx
c001e3c8:	e9 55 f9 ff ff       	jmp    c001dd22 <unlockScheduler()>
c001e3cd:	83 ec 08             	sub    esp,0x8
c001e3d0:	53                   	push   ebx
c001e3d1:	68 48 18 03 c0       	push   0xc0031848
c001e3d6:	e8 65 a6 00 00       	call   c0028a40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3db:	83 c4 10             	add    esp,0x10
c001e3de:	83 c4 08             	add    esp,0x8
c001e3e1:	5b                   	pop    ebx
c001e3e2:	e9 3b f9 ff ff       	jmp    c001dd22 <unlockScheduler()>

c001e3e7 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e3e7:	55                   	push   ebp
c001e3e8:	57                   	push   edi
c001e3e9:	56                   	push   esi
c001e3ea:	53                   	push   ebx
c001e3eb:	83 ec 1c             	sub    esp,0x1c
c001e3ee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e3f2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3f5:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e3fb:	85 ff                	test   edi,edi
c001e3fd:	7e 20                	jle    c001e41f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e3ff:	31 f6                	xor    esi,esi
c001e401:	83 ec 0c             	sub    esp,0xc
c001e404:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e40b:	46                   	inc    esi
c001e40c:	e8 3f 14 ff ff       	call   c000f850 <free>
c001e411:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e414:	83 c4 10             	add    esp,0x10
c001e417:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e41d:	7f e2                	jg     c001e401 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e41f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e429:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e42e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e431:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e434:	d3 c0                	rol    eax,cl
c001e436:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e43d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e440:	89 f7                	mov    edi,esi
c001e442:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e44a:	0f 85 74 01 00 00    	jne    c001e5c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e450:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e456:	85 ed                	test   ebp,ebp
c001e458:	74 1b                	je     c001e475 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e45a:	83 ec 0c             	sub    esp,0xc
c001e45d:	55                   	push   ebp
c001e45e:	e8 35 be ff ff       	call   c001a298 <EnvVarContainer::~EnvVarContainer()>
c001e463:	59                   	pop    ecx
c001e464:	5e                   	pop    esi
c001e465:	6a 0c                	push   0xc
c001e467:	55                   	push   ebp
c001e468:	e8 39 49 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c001e46d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e470:	83 c4 10             	add    esp,0x10
c001e473:	89 f7                	mov    edi,esi
c001e475:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e47b:	85 c0                	test   eax,eax
c001e47d:	0f 84 aa 00 00 00    	je     c001e52d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e483:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e486:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e48a:	31 c9                	xor    ecx,ecx
c001e48c:	eb 10                	jmp    c001e49e <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e48e:	41                   	inc    ecx
c001e48f:	83 f9 10             	cmp    ecx,0x10
c001e492:	0f 84 95 00 00 00    	je     c001e52d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e498:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e49e:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e4a5:	d3 fa                	sar    edx,cl
c001e4a7:	83 e2 01             	and    edx,0x1
c001e4aa:	74 e2                	je     c001e48e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4ac:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e4af:	01 ca                	add    edx,ecx
c001e4b1:	89 d5                	mov    ebp,edx
c001e4b3:	c1 e5 05             	shl    ebp,0x5
c001e4b6:	01 ea                	add    edx,ebp
c001e4b8:	01 d0                	add    eax,edx
c001e4ba:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e4c0:	83 fd 07             	cmp    ebp,0x7
c001e4c3:	75 c9                	jne    c001e48e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4c5:	05 40 02 00 00       	add    eax,0x240
c001e4ca:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e4cd:	83 fd ff             	cmp    ebp,0xffffffff
c001e4d0:	0f 8c 08 01 00 00    	jl     c001e5de <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e4d6:	0f 84 b9 01 00 00    	je     c001e695 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e4dc:	85 ed                	test   ebp,ebp
c001e4de:	0f 84 a0 01 00 00    	je     c001e684 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e4e4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e4e6:	75 a6                	jne    c001e48e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4e8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e4f2:	01 d0                	add    eax,edx
c001e4f4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e4f8:	83 ec 0c             	sub    esp,0xc
c001e4fb:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e501:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e504:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e50a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e511:	50                   	push   eax
c001e512:	e8 21 fe ff ff       	call   c001e338 <unblockTask(ThreadControlBlock*)>
c001e517:	83 c4 10             	add    esp,0x10
c001e51a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e51d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e521:	89 f7                	mov    edi,esi
c001e523:	41                   	inc    ecx
c001e524:	83 f9 10             	cmp    ecx,0x10
c001e527:	0f 85 6b ff ff ff    	jne    c001e498 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e52d:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e533:	85 c0                	test   eax,eax
c001e535:	74 5d                	je     c001e594 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e537:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e53d:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e543:	74 4f                	je     c001e594 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e545:	83 ec 0c             	sub    esp,0xc
c001e548:	68 48 18 03 c0       	push   0xc0031848
c001e54d:	e8 1c a4 00 00       	call   c002896e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e552:	c7 04 24 48 18 03 c0 	mov    DWORD PTR [esp],0xc0031848
c001e559:	89 c7                	mov    edi,eax
c001e55b:	e8 16 a4 00 00       	call   c0028976 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e560:	83 c4 10             	add    esp,0x10
c001e563:	84 c0                	test   al,al
c001e565:	0f 84 e4 00 00 00    	je     c001e64f <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e56b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e56e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e574:	85 d2                	test   edx,edx
c001e576:	74 0f                	je     c001e587 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e578:	83 ec 0c             	sub    esp,0xc
c001e57b:	8b 02                	mov    eax,DWORD PTR [edx]
c001e57d:	52                   	push   edx
c001e57e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e581:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e584:	83 c4 10             	add    esp,0x10
c001e587:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e591:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e594:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e59a:	85 db                	test   ebx,ebx
c001e59c:	74 16                	je     c001e5b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e59e:	83 ec 0c             	sub    esp,0xc
c001e5a1:	53                   	push   ebx
c001e5a2:	e8 03 3c ff ff       	call   c00121aa <VAS::~VAS()>
c001e5a7:	58                   	pop    eax
c001e5a8:	5a                   	pop    edx
c001e5a9:	6a 14                	push   0x14
c001e5ab:	53                   	push   ebx
c001e5ac:	e8 f5 47 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c001e5b1:	83 c4 10             	add    esp,0x10
c001e5b4:	83 ec 0c             	sub    esp,0xc
c001e5b7:	68 c5 c0 02 c0       	push   0xc002c0c5
c001e5bc:	e8 c5 48 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e5c1:	83 c4 10             	add    esp,0x10
c001e5c4:	83 ec 08             	sub    esp,0x8
c001e5c7:	68 3f 07 00 00       	push   0x73f
c001e5cc:	68 d3 c0 02 c0       	push   0xc002c0d3
c001e5d1:	e8 b0 48 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e5d6:	83 c4 2c             	add    esp,0x2c
c001e5d9:	5b                   	pop    ebx
c001e5da:	5e                   	pop    esi
c001e5db:	5f                   	pop    edi
c001e5dc:	5d                   	pop    ebp
c001e5dd:	c3                   	ret    
c001e5de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5e2:	83 ec 0c             	sub    esp,0xc
c001e5e5:	68 b0 c3 02 c0       	push   0xc002c3b0
c001e5ea:	e8 3c bf ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001e5ef:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5f2:	83 c4 10             	add    esp,0x10
c001e5f5:	89 f7                	mov    edi,esi
c001e5f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5fb:	e9 8e fe ff ff       	jmp    c001e48e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e600:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e606:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e60c:	75 1c                	jne    c001e62a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e60e:	83 ec 0c             	sub    esp,0xc
c001e611:	68 18 c4 02 c0       	push   0xc002c418
c001e616:	e8 6b 48 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e61b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e622:	e8 8f fb ff ff       	call   c001e1b6 <blockTask(TaskState)>
c001e627:	83 c4 10             	add    esp,0x10
c001e62a:	83 ec 08             	sub    esp,0x8
c001e62d:	56                   	push   esi
c001e62e:	68 48 18 03 c0       	push   0xc0031848
c001e633:	e8 08 a4 00 00       	call   c0028a40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e638:	c7 04 24 48 18 03 c0 	mov    DWORD PTR [esp],0xc0031848
c001e63f:	e8 2a a3 00 00       	call   c002896e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e644:	83 c4 10             	add    esp,0x10
c001e647:	39 f8                	cmp    eax,edi
c001e649:	0f 84 1c ff ff ff    	je     c001e56b <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e64f:	83 ec 0c             	sub    esp,0xc
c001e652:	68 48 18 03 c0       	push   0xc0031848
c001e657:	e8 12 a3 00 00       	call   c002896e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e65c:	c7 04 24 48 18 03 c0 	mov    DWORD PTR [esp],0xc0031848
c001e663:	89 c6                	mov    esi,eax
c001e665:	e8 28 a3 00 00       	call   c0028992 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e66a:	83 c4 10             	add    esp,0x10
c001e66d:	39 f3                	cmp    ebx,esi
c001e66f:	74 b9                	je     c001e62a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e671:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e674:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e677:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e67d:	75 ab                	jne    c001e62a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e67f:	e9 7c ff ff ff       	jmp    c001e600 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e684:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e688:	83 ec 0c             	sub    esp,0xc
c001e68b:	68 e4 c3 02 c0       	push   0xc002c3e4
c001e690:	e9 55 ff ff ff       	jmp    c001e5ea <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e695:	8b 36                	mov    esi,DWORD PTR [esi]
c001e697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e69b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e69e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6a1:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e6a7:	01 d7                	add    edi,edx
c001e6a9:	89 f8                	mov    eax,edi
c001e6ab:	e9 44 fe ff ff       	jmp    c001e4f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e6b0 <cleanerTaskFunction(void*)>:
c001e6b0:	53                   	push   ebx
c001e6b1:	83 ec 08             	sub    esp,0x8
c001e6b4:	e8 69 f6 ff ff       	call   c001dd22 <unlockScheduler()>
c001e6b9:	e8 62 f6 ff ff       	call   c001dd20 <lockScheduler()>
c001e6be:	80 3d 0c 18 03 c0 00 	cmp    BYTE PTR ds:0xc003180c,0x0
c001e6c5:	0f 85 8e 00 00 00    	jne    c001e759 <cleanerTaskFunction(void*)+0xa9>
c001e6cb:	83 ec 0c             	sub    esp,0xc
c001e6ce:	6a 02                	push   0x2
c001e6d0:	e8 9f fa ff ff       	call   c001e174 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e6d5:	83 c4 10             	add    esp,0x10
c001e6d8:	c6 05 0c 18 03 c0 00 	mov    BYTE PTR ds:0xc003180c,0x0
c001e6df:	e8 63 f6 ff ff       	call   c001dd47 <lockStuff()>
c001e6e4:	e8 37 f6 ff ff       	call   c001dd20 <lockScheduler()>
c001e6e9:	83 ec 0c             	sub    esp,0xc
c001e6ec:	68 30 18 03 c0       	push   0xc0031830
c001e6f1:	e8 80 a2 00 00       	call   c0028976 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6f6:	83 c4 10             	add    esp,0x10
c001e6f9:	84 c0                	test   al,al
c001e6fb:	75 40                	jne    c001e73d <cleanerTaskFunction(void*)+0x8d>
c001e6fd:	83 ec 0c             	sub    esp,0xc
c001e700:	68 30 18 03 c0       	push   0xc0031830
c001e705:	e8 64 a2 00 00       	call   c002896e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e70a:	c7 04 24 30 18 03 c0 	mov    DWORD PTR [esp],0xc0031830
c001e711:	89 c3                	mov    ebx,eax
c001e713:	e8 7a a2 00 00       	call   c0028992 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e718:	c7 04 24 e9 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0e9
c001e71f:	e8 62 47 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e724:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e727:	e8 bb fc ff ff       	call   c001e3e7 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e72c:	c7 04 24 02 c1 02 c0 	mov    DWORD PTR [esp],0xc002c102
c001e733:	e8 4e 47 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e738:	83 c4 10             	add    esp,0x10
c001e73b:	eb ac                	jmp    c001e6e9 <cleanerTaskFunction(void*)+0x39>
c001e73d:	e8 e0 f5 ff ff       	call   c001dd22 <unlockScheduler()>
c001e742:	e8 9a f9 ff ff       	call   c001e0e1 <unlockStuff()>
c001e747:	e8 d4 f5 ff ff       	call   c001dd20 <lockScheduler()>
c001e74c:	80 3d 0c 18 03 c0 00 	cmp    BYTE PTR ds:0xc003180c,0x0
c001e753:	0f 84 72 ff ff ff    	je     c001e6cb <cleanerTaskFunction(void*)+0x1b>
c001e759:	e8 c4 f5 ff ff       	call   c001dd22 <unlockScheduler()>
c001e75e:	e9 75 ff ff ff       	jmp    c001e6d8 <cleanerTaskFunction(void*)+0x28>

c001e763 <terminateTask(int)>:
c001e763:	83 ec 14             	sub    esp,0x14
c001e766:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e76b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e76e:	83 c0 0c             	add    eax,0xc
c001e771:	50                   	push   eax
c001e772:	68 40 c4 02 c0       	push   0xc002c440
c001e777:	e8 0a 47 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e77c:	e8 c6 f5 ff ff       	call   c001dd47 <lockStuff()>
c001e781:	e8 9a f5 ff ff       	call   c001dd20 <lockScheduler()>
c001e786:	c7 04 24 15 c1 02 c0 	mov    DWORD PTR [esp],0xc002c115
c001e78d:	e8 f4 46 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e796:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e79b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e79e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7a3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e7a6:	5a                   	pop    edx
c001e7a7:	59                   	pop    ecx
c001e7a8:	50                   	push   eax
c001e7a9:	68 30 18 03 c0       	push   0xc0031830
c001e7ae:	e8 8d a2 00 00       	call   c0028a40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7b8:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e7bf:	c7 04 24 2f c1 02 c0 	mov    DWORD PTR [esp],0xc002c12f
c001e7c6:	e8 bb 46 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e7cb:	83 c4 10             	add    esp,0x10
c001e7ce:	a1 08 18 03 c0       	mov    eax,ds:0xc0031808
c001e7d3:	85 c0                	test   eax,eax
c001e7d5:	74 5a                	je     c001e831 <terminateTask(int)+0xce>
c001e7d7:	83 ec 0c             	sub    esp,0xc
c001e7da:	68 49 c1 02 c0       	push   0xc002c149
c001e7df:	e8 a2 46 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e7e4:	58                   	pop    eax
c001e7e5:	c6 05 0c 18 03 c0 01 	mov    BYTE PTR ds:0xc003180c,0x1
c001e7ec:	ff 35 08 18 03 c0    	push   DWORD PTR ds:0xc0031808
c001e7f2:	e8 41 fb ff ff       	call   c001e338 <unblockTask(ThreadControlBlock*)>
c001e7f7:	c7 04 24 63 c1 02 c0 	mov    DWORD PTR [esp],0xc002c163
c001e7fe:	e8 83 46 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e803:	83 c4 10             	add    esp,0x10
c001e806:	e8 17 f5 ff ff       	call   c001dd22 <unlockScheduler()>
c001e80b:	e8 d1 f8 ff ff       	call   c001e0e1 <unlockStuff()>
c001e810:	83 ec 0c             	sub    esp,0xc
c001e813:	68 9b c1 02 c0       	push   0xc002c19b
c001e818:	e8 69 46 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e81d:	83 c4 10             	add    esp,0x10
c001e820:	e8 fb f4 ff ff       	call   c001dd20 <lockScheduler()>
c001e825:	e8 32 f8 ff ff       	call   c001e05c <schedule()>
c001e82a:	e8 f3 f4 ff ff       	call   c001dd22 <unlockScheduler()>
c001e82f:	eb ef                	jmp    c001e820 <terminateTask(int)+0xbd>
c001e831:	83 ec 0c             	sub    esp,0xc
c001e834:	68 7d c1 02 c0       	push   0xc002c17d
c001e839:	e8 48 46 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e83e:	83 c4 10             	add    esp,0x10
c001e841:	eb c3                	jmp    c001e806 <terminateTask(int)+0xa3>

c001e843 <Thr::terminateFromIRQ(int)>:
c001e843:	83 ec 18             	sub    esp,0x18
c001e846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e84a:	e8 14 ff ff ff       	call   c001e763 <terminateTask(int)>
c001e84f:	90                   	nop

c001e850 <Semaphore::release()>:
c001e850:	83 ec 0c             	sub    esp,0xc
c001e853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e857:	e8 eb f4 ff ff       	call   c001dd47 <lockStuff()>
c001e85c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e85f:	85 d2                	test   edx,edx
c001e861:	74 1a                	je     c001e87d <Semaphore::release()+0x2d>
c001e863:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e866:	83 ec 0c             	sub    esp,0xc
c001e869:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e86c:	52                   	push   edx
c001e86d:	e8 c6 fa ff ff       	call   c001e338 <unblockTask(ThreadControlBlock*)>
c001e872:	83 c4 10             	add    esp,0x10
c001e875:	83 c4 0c             	add    esp,0xc
c001e878:	e9 64 f8 ff ff       	jmp    c001e0e1 <unlockStuff()>
c001e87d:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e880:	83 c4 0c             	add    esp,0xc
c001e883:	e9 59 f8 ff ff       	jmp    c001e0e1 <unlockStuff()>

c001e888 <__static_initialization_and_destruction_0(int, int)>:
c001e888:	83 ec 0c             	sub    esp,0xc
c001e88b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e890:	0f 85 88 00 00 00    	jne    c001e91e <__static_initialization_and_destruction_0(int, int)+0x96>
c001e896:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e89e:	75 7e                	jne    c001e91e <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8a0:	83 ec 0c             	sub    esp,0xc
c001e8a3:	68 48 18 03 c0       	push   0xc0031848
c001e8a8:	e8 43 a3 00 00       	call   c0028bf0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e8ad:	83 c4 10             	add    esp,0x10
c001e8b0:	83 ec 04             	sub    esp,0x4
c001e8b3:	68 f8 d1 02 c0       	push   0xc002d1f8
c001e8b8:	68 48 18 03 c0       	push   0xc0031848
c001e8bd:	68 b0 8b 02 c0       	push   0xc0028bb0
c001e8c2:	e8 59 44 ff ff       	call   c0012d20 <__cxa_atexit>
c001e8c7:	83 c4 10             	add    esp,0x10
c001e8ca:	83 ec 0c             	sub    esp,0xc
c001e8cd:	68 3c 18 03 c0       	push   0xc003183c
c001e8d2:	e8 19 a3 00 00       	call   c0028bf0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e8d7:	83 c4 10             	add    esp,0x10
c001e8da:	83 ec 04             	sub    esp,0x4
c001e8dd:	68 f8 d1 02 c0       	push   0xc002d1f8
c001e8e2:	68 3c 18 03 c0       	push   0xc003183c
c001e8e7:	68 b0 8b 02 c0       	push   0xc0028bb0
c001e8ec:	e8 2f 44 ff ff       	call   c0012d20 <__cxa_atexit>
c001e8f1:	83 c4 10             	add    esp,0x10
c001e8f4:	83 ec 0c             	sub    esp,0xc
c001e8f7:	68 30 18 03 c0       	push   0xc0031830
c001e8fc:	e8 ef a2 00 00       	call   c0028bf0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e901:	83 c4 10             	add    esp,0x10
c001e904:	83 ec 04             	sub    esp,0x4
c001e907:	68 f8 d1 02 c0       	push   0xc002d1f8
c001e90c:	68 30 18 03 c0       	push   0xc0031830
c001e911:	68 b0 8b 02 c0       	push   0xc0028bb0
c001e916:	e8 05 44 ff ff       	call   c0012d20 <__cxa_atexit>
c001e91b:	83 c4 10             	add    esp,0x10
c001e91e:	90                   	nop
c001e91f:	83 c4 0c             	add    esp,0xc
c001e922:	c3                   	ret    

c001e923 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e923:	83 ec 0c             	sub    esp,0xc
c001e926:	83 ec 08             	sub    esp,0x8
c001e929:	68 ff ff 00 00       	push   0xffff
c001e92e:	6a 01                	push   0x1
c001e930:	e8 53 ff ff ff       	call   c001e888 <__static_initialization_and_destruction_0(int, int)>
c001e935:	83 c4 10             	add    esp,0x10
c001e938:	83 c4 0c             	add    esp,0xc
c001e93b:	c3                   	ret    

c001e93c <Vm::inbv(unsigned short)>:
c001e93c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e940:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e945:	75 06                	jne    c001e94d <Vm::inbv(unsigned short)+0x11>
c001e947:	a0 8c 18 03 c0       	mov    al,ds:0xc003188c
c001e94c:	c3                   	ret    
c001e94d:	ec                   	in     al,dx
c001e94e:	c3                   	ret    

c001e94f <Vm::outbv(unsigned short, unsigned char)>:
c001e94f:	53                   	push   ebx
c001e950:	83 ec 08             	sub    esp,0x8
c001e953:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e957:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e95b:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e960:	75 38                	jne    c001e99a <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e962:	0f b6 c3             	movzx  eax,bl
c001e965:	51                   	push   ecx
c001e966:	51                   	push   ecx
c001e967:	50                   	push   eax
c001e968:	68 5f c4 02 c0       	push   0xc002c45f
c001e96d:	e8 14 45 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001e972:	8b 15 8c 18 03 c0    	mov    edx,DWORD PTR ds:0xc003188c
c001e978:	83 c4 10             	add    esp,0x10
c001e97b:	8d 42 01             	lea    eax,[edx+0x1]
c001e97e:	88 9a a0 18 03 c0    	mov    BYTE PTR [edx-0x3ffce760],bl
c001e984:	a3 8c 18 03 c0       	mov    ds:0xc003188c,eax
c001e989:	83 f8 20             	cmp    eax,0x20
c001e98c:	75 0f                	jne    c001e99d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e98e:	c7 05 8c 18 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003188c,0x1f
c001e998:	eb 03                	jmp    c001e99d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e99a:	88 d8                	mov    al,bl
c001e99c:	ee                   	out    dx,al
c001e99d:	83 c4 08             	add    esp,0x8
c001e9a0:	5b                   	pop    ebx
c001e9a1:	c3                   	ret    

c001e9a2 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e9a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9ac:	c1 e0 04             	shl    eax,0x4
c001e9af:	01 d0                	add    eax,edx
c001e9b1:	c3                   	ret    

c001e9b2 <Vm::getSegment(unsigned int)>:
c001e9b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9b6:	c1 e8 10             	shr    eax,0x10
c001e9b9:	c3                   	ret    

c001e9ba <Vm::getOffset(unsigned int)>:
c001e9ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9be:	c3                   	ret    

c001e9bf <Vm::mainloop2()>:
c001e9bf:	83 ec 0c             	sub    esp,0xc
c001e9c2:	e8 59 f3 ff ff       	call   c001dd20 <lockScheduler()>
c001e9c7:	83 ec 0c             	sub    esp,0xc
c001e9ca:	c6 05 85 18 03 c0 01 	mov    BYTE PTR ds:0xc0031885,0x1
c001e9d1:	6a 02                	push   0x2
c001e9d3:	e8 9c f7 ff ff       	call   c001e174 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e9d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9dd:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e9e1:	52                   	push   edx
c001e9e2:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e9e6:	52                   	push   edx
c001e9e7:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e9eb:	52                   	push   edx
c001e9ec:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e9f0:	50                   	push   eax
c001e9f1:	e8 04 19 fe ff       	call   c00002fa <goToVM86>
c001e9f6:	83 c4 2c             	add    esp,0x2c
c001e9f9:	c3                   	ret    

c001e9fa <Vm::mainVm8086Loop(void*)>:
c001e9fa:	83 ec 0c             	sub    esp,0xc
c001e9fd:	e8 20 f3 ff ff       	call   c001dd22 <unlockScheduler()>
c001ea02:	83 c4 0c             	add    esp,0xc
c001ea05:	eb b8                	jmp    c001e9bf <Vm::mainloop2()>

c001ea07 <Vm::mainloop3(unsigned long)>:
c001ea07:	53                   	push   ebx
c001ea08:	83 ec 08             	sub    esp,0x8
c001ea0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea0f:	e8 0c f3 ff ff       	call   c001dd20 <lockScheduler()>
c001ea14:	83 ec 0c             	sub    esp,0xc
c001ea17:	89 1d 80 18 03 c0    	mov    DWORD PTR ds:0xc0031880,ebx
c001ea1d:	6a 02                	push   0x2
c001ea1f:	c6 05 84 18 03 c0 01 	mov    BYTE PTR ds:0xc0031884,0x1
c001ea26:	e8 49 f7 ff ff       	call   c001e174 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea2b:	83 c4 18             	add    esp,0x18
c001ea2e:	5b                   	pop    ebx
c001ea2f:	eb 8e                	jmp    c001e9bf <Vm::mainloop2()>

c001ea31 <Vm::initialise8086()>:
c001ea31:	83 ec 0c             	sub    esp,0xc
c001ea34:	68 80 00 00 00       	push   0x80
c001ea39:	6a 00                	push   0x0
c001ea3b:	68 fa e9 01 c0       	push   0xc001e9fa
c001ea40:	ff 35 54 18 03 c0    	push   DWORD PTR ds:0xc0031854
c001ea46:	e8 07 f4 ff ff       	call   c001de52 <Process::createThread(void (*)(void*), void*, int)>
c001ea4b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ea52:	a3 88 18 03 c0       	mov    ds:0xc0031888,eax
c001ea57:	68 00 01 00 00       	push   0x100
c001ea5c:	a1 54 18 03 c0       	mov    eax,ds:0xc0031854
c001ea61:	6a 00                	push   0x0
c001ea63:	6a 00                	push   0x0
c001ea65:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ea6b:	e8 9a 3b ff ff       	call   c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ea70:	83 c4 2c             	add    esp,0x2c
c001ea73:	c3                   	ret    

c001ea74 <Vm::finish8086()>:
c001ea74:	53                   	push   ebx
c001ea75:	83 ec 08             	sub    esp,0x8
c001ea78:	e8 a3 f2 ff ff       	call   c001dd20 <lockScheduler()>
c001ea7d:	80 3d 84 18 03 c0 00 	cmp    BYTE PTR ds:0xc0031884,0x0
c001ea84:	75 0c                	jne    c001ea92 <Vm::finish8086()+0x1e>
c001ea86:	e8 d1 f5 ff ff       	call   c001e05c <schedule()>
c001ea8b:	e8 92 f2 ff ff       	call   c001dd22 <unlockScheduler()>
c001ea90:	eb e6                	jmp    c001ea78 <Vm::finish8086()+0x4>
c001ea92:	83 ec 0c             	sub    esp,0xc
c001ea95:	8b 1d 80 18 03 c0    	mov    ebx,DWORD PTR ds:0xc0031880
c001ea9b:	ff 35 88 18 03 c0    	push   DWORD PTR ds:0xc0031888
c001eaa1:	c6 05 84 18 03 c0 00 	mov    BYTE PTR ds:0xc0031884,0x0
c001eaa8:	e8 8b f8 ff ff       	call   c001e338 <unblockTask(ThreadControlBlock*)>
c001eaad:	e8 70 f2 ff ff       	call   c001dd22 <unlockScheduler()>
c001eab2:	89 d8                	mov    eax,ebx
c001eab4:	83 c4 18             	add    esp,0x18
c001eab7:	5b                   	pop    ebx
c001eab8:	c3                   	ret    

c001eab9 <Vm::getOutput8086(unsigned char*)>:
c001eab9:	83 ec 10             	sub    esp,0x10
c001eabc:	ff 35 8c 18 03 c0    	push   DWORD PTR ds:0xc003188c
c001eac2:	68 a0 18 03 c0       	push   0xc00318a0
c001eac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eacb:	e8 74 1c fe ff       	call   c0000744 <memcpy>
c001ead0:	a1 8c 18 03 c0       	mov    eax,ds:0xc003188c
c001ead5:	c7 05 8c 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003188c,0x0
c001eadf:	83 c4 1c             	add    esp,0x1c
c001eae2:	c3                   	ret    

c001eae3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eae3:	55                   	push   ebp
c001eae4:	57                   	push   edi
c001eae5:	56                   	push   esi
c001eae6:	53                   	push   ebx
c001eae7:	83 ec 2c             	sub    esp,0x2c
c001eaea:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eaee:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001eaf2:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001eaf6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eafa:	e8 21 f2 ff ff       	call   c001dd20 <lockScheduler()>
c001eaff:	a0 85 18 03 c0       	mov    al,ds:0xc0031885
c001eb04:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eb08:	84 c0                	test   al,al
c001eb0a:	75 0c                	jne    c001eb18 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001eb0c:	e8 4b f5 ff ff       	call   c001e05c <schedule()>
c001eb11:	e8 0c f2 ff ff       	call   c001dd22 <unlockScheduler()>
c001eb16:	eb e2                	jmp    c001eafa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eb18:	a1 88 18 03 c0       	mov    eax,ds:0xc0031888
c001eb1d:	c7 05 8c 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003188c,0x0
c001eb27:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eb2b:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eb2f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eb33:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001eb37:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001eb3b:	50                   	push   eax
c001eb3c:	6a 20                	push   0x20
c001eb3e:	6a 00                	push   0x0
c001eb40:	68 a0 18 03 c0       	push   0xc00318a0
c001eb45:	e8 2e 1c fe ff       	call   c0000778 <memset>
c001eb4a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eb51:	e8 ea 0c ff ff       	call   c000f840 <malloc>
c001eb56:	83 c4 0c             	add    esp,0xc
c001eb59:	89 c7                	mov    edi,eax
c001eb5b:	ff 35 54 18 03 c0    	push   DWORD PTR ds:0xc0031854
c001eb61:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eb65:	50                   	push   eax
c001eb66:	e8 73 48 ff ff       	call   c00133de <File::File(char const*, Process*)>
c001eb6b:	83 c4 10             	add    esp,0x10
c001eb6e:	85 ff                	test   edi,edi
c001eb70:	75 0a                	jne    c001eb7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001eb72:	83 ec 0c             	sub    esp,0xc
c001eb75:	68 7b c4 02 c0       	push   0xc002c47b
c001eb7a:	eb 27                	jmp    c001eba3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001eb7c:	50                   	push   eax
c001eb7d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eb81:	50                   	push   eax
c001eb82:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eb86:	50                   	push   eax
c001eb87:	57                   	push   edi
c001eb88:	e8 61 4b ff ff       	call   c00136ee <File::stat(unsigned long long*, bool*)>
c001eb8d:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eb92:	83 c4 10             	add    esp,0x10
c001eb95:	89 e8                	mov    eax,ebp
c001eb97:	84 c0                	test   al,al
c001eb99:	74 19                	je     c001ebb4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eb9b:	83 ec 0c             	sub    esp,0xc
c001eb9e:	68 8f c4 02 c0       	push   0xc002c48f
c001eba3:	e8 83 b9 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001eba8:	31 ed                	xor    ebp,ebp
c001ebaa:	e8 73 f1 ff ff       	call   c001dd22 <unlockScheduler()>
c001ebaf:	83 c4 10             	add    esp,0x10
c001ebb2:	eb 75                	jmp    c001ec29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ebb4:	50                   	push   eax
c001ebb5:	50                   	push   eax
c001ebb6:	6a 01                	push   0x1
c001ebb8:	57                   	push   edi
c001ebb9:	e8 84 48 ff ff       	call   c0013442 <File::open(FileOpenMode)>
c001ebbe:	83 c4 10             	add    esp,0x10
c001ebc1:	85 c0                	test   eax,eax
c001ebc3:	74 17                	je     c001ebdc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ebc5:	83 ec 0c             	sub    esp,0xc
c001ebc8:	68 a8 c4 02 c0       	push   0xc002c4a8
c001ebcd:	e8 59 b9 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001ebd2:	e8 4b f1 ff ff       	call   c001dd22 <unlockScheduler()>
c001ebd7:	83 c4 10             	add    esp,0x10
c001ebda:	eb 4d                	jmp    c001ec29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ebdc:	0f b7 f6             	movzx  esi,si
c001ebdf:	50                   	push   eax
c001ebe0:	0f b7 db             	movzx  ebx,bx
c001ebe3:	50                   	push   eax
c001ebe4:	56                   	push   esi
c001ebe5:	53                   	push   ebx
c001ebe6:	e8 b7 fd ff ff       	call   c001e9a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ebeb:	5a                   	pop    edx
c001ebec:	8b 17                	mov    edx,DWORD PTR [edi]
c001ebee:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ebf2:	51                   	push   ecx
c001ebf3:	50                   	push   eax
c001ebf4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ebf8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ebfc:	57                   	push   edi
c001ebfd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ec00:	83 c4 14             	add    esp,0x14
c001ec03:	57                   	push   edi
c001ec04:	e8 97 48 ff ff       	call   c00134a0 <File::close()>
c001ec09:	c6 05 85 18 03 c0 00 	mov    BYTE PTR ds:0xc0031885,0x0
c001ec10:	e8 0d f1 ff ff       	call   c001dd22 <unlockScheduler()>
c001ec15:	59                   	pop    ecx
c001ec16:	ff 35 88 18 03 c0    	push   DWORD PTR ds:0xc0031888
c001ec1c:	e8 17 f7 ff ff       	call   c001e338 <unblockTask(ThreadControlBlock*)>
c001ec21:	83 c4 10             	add    esp,0x10
c001ec24:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ec29:	83 c4 2c             	add    esp,0x2c
c001ec2c:	89 e8                	mov    eax,ebp
c001ec2e:	5b                   	pop    ebx
c001ec2f:	5e                   	pop    esi
c001ec30:	5f                   	pop    edi
c001ec31:	5d                   	pop    ebp
c001ec32:	c3                   	ret    

c001ec33 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ec33:	57                   	push   edi
c001ec34:	56                   	push   esi
c001ec35:	53                   	push   ebx
c001ec36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ec3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ec42:	83 e8 06             	sub    eax,0x6
c001ec45:	0f b7 c0             	movzx  eax,ax
c001ec48:	50                   	push   eax
c001ec49:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ec4e:	50                   	push   eax
c001ec4f:	e8 4e fd ff ff       	call   c001e9a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec54:	5a                   	pop    edx
c001ec55:	5e                   	pop    esi
c001ec56:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ec59:	8d 56 fa             	lea    edx,[esi-0x6]
c001ec5c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ec62:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ec65:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ec68:	83 c2 02             	add    edx,0x2
c001ec6b:	66 89 10             	mov    WORD PTR [eax],dx
c001ec6e:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ec71:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ec75:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ec78:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ec7c:	89 d6                	mov    esi,edx
c001ec7e:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ec84:	66 81 e6 ff fd       	and    si,0xfdff
c001ec89:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ec8d:	74 07                	je     c001ec96 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ec8f:	89 d6                	mov    esi,edx
c001ec91:	66 81 ce 00 02       	or     si,0x200
c001ec96:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ec9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec9f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eca3:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ecab:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ecae:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ecb6:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ecb9:	5b                   	pop    ebx
c001ecba:	5e                   	pop    esi
c001ecbb:	5f                   	pop    edi
c001ecbc:	c3                   	ret    

c001ecbd <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ecbd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ecc2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecc7:	c1 e0 04             	shl    eax,0x4
c001ecca:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001eccd:	c3                   	ret    

c001ecce <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ecce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ecd3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecd8:	c1 e0 04             	shl    eax,0x4
c001ecdb:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ecdf:	c3                   	ret    

c001ece0 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ece0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ece5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecea:	c1 e0 04             	shl    eax,0x4
c001eced:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ecf0:	c3                   	ret    

c001ecf1 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ecf1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ecf6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecfb:	c1 e0 04             	shl    eax,0x4
c001ecfe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed02:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ed05:	c3                   	ret    

c001ed06 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ed06:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed0b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed10:	c1 e0 04             	shl    eax,0x4
c001ed13:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed17:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ed1b:	c3                   	ret    

c001ed1c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ed1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed26:	c1 e0 04             	shl    eax,0x4
c001ed29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed2d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ed30:	c3                   	ret    

c001ed31 <Vm::faultHandler(regs*)>:
c001ed31:	55                   	push   ebp
c001ed32:	57                   	push   edi
c001ed33:	56                   	push   esi
c001ed34:	53                   	push   ebx
c001ed35:	83 ec 1c             	sub    esp,0x1c
c001ed38:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ed3c:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ed3f:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ed42:	0f b7 c1             	movzx  eax,cx
c001ed45:	50                   	push   eax
c001ed46:	0f b7 c3             	movzx  eax,bx
c001ed49:	c1 e3 04             	shl    ebx,0x4
c001ed4c:	50                   	push   eax
c001ed4d:	e8 50 fc ff ff       	call   c001e9a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed52:	5a                   	pop    edx
c001ed53:	89 c5                	mov    ebp,eax
c001ed55:	5e                   	pop    esi
c001ed56:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ed5a:	50                   	push   eax
c001ed5b:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ed5f:	50                   	push   eax
c001ed60:	e8 3d fc ff ff       	call   c001e9a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed65:	01 cb                	add    ebx,ecx
c001ed67:	89 c6                	mov    esi,eax
c001ed69:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ed6d:	50                   	push   eax
c001ed6e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed72:	50                   	push   eax
c001ed73:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ed77:	50                   	push   eax
c001ed78:	55                   	push   ebp
c001ed79:	53                   	push   ebx
c001ed7a:	b3 06                	mov    bl,0x6
c001ed7c:	68 c1 c4 02 c0       	push   0xc002c4c1
c001ed81:	e8 00 41 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001ed86:	83 c4 20             	add    esp,0x20
c001ed89:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ed8e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ed93:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ed97:	3c 9d                	cmp    al,0x9d
c001ed99:	0f 84 d7 02 00 00    	je     c001f076 <Vm::faultHandler(regs*)+0x345>
c001ed9f:	0f 87 a3 00 00 00    	ja     c001ee48 <Vm::faultHandler(regs*)+0x117>
c001eda5:	3c 66                	cmp    al,0x66
c001eda7:	0f 84 15 02 00 00    	je     c001efc2 <Vm::faultHandler(regs*)+0x291>
c001edad:	77 5f                	ja     c001ee0e <Vm::faultHandler(regs*)+0xdd>
c001edaf:	3c 36                	cmp    al,0x36
c001edb1:	0f 84 f1 01 00 00    	je     c001efa8 <Vm::faultHandler(regs*)+0x277>
c001edb7:	77 28                	ja     c001ede1 <Vm::faultHandler(regs*)+0xb0>
c001edb9:	3c 26                	cmp    al,0x26
c001edbb:	0f 84 99 01 00 00    	je     c001ef5a <Vm::faultHandler(regs*)+0x229>
c001edc1:	3c 2e                	cmp    al,0x2e
c001edc3:	0f 85 3b 07 00 00    	jne    c001f504 <Vm::faultHandler(regs*)+0x7d3>
c001edc9:	83 ec 0c             	sub    esp,0xc
c001edcc:	31 db                	xor    ebx,ebx
c001edce:	68 d6 c4 02 c0       	push   0xc002c4d6
c001edd3:	e8 ae 40 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001edd8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eddb:	83 c4 10             	add    esp,0x10
c001edde:	45                   	inc    ebp
c001eddf:	eb b2                	jmp    c001ed93 <Vm::faultHandler(regs*)+0x62>
c001ede1:	3c 64                	cmp    al,0x64
c001ede3:	0f 84 8b 01 00 00    	je     c001ef74 <Vm::faultHandler(regs*)+0x243>
c001ede9:	0f 87 9f 01 00 00    	ja     c001ef8e <Vm::faultHandler(regs*)+0x25d>
c001edef:	3c 3e                	cmp    al,0x3e
c001edf1:	0f 85 0d 07 00 00    	jne    c001f504 <Vm::faultHandler(regs*)+0x7d3>
c001edf7:	83 ec 0c             	sub    esp,0xc
c001edfa:	b3 01                	mov    bl,0x1
c001edfc:	68 da c4 02 c0       	push   0xc002c4da
c001ee01:	e8 80 40 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001ee06:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee09:	83 c4 10             	add    esp,0x10
c001ee0c:	eb d0                	jmp    c001edde <Vm::faultHandler(regs*)+0xad>
c001ee0e:	3c 6d                	cmp    al,0x6d
c001ee10:	0f 84 af 03 00 00    	je     c001f1c5 <Vm::faultHandler(regs*)+0x494>
c001ee16:	77 15                	ja     c001ee2d <Vm::faultHandler(regs*)+0xfc>
c001ee18:	3c 67                	cmp    al,0x67
c001ee1a:	0f 84 bf 01 00 00    	je     c001efdf <Vm::faultHandler(regs*)+0x2ae>
c001ee20:	3c 6c                	cmp    al,0x6c
c001ee22:	0f 84 3f 03 00 00    	je     c001f167 <Vm::faultHandler(regs*)+0x436>
c001ee28:	e9 d7 06 00 00       	jmp    c001f504 <Vm::faultHandler(regs*)+0x7d3>
c001ee2d:	3c 6f                	cmp    al,0x6f
c001ee2f:	0f 84 a4 04 00 00    	je     c001f2d9 <Vm::faultHandler(regs*)+0x5a8>
c001ee35:	0f 82 11 04 00 00    	jb     c001f24c <Vm::faultHandler(regs*)+0x51b>
c001ee3b:	3c 9c                	cmp    al,0x9c
c001ee3d:	0f 84 ba 01 00 00    	je     c001effd <Vm::faultHandler(regs*)+0x2cc>
c001ee43:	e9 bc 06 00 00       	jmp    c001f504 <Vm::faultHandler(regs*)+0x7d3>
c001ee48:	3c ec                	cmp    al,0xec
c001ee4a:	0f 84 24 06 00 00    	je     c001f474 <Vm::faultHandler(regs*)+0x743>
c001ee50:	0f 87 93 00 00 00    	ja     c001eee9 <Vm::faultHandler(regs*)+0x1b8>
c001ee56:	3c e4                	cmp    al,0xe4
c001ee58:	0f 84 5c 05 00 00    	je     c001f3ba <Vm::faultHandler(regs*)+0x689>
c001ee5e:	77 6a                	ja     c001eeca <Vm::faultHandler(regs*)+0x199>
c001ee60:	3c cd                	cmp    al,0xcd
c001ee62:	0f 84 7e 02 00 00    	je     c001f0e6 <Vm::faultHandler(regs*)+0x3b5>
c001ee68:	3c cf                	cmp    al,0xcf
c001ee6a:	0f 85 94 06 00 00    	jne    c001f504 <Vm::faultHandler(regs*)+0x7d3>
c001ee70:	83 ec 0c             	sub    esp,0xc
c001ee73:	68 1e c5 02 c0       	push   0xc002c51e
c001ee78:	e8 09 40 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001ee7d:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ee80:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ee83:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ee87:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ee8a:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ee8e:	0d 00 02 02 00       	or     eax,0x20200
c001ee93:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ee96:	56                   	push   esi
c001ee97:	53                   	push   ebx
c001ee98:	52                   	push   edx
c001ee99:	68 24 c5 02 c0       	push   0xc002c524
c001ee9e:	e8 e3 3f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001eea3:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001eea7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eead:	66 c1 e8 09          	shr    ax,0x9
c001eeb1:	83 e0 01             	and    eax,0x1
c001eeb4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eeb7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001eeba:	83 c0 06             	add    eax,0x6
c001eebd:	25 ff ff 00 00       	and    eax,0xffff
c001eec2:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001eec5:	e9 95 02 00 00       	jmp    c001f15f <Vm::faultHandler(regs*)+0x42e>
c001eeca:	3c e6                	cmp    al,0xe6
c001eecc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001eed0:	0f 84 4e 05 00 00    	je     c001f424 <Vm::faultHandler(regs*)+0x6f3>
c001eed6:	0f 82 0a 05 00 00    	jb     c001f3e6 <Vm::faultHandler(regs*)+0x6b5>
c001eedc:	3c e7                	cmp    al,0xe7
c001eede:	0f 84 69 05 00 00    	je     c001f44d <Vm::faultHandler(regs*)+0x71c>
c001eee4:	e9 1b 06 00 00       	jmp    c001f504 <Vm::faultHandler(regs*)+0x7d3>
c001eee9:	3c ef                	cmp    al,0xef
c001eeeb:	0f 84 e6 05 00 00    	je     c001f4d7 <Vm::faultHandler(regs*)+0x7a6>
c001eef1:	77 37                	ja     c001ef2a <Vm::faultHandler(regs*)+0x1f9>
c001eef3:	3c ed                	cmp    al,0xed
c001eef5:	0f 84 a3 05 00 00    	je     c001f49e <Vm::faultHandler(regs*)+0x76d>
c001eefb:	3c ee                	cmp    al,0xee
c001eefd:	0f 85 01 06 00 00    	jne    c001f504 <Vm::faultHandler(regs*)+0x7d3>
c001ef03:	52                   	push   edx
c001ef04:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ef07:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ef0a:	68 bf c5 02 c0       	push   0xc002c5bf
c001ef0f:	e8 72 3f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001ef14:	59                   	pop    ecx
c001ef15:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ef19:	5b                   	pop    ebx
c001ef1a:	50                   	push   eax
c001ef1b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ef1f:	50                   	push   eax
c001ef20:	e8 2a fa ff ff       	call   c001e94f <Vm::outbv(unsigned short, unsigned char)>
c001ef25:	e9 a5 05 00 00       	jmp    c001f4cf <Vm::faultHandler(regs*)+0x79e>
c001ef2a:	3c fa                	cmp    al,0xfa
c001ef2c:	0f 84 f7 01 00 00    	je     c001f129 <Vm::faultHandler(regs*)+0x3f8>
c001ef32:	3c fb                	cmp    al,0xfb
c001ef34:	0f 84 0a 02 00 00    	je     c001f144 <Vm::faultHandler(regs*)+0x413>
c001ef3a:	3c f3                	cmp    al,0xf3
c001ef3c:	0f 85 c2 05 00 00    	jne    c001f504 <Vm::faultHandler(regs*)+0x7d3>
c001ef42:	83 ec 0c             	sub    esp,0xc
c001ef45:	68 f7 c4 02 c0       	push   0xc002c4f7
c001ef4a:	e8 37 3f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001ef4f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef52:	83 c4 10             	add    esp,0x10
c001ef55:	e9 84 fe ff ff       	jmp    c001edde <Vm::faultHandler(regs*)+0xad>
c001ef5a:	83 ec 0c             	sub    esp,0xc
c001ef5d:	b3 02                	mov    bl,0x2
c001ef5f:	68 d2 c4 02 c0       	push   0xc002c4d2
c001ef64:	e8 1d 3f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001ef69:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef6c:	83 c4 10             	add    esp,0x10
c001ef6f:	e9 6a fe ff ff       	jmp    c001edde <Vm::faultHandler(regs*)+0xad>
c001ef74:	83 ec 0c             	sub    esp,0xc
c001ef77:	b3 03                	mov    bl,0x3
c001ef79:	68 de c4 02 c0       	push   0xc002c4de
c001ef7e:	e8 03 3f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001ef83:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef86:	83 c4 10             	add    esp,0x10
c001ef89:	e9 50 fe ff ff       	jmp    c001edde <Vm::faultHandler(regs*)+0xad>
c001ef8e:	83 ec 0c             	sub    esp,0xc
c001ef91:	b3 04                	mov    bl,0x4
c001ef93:	68 e2 c4 02 c0       	push   0xc002c4e2
c001ef98:	e8 e9 3e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001ef9d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efa0:	83 c4 10             	add    esp,0x10
c001efa3:	e9 36 fe ff ff       	jmp    c001edde <Vm::faultHandler(regs*)+0xad>
c001efa8:	83 ec 0c             	sub    esp,0xc
c001efab:	b3 05                	mov    bl,0x5
c001efad:	68 e6 c4 02 c0       	push   0xc002c4e6
c001efb2:	e8 cf 3e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001efb7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efba:	83 c4 10             	add    esp,0x10
c001efbd:	e9 1c fe ff ff       	jmp    c001edde <Vm::faultHandler(regs*)+0xad>
c001efc2:	83 ec 0c             	sub    esp,0xc
c001efc5:	68 ea c4 02 c0       	push   0xc002c4ea
c001efca:	e8 b7 3e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001efcf:	83 c4 10             	add    esp,0x10
c001efd2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efd5:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001efda:	e9 ff fd ff ff       	jmp    c001edde <Vm::faultHandler(regs*)+0xad>
c001efdf:	50                   	push   eax
c001efe0:	50                   	push   eax
c001efe1:	6a 01                	push   0x1
c001efe3:	68 ef c4 02 c0       	push   0xc002c4ef
c001efe8:	e8 99 3e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001efed:	83 c4 10             	add    esp,0x10
c001eff0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eff3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001eff8:	e9 e1 fd ff ff       	jmp    c001edde <Vm::faultHandler(regs*)+0xad>
c001effd:	83 ec 0c             	sub    esp,0xc
c001f000:	68 fd c4 02 c0       	push   0xc002c4fd
c001f005:	e8 7c 3e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f00a:	83 c4 10             	add    esp,0x10
c001f00d:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f010:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f015:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f018:	74 2f                	je     c001f049 <Vm::faultHandler(regs*)+0x318>
c001f01a:	83 ea 04             	sub    edx,0x4
c001f01d:	25 ff 0d 00 00       	and    eax,0xdff
c001f022:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f028:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f02b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f02e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f034:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f038:	0f 84 bf 04 00 00    	je     c001f4fd <Vm::faultHandler(regs*)+0x7cc>
c001f03e:	80 cc 02             	or     ah,0x2
c001f041:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f044:	e9 b4 04 00 00       	jmp    c001f4fd <Vm::faultHandler(regs*)+0x7cc>
c001f049:	83 ea 02             	sub    edx,0x2
c001f04c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f052:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f055:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f059:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f05f:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f063:	74 05                	je     c001f06a <Vm::faultHandler(regs*)+0x339>
c001f065:	80 cc 02             	or     ah,0x2
c001f068:	eb 03                	jmp    c001f06d <Vm::faultHandler(regs*)+0x33c>
c001f06a:	80 e4 fd             	and    ah,0xfd
c001f06d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f071:	e9 87 04 00 00       	jmp    c001f4fd <Vm::faultHandler(regs*)+0x7cc>
c001f076:	83 ec 0c             	sub    esp,0xc
c001f079:	68 04 c5 02 c0       	push   0xc002c504
c001f07e:	e8 03 3e ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f083:	83 c4 10             	add    esp,0x10
c001f086:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f08b:	74 28                	je     c001f0b5 <Vm::faultHandler(regs*)+0x384>
c001f08d:	8b 06                	mov    eax,DWORD PTR [esi]
c001f08f:	25 ff 0d 00 00       	and    eax,0xdff
c001f094:	0d 00 02 02 00       	or     eax,0x20200
c001f099:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f09c:	8b 06                	mov    eax,DWORD PTR [esi]
c001f09e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0a4:	c1 e8 09             	shr    eax,0x9
c001f0a7:	83 e0 01             	and    eax,0x1
c001f0aa:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0ad:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f0b0:	83 c0 04             	add    eax,0x4
c001f0b3:	eb 24                	jmp    c001f0d9 <Vm::faultHandler(regs*)+0x3a8>
c001f0b5:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f0b8:	0d 00 02 02 00       	or     eax,0x20200
c001f0bd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f0c0:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f0c3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0c9:	66 c1 e8 09          	shr    ax,0x9
c001f0cd:	83 e0 01             	and    eax,0x1
c001f0d0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0d3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f0d6:	83 c0 02             	add    eax,0x2
c001f0d9:	25 ff ff 00 00       	and    eax,0xffff
c001f0de:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f0e1:	e9 17 04 00 00       	jmp    c001f4fd <Vm::faultHandler(regs*)+0x7cc>
c001f0e6:	53                   	push   ebx
c001f0e7:	53                   	push   ebx
c001f0e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0ec:	50                   	push   eax
c001f0ed:	68 0a c5 02 c0       	push   0xc002c50a
c001f0f2:	e8 8f 3d ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f0f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0fb:	83 c4 10             	add    esp,0x10
c001f0fe:	3c ee                	cmp    al,0xee
c001f100:	75 10                	jne    c001f112 <Vm::faultHandler(regs*)+0x3e1>
c001f102:	83 ec 0c             	sub    esp,0xc
c001f105:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f108:	e8 fa f8 ff ff       	call   c001ea07 <Vm::mainloop3(unsigned long)>
c001f10d:	e9 c0 03 00 00       	jmp    c001f4d2 <Vm::faultHandler(regs*)+0x7a1>
c001f112:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f116:	83 ec 0c             	sub    esp,0xc
c001f119:	53                   	push   ebx
c001f11a:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f11e:	53                   	push   ebx
c001f11f:	55                   	push   ebp
c001f120:	50                   	push   eax
c001f121:	57                   	push   edi
c001f122:	e8 0c fb ff ff       	call   c001ec33 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f127:	eb 36                	jmp    c001f15f <Vm::faultHandler(regs*)+0x42e>
c001f129:	83 ec 0c             	sub    esp,0xc
c001f12c:	68 14 c5 02 c0       	push   0xc002c514
c001f131:	e8 50 3d ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f136:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f13b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f13f:	e9 8b 03 00 00       	jmp    c001f4cf <Vm::faultHandler(regs*)+0x79e>
c001f144:	83 ec 0c             	sub    esp,0xc
c001f147:	68 19 c5 02 c0       	push   0xc002c519
c001f14c:	e8 35 3d ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f151:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f156:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f15a:	e9 70 03 00 00       	jmp    c001f4cf <Vm::faultHandler(regs*)+0x79e>
c001f15f:	83 c4 20             	add    esp,0x20
c001f162:	e9 99 03 00 00       	jmp    c001f500 <Vm::faultHandler(regs*)+0x7cf>
c001f167:	83 ec 0c             	sub    esp,0xc
c001f16a:	68 57 c5 02 c0       	push   0xc002c557
c001f16f:	e8 12 3d ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f174:	83 c4 10             	add    esp,0x10
c001f177:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f17a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f17f:	74 0d                	je     c001f18e <Vm::faultHandler(regs*)+0x45d>
c001f181:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f188:	0f 87 9e 01 00 00    	ja     c001f32c <Vm::faultHandler(regs*)+0x5fb>
c001f18e:	83 ec 0c             	sub    esp,0xc
c001f191:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f195:	0f b7 db             	movzx  ebx,bx
c001f198:	50                   	push   eax
c001f199:	e8 9e f7 ff ff       	call   c001e93c <Vm::inbv(unsigned short)>
c001f19e:	83 c4 0c             	add    esp,0xc
c001f1a1:	0f b6 c0             	movzx  eax,al
c001f1a4:	50                   	push   eax
c001f1a5:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f1a9:	50                   	push   eax
c001f1aa:	53                   	push   ebx
c001f1ab:	e8 41 fb ff ff       	call   c001ecf1 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f1b0:	83 c4 10             	add    esp,0x10
c001f1b3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f1b6:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f1ba:	74 03                	je     c001f1bf <Vm::faultHandler(regs*)+0x48e>
c001f1bc:	48                   	dec    eax
c001f1bd:	eb 01                	jmp    c001f1c0 <Vm::faultHandler(regs*)+0x48f>
c001f1bf:	40                   	inc    eax
c001f1c0:	0f b7 c0             	movzx  eax,ax
c001f1c3:	eb 7f                	jmp    c001f244 <Vm::faultHandler(regs*)+0x513>
c001f1c5:	83 ec 0c             	sub    esp,0xc
c001f1c8:	68 89 c5 02 c0       	push   0xc002c589
c001f1cd:	e8 b4 3c ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f1d2:	83 c4 10             	add    esp,0x10
c001f1d5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f1d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1dd:	74 0d                	je     c001f1ec <Vm::faultHandler(regs*)+0x4bb>
c001f1df:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f1e6:	0f 87 40 01 00 00    	ja     c001f32c <Vm::faultHandler(regs*)+0x5fb>
c001f1ec:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f1ef:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f1f3:	0f b7 db             	movzx  ebx,bx
c001f1f6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1fb:	74 20                	je     c001f21d <Vm::faultHandler(regs*)+0x4ec>
c001f1fd:	ed                   	in     eax,dx
c001f1fe:	51                   	push   ecx
c001f1ff:	50                   	push   eax
c001f200:	56                   	push   esi
c001f201:	53                   	push   ebx
c001f202:	e8 15 fb ff ff       	call   c001ed1c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f207:	83 c4 10             	add    esp,0x10
c001f20a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f20d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f211:	74 05                	je     c001f218 <Vm::faultHandler(regs*)+0x4e7>
c001f213:	83 e8 04             	sub    eax,0x4
c001f216:	eb 27                	jmp    c001f23f <Vm::faultHandler(regs*)+0x50e>
c001f218:	83 c0 04             	add    eax,0x4
c001f21b:	eb 22                	jmp    c001f23f <Vm::faultHandler(regs*)+0x50e>
c001f21d:	66 ed                	in     ax,dx
c001f21f:	0f b7 c0             	movzx  eax,ax
c001f222:	52                   	push   edx
c001f223:	50                   	push   eax
c001f224:	56                   	push   esi
c001f225:	53                   	push   ebx
c001f226:	e8 db fa ff ff       	call   c001ed06 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f22b:	83 c4 10             	add    esp,0x10
c001f22e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f231:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f235:	74 05                	je     c001f23c <Vm::faultHandler(regs*)+0x50b>
c001f237:	83 e8 02             	sub    eax,0x2
c001f23a:	eb 03                	jmp    c001f23f <Vm::faultHandler(regs*)+0x50e>
c001f23c:	83 c0 02             	add    eax,0x2
c001f23f:	25 ff ff 00 00       	and    eax,0xffff
c001f244:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f247:	e9 b1 02 00 00       	jmp    c001f4fd <Vm::faultHandler(regs*)+0x7cc>
c001f24c:	83 ec 0c             	sub    esp,0xc
c001f24f:	4b                   	dec    ebx
c001f250:	68 8f c5 02 c0       	push   0xc002c58f
c001f255:	e8 2c 3c ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f25a:	83 c4 10             	add    esp,0x10
c001f25d:	80 fb 05             	cmp    bl,0x5
c001f260:	77 0a                	ja     c001f26c <Vm::faultHandler(regs*)+0x53b>
c001f262:	0f b6 db             	movzx  ebx,bl
c001f265:	ff 24 9d 00 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3a00]
c001f26c:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f270:	eb 1b                	jmp    c001f28d <Vm::faultHandler(regs*)+0x55c>
c001f272:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f276:	eb 15                	jmp    c001f28d <Vm::faultHandler(regs*)+0x55c>
c001f278:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f27c:	eb 0f                	jmp    c001f28d <Vm::faultHandler(regs*)+0x55c>
c001f27e:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f282:	eb 09                	jmp    c001f28d <Vm::faultHandler(regs*)+0x55c>
c001f284:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f287:	eb 04                	jmp    c001f28d <Vm::faultHandler(regs*)+0x55c>
c001f289:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f28d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f292:	74 0d                	je     c001f2a1 <Vm::faultHandler(regs*)+0x570>
c001f294:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f29b:	0f 87 8b 00 00 00    	ja     c001f32c <Vm::faultHandler(regs*)+0x5fb>
c001f2a1:	53                   	push   ebx
c001f2a2:	53                   	push   ebx
c001f2a3:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f2a7:	52                   	push   edx
c001f2a8:	50                   	push   eax
c001f2a9:	e8 0f fa ff ff       	call   c001ecbd <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f2ae:	5e                   	pop    esi
c001f2af:	0f b6 c0             	movzx  eax,al
c001f2b2:	5d                   	pop    ebp
c001f2b3:	50                   	push   eax
c001f2b4:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2b8:	50                   	push   eax
c001f2b9:	e8 91 f6 ff ff       	call   c001e94f <Vm::outbv(unsigned short, unsigned char)>
c001f2be:	83 c4 10             	add    esp,0x10
c001f2c1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f2c4:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2c8:	74 03                	je     c001f2cd <Vm::faultHandler(regs*)+0x59c>
c001f2ca:	48                   	dec    eax
c001f2cb:	eb 01                	jmp    c001f2ce <Vm::faultHandler(regs*)+0x59d>
c001f2cd:	40                   	inc    eax
c001f2ce:	0f b7 c0             	movzx  eax,ax
c001f2d1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f2d4:	e9 24 02 00 00       	jmp    c001f4fd <Vm::faultHandler(regs*)+0x7cc>
c001f2d9:	83 ec 0c             	sub    esp,0xc
c001f2dc:	4b                   	dec    ebx
c001f2dd:	68 8f c5 02 c0       	push   0xc002c58f
c001f2e2:	e8 9f 3b ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f2e7:	83 c4 10             	add    esp,0x10
c001f2ea:	80 fb 05             	cmp    bl,0x5
c001f2ed:	77 0a                	ja     c001f2f9 <Vm::faultHandler(regs*)+0x5c8>
c001f2ef:	0f b6 db             	movzx  ebx,bl
c001f2f2:	ff 24 9d 18 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd39e8]
c001f2f9:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f2fd:	eb 1b                	jmp    c001f31a <Vm::faultHandler(regs*)+0x5e9>
c001f2ff:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f303:	eb 15                	jmp    c001f31a <Vm::faultHandler(regs*)+0x5e9>
c001f305:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f309:	eb 0f                	jmp    c001f31a <Vm::faultHandler(regs*)+0x5e9>
c001f30b:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f30f:	eb 09                	jmp    c001f31a <Vm::faultHandler(regs*)+0x5e9>
c001f311:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f314:	eb 04                	jmp    c001f31a <Vm::faultHandler(regs*)+0x5e9>
c001f316:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f31a:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f31d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f322:	74 39                	je     c001f35d <Vm::faultHandler(regs*)+0x62c>
c001f324:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f32a:	76 31                	jbe    c001f35d <Vm::faultHandler(regs*)+0x62c>
c001f32c:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f330:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f334:	51                   	push   ecx
c001f335:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f339:	51                   	push   ecx
c001f33a:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f33e:	51                   	push   ecx
c001f33f:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f343:	51                   	push   ecx
c001f344:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f348:	52                   	push   edx
c001f349:	50                   	push   eax
c001f34a:	50                   	push   eax
c001f34b:	68 5c c5 02 c0       	push   0xc002c55c
c001f350:	e8 31 3b ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f355:	83 c4 20             	add    esp,0x20
c001f358:	e9 fb 01 00 00       	jmp    c001f558 <Vm::faultHandler(regs*)+0x827>
c001f35d:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f360:	0f b7 d3             	movzx  edx,bx
c001f363:	81 e6 00 04 00 00    	and    esi,0x400
c001f369:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f36c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f371:	74 1d                	je     c001f390 <Vm::faultHandler(regs*)+0x65f>
c001f373:	51                   	push   ecx
c001f374:	51                   	push   ecx
c001f375:	52                   	push   edx
c001f376:	50                   	push   eax
c001f377:	e8 64 f9 ff ff       	call   c001ece0 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f37c:	83 c4 10             	add    esp,0x10
c001f37f:	89 ea                	mov    edx,ebp
c001f381:	ef                   	out    dx,eax
c001f382:	85 f6                	test   esi,esi
c001f384:	74 05                	je     c001f38b <Vm::faultHandler(regs*)+0x65a>
c001f386:	83 eb 04             	sub    ebx,0x4
c001f389:	eb 21                	jmp    c001f3ac <Vm::faultHandler(regs*)+0x67b>
c001f38b:	83 c3 04             	add    ebx,0x4
c001f38e:	eb 1c                	jmp    c001f3ac <Vm::faultHandler(regs*)+0x67b>
c001f390:	51                   	push   ecx
c001f391:	51                   	push   ecx
c001f392:	52                   	push   edx
c001f393:	50                   	push   eax
c001f394:	e8 35 f9 ff ff       	call   c001ecce <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f399:	83 c4 10             	add    esp,0x10
c001f39c:	89 ea                	mov    edx,ebp
c001f39e:	66 ef                	out    dx,ax
c001f3a0:	85 f6                	test   esi,esi
c001f3a2:	74 05                	je     c001f3a9 <Vm::faultHandler(regs*)+0x678>
c001f3a4:	83 eb 02             	sub    ebx,0x2
c001f3a7:	eb 03                	jmp    c001f3ac <Vm::faultHandler(regs*)+0x67b>
c001f3a9:	83 c3 02             	add    ebx,0x2
c001f3ac:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f3b2:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f3b5:	e9 43 01 00 00       	jmp    c001f4fd <Vm::faultHandler(regs*)+0x7cc>
c001f3ba:	53                   	push   ebx
c001f3bb:	53                   	push   ebx
c001f3bc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3c0:	50                   	push   eax
c001f3c1:	68 95 c5 02 c0       	push   0xc002c595
c001f3c6:	e8 bb 3a ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f3cb:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f3d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3d6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3d9:	e8 5e f5 ff ff       	call   c001e93c <Vm::inbv(unsigned short)>
c001f3de:	0f b6 c0             	movzx  eax,al
c001f3e1:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f3e4:	eb 5e                	jmp    c001f444 <Vm::faultHandler(regs*)+0x713>
c001f3e6:	51                   	push   ecx
c001f3e7:	51                   	push   ecx
c001f3e8:	53                   	push   ebx
c001f3e9:	68 9b c5 02 c0       	push   0xc002c59b
c001f3ee:	e8 93 3a ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f3f3:	83 c4 10             	add    esp,0x10
c001f3f6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3fb:	74 07                	je     c001f404 <Vm::faultHandler(regs*)+0x6d3>
c001f3fd:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f401:	ed                   	in     eax,dx
c001f402:	eb 14                	jmp    c001f418 <Vm::faultHandler(regs*)+0x6e7>
c001f404:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f407:	66 31 db             	xor    bx,bx
c001f40a:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f40d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f411:	66 ed                	in     ax,dx
c001f413:	0f b7 c0             	movzx  eax,ax
c001f416:	09 d8                	or     eax,ebx
c001f418:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f41b:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f41f:	e9 dc 00 00 00       	jmp    c001f500 <Vm::faultHandler(regs*)+0x7cf>
c001f424:	50                   	push   eax
c001f425:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f428:	53                   	push   ebx
c001f429:	68 a1 c5 02 c0       	push   0xc002c5a1
c001f42e:	e8 53 3a ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f433:	58                   	pop    eax
c001f434:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f438:	5a                   	pop    edx
c001f439:	50                   	push   eax
c001f43a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f43e:	50                   	push   eax
c001f43f:	e8 0b f5 ff ff       	call   c001e94f <Vm::outbv(unsigned short, unsigned char)>
c001f444:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f448:	e9 85 00 00 00       	jmp    c001f4d2 <Vm::faultHandler(regs*)+0x7a1>
c001f44d:	50                   	push   eax
c001f44e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f451:	53                   	push   ebx
c001f452:	68 aa c5 02 c0       	push   0xc002c5aa
c001f457:	e8 2a 3a ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f45c:	83 c4 10             	add    esp,0x10
c001f45f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f463:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f468:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f46b:	74 03                	je     c001f470 <Vm::faultHandler(regs*)+0x73f>
c001f46d:	ef                   	out    dx,eax
c001f46e:	eb ab                	jmp    c001f41b <Vm::faultHandler(regs*)+0x6ea>
c001f470:	66 ef                	out    dx,ax
c001f472:	eb a7                	jmp    c001f41b <Vm::faultHandler(regs*)+0x6ea>
c001f474:	55                   	push   ebp
c001f475:	55                   	push   ebp
c001f476:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f479:	68 b3 c5 02 c0       	push   0xc002c5b3
c001f47e:	e8 03 3a ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f483:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f48a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f48e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f491:	e8 a6 f4 ff ff       	call   c001e93c <Vm::inbv(unsigned short)>
c001f496:	0f b6 c0             	movzx  eax,al
c001f499:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f49c:	eb 31                	jmp    c001f4cf <Vm::faultHandler(regs*)+0x79e>
c001f49e:	56                   	push   esi
c001f49f:	56                   	push   esi
c001f4a0:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4a3:	68 b9 c5 02 c0       	push   0xc002c5b9
c001f4a8:	e8 d9 39 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f4ad:	83 c4 10             	add    esp,0x10
c001f4b0:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f4b3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4b8:	74 03                	je     c001f4bd <Vm::faultHandler(regs*)+0x78c>
c001f4ba:	ed                   	in     eax,dx
c001f4bb:	eb 0d                	jmp    c001f4ca <Vm::faultHandler(regs*)+0x799>
c001f4bd:	66 ed                	in     ax,dx
c001f4bf:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f4c2:	0f b7 c0             	movzx  eax,ax
c001f4c5:	66 31 d2             	xor    dx,dx
c001f4c8:	09 d0                	or     eax,edx
c001f4ca:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f4cd:	eb 2e                	jmp    c001f4fd <Vm::faultHandler(regs*)+0x7cc>
c001f4cf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f4d2:	83 c4 10             	add    esp,0x10
c001f4d5:	eb 29                	jmp    c001f500 <Vm::faultHandler(regs*)+0x7cf>
c001f4d7:	50                   	push   eax
c001f4d8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4db:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4de:	68 c8 c5 02 c0       	push   0xc002c5c8
c001f4e3:	e8 9e 39 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f4e8:	83 c4 10             	add    esp,0x10
c001f4eb:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f4ee:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4f3:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f4f6:	74 03                	je     c001f4fb <Vm::faultHandler(regs*)+0x7ca>
c001f4f8:	ef                   	out    dx,eax
c001f4f9:	eb 02                	jmp    c001f4fd <Vm::faultHandler(regs*)+0x7cc>
c001f4fb:	66 ef                	out    dx,ax
c001f4fd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f500:	b0 01                	mov    al,0x1
c001f502:	eb 56                	jmp    c001f55a <Vm::faultHandler(regs*)+0x829>
c001f504:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f508:	51                   	push   ecx
c001f509:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f50d:	51                   	push   ecx
c001f50e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f512:	51                   	push   ecx
c001f513:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f517:	51                   	push   ecx
c001f518:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f51c:	52                   	push   edx
c001f51d:	50                   	push   eax
c001f51e:	50                   	push   eax
c001f51f:	68 d1 c5 02 c0       	push   0xc002c5d1
c001f524:	e8 5d 39 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c001f529:	83 c4 20             	add    esp,0x20
c001f52c:	83 ec 0c             	sub    esp,0xc
c001f52f:	6a 60                	push   0x60
c001f531:	e8 06 f4 ff ff       	call   c001e93c <Vm::inbv(unsigned short)>
c001f536:	83 c4 10             	add    esp,0x10
c001f539:	3c 1c                	cmp    al,0x1c
c001f53b:	74 04                	je     c001f541 <Vm::faultHandler(regs*)+0x810>
c001f53d:	3c 5a                	cmp    al,0x5a
c001f53f:	75 eb                	jne    c001f52c <Vm::faultHandler(regs*)+0x7fb>
c001f541:	3c 1c                	cmp    al,0x1c
c001f543:	74 04                	je     c001f549 <Vm::faultHandler(regs*)+0x818>
c001f545:	3c 5a                	cmp    al,0x5a
c001f547:	75 0f                	jne    c001f558 <Vm::faultHandler(regs*)+0x827>
c001f549:	83 ec 0c             	sub    esp,0xc
c001f54c:	6a 60                	push   0x60
c001f54e:	e8 e9 f3 ff ff       	call   c001e93c <Vm::inbv(unsigned short)>
c001f553:	83 c4 10             	add    esp,0x10
c001f556:	eb e9                	jmp    c001f541 <Vm::faultHandler(regs*)+0x810>
c001f558:	31 c0                	xor    eax,eax
c001f55a:	83 c4 1c             	add    esp,0x1c
c001f55d:	5b                   	pop    ebx
c001f55e:	5e                   	pop    esi
c001f55f:	5f                   	pop    edi
c001f560:	5d                   	pop    ebp
c001f561:	c3                   	ret    

c001f562 <Vm::fpuInternalTo32(unsigned long long)>:
c001f562:	57                   	push   edi
c001f563:	56                   	push   esi
c001f564:	53                   	push   ebx
c001f565:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56d:	89 d6                	mov    esi,edx
c001f56f:	89 d7                	mov    edi,edx
c001f571:	89 c1                	mov    ecx,eax
c001f573:	c1 ef 14             	shr    edi,0x14
c001f576:	89 d3                	mov    ebx,edx
c001f578:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f57e:	31 d2                	xor    edx,edx
c001f580:	89 f8                	mov    eax,edi
c001f582:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f588:	bf ff 00 00 00       	mov    edi,0xff
c001f58d:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f592:	83 d2 ff             	adc    edx,0xffffffff
c001f595:	39 c7                	cmp    edi,eax
c001f597:	bf 00 00 00 00       	mov    edi,0x0
c001f59c:	19 d7                	sbb    edi,edx
c001f59e:	72 15                	jb     c001f5b5 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f5a0:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f5a4:	c1 e0 17             	shl    eax,0x17
c001f5a7:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f5ad:	09 f1                	or     ecx,esi
c001f5af:	09 c1                	or     ecx,eax
c001f5b1:	89 cf                	mov    edi,ecx
c001f5b3:	eb 02                	jmp    c001f5b7 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f5b5:	31 ff                	xor    edi,edi
c001f5b7:	89 f8                	mov    eax,edi
c001f5b9:	5b                   	pop    ebx
c001f5ba:	5e                   	pop    esi
c001f5bb:	5f                   	pop    edi
c001f5bc:	c3                   	ret    

c001f5bd <Vm::fpuInternalTo64(unsigned long long)>:
c001f5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f5c5:	c3                   	ret    

c001f5c6 <Vm::fpu32ToInternal(unsigned int)>:
c001f5c6:	57                   	push   edi
c001f5c7:	31 ff                	xor    edi,edi
c001f5c9:	56                   	push   esi
c001f5ca:	53                   	push   ebx
c001f5cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5cf:	89 cb                	mov    ebx,ecx
c001f5d1:	89 ce                	mov    esi,ecx
c001f5d3:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f5d9:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f5df:	c1 e9 17             	shr    ecx,0x17
c001f5e2:	89 f0                	mov    eax,esi
c001f5e4:	0f b6 d1             	movzx  edx,cl
c001f5e7:	81 c2 80 03 00 00    	add    edx,0x380
c001f5ed:	89 d1                	mov    ecx,edx
c001f5ef:	89 fa                	mov    edx,edi
c001f5f1:	c1 e1 14             	shl    ecx,0x14
c001f5f4:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f5f8:	c1 e0 1d             	shl    eax,0x1d
c001f5fb:	89 d7                	mov    edi,edx
c001f5fd:	89 c6                	mov    esi,eax
c001f5ff:	89 ca                	mov    edx,ecx
c001f601:	89 f0                	mov    eax,esi
c001f603:	09 fa                	or     edx,edi
c001f605:	09 da                	or     edx,ebx
c001f607:	5b                   	pop    ebx
c001f608:	5e                   	pop    esi
c001f609:	5f                   	pop    edi
c001f60a:	c3                   	ret    

c001f60b <Vm::fpu64ToInternal(unsigned long long)>:
c001f60b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f60f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f613:	c3                   	ret    

c001f614 <Vm::fpuFloatToLong(unsigned long long)>:
c001f614:	57                   	push   edi
c001f615:	31 c0                	xor    eax,eax
c001f617:	56                   	push   esi
c001f618:	31 d2                	xor    edx,edx
c001f61a:	53                   	push   ebx
c001f61b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f61f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f623:	89 d9                	mov    ecx,ebx
c001f625:	c1 e9 14             	shr    ecx,0x14
c001f628:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f62e:	89 cf                	mov    edi,ecx
c001f630:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f636:	78 33                	js     c001f66b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f638:	89 d9                	mov    ecx,ebx
c001f63a:	89 f0                	mov    eax,esi
c001f63c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f642:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f648:	89 ca                	mov    edx,ecx
c001f64a:	b9 34 00 00 00       	mov    ecx,0x34
c001f64f:	29 f9                	sub    ecx,edi
c001f651:	0f ad d0             	shrd   eax,edx,cl
c001f654:	d3 fa                	sar    edx,cl
c001f656:	f6 c1 20             	test   cl,0x20
c001f659:	74 05                	je     c001f660 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f65b:	89 d0                	mov    eax,edx
c001f65d:	c1 fa 1f             	sar    edx,0x1f
c001f660:	85 db                	test   ebx,ebx
c001f662:	79 07                	jns    c001f66b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f664:	f7 d8                	neg    eax
c001f666:	83 d2 00             	adc    edx,0x0
c001f669:	f7 da                	neg    edx
c001f66b:	5b                   	pop    ebx
c001f66c:	5e                   	pop    esi
c001f66d:	5f                   	pop    edi
c001f66e:	c3                   	ret    

c001f66f <Vm::fpuULongToFloat(unsigned long long)>:
c001f66f:	57                   	push   edi
c001f670:	31 c9                	xor    ecx,ecx
c001f672:	56                   	push   esi
c001f673:	53                   	push   ebx
c001f674:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f678:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f67c:	0f ba e7 14          	bt     edi,0x14
c001f680:	72 07                	jb     c001f689 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f682:	01 f6                	add    esi,esi
c001f684:	11 ff                	adc    edi,edi
c001f686:	41                   	inc    ecx
c001f687:	eb f3                	jmp    c001f67c <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f689:	89 fa                	mov    edx,edi
c001f68b:	89 f0                	mov    eax,esi
c001f68d:	bb 33 04 00 00       	mov    ebx,0x433
c001f692:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f698:	29 cb                	sub    ebx,ecx
c001f69a:	89 d9                	mov    ecx,ebx
c001f69c:	5b                   	pop    ebx
c001f69d:	c1 e1 14             	shl    ecx,0x14
c001f6a0:	5e                   	pop    esi
c001f6a1:	09 ca                	or     edx,ecx
c001f6a3:	5f                   	pop    edi
c001f6a4:	c3                   	ret    

c001f6a5 <Vm::fpuLongToFloat(long long)>:
c001f6a5:	56                   	push   esi
c001f6a6:	31 c0                	xor    eax,eax
c001f6a8:	53                   	push   ebx
c001f6a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f6ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f6b1:	39 c8                	cmp    eax,ecx
c001f6b3:	19 d8                	sbb    eax,ebx
c001f6b5:	7d 04                	jge    c001f6bb <Vm::fpuLongToFloat(long long)+0x16>
c001f6b7:	31 f6                	xor    esi,esi
c001f6b9:	eb 0c                	jmp    c001f6c7 <Vm::fpuLongToFloat(long long)+0x22>
c001f6bb:	f7 d9                	neg    ecx
c001f6bd:	be 01 00 00 00       	mov    esi,0x1
c001f6c2:	83 d3 00             	adc    ebx,0x0
c001f6c5:	f7 db                	neg    ebx
c001f6c7:	31 c0                	xor    eax,eax
c001f6c9:	0f ba e3 14          	bt     ebx,0x14
c001f6cd:	72 07                	jb     c001f6d6 <Vm::fpuLongToFloat(long long)+0x31>
c001f6cf:	01 c9                	add    ecx,ecx
c001f6d1:	11 db                	adc    ebx,ebx
c001f6d3:	40                   	inc    eax
c001f6d4:	eb f3                	jmp    c001f6c9 <Vm::fpuLongToFloat(long long)+0x24>
c001f6d6:	ba 33 04 00 00       	mov    edx,0x433
c001f6db:	29 c2                	sub    edx,eax
c001f6dd:	89 c8                	mov    eax,ecx
c001f6df:	c1 e2 14             	shl    edx,0x14
c001f6e2:	89 d9                	mov    ecx,ebx
c001f6e4:	89 f3                	mov    ebx,esi
c001f6e6:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6ec:	09 ca                	or     edx,ecx
c001f6ee:	84 db                	test   bl,bl
c001f6f0:	74 06                	je     c001f6f8 <Vm::fpuLongToFloat(long long)+0x53>
c001f6f2:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f6f8:	5b                   	pop    ebx
c001f6f9:	5e                   	pop    esi
c001f6fa:	c3                   	ret    

c001f6fb <Vm::fpuGet0()>:
c001f6fb:	31 c0                	xor    eax,eax
c001f6fd:	31 d2                	xor    edx,edx
c001f6ff:	c3                   	ret    

c001f700 <Vm::fpuGet1()>:
c001f700:	b8 01 00 00 00       	mov    eax,0x1
c001f705:	31 d2                	xor    edx,edx
c001f707:	c3                   	ret    

c001f708 <Vm::fpuGetPi()>:
c001f708:	b8 03 00 00 00       	mov    eax,0x3
c001f70d:	31 d2                	xor    edx,edx
c001f70f:	c3                   	ret    

c001f710 <Vm::fpuGetLog2E()>:
c001f710:	83 ec 18             	sub    esp,0x18
c001f713:	68 30 c6 02 c0       	push   0xc002c630
c001f718:	e8 0e ae ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001f71d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f722:	31 d2                	xor    edx,edx
c001f724:	83 c4 1c             	add    esp,0x1c
c001f727:	c3                   	ret    

c001f728 <Vm::fpuGetLogE2()>:
c001f728:	83 ec 18             	sub    esp,0x18
c001f72b:	68 3c c6 02 c0       	push   0xc002c63c
c001f730:	e8 f6 ad ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001f735:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f73a:	31 d2                	xor    edx,edx
c001f73c:	83 c4 1c             	add    esp,0x1c
c001f73f:	c3                   	ret    

c001f740 <Vm::fpuGetLog210()>:
c001f740:	83 ec 18             	sub    esp,0x18
c001f743:	68 48 c6 02 c0       	push   0xc002c648
c001f748:	e8 de ad ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001f74d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f752:	31 d2                	xor    edx,edx
c001f754:	83 c4 1c             	add    esp,0x1c
c001f757:	c3                   	ret    

c001f758 <Vm::fpuGetLog102()>:
c001f758:	83 ec 18             	sub    esp,0x18
c001f75b:	68 55 c6 02 c0       	push   0xc002c655
c001f760:	e8 c6 ad ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001f765:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f76a:	31 d2                	xor    edx,edx
c001f76c:	83 c4 1c             	add    esp,0x1c
c001f76f:	c3                   	ret    

c001f770 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f770:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f774:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f778:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f77c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f780:	0f 92 c0             	setb   al
c001f783:	c3                   	ret    

c001f784 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f784:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f790:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f794:	09 c2                	or     edx,eax
c001f796:	0f 94 c0             	sete   al
c001f799:	c3                   	ret    

c001f79a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f79a:	57                   	push   edi
c001f79b:	56                   	push   esi
c001f79c:	53                   	push   ebx
c001f79d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f7a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7a5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f7a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f7ad:	57                   	push   edi
c001f7ae:	56                   	push   esi
c001f7af:	53                   	push   ebx
c001f7b0:	51                   	push   ecx
c001f7b1:	e8 ce ff ff ff       	call   c001f784 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f7b6:	83 c4 10             	add    esp,0x10
c001f7b9:	88 c2                	mov    dl,al
c001f7bb:	31 c0                	xor    eax,eax
c001f7bd:	84 d2                	test   dl,dl
c001f7bf:	75 0c                	jne    c001f7cd <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f7c1:	57                   	push   edi
c001f7c2:	56                   	push   esi
c001f7c3:	53                   	push   ebx
c001f7c4:	51                   	push   ecx
c001f7c5:	e8 a6 ff ff ff       	call   c001f770 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f7ca:	83 c4 10             	add    esp,0x10
c001f7cd:	83 e0 01             	and    eax,0x1
c001f7d0:	5b                   	pop    ebx
c001f7d1:	88 c1                	mov    cl,al
c001f7d3:	83 e2 01             	and    edx,0x1
c001f7d6:	a0 c1 18 03 c0       	mov    al,ds:0xc00318c1
c001f7db:	c1 e2 06             	shl    edx,0x6
c001f7de:	83 e0 ba             	and    eax,0xffffffba
c001f7e1:	5e                   	pop    esi
c001f7e2:	09 c8                	or     eax,ecx
c001f7e4:	5f                   	pop    edi
c001f7e5:	09 d0                	or     eax,edx
c001f7e7:	a2 c1 18 03 c0       	mov    ds:0xc00318c1,al
c001f7ec:	c3                   	ret    

c001f7ed <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f7ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7f5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f7f9:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f7fd:	c3                   	ret    

c001f7fe <Vm::fpuAbs(unsigned long long)>:
c001f7fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f802:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f806:	c3                   	ret    

c001f807 <Vm::fpuChs(unsigned long long)>:
c001f807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f80b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f80f:	f7 d8                	neg    eax
c001f811:	83 d2 00             	adc    edx,0x0
c001f814:	f7 da                	neg    edx
c001f816:	c3                   	ret    

c001f817 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f817:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f81b:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f820:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f824:	eb c7                	jmp    c001f7ed <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f826 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f826:	53                   	push   ebx
c001f827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f82b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f82f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f837:	0f af ca             	imul   ecx,edx
c001f83a:	0f af d8             	imul   ebx,eax
c001f83d:	f7 e2                	mul    edx
c001f83f:	01 d9                	add    ecx,ebx
c001f841:	5b                   	pop    ebx
c001f842:	01 ca                	add    edx,ecx
c001f844:	c3                   	ret    

c001f845 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f845:	83 ec 0c             	sub    esp,0xc
c001f848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f84c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f858:	e8 9f 70 00 00       	call   c00268fc <__udivdi3>
c001f85d:	83 c4 1c             	add    esp,0x1c
c001f860:	c3                   	ret    

c001f861 <Vm::fpuSquare(unsigned long long)>:
c001f861:	50                   	push   eax
c001f862:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f866:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f86a:	52                   	push   edx
c001f86b:	50                   	push   eax
c001f86c:	52                   	push   edx
c001f86d:	50                   	push   eax
c001f86e:	e8 b3 ff ff ff       	call   c001f826 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f873:	83 c4 14             	add    esp,0x14
c001f876:	c3                   	ret    

c001f877 <Vm::fpuGetReg(int)>:
c001f877:	83 ec 0c             	sub    esp,0xc
c001f87a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f87f:	76 10                	jbe    c001f891 <Vm::fpuGetReg(int)+0x1a>
c001f881:	83 ec 0c             	sub    esp,0xc
c001f884:	68 62 c6 02 c0       	push   0xc002c662
c001f889:	e8 9d ac ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001f88e:	83 c4 10             	add    esp,0x10
c001f891:	a0 c1 18 03 c0       	mov    al,ds:0xc00318c1
c001f896:	b9 08 00 00 00       	mov    ecx,0x8
c001f89b:	c0 e8 03             	shr    al,0x3
c001f89e:	83 e0 07             	and    eax,0x7
c001f8a1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f8a5:	99                   	cdq    
c001f8a6:	f7 f9                	idiv   ecx
c001f8a8:	8b 04 d5 c4 18 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce73c]
c001f8af:	8b 14 d5 c8 18 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce738]
c001f8b6:	83 c4 0c             	add    esp,0xc
c001f8b9:	c3                   	ret    

c001f8ba <Vm::fpuSetReg(int, unsigned long long)>:
c001f8ba:	57                   	push   edi
c001f8bb:	56                   	push   esi
c001f8bc:	52                   	push   edx
c001f8bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f8c1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f8c5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f8ca:	76 10                	jbe    c001f8dc <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f8cc:	83 ec 0c             	sub    esp,0xc
c001f8cf:	68 75 c6 02 c0       	push   0xc002c675
c001f8d4:	e8 52 ac ff ff       	call   c001a52b <Krnl::panic(char const*)>
c001f8d9:	83 c4 10             	add    esp,0x10
c001f8dc:	a0 c1 18 03 c0       	mov    al,ds:0xc00318c1
c001f8e1:	b9 08 00 00 00       	mov    ecx,0x8
c001f8e6:	c0 e8 03             	shr    al,0x3
c001f8e9:	83 e0 07             	and    eax,0x7
c001f8ec:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f8f0:	99                   	cdq    
c001f8f1:	f7 f9                	idiv   ecx
c001f8f3:	89 34 d5 c4 18 03 c0 	mov    DWORD PTR [edx*8-0x3ffce73c],esi
c001f8fa:	89 3c d5 c8 18 03 c0 	mov    DWORD PTR [edx*8-0x3ffce738],edi
c001f901:	58                   	pop    eax
c001f902:	5e                   	pop    esi
c001f903:	5f                   	pop    edi
c001f904:	c3                   	ret    

c001f905 <Vm::fpuPush(unsigned long long)>:
c001f905:	a0 c1 18 03 c0       	mov    al,ds:0xc00318c1
c001f90a:	c0 e8 03             	shr    al,0x3
c001f90d:	83 e0 07             	and    eax,0x7
c001f910:	83 c0 07             	add    eax,0x7
c001f913:	88 c2                	mov    dl,al
c001f915:	83 e0 07             	and    eax,0x7
c001f918:	83 e2 07             	and    edx,0x7
c001f91b:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f922:	8a 15 c1 18 03 c0    	mov    dl,BYTE PTR ds:0xc00318c1
c001f928:	83 e2 c7             	and    edx,0xffffffc7
c001f92b:	09 ca                	or     edx,ecx
c001f92d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f931:	88 15 c1 18 03 c0    	mov    BYTE PTR ds:0xc00318c1,dl
c001f937:	89 0c c5 c8 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce738],ecx
c001f93e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f942:	89 14 c5 c4 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce73c],edx
c001f949:	a1 04 19 03 c0       	mov    eax,ds:0xc0031904
c001f94e:	83 f8 08             	cmp    eax,0x8
c001f951:	75 08                	jne    c001f95b <Vm::fpuPush(unsigned long long)+0x56>
c001f953:	80 0d c0 18 03 c0 40 	or     BYTE PTR ds:0xc00318c0,0x40
c001f95a:	c3                   	ret    
c001f95b:	40                   	inc    eax
c001f95c:	a3 04 19 03 c0       	mov    ds:0xc0031904,eax
c001f961:	c3                   	ret    

c001f962 <Vm::fpuPop()>:
c001f962:	8a 0d c1 18 03 c0    	mov    cl,BYTE PTR ds:0xc00318c1
c001f968:	53                   	push   ebx
c001f969:	c0 e9 03             	shr    cl,0x3
c001f96c:	8a 1d c1 18 03 c0    	mov    bl,BYTE PTR ds:0xc00318c1
c001f972:	83 e1 07             	and    ecx,0x7
c001f975:	83 e3 c7             	and    ebx,0xffffffc7
c001f978:	8b 04 cd c4 18 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce73c]
c001f97f:	8b 14 cd c8 18 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce738]
c001f986:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f98d:	83 e1 38             	and    ecx,0x38
c001f990:	09 d9                	or     ecx,ebx
c001f992:	88 0d c1 18 03 c0    	mov    BYTE PTR ds:0xc00318c1,cl
c001f998:	8b 0d 04 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031904
c001f99e:	85 c9                	test   ecx,ecx
c001f9a0:	74 09                	je     c001f9ab <Vm::fpuPop()+0x49>
c001f9a2:	49                   	dec    ecx
c001f9a3:	89 0d 04 19 03 c0    	mov    DWORD PTR ds:0xc0031904,ecx
c001f9a9:	eb 07                	jmp    c001f9b2 <Vm::fpuPop()+0x50>
c001f9ab:	80 0d c0 18 03 c0 40 	or     BYTE PTR ds:0xc00318c0,0x40
c001f9b2:	5b                   	pop    ebx
c001f9b3:	c3                   	ret    

c001f9b4 <Vm::x87Handler(regs*)>:
c001f9b4:	55                   	push   ebp
c001f9b5:	57                   	push   edi
c001f9b6:	56                   	push   esi
c001f9b7:	53                   	push   ebx
c001f9b8:	83 ec 1c             	sub    esp,0x1c
c001f9bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f9bf:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f9c4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f9c7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f9cf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f9d3:	50                   	push   eax
c001f9d4:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f9d8:	50                   	push   eax
c001f9d9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f9dd:	50                   	push   eax
c001f9de:	53                   	push   ebx
c001f9df:	e8 0e a2 ff ff       	call   c0019bf2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f9e4:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f9e7:	83 c4 10             	add    esp,0x10
c001f9ea:	89 c6                	mov    esi,eax
c001f9ec:	80 fa d9             	cmp    dl,0xd9
c001f9ef:	0f 85 52 01 00 00    	jne    c001fb47 <Vm::x87Handler(regs*)+0x193>
c001f9f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9f9:	8d 50 20             	lea    edx,[eax+0x20]
c001f9fc:	80 fa 0e             	cmp    dl,0xe
c001f9ff:	0f 87 86 00 00 00    	ja     c001fa8b <Vm::x87Handler(regs*)+0xd7>
c001fa05:	0f b6 d2             	movzx  edx,dl
c001fa08:	ff 24 95 88 c6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3978]
c001fa0f:	e8 e7 fc ff ff       	call   c001f6fb <Vm::fpuGet0()>
c001fa14:	eb 05                	jmp    c001fa1b <Vm::x87Handler(regs*)+0x67>
c001fa16:	e8 e5 fc ff ff       	call   c001f700 <Vm::fpuGet1()>
c001fa1b:	57                   	push   edi
c001fa1c:	57                   	push   edi
c001fa1d:	52                   	push   edx
c001fa1e:	50                   	push   eax
c001fa1f:	e8 e1 fe ff ff       	call   c001f905 <Vm::fpuPush(unsigned long long)>
c001fa24:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa28:	83 c4 10             	add    esp,0x10
c001fa2b:	b0 01                	mov    al,0x1
c001fa2d:	e9 e3 09 00 00       	jmp    c0020415 <Vm::x87Handler(regs*)+0xa61>
c001fa32:	83 ec 0c             	sub    esp,0xc
c001fa35:	6a 00                	push   0x0
c001fa37:	e8 3b fe ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fa3c:	59                   	pop    ecx
c001fa3d:	5e                   	pop    esi
c001fa3e:	52                   	push   edx
c001fa3f:	50                   	push   eax
c001fa40:	e8 c2 fd ff ff       	call   c001f807 <Vm::fpuChs(unsigned long long)>
c001fa45:	eb 13                	jmp    c001fa5a <Vm::x87Handler(regs*)+0xa6>
c001fa47:	83 ec 0c             	sub    esp,0xc
c001fa4a:	6a 00                	push   0x0
c001fa4c:	e8 26 fe ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fa51:	5f                   	pop    edi
c001fa52:	5d                   	pop    ebp
c001fa53:	52                   	push   edx
c001fa54:	50                   	push   eax
c001fa55:	e8 a4 fd ff ff       	call   c001f7fe <Vm::fpuAbs(unsigned long long)>
c001fa5a:	83 c4 0c             	add    esp,0xc
c001fa5d:	52                   	push   edx
c001fa5e:	50                   	push   eax
c001fa5f:	6a 00                	push   0x0
c001fa61:	e8 54 fe ff ff       	call   c001f8ba <Vm::fpuSetReg(int, unsigned long long)>
c001fa66:	eb bc                	jmp    c001fa24 <Vm::x87Handler(regs*)+0x70>
c001fa68:	e8 d3 fc ff ff       	call   c001f740 <Vm::fpuGetLog210()>
c001fa6d:	eb ac                	jmp    c001fa1b <Vm::x87Handler(regs*)+0x67>
c001fa6f:	e8 9c fc ff ff       	call   c001f710 <Vm::fpuGetLog2E()>
c001fa74:	eb a5                	jmp    c001fa1b <Vm::x87Handler(regs*)+0x67>
c001fa76:	e8 8d fc ff ff       	call   c001f708 <Vm::fpuGetPi()>
c001fa7b:	eb 9e                	jmp    c001fa1b <Vm::x87Handler(regs*)+0x67>
c001fa7d:	e8 d6 fc ff ff       	call   c001f758 <Vm::fpuGetLog102()>
c001fa82:	eb 97                	jmp    c001fa1b <Vm::x87Handler(regs*)+0x67>
c001fa84:	e8 9f fc ff ff       	call   c001f728 <Vm::fpuGetLogE2()>
c001fa89:	eb 90                	jmp    c001fa1b <Vm::x87Handler(regs*)+0x67>
c001fa8b:	8d 50 40             	lea    edx,[eax+0x40]
c001fa8e:	80 fa 07             	cmp    dl,0x7
c001fa91:	77 15                	ja     c001faa8 <Vm::x87Handler(regs*)+0xf4>
c001fa93:	83 ec 0c             	sub    esp,0xc
c001fa96:	2d c0 00 00 00       	sub    eax,0xc0
c001fa9b:	50                   	push   eax
c001fa9c:	e8 d6 fd ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001faa1:	59                   	pop    ecx
c001faa2:	5e                   	pop    esi
c001faa3:	e9 75 ff ff ff       	jmp    c001fa1d <Vm::x87Handler(regs*)+0x69>
c001faa8:	8d 50 38             	lea    edx,[eax+0x38]
c001faab:	80 fa 07             	cmp    dl,0x7
c001faae:	77 3c                	ja     c001faec <Vm::x87Handler(regs*)+0x138>
c001fab0:	83 ec 0c             	sub    esp,0xc
c001fab3:	2d c8 00 00 00       	sub    eax,0xc8
c001fab8:	50                   	push   eax
c001fab9:	e8 b9 fd ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fabe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fac5:	89 c6                	mov    esi,eax
c001fac7:	89 d7                	mov    edi,edx
c001fac9:	e8 a9 fd ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001face:	83 c4 0c             	add    esp,0xc
c001fad1:	52                   	push   edx
c001fad2:	50                   	push   eax
c001fad3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fad7:	2d c8 00 00 00       	sub    eax,0xc8
c001fadc:	50                   	push   eax
c001fadd:	e8 d8 fd ff ff       	call   c001f8ba <Vm::fpuSetReg(int, unsigned long long)>
c001fae2:	83 c4 0c             	add    esp,0xc
c001fae5:	57                   	push   edi
c001fae6:	56                   	push   esi
c001fae7:	e9 73 ff ff ff       	jmp    c001fa5f <Vm::x87Handler(regs*)+0xab>
c001faec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001faf0:	84 d2                	test   dl,dl
c001faf2:	75 0f                	jne    c001fb03 <Vm::x87Handler(regs*)+0x14f>
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	ff 36                	push   DWORD PTR [esi]
c001faf9:	e8 c8 fa ff ff       	call   c001f5c6 <Vm::fpu32ToInternal(unsigned int)>
c001fafe:	e9 bf 00 00 00       	jmp    c001fbc2 <Vm::x87Handler(regs*)+0x20e>
c001fb03:	80 fa 03             	cmp    dl,0x3
c001fb06:	75 13                	jne    c001fb1b <Vm::x87Handler(regs*)+0x167>
c001fb08:	e8 55 fe ff ff       	call   c001f962 <Vm::fpuPop()>
c001fb0d:	55                   	push   ebp
c001fb0e:	55                   	push   ebp
c001fb0f:	52                   	push   edx
c001fb10:	50                   	push   eax
c001fb11:	e8 4c fa ff ff       	call   c001f562 <Vm::fpuInternalTo32(unsigned long long)>
c001fb16:	e9 88 00 00 00       	jmp    c001fba3 <Vm::x87Handler(regs*)+0x1ef>
c001fb1b:	80 fa 05             	cmp    dl,0x5
c001fb1e:	75 0e                	jne    c001fb2e <Vm::x87Handler(regs*)+0x17a>
c001fb20:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fb23:	66 a3 c2 18 03 c0    	mov    ds:0xc00318c2,ax
c001fb29:	e9 df 00 00 00       	jmp    c001fc0d <Vm::x87Handler(regs*)+0x259>
c001fb2e:	31 c0                	xor    eax,eax
c001fb30:	80 fa 07             	cmp    dl,0x7
c001fb33:	0f 85 dc 08 00 00    	jne    c0020415 <Vm::x87Handler(regs*)+0xa61>
c001fb39:	66 a1 c2 18 03 c0    	mov    ax,ds:0xc00318c2
c001fb3f:	66 89 06             	mov    WORD PTR [esi],ax
c001fb42:	e9 c6 00 00 00       	jmp    c001fc0d <Vm::x87Handler(regs*)+0x259>
c001fb47:	80 fa d8             	cmp    dl,0xd8
c001fb4a:	0f 84 c9 00 00 00    	je     c001fc19 <Vm::x87Handler(regs*)+0x265>
c001fb50:	80 fa dc             	cmp    dl,0xdc
c001fb53:	0f 84 0d 02 00 00    	je     c001fd66 <Vm::x87Handler(regs*)+0x3b2>
c001fb59:	80 fa de             	cmp    dl,0xde
c001fb5c:	0f 84 cd 02 00 00    	je     c001fe2f <Vm::x87Handler(regs*)+0x47b>
c001fb62:	80 fa dd             	cmp    dl,0xdd
c001fb65:	0f 84 5f 04 00 00    	je     c001ffca <Vm::x87Handler(regs*)+0x616>
c001fb6b:	80 fa da             	cmp    dl,0xda
c001fb6e:	0f 84 24 05 00 00    	je     c0020098 <Vm::x87Handler(regs*)+0x6e4>
c001fb74:	80 fa df             	cmp    dl,0xdf
c001fb77:	0f 84 68 05 00 00    	je     c00200e5 <Vm::x87Handler(regs*)+0x731>
c001fb7d:	31 c0                	xor    eax,eax
c001fb7f:	80 fa db             	cmp    dl,0xdb
c001fb82:	0f 85 8d 08 00 00    	jne    c0020415 <Vm::x87Handler(regs*)+0xa61>
c001fb88:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb8c:	80 fa 03             	cmp    dl,0x3
c001fb8f:	0f 85 70 06 00 00    	jne    c0020205 <Vm::x87Handler(regs*)+0x851>
c001fb95:	e8 c8 fd ff ff       	call   c001f962 <Vm::fpuPop()>
c001fb9a:	55                   	push   ebp
c001fb9b:	55                   	push   ebp
c001fb9c:	52                   	push   edx
c001fb9d:	50                   	push   eax
c001fb9e:	e8 71 fa ff ff       	call   c001f614 <Vm::fpuFloatToLong(unsigned long long)>
c001fba3:	83 c4 10             	add    esp,0x10
c001fba6:	89 06                	mov    DWORD PTR [esi],eax
c001fba8:	eb 63                	jmp    c001fc0d <Vm::x87Handler(regs*)+0x259>
c001fbaa:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbae:	84 d2                	test   dl,dl
c001fbb0:	0f 85 e6 05 00 00    	jne    c002019c <Vm::x87Handler(regs*)+0x7e8>
c001fbb6:	57                   	push   edi
c001fbb7:	57                   	push   edi
c001fbb8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbbb:	ff 36                	push   DWORD PTR [esi]
c001fbbd:	e8 49 fa ff ff       	call   c001f60b <Vm::fpu64ToInternal(unsigned long long)>
c001fbc2:	5e                   	pop    esi
c001fbc3:	5f                   	pop    edi
c001fbc4:	52                   	push   edx
c001fbc5:	50                   	push   eax
c001fbc6:	e8 3a fd ff ff       	call   c001f905 <Vm::fpuPush(unsigned long long)>
c001fbcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fbcf:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fbd2:	e9 51 fe ff ff       	jmp    c001fa28 <Vm::x87Handler(regs*)+0x74>
c001fbd7:	80 fa 03             	cmp    dl,0x3
c001fbda:	0f 85 d7 06 00 00    	jne    c00202b7 <Vm::x87Handler(regs*)+0x903>
c001fbe0:	57                   	push   edi
c001fbe1:	57                   	push   edi
c001fbe2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbe5:	ff 36                	push   DWORD PTR [esi]
c001fbe7:	e8 1f fa ff ff       	call   c001f60b <Vm::fpu64ToInternal(unsigned long long)>
c001fbec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbf3:	89 c6                	mov    esi,eax
c001fbf5:	89 d7                	mov    edi,edx
c001fbf7:	e8 7b fc ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fbfc:	57                   	push   edi
c001fbfd:	56                   	push   esi
c001fbfe:	52                   	push   edx
c001fbff:	50                   	push   eax
c001fc00:	e8 95 fb ff ff       	call   c001f79a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc05:	83 c4 20             	add    esp,0x20
c001fc08:	e8 55 fd ff ff       	call   c001f962 <Vm::fpuPop()>
c001fc0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc11:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc14:	e9 12 fe ff ff       	jmp    c001fa2b <Vm::x87Handler(regs*)+0x77>
c001fc19:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc1d:	8d 50 40             	lea    edx,[eax+0x40]
c001fc20:	80 fa 07             	cmp    dl,0x7
c001fc23:	77 29                	ja     c001fc4e <Vm::x87Handler(regs*)+0x29a>
c001fc25:	83 ec 0c             	sub    esp,0xc
c001fc28:	2d c0 00 00 00       	sub    eax,0xc0
c001fc2d:	50                   	push   eax
c001fc2e:	e8 44 fc ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fc33:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc3a:	89 c6                	mov    esi,eax
c001fc3c:	89 d7                	mov    edi,edx
c001fc3e:	e8 34 fc ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fc43:	57                   	push   edi
c001fc44:	56                   	push   esi
c001fc45:	52                   	push   edx
c001fc46:	50                   	push   eax
c001fc47:	e8 a1 fb ff ff       	call   c001f7ed <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc4c:	eb 2f                	jmp    c001fc7d <Vm::x87Handler(regs*)+0x2c9>
c001fc4e:	8d 50 38             	lea    edx,[eax+0x38]
c001fc51:	80 fa 07             	cmp    dl,0x7
c001fc54:	77 2f                	ja     c001fc85 <Vm::x87Handler(regs*)+0x2d1>
c001fc56:	83 ec 0c             	sub    esp,0xc
c001fc59:	2d c8 00 00 00       	sub    eax,0xc8
c001fc5e:	50                   	push   eax
c001fc5f:	e8 13 fc ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fc64:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc6b:	89 c6                	mov    esi,eax
c001fc6d:	89 d7                	mov    edi,edx
c001fc6f:	e8 03 fc ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fc74:	57                   	push   edi
c001fc75:	56                   	push   esi
c001fc76:	52                   	push   edx
c001fc77:	50                   	push   eax
c001fc78:	e8 a9 fb ff ff       	call   c001f826 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc7d:	83 c4 1c             	add    esp,0x1c
c001fc80:	e9 d8 fd ff ff       	jmp    c001fa5d <Vm::x87Handler(regs*)+0xa9>
c001fc85:	8d 50 30             	lea    edx,[eax+0x30]
c001fc88:	80 fa 07             	cmp    dl,0x7
c001fc8b:	77 0d                	ja     c001fc9a <Vm::x87Handler(regs*)+0x2e6>
c001fc8d:	83 ec 0c             	sub    esp,0xc
c001fc90:	2d d0 00 00 00       	sub    eax,0xd0
c001fc95:	e9 99 03 00 00       	jmp    c0020033 <Vm::x87Handler(regs*)+0x67f>
c001fc9a:	8d 50 28             	lea    edx,[eax+0x28]
c001fc9d:	80 fa 07             	cmp    dl,0x7
c001fca0:	77 0d                	ja     c001fcaf <Vm::x87Handler(regs*)+0x2fb>
c001fca2:	83 ec 0c             	sub    esp,0xc
c001fca5:	2d d8 00 00 00       	sub    eax,0xd8
c001fcaa:	e9 c0 03 00 00       	jmp    c002006f <Vm::x87Handler(regs*)+0x6bb>
c001fcaf:	8d 50 20             	lea    edx,[eax+0x20]
c001fcb2:	80 fa 07             	cmp    dl,0x7
c001fcb5:	77 1b                	ja     c001fcd2 <Vm::x87Handler(regs*)+0x31e>
c001fcb7:	83 ec 0c             	sub    esp,0xc
c001fcba:	2d e0 00 00 00       	sub    eax,0xe0
c001fcbf:	50                   	push   eax
c001fcc0:	e8 b2 fb ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fcc5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fccc:	89 c6                	mov    esi,eax
c001fcce:	89 d7                	mov    edi,edx
c001fcd0:	eb 22                	jmp    c001fcf4 <Vm::x87Handler(regs*)+0x340>
c001fcd2:	8d 50 18             	lea    edx,[eax+0x18]
c001fcd5:	80 fa 07             	cmp    dl,0x7
c001fcd8:	77 2d                	ja     c001fd07 <Vm::x87Handler(regs*)+0x353>
c001fcda:	83 ec 0c             	sub    esp,0xc
c001fcdd:	6a 00                	push   0x0
c001fcdf:	e8 93 fb ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fce4:	89 c6                	mov    esi,eax
c001fce6:	89 d7                	mov    edi,edx
c001fce8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcec:	2d e8 00 00 00       	sub    eax,0xe8
c001fcf1:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcf4:	e8 7e fb ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fcf9:	57                   	push   edi
c001fcfa:	56                   	push   esi
c001fcfb:	52                   	push   edx
c001fcfc:	50                   	push   eax
c001fcfd:	e8 15 fb ff ff       	call   c001f817 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd02:	e9 76 ff ff ff       	jmp    c001fc7d <Vm::x87Handler(regs*)+0x2c9>
c001fd07:	8d 50 10             	lea    edx,[eax+0x10]
c001fd0a:	80 fa 07             	cmp    dl,0x7
c001fd0d:	77 1b                	ja     c001fd2a <Vm::x87Handler(regs*)+0x376>
c001fd0f:	83 ec 0c             	sub    esp,0xc
c001fd12:	2d f0 00 00 00       	sub    eax,0xf0
c001fd17:	50                   	push   eax
c001fd18:	e8 5a fb ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fd1d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd24:	89 c6                	mov    esi,eax
c001fd26:	89 d7                	mov    edi,edx
c001fd28:	eb 22                	jmp    c001fd4c <Vm::x87Handler(regs*)+0x398>
c001fd2a:	3c f7                	cmp    al,0xf7
c001fd2c:	0f 86 d1 03 00 00    	jbe    c0020103 <Vm::x87Handler(regs*)+0x74f>
c001fd32:	83 ec 0c             	sub    esp,0xc
c001fd35:	6a 00                	push   0x0
c001fd37:	e8 3b fb ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fd3c:	89 c6                	mov    esi,eax
c001fd3e:	89 d7                	mov    edi,edx
c001fd40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd44:	2d f8 00 00 00       	sub    eax,0xf8
c001fd49:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd4c:	e8 26 fb ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fd51:	57                   	push   edi
c001fd52:	56                   	push   esi
c001fd53:	52                   	push   edx
c001fd54:	50                   	push   eax
c001fd55:	e8 eb fa ff ff       	call   c001f845 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd5a:	83 c4 1c             	add    esp,0x1c
c001fd5d:	52                   	push   edx
c001fd5e:	50                   	push   eax
c001fd5f:	6a 00                	push   0x0
c001fd61:	e9 51 02 00 00       	jmp    c001ffb7 <Vm::x87Handler(regs*)+0x603>
c001fd66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd6a:	8d 50 40             	lea    edx,[eax+0x40]
c001fd6d:	80 fa 07             	cmp    dl,0x7
c001fd70:	77 37                	ja     c001fda9 <Vm::x87Handler(regs*)+0x3f5>
c001fd72:	83 ec 0c             	sub    esp,0xc
c001fd75:	2d c0 00 00 00       	sub    eax,0xc0
c001fd7a:	50                   	push   eax
c001fd7b:	e8 f7 fa ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fd80:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd87:	89 c6                	mov    esi,eax
c001fd89:	89 d7                	mov    edi,edx
c001fd8b:	e8 e7 fa ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fd90:	57                   	push   edi
c001fd91:	56                   	push   esi
c001fd92:	52                   	push   edx
c001fd93:	50                   	push   eax
c001fd94:	e8 54 fa ff ff       	call   c001f7ed <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd99:	83 c4 1c             	add    esp,0x1c
c001fd9c:	52                   	push   edx
c001fd9d:	50                   	push   eax
c001fd9e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fda2:	2d c0 00 00 00       	sub    eax,0xc0
c001fda7:	eb 3d                	jmp    c001fde6 <Vm::x87Handler(regs*)+0x432>
c001fda9:	8d 50 38             	lea    edx,[eax+0x38]
c001fdac:	80 fa 07             	cmp    dl,0x7
c001fdaf:	77 3b                	ja     c001fdec <Vm::x87Handler(regs*)+0x438>
c001fdb1:	83 ec 0c             	sub    esp,0xc
c001fdb4:	2d c8 00 00 00       	sub    eax,0xc8
c001fdb9:	50                   	push   eax
c001fdba:	e8 b8 fa ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fdbf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdc6:	89 c6                	mov    esi,eax
c001fdc8:	89 d7                	mov    edi,edx
c001fdca:	e8 a8 fa ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fdcf:	57                   	push   edi
c001fdd0:	56                   	push   esi
c001fdd1:	52                   	push   edx
c001fdd2:	50                   	push   eax
c001fdd3:	e8 4e fa ff ff       	call   c001f826 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdd8:	83 c4 1c             	add    esp,0x1c
c001fddb:	52                   	push   edx
c001fddc:	50                   	push   eax
c001fddd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fde1:	2d c8 00 00 00       	sub    eax,0xc8
c001fde6:	50                   	push   eax
c001fde7:	e9 75 fc ff ff       	jmp    c001fa61 <Vm::x87Handler(regs*)+0xad>
c001fdec:	83 c0 18             	add    eax,0x18
c001fdef:	3c 07                	cmp    al,0x7
c001fdf1:	0f 87 3b 04 00 00    	ja     c0020232 <Vm::x87Handler(regs*)+0x87e>
c001fdf7:	83 ec 0c             	sub    esp,0xc
c001fdfa:	6a 00                	push   0x0
c001fdfc:	e8 76 fa ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fe01:	89 c6                	mov    esi,eax
c001fe03:	89 d7                	mov    edi,edx
c001fe05:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe09:	2d e8 00 00 00       	sub    eax,0xe8
c001fe0e:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe11:	e8 61 fa ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fe16:	57                   	push   edi
c001fe17:	56                   	push   esi
c001fe18:	52                   	push   edx
c001fe19:	50                   	push   eax
c001fe1a:	e8 f8 f9 ff ff       	call   c001f817 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe1f:	83 c4 1c             	add    esp,0x1c
c001fe22:	52                   	push   edx
c001fe23:	50                   	push   eax
c001fe24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe28:	2d e8 00 00 00       	sub    eax,0xe8
c001fe2d:	eb b7                	jmp    c001fde6 <Vm::x87Handler(regs*)+0x432>
c001fe2f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe33:	8d 50 40             	lea    edx,[eax+0x40]
c001fe36:	80 fa 07             	cmp    dl,0x7
c001fe39:	77 3a                	ja     c001fe75 <Vm::x87Handler(regs*)+0x4c1>
c001fe3b:	83 ec 0c             	sub    esp,0xc
c001fe3e:	2d c0 00 00 00       	sub    eax,0xc0
c001fe43:	50                   	push   eax
c001fe44:	e8 2e fa ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fe49:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe50:	89 c6                	mov    esi,eax
c001fe52:	89 d7                	mov    edi,edx
c001fe54:	e8 1e fa ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fe59:	57                   	push   edi
c001fe5a:	56                   	push   esi
c001fe5b:	52                   	push   edx
c001fe5c:	50                   	push   eax
c001fe5d:	e8 8b f9 ff ff       	call   c001f7ed <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe62:	83 c4 1c             	add    esp,0x1c
c001fe65:	52                   	push   edx
c001fe66:	50                   	push   eax
c001fe67:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe6b:	2d c0 00 00 00       	sub    eax,0xc0
c001fe70:	e9 9e 01 00 00       	jmp    c0020013 <Vm::x87Handler(regs*)+0x65f>
c001fe75:	8d 50 20             	lea    edx,[eax+0x20]
c001fe78:	80 fa 07             	cmp    dl,0x7
c001fe7b:	77 3a                	ja     c001feb7 <Vm::x87Handler(regs*)+0x503>
c001fe7d:	83 ec 0c             	sub    esp,0xc
c001fe80:	2d e0 00 00 00       	sub    eax,0xe0
c001fe85:	50                   	push   eax
c001fe86:	e8 ec f9 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fe8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe92:	89 c6                	mov    esi,eax
c001fe94:	89 d7                	mov    edi,edx
c001fe96:	e8 dc f9 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fe9b:	57                   	push   edi
c001fe9c:	56                   	push   esi
c001fe9d:	52                   	push   edx
c001fe9e:	50                   	push   eax
c001fe9f:	e8 73 f9 ff ff       	call   c001f817 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fea4:	83 c4 1c             	add    esp,0x1c
c001fea7:	52                   	push   edx
c001fea8:	50                   	push   eax
c001fea9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fead:	2d e0 00 00 00       	sub    eax,0xe0
c001feb2:	e9 5c 01 00 00       	jmp    c0020013 <Vm::x87Handler(regs*)+0x65f>
c001feb7:	8d 50 18             	lea    edx,[eax+0x18]
c001feba:	80 fa 07             	cmp    dl,0x7
c001febd:	77 3b                	ja     c001fefa <Vm::x87Handler(regs*)+0x546>
c001febf:	83 ec 0c             	sub    esp,0xc
c001fec2:	6a 00                	push   0x0
c001fec4:	e8 ae f9 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fec9:	89 c6                	mov    esi,eax
c001fecb:	89 d7                	mov    edi,edx
c001fecd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fed1:	2d e8 00 00 00       	sub    eax,0xe8
c001fed6:	89 04 24             	mov    DWORD PTR [esp],eax
c001fed9:	e8 99 f9 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001fede:	57                   	push   edi
c001fedf:	56                   	push   esi
c001fee0:	52                   	push   edx
c001fee1:	50                   	push   eax
c001fee2:	e8 30 f9 ff ff       	call   c001f817 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fee7:	83 c4 1c             	add    esp,0x1c
c001feea:	52                   	push   edx
c001feeb:	50                   	push   eax
c001feec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fef0:	2d e8 00 00 00       	sub    eax,0xe8
c001fef5:	e9 19 01 00 00       	jmp    c0020013 <Vm::x87Handler(regs*)+0x65f>
c001fefa:	8d 50 38             	lea    edx,[eax+0x38]
c001fefd:	80 fa 07             	cmp    dl,0x7
c001ff00:	77 37                	ja     c001ff39 <Vm::x87Handler(regs*)+0x585>
c001ff02:	83 ec 0c             	sub    esp,0xc
c001ff05:	2d c8 00 00 00       	sub    eax,0xc8
c001ff0a:	50                   	push   eax
c001ff0b:	e8 67 f9 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001ff10:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff17:	89 c6                	mov    esi,eax
c001ff19:	89 d7                	mov    edi,edx
c001ff1b:	e8 57 f9 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001ff20:	57                   	push   edi
c001ff21:	56                   	push   esi
c001ff22:	52                   	push   edx
c001ff23:	50                   	push   eax
c001ff24:	e8 fd f8 ff ff       	call   c001f826 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff29:	83 c4 1c             	add    esp,0x1c
c001ff2c:	52                   	push   edx
c001ff2d:	50                   	push   eax
c001ff2e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff32:	2d c8 00 00 00       	sub    eax,0xc8
c001ff37:	eb 7d                	jmp    c001ffb6 <Vm::x87Handler(regs*)+0x602>
c001ff39:	3c f7                	cmp    al,0xf7
c001ff3b:	76 38                	jbe    c001ff75 <Vm::x87Handler(regs*)+0x5c1>
c001ff3d:	83 ec 0c             	sub    esp,0xc
c001ff40:	6a 00                	push   0x0
c001ff42:	e8 30 f9 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001ff47:	89 c6                	mov    esi,eax
c001ff49:	89 d7                	mov    edi,edx
c001ff4b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff4f:	2d f8 00 00 00       	sub    eax,0xf8
c001ff54:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff57:	e8 1b f9 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001ff5c:	57                   	push   edi
c001ff5d:	56                   	push   esi
c001ff5e:	52                   	push   edx
c001ff5f:	50                   	push   eax
c001ff60:	e8 e0 f8 ff ff       	call   c001f845 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff65:	83 c4 1c             	add    esp,0x1c
c001ff68:	52                   	push   edx
c001ff69:	50                   	push   eax
c001ff6a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6e:	2d f8 00 00 00       	sub    eax,0xf8
c001ff73:	eb 41                	jmp    c001ffb6 <Vm::x87Handler(regs*)+0x602>
c001ff75:	8d 50 10             	lea    edx,[eax+0x10]
c001ff78:	80 fa 07             	cmp    dl,0x7
c001ff7b:	0f 87 5a 01 00 00    	ja     c00200db <Vm::x87Handler(regs*)+0x727>
c001ff81:	83 ec 0c             	sub    esp,0xc
c001ff84:	2d f0 00 00 00       	sub    eax,0xf0
c001ff89:	50                   	push   eax
c001ff8a:	e8 e8 f8 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001ff8f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff96:	89 c6                	mov    esi,eax
c001ff98:	89 d7                	mov    edi,edx
c001ff9a:	e8 d8 f8 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001ff9f:	57                   	push   edi
c001ffa0:	56                   	push   esi
c001ffa1:	52                   	push   edx
c001ffa2:	50                   	push   eax
c001ffa3:	e8 9d f8 ff ff       	call   c001f845 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ffa8:	83 c4 1c             	add    esp,0x1c
c001ffab:	52                   	push   edx
c001ffac:	50                   	push   eax
c001ffad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffb1:	2d f0 00 00 00       	sub    eax,0xf0
c001ffb6:	50                   	push   eax
c001ffb7:	e8 fe f8 ff ff       	call   c001f8ba <Vm::fpuSetReg(int, unsigned long long)>
c001ffbc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ffc0:	e8 9d f9 ff ff       	call   c001f962 <Vm::fpuPop()>
c001ffc5:	e9 5e fa ff ff       	jmp    c001fa28 <Vm::x87Handler(regs*)+0x74>
c001ffca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffce:	8d 50 30             	lea    edx,[eax+0x30]
c001ffd1:	80 fa 07             	cmp    dl,0x7
c001ffd4:	77 1d                	ja     c001fff3 <Vm::x87Handler(regs*)+0x63f>
c001ffd6:	83 ec 0c             	sub    esp,0xc
c001ffd9:	6a 00                	push   0x0
c001ffdb:	e8 97 f8 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c001ffe0:	83 c4 0c             	add    esp,0xc
c001ffe3:	52                   	push   edx
c001ffe4:	50                   	push   eax
c001ffe5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe9:	2d d0 00 00 00       	sub    eax,0xd0
c001ffee:	e9 f3 fd ff ff       	jmp    c001fde6 <Vm::x87Handler(regs*)+0x432>
c001fff3:	8d 50 28             	lea    edx,[eax+0x28]
c001fff6:	80 fa 07             	cmp    dl,0x7
c001fff9:	77 28                	ja     c0020023 <Vm::x87Handler(regs*)+0x66f>
c001fffb:	83 ec 0c             	sub    esp,0xc
c001fffe:	6a 00                	push   0x0
c0020000:	e8 72 f8 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c0020005:	83 c4 0c             	add    esp,0xc
c0020008:	52                   	push   edx
c0020009:	50                   	push   eax
c002000a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002000e:	2d d8 00 00 00       	sub    eax,0xd8
c0020013:	50                   	push   eax
c0020014:	e8 a1 f8 ff ff       	call   c001f8ba <Vm::fpuSetReg(int, unsigned long long)>
c0020019:	e8 44 f9 ff ff       	call   c001f962 <Vm::fpuPop()>
c002001e:	e9 01 fa ff ff       	jmp    c001fa24 <Vm::x87Handler(regs*)+0x70>
c0020023:	8d 50 20             	lea    edx,[eax+0x20]
c0020026:	80 fa 07             	cmp    dl,0x7
c0020029:	77 30                	ja     c002005b <Vm::x87Handler(regs*)+0x6a7>
c002002b:	83 ec 0c             	sub    esp,0xc
c002002e:	2d e0 00 00 00       	sub    eax,0xe0
c0020033:	50                   	push   eax
c0020034:	e8 3e f8 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c0020039:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020040:	89 c6                	mov    esi,eax
c0020042:	89 d7                	mov    edi,edx
c0020044:	e8 2e f8 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c0020049:	57                   	push   edi
c002004a:	56                   	push   esi
c002004b:	52                   	push   edx
c002004c:	50                   	push   eax
c002004d:	e8 48 f7 ff ff       	call   c001f79a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020052:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020056:	e9 54 02 00 00       	jmp    c00202af <Vm::x87Handler(regs*)+0x8fb>
c002005b:	8d 50 18             	lea    edx,[eax+0x18]
c002005e:	80 fa 07             	cmp    dl,0x7
c0020061:	0f 87 43 fb ff ff    	ja     c001fbaa <Vm::x87Handler(regs*)+0x1f6>
c0020067:	83 ec 0c             	sub    esp,0xc
c002006a:	2d e8 00 00 00       	sub    eax,0xe8
c002006f:	50                   	push   eax
c0020070:	e8 02 f8 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c0020075:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002007c:	89 c6                	mov    esi,eax
c002007e:	89 d7                	mov    edi,edx
c0020080:	e8 f2 f7 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c0020085:	57                   	push   edi
c0020086:	56                   	push   esi
c0020087:	52                   	push   edx
c0020088:	50                   	push   eax
c0020089:	e8 0c f7 ff ff       	call   c001f79a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002008e:	83 c4 20             	add    esp,0x20
c0020091:	e8 cc f8 ff ff       	call   c001f962 <Vm::fpuPop()>
c0020096:	eb 62                	jmp    c00200fa <Vm::x87Handler(regs*)+0x746>
c0020098:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002009c:	0f 85 0f 01 00 00    	jne    c00201b1 <Vm::x87Handler(regs*)+0x7fd>
c00200a2:	83 ec 0c             	sub    esp,0xc
c00200a5:	6a 01                	push   0x1
c00200a7:	e8 cb f7 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c00200ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200b3:	89 c6                	mov    esi,eax
c00200b5:	89 d7                	mov    edi,edx
c00200b7:	e8 bb f7 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c00200bc:	57                   	push   edi
c00200bd:	56                   	push   esi
c00200be:	52                   	push   edx
c00200bf:	50                   	push   eax
c00200c0:	e8 d5 f6 ff ff       	call   c001f79a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00200c5:	83 c4 20             	add    esp,0x20
c00200c8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200cc:	e8 91 f8 ff ff       	call   c001f962 <Vm::fpuPop()>
c00200d1:	e8 8c f8 ff ff       	call   c001f962 <Vm::fpuPop()>
c00200d6:	e9 50 f9 ff ff       	jmp    c001fa2b <Vm::x87Handler(regs*)+0x77>
c00200db:	3c d9                	cmp    al,0xd9
c00200dd:	0f 85 b5 02 00 00    	jne    c0020398 <Vm::x87Handler(regs*)+0x9e4>
c00200e3:	eb bd                	jmp    c00200a2 <Vm::x87Handler(regs*)+0x6ee>
c00200e5:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00200e9:	0f 85 ea 02 00 00    	jne    c00203d9 <Vm::x87Handler(regs*)+0xa25>
c00200ef:	0f b7 05 c0 18 03 c0 	movzx  eax,WORD PTR ds:0xc00318c0
c00200f6:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00200fa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200fe:	e9 28 f9 ff ff       	jmp    c001fa2b <Vm::x87Handler(regs*)+0x77>
c0020103:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020107:	84 d2                	test   dl,dl
c0020109:	75 0f                	jne    c002011a <Vm::x87Handler(regs*)+0x766>
c002010b:	83 ec 0c             	sub    esp,0xc
c002010e:	ff 36                	push   DWORD PTR [esi]
c0020110:	e8 b1 f4 ff ff       	call   c001f5c6 <Vm::fpu32ToInternal(unsigned int)>
c0020115:	e9 2c 01 00 00       	jmp    c0020246 <Vm::x87Handler(regs*)+0x892>
c002011a:	80 fa 01             	cmp    dl,0x1
c002011d:	75 0f                	jne    c002012e <Vm::x87Handler(regs*)+0x77a>
c002011f:	83 ec 0c             	sub    esp,0xc
c0020122:	ff 36                	push   DWORD PTR [esi]
c0020124:	e8 9d f4 ff ff       	call   c001f5c6 <Vm::fpu32ToInternal(unsigned int)>
c0020129:	e9 81 02 00 00       	jmp    c00203af <Vm::x87Handler(regs*)+0x9fb>
c002012e:	80 fa 04             	cmp    dl,0x4
c0020131:	75 0f                	jne    c0020142 <Vm::x87Handler(regs*)+0x78e>
c0020133:	83 ec 0c             	sub    esp,0xc
c0020136:	ff 36                	push   DWORD PTR [esi]
c0020138:	e8 89 f4 ff ff       	call   c001f5c6 <Vm::fpu32ToInternal(unsigned int)>
c002013d:	e9 86 01 00 00       	jmp    c00202c8 <Vm::x87Handler(regs*)+0x914>
c0020142:	80 fa 05             	cmp    dl,0x5
c0020145:	75 1b                	jne    c0020162 <Vm::x87Handler(regs*)+0x7ae>
c0020147:	83 ec 0c             	sub    esp,0xc
c002014a:	6a 00                	push   0x0
c002014c:	e8 26 f7 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c0020151:	89 c7                	mov    edi,eax
c0020153:	89 d5                	mov    ebp,edx
c0020155:	58                   	pop    eax
c0020156:	ff 36                	push   DWORD PTR [esi]
c0020158:	e8 69 f4 ff ff       	call   c001f5c6 <Vm::fpu32ToInternal(unsigned int)>
c002015d:	e9 a3 01 00 00       	jmp    c0020305 <Vm::x87Handler(regs*)+0x951>
c0020162:	80 fa 06             	cmp    dl,0x6
c0020165:	75 0f                	jne    c0020176 <Vm::x87Handler(regs*)+0x7c2>
c0020167:	83 ec 0c             	sub    esp,0xc
c002016a:	ff 36                	push   DWORD PTR [esi]
c002016c:	e8 55 f4 ff ff       	call   c001f5c6 <Vm::fpu32ToInternal(unsigned int)>
c0020171:	e9 ae 01 00 00       	jmp    c0020324 <Vm::x87Handler(regs*)+0x970>
c0020176:	31 c0                	xor    eax,eax
c0020178:	80 fa 07             	cmp    dl,0x7
c002017b:	0f 85 94 02 00 00    	jne    c0020415 <Vm::x87Handler(regs*)+0xa61>
c0020181:	83 ec 0c             	sub    esp,0xc
c0020184:	6a 00                	push   0x0
c0020186:	e8 ec f6 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c002018b:	89 c7                	mov    edi,eax
c002018d:	89 d5                	mov    ebp,edx
c002018f:	58                   	pop    eax
c0020190:	ff 36                	push   DWORD PTR [esi]
c0020192:	e8 2f f4 ff ff       	call   c001f5c6 <Vm::fpu32ToInternal(unsigned int)>
c0020197:	e9 cb 01 00 00       	jmp    c0020367 <Vm::x87Handler(regs*)+0x9b3>
c002019c:	80 fa 03             	cmp    dl,0x3
c002019f:	0f 85 d3 01 00 00    	jne    c0020378 <Vm::x87Handler(regs*)+0x9c4>
c00201a5:	e8 b8 f7 ff ff       	call   c001f962 <Vm::fpuPop()>
c00201aa:	51                   	push   ecx
c00201ab:	51                   	push   ecx
c00201ac:	e9 de 01 00 00       	jmp    c002038f <Vm::x87Handler(regs*)+0x9db>
c00201b1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201b5:	80 fa 01             	cmp    dl,0x1
c00201b8:	75 09                	jne    c00201c3 <Vm::x87Handler(regs*)+0x80f>
c00201ba:	57                   	push   edi
c00201bb:	57                   	push   edi
c00201bc:	8b 06                	mov    eax,DWORD PTR [esi]
c00201be:	e9 e3 01 00 00       	jmp    c00203a6 <Vm::x87Handler(regs*)+0x9f2>
c00201c3:	80 fa 04             	cmp    dl,0x4
c00201c6:	75 12                	jne    c00201da <Vm::x87Handler(regs*)+0x826>
c00201c8:	31 d2                	xor    edx,edx
c00201ca:	51                   	push   ecx
c00201cb:	51                   	push   ecx
c00201cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00201ce:	52                   	push   edx
c00201cf:	50                   	push   eax
c00201d0:	e8 d0 f4 ff ff       	call   c001f6a5 <Vm::fpuLongToFloat(long long)>
c00201d5:	e9 ee 00 00 00       	jmp    c00202c8 <Vm::x87Handler(regs*)+0x914>
c00201da:	31 c0                	xor    eax,eax
c00201dc:	80 fa 07             	cmp    dl,0x7
c00201df:	0f 85 30 02 00 00    	jne    c0020415 <Vm::x87Handler(regs*)+0xa61>
c00201e5:	83 ec 0c             	sub    esp,0xc
c00201e8:	6a 00                	push   0x0
c00201ea:	e8 88 f6 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c00201ef:	89 c7                	mov    edi,eax
c00201f1:	89 d5                	mov    ebp,edx
c00201f3:	58                   	pop    eax
c00201f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00201f6:	5a                   	pop    edx
c00201f7:	31 d2                	xor    edx,edx
c00201f9:	52                   	push   edx
c00201fa:	50                   	push   eax
c00201fb:	e8 a5 f4 ff ff       	call   c001f6a5 <Vm::fpuLongToFloat(long long)>
c0020200:	e9 62 01 00 00       	jmp    c0020367 <Vm::x87Handler(regs*)+0x9b3>
c0020205:	84 d2                	test   dl,dl
c0020207:	75 0d                	jne    c0020216 <Vm::x87Handler(regs*)+0x862>
c0020209:	31 d2                	xor    edx,edx
c002020b:	55                   	push   ebp
c002020c:	55                   	push   ebp
c002020d:	8b 06                	mov    eax,DWORD PTR [esi]
c002020f:	52                   	push   edx
c0020210:	50                   	push   eax
c0020211:	e9 d3 01 00 00       	jmp    c00203e9 <Vm::x87Handler(regs*)+0xa35>
c0020216:	31 c0                	xor    eax,eax
c0020218:	80 fa 02             	cmp    dl,0x2
c002021b:	0f 85 f4 01 00 00    	jne    c0020415 <Vm::x87Handler(regs*)+0xa61>
c0020221:	83 ec 0c             	sub    esp,0xc
c0020224:	6a 00                	push   0x0
c0020226:	e8 4c f6 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c002022b:	59                   	pop    ecx
c002022c:	5f                   	pop    edi
c002022d:	e9 6a f9 ff ff       	jmp    c001fb9c <Vm::x87Handler(regs*)+0x1e8>
c0020232:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020236:	84 d2                	test   dl,dl
c0020238:	75 2a                	jne    c0020264 <Vm::x87Handler(regs*)+0x8b0>
c002023a:	50                   	push   eax
c002023b:	50                   	push   eax
c002023c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002023f:	ff 36                	push   DWORD PTR [esi]
c0020241:	e8 c5 f3 ff ff       	call   c001f60b <Vm::fpu64ToInternal(unsigned long long)>
c0020246:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002024d:	89 c6                	mov    esi,eax
c002024f:	89 d7                	mov    edi,edx
c0020251:	e8 21 f6 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c0020256:	57                   	push   edi
c0020257:	56                   	push   esi
c0020258:	52                   	push   edx
c0020259:	50                   	push   eax
c002025a:	e8 8e f5 ff ff       	call   c001f7ed <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002025f:	e9 64 01 00 00       	jmp    c00203c8 <Vm::x87Handler(regs*)+0xa14>
c0020264:	80 fa 01             	cmp    dl,0x1
c0020267:	75 11                	jne    c002027a <Vm::x87Handler(regs*)+0x8c6>
c0020269:	50                   	push   eax
c002026a:	50                   	push   eax
c002026b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002026e:	ff 36                	push   DWORD PTR [esi]
c0020270:	e8 96 f3 ff ff       	call   c001f60b <Vm::fpu64ToInternal(unsigned long long)>
c0020275:	e9 35 01 00 00       	jmp    c00203af <Vm::x87Handler(regs*)+0x9fb>
c002027a:	80 fa 02             	cmp    dl,0x2
c002027d:	0f 85 54 f9 ff ff    	jne    c001fbd7 <Vm::x87Handler(regs*)+0x223>
c0020283:	55                   	push   ebp
c0020284:	55                   	push   ebp
c0020285:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020288:	ff 36                	push   DWORD PTR [esi]
c002028a:	e8 7c f3 ff ff       	call   c001f60b <Vm::fpu64ToInternal(unsigned long long)>
c002028f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020296:	89 c6                	mov    esi,eax
c0020298:	89 d7                	mov    edi,edx
c002029a:	e8 d8 f5 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c002029f:	57                   	push   edi
c00202a0:	56                   	push   esi
c00202a1:	52                   	push   edx
c00202a2:	50                   	push   eax
c00202a3:	e8 f2 f4 ff ff       	call   c001f79a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00202a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00202ac:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00202af:	83 c4 20             	add    esp,0x20
c00202b2:	e9 74 f7 ff ff       	jmp    c001fa2b <Vm::x87Handler(regs*)+0x77>
c00202b7:	80 fa 04             	cmp    dl,0x4
c00202ba:	75 2a                	jne    c00202e6 <Vm::x87Handler(regs*)+0x932>
c00202bc:	51                   	push   ecx
c00202bd:	51                   	push   ecx
c00202be:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202c1:	ff 36                	push   DWORD PTR [esi]
c00202c3:	e8 43 f3 ff ff       	call   c001f60b <Vm::fpu64ToInternal(unsigned long long)>
c00202c8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202cf:	89 c6                	mov    esi,eax
c00202d1:	89 d7                	mov    edi,edx
c00202d3:	e8 9f f5 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c00202d8:	57                   	push   edi
c00202d9:	56                   	push   esi
c00202da:	52                   	push   edx
c00202db:	50                   	push   eax
c00202dc:	e8 36 f5 ff ff       	call   c001f817 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00202e1:	e9 e2 00 00 00       	jmp    c00203c8 <Vm::x87Handler(regs*)+0xa14>
c00202e6:	80 fa 05             	cmp    dl,0x5
c00202e9:	75 28                	jne    c0020313 <Vm::x87Handler(regs*)+0x95f>
c00202eb:	83 ec 0c             	sub    esp,0xc
c00202ee:	6a 00                	push   0x0
c00202f0:	e8 82 f5 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c00202f5:	89 c7                	mov    edi,eax
c00202f7:	89 d5                	mov    ebp,edx
c00202f9:	58                   	pop    eax
c00202fa:	5a                   	pop    edx
c00202fb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202fe:	ff 36                	push   DWORD PTR [esi]
c0020300:	e8 06 f3 ff ff       	call   c001f60b <Vm::fpu64ToInternal(unsigned long long)>
c0020305:	83 c4 10             	add    esp,0x10
c0020308:	55                   	push   ebp
c0020309:	57                   	push   edi
c002030a:	52                   	push   edx
c002030b:	50                   	push   eax
c002030c:	e8 06 f5 ff ff       	call   c001f817 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020311:	eb 60                	jmp    c0020373 <Vm::x87Handler(regs*)+0x9bf>
c0020313:	80 fa 06             	cmp    dl,0x6
c0020316:	75 2a                	jne    c0020342 <Vm::x87Handler(regs*)+0x98e>
c0020318:	51                   	push   ecx
c0020319:	51                   	push   ecx
c002031a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002031d:	ff 36                	push   DWORD PTR [esi]
c002031f:	e8 e7 f2 ff ff       	call   c001f60b <Vm::fpu64ToInternal(unsigned long long)>
c0020324:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002032b:	89 c6                	mov    esi,eax
c002032d:	89 d7                	mov    edi,edx
c002032f:	e8 43 f5 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c0020334:	57                   	push   edi
c0020335:	56                   	push   esi
c0020336:	52                   	push   edx
c0020337:	50                   	push   eax
c0020338:	e8 08 f5 ff ff       	call   c001f845 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002033d:	e9 86 00 00 00       	jmp    c00203c8 <Vm::x87Handler(regs*)+0xa14>
c0020342:	31 c0                	xor    eax,eax
c0020344:	80 fa 07             	cmp    dl,0x7
c0020347:	0f 85 c8 00 00 00    	jne    c0020415 <Vm::x87Handler(regs*)+0xa61>
c002034d:	83 ec 0c             	sub    esp,0xc
c0020350:	6a 00                	push   0x0
c0020352:	e8 20 f5 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c0020357:	89 c7                	mov    edi,eax
c0020359:	89 d5                	mov    ebp,edx
c002035b:	58                   	pop    eax
c002035c:	5a                   	pop    edx
c002035d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020360:	ff 36                	push   DWORD PTR [esi]
c0020362:	e8 a4 f2 ff ff       	call   c001f60b <Vm::fpu64ToInternal(unsigned long long)>
c0020367:	83 c4 10             	add    esp,0x10
c002036a:	55                   	push   ebp
c002036b:	57                   	push   edi
c002036c:	52                   	push   edx
c002036d:	50                   	push   eax
c002036e:	e8 d2 f4 ff ff       	call   c001f845 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020373:	83 c4 0c             	add    esp,0xc
c0020376:	eb 53                	jmp    c00203cb <Vm::x87Handler(regs*)+0xa17>
c0020378:	31 c0                	xor    eax,eax
c002037a:	80 fa 02             	cmp    dl,0x2
c002037d:	0f 85 92 00 00 00    	jne    c0020415 <Vm::x87Handler(regs*)+0xa61>
c0020383:	83 ec 0c             	sub    esp,0xc
c0020386:	6a 00                	push   0x0
c0020388:	e8 ea f4 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c002038d:	59                   	pop    ecx
c002038e:	5f                   	pop    edi
c002038f:	52                   	push   edx
c0020390:	50                   	push   eax
c0020391:	e8 27 f2 ff ff       	call   c001f5bd <Vm::fpuInternalTo64(unsigned long long)>
c0020396:	eb 70                	jmp    c0020408 <Vm::x87Handler(regs*)+0xa54>
c0020398:	31 c0                	xor    eax,eax
c002039a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002039f:	75 74                	jne    c0020415 <Vm::x87Handler(regs*)+0xa61>
c00203a1:	50                   	push   eax
c00203a2:	50                   	push   eax
c00203a3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00203a6:	31 d2                	xor    edx,edx
c00203a8:	52                   	push   edx
c00203a9:	50                   	push   eax
c00203aa:	e8 f6 f2 ff ff       	call   c001f6a5 <Vm::fpuLongToFloat(long long)>
c00203af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203b6:	89 c6                	mov    esi,eax
c00203b8:	89 d7                	mov    edi,edx
c00203ba:	e8 b8 f4 ff ff       	call   c001f877 <Vm::fpuGetReg(int)>
c00203bf:	57                   	push   edi
c00203c0:	56                   	push   esi
c00203c1:	52                   	push   edx
c00203c2:	50                   	push   eax
c00203c3:	e8 5e f4 ff ff       	call   c001f826 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00203c8:	83 c4 1c             	add    esp,0x1c
c00203cb:	52                   	push   edx
c00203cc:	50                   	push   eax
c00203cd:	6a 00                	push   0x0
c00203cf:	e8 e6 f4 ff ff       	call   c001f8ba <Vm::fpuSetReg(int, unsigned long long)>
c00203d4:	e9 f2 f7 ff ff       	jmp    c001fbcb <Vm::x87Handler(regs*)+0x217>
c00203d9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203dd:	80 fa 05             	cmp    dl,0x5
c00203e0:	75 11                	jne    c00203f3 <Vm::x87Handler(regs*)+0xa3f>
c00203e2:	55                   	push   ebp
c00203e3:	55                   	push   ebp
c00203e4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203e7:	ff 36                	push   DWORD PTR [esi]
c00203e9:	e8 81 f2 ff ff       	call   c001f66f <Vm::fpuULongToFloat(unsigned long long)>
c00203ee:	e9 cf f7 ff ff       	jmp    c001fbc2 <Vm::x87Handler(regs*)+0x20e>
c00203f3:	31 c0                	xor    eax,eax
c00203f5:	80 fa 07             	cmp    dl,0x7
c00203f8:	75 1b                	jne    c0020415 <Vm::x87Handler(regs*)+0xa61>
c00203fa:	e8 63 f5 ff ff       	call   c001f962 <Vm::fpuPop()>
c00203ff:	51                   	push   ecx
c0020400:	51                   	push   ecx
c0020401:	52                   	push   edx
c0020402:	50                   	push   eax
c0020403:	e8 0c f2 ff ff       	call   c001f614 <Vm::fpuFloatToLong(unsigned long long)>
c0020408:	83 c4 10             	add    esp,0x10
c002040b:	89 06                	mov    DWORD PTR [esi],eax
c002040d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020410:	e9 f8 f7 ff ff       	jmp    c001fc0d <Vm::x87Handler(regs*)+0x259>
c0020415:	83 c4 1c             	add    esp,0x1c
c0020418:	5b                   	pop    ebx
c0020419:	5e                   	pop    esi
c002041a:	5f                   	pop    edi
c002041b:	5d                   	pop    ebp
c002041c:	c3                   	ret    

c002041d <__static_initialization_and_destruction_0(int, int)>:
c002041d:	83 ec 0c             	sub    esp,0xc
c0020420:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020425:	75 1a                	jne    c0020441 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020427:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002042f:	75 10                	jne    c0020441 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020431:	83 ec 0c             	sub    esp,0xc
c0020434:	68 c0 18 03 c0       	push   0xc00318c0
c0020439:	e8 12 88 00 00       	call   c0028c50 <Vm::_FPUState::_FPUState()>
c002043e:	83 c4 10             	add    esp,0x10
c0020441:	90                   	nop
c0020442:	83 c4 0c             	add    esp,0xc
c0020445:	c3                   	ret    

c0020446 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020446:	83 ec 0c             	sub    esp,0xc
c0020449:	83 ec 08             	sub    esp,0x8
c002044c:	68 ff ff 00 00       	push   0xffff
c0020451:	6a 01                	push   0x1
c0020453:	e8 c5 ff ff ff       	call   c002041d <__static_initialization_and_destruction_0(int, int)>
c0020458:	83 c4 10             	add    esp,0x10
c002045b:	83 c4 0c             	add    esp,0xc
c002045e:	c3                   	ret    
c002045f:	90                   	nop

c0020460 <FAT::getName()>:
c0020460:	b8 c4 c6 02 c0       	mov    eax,0xc002c6c4
c0020465:	c3                   	ret    

c0020466 <FAT::tell(void*, unsigned long long*)>:
c0020466:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002046b:	75 06                	jne    c0020473 <FAT::tell(void*, unsigned long long*)+0xd>
c002046d:	b8 04 00 00 00       	mov    eax,0x4
c0020472:	c3                   	ret    
c0020473:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020478:	75 06                	jne    c0020480 <FAT::tell(void*, unsigned long long*)+0x1a>
c002047a:	b8 04 00 00 00       	mov    eax,0x4
c002047f:	c3                   	ret    
c0020480:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020484:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020487:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002048a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002048e:	89 01                	mov    DWORD PTR [ecx],eax
c0020490:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020493:	b8 00 00 00 00       	mov    eax,0x0
c0020498:	c3                   	ret    
c0020499:	90                   	nop

c002049a <FAT::stat(void*, unsigned long long*)>:
c002049a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002049f:	75 06                	jne    c00204a7 <FAT::stat(void*, unsigned long long*)+0xd>
c00204a1:	b8 04 00 00 00       	mov    eax,0x4
c00204a6:	c3                   	ret    
c00204a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204ac:	75 06                	jne    c00204b4 <FAT::stat(void*, unsigned long long*)+0x1a>
c00204ae:	b8 04 00 00 00       	mov    eax,0x4
c00204b3:	c3                   	ret    
c00204b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204b8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00204bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00204be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00204c2:	89 01                	mov    DWORD PTR [ecx],eax
c00204c4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00204c7:	b8 00 00 00 00       	mov    eax,0x0
c00204cc:	c3                   	ret    
c00204cd:	90                   	nop

c00204ce <FAT::~FAT()>:
c00204ce:	83 ec 0c             	sub    esp,0xc
c00204d1:	ba 48 c7 02 c0       	mov    edx,0xc002c748
c00204d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204da:	89 10                	mov    DWORD PTR [eax],edx
c00204dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e0:	83 ec 0c             	sub    esp,0xc
c00204e3:	50                   	push   eax
c00204e4:	e8 c5 2c ff ff       	call   c00131ae <Filesystem::~Filesystem()>
c00204e9:	83 c4 10             	add    esp,0x10
c00204ec:	90                   	nop
c00204ed:	83 c4 0c             	add    esp,0xc
c00204f0:	c3                   	ret    
c00204f1:	90                   	nop

c00204f2 <FAT::~FAT()>:
c00204f2:	83 ec 0c             	sub    esp,0xc
c00204f5:	83 ec 0c             	sub    esp,0xc
c00204f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204fc:	e8 cd ff ff ff       	call   c00204ce <FAT::~FAT()>
c0020501:	83 c4 10             	add    esp,0x10
c0020504:	83 ec 08             	sub    esp,0x8
c0020507:	6a 08                	push   0x8
c0020509:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002050d:	e8 94 28 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0020512:	83 c4 10             	add    esp,0x10
c0020515:	83 c4 0c             	add    esp,0xc
c0020518:	c3                   	ret    
c0020519:	90                   	nop

c002051a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002051a:	83 ec 1c             	sub    esp,0x1c
c002051d:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020524:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020529:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002052d:	8b 04 85 40 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6c0]
c0020534:	83 f8 ff             	cmp    eax,0xffffffff
c0020537:	75 34                	jne    c002056d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020539:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002053d:	88 c2                	mov    dl,al
c002053f:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c0020544:	01 d0                	add    eax,edx
c0020546:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002054a:	8b 15 20 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031920
c0020550:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020554:	89 14 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],edx
c002055b:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c0020560:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020564:	89 14 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],edx
c002056b:	eb 17                	jmp    c0020584 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002056d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020571:	88 c2                	mov    dl,al
c0020573:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020577:	8b 04 85 40 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6c0]
c002057e:	01 d0                	add    eax,edx
c0020580:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020584:	83 ec 04             	sub    esp,0x4
c0020587:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002058b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002058f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020593:	50                   	push   eax
c0020594:	e8 9f 67 fe ff       	call   c0006d38 <f_getlabel>
c0020599:	83 c4 10             	add    esp,0x10
c002059c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205a5:	75 07                	jne    c00205ae <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00205a7:	b8 00 00 00 00       	mov    eax,0x0
c00205ac:	eb 05                	jmp    c00205b3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00205ae:	b8 01 00 00 00       	mov    eax,0x1
c00205b3:	83 c4 1c             	add    esp,0x1c
c00205b6:	c3                   	ret    
c00205b7:	90                   	nop

c00205b8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00205b8:	57                   	push   edi
c00205b9:	83 ec 58             	sub    esp,0x58
c00205bc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00205c4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00205c8:	b9 0f 00 00 00       	mov    ecx,0xf
c00205cd:	b8 00 00 00 00       	mov    eax,0x0
c00205d2:	fc                   	cld    
c00205d3:	89 d7                	mov    edi,edx
c00205d5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00205d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00205db:	8b 04 85 40 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6c0]
c00205e2:	83 f8 ff             	cmp    eax,0xffffffff
c00205e5:	75 34                	jne    c002061b <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00205e7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00205eb:	88 c2                	mov    dl,al
c00205ed:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c00205f2:	01 d0                	add    eax,edx
c00205f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205f8:	8b 15 20 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031920
c00205fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020602:	89 14 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],edx
c0020609:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c002060e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020612:	89 14 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],edx
c0020619:	eb 17                	jmp    c0020632 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002061b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002061f:	88 c2                	mov    dl,al
c0020621:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020625:	8b 04 85 40 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6c0]
c002062c:	01 d0                	add    eax,edx
c002062e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020632:	83 ec 08             	sub    esp,0x8
c0020635:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020639:	8d 44 24 18          	lea    eax,[esp+0x18]
c002063d:	50                   	push   eax
c002063e:	e8 31 03 fe ff       	call   c0000974 <strcat>
c0020643:	83 c4 10             	add    esp,0x10
c0020646:	83 ec 0c             	sub    esp,0xc
c0020649:	8d 44 24 18          	lea    eax,[esp+0x18]
c002064d:	50                   	push   eax
c002064e:	e8 d3 68 fe ff       	call   c0006f26 <f_setlabel>
c0020653:	83 c4 10             	add    esp,0x10
c0020656:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002065a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002065f:	75 07                	jne    c0020668 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020661:	b8 00 00 00 00       	mov    eax,0x0
c0020666:	eb 05                	jmp    c002066d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020668:	b8 01 00 00 00       	mov    eax,0x1
c002066d:	83 c4 58             	add    esp,0x58
c0020670:	5f                   	pop    edi
c0020671:	c3                   	ret    

c0020672 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020672:	83 ec 2c             	sub    esp,0x2c
c0020675:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002067d:	83 ec 08             	sub    esp,0x8
c0020680:	68 e8 c6 02 c0       	push   0xc002c6e8
c0020685:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020689:	e8 32 02 fe ff       	call   c00008c0 <strcmp>
c002068e:	83 c4 10             	add    esp,0x10
c0020691:	85 c0                	test   eax,eax
c0020693:	0f 94 c0             	sete   al
c0020696:	84 c0                	test   al,al
c0020698:	74 0d                	je     c00206a7 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002069a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00206a2:	e9 a6 00 00 00       	jmp    c002074d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206a7:	83 ec 08             	sub    esp,0x8
c00206aa:	68 da c6 02 c0       	push   0xc002c6da
c00206af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206b3:	e8 08 02 fe ff       	call   c00008c0 <strcmp>
c00206b8:	83 c4 10             	add    esp,0x10
c00206bb:	85 c0                	test   eax,eax
c00206bd:	0f 94 c0             	sete   al
c00206c0:	84 c0                	test   al,al
c00206c2:	74 0a                	je     c00206ce <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00206c4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00206cc:	eb 7f                	jmp    c002074d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206ce:	83 ec 08             	sub    esp,0x8
c00206d1:	68 e0 c6 02 c0       	push   0xc002c6e0
c00206d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206da:	e8 e1 01 fe ff       	call   c00008c0 <strcmp>
c00206df:	83 c4 10             	add    esp,0x10
c00206e2:	85 c0                	test   eax,eax
c00206e4:	0f 94 c0             	sete   al
c00206e7:	84 c0                	test   al,al
c00206e9:	74 0a                	je     c00206f5 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00206eb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00206f3:	eb 58                	jmp    c002074d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206f5:	83 ec 08             	sub    esp,0x8
c00206f8:	68 ac 93 02 c0       	push   0xc00293ac
c00206fd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020701:	e8 ba 01 fe ff       	call   c00008c0 <strcmp>
c0020706:	83 c4 10             	add    esp,0x10
c0020709:	85 c0                	test   eax,eax
c002070b:	0f 94 c0             	sete   al
c002070e:	84 c0                	test   al,al
c0020710:	74 0a                	je     c002071c <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020712:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002071a:	eb 31                	jmp    c002074d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002071c:	83 ec 08             	sub    esp,0x8
c002071f:	68 e6 c6 02 c0       	push   0xc002c6e6
c0020724:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020728:	e8 93 01 fe ff       	call   c00008c0 <strcmp>
c002072d:	83 c4 10             	add    esp,0x10
c0020730:	85 c0                	test   eax,eax
c0020732:	0f 94 c0             	sete   al
c0020735:	84 c0                	test   al,al
c0020737:	74 0a                	je     c0020743 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020739:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020741:	eb 0a                	jmp    c002074d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020743:	b8 08 00 00 00       	mov    eax,0x8
c0020748:	e9 04 01 00 00       	jmp    c0020851 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002074d:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020754:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020759:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002075d:	8b 04 85 40 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6c0]
c0020764:	83 f8 ff             	cmp    eax,0xffffffff
c0020767:	75 34                	jne    c002079d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020769:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002076d:	88 c2                	mov    dl,al
c002076f:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c0020774:	01 d0                	add    eax,edx
c0020776:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002077a:	8b 15 20 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031920
c0020780:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020784:	89 14 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],edx
c002078b:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c0020790:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020794:	89 14 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],edx
c002079b:	eb 17                	jmp    c00207b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002079d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00207a1:	88 c2                	mov    dl,al
c00207a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207a7:	8b 04 85 40 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6c0]
c00207ae:	01 d0                	add    eax,edx
c00207b0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00207b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207b8:	88 04 24             	mov    BYTE PTR [esp],al
c00207bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00207bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00207cb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00207d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00207d8:	83 ec 0c             	sub    esp,0xc
c00207db:	68 00 20 00 00       	push   0x2000
c00207e0:	e8 5b f0 fe ff       	call   c000f840 <malloc>
c00207e5:	83 c4 10             	add    esp,0x10
c00207e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00207ec:	68 00 20 00 00       	push   0x2000
c00207f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00207f9:	50                   	push   eax
c00207fa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00207fe:	50                   	push   eax
c00207ff:	e8 6d 6b fe ff       	call   c0007371 <f_mkfs>
c0020804:	83 c4 10             	add    esp,0x10
c0020807:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002080b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020810:	75 07                	jne    c0020819 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020812:	b8 00 00 00 00       	mov    eax,0x0
c0020817:	eb 38                	jmp    c0020851 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020819:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002081e:	75 17                	jne    c0020837 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020820:	83 ec 0c             	sub    esp,0xc
c0020823:	68 18 c7 02 c0       	push   0xc002c718
c0020828:	e8 59 26 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c002082d:	83 c4 10             	add    esp,0x10
c0020830:	b8 09 00 00 00       	mov    eax,0x9
c0020835:	eb 1a                	jmp    c0020851 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020837:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002083b:	83 ec 08             	sub    esp,0x8
c002083e:	50                   	push   eax
c002083f:	68 ec c6 02 c0       	push   0xc002c6ec
c0020844:	e8 3d 26 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0020849:	83 c4 10             	add    esp,0x10
c002084c:	b8 01 00 00 00       	mov    eax,0x1
c0020851:	83 c4 2c             	add    esp,0x2c
c0020854:	c3                   	ret    
c0020855:	90                   	nop

c0020856 <FAT::tryMount(LogicalDisk*, int)>:
c0020856:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002085c:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c0020861:	83 f8 14             	cmp    eax,0x14
c0020864:	75 17                	jne    c002087d <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020866:	83 ec 0c             	sub    esp,0xc
c0020869:	68 fe c6 02 c0       	push   0xc002c6fe
c002086e:	e8 b8 9c ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0020873:	83 c4 10             	add    esp,0x10
c0020876:	b0 00                	mov    al,0x0
c0020878:	e9 d7 01 00 00       	jmp    c0020a54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002087d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020884:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002088a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020890:	3d 00 02 00 00       	cmp    eax,0x200
c0020895:	74 07                	je     c002089e <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020897:	b0 00                	mov    al,0x0
c0020899:	e9 b6 01 00 00       	jmp    c0020a54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002089e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00208a6:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00208ad:	8b 04 85 40 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6c0]
c00208b4:	83 f8 ff             	cmp    eax,0xffffffff
c00208b7:	74 07                	je     c00208c0 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00208b9:	b0 01                	mov    al,0x1
c00208bb:	e9 94 01 00 00       	jmp    c0020a54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208c0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00208ca:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00208d2:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00208d9:	88 c2                	mov    dl,al
c00208db:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c00208e0:	01 d0                	add    eax,edx
c00208e2:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00208e9:	8b 15 20 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031920
c00208ef:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00208f6:	89 14 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],edx
c00208fd:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c0020902:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020909:	89 14 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],edx
c0020910:	83 ec 0c             	sub    esp,0xc
c0020913:	68 54 02 00 00       	push   0x254
c0020918:	e8 23 ef fe ff       	call   c000f840 <malloc>
c002091d:	83 c4 10             	add    esp,0x10
c0020920:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020927:	83 ec 04             	sub    esp,0x4
c002092a:	6a 00                	push   0x0
c002092c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020933:	50                   	push   eax
c0020934:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002093b:	e8 ef 45 fe ff       	call   c0004f2f <f_mount>
c0020940:	83 c4 10             	add    esp,0x10
c0020943:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002094a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020952:	74 19                	je     c002096d <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020954:	83 ec 0c             	sub    esp,0xc
c0020957:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002095e:	e8 fd ee fe ff       	call   c000f860 <rfree>
c0020963:	83 c4 10             	add    esp,0x10
c0020966:	b0 00                	mov    al,0x0
c0020968:	e9 e7 00 00 00       	jmp    c0020a54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002096d:	83 ec 04             	sub    esp,0x4
c0020970:	68 00 01 00 00       	push   0x100
c0020975:	6a 00                	push   0x0
c0020977:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002097e:	50                   	push   eax
c002097f:	e8 f4 fd fd ff       	call   c0000778 <memset>
c0020984:	83 c4 10             	add    esp,0x10
c0020987:	83 ec 08             	sub    esp,0x8
c002098a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020991:	50                   	push   eax
c0020992:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020999:	50                   	push   eax
c002099a:	e8 d5 ff fd ff       	call   c0000974 <strcat>
c002099f:	83 c4 10             	add    esp,0x10
c00209a2:	83 ec 08             	sub    esp,0x8
c00209a5:	68 0c c7 02 c0       	push   0xc002c70c
c00209aa:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00209b1:	50                   	push   eax
c00209b2:	e8 bd ff fd ff       	call   c0000974 <strcat>
c00209b7:	83 c4 10             	add    esp,0x10
c00209ba:	83 ec 04             	sub    esp,0x4
c00209bd:	6a 01                	push   0x1
c00209bf:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00209c6:	50                   	push   eax
c00209c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00209cb:	50                   	push   eax
c00209cc:	e8 c0 45 fe ff       	call   c0004f91 <f_open>
c00209d1:	83 c4 10             	add    esp,0x10
c00209d4:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00209db:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00209e2:	85 c0                	test   eax,eax
c00209e4:	74 0a                	je     c00209f0 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00209e6:	78 2d                	js     c0020a15 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00209e8:	83 e8 04             	sub    eax,0x4
c00209eb:	83 f8 01             	cmp    eax,0x1
c00209ee:	77 25                	ja     c0020a15 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00209f0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00209f8:	83 ec 0c             	sub    esp,0xc
c00209fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00209ff:	50                   	push   eax
c0020a00:	e8 de 50 fe ff       	call   c0005ae3 <f_close>
c0020a05:	83 c4 10             	add    esp,0x10
c0020a08:	90                   	nop
c0020a09:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020a11:	74 3a                	je     c0020a4d <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020a13:	eb 2d                	jmp    c0020a42 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020a15:	83 ec 0c             	sub    esp,0xc
c0020a18:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a1f:	e8 3c ee fe ff       	call   c000f860 <rfree>
c0020a24:	83 c4 10             	add    esp,0x10
c0020a27:	83 ec 04             	sub    esp,0x4
c0020a2a:	6a 00                	push   0x0
c0020a2c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a33:	50                   	push   eax
c0020a34:	6a 00                	push   0x0
c0020a36:	e8 f4 44 fe ff       	call   c0004f2f <f_mount>
c0020a3b:	83 c4 10             	add    esp,0x10
c0020a3e:	b0 00                	mov    al,0x0
c0020a40:	eb 12                	jmp    c0020a54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a42:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c0020a47:	40                   	inc    eax
c0020a48:	a3 20 19 03 c0       	mov    ds:0xc0031920,eax
c0020a4d:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020a54:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020a5a:	c3                   	ret    
c0020a5b:	90                   	nop

c0020a5c <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020a5c:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020a62:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020a6a:	74 0a                	je     c0020a76 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020a6c:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020a74:	75 0a                	jne    c0020a80 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020a76:	b8 04 00 00 00       	mov    eax,0x4
c0020a7b:	e9 db 00 00 00       	jmp    c0020b5b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020a80:	83 ec 08             	sub    esp,0x8
c0020a83:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020a8a:	50                   	push   eax
c0020a8b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020a92:	e8 56 56 fe ff       	call   c00060ed <f_readdir>
c0020a97:	83 c4 10             	add    esp,0x10
c0020a9a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020aa1:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020aa7:	83 ec 0c             	sub    esp,0xc
c0020aaa:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020ab1:	83 c0 1a             	add    eax,0x1a
c0020ab4:	50                   	push   eax
c0020ab5:	e8 da fc fd ff       	call   c0000794 <strlen>
c0020aba:	83 c4 10             	add    esp,0x10
c0020abd:	ba 00 00 00 00       	mov    edx,0x0
c0020ac2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ac6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020aca:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020ad1:	0f b6 c0             	movzx  eax,al
c0020ad4:	83 e0 10             	and    eax,0x10
c0020ad7:	74 07                	je     c0020ae0 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020ad9:	b8 02 00 00 00       	mov    eax,0x2
c0020ade:	eb 05                	jmp    c0020ae5 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020ae0:	b8 01 00 00 00       	mov    eax,0x1
c0020ae5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ae9:	83 ec 08             	sub    esp,0x8
c0020aec:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020af3:	83 c0 1a             	add    eax,0x1a
c0020af6:	50                   	push   eax
c0020af7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020afb:	83 c0 10             	add    eax,0x10
c0020afe:	50                   	push   eax
c0020aff:	e8 30 fd fd ff       	call   c0000834 <strcpy>
c0020b04:	83 c4 10             	add    esp,0x10
c0020b07:	83 ec 04             	sub    esp,0x4
c0020b0a:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020b11:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b15:	50                   	push   eax
c0020b16:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020b1d:	e8 22 fc fd ff       	call   c0000744 <memcpy>
c0020b22:	83 c4 10             	add    esp,0x10
c0020b25:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020b2c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020b32:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020b39:	84 c0                	test   al,al
c0020b3b:	75 07                	jne    c0020b44 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020b3d:	b8 07 00 00 00       	mov    eax,0x7
c0020b42:	eb 17                	jmp    c0020b5b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b44:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020b4b:	85 c0                	test   eax,eax
c0020b4d:	75 07                	jne    c0020b56 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020b4f:	b8 00 00 00 00       	mov    eax,0x0
c0020b54:	eb 05                	jmp    c0020b5b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b56:	b8 01 00 00 00       	mov    eax,0x1
c0020b5b:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020b61:	c3                   	ret    

c0020b62 <FAT::read(void*, unsigned long, void*, int*)>:
c0020b62:	83 ec 1c             	sub    esp,0x1c
c0020b65:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b6a:	74 07                	je     c0020b73 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020b6c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b71:	75 07                	jne    c0020b7a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020b73:	b8 04 00 00 00       	mov    eax,0x4
c0020b78:	eb 3d                	jmp    c0020bb7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020b7a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b7e:	50                   	push   eax
c0020b7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b8b:	e8 3d 48 fe ff       	call   c00053cd <f_read>
c0020b90:	83 c4 10             	add    esp,0x10
c0020b93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b9b:	89 c2                	mov    edx,eax
c0020b9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ba1:	89 10                	mov    DWORD PTR [eax],edx
c0020ba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ba7:	85 c0                	test   eax,eax
c0020ba9:	75 07                	jne    c0020bb2 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020bab:	b8 00 00 00 00       	mov    eax,0x0
c0020bb0:	eb 05                	jmp    c0020bb7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020bb2:	b8 01 00 00 00       	mov    eax,0x1
c0020bb7:	83 c4 1c             	add    esp,0x1c
c0020bba:	c3                   	ret    
c0020bbb:	90                   	nop

c0020bbc <FAT::write(void*, unsigned long, void*, int*)>:
c0020bbc:	83 ec 1c             	sub    esp,0x1c
c0020bbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bc4:	74 07                	je     c0020bcd <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020bc6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020bcb:	75 07                	jne    c0020bd4 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020bcd:	b8 04 00 00 00       	mov    eax,0x4
c0020bd2:	eb 3d                	jmp    c0020c11 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020bd4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bd8:	50                   	push   eax
c0020bd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020bdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020be1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020be5:	e8 63 4a fe ff       	call   c000564d <f_write>
c0020bea:	83 c4 10             	add    esp,0x10
c0020bed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bf5:	89 c2                	mov    edx,eax
c0020bf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020bfb:	89 10                	mov    DWORD PTR [eax],edx
c0020bfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c01:	85 c0                	test   eax,eax
c0020c03:	75 07                	jne    c0020c0c <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020c05:	b8 00 00 00 00       	mov    eax,0x0
c0020c0a:	eb 05                	jmp    c0020c11 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c0c:	b8 01 00 00 00       	mov    eax,0x1
c0020c11:	83 c4 1c             	add    esp,0x1c
c0020c14:	c3                   	ret    
c0020c15:	90                   	nop

c0020c16 <FAT::close(void*)>:
c0020c16:	83 ec 1c             	sub    esp,0x1c
c0020c19:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c1e:	75 07                	jne    c0020c27 <FAT::close(void*)+0x11>
c0020c20:	b8 04 00 00 00       	mov    eax,0x4
c0020c25:	eb 36                	jmp    c0020c5d <FAT::close(void*)+0x47>
c0020c27:	83 ec 0c             	sub    esp,0xc
c0020c2a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c2e:	e8 b0 4e fe ff       	call   c0005ae3 <f_close>
c0020c33:	83 c4 10             	add    esp,0x10
c0020c36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c3a:	83 ec 0c             	sub    esp,0xc
c0020c3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c41:	e8 0a ec fe ff       	call   c000f850 <free>
c0020c46:	83 c4 10             	add    esp,0x10
c0020c49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c4d:	85 c0                	test   eax,eax
c0020c4f:	75 07                	jne    c0020c58 <FAT::close(void*)+0x42>
c0020c51:	b8 00 00 00 00       	mov    eax,0x0
c0020c56:	eb 05                	jmp    c0020c5d <FAT::close(void*)+0x47>
c0020c58:	b8 01 00 00 00       	mov    eax,0x1
c0020c5d:	83 c4 1c             	add    esp,0x1c
c0020c60:	c3                   	ret    
c0020c61:	90                   	nop

c0020c62 <FAT::closeDir(void*)>:
c0020c62:	83 ec 1c             	sub    esp,0x1c
c0020c65:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c6a:	75 07                	jne    c0020c73 <FAT::closeDir(void*)+0x11>
c0020c6c:	b8 04 00 00 00       	mov    eax,0x4
c0020c71:	eb 36                	jmp    c0020ca9 <FAT::closeDir(void*)+0x47>
c0020c73:	83 ec 0c             	sub    esp,0xc
c0020c76:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c7a:	e8 4c 54 fe ff       	call   c00060cb <f_closedir>
c0020c7f:	83 c4 10             	add    esp,0x10
c0020c82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c86:	83 ec 0c             	sub    esp,0xc
c0020c89:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c8d:	e8 be eb fe ff       	call   c000f850 <free>
c0020c92:	83 c4 10             	add    esp,0x10
c0020c95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c99:	85 c0                	test   eax,eax
c0020c9b:	75 07                	jne    c0020ca4 <FAT::closeDir(void*)+0x42>
c0020c9d:	b8 00 00 00 00       	mov    eax,0x0
c0020ca2:	eb 05                	jmp    c0020ca9 <FAT::closeDir(void*)+0x47>
c0020ca4:	b8 01 00 00 00       	mov    eax,0x1
c0020ca9:	83 c4 1c             	add    esp,0x1c
c0020cac:	c3                   	ret    
c0020cad:	90                   	nop

c0020cae <FAT::seek(void*, unsigned long long)>:
c0020cae:	83 ec 2c             	sub    esp,0x2c
c0020cb1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020cb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020cb9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020cbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cc1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020cc6:	75 07                	jne    c0020ccf <FAT::seek(void*, unsigned long long)+0x21>
c0020cc8:	b8 04 00 00 00       	mov    eax,0x4
c0020ccd:	eb 2f                	jmp    c0020cfe <FAT::seek(void*, unsigned long long)+0x50>
c0020ccf:	83 ec 04             	sub    esp,0x4
c0020cd2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020cd6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020cda:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020cde:	e8 2f 4e fe ff       	call   c0005b12 <f_lseek>
c0020ce3:	83 c4 10             	add    esp,0x10
c0020ce6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020cea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020cee:	85 c0                	test   eax,eax
c0020cf0:	75 07                	jne    c0020cf9 <FAT::seek(void*, unsigned long long)+0x4b>
c0020cf2:	b8 00 00 00 00       	mov    eax,0x0
c0020cf7:	eb 05                	jmp    c0020cfe <FAT::seek(void*, unsigned long long)+0x50>
c0020cf9:	b8 01 00 00 00       	mov    eax,0x1
c0020cfe:	83 c4 2c             	add    esp,0x2c
c0020d01:	c3                   	ret    

c0020d02 <fatWrapperReadDisk>:
c0020d02:	83 ec 1c             	sub    esp,0x1c
c0020d05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d09:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d11:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020d18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d21:	8b 04 85 00 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1700]
c0020d28:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d2c:	83 ec 0c             	sub    esp,0xc
c0020d2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d33:	52                   	push   edx
c0020d34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d3c:	50                   	push   eax
c0020d3d:	e8 54 59 ff ff       	call   c0016696 <LogicalDisk::read(unsigned long long, int, void*)>
c0020d42:	83 c4 20             	add    esp,0x20
c0020d45:	83 c4 1c             	add    esp,0x1c
c0020d48:	c3                   	ret    

c0020d49 <fatWrapperWriteDisk>:
c0020d49:	83 ec 1c             	sub    esp,0x1c
c0020d4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d50:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d58:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020d5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d63:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d68:	8b 04 85 00 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1700]
c0020d6f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d73:	83 ec 0c             	sub    esp,0xc
c0020d76:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d7a:	52                   	push   edx
c0020d7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d83:	50                   	push   eax
c0020d84:	e8 79 59 ff ff       	call   c0016702 <LogicalDisk::write(unsigned long long, int, void*)>
c0020d89:	83 c4 20             	add    esp,0x20
c0020d8c:	83 c4 1c             	add    esp,0x1c
c0020d8f:	c3                   	ret    

c0020d90 <fatWrapperIoctl>:
c0020d90:	53                   	push   ebx
c0020d91:	83 ec 28             	sub    esp,0x28
c0020d94:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020d9c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020da0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020da4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020da9:	75 31                	jne    c0020ddc <fatWrapperIoctl+0x4c>
c0020dab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020daf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020db3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020db8:	8b 04 85 00 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1700]
c0020dbf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020dc5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020dcb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020dcf:	66 89 02             	mov    WORD PTR [edx],ax
c0020dd2:	b8 00 00 00 00       	mov    eax,0x0
c0020dd7:	e9 b2 00 00 00       	jmp    c0020e8e <fatWrapperIoctl+0xfe>
c0020ddc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020de1:	75 6a                	jne    c0020e4d <fatWrapperIoctl+0xbd>
c0020de3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020de7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020deb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020df0:	8b 04 85 00 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1700]
c0020df7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020dfd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020e03:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020e09:	89 c8                	mov    eax,ecx
c0020e0b:	89 da                	mov    edx,ebx
c0020e0d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020e11:	c1 e0 0a             	shl    eax,0xa
c0020e14:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020e19:	8b 0c 8d 00 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1700]
c0020e20:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020e26:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020e2c:	89 cb                	mov    ebx,ecx
c0020e2e:	c1 fb 1f             	sar    ebx,0x1f
c0020e31:	53                   	push   ebx
c0020e32:	51                   	push   ecx
c0020e33:	52                   	push   edx
c0020e34:	50                   	push   eax
c0020e35:	e8 c2 5a 00 00       	call   c00268fc <__udivdi3>
c0020e3a:	83 c4 10             	add    esp,0x10
c0020e3d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020e41:	89 01                	mov    DWORD PTR [ecx],eax
c0020e43:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020e46:	b8 00 00 00 00       	mov    eax,0x0
c0020e4b:	eb 41                	jmp    c0020e8e <fatWrapperIoctl+0xfe>
c0020e4d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020e52:	75 07                	jne    c0020e5b <fatWrapperIoctl+0xcb>
c0020e54:	b8 00 00 00 00       	mov    eax,0x0
c0020e59:	eb 33                	jmp    c0020e8e <fatWrapperIoctl+0xfe>
c0020e5b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020e60:	75 19                	jne    c0020e7b <fatWrapperIoctl+0xeb>
c0020e62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020e6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e6e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020e74:	b8 00 00 00 00       	mov    eax,0x0
c0020e79:	eb 13                	jmp    c0020e8e <fatWrapperIoctl+0xfe>
c0020e7b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020e80:	75 07                	jne    c0020e89 <fatWrapperIoctl+0xf9>
c0020e82:	b8 00 00 00 00       	mov    eax,0x0
c0020e87:	eb 05                	jmp    c0020e8e <fatWrapperIoctl+0xfe>
c0020e89:	b8 04 00 00 00       	mov    eax,0x4
c0020e8e:	83 c4 28             	add    esp,0x28
c0020e91:	5b                   	pop    ebx
c0020e92:	c3                   	ret    
c0020e93:	90                   	nop

c0020e94 <FAT::FAT()>:
c0020e94:	83 ec 1c             	sub    esp,0x1c
c0020e97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e9b:	83 ec 0c             	sub    esp,0xc
c0020e9e:	50                   	push   eax
c0020e9f:	e8 e6 22 ff ff       	call   c001318a <Filesystem::Filesystem()>
c0020ea4:	83 c4 10             	add    esp,0x10
c0020ea7:	ba 48 c7 02 c0       	mov    edx,0xc002c748
c0020eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020eb0:	89 10                	mov    DWORD PTR [eax],edx
c0020eb2:	c7 05 20 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031920,0x0
c0020ebc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020ec4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020ec9:	7f 15                	jg     c0020ee0 <FAT::FAT()+0x4c>
c0020ecb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ecf:	c7 04 85 40 19 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce6c0],0xffffffff
c0020eda:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020ede:	eb e4                	jmp    c0020ec4 <FAT::FAT()+0x30>
c0020ee0:	90                   	nop
c0020ee1:	83 c4 1c             	add    esp,0x1c
c0020ee4:	c3                   	ret    
c0020ee5:	90                   	nop

c0020ee6 <FAT::fixFilepath(char*)>:
c0020ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020eea:	8a 00                	mov    al,BYTE PTR [eax]
c0020eec:	3c 40                	cmp    al,0x40
c0020eee:	7e 2c                	jle    c0020f1c <FAT::fixFilepath(char*)+0x36>
c0020ef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ef4:	8a 00                	mov    al,BYTE PTR [eax]
c0020ef6:	83 e8 41             	sub    eax,0x41
c0020ef9:	88 c2                	mov    dl,al
c0020efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020eff:	88 10                	mov    BYTE PTR [eax],dl
c0020f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f05:	8a 00                	mov    al,BYTE PTR [eax]
c0020f07:	0f be c0             	movsx  eax,al
c0020f0a:	8b 04 85 40 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6c0]
c0020f11:	83 c0 30             	add    eax,0x30
c0020f14:	88 c2                	mov    dl,al
c0020f16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f1a:	88 10                	mov    BYTE PTR [eax],dl
c0020f1c:	90                   	nop
c0020f1d:	c3                   	ret    

c0020f1e <FAT::open(char const*, void**, FileOpenMode)>:
c0020f1e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f24:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f2c:	74 0a                	je     c0020f38 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020f2e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020f36:	75 0a                	jne    c0020f42 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020f38:	b8 04 00 00 00       	mov    eax,0x4
c0020f3d:	e9 fd 00 00 00       	jmp    c002103f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020f42:	83 ec 08             	sub    esp,0x8
c0020f45:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f4c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f50:	50                   	push   eax
c0020f51:	e8 de f8 fd ff       	call   c0000834 <strcpy>
c0020f56:	83 c4 10             	add    esp,0x10
c0020f59:	83 ec 08             	sub    esp,0x8
c0020f5c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020f60:	50                   	push   eax
c0020f61:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f68:	e8 79 ff ff ff       	call   c0020ee6 <FAT::fixFilepath(char*)>
c0020f6d:	83 c4 10             	add    esp,0x10
c0020f70:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020f78:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f7f:	83 e0 01             	and    eax,0x1
c0020f82:	74 08                	je     c0020f8c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020f84:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020f8c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f93:	83 e0 04             	and    eax,0x4
c0020f96:	74 10                	je     c0020fa8 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020f98:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020fa0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020fa8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020faf:	83 e0 02             	and    eax,0x2
c0020fb2:	74 08                	je     c0020fbc <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020fb4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020fbc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020fc3:	83 e0 08             	and    eax,0x8
c0020fc6:	74 08                	je     c0020fd0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020fc8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020fd0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020fd7:	83 e0 10             	and    eax,0x10
c0020fda:	74 08                	je     c0020fe4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020fdc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020fe4:	83 ec 0c             	sub    esp,0xc
c0020fe7:	68 50 02 00 00       	push   0x250
c0020fec:	e8 4f e8 fe ff       	call   c000f840 <malloc>
c0020ff1:	83 c4 10             	add    esp,0x10
c0020ff4:	89 c2                	mov    edx,eax
c0020ff6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ffd:	89 10                	mov    DWORD PTR [eax],edx
c0020fff:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021007:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002100e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021010:	83 ec 04             	sub    esp,0x4
c0021013:	52                   	push   edx
c0021014:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021018:	52                   	push   edx
c0021019:	50                   	push   eax
c002101a:	e8 72 3f fe ff       	call   c0004f91 <f_open>
c002101f:	83 c4 10             	add    esp,0x10
c0021022:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021029:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021031:	74 07                	je     c002103a <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021033:	b8 01 00 00 00       	mov    eax,0x1
c0021038:	eb 05                	jmp    c002103f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002103a:	b8 00 00 00 00       	mov    eax,0x0
c002103f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021045:	c3                   	ret    

c0021046 <FAT::openDir(char const*, void**)>:
c0021046:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002104c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021054:	74 0a                	je     c0021060 <FAT::openDir(char const*, void**)+0x1a>
c0021056:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002105e:	75 07                	jne    c0021067 <FAT::openDir(char const*, void**)+0x21>
c0021060:	b8 04 00 00 00       	mov    eax,0x4
c0021065:	eb 7d                	jmp    c00210e4 <FAT::openDir(char const*, void**)+0x9e>
c0021067:	83 ec 08             	sub    esp,0x8
c002106a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021071:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021075:	50                   	push   eax
c0021076:	e8 b9 f7 fd ff       	call   c0000834 <strcpy>
c002107b:	83 c4 10             	add    esp,0x10
c002107e:	83 ec 08             	sub    esp,0x8
c0021081:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021085:	50                   	push   eax
c0021086:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002108d:	e8 54 fe ff ff       	call   c0020ee6 <FAT::fixFilepath(char*)>
c0021092:	83 c4 10             	add    esp,0x10
c0021095:	83 ec 0c             	sub    esp,0xc
c0021098:	6a 4c                	push   0x4c
c002109a:	e8 a1 e7 fe ff       	call   c000f840 <malloc>
c002109f:	83 c4 10             	add    esp,0x10
c00210a2:	89 c2                	mov    edx,eax
c00210a4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210ab:	89 10                	mov    DWORD PTR [eax],edx
c00210ad:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00210b6:	83 ec 08             	sub    esp,0x8
c00210b9:	8d 54 24 14          	lea    edx,[esp+0x14]
c00210bd:	52                   	push   edx
c00210be:	50                   	push   eax
c00210bf:	e8 05 4f fe ff       	call   c0005fc9 <f_opendir>
c00210c4:	83 c4 10             	add    esp,0x10
c00210c7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00210ce:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00210d6:	74 07                	je     c00210df <FAT::openDir(char const*, void**)+0x99>
c00210d8:	b8 01 00 00 00       	mov    eax,0x1
c00210dd:	eb 05                	jmp    c00210e4 <FAT::openDir(char const*, void**)+0x9e>
c00210df:	b8 00 00 00 00       	mov    eax,0x0
c00210e4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210ea:	c3                   	ret    
c00210eb:	90                   	nop

c00210ec <FAT::stat(char const*, unsigned long long*, bool*)>:
c00210ec:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00210f2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00210fa:	75 0a                	jne    c0021106 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00210fc:	b8 04 00 00 00       	mov    eax,0x4
c0021101:	e9 c9 00 00 00       	jmp    c00211cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021106:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002110e:	75 0a                	jne    c002111a <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021110:	b8 04 00 00 00       	mov    eax,0x4
c0021115:	e9 b5 00 00 00       	jmp    c00211cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002111a:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021122:	75 0a                	jne    c002112e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021124:	b8 04 00 00 00       	mov    eax,0x4
c0021129:	e9 a1 00 00 00       	jmp    c00211cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002112e:	83 ec 08             	sub    esp,0x8
c0021131:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021138:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002113f:	50                   	push   eax
c0021140:	e8 ef f6 fd ff       	call   c0000834 <strcpy>
c0021145:	83 c4 10             	add    esp,0x10
c0021148:	83 ec 08             	sub    esp,0x8
c002114b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021152:	50                   	push   eax
c0021153:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002115a:	e8 87 fd ff ff       	call   c0020ee6 <FAT::fixFilepath(char*)>
c002115f:	83 c4 10             	add    esp,0x10
c0021162:	83 ec 08             	sub    esp,0x8
c0021165:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021169:	50                   	push   eax
c002116a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021171:	50                   	push   eax
c0021172:	e8 11 50 fe ff       	call   c0006188 <f_stat>
c0021177:	83 c4 10             	add    esp,0x10
c002117a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021181:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021188:	85 c0                	test   eax,eax
c002118a:	74 07                	je     c0021193 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002118c:	83 f8 04             	cmp    eax,0x4
c002118f:	74 32                	je     c00211c3 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021191:	eb 37                	jmp    c00211ca <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021193:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021197:	0f b6 c0             	movzx  eax,al
c002119a:	83 e0 10             	and    eax,0x10
c002119d:	0f 95 c2             	setne  dl
c00211a0:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00211a7:	88 10                	mov    BYTE PTR [eax],dl
c00211a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00211ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00211b0:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00211b7:	89 01                	mov    DWORD PTR [ecx],eax
c00211b9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00211bc:	b8 00 00 00 00       	mov    eax,0x0
c00211c1:	eb 0c                	jmp    c00211cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211c3:	b8 02 00 00 00       	mov    eax,0x2
c00211c8:	eb 05                	jmp    c00211cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211ca:	b8 01 00 00 00       	mov    eax,0x1
c00211cf:	81 c4 2c 02 00 00    	add    esp,0x22c
c00211d5:	c3                   	ret    

c00211d6 <FAT::unlink(char const*)>:
c00211d6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211dc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211e4:	75 07                	jne    c00211ed <FAT::unlink(char const*)+0x17>
c00211e6:	b8 04 00 00 00       	mov    eax,0x4
c00211eb:	eb 5c                	jmp    c0021249 <FAT::unlink(char const*)+0x73>
c00211ed:	83 ec 08             	sub    esp,0x8
c00211f0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211fb:	50                   	push   eax
c00211fc:	e8 33 f6 fd ff       	call   c0000834 <strcpy>
c0021201:	83 c4 10             	add    esp,0x10
c0021204:	83 ec 08             	sub    esp,0x8
c0021207:	8d 44 24 14          	lea    eax,[esp+0x14]
c002120b:	50                   	push   eax
c002120c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021213:	e8 ce fc ff ff       	call   c0020ee6 <FAT::fixFilepath(char*)>
c0021218:	83 c4 10             	add    esp,0x10
c002121b:	83 ec 0c             	sub    esp,0xc
c002121e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021222:	50                   	push   eax
c0021223:	e8 b2 52 fe ff       	call   c00064da <f_unlink>
c0021228:	83 c4 10             	add    esp,0x10
c002122b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021232:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021239:	85 c0                	test   eax,eax
c002123b:	75 07                	jne    c0021244 <FAT::unlink(char const*)+0x6e>
c002123d:	b8 00 00 00 00       	mov    eax,0x0
c0021242:	eb 05                	jmp    c0021249 <FAT::unlink(char const*)+0x73>
c0021244:	b8 01 00 00 00       	mov    eax,0x1
c0021249:	81 c4 1c 01 00 00    	add    esp,0x11c
c002124f:	c3                   	ret    

c0021250 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021250:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021256:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002125d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021264:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021268:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002126c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021274:	75 0a                	jne    c0021280 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021276:	b8 04 00 00 00       	mov    eax,0x4
c002127b:	e9 1c 01 00 00       	jmp    c002139c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021280:	83 ec 08             	sub    esp,0x8
c0021283:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002128a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002128e:	50                   	push   eax
c002128f:	e8 a0 f5 fd ff       	call   c0000834 <strcpy>
c0021294:	83 c4 10             	add    esp,0x10
c0021297:	83 ec 08             	sub    esp,0x8
c002129a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002129e:	50                   	push   eax
c002129f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00212a6:	e8 3b fc ff ff       	call   c0020ee6 <FAT::fixFilepath(char*)>
c00212ab:	83 c4 10             	add    esp,0x10
c00212ae:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00212b6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00212be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00212c3:	83 e0 01             	and    eax,0x1
c00212c6:	74 08                	je     c00212d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00212c8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00212d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00212d5:	83 e0 02             	and    eax,0x2
c00212d8:	74 08                	je     c00212e2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00212da:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00212e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00212e7:	83 e0 04             	and    eax,0x4
c00212ea:	74 08                	je     c00212f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00212ec:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00212f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00212f9:	83 e0 08             	and    eax,0x8
c00212fc:	74 08                	je     c0021306 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00212fe:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021306:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002130b:	83 e0 01             	and    eax,0x1
c002130e:	74 08                	je     c0021318 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021310:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021318:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002131d:	83 e0 02             	and    eax,0x2
c0021320:	74 08                	je     c002132a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021322:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002132a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002132f:	83 e0 04             	and    eax,0x4
c0021332:	74 08                	je     c002133c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021334:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002133c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021341:	83 e0 08             	and    eax,0x8
c0021344:	74 08                	je     c002134e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021346:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002134e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021355:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002135c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021364:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002136c:	83 ec 04             	sub    esp,0x4
c002136f:	52                   	push   edx
c0021370:	50                   	push   eax
c0021371:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021375:	50                   	push   eax
c0021376:	e8 01 58 fe ff       	call   c0006b7c <f_chmod>
c002137b:	83 c4 10             	add    esp,0x10
c002137e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021385:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002138c:	85 c0                	test   eax,eax
c002138e:	75 07                	jne    c0021397 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021390:	b8 00 00 00 00       	mov    eax,0x0
c0021395:	eb 05                	jmp    c002139c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021397:	b8 01 00 00 00       	mov    eax,0x1
c002139c:	81 c4 2c 01 00 00    	add    esp,0x12c
c00213a2:	c3                   	ret    
c00213a3:	90                   	nop

c00213a4 <FAT::rename(char const*, char const*)>:
c00213a4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00213aa:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00213b2:	74 0a                	je     c00213be <FAT::rename(char const*, char const*)+0x1a>
c00213b4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00213bc:	75 0a                	jne    c00213c8 <FAT::rename(char const*, char const*)+0x24>
c00213be:	b8 04 00 00 00       	mov    eax,0x4
c00213c3:	e9 98 00 00 00       	jmp    c0021460 <FAT::rename(char const*, char const*)+0xbc>
c00213c8:	83 ec 08             	sub    esp,0x8
c00213cb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00213d2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00213d9:	50                   	push   eax
c00213da:	e8 55 f4 fd ff       	call   c0000834 <strcpy>
c00213df:	83 c4 10             	add    esp,0x10
c00213e2:	83 ec 08             	sub    esp,0x8
c00213e5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00213ec:	50                   	push   eax
c00213ed:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00213f4:	e8 ed fa ff ff       	call   c0020ee6 <FAT::fixFilepath(char*)>
c00213f9:	83 c4 10             	add    esp,0x10
c00213fc:	83 ec 08             	sub    esp,0x8
c00213ff:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021406:	8d 44 24 18          	lea    eax,[esp+0x18]
c002140a:	50                   	push   eax
c002140b:	e8 24 f4 fd ff       	call   c0000834 <strcpy>
c0021410:	83 c4 10             	add    esp,0x10
c0021413:	83 ec 08             	sub    esp,0x8
c0021416:	8d 44 24 14          	lea    eax,[esp+0x14]
c002141a:	50                   	push   eax
c002141b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021422:	e8 bf fa ff ff       	call   c0020ee6 <FAT::fixFilepath(char*)>
c0021427:	83 c4 10             	add    esp,0x10
c002142a:	83 ec 08             	sub    esp,0x8
c002142d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021431:	50                   	push   eax
c0021432:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021439:	50                   	push   eax
c002143a:	e8 4a 54 fe ff       	call   c0006889 <f_rename>
c002143f:	83 c4 10             	add    esp,0x10
c0021442:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021449:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021450:	85 c0                	test   eax,eax
c0021452:	75 07                	jne    c002145b <FAT::rename(char const*, char const*)+0xb7>
c0021454:	b8 00 00 00 00       	mov    eax,0x0
c0021459:	eb 05                	jmp    c0021460 <FAT::rename(char const*, char const*)+0xbc>
c002145b:	b8 01 00 00 00       	mov    eax,0x1
c0021460:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021466:	c3                   	ret    
c0021467:	90                   	nop

c0021468 <FAT::mkdir(char const*)>:
c0021468:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002146e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021476:	75 07                	jne    c002147f <FAT::mkdir(char const*)+0x17>
c0021478:	b8 04 00 00 00       	mov    eax,0x4
c002147d:	eb 5c                	jmp    c00214db <FAT::mkdir(char const*)+0x73>
c002147f:	83 ec 08             	sub    esp,0x8
c0021482:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021489:	8d 44 24 18          	lea    eax,[esp+0x18]
c002148d:	50                   	push   eax
c002148e:	e8 a1 f3 fd ff       	call   c0000834 <strcpy>
c0021493:	83 c4 10             	add    esp,0x10
c0021496:	83 ec 08             	sub    esp,0x8
c0021499:	8d 44 24 14          	lea    eax,[esp+0x14]
c002149d:	50                   	push   eax
c002149e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214a5:	e8 3c fa ff ff       	call   c0020ee6 <FAT::fixFilepath(char*)>
c00214aa:	83 c4 10             	add    esp,0x10
c00214ad:	83 ec 0c             	sub    esp,0xc
c00214b0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214b4:	50                   	push   eax
c00214b5:	e8 a3 51 fe ff       	call   c000665d <f_mkdir>
c00214ba:	83 c4 10             	add    esp,0x10
c00214bd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00214c4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00214cb:	85 c0                	test   eax,eax
c00214cd:	75 07                	jne    c00214d6 <FAT::mkdir(char const*)+0x6e>
c00214cf:	b8 00 00 00 00       	mov    eax,0x0
c00214d4:	eb 05                	jmp    c00214db <FAT::mkdir(char const*)+0x73>
c00214d6:	b8 01 00 00 00       	mov    eax,0x1
c00214db:	81 c4 1c 01 00 00    	add    esp,0x11c
c00214e1:	c3                   	ret    

c00214e2 <FAT::exists(char const*)>:
c00214e2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00214e8:	83 ec 08             	sub    esp,0x8
c00214eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00214f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00214f6:	50                   	push   eax
c00214f7:	e8 38 f3 fd ff       	call   c0000834 <strcpy>
c00214fc:	83 c4 10             	add    esp,0x10
c00214ff:	83 ec 08             	sub    esp,0x8
c0021502:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021506:	50                   	push   eax
c0021507:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002150e:	e8 d3 f9 ff ff       	call   c0020ee6 <FAT::fixFilepath(char*)>
c0021513:	83 c4 10             	add    esp,0x10
c0021516:	83 ec 08             	sub    esp,0x8
c0021519:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021520:	50                   	push   eax
c0021521:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021525:	50                   	push   eax
c0021526:	e8 5d 4c fe ff       	call   c0006188 <f_stat>
c002152b:	83 c4 10             	add    esp,0x10
c002152e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021535:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002153c:	85 c0                	test   eax,eax
c002153e:	75 04                	jne    c0021544 <FAT::exists(char const*)+0x62>
c0021540:	b0 01                	mov    al,0x1
c0021542:	eb 02                	jmp    c0021546 <FAT::exists(char const*)+0x64>
c0021544:	b0 00                	mov    al,0x0
c0021546:	81 c4 2c 02 00 00    	add    esp,0x22c
c002154c:	c3                   	ret    
c002154d:	90                   	nop

c002154e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002154e:	b8 08 00 00 00       	mov    eax,0x8
c0021553:	c3                   	ret    

c0021554 <ISO9660::seek(void*, unsigned long long)>:
c0021554:	53                   	push   ebx
c0021555:	b8 04 00 00 00       	mov    eax,0x4
c002155a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002155e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021562:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021566:	85 d2                	test   edx,edx
c0021568:	74 17                	je     c0021581 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002156a:	89 c8                	mov    eax,ecx
c002156c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002156f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021572:	b8 01 00 00 00       	mov    eax,0x1
c0021577:	73 08                	jae    c0021581 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021579:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002157c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002157f:	31 c0                	xor    eax,eax
c0021581:	5b                   	pop    ebx
c0021582:	c3                   	ret    
c0021583:	90                   	nop

c0021584 <ISO9660::tell(void*, unsigned long long*)>:
c0021584:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002158c:	85 d2                	test   edx,edx
c002158e:	74 12                	je     c00215a2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021590:	85 c0                	test   eax,eax
c0021592:	74 0e                	je     c00215a2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021594:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021597:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002159a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002159d:	89 10                	mov    DWORD PTR [eax],edx
c002159f:	31 c0                	xor    eax,eax
c00215a1:	c3                   	ret    
c00215a2:	b8 04 00 00 00       	mov    eax,0x4
c00215a7:	c3                   	ret    

c00215a8 <ISO9660::getName()>:
c00215a8:	b8 a4 c7 02 c0       	mov    eax,0xc002c7a4
c00215ad:	c3                   	ret    

c00215ae <ISO9660::stat(void*, unsigned long long*)>:
c00215ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00215b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215b6:	85 d2                	test   edx,edx
c00215b8:	74 12                	je     c00215cc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00215ba:	85 c0                	test   eax,eax
c00215bc:	74 0e                	je     c00215cc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00215be:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00215c1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00215c4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00215c7:	89 10                	mov    DWORD PTR [eax],edx
c00215c9:	31 c0                	xor    eax,eax
c00215cb:	c3                   	ret    
c00215cc:	b8 04 00 00 00       	mov    eax,0x4
c00215d1:	c3                   	ret    

c00215d2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00215d2:	b8 01 00 00 00       	mov    eax,0x1
c00215d7:	c3                   	ret    

c00215d8 <ISO9660::unlink(char const*)>:
c00215d8:	b8 01 00 00 00       	mov    eax,0x1
c00215dd:	c3                   	ret    

c00215de <ISO9660::write(void*, unsigned long, void*, int*)>:
c00215de:	b8 01 00 00 00       	mov    eax,0x1
c00215e3:	c3                   	ret    

c00215e4 <ISO9660::rename(char const*, char const*)>:
c00215e4:	b8 01 00 00 00       	mov    eax,0x1
c00215e9:	c3                   	ret    

c00215ea <ISO9660::mkdir(char const*)>:
c00215ea:	b8 01 00 00 00       	mov    eax,0x1
c00215ef:	c3                   	ret    

c00215f0 <ISO9660::close(void*)>:
c00215f0:	83 ec 0c             	sub    esp,0xc
c00215f3:	b8 04 00 00 00       	mov    eax,0x4
c00215f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215fc:	85 d2                	test   edx,edx
c00215fe:	74 0e                	je     c002160e <ISO9660::close(void*)+0x1e>
c0021600:	83 ec 0c             	sub    esp,0xc
c0021603:	52                   	push   edx
c0021604:	e8 47 e2 fe ff       	call   c000f850 <free>
c0021609:	83 c4 10             	add    esp,0x10
c002160c:	31 c0                	xor    eax,eax
c002160e:	83 c4 0c             	add    esp,0xc
c0021611:	c3                   	ret    

c0021612 <ISO9660::closeDir(void*)>:
c0021612:	83 ec 0c             	sub    esp,0xc
c0021615:	b8 04 00 00 00       	mov    eax,0x4
c002161a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002161e:	85 d2                	test   edx,edx
c0021620:	74 0e                	je     c0021630 <ISO9660::closeDir(void*)+0x1e>
c0021622:	83 ec 0c             	sub    esp,0xc
c0021625:	52                   	push   edx
c0021626:	e8 25 e2 fe ff       	call   c000f850 <free>
c002162b:	83 c4 10             	add    esp,0x10
c002162e:	31 c0                	xor    eax,eax
c0021630:	83 c4 0c             	add    esp,0xc
c0021633:	c3                   	ret    

c0021634 <ISO9660::~ISO9660()>:
c0021634:	83 ec 0c             	sub    esp,0xc
c0021637:	ba 08 c8 02 c0       	mov    edx,0xc002c808
c002163c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021640:	89 10                	mov    DWORD PTR [eax],edx
c0021642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021646:	83 ec 0c             	sub    esp,0xc
c0021649:	50                   	push   eax
c002164a:	e8 5f 1b ff ff       	call   c00131ae <Filesystem::~Filesystem()>
c002164f:	83 c4 10             	add    esp,0x10
c0021652:	90                   	nop
c0021653:	83 c4 0c             	add    esp,0xc
c0021656:	c3                   	ret    
c0021657:	90                   	nop

c0021658 <ISO9660::~ISO9660()>:
c0021658:	83 ec 0c             	sub    esp,0xc
c002165b:	83 ec 0c             	sub    esp,0xc
c002165e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021662:	e8 cd ff ff ff       	call   c0021634 <ISO9660::~ISO9660()>
c0021667:	83 c4 10             	add    esp,0x10
c002166a:	83 ec 08             	sub    esp,0x8
c002166d:	6a 08                	push   0x8
c002166f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021673:	e8 2e 17 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0021678:	83 c4 10             	add    esp,0x10
c002167b:	83 c4 0c             	add    esp,0xc
c002167e:	c3                   	ret    

c002167f <__memmem(unsigned char*, int, unsigned char*, int)>:
c002167f:	55                   	push   ebp
c0021680:	31 c9                	xor    ecx,ecx
c0021682:	57                   	push   edi
c0021683:	56                   	push   esi
c0021684:	53                   	push   ebx
c0021685:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021689:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002168d:	89 eb                	mov    ebx,ebp
c002168f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021693:	39 ce                	cmp    esi,ecx
c0021695:	7e 17                	jle    c00216ae <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021697:	31 d2                	xor    edx,edx
c0021699:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002169d:	7d 13                	jge    c00216b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002169f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00216a3:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00216a6:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00216a9:	75 0d                	jne    c00216b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00216ab:	42                   	inc    edx
c00216ac:	eb eb                	jmp    c0021699 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00216ae:	31 c0                	xor    eax,eax
c00216b0:	eb 0a                	jmp    c00216bc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00216b2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00216b6:	eb 04                	jmp    c00216bc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00216b8:	41                   	inc    ecx
c00216b9:	43                   	inc    ebx
c00216ba:	eb d7                	jmp    c0021693 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00216bc:	5b                   	pop    ebx
c00216bd:	5e                   	pop    esi
c00216be:	5f                   	pop    edi
c00216bf:	5d                   	pop    ebp
c00216c0:	c3                   	ret    

c00216c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00216c1:	56                   	push   esi
c00216c2:	53                   	push   ebx
c00216c3:	52                   	push   edx
c00216c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00216c8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00216cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00216d0:	39 0d 20 1a 03 c0    	cmp    DWORD PTR ds:0xc0031a20,ecx
c00216d6:	75 08                	jne    c00216e0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00216d8:	38 05 74 d8 02 c0    	cmp    BYTE PTR ds:0xc002d874,al
c00216de:	74 2b                	je     c002170b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00216e0:	83 ec 0c             	sub    esp,0xc
c00216e3:	a2 74 d8 02 c0       	mov    ds:0xc002d874,al
c00216e8:	68 40 1a 03 c0       	push   0xc0031a40
c00216ed:	0f be c0             	movsx  eax,al
c00216f0:	6a 01                	push   0x1
c00216f2:	89 0d 20 1a 03 c0    	mov    DWORD PTR ds:0xc0031a20,ecx
c00216f8:	31 db                	xor    ebx,ebx
c00216fa:	53                   	push   ebx
c00216fb:	51                   	push   ecx
c00216fc:	ff 34 85 fc e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd1804]
c0021703:	e8 8e 4f ff ff       	call   c0016696 <LogicalDisk::read(unsigned long long, int, void*)>
c0021708:	83 c4 20             	add    esp,0x20
c002170b:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021713:	c7 44 24 14 40 1a 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031a40
c002171b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002171f:	58                   	pop    eax
c0021720:	5b                   	pop    ebx
c0021721:	5e                   	pop    esi
c0021722:	e9 1d f0 fd ff       	jmp    c0000744 <memcpy>
c0021727:	90                   	nop

c0021728 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021728:	81 ec 10 08 00 00    	sub    esp,0x810
c002172e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021735:	83 c0 41             	add    eax,0x41
c0021738:	0f be c0             	movsx  eax,al
c002173b:	50                   	push   eax
c002173c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021740:	50                   	push   eax
c0021741:	6a 10                	push   0x10
c0021743:	e8 79 ff ff ff       	call   c00216c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021748:	83 c4 10             	add    esp,0x10
c002174b:	31 c0                	xor    eax,eax
c002174d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021752:	75 1d                	jne    c0021771 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021754:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021759:	75 16                	jne    c0021771 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002175b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021760:	75 0f                	jne    c0021771 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021762:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021767:	75 08                	jne    c0021771 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021769:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002176e:	0f 94 c0             	sete   al
c0021771:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021777:	c3                   	ret    

c0021778 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021778:	55                   	push   ebp
c0021779:	57                   	push   edi
c002177a:	56                   	push   esi
c002177b:	53                   	push   ebx
c002177c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021782:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021789:	85 ed                	test   ebp,ebp
c002178b:	0f 84 d6 01 00 00    	je     c0021967 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021791:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021799:	0f 84 c8 01 00 00    	je     c0021967 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002179f:	b8 01 00 00 00       	mov    eax,0x1
c00217a4:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00217a8:	0f 85 be 01 00 00    	jne    c002196c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00217ae:	31 d2                	xor    edx,edx
c00217b0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00217b7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00217ba:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00217bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00217c1:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00217c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00217c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00217cb:	01 f0                	add    eax,esi
c00217cd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00217d0:	11 fa                	adc    edx,edi
c00217d2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00217d6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00217da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00217de:	19 d1                	sbb    ecx,edx
c00217e0:	72 0a                	jb     c00217ec <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00217e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00217e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00217ea:	eb 13                	jmp    c00217ff <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00217ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00217f4:	29 f0                	sub    eax,esi
c00217f6:	19 fa                	sbb    edx,edi
c00217f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00217fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00217ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021802:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021805:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021809:	51                   	push   ecx
c002180a:	c1 e0 0b             	shl    eax,0xb
c002180d:	01 c6                	add    esi,eax
c002180f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021813:	11 d7                	adc    edi,edx
c0021815:	50                   	push   eax
c0021816:	89 fa                	mov    edx,edi
c0021818:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002181c:	89 f0                	mov    eax,esi
c002181e:	53                   	push   ebx
c002181f:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021823:	50                   	push   eax
c0021824:	e8 98 fe ff ff       	call   c00216c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021829:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002182d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021830:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021834:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002183a:	83 c4 10             	add    esp,0x10
c002183d:	b8 00 08 00 00       	mov    eax,0x800
c0021842:	29 d0                	sub    eax,edx
c0021844:	39 c1                	cmp    ecx,eax
c0021846:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002184a:	83 d9 00             	sbb    ecx,0x0
c002184d:	7d 1c                	jge    c002186b <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c002184f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021854:	75 12                	jne    c0021868 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021856:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002185d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021863:	e9 fb 00 00 00       	jmp    c0021963 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021868:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002186b:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c002186e:	31 d2                	xor    edx,edx
c0021870:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021874:	39 c2                	cmp    edx,eax
c0021876:	7d 14                	jge    c002188c <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021878:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002187f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021883:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021886:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021889:	42                   	inc    edx
c002188a:	eb e8                	jmp    c0021874 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002188c:	89 c3                	mov    ebx,eax
c002188e:	85 c0                	test   eax,eax
c0021890:	79 02                	jns    c0021894 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021892:	31 db                	xor    ebx,ebx
c0021894:	99                   	cdq    
c0021895:	01 c3                	add    ebx,eax
c0021897:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c002189e:	01 c6                	add    esi,eax
c00218a0:	11 d7                	adc    edi,edx
c00218a2:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00218a6:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00218aa:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00218ad:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00218b1:	29 c6                	sub    esi,eax
c00218b3:	19 d7                	sbb    edi,edx
c00218b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00218b8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00218bc:	b8 ff 07 00 00       	mov    eax,0x7ff
c00218c1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00218c4:	b8 00 00 00 00       	mov    eax,0x0
c00218c9:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00218cd:	7d 3e                	jge    c002190d <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00218cf:	52                   	push   edx
c00218d0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218d4:	50                   	push   eax
c00218d5:	53                   	push   ebx
c00218d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00218da:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00218de:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218e2:	50                   	push   eax
c00218e3:	e8 d9 fd ff ff       	call   c00216c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218e8:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00218f0:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00218f5:	81 c3 00 08 00 00    	add    ebx,0x800
c00218fb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021903:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021908:	83 c4 10             	add    esp,0x10
c002190b:	eb af                	jmp    c00218bc <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c002190d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021911:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021914:	74 32                	je     c0021948 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021916:	50                   	push   eax
c0021917:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002191b:	50                   	push   eax
c002191c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021920:	50                   	push   eax
c0021921:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021925:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021929:	0f ac fe 0b          	shrd   esi,edi,0xb
c002192d:	56                   	push   esi
c002192e:	e8 8e fd ff ff       	call   c00216c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021933:	83 c4 0c             	add    esp,0xc
c0021936:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c002193a:	8d 44 24 28          	lea    eax,[esp+0x28]
c002193e:	50                   	push   eax
c002193f:	53                   	push   ebx
c0021940:	e8 ff ed fd ff       	call   c0000744 <memcpy>
c0021945:	83 c4 10             	add    esp,0x10
c0021948:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002194f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021953:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021957:	89 38                	mov    DWORD PTR [eax],edi
c0021959:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002195d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021960:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021963:	31 c0                	xor    eax,eax
c0021965:	eb 05                	jmp    c002196c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021967:	b8 04 00 00 00       	mov    eax,0x4
c002196c:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021972:	5b                   	pop    ebx
c0021973:	5e                   	pop    esi
c0021974:	5f                   	pop    edi
c0021975:	5d                   	pop    ebp
c0021976:	c3                   	ret    
c0021977:	90                   	nop

c0021978 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021978:	55                   	push   ebp
c0021979:	57                   	push   edi
c002197a:	56                   	push   esi
c002197b:	53                   	push   ebx
c002197c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021982:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021989:	85 f6                	test   esi,esi
c002198b:	0f 84 64 02 00 00    	je     c0021bf5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021991:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021999:	0f 84 56 02 00 00    	je     c0021bf5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002199f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00219a2:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00219a5:	75 0a                	jne    c00219b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00219a7:	b8 07 00 00 00       	mov    eax,0x7
c00219ac:	e9 49 02 00 00       	jmp    c0021bfa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00219b1:	50                   	push   eax
c00219b2:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00219b6:	50                   	push   eax
c00219b7:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00219be:	53                   	push   ebx
c00219bf:	8b 06                	mov    eax,DWORD PTR [esi]
c00219c1:	c1 e0 0b             	shl    eax,0xb
c00219c4:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00219c7:	c1 e8 0b             	shr    eax,0xb
c00219ca:	50                   	push   eax
c00219cb:	e8 f1 fc ff ff       	call   c00216c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219d0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00219d3:	83 c4 10             	add    esp,0x10
c00219d6:	89 c1                	mov    ecx,eax
c00219d8:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c00219db:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00219e1:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00219e4:	84 db                	test   bl,bl
c00219e6:	0f 85 90 00 00 00    	jne    c0021a7c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c00219ec:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c00219f2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00219f8:	29 c7                	sub    edi,eax
c00219fa:	89 fb                	mov    ebx,edi
c00219fc:	c1 fb 1f             	sar    ebx,0x1f
c00219ff:	01 f8                	add    eax,edi
c0021a01:	11 da                	adc    edx,ebx
c0021a03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a0b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021a0e:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021a11:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021a14:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a1e:	89 d8                	mov    eax,ebx
c0021a20:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021a23:	ba 00 00 00 00       	mov    edx,0x0
c0021a28:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a2c:	b8 00 00 00 00       	mov    eax,0x0
c0021a31:	73 0b                	jae    c0021a3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021a33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a3a:	29 f8                	sub    eax,edi
c0021a3c:	19 da                	sbb    edx,ebx
c0021a3e:	89 d3                	mov    ebx,edx
c0021a40:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021a43:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021a46:	09 c3                	or     ebx,eax
c0021a48:	0f 84 59 ff ff ff    	je     c00219a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021a4e:	55                   	push   ebp
c0021a4f:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a53:	50                   	push   eax
c0021a54:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a5b:	53                   	push   ebx
c0021a5c:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a5e:	c1 e0 0b             	shl    eax,0xb
c0021a61:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021a65:	c1 e8 0b             	shr    eax,0xb
c0021a68:	50                   	push   eax
c0021a69:	e8 53 fc ff ff       	call   c00216c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a6e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a71:	83 c4 10             	add    esp,0x10
c0021a74:	25 ff 07 00 00       	and    eax,0x7ff
c0021a79:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021a7c:	57                   	push   edi
c0021a7d:	6a 28                	push   0x28
c0021a7f:	6a 00                	push   0x0
c0021a81:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021a85:	50                   	push   eax
c0021a86:	e8 ed ec fd ff       	call   c0000778 <memset>
c0021a8b:	31 d2                	xor    edx,edx
c0021a8d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021a90:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a96:	89 f8                	mov    eax,edi
c0021a98:	83 c0 21             	add    eax,0x21
c0021a9b:	83 d2 00             	adc    edx,0x0
c0021a9e:	89 c7                	mov    edi,eax
c0021aa0:	89 d5                	mov    ebp,edx
c0021aa2:	83 c4 10             	add    esp,0x10
c0021aa5:	31 c9                	xor    ecx,ecx
c0021aa7:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021aae:	83 f9 28             	cmp    ecx,0x28
c0021ab1:	88 04 24             	mov    BYTE PTR [esp],al
c0021ab4:	0f 94 c2             	sete   dl
c0021ab7:	88 d0                	mov    al,dl
c0021ab9:	ba ff 07 00 00       	mov    edx,0x7ff
c0021abe:	39 fa                	cmp    edx,edi
c0021ac0:	ba 00 00 00 00       	mov    edx,0x0
c0021ac5:	19 ea                	sbb    edx,ebp
c0021ac7:	0f 92 c2             	setb   dl
c0021aca:	09 c2                	or     edx,eax
c0021acc:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021ad0:	0f 94 c0             	sete   al
c0021ad3:	08 d0                	or     al,dl
c0021ad5:	75 16                	jne    c0021aed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021ad7:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021adb:	74 10                	je     c0021aed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021add:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021ae0:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021ae4:	41                   	inc    ecx
c0021ae5:	83 c7 01             	add    edi,0x1
c0021ae8:	83 d5 00             	adc    ebp,0x0
c0021aeb:	eb ba                	jmp    c0021aa7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021aed:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021af4:	83 ec 0c             	sub    esp,0xc
c0021af7:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021afb:	57                   	push   edi
c0021afc:	e8 93 ec fd ff       	call   c0000794 <strlen>
c0021b01:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021b09:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b0d:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021b14:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b17:	5a                   	pop    edx
c0021b18:	25 ff 07 00 00       	and    eax,0x7ff
c0021b1d:	01 c8                	add    eax,ecx
c0021b1f:	59                   	pop    ecx
c0021b20:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021b26:	83 e0 02             	and    eax,0x2
c0021b29:	3c 01                	cmp    al,0x1
c0021b2b:	19 c0                	sbb    eax,eax
c0021b2d:	83 c0 02             	add    eax,0x2
c0021b30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b34:	57                   	push   edi
c0021b35:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021b39:	50                   	push   eax
c0021b3a:	e8 f5 ec fd ff       	call   c0000834 <strcpy>
c0021b3f:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021b43:	83 c4 10             	add    esp,0x10
c0021b46:	84 c0                	test   al,al
c0021b48:	75 21                	jne    c0021b6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021b4a:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021b52:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021b5a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021b62:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021b69:	eb 28                	jmp    c0021b93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021b6b:	fe c8                	dec    al
c0021b6d:	75 24                	jne    c0021b93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021b6f:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021b77:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021b7f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021b87:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021b8e:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021b93:	0f b6 fb             	movzx  edi,bl
c0021b96:	31 db                	xor    ebx,ebx
c0021b98:	50                   	push   eax
c0021b99:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021ba0:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021ba4:	50                   	push   eax
c0021ba5:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021bac:	e8 93 eb fd ff       	call   c0000744 <memcpy>
c0021bb1:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021bb8:	89 f9                	mov    ecx,edi
c0021bba:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021bc0:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021bc3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021bc6:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021bc9:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021bcc:	83 c4 10             	add    esp,0x10
c0021bcf:	39 c7                	cmp    edi,eax
c0021bd1:	89 df                	mov    edi,ebx
c0021bd3:	19 d7                	sbb    edi,edx
c0021bd5:	72 10                	jb     c0021be7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021bd7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021bde:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021be5:	eb 0a                	jmp    c0021bf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021be7:	29 c8                	sub    eax,ecx
c0021be9:	19 da                	sbb    edx,ebx
c0021beb:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021bee:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021bf1:	31 c0                	xor    eax,eax
c0021bf3:	eb 05                	jmp    c0021bfa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021bf5:	b8 04 00 00 00       	mov    eax,0x4
c0021bfa:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021c00:	5b                   	pop    ebx
c0021c01:	5e                   	pop    esi
c0021c02:	5f                   	pop    edi
c0021c03:	5d                   	pop    ebp
c0021c04:	c3                   	ret    

c0021c05 <readRoot(unsigned int*, unsigned int*, char)>:
c0021c05:	81 ec 40 08 00 00    	sub    esp,0x840
c0021c0b:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021c13:	50                   	push   eax
c0021c14:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021c18:	50                   	push   eax
c0021c19:	6a 10                	push   0x10
c0021c1b:	e8 a1 fa ff ff       	call   c00216c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c20:	83 c4 0c             	add    esp,0xc
c0021c23:	6a 22                	push   0x22
c0021c25:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021c2c:	50                   	push   eax
c0021c2d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021c31:	50                   	push   eax
c0021c32:	e8 0d eb fd ff       	call   c0000744 <memcpy>
c0021c37:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021c3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021c42:	89 10                	mov    DWORD PTR [eax],edx
c0021c44:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021c4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021c4f:	89 10                	mov    DWORD PTR [eax],edx
c0021c51:	b0 01                	mov    al,0x1
c0021c53:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021c59:	c3                   	ret    

c0021c5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021c5a:	55                   	push   ebp
c0021c5b:	57                   	push   edi
c0021c5c:	56                   	push   esi
c0021c5d:	53                   	push   ebx
c0021c5e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c64:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021c6b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021c72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021c76:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021c7a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021c7e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021c82:	75 03                	jne    c0021c87 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c84:	83 c3 02             	add    ebx,0x2
c0021c87:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021c8a:	75 03                	jne    c0021c8f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021c8c:	43                   	inc    ebx
c0021c8d:	eb f8                	jmp    c0021c87 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c8f:	51                   	push   ecx
c0021c90:	68 00 01 00 00       	push   0x100
c0021c95:	6a 00                	push   0x0
c0021c97:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c9b:	50                   	push   eax
c0021c9c:	e8 d7 ea fd ff       	call   c0000778 <memset>
c0021ca1:	83 c4 10             	add    esp,0x10
c0021ca4:	31 d2                	xor    edx,edx
c0021ca6:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021ca9:	84 c0                	test   al,al
c0021cab:	74 21                	je     c0021cce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021cad:	3c 2f                	cmp    al,0x2f
c0021caf:	75 0b                	jne    c0021cbc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021cb1:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021cb5:	bd 01 00 00 00       	mov    ebp,0x1
c0021cba:	eb 14                	jmp    c0021cd0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021cbc:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021cbf:	80 f9 19             	cmp    cl,0x19
c0021cc2:	77 03                	ja     c0021cc7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021cc4:	83 e8 20             	sub    eax,0x20
c0021cc7:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021ccb:	42                   	inc    edx
c0021ccc:	eb d8                	jmp    c0021ca6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021cce:	31 ed                	xor    ebp,ebp
c0021cd0:	83 ec 0c             	sub    esp,0xc
c0021cd3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021cda:	e8 61 db fe ff       	call   c000f840 <malloc>
c0021cdf:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021ce6:	89 c6                	mov    esi,eax
c0021ce8:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021cee:	c1 ef 0b             	shr    edi,0xb
c0021cf1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021cf8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021cfc:	83 c4 10             	add    esp,0x10
c0021cff:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021d04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d08:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021d0f:	74 28                	je     c0021d39 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021d11:	52                   	push   edx
c0021d12:	57                   	push   edi
c0021d13:	50                   	push   eax
c0021d14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d18:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021d1f:	e8 9d f9 ff ff       	call   c00216c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021d28:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021d2f:	05 00 08 00 00       	add    eax,0x800
c0021d34:	83 c4 10             	add    esp,0x10
c0021d37:	eb cb                	jmp    c0021d04 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021d39:	83 ec 0c             	sub    esp,0xc
c0021d3c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021d40:	57                   	push   edi
c0021d41:	e8 4e ea fd ff       	call   c0000794 <strlen>
c0021d46:	50                   	push   eax
c0021d47:	57                   	push   edi
c0021d48:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021d4f:	56                   	push   esi
c0021d50:	e8 2a f9 ff ff       	call   c002167f <__memmem(unsigned char*, int, unsigned char*, int)>
c0021d55:	83 c4 20             	add    esp,0x20
c0021d58:	85 c0                	test   eax,eax
c0021d5a:	75 13                	jne    c0021d6f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021d5c:	83 ec 0c             	sub    esp,0xc
c0021d5f:	56                   	push   esi
c0021d60:	e8 eb da fe ff       	call   c000f850 <free>
c0021d65:	83 c4 10             	add    esp,0x10
c0021d68:	31 c0                	xor    eax,eax
c0021d6a:	e9 b3 00 00 00       	jmp    c0021e22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d6f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021d73:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021d77:	c1 e7 08             	shl    edi,0x8
c0021d7a:	c1 e2 10             	shl    edx,0x10
c0021d7d:	09 d7                	or     edi,edx
c0021d7f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021d83:	09 d7                	or     edi,edx
c0021d85:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021d89:	c1 e2 18             	shl    edx,0x18
c0021d8c:	09 d7                	or     edi,edx
c0021d8e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021d92:	89 d1                	mov    ecx,edx
c0021d94:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021d98:	c1 e1 08             	shl    ecx,0x8
c0021d9b:	c1 e2 10             	shl    edx,0x10
c0021d9e:	09 ca                	or     edx,ecx
c0021da0:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021da4:	09 ca                	or     edx,ecx
c0021da6:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021daa:	c1 e1 18             	shl    ecx,0x18
c0021dad:	09 ca                	or     edx,ecx
c0021daf:	89 e9                	mov    ecx,ebp
c0021db1:	84 c9                	test   cl,cl
c0021db3:	74 3c                	je     c0021df1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021db5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021db9:	83 ec 0c             	sub    esp,0xc
c0021dbc:	56                   	push   esi
c0021dbd:	e8 8e da fe ff       	call   c000f850 <free>
c0021dc2:	83 c4 0c             	add    esp,0xc
c0021dc5:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021dcc:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021dd1:	50                   	push   eax
c0021dd2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021dd9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021de0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021de4:	52                   	push   edx
c0021de5:	57                   	push   edi
c0021de6:	53                   	push   ebx
c0021de7:	e8 6e fe ff ff       	call   c0021c5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021dec:	83 c4 20             	add    esp,0x20
c0021def:	eb 31                	jmp    c0021e22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021df1:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021df4:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021dfb:	d0 e8                	shr    al,1
c0021dfd:	89 3b                	mov    DWORD PTR [ebx],edi
c0021dff:	83 e0 01             	and    eax,0x1
c0021e02:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021e09:	83 ec 0c             	sub    esp,0xc
c0021e0c:	89 13                	mov    DWORD PTR [ebx],edx
c0021e0e:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021e15:	89 03                	mov    DWORD PTR [ebx],eax
c0021e17:	56                   	push   esi
c0021e18:	e8 33 da fe ff       	call   c000f850 <free>
c0021e1d:	83 c4 10             	add    esp,0x10
c0021e20:	b0 01                	mov    al,0x1
c0021e22:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021e28:	5b                   	pop    ebx
c0021e29:	5e                   	pop    esi
c0021e2a:	5f                   	pop    edi
c0021e2b:	5d                   	pop    ebp
c0021e2c:	c3                   	ret    

c0021e2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021e2d:	55                   	push   ebp
c0021e2e:	57                   	push   edi
c0021e2f:	56                   	push   esi
c0021e30:	53                   	push   ebx
c0021e31:	83 ec 20             	sub    esp,0x20
c0021e34:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021e38:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021e3c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021e40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e48:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021e50:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021e55:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021e5b:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021e61:	57                   	push   edi
c0021e62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e66:	50                   	push   eax
c0021e67:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e6b:	50                   	push   eax
c0021e6c:	e8 94 fd ff ff       	call   c0021c05 <readRoot(unsigned int*, unsigned int*, char)>
c0021e71:	5a                   	pop    edx
c0021e72:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021e76:	e8 19 e9 fd ff       	call   c0000794 <strlen>
c0021e7b:	83 c4 10             	add    esp,0x10
c0021e7e:	83 f8 03             	cmp    eax,0x3
c0021e81:	77 17                	ja     c0021e9a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e87:	89 03                	mov    DWORD PTR [ebx],eax
c0021e89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e8d:	89 06                	mov    DWORD PTR [esi],eax
c0021e8f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021e96:	b0 01                	mov    al,0x1
c0021e98:	eb 19                	jmp    c0021eb3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021e9a:	50                   	push   eax
c0021e9b:	55                   	push   ebp
c0021e9c:	57                   	push   edi
c0021e9d:	56                   	push   esi
c0021e9e:	53                   	push   ebx
c0021e9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021ea3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021ea7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021eab:	e8 aa fd ff ff       	call   c0021c5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021eb0:	83 c4 20             	add    esp,0x20
c0021eb3:	83 c4 1c             	add    esp,0x1c
c0021eb6:	5b                   	pop    ebx
c0021eb7:	5e                   	pop    esi
c0021eb8:	5f                   	pop    edi
c0021eb9:	5d                   	pop    ebp
c0021eba:	c3                   	ret    
c0021ebb:	90                   	nop

c0021ebc <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021ebc:	57                   	push   edi
c0021ebd:	56                   	push   esi
c0021ebe:	53                   	push   ebx
c0021ebf:	83 ec 10             	sub    esp,0x10
c0021ec2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021ec6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021eca:	85 ff                	test   edi,edi
c0021ecc:	0f 84 9d 00 00 00    	je     c0021f6f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021ed2:	85 f6                	test   esi,esi
c0021ed4:	0f 84 95 00 00 00    	je     c0021f6f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021eda:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021edf:	74 17                	je     c0021ef8 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021ee1:	83 ec 0c             	sub    esp,0xc
c0021ee4:	68 bf c7 02 c0       	push   0xc002c7bf
c0021ee9:	e8 98 0f ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0021eee:	83 c4 10             	add    esp,0x10
c0021ef1:	b8 03 00 00 00       	mov    eax,0x3
c0021ef6:	eb 7c                	jmp    c0021f74 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ef8:	83 ec 0c             	sub    esp,0xc
c0021efb:	6a 1c                	push   0x1c
c0021efd:	e8 3e d9 fe ff       	call   c000f840 <malloc>
c0021f02:	89 07                	mov    DWORD PTR [edi],eax
c0021f04:	89 c3                	mov    ebx,eax
c0021f06:	58                   	pop    eax
c0021f07:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f0b:	50                   	push   eax
c0021f0c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021f0f:	50                   	push   eax
c0021f10:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f14:	50                   	push   eax
c0021f15:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f19:	50                   	push   eax
c0021f1a:	56                   	push   esi
c0021f1b:	e8 0d ff ff ff       	call   c0021e2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f20:	83 c4 20             	add    esp,0x20
c0021f23:	84 c0                	test   al,al
c0021f25:	74 07                	je     c0021f2e <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021f27:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021f2c:	74 0b                	je     c0021f39 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021f2e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021f32:	b8 01 00 00 00       	mov    eax,0x1
c0021f37:	eb 3b                	jmp    c0021f74 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f3d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021f41:	89 03                	mov    DWORD PTR [ebx],eax
c0021f43:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f4e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021f55:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f5c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021f5f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021f66:	8a 06                	mov    al,BYTE PTR [esi]
c0021f68:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021f6b:	31 c0                	xor    eax,eax
c0021f6d:	eb 05                	jmp    c0021f74 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f6f:	b8 04 00 00 00       	mov    eax,0x4
c0021f74:	83 c4 10             	add    esp,0x10
c0021f77:	5b                   	pop    ebx
c0021f78:	5e                   	pop    esi
c0021f79:	5f                   	pop    edi
c0021f7a:	c3                   	ret    
c0021f7b:	90                   	nop

c0021f7c <ISO9660::exists(char const*)>:
c0021f7c:	83 ec 28             	sub    esp,0x28
c0021f7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f83:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021f87:	52                   	push   edx
c0021f88:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021f8b:	52                   	push   edx
c0021f8c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f90:	52                   	push   edx
c0021f91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f95:	52                   	push   edx
c0021f96:	50                   	push   eax
c0021f97:	e8 91 fe ff ff       	call   c0021e2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f9c:	83 c4 3c             	add    esp,0x3c
c0021f9f:	c3                   	ret    

c0021fa0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021fa0:	56                   	push   esi
c0021fa1:	53                   	push   ebx
c0021fa2:	83 ec 14             	sub    esp,0x14
c0021fa5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021fa9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021fad:	85 db                	test   ebx,ebx
c0021faf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021fb3:	0f 94 c2             	sete   dl
c0021fb6:	85 f6                	test   esi,esi
c0021fb8:	0f 94 c0             	sete   al
c0021fbb:	08 c2                	or     dl,al
c0021fbd:	75 68                	jne    c0022027 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021fbf:	85 c9                	test   ecx,ecx
c0021fc1:	74 64                	je     c0022027 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021fc3:	83 ec 0c             	sub    esp,0xc
c0021fc6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021fc9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fcd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021fd3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fda:	50                   	push   eax
c0021fdb:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021fde:	50                   	push   eax
c0021fdf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fe3:	50                   	push   eax
c0021fe4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fe8:	50                   	push   eax
c0021fe9:	51                   	push   ecx
c0021fea:	e8 3e fe ff ff       	call   c0021e2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fef:	83 c4 20             	add    esp,0x20
c0021ff2:	ba 01 00 00 00       	mov    edx,0x1
c0021ff7:	84 c0                	test   al,al
c0021ff9:	74 31                	je     c002202c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021ffb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fff:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022006:	89 03                	mov    DWORD PTR [ebx],eax
c0022008:	ba 00 00 00 00       	mov    edx,0x0
c002200d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022011:	85 c0                	test   eax,eax
c0022013:	0f 95 06             	setne  BYTE PTR [esi]
c0022016:	74 14                	je     c002202c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022018:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002201e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022025:	eb 05                	jmp    c002202c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022027:	ba 04 00 00 00       	mov    edx,0x4
c002202c:	83 c4 14             	add    esp,0x14
c002202f:	89 d0                	mov    eax,edx
c0022031:	5b                   	pop    ebx
c0022032:	5e                   	pop    esi
c0022033:	c3                   	ret    

c0022034 <ISO9660::openDir(char const*, void**)>:
c0022034:	57                   	push   edi
c0022035:	56                   	push   esi
c0022036:	53                   	push   ebx
c0022037:	83 ec 10             	sub    esp,0x10
c002203a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002203e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022042:	85 ff                	test   edi,edi
c0022044:	0f 84 95 00 00 00    	je     c00220df <ISO9660::openDir(char const*, void**)+0xab>
c002204a:	85 f6                	test   esi,esi
c002204c:	0f 84 8d 00 00 00    	je     c00220df <ISO9660::openDir(char const*, void**)+0xab>
c0022052:	83 ec 0c             	sub    esp,0xc
c0022055:	6a 1c                	push   0x1c
c0022057:	e8 e4 d7 fe ff       	call   c000f840 <malloc>
c002205c:	89 07                	mov    DWORD PTR [edi],eax
c002205e:	89 c3                	mov    ebx,eax
c0022060:	59                   	pop    ecx
c0022061:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022065:	50                   	push   eax
c0022066:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022069:	50                   	push   eax
c002206a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002206e:	50                   	push   eax
c002206f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022073:	50                   	push   eax
c0022074:	56                   	push   esi
c0022075:	e8 b3 fd ff ff       	call   c0021e2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002207a:	83 c4 20             	add    esp,0x20
c002207d:	84 c0                	test   al,al
c002207f:	74 07                	je     c0022088 <ISO9660::openDir(char const*, void**)+0x54>
c0022081:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022086:	75 21                	jne    c00220a9 <ISO9660::openDir(char const*, void**)+0x75>
c0022088:	0f b6 c0             	movzx  eax,al
c002208b:	52                   	push   edx
c002208c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022090:	50                   	push   eax
c0022091:	68 e5 c7 02 c0       	push   0xc002c7e5
c0022096:	e8 eb 0d ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c002209b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002209f:	83 c4 10             	add    esp,0x10
c00220a2:	b8 01 00 00 00       	mov    eax,0x1
c00220a7:	eb 3b                	jmp    c00220e4 <ISO9660::openDir(char const*, void**)+0xb0>
c00220a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220ad:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220b1:	89 03                	mov    DWORD PTR [ebx],eax
c00220b3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00220ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220be:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00220c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00220cf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00220d6:	8a 06                	mov    al,BYTE PTR [esi]
c00220d8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00220db:	31 c0                	xor    eax,eax
c00220dd:	eb 05                	jmp    c00220e4 <ISO9660::openDir(char const*, void**)+0xb0>
c00220df:	b8 04 00 00 00       	mov    eax,0x4
c00220e4:	83 c4 10             	add    esp,0x10
c00220e7:	5b                   	pop    ebx
c00220e8:	5e                   	pop    esi
c00220e9:	5f                   	pop    edi
c00220ea:	c3                   	ret    
c00220eb:	90                   	nop

c00220ec <ISO9660::ISO9660()>:
c00220ec:	83 ec 0c             	sub    esp,0xc
c00220ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f3:	83 ec 0c             	sub    esp,0xc
c00220f6:	50                   	push   eax
c00220f7:	e8 8e 10 ff ff       	call   c001318a <Filesystem::Filesystem()>
c00220fc:	83 c4 10             	add    esp,0x10
c00220ff:	ba 08 c8 02 c0       	mov    edx,0xc002c808
c0022104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022108:	89 10                	mov    DWORD PTR [eax],edx
c002210a:	90                   	nop
c002210b:	83 c4 0c             	add    esp,0xc
c002210e:	c3                   	ret    
c002210f:	90                   	nop

c0022110 <SoundChannel::~SoundChannel()>:
c0022110:	83 ec 0c             	sub    esp,0xc
c0022113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022117:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002211a:	83 ec 0c             	sub    esp,0xc
c002211d:	50                   	push   eax
c002211e:	e8 2d d7 fe ff       	call   c000f850 <free>
c0022123:	83 c4 10             	add    esp,0x10
c0022126:	90                   	nop
c0022127:	83 c4 0c             	add    esp,0xc
c002212a:	c3                   	ret    
c002212b:	90                   	nop

c002212c <SoundChannel::setSpeed(float)>:
c002212c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022130:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022134:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022137:	c3                   	ret    

c0022138 <SoundChannel::getSpeed()>:
c0022138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002213c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c002213f:	c3                   	ret    

c0022140 <SoundChannel::setVolume(int)>:
c0022140:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022144:	83 f8 64             	cmp    eax,0x64
c0022147:	7e 05                	jle    c002214e <SoundChannel::setVolume(int)+0xe>
c0022149:	b8 64 00 00 00       	mov    eax,0x64
c002214e:	85 c0                	test   eax,eax
c0022150:	79 02                	jns    c0022154 <SoundChannel::setVolume(int)+0x14>
c0022152:	31 c0                	xor    eax,eax
c0022154:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022158:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002215b:	c3                   	ret    

c002215c <SoundChannel::getVolume()>:
c002215c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022160:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022163:	c3                   	ret    

c0022164 <SoundChannel::pause()>:
c0022164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022168:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002216c:	c3                   	ret    
c002216d:	90                   	nop

c002216e <SoundChannel::SoundChannel(int, int, int, int)>:
c002216e:	83 ec 1c             	sub    esp,0x1c
c0022171:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022175:	e8 ea ff ff ff       	call   c0022164 <SoundChannel::pause()>
c002217a:	83 c4 04             	add    esp,0x4
c002217d:	6a 50                	push   0x50
c002217f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022183:	e8 b8 ff ff ff       	call   c0022140 <SoundChannel::setVolume(int)>
c0022188:	83 c4 08             	add    esp,0x8
c002218b:	a1 80 c8 02 c0       	mov    eax,ds:0xc002c880
c0022190:	50                   	push   eax
c0022191:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022195:	e8 92 ff ff ff       	call   c002212c <SoundChannel::setSpeed(float)>
c002219a:	83 c4 08             	add    esp,0x8
c002219d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00221a5:	89 10                	mov    DWORD PTR [eax],edx
c00221a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00221af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00221b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221b6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00221ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00221bd:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00221c2:	75 23                	jne    c00221e7 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00221c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00221ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221d1:	0f af c2             	imul   eax,edx
c00221d4:	85 c0                	test   eax,eax
c00221d6:	79 03                	jns    c00221db <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00221d8:	83 c0 03             	add    eax,0x3
c00221db:	c1 f8 02             	sar    eax,0x2
c00221de:	05 a0 0f 00 00       	add    eax,0xfa0
c00221e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00221e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00221ef:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00221f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221f6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00221fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022201:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002220c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002220f:	c1 e0 02             	shl    eax,0x2
c0022212:	83 ec 0c             	sub    esp,0xc
c0022215:	50                   	push   eax
c0022216:	e8 25 d6 fe ff       	call   c000f840 <malloc>
c002221b:	83 c4 10             	add    esp,0x10
c002221e:	89 c2                	mov    edx,eax
c0022220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022224:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022227:	83 ec 04             	sub    esp,0x4
c002222a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002222e:	50                   	push   eax
c002222f:	6a 01                	push   0x1
c0022231:	6a 04                	push   0x4
c0022233:	e8 67 69 fe ff       	call   c0008b9f <src_new>
c0022238:	83 c4 10             	add    esp,0x10
c002223b:	89 c2                	mov    edx,eax
c002223d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022241:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022248:	85 c0                	test   eax,eax
c002224a:	74 10                	je     c002225c <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c002224c:	83 ec 0c             	sub    esp,0xc
c002224f:	68 64 c8 02 c0       	push   0xc002c864
c0022254:	e8 d2 82 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0022259:	83 c4 10             	add    esp,0x10
c002225c:	a0 40 26 03 c0       	mov    al,ds:0xc0032640
c0022261:	83 f0 01             	xor    eax,0x1
c0022264:	84 c0                	test   al,al
c0022266:	74 57                	je     c00222bf <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022268:	a1 84 c8 02 c0       	mov    eax,ds:0xc002c884
c002226d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022271:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022279:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022281:	7f 35                	jg     c00222b8 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022283:	83 ec 0c             	sub    esp,0xc
c0022286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002228a:	e8 98 4f 00 00       	call   c0027227 <__floatsisf>
c002228f:	83 c4 10             	add    esp,0x10
c0022292:	8b 15 84 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c884
c0022298:	83 ec 08             	sub    esp,0x8
c002229b:	52                   	push   edx
c002229c:	50                   	push   eax
c002229d:	e8 97 4b 00 00       	call   c0026e39 <__mulsf3>
c00222a2:	83 c4 10             	add    esp,0x10
c00222a5:	89 c2                	mov    edx,eax
c00222a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222ab:	89 14 85 40 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcddc0],edx
c00222b2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00222b6:	eb c1                	jmp    c0022279 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00222b8:	c6 05 40 26 03 c0 01 	mov    BYTE PTR ds:0xc0032640,0x1
c00222bf:	90                   	nop
c00222c0:	83 c4 1c             	add    esp,0x1c
c00222c3:	c3                   	ret    

c00222c4 <SoundChannel::play()>:
c00222c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222c8:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00222cc:	c3                   	ret    
c00222cd:	90                   	nop

c00222ce <SoundChannel::paused()>:
c00222ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222d2:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00222d5:	c3                   	ret    

c00222d6 <SoundChannel::getSampleRate()>:
c00222d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222da:	8b 00                	mov    eax,DWORD PTR [eax]
c00222dc:	c3                   	ret    
c00222dd:	90                   	nop

c00222de <SoundChannel::getBits()>:
c00222de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222e5:	c3                   	ret    

c00222e6 <SoundChannel::getBufferUsed()>:
c00222e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ea:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00222ed:	c3                   	ret    

c00222ee <SoundChannel::getBufferSize()>:
c00222ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222f5:	c3                   	ret    

c00222f6 <SoundChannel::unbuffer(float*, int, int)>:
c00222f6:	56                   	push   esi
c00222f7:	53                   	push   ebx
c00222f8:	83 ec 40             	sub    esp,0x40
c00222fb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00222ff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022302:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022306:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022309:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002230d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022311:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022315:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022319:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002231d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022321:	e8 01 4f 00 00       	call   c0027227 <__floatsisf>
c0022326:	5a                   	pop    edx
c0022327:	89 c6                	mov    esi,eax
c0022329:	ff 33                	push   DWORD PTR [ebx]
c002232b:	e8 f7 4e 00 00       	call   c0027227 <__floatsisf>
c0022330:	59                   	pop    ecx
c0022331:	5a                   	pop    edx
c0022332:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022335:	50                   	push   eax
c0022336:	e8 fe 4a 00 00       	call   c0026e39 <__mulsf3>
c002233b:	59                   	pop    ecx
c002233c:	5a                   	pop    edx
c002233d:	50                   	push   eax
c002233e:	56                   	push   esi
c002233f:	e8 b8 4c 00 00       	call   c0026ffc <__divsf3>
c0022344:	89 04 24             	mov    DWORD PTR [esp],eax
c0022347:	e8 ab 61 00 00       	call   c00284f7 <__extendsfdf2>
c002234c:	59                   	pop    ecx
c002234d:	5e                   	pop    esi
c002234e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022352:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022356:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002235e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022362:	50                   	push   eax
c0022363:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022366:	e8 29 64 fe ff       	call   c0008794 <src_process>
c002236b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002236f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022372:	83 c4 0c             	add    esp,0xc
c0022375:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022378:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002237b:	29 d0                	sub    eax,edx
c002237d:	c1 e0 02             	shl    eax,0x2
c0022380:	50                   	push   eax
c0022381:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022384:	50                   	push   eax
c0022385:	51                   	push   ecx
c0022386:	e8 f1 e2 fd ff       	call   c000067c <memmove>
c002238b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002238f:	83 c4 44             	add    esp,0x44
c0022392:	5b                   	pop    ebx
c0022393:	5e                   	pop    esi
c0022394:	c3                   	ret    
c0022395:	90                   	nop

c0022396 <SoundChannel::buffer8(unsigned char*, int)>:
c0022396:	55                   	push   ebp
c0022397:	57                   	push   edi
c0022398:	56                   	push   esi
c0022399:	53                   	push   ebx
c002239a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002239e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00223a2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00223a5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00223a9:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00223ac:	74 7a                	je     c0022428 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00223ae:	85 ff                	test   edi,edi
c00223b0:	7e 76                	jle    c0022428 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00223b2:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00223b6:	8d 70 01             	lea    esi,[eax+0x1]
c00223b9:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00223bc:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00223bf:	8b 1c 9d 40 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcddc0]
c00223c6:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00223c9:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00223cc:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00223cf:	74 5e                	je     c002242f <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00223d1:	83 ff 01             	cmp    edi,0x1
c00223d4:	74 4b                	je     c0022421 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00223d6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00223da:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00223dd:	8d 70 01             	lea    esi,[eax+0x1]
c00223e0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00223e3:	8b 1c 9d 40 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcddc0]
c00223ea:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00223ed:	b8 02 00 00 00       	mov    eax,0x2
c00223f2:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00223f5:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00223f8:	75 23                	jne    c002241d <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00223fa:	eb 27                	jmp    c0022423 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00223fc:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022401:	8d 71 01             	lea    esi,[ecx+0x1]
c0022404:	40                   	inc    eax
c0022405:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022408:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002240b:	8b 1c 9d 40 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcddc0]
c0022412:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022415:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022418:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002241b:	74 06                	je     c0022423 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002241d:	39 c7                	cmp    edi,eax
c002241f:	75 db                	jne    c00223fc <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022421:	89 f8                	mov    eax,edi
c0022423:	5b                   	pop    ebx
c0022424:	5e                   	pop    esi
c0022425:	5f                   	pop    edi
c0022426:	5d                   	pop    ebp
c0022427:	c3                   	ret    
c0022428:	5b                   	pop    ebx
c0022429:	31 c0                	xor    eax,eax
c002242b:	5e                   	pop    esi
c002242c:	5f                   	pop    edi
c002242d:	5d                   	pop    ebp
c002242e:	c3                   	ret    
c002242f:	b8 01 00 00 00       	mov    eax,0x1
c0022434:	eb ed                	jmp    c0022423 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022436 <SoundDevice::SoundDevice(char const*)>:
c0022436:	83 ec 1c             	sub    esp,0x1c
c0022439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002243d:	83 ec 08             	sub    esp,0x8
c0022440:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022444:	50                   	push   eax
c0022445:	e8 52 20 ff ff       	call   c001449c <Device::Device(char const*)>
c002244a:	83 c4 10             	add    esp,0x10
c002244d:	ba 90 c8 02 c0       	mov    edx,0xc002c890
c0022452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022456:	89 10                	mov    DWORD PTR [eax],edx
c0022458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002245c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022466:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002246a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022474:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002247c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022481:	7f 19                	jg     c002249c <SoundDevice::SoundDevice(char const*)+0x66>
c0022483:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022487:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002248b:	83 c2 54             	add    edx,0x54
c002248e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022496:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002249a:	eb e0                	jmp    c002247c <SoundDevice::SoundDevice(char const*)+0x46>
c002249c:	90                   	nop
c002249d:	83 c4 1c             	add    esp,0x1c
c00224a0:	c3                   	ret    
c00224a1:	90                   	nop

c00224a2 <SoundDevice::~SoundDevice()>:
c00224a2:	53                   	push   ebx
c00224a3:	83 ec 18             	sub    esp,0x18
c00224a6:	ba 90 c8 02 c0       	mov    edx,0xc002c890
c00224ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224af:	89 10                	mov    DWORD PTR [eax],edx
c00224b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224b9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00224be:	7f 46                	jg     c0022506 <SoundDevice::~SoundDevice()+0x64>
c00224c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00224c8:	83 c2 54             	add    edx,0x54
c00224cb:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00224cf:	85 c0                	test   eax,eax
c00224d1:	74 2d                	je     c0022500 <SoundDevice::~SoundDevice()+0x5e>
c00224d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00224db:	83 c2 54             	add    edx,0x54
c00224de:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00224e2:	85 db                	test   ebx,ebx
c00224e4:	74 1a                	je     c0022500 <SoundDevice::~SoundDevice()+0x5e>
c00224e6:	83 ec 0c             	sub    esp,0xc
c00224e9:	53                   	push   ebx
c00224ea:	e8 21 fc ff ff       	call   c0022110 <SoundChannel::~SoundChannel()>
c00224ef:	83 c4 10             	add    esp,0x10
c00224f2:	83 ec 08             	sub    esp,0x8
c00224f5:	6a 2c                	push   0x2c
c00224f7:	53                   	push   ebx
c00224f8:	e8 a9 08 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c00224fd:	83 c4 10             	add    esp,0x10
c0022500:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022504:	eb b3                	jmp    c00224b9 <SoundDevice::~SoundDevice()+0x17>
c0022506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002250a:	83 ec 0c             	sub    esp,0xc
c002250d:	50                   	push   eax
c002250e:	e8 6b 1c ff ff       	call   c001417e <Device::~Device()>
c0022513:	83 c4 10             	add    esp,0x10
c0022516:	90                   	nop
c0022517:	83 c4 18             	add    esp,0x18
c002251a:	5b                   	pop    ebx
c002251b:	c3                   	ret    

c002251c <SoundDevice::~SoundDevice()>:
c002251c:	83 ec 0c             	sub    esp,0xc
c002251f:	83 ec 0c             	sub    esp,0xc
c0022522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022526:	e8 77 ff ff ff       	call   c00224a2 <SoundDevice::~SoundDevice()>
c002252b:	83 c4 10             	add    esp,0x10
c002252e:	83 ec 08             	sub    esp,0x8
c0022531:	68 e4 01 00 00       	push   0x1e4
c0022536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002253a:	e8 67 08 ff ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c002253f:	83 c4 10             	add    esp,0x10
c0022542:	83 c4 0c             	add    esp,0xc
c0022545:	c3                   	ret    

c0022546 <SoundDevice::getFreeChannelNum()>:
c0022546:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002254a:	31 c0                	xor    eax,eax
c002254c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022554:	74 09                	je     c002255f <SoundDevice::getFreeChannelNum()+0x19>
c0022556:	40                   	inc    eax
c0022557:	83 f8 20             	cmp    eax,0x20
c002255a:	75 f0                	jne    c002254c <SoundDevice::getFreeChannelNum()+0x6>
c002255c:	83 c8 ff             	or     eax,0xffffffff
c002255f:	c3                   	ret    

c0022560 <SoundDevice::addChannel(SoundChannel*)>:
c0022560:	56                   	push   esi
c0022561:	53                   	push   ebx
c0022562:	51                   	push   ecx
c0022563:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022567:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002256b:	53                   	push   ebx
c002256c:	e8 d5 ff ff ff       	call   c0022546 <SoundDevice::getFreeChannelNum()>
c0022571:	5a                   	pop    edx
c0022572:	83 f8 ff             	cmp    eax,0xffffffff
c0022575:	74 51                	je     c00225c8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022577:	85 f6                	test   esi,esi
c0022579:	74 4d                	je     c00225c8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002257b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022582:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022589:	75 30                	jne    c00225bb <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002258b:	83 ec 0c             	sub    esp,0xc
c002258e:	56                   	push   esi
c002258f:	e8 42 fd ff ff       	call   c00222d6 <SoundChannel::getSampleRate()>
c0022594:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002259a:	89 34 24             	mov    DWORD PTR [esp],esi
c002259d:	e8 3c fd ff ff       	call   c00222de <SoundChannel::getBits()>
c00225a2:	83 c4 0c             	add    esp,0xc
c00225a5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00225ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00225ad:	50                   	push   eax
c00225ae:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00225b4:	53                   	push   ebx
c00225b5:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00225b8:	83 c4 10             	add    esp,0x10
c00225bb:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00225c1:	b8 01 00 00 00       	mov    eax,0x1
c00225c6:	eb 03                	jmp    c00225cb <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00225c8:	83 c8 ff             	or     eax,0xffffffff
c00225cb:	5a                   	pop    edx
c00225cc:	5b                   	pop    ebx
c00225cd:	5e                   	pop    esi
c00225ce:	c3                   	ret    
c00225cf:	90                   	nop

c00225d0 <SoundDevice::removeChannel(int)>:
c00225d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225d8:	83 fa 1f             	cmp    edx,0x1f
c00225db:	77 23                	ja     c0022600 <SoundDevice::removeChannel(int)+0x30>
c00225dd:	8d 14 90             	lea    edx,[eax+edx*4]
c00225e0:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00225e7:	74 17                	je     c0022600 <SoundDevice::removeChannel(int)+0x30>
c00225e9:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00225f3:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00225f9:	75 05                	jne    c0022600 <SoundDevice::removeChannel(int)+0x30>
c00225fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00225fd:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022600:	c3                   	ret    
c0022601:	90                   	nop

c0022602 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022602:	57                   	push   edi
c0022603:	56                   	push   esi
c0022604:	53                   	push   ebx
c0022605:	31 db                	xor    ebx,ebx
c0022607:	83 ec 10             	sub    esp,0x10
c002260a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002260e:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022612:	0f 8d cb 00 00 00    	jge    c00226e3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022618:	83 ec 0c             	sub    esp,0xc
c002261b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002261f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022622:	e8 d0 5e 00 00       	call   c00284f7 <__extendsfdf2>
c0022627:	83 c4 10             	add    esp,0x10
c002262a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002262e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022632:	68 00 00 f0 3f       	push   0x3ff00000
c0022637:	6a 00                	push   0x0
c0022639:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002263d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022641:	e8 3d 4e 00 00       	call   c0027483 <__adddf3>
c0022646:	83 c4 10             	add    esp,0x10
c0022649:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002264d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022651:	68 00 00 e0 3f       	push   0x3fe00000
c0022656:	6a 00                	push   0x0
c0022658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002265c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022660:	e8 9b 54 00 00       	call   c0027b00 <__muldf3>
c0022665:	83 c4 10             	add    esp,0x10
c0022668:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002266c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022670:	68 00 00 60 40       	push   0x40600000
c0022675:	6a 00                	push   0x0
c0022677:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002267b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002267f:	e8 7c 54 00 00       	call   c0027b00 <__muldf3>
c0022684:	59                   	pop    ecx
c0022685:	5f                   	pop    edi
c0022686:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002268a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002268e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022692:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022696:	e8 38 5d 00 00       	call   c00283d3 <__truncdfsf2>
c002269b:	5a                   	pop    edx
c002269c:	89 c7                	mov    edi,eax
c002269e:	59                   	pop    ecx
c002269f:	68 00 00 fe 42       	push   0x42fe0000
c00226a4:	50                   	push   eax
c00226a5:	e8 d3 4d 00 00       	call   c002747d <__gesf2>
c00226aa:	83 c4 10             	add    esp,0x10
c00226ad:	85 c0                	test   eax,eax
c00226af:	78 06                	js     c00226b7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00226b1:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00226b5:	eb 26                	jmp    c00226dd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00226b7:	50                   	push   eax
c00226b8:	50                   	push   eax
c00226b9:	6a 00                	push   0x0
c00226bb:	57                   	push   edi
c00226bc:	e8 c0 4d 00 00       	call   c0027481 <__lesf2>
c00226c1:	83 c4 10             	add    esp,0x10
c00226c4:	85 c0                	test   eax,eax
c00226c6:	7f 06                	jg     c00226ce <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00226c8:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00226cc:	eb 0f                	jmp    c00226dd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00226ce:	83 ec 0c             	sub    esp,0xc
c00226d1:	57                   	push   edi
c00226d2:	e8 b5 5e 00 00       	call   c002858c <lrintf>
c00226d7:	83 c4 10             	add    esp,0x10
c00226da:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00226dd:	43                   	inc    ebx
c00226de:	e9 2b ff ff ff       	jmp    c002260e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00226e3:	83 c4 10             	add    esp,0x10
c00226e6:	5b                   	pop    ebx
c00226e7:	5e                   	pop    esi
c00226e8:	5f                   	pop    edi
c00226e9:	c3                   	ret    

c00226ea <SoundDevice::getAudio(int, float*, float*)>:
c00226ea:	55                   	push   ebp
c00226eb:	57                   	push   edi
c00226ec:	56                   	push   esi
c00226ed:	53                   	push   ebx
c00226ee:	31 db                	xor    ebx,ebx
c00226f0:	83 ec 20             	sub    esp,0x20
c00226f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00226f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00226fb:	c1 e0 02             	shl    eax,0x2
c00226fe:	50                   	push   eax
c00226ff:	6a 00                	push   0x0
c0022701:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022705:	e8 6e e0 fd ff       	call   c0000778 <memset>
c002270a:	83 c4 10             	add    esp,0x10
c002270d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022711:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022718:	85 c0                	test   eax,eax
c002271a:	0f 84 d7 00 00 00    	je     c00227f7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022720:	83 ec 0c             	sub    esp,0xc
c0022723:	50                   	push   eax
c0022724:	e8 a5 fb ff ff       	call   c00222ce <SoundChannel::paused()>
c0022729:	83 c4 10             	add    esp,0x10
c002272c:	84 c0                	test   al,al
c002272e:	0f 85 c3 00 00 00    	jne    c00227f7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022734:	83 ec 0c             	sub    esp,0xc
c0022737:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002273e:	e8 19 fa ff ff       	call   c002215c <SoundChannel::getVolume()>
c0022743:	83 c4 10             	add    esp,0x10
c0022746:	85 c0                	test   eax,eax
c0022748:	0f 84 a9 00 00 00    	je     c00227f7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002274e:	83 ec 0c             	sub    esp,0xc
c0022751:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022758:	e8 ff f9 ff ff       	call   c002215c <SoundChannel::getVolume()>
c002275d:	83 ec 0c             	sub    esp,0xc
c0022760:	50                   	push   eax
c0022761:	e8 c1 4a 00 00       	call   c0027227 <__floatsisf>
c0022766:	59                   	pop    ecx
c0022767:	5d                   	pop    ebp
c0022768:	31 ed                	xor    ebp,ebp
c002276a:	68 00 00 c8 42       	push   0x42c80000
c002276f:	50                   	push   eax
c0022770:	e8 87 48 00 00       	call   c0026ffc <__divsf3>
c0022775:	83 c4 10             	add    esp,0x10
c0022778:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002277c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022780:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022786:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002278a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022791:	e8 60 fb ff ff       	call   c00222f6 <SoundChannel::unbuffer(float*, int, int)>
c0022796:	83 c4 20             	add    esp,0x20
c0022799:	89 c1                	mov    ecx,eax
c002279b:	39 cd                	cmp    ebp,ecx
c002279d:	7d 52                	jge    c00227f1 <SoundDevice::getAudio(int, float*, float*)+0x107>
c002279f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00227a3:	50                   	push   eax
c00227a4:	50                   	push   eax
c00227a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00227a9:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00227ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00227b0:	e8 84 46 00 00       	call   c0026e39 <__mulsf3>
c00227b5:	5a                   	pop    edx
c00227b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00227ba:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00227c0:	e8 62 4a 00 00       	call   c0027227 <__floatsisf>
c00227c5:	59                   	pop    ecx
c00227c6:	5a                   	pop    edx
c00227c7:	50                   	push   eax
c00227c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227cc:	e8 2b 48 00 00       	call   c0026ffc <__divsf3>
c00227d1:	59                   	pop    ecx
c00227d2:	5a                   	pop    edx
c00227d3:	50                   	push   eax
c00227d4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00227d8:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00227db:	e8 36 43 00 00       	call   c0026b16 <__addsf3>
c00227e0:	83 c4 10             	add    esp,0x10
c00227e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00227e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00227eb:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00227ee:	45                   	inc    ebp
c00227ef:	eb aa                	jmp    c002279b <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00227f1:	39 cf                	cmp    edi,ecx
c00227f3:	7e 02                	jle    c00227f7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227f5:	89 cf                	mov    edi,ecx
c00227f7:	43                   	inc    ebx
c00227f8:	83 fb 20             	cmp    ebx,0x20
c00227fb:	0f 85 10 ff ff ff    	jne    c0022711 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022801:	83 c4 1c             	add    esp,0x1c
c0022804:	89 f8                	mov    eax,edi
c0022806:	5b                   	pop    ebx
c0022807:	5e                   	pop    esi
c0022808:	5f                   	pop    edi
c0022809:	5d                   	pop    ebp
c002280a:	c3                   	ret    
c002280b:	90                   	nop

c002280c <PCI::open(int, int, void*)>:
c002280c:	83 ec 18             	sub    esp,0x18
c002280f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022813:	8b 10                	mov    edx,DWORD PTR [eax]
c0022815:	50                   	push   eax
c0022816:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022819:	31 c0                	xor    eax,eax
c002281b:	83 c4 1c             	add    esp,0x1c
c002281e:	c3                   	ret    
c002281f:	90                   	nop

c0022820 <PCI::close(int, int, void*)>:
c0022820:	31 c0                	xor    eax,eax
c0022822:	c3                   	ret    
c0022823:	90                   	nop

c0022824 <PCI::PCI()>:
c0022824:	83 ec 0c             	sub    esp,0xc
c0022827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002282b:	83 ec 08             	sub    esp,0x8
c002282e:	68 c0 c8 02 c0       	push   0xc002c8c0
c0022833:	50                   	push   eax
c0022834:	e8 e7 12 ff ff       	call   c0013b20 <Bus::Bus(char const*)>
c0022839:	83 c4 10             	add    esp,0x10
c002283c:	ba 2c c9 02 c0       	mov    edx,0xc002c92c
c0022841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022845:	89 10                	mov    DWORD PTR [eax],edx
c0022847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002284b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022851:	0f b6 d0             	movzx  edx,al
c0022854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022858:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002285f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022863:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022869:	0f b6 d0             	movzx  edx,al
c002286c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022870:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022879:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002287f:	8d 50 01             	lea    edx,[eax+0x1]
c0022882:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022886:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002288c:	0f b6 d0             	movzx  edx,al
c002288f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022893:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022897:	83 c9 c0             	or     ecx,0xffffffc0
c002289a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002289e:	90                   	nop
c002289f:	83 c4 0c             	add    esp,0xc
c00228a2:	c3                   	ret    
c00228a3:	90                   	nop

c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00228a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00228a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00228ad:	89 ca                	mov    edx,ecx
c00228af:	c1 e0 10             	shl    eax,0x10
c00228b2:	81 e2 fc 00 00 00    	and    edx,0xfc
c00228b8:	09 d0                	or     eax,edx
c00228ba:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00228bf:	c1 e2 08             	shl    edx,0x8
c00228c2:	09 d0                	or     eax,edx
c00228c4:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00228c9:	c1 e2 0b             	shl    edx,0xb
c00228cc:	09 d0                	or     eax,edx
c00228ce:	ba f8 0c 00 00       	mov    edx,0xcf8
c00228d3:	0d 00 00 00 80       	or     eax,0x80000000
c00228d8:	ef                   	out    dx,eax
c00228d9:	ba fc 0c 00 00       	mov    edx,0xcfc
c00228de:	ed                   	in     eax,dx
c00228df:	83 e1 02             	and    ecx,0x2
c00228e2:	0f b6 c9             	movzx  ecx,cl
c00228e5:	c1 e1 03             	shl    ecx,0x3
c00228e8:	d3 e8                	shr    eax,cl
c00228ea:	c3                   	ret    
c00228eb:	90                   	nop

c00228ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00228ec:	6a 00                	push   0x0
c00228ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228f3:	50                   	push   eax
c00228f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228f9:	50                   	push   eax
c00228fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228ff:	50                   	push   eax
c0022900:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022904:	e8 9b ff ff ff       	call   c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022909:	83 c4 14             	add    esp,0x14
c002290c:	c3                   	ret    
c002290d:	90                   	nop

c002290e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002290e:	6a 0e                	push   0xe
c0022910:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022915:	50                   	push   eax
c0022916:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002291b:	50                   	push   eax
c002291c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022921:	50                   	push   eax
c0022922:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022926:	e8 79 ff ff ff       	call   c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002292b:	83 c4 14             	add    esp,0x14
c002292e:	0f b6 c0             	movzx  eax,al
c0022931:	c3                   	ret    

c0022932 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022932:	55                   	push   ebp
c0022933:	57                   	push   edi
c0022934:	56                   	push   esi
c0022935:	53                   	push   ebx
c0022936:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002293b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022940:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022945:	6a 0a                	push   0xa
c0022947:	56                   	push   esi
c0022948:	55                   	push   ebp
c0022949:	57                   	push   edi
c002294a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002294e:	e8 51 ff ff ff       	call   c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022953:	6a 0a                	push   0xa
c0022955:	89 c3                	mov    ebx,eax
c0022957:	56                   	push   esi
c0022958:	0f b6 db             	movzx  ebx,bl
c002295b:	55                   	push   ebp
c002295c:	57                   	push   edi
c002295d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022961:	e8 3e ff ff ff       	call   c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022966:	83 c4 28             	add    esp,0x28
c0022969:	25 00 ff 00 00       	and    eax,0xff00
c002296e:	09 d8                	or     eax,ebx
c0022970:	5b                   	pop    ebx
c0022971:	5e                   	pop    esi
c0022972:	5f                   	pop    edi
c0022973:	5d                   	pop    ebp
c0022974:	c3                   	ret    
c0022975:	90                   	nop

c0022976 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022976:	6a 08                	push   0x8
c0022978:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002297d:	50                   	push   eax
c002297e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022983:	50                   	push   eax
c0022984:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022989:	50                   	push   eax
c002298a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002298e:	e8 11 ff ff ff       	call   c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022993:	83 c4 14             	add    esp,0x14
c0022996:	0f b6 c4             	movzx  eax,ah
c0022999:	c3                   	ret    

c002299a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002299a:	6a 08                	push   0x8
c002299c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229a1:	50                   	push   eax
c00229a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229a7:	50                   	push   eax
c00229a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ad:	50                   	push   eax
c00229ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229b2:	e8 ed fe ff ff       	call   c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229b7:	83 c4 14             	add    esp,0x14
c00229ba:	c3                   	ret    
c00229bb:	90                   	nop

c00229bc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00229bc:	6a 3c                	push   0x3c
c00229be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229c3:	50                   	push   eax
c00229c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229c9:	50                   	push   eax
c00229ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229cf:	50                   	push   eax
c00229d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229d4:	e8 cb fe ff ff       	call   c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229d9:	83 c4 14             	add    esp,0x14
c00229dc:	c3                   	ret    
c00229dd:	90                   	nop

c00229de <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00229de:	6a 18                	push   0x18
c00229e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229e5:	50                   	push   eax
c00229e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229eb:	50                   	push   eax
c00229ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f1:	50                   	push   eax
c00229f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229f6:	e8 a9 fe ff ff       	call   c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229fb:	83 c4 14             	add    esp,0x14
c00229fe:	0f b6 c4             	movzx  eax,ah
c0022a01:	c3                   	ret    

c0022a02 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a02:	55                   	push   ebp
c0022a03:	57                   	push   edi
c0022a04:	56                   	push   esi
c0022a05:	53                   	push   ebx
c0022a06:	50                   	push   eax
c0022a07:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022a0b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022a10:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022a15:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022a1a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022a21:	8d 43 12             	lea    eax,[ebx+0x12]
c0022a24:	83 c3 10             	add    ebx,0x10
c0022a27:	0f b6 c0             	movzx  eax,al
c0022a2a:	0f b6 db             	movzx  ebx,bl
c0022a2d:	50                   	push   eax
c0022a2e:	51                   	push   ecx
c0022a2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022a33:	57                   	push   edi
c0022a34:	55                   	push   ebp
c0022a35:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022a39:	e8 66 fe ff ff       	call   c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a3e:	53                   	push   ebx
c0022a3f:	89 c6                	mov    esi,eax
c0022a41:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022a45:	c1 e6 10             	shl    esi,0x10
c0022a48:	51                   	push   ecx
c0022a49:	57                   	push   edi
c0022a4a:	55                   	push   ebp
c0022a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022a4f:	e8 50 fe ff ff       	call   c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a54:	83 c4 2c             	add    esp,0x2c
c0022a57:	0f b7 c0             	movzx  eax,ax
c0022a5a:	5b                   	pop    ebx
c0022a5b:	09 f0                	or     eax,esi
c0022a5d:	5e                   	pop    esi
c0022a5e:	5f                   	pop    edi
c0022a5f:	5d                   	pop    ebp
c0022a60:	c3                   	ret    
c0022a61:	90                   	nop

c0022a62 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022a62:	53                   	push   ebx
c0022a63:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a68:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022a6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022a71:	c1 e1 10             	shl    ecx,0x10
c0022a74:	25 fc 00 00 00       	and    eax,0xfc
c0022a79:	09 c1                	or     ecx,eax
c0022a7b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a80:	c1 e0 08             	shl    eax,0x8
c0022a83:	09 c1                	or     ecx,eax
c0022a85:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022a8a:	c1 e0 0b             	shl    eax,0xb
c0022a8d:	09 c1                	or     ecx,eax
c0022a8f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022a95:	89 c8                	mov    eax,ecx
c0022a97:	ef                   	out    dx,eax
c0022a98:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a9d:	ed                   	in     eax,dx
c0022a9e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022aa3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022aa8:	74 0a                	je     c0022ab4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022aaa:	0f b7 d8             	movzx  ebx,ax
c0022aad:	89 d0                	mov    eax,edx
c0022aaf:	c1 e0 10             	shl    eax,0x10
c0022ab2:	eb 05                	jmp    c0022ab9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022ab4:	66 31 c0             	xor    ax,ax
c0022ab7:	89 d3                	mov    ebx,edx
c0022ab9:	09 c3                	or     ebx,eax
c0022abb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ac0:	89 c8                	mov    eax,ecx
c0022ac2:	ef                   	out    dx,eax
c0022ac3:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ac8:	89 d8                	mov    eax,ebx
c0022aca:	ef                   	out    dx,eax
c0022acb:	5b                   	pop    ebx
c0022acc:	c3                   	ret    
c0022acd:	90                   	nop

c0022ace <PCI::checkBus(unsigned char)>:
c0022ace:	56                   	push   esi
c0022acf:	53                   	push   ebx
c0022ad0:	31 db                	xor    ebx,ebx
c0022ad2:	51                   	push   ecx
c0022ad3:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022ad8:	52                   	push   edx
c0022ad9:	53                   	push   ebx
c0022ada:	43                   	inc    ebx
c0022adb:	56                   	push   esi
c0022adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ae0:	e8 2b 03 00 00       	call   c0022e10 <PCI::checkDevice(unsigned char, unsigned char)>
c0022ae5:	83 c4 10             	add    esp,0x10
c0022ae8:	83 fb 20             	cmp    ebx,0x20
c0022aeb:	75 eb                	jne    c0022ad8 <PCI::checkBus(unsigned char)+0xa>
c0022aed:	58                   	pop    eax
c0022aee:	5b                   	pop    ebx
c0022aef:	5e                   	pop    esi
c0022af0:	c3                   	ret    
c0022af1:	90                   	nop

c0022af2 <PCI::foundDevice(PCIDeviceInfo)>:
c0022af2:	55                   	push   ebp
c0022af3:	57                   	push   edi
c0022af4:	56                   	push   esi
c0022af5:	53                   	push   ebx
c0022af6:	83 ec 1c             	sub    esp,0x1c
c0022af9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022afd:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b03:	0f 84 52 01 00 00    	je     c0022c5b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b09:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022b0d:	66 81 f9 06 04       	cmp    cx,0x406
c0022b12:	75 2c                	jne    c0022b40 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b14:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b19:	50                   	push   eax
c0022b1a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b1f:	50                   	push   eax
c0022b20:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b25:	50                   	push   eax
c0022b26:	56                   	push   esi
c0022b27:	e8 b2 fe ff ff       	call   c00229de <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022b2c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b30:	0f b6 c0             	movzx  eax,al
c0022b33:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022b37:	83 c4 2c             	add    esp,0x2c
c0022b3a:	5b                   	pop    ebx
c0022b3b:	5e                   	pop    esi
c0022b3c:	5f                   	pop    edi
c0022b3d:	5d                   	pop    ebp
c0022b3e:	eb 8e                	jmp    c0022ace <PCI::checkBus(unsigned char)>
c0022b40:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b44:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b4e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b52:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b56:	88 d3                	mov    bl,dl
c0022b58:	85 c0                	test   eax,eax
c0022b5a:	74 33                	je     c0022b8f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b5c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022b5f:	85 d2                	test   edx,edx
c0022b61:	74 28                	je     c0022b8b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b63:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b69:	31 ef                	xor    edi,ebp
c0022b6b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b71:	75 18                	jne    c0022b8b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b73:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b77:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b7d:	75 0c                	jne    c0022b8b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b7f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b85:	0f 84 d0 00 00 00    	je     c0022c5b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b8d:	eb c9                	jmp    c0022b58 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b8f:	66 81 f9 01 06       	cmp    cx,0x601
c0022b94:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b98:	75 19                	jne    c0022bb3 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b9a:	83 ec 0c             	sub    esp,0xc
c0022b9d:	68 64 01 00 00       	push   0x164
c0022ba2:	e8 99 cc fe ff       	call   c000f840 <malloc>
c0022ba7:	89 c5                	mov    ebp,eax
c0022ba9:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bac:	e8 95 0f 00 00       	call   c0023b46 <SATABus::SATABus()>
c0022bb1:	eb 1e                	jmp    c0022bd1 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022bb3:	66 81 f9 01 01       	cmp    cx,0x101
c0022bb8:	75 60                	jne    c0022c1a <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022bba:	83 ec 0c             	sub    esp,0xc
c0022bbd:	68 70 02 00 00       	push   0x270
c0022bc2:	e8 79 cc fe ff       	call   c000f840 <malloc>
c0022bc7:	89 c5                	mov    ebp,eax
c0022bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bcc:	e8 03 03 00 00       	call   c0022ed4 <IDE::IDE()>
c0022bd1:	58                   	pop    eax
c0022bd2:	5a                   	pop    edx
c0022bd3:	55                   	push   ebp
c0022bd4:	56                   	push   esi
c0022bd5:	e8 d2 16 ff ff       	call   c00142ac <Device::addChild(Device*)>
c0022bda:	83 ec 1c             	sub    esp,0x1c
c0022bdd:	b9 09 00 00 00       	mov    ecx,0x9
c0022be2:	fc                   	cld    
c0022be3:	89 e7                	mov    edi,esp
c0022be5:	89 de                	mov    esi,ebx
c0022be7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022be9:	55                   	push   ebp
c0022bea:	e8 c7 15 ff ff       	call   c00141b6 <Device::preOpenPCI(PCIDeviceInfo)>
c0022bef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022bf2:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022bf6:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022bfe:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c06:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022c0e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c11:	83 c4 4c             	add    esp,0x4c
c0022c14:	5b                   	pop    ebx
c0022c15:	5e                   	pop    esi
c0022c16:	5f                   	pop    edi
c0022c17:	5d                   	pop    ebp
c0022c18:	ff e0                	jmp    eax
c0022c1a:	83 ec 0c             	sub    esp,0xc
c0022c1d:	68 58 01 00 00       	push   0x158
c0022c22:	e8 19 cc fe ff       	call   c000f840 <malloc>
c0022c27:	89 c5                	mov    ebp,eax
c0022c29:	58                   	pop    eax
c0022c2a:	5a                   	pop    edx
c0022c2b:	68 c8 c8 02 c0       	push   0xc002c8c8
c0022c30:	55                   	push   ebp
c0022c31:	e8 6c 19 ff ff       	call   c00145a2 <DriverlessDevice::DriverlessDevice(char const*)>
c0022c36:	59                   	pop    ecx
c0022c37:	5f                   	pop    edi
c0022c38:	55                   	push   ebp
c0022c39:	56                   	push   esi
c0022c3a:	e8 6d 16 ff ff       	call   c00142ac <Device::addChild(Device*)>
c0022c3f:	b9 09 00 00 00       	mov    ecx,0x9
c0022c44:	fc                   	cld    
c0022c45:	89 df                	mov    edi,ebx
c0022c47:	89 de                	mov    esi,ebx
c0022c49:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c4b:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c4f:	83 c4 2c             	add    esp,0x2c
c0022c52:	5b                   	pop    ebx
c0022c53:	5e                   	pop    esi
c0022c54:	5f                   	pop    edi
c0022c55:	5d                   	pop    ebp
c0022c56:	e9 5b 15 ff ff       	jmp    c00141b6 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c5b:	83 c4 1c             	add    esp,0x1c
c0022c5e:	5b                   	pop    ebx
c0022c5f:	5e                   	pop    esi
c0022c60:	5f                   	pop    edi
c0022c61:	5d                   	pop    ebp
c0022c62:	c3                   	ret    
c0022c63:	90                   	nop

c0022c64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c64:	55                   	push   ebp
c0022c65:	57                   	push   edi
c0022c66:	56                   	push   esi
c0022c67:	53                   	push   ebx
c0022c68:	83 ec 5c             	sub    esp,0x5c
c0022c6b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022c6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022c73:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022c77:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022c7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022c80:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022c84:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022c89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c8d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022c92:	6a 0c                	push   0xc
c0022c94:	55                   	push   ebp
c0022c95:	53                   	push   ebx
c0022c96:	57                   	push   edi
c0022c97:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022c9e:	e8 01 fc ff ff       	call   c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ca3:	55                   	push   ebp
c0022ca4:	53                   	push   ebx
c0022ca5:	57                   	push   edi
c0022ca6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022cad:	e8 80 fc ff ff       	call   c0022932 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022cb2:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022cb7:	83 c4 24             	add    esp,0x24
c0022cba:	55                   	push   ebp
c0022cbb:	53                   	push   ebx
c0022cbc:	57                   	push   edi
c0022cbd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022cc1:	e8 f6 fc ff ff       	call   c00229bc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022cc6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022cca:	6a 3c                	push   0x3c
c0022ccc:	55                   	push   ebp
c0022ccd:	53                   	push   ebx
c0022cce:	57                   	push   edi
c0022ccf:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022cd6:	e8 c9 fb ff ff       	call   c00228a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cdb:	0f b6 c4             	movzx  eax,ah
c0022cde:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022ce2:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022ce6:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022cea:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0022cef:	83 c4 24             	add    esp,0x24
c0022cf2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022cf8:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022cff:	74 6c                	je     c0022d6d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d01:	31 f6                	xor    esi,esi
c0022d03:	8b 15 e8 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e8
c0022d09:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d0f:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022d15:	7e 56                	jle    c0022d6d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d17:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022d1a:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d21:	39 cb                	cmp    ebx,ecx
c0022d23:	75 45                	jne    c0022d6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022d25:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022d2c:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022d30:	75 38                	jne    c0022d6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022d32:	83 ec 0c             	sub    esp,0xc
c0022d35:	68 e2 c8 02 c0       	push   0xc002c8e2
c0022d3a:	e8 47 01 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0022d3f:	8b 15 e8 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e8
c0022d45:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d4b:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022d53:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022d57:	52                   	push   edx
c0022d58:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022d5c:	53                   	push   ebx
c0022d5d:	68 07 c9 02 c0       	push   0xc002c907
c0022d62:	e8 1f 01 ff ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0022d67:	83 c4 20             	add    esp,0x20
c0022d6a:	46                   	inc    esi
c0022d6b:	eb 96                	jmp    c0022d03 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022d6d:	31 d2                	xor    edx,edx
c0022d6f:	83 ec 0c             	sub    esp,0xc
c0022d72:	55                   	push   ebp
c0022d73:	53                   	push   ebx
c0022d74:	57                   	push   edi
c0022d75:	52                   	push   edx
c0022d76:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022d7a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022d81:	e8 7c fc ff ff       	call   c0022a02 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d86:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022d8a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022d8e:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d92:	42                   	inc    edx
c0022d93:	83 c4 20             	add    esp,0x20
c0022d96:	83 fa 06             	cmp    edx,0x6
c0022d99:	75 d4                	jne    c0022d6f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022d9b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022d9f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022da3:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022da7:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022dab:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022daf:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022db3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022db8:	86 e0                	xchg   al,ah
c0022dba:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022dbf:	55                   	push   ebp
c0022dc0:	53                   	push   ebx
c0022dc1:	57                   	push   edi
c0022dc2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022dc6:	e8 ab fb ff ff       	call   c0022976 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022dcb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022dcf:	55                   	push   ebp
c0022dd0:	53                   	push   ebx
c0022dd1:	57                   	push   edi
c0022dd2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022dd9:	e8 0e fb ff ff       	call   c00228ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dde:	83 ec 0c             	sub    esp,0xc
c0022de1:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022de6:	b9 09 00 00 00       	mov    ecx,0x9
c0022deb:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022def:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022df3:	fc                   	cld    
c0022df4:	89 e7                	mov    edi,esp
c0022df6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022df8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022dff:	e8 ee fc ff ff       	call   c0022af2 <PCI::foundDevice(PCIDeviceInfo)>
c0022e04:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e0a:	5b                   	pop    ebx
c0022e0b:	5e                   	pop    esi
c0022e0c:	5f                   	pop    edi
c0022e0d:	5d                   	pop    ebp
c0022e0e:	c3                   	ret    
c0022e0f:	90                   	nop

c0022e10 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e10:	55                   	push   ebp
c0022e11:	57                   	push   edi
c0022e12:	56                   	push   esi
c0022e13:	53                   	push   ebx
c0022e14:	83 ec 0c             	sub    esp,0xc
c0022e17:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e1b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e20:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e25:	6a 00                	push   0x0
c0022e27:	56                   	push   esi
c0022e28:	57                   	push   edi
c0022e29:	55                   	push   ebp
c0022e2a:	e8 bd fa ff ff       	call   c00228ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e2f:	6a 00                	push   0x0
c0022e31:	56                   	push   esi
c0022e32:	57                   	push   edi
c0022e33:	55                   	push   ebp
c0022e34:	e8 2b fe ff ff       	call   c0022c64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e39:	83 c4 20             	add    esp,0x20
c0022e3c:	6a 00                	push   0x0
c0022e3e:	56                   	push   esi
c0022e3f:	57                   	push   edi
c0022e40:	55                   	push   ebp
c0022e41:	e8 c8 fa ff ff       	call   c002290e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e46:	83 c4 10             	add    esp,0x10
c0022e49:	84 c0                	test   al,al
c0022e4b:	79 27                	jns    c0022e74 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e4d:	bb 01 00 00 00       	mov    ebx,0x1
c0022e52:	53                   	push   ebx
c0022e53:	56                   	push   esi
c0022e54:	57                   	push   edi
c0022e55:	55                   	push   ebp
c0022e56:	e8 91 fa ff ff       	call   c00228ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e5b:	83 c4 10             	add    esp,0x10
c0022e5e:	66 40                	inc    ax
c0022e60:	74 0c                	je     c0022e6e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022e62:	53                   	push   ebx
c0022e63:	56                   	push   esi
c0022e64:	57                   	push   edi
c0022e65:	55                   	push   ebp
c0022e66:	e8 f9 fd ff ff       	call   c0022c64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e6b:	83 c4 10             	add    esp,0x10
c0022e6e:	43                   	inc    ebx
c0022e6f:	83 fb 08             	cmp    ebx,0x8
c0022e72:	75 de                	jne    c0022e52 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e74:	83 c4 0c             	add    esp,0xc
c0022e77:	5b                   	pop    ebx
c0022e78:	5e                   	pop    esi
c0022e79:	5f                   	pop    edi
c0022e7a:	5d                   	pop    ebp
c0022e7b:	c3                   	ret    

c0022e7c <PCI::detect()>:
c0022e7c:	56                   	push   esi
c0022e7d:	53                   	push   ebx
c0022e7e:	53                   	push   ebx
c0022e7f:	31 db                	xor    ebx,ebx
c0022e81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e85:	6a 00                	push   0x0
c0022e87:	6a 00                	push   0x0
c0022e89:	6a 00                	push   0x0
c0022e8b:	56                   	push   esi
c0022e8c:	e8 7d fa ff ff       	call   c002290e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e91:	83 c4 10             	add    esp,0x10
c0022e94:	a8 80                	test   al,0x80
c0022e96:	75 21                	jne    c0022eb9 <PCI::detect()+0x3d>
c0022e98:	51                   	push   ecx
c0022e99:	51                   	push   ecx
c0022e9a:	6a 00                	push   0x0
c0022e9c:	56                   	push   esi
c0022e9d:	e8 2c fc ff ff       	call   c0022ace <PCI::checkBus(unsigned char)>
c0022ea2:	83 c4 10             	add    esp,0x10
c0022ea5:	eb 24                	jmp    c0022ecb <PCI::detect()+0x4f>
c0022ea7:	52                   	push   edx
c0022ea8:	52                   	push   edx
c0022ea9:	53                   	push   ebx
c0022eaa:	43                   	inc    ebx
c0022eab:	56                   	push   esi
c0022eac:	e8 1d fc ff ff       	call   c0022ace <PCI::checkBus(unsigned char)>
c0022eb1:	83 c4 10             	add    esp,0x10
c0022eb4:	83 fb 08             	cmp    ebx,0x8
c0022eb7:	74 12                	je     c0022ecb <PCI::detect()+0x4f>
c0022eb9:	53                   	push   ebx
c0022eba:	6a 00                	push   0x0
c0022ebc:	6a 00                	push   0x0
c0022ebe:	56                   	push   esi
c0022ebf:	e8 28 fa ff ff       	call   c00228ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ec4:	83 c4 10             	add    esp,0x10
c0022ec7:	66 40                	inc    ax
c0022ec9:	74 dc                	je     c0022ea7 <PCI::detect()+0x2b>
c0022ecb:	58                   	pop    eax
c0022ecc:	5b                   	pop    ebx
c0022ecd:	5e                   	pop    esi
c0022ece:	c3                   	ret    
c0022ecf:	90                   	nop

c0022ed0 <IDE::close(int, int, void*)>:
c0022ed0:	83 c8 ff             	or     eax,0xffffffff
c0022ed3:	c3                   	ret    

c0022ed4 <IDE::IDE()>:
c0022ed4:	83 ec 0c             	sub    esp,0xc
c0022ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022edb:	83 ec 08             	sub    esp,0x8
c0022ede:	68 50 c9 02 c0       	push   0xc002c950
c0022ee3:	50                   	push   eax
c0022ee4:	e8 4f 17 ff ff       	call   c0014638 <HardDiskController::HardDiskController(char const*)>
c0022ee9:	83 c4 10             	add    esp,0x10
c0022eec:	ba 90 cb 02 c0       	mov    edx,0xc002cb90
c0022ef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef5:	89 10                	mov    DWORD PTR [eax],edx
c0022ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022efb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f02:	90                   	nop
c0022f03:	83 c4 0c             	add    esp,0xc
c0022f06:	c3                   	ret    
c0022f07:	90                   	nop

c0022f08 <IDE::prepareInterrupt(unsigned char)>:
c0022f08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f11:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f19:	c3                   	ret    

c0022f1a <selectDrive(unsigned char, unsigned char)>:
c0022f1a:	c3                   	ret    
c0022f1b:	90                   	nop

c0022f1c <IDE::getBase(unsigned char)>:
c0022f1c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f25:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f2d:	c3                   	ret    

c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022f2e:	55                   	push   ebp
c0022f2f:	57                   	push   edi
c0022f30:	56                   	push   esi
c0022f31:	53                   	push   ebx
c0022f32:	83 ec 1c             	sub    esp,0x1c
c0022f35:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f39:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f3d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f40:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f44:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f48:	80 f9 03             	cmp    cl,0x3
c0022f4b:	77 51                	ja     c0022f9e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f51:	0f b6 f2             	movzx  esi,dl
c0022f54:	0f b6 db             	movzx  ebx,bl
c0022f57:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f5a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022f5e:	83 ca 80             	or     edx,0xffffff80
c0022f61:	0f b6 d2             	movzx  edx,dl
c0022f64:	52                   	push   edx
c0022f65:	6a 0c                	push   0xc
c0022f67:	56                   	push   esi
c0022f68:	57                   	push   edi
c0022f69:	e8 c0 ff ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f6e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f77:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f7b:	ee                   	out    dx,al
c0022f7c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f81:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f85:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f89:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f8d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f95:	83 c4 2c             	add    esp,0x2c
c0022f98:	5b                   	pop    ebx
c0022f99:	5e                   	pop    esi
c0022f9a:	5f                   	pop    edi
c0022f9b:	5d                   	pop    ebp
c0022f9c:	eb 90                	jmp    c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f9e:	80 fb 07             	cmp    bl,0x7
c0022fa1:	77 12                	ja     c0022fb5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022fa3:	0f b6 d2             	movzx  edx,dl
c0022fa6:	0f b6 db             	movzx  ebx,bl
c0022fa9:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022fb1:	89 da                	mov    edx,ebx
c0022fb3:	eb 2f                	jmp    c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fb5:	80 fb 0d             	cmp    bl,0xd
c0022fb8:	77 13                	ja     c0022fcd <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022fba:	0f b6 d2             	movzx  edx,dl
c0022fbd:	0f b6 db             	movzx  ebx,bl
c0022fc0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022fc7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022fcb:	eb 17                	jmp    c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fcd:	80 fb 15             	cmp    bl,0x15
c0022fd0:	77 13                	ja     c0022fe5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022fd2:	0f b6 d2             	movzx  edx,dl
c0022fd5:	0f b6 db             	movzx  ebx,bl
c0022fd8:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022fe0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022fe4:	ee                   	out    dx,al
c0022fe5:	83 c4 1c             	add    esp,0x1c
c0022fe8:	5b                   	pop    ebx
c0022fe9:	5e                   	pop    esi
c0022fea:	5f                   	pop    edi
c0022feb:	5d                   	pop    ebp
c0022fec:	c3                   	ret    
c0022fed:	90                   	nop

c0022fee <IDE::read(unsigned char, unsigned char)>:
c0022fee:	55                   	push   ebp
c0022fef:	57                   	push   edi
c0022ff0:	56                   	push   esi
c0022ff1:	53                   	push   ebx
c0022ff2:	83 ec 1c             	sub    esp,0x1c
c0022ff5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ff9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ffd:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023000:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023004:	3c 03                	cmp    al,0x3
c0023006:	77 43                	ja     c002304b <IDE::read(unsigned char, unsigned char)+0x5d>
c0023008:	0f b6 f2             	movzx  esi,dl
c002300b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002300e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023012:	83 c8 80             	or     eax,0xffffff80
c0023015:	0f b6 c0             	movzx  eax,al
c0023018:	50                   	push   eax
c0023019:	6a 0c                	push   0xc
c002301b:	56                   	push   esi
c002301c:	57                   	push   edi
c002301d:	e8 0c ff ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023022:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023027:	0f b6 c3             	movzx  eax,bl
c002302a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002302e:	ec                   	in     al,dx
c002302f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023033:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023038:	52                   	push   edx
c0023039:	6a 0c                	push   0xc
c002303b:	56                   	push   esi
c002303c:	57                   	push   edi
c002303d:	e8 ec fe ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023042:	83 c4 20             	add    esp,0x20
c0023045:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023049:	eb 49                	jmp    c0023094 <IDE::read(unsigned char, unsigned char)+0xa6>
c002304b:	80 fb 07             	cmp    bl,0x7
c002304e:	77 12                	ja     c0023062 <IDE::read(unsigned char, unsigned char)+0x74>
c0023050:	0f b6 d2             	movzx  edx,dl
c0023053:	0f b6 c3             	movzx  eax,bl
c0023056:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002305e:	89 c2                	mov    edx,eax
c0023060:	eb 31                	jmp    c0023093 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023062:	80 fb 0d             	cmp    bl,0xd
c0023065:	77 13                	ja     c002307a <IDE::read(unsigned char, unsigned char)+0x8c>
c0023067:	0f b6 d2             	movzx  edx,dl
c002306a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023071:	0f b6 d3             	movzx  edx,bl
c0023074:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023078:	eb 19                	jmp    c0023093 <IDE::read(unsigned char, unsigned char)+0xa5>
c002307a:	31 c0                	xor    eax,eax
c002307c:	80 fb 15             	cmp    bl,0x15
c002307f:	77 13                	ja     c0023094 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023081:	0f b6 d2             	movzx  edx,dl
c0023084:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002308c:	0f b6 d3             	movzx  edx,bl
c002308f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023093:	ec                   	in     al,dx
c0023094:	83 c4 1c             	add    esp,0x1c
c0023097:	5b                   	pop    ebx
c0023098:	5e                   	pop    esi
c0023099:	5f                   	pop    edi
c002309a:	5d                   	pop    ebp
c002309b:	c3                   	ret    

c002309c <IDE::waitInterrupt(unsigned char)>:
c002309c:	55                   	push   ebp
c002309d:	57                   	push   edi
c002309e:	56                   	push   esi
c002309f:	53                   	push   ebx
c00230a0:	31 db                	xor    ebx,ebx
c00230a2:	83 ec 0c             	sub    esp,0xc
c00230a5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00230a9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00230ae:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00230b6:	89 e8                	mov    eax,ebp
c00230b8:	84 c0                	test   al,al
c00230ba:	75 34                	jne    c00230f0 <IDE::waitInterrupt(unsigned char)+0x54>
c00230bc:	52                   	push   edx
c00230bd:	6a 0c                	push   0xc
c00230bf:	56                   	push   esi
c00230c0:	57                   	push   edi
c00230c1:	e8 28 ff ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c00230c6:	83 c4 10             	add    esp,0x10
c00230c9:	a8 01                	test   al,0x1
c00230cb:	75 2b                	jne    c00230f8 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230cd:	f6 c3 04             	test   bl,0x4
c00230d0:	75 16                	jne    c00230e8 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230d2:	83 fb 32             	cmp    ebx,0x32
c00230d5:	7e 11                	jle    c00230e8 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230d7:	50                   	push   eax
c00230d8:	50                   	push   eax
c00230d9:	6a 00                	push   0x0
c00230db:	68 80 96 98 00       	push   0x989680
c00230e0:	e8 8b b1 ff ff       	call   c001e270 <nanoSleep(unsigned long long)>
c00230e5:	83 c4 10             	add    esp,0x10
c00230e8:	83 fb 3c             	cmp    ebx,0x3c
c00230eb:	74 0b                	je     c00230f8 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230ed:	43                   	inc    ebx
c00230ee:	eb be                	jmp    c00230ae <IDE::waitInterrupt(unsigned char)+0x12>
c00230f0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00230f8:	83 c4 0c             	add    esp,0xc
c00230fb:	89 e8                	mov    eax,ebp
c00230fd:	5b                   	pop    ebx
c00230fe:	5e                   	pop    esi
c00230ff:	5f                   	pop    edi
c0023100:	5d                   	pop    ebp
c0023101:	c3                   	ret    

c0023102 <ideChannel0IRQHandler(regs*, void*)>:
c0023102:	83 ec 10             	sub    esp,0x10
c0023105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023109:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023110:	6a 07                	push   0x7
c0023112:	6a 00                	push   0x0
c0023114:	50                   	push   eax
c0023115:	e8 d4 fe ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c002311a:	83 c4 1c             	add    esp,0x1c
c002311d:	c3                   	ret    

c002311e <ideChannel1IRQHandler(regs*, void*)>:
c002311e:	83 ec 10             	sub    esp,0x10
c0023121:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023125:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002312c:	6a 07                	push   0x7
c002312e:	6a 01                	push   0x1
c0023130:	50                   	push   eax
c0023131:	e8 b8 fe ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c0023136:	83 c4 1c             	add    esp,0x1c
c0023139:	c3                   	ret    

c002313a <IDE::enableIRQs(unsigned char, bool)>:
c002313a:	57                   	push   edi
c002313b:	56                   	push   esi
c002313c:	be 04 00 00 00       	mov    esi,0x4
c0023141:	53                   	push   ebx
c0023142:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023147:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002314b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023150:	0f 94 c0             	sete   al
c0023153:	d1 e0                	shl    eax,1
c0023155:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002315c:	0f b6 c0             	movzx  eax,al
c002315f:	50                   	push   eax
c0023160:	6a 0c                	push   0xc
c0023162:	57                   	push   edi
c0023163:	53                   	push   ebx
c0023164:	e8 c5 fd ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023169:	83 c4 10             	add    esp,0x10
c002316c:	50                   	push   eax
c002316d:	6a 0c                	push   0xc
c002316f:	57                   	push   edi
c0023170:	53                   	push   ebx
c0023171:	e8 78 fe ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c0023176:	83 c4 10             	add    esp,0x10
c0023179:	4e                   	dec    esi
c002317a:	75 f0                	jne    c002316c <IDE::enableIRQs(unsigned char, bool)+0x32>
c002317c:	5b                   	pop    ebx
c002317d:	5e                   	pop    esi
c002317e:	5f                   	pop    edi
c002317f:	c3                   	ret    

c0023180 <IDE::open(int, int, void*)>:
c0023180:	55                   	push   ebp
c0023181:	57                   	push   edi
c0023182:	56                   	push   esi
c0023183:	53                   	push   ebx
c0023184:	83 ec 1c             	sub    esp,0x1c
c0023187:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002318b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023194:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002319d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00231a4:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00231ab:	0f 85 b0 02 00 00    	jne    c0023461 <IDE::open(int, int, void*)+0x2e1>
c00231b1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00231b7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00231bb:	83 e0 7f             	and    eax,0x7f
c00231be:	3c 05                	cmp    al,0x5
c00231c0:	74 04                	je     c00231c6 <IDE::open(int, int, void*)+0x46>
c00231c2:	3c 0f                	cmp    al,0xf
c00231c4:	75 32                	jne    c00231f8 <IDE::open(int, int, void*)+0x78>
c00231c6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00231cc:	83 e0 fc             	and    eax,0xfffffffc
c00231cf:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00231d6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00231dc:	83 e0 fc             	and    eax,0xfffffffc
c00231df:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00231e6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00231ec:	83 e0 fc             	and    eax,0xfffffffc
c00231ef:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00231f6:	eb 14                	jmp    c002320c <IDE::open(int, int, void*)+0x8c>
c00231f8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023202:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002320c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023213:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002321a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002321e:	89 c6                	mov    esi,eax
c0023220:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023225:	c1 e6 10             	shl    esi,0x10
c0023228:	89 e8                	mov    eax,ebp
c002322a:	89 fa                	mov    edx,edi
c002322c:	c1 e0 0b             	shl    eax,0xb
c002322f:	09 f0                	or     eax,esi
c0023231:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023238:	c1 e6 08             	shl    esi,0x8
c002323b:	09 c6                	or     esi,eax
c002323d:	89 f0                	mov    eax,esi
c002323f:	0d 08 00 00 80       	or     eax,0x80000008
c0023244:	ef                   	out    dx,eax
c0023245:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002324a:	89 ca                	mov    edx,ecx
c002324c:	ed                   	in     eax,dx
c002324d:	c1 e8 10             	shr    eax,0x10
c0023250:	3d ff ff 00 00       	cmp    eax,0xffff
c0023255:	0f 84 f5 00 00 00    	je     c0023350 <IDE::open(int, int, void*)+0x1d0>
c002325b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023261:	89 fa                	mov    edx,edi
c0023263:	89 f0                	mov    eax,esi
c0023265:	ef                   	out    dx,eax
c0023266:	b0 fe                	mov    al,0xfe
c0023268:	89 ca                	mov    edx,ecx
c002326a:	ee                   	out    dx,al
c002326b:	89 f0                	mov    eax,esi
c002326d:	89 fa                	mov    edx,edi
c002326f:	ef                   	out    dx,eax
c0023270:	89 ca                	mov    edx,ecx
c0023272:	ed                   	in     eax,dx
c0023273:	3c fe                	cmp    al,0xfe
c0023275:	0f 85 a9 00 00 00    	jne    c0023324 <IDE::open(int, int, void*)+0x1a4>
c002327b:	8b 15 e8 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e8
c0023281:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023288:	74 33                	je     c00232bd <IDE::open(int, int, void*)+0x13d>
c002328a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023290:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023294:	40                   	inc    eax
c0023295:	83 ec 0c             	sub    esp,0xc
c0023298:	0f b6 c0             	movzx  eax,al
c002329b:	50                   	push   eax
c002329c:	55                   	push   ebp
c002329d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00232a1:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00232a7:	51                   	push   ecx
c00232a8:	e8 d3 4e ff ff       	call   c0018180 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00232ad:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00232b2:	83 c4 1c             	add    esp,0x1c
c00232b5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00232bb:	eb 0a                	jmp    c00232c7 <IDE::open(int, int, void*)+0x147>
c00232bd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00232c7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00232ce:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00232d5:	c1 e1 10             	shl    ecx,0x10
c00232d8:	c1 e0 08             	shl    eax,0x8
c00232db:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232e0:	09 c1                	or     ecx,eax
c00232e2:	89 fa                	mov    edx,edi
c00232e4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00232eb:	c1 e0 0b             	shl    eax,0xb
c00232ee:	09 c1                	or     ecx,eax
c00232f0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00232f6:	89 c8                	mov    eax,ecx
c00232f8:	ef                   	out    dx,eax
c00232f9:	be fc 0c 00 00       	mov    esi,0xcfc
c00232fe:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023304:	89 f2                	mov    edx,esi
c0023306:	ee                   	out    dx,al
c0023307:	89 c8                	mov    eax,ecx
c0023309:	89 fa                	mov    edx,edi
c002330b:	ef                   	out    dx,eax
c002330c:	89 f2                	mov    edx,esi
c002330e:	ed                   	in     eax,dx
c002330f:	0f b6 c0             	movzx  eax,al
c0023312:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023318:	74 46                	je     c0023360 <IDE::open(int, int, void*)+0x1e0>
c002331a:	83 ec 0c             	sub    esp,0xc
c002331d:	68 68 c9 02 c0       	push   0xc002c968
c0023322:	eb 34                	jmp    c0023358 <IDE::open(int, int, void*)+0x1d8>
c0023324:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002332d:	75 17                	jne    c0023346 <IDE::open(int, int, void*)+0x1c6>
c002332f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023334:	74 07                	je     c002333d <IDE::open(int, int, void*)+0x1bd>
c0023336:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002333b:	75 09                	jne    c0023346 <IDE::open(int, int, void*)+0x1c6>
c002333d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023344:	eb 1a                	jmp    c0023360 <IDE::open(int, int, void*)+0x1e0>
c0023346:	83 ec 0c             	sub    esp,0xc
c0023349:	68 70 c9 02 c0       	push   0xc002c970
c002334e:	eb 08                	jmp    c0023358 <IDE::open(int, int, void*)+0x1d8>
c0023350:	83 ec 0c             	sub    esp,0xc
c0023353:	68 a1 c9 02 c0       	push   0xc002c9a1
c0023358:	e8 ce 71 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c002335d:	83 c4 10             	add    esp,0x10
c0023360:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023367:	79 1a                	jns    c0023383 <IDE::open(int, int, void*)+0x203>
c0023369:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002336f:	83 e0 fc             	and    eax,0xfffffffc
c0023372:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023379:	83 c0 08             	add    eax,0x8
c002337c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023383:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023389:	89 c2                	mov    edx,eax
c002338b:	83 e2 0f             	and    edx,0xf
c002338e:	66 83 fa 08          	cmp    dx,0x8
c0023392:	75 0a                	jne    c002339e <IDE::open(int, int, void*)+0x21e>
c0023394:	83 e8 02             	sub    eax,0x2
c0023397:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002339e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00233a4:	89 c2                	mov    edx,eax
c00233a6:	83 e2 0f             	and    edx,0xf
c00233a9:	66 83 fa 08          	cmp    dx,0x8
c00233ad:	75 0a                	jne    c00233b9 <IDE::open(int, int, void*)+0x239>
c00233af:	83 e8 02             	sub    eax,0x2
c00233b2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00233b9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00233c0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00233c7:	89 d0                	mov    eax,edx
c00233c9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233cc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233d0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00233d4:	8d 4a 01             	lea    ecx,[edx+0x1]
c00233d7:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233dc:	0f b6 c9             	movzx  ecx,cl
c00233df:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00233e6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233e9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233ed:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00233f1:	8d 50 02             	lea    edx,[eax+0x2]
c00233f4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233f9:	0f b6 d2             	movzx  edx,dl
c00233fc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023402:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023405:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023409:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002340d:	8d 48 03             	lea    ecx,[eax+0x3]
c0023410:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023415:	0f b6 c9             	movzx  ecx,cl
c0023418:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002341e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023421:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023425:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023429:	8d 50 04             	lea    edx,[eax+0x4]
c002342c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023432:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023437:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002343e:	66 85 f6             	test   si,si
c0023441:	74 3e                	je     c0023481 <IDE::open(int, int, void*)+0x301>
c0023443:	0f b6 d2             	movzx  edx,dl
c0023446:	83 c0 05             	add    eax,0x5
c0023449:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002344c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023450:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023454:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002345a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002345f:	eb 20                	jmp    c0023481 <IDE::open(int, int, void*)+0x301>
c0023461:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002346b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023475:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002347c:	e9 02 ff ff ff       	jmp    c0023383 <IDE::open(int, int, void*)+0x203>
c0023481:	52                   	push   edx
c0023482:	52                   	push   edx
c0023483:	6a 00                	push   0x0
c0023485:	53                   	push   ebx
c0023486:	e8 7d fa ff ff       	call   c0022f08 <IDE::prepareInterrupt(unsigned char)>
c002348b:	59                   	pop    ecx
c002348c:	5e                   	pop    esi
c002348d:	6a 01                	push   0x1
c002348f:	53                   	push   ebx
c0023490:	e8 73 fa ff ff       	call   c0022f08 <IDE::prepareInterrupt(unsigned char)>
c0023495:	83 c4 0c             	add    esp,0xc
c0023498:	6a 00                	push   0x0
c002349a:	6a 00                	push   0x0
c002349c:	53                   	push   ebx
c002349d:	e8 98 fc ff ff       	call   c002313a <IDE::enableIRQs(unsigned char, bool)>
c00234a2:	83 c4 0c             	add    esp,0xc
c00234a5:	6a 00                	push   0x0
c00234a7:	6a 01                	push   0x1
c00234a9:	53                   	push   ebx
c00234aa:	e8 8b fc ff ff       	call   c002313a <IDE::enableIRQs(unsigned char, bool)>
c00234af:	83 c4 10             	add    esp,0x10
c00234b2:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00234b9:	74 40                	je     c00234fb <IDE::open(int, int, void*)+0x37b>
c00234bb:	83 ec 0c             	sub    esp,0xc
c00234be:	68 cb c9 02 c0       	push   0xc002c9cb
c00234c3:	e8 be f9 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00234c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00234cb:	6a 01                	push   0x1
c00234cd:	68 02 31 02 c0       	push   0xc0023102
c00234d2:	6a 0e                	push   0xe
c00234d4:	53                   	push   ebx
c00234d5:	e8 56 0d ff ff       	call   c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234da:	83 c4 14             	add    esp,0x14
c00234dd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00234e3:	53                   	push   ebx
c00234e4:	6a 01                	push   0x1
c00234e6:	68 1e 31 02 c0       	push   0xc002311e
c00234eb:	6a 0f                	push   0xf
c00234ed:	53                   	push   ebx
c00234ee:	e8 3d 0d ff ff       	call   c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234f3:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00234f9:	eb 4a                	jmp    c0023545 <IDE::open(int, int, void*)+0x3c5>
c00234fb:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023505:	50                   	push   eax
c0023506:	6a 0f                	push   0xf
c0023508:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002350e:	68 e7 c9 02 c0       	push   0xc002c9e7
c0023513:	e8 6e f9 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023518:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002351b:	6a 00                	push   0x0
c002351d:	68 02 31 02 c0       	push   0xc0023102
c0023522:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023528:	53                   	push   ebx
c0023529:	e8 02 0d ff ff       	call   c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002352e:	83 c4 14             	add    esp,0x14
c0023531:	53                   	push   ebx
c0023532:	6a 00                	push   0x0
c0023534:	68 1e 31 02 c0       	push   0xc002311e
c0023539:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002353f:	53                   	push   ebx
c0023540:	e8 eb 0c ff ff       	call   c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023545:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023547:	83 c4 20             	add    esp,0x20
c002354a:	83 ec 0c             	sub    esp,0xc
c002354d:	53                   	push   ebx
c002354e:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023551:	83 c4 0c             	add    esp,0xc
c0023554:	6a 07                	push   0x7
c0023556:	6a 00                	push   0x0
c0023558:	53                   	push   ebx
c0023559:	e8 90 fa ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c002355e:	83 c4 0c             	add    esp,0xc
c0023561:	6a 07                	push   0x7
c0023563:	6a 01                	push   0x1
c0023565:	53                   	push   ebx
c0023566:	e8 83 fa ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c002356b:	83 c4 0c             	add    esp,0xc
c002356e:	6a 01                	push   0x1
c0023570:	6a 00                	push   0x0
c0023572:	53                   	push   ebx
c0023573:	e8 c2 fb ff ff       	call   c002313a <IDE::enableIRQs(unsigned char, bool)>
c0023578:	83 c4 0c             	add    esp,0xc
c002357b:	6a 01                	push   0x1
c002357d:	6a 01                	push   0x1
c002357f:	53                   	push   ebx
c0023580:	e8 b5 fb ff ff       	call   c002313a <IDE::enableIRQs(unsigned char, bool)>
c0023585:	83 c4 2c             	add    esp,0x2c
c0023588:	31 c0                	xor    eax,eax
c002358a:	5b                   	pop    ebx
c002358b:	5e                   	pop    esi
c002358c:	5f                   	pop    edi
c002358d:	5d                   	pop    ebp
c002358e:	c3                   	ret    
c002358f:	90                   	nop

c0023590 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023590:	55                   	push   ebp
c0023591:	57                   	push   edi
c0023592:	56                   	push   esi
c0023593:	53                   	push   ebx
c0023594:	83 ec 1c             	sub    esp,0x1c
c0023597:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002359b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002359f:	8d 50 f8             	lea    edx,[eax-0x8]
c00235a2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00235a6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00235aa:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00235ae:	80 fa 03             	cmp    dl,0x3
c00235b1:	77 5d                	ja     c0023610 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00235b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00235b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00235bb:	0f b6 db             	movzx  ebx,bl
c00235be:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00235c1:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00235c5:	83 ca 80             	or     edx,0xffffff80
c00235c8:	0f b6 d2             	movzx  edx,dl
c00235cb:	52                   	push   edx
c00235cc:	6a 0c                	push   0xc
c00235ce:	53                   	push   ebx
c00235cf:	56                   	push   esi
c00235d0:	e8 59 f9 ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235d5:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00235da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00235e2:	0f b6 c0             	movzx  eax,al
c00235e5:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00235e9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235eb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00235f0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00235f4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00235f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00235fc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023604:	83 c4 2c             	add    esp,0x2c
c0023607:	5b                   	pop    ebx
c0023608:	5e                   	pop    esi
c0023609:	5f                   	pop    edi
c002360a:	5d                   	pop    ebp
c002360b:	e9 1e f9 ff ff       	jmp    c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023610:	3c 07                	cmp    al,0x7
c0023612:	77 10                	ja     c0023624 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023614:	0f b6 db             	movzx  ebx,bl
c0023617:	0f b6 d0             	movzx  edx,al
c002361a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023622:	eb 2d                	jmp    c0023651 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023624:	3c 0d                	cmp    al,0xd
c0023626:	77 13                	ja     c002363b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023628:	0f b6 db             	movzx  ebx,bl
c002362b:	0f b6 c0             	movzx  eax,al
c002362e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023635:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023639:	eb 16                	jmp    c0023651 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002363b:	3c 15                	cmp    al,0x15
c002363d:	77 14                	ja     c0023653 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002363f:	0f b6 db             	movzx  ebx,bl
c0023642:	0f b6 c0             	movzx  eax,al
c0023645:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002364d:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023651:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023653:	83 c4 1c             	add    esp,0x1c
c0023656:	5b                   	pop    ebx
c0023657:	5e                   	pop    esi
c0023658:	5f                   	pop    edi
c0023659:	5d                   	pop    ebp
c002365a:	c3                   	ret    
c002365b:	90                   	nop

c002365c <IDE::detect()>:
c002365c:	55                   	push   ebp
c002365d:	57                   	push   edi
c002365e:	56                   	push   esi
c002365f:	53                   	push   ebx
c0023660:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023666:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002366d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023674:	0f 85 be 02 00 00    	jne    c0023938 <IDE::detect()+0x2dc>
c002367a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023681:	31 f6                	xor    esi,esi
c0023683:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002368b:	31 ed                	xor    ebp,ebp
c002368d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023691:	c1 e0 06             	shl    eax,0x6
c0023694:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002369c:	89 e8                	mov    eax,ebp
c002369e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00236a2:	c1 e0 04             	shl    eax,0x4
c00236a5:	83 c8 a0             	or     eax,0xffffffa0
c00236a8:	0f b6 c0             	movzx  eax,al
c00236ab:	50                   	push   eax
c00236ac:	6a 06                	push   0x6
c00236ae:	56                   	push   esi
c00236af:	53                   	push   ebx
c00236b0:	e8 79 f8 ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236b5:	83 c4 0c             	add    esp,0xc
c00236b8:	6a 0c                	push   0xc
c00236ba:	56                   	push   esi
c00236bb:	53                   	push   ebx
c00236bc:	e8 2d f9 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c00236c1:	83 c4 0c             	add    esp,0xc
c00236c4:	6a 0c                	push   0xc
c00236c6:	56                   	push   esi
c00236c7:	53                   	push   ebx
c00236c8:	e8 21 f9 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c00236cd:	83 c4 0c             	add    esp,0xc
c00236d0:	6a 0c                	push   0xc
c00236d2:	56                   	push   esi
c00236d3:	53                   	push   ebx
c00236d4:	e8 15 f9 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c00236d9:	83 c4 0c             	add    esp,0xc
c00236dc:	6a 0c                	push   0xc
c00236de:	56                   	push   esi
c00236df:	53                   	push   ebx
c00236e0:	e8 09 f9 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c00236e5:	68 ec 00 00 00       	push   0xec
c00236ea:	6a 07                	push   0x7
c00236ec:	56                   	push   esi
c00236ed:	53                   	push   ebx
c00236ee:	e8 3b f8 ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236f3:	83 c4 1c             	add    esp,0x1c
c00236f6:	6a 0c                	push   0xc
c00236f8:	56                   	push   esi
c00236f9:	53                   	push   ebx
c00236fa:	e8 ef f8 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c00236ff:	83 c4 0c             	add    esp,0xc
c0023702:	6a 0c                	push   0xc
c0023704:	56                   	push   esi
c0023705:	53                   	push   ebx
c0023706:	e8 e3 f8 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c002370b:	83 c4 0c             	add    esp,0xc
c002370e:	6a 0c                	push   0xc
c0023710:	56                   	push   esi
c0023711:	53                   	push   ebx
c0023712:	e8 d7 f8 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c0023717:	83 c4 0c             	add    esp,0xc
c002371a:	6a 0c                	push   0xc
c002371c:	56                   	push   esi
c002371d:	53                   	push   ebx
c002371e:	e8 cb f8 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c0023723:	83 c4 0c             	add    esp,0xc
c0023726:	6a 0c                	push   0xc
c0023728:	56                   	push   esi
c0023729:	53                   	push   ebx
c002372a:	e8 bf f8 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c002372f:	83 c4 10             	add    esp,0x10
c0023732:	84 c0                	test   al,al
c0023734:	0f 84 8b 01 00 00    	je     c00238c5 <IDE::detect()+0x269>
c002373a:	31 ff                	xor    edi,edi
c002373c:	50                   	push   eax
c002373d:	6a 0c                	push   0xc
c002373f:	56                   	push   esi
c0023740:	53                   	push   ebx
c0023741:	e8 a8 f8 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c0023746:	83 c4 10             	add    esp,0x10
c0023749:	a8 01                	test   al,0x1
c002374b:	0f 85 8e 01 00 00    	jne    c00238df <IDE::detect()+0x283>
c0023751:	84 c0                	test   al,al
c0023753:	78 04                	js     c0023759 <IDE::detect()+0xfd>
c0023755:	a8 08                	test   al,0x8
c0023757:	75 27                	jne    c0023780 <IDE::detect()+0x124>
c0023759:	47                   	inc    edi
c002375a:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023760:	7e da                	jle    c002373c <IDE::detect()+0xe0>
c0023762:	50                   	push   eax
c0023763:	50                   	push   eax
c0023764:	6a 00                	push   0x0
c0023766:	68 40 4b 4c 00       	push   0x4c4b40
c002376b:	e8 00 ab ff ff       	call   c001e270 <nanoSleep(unsigned long long)>
c0023770:	83 c4 10             	add    esp,0x10
c0023773:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023779:	75 c1                	jne    c002373c <IDE::detect()+0xe0>
c002377b:	e9 5f 01 00 00       	jmp    c00238df <IDE::detect()+0x283>
c0023780:	31 c9                	xor    ecx,ecx
c0023782:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023786:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002378a:	83 ec 0c             	sub    esp,0xc
c002378d:	68 80 00 00 00       	push   0x80
c0023792:	57                   	push   edi
c0023793:	6a 00                	push   0x0
c0023795:	56                   	push   esi
c0023796:	53                   	push   ebx
c0023797:	e8 f4 fd ff ff       	call   c0023590 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002379c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00237a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00237a5:	89 d1                	mov    ecx,edx
c00237a7:	c1 e0 06             	shl    eax,0x6
c00237aa:	01 d8                	add    eax,ebx
c00237ac:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00237b3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00237ba:	89 f2                	mov    edx,esi
c00237bc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00237c2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00237c6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00237cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00237d0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00237d7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00237df:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00237e6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00237ee:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00237f4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00237fb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023801:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023805:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023809:	83 c4 20             	add    esp,0x20
c002380c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002380f:	83 c0 02             	add    eax,0x2
c0023812:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023818:	83 c7 02             	add    edi,0x2
c002381b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002381e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023824:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023828:	75 e2                	jne    c002380c <IDE::detect()+0x1b0>
c002382a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002382e:	c1 e0 06             	shl    eax,0x6
c0023831:	01 d8                	add    eax,ebx
c0023833:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023839:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023840:	66 c1 ea 09          	shr    dx,0x9
c0023844:	83 e2 01             	and    edx,0x1
c0023847:	84 c9                	test   cl,cl
c0023849:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002384f:	75 2f                	jne    c0023880 <IDE::detect()+0x224>
c0023851:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023857:	85 c0                	test   eax,eax
c0023859:	74 66                	je     c00238c1 <IDE::detect()+0x265>
c002385b:	50                   	push   eax
c002385c:	55                   	push   ebp
c002385d:	56                   	push   esi
c002385e:	68 03 ca 02 c0       	push   0xc002ca03
c0023863:	e8 1e f6 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023868:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002386f:	e8 cc bf fe ff       	call   c000f840 <malloc>
c0023874:	89 c7                	mov    edi,eax
c0023876:	89 04 24             	mov    DWORD PTR [esp],eax
c0023879:	e8 78 06 00 00       	call   c0023ef6 <ATA::ATA()>
c002387e:	eb 28                	jmp    c00238a8 <IDE::detect()+0x24c>
c0023880:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023886:	55                   	push   ebp
c0023887:	56                   	push   esi
c0023888:	68 32 ca 02 c0       	push   0xc002ca32
c002388d:	e8 f4 f5 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023892:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023899:	e8 a2 bf fe ff       	call   c000f840 <malloc>
c002389e:	89 c7                	mov    edi,eax
c00238a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00238a3:	e8 8e 0c 00 00       	call   c0024536 <ATAPI::ATAPI()>
c00238a8:	5a                   	pop    edx
c00238a9:	59                   	pop    ecx
c00238aa:	57                   	push   edi
c00238ab:	53                   	push   ebx
c00238ac:	e8 fb 09 ff ff       	call   c00142ac <Device::addChild(Device*)>
c00238b1:	8b 07                	mov    eax,DWORD PTR [edi]
c00238b3:	53                   	push   ebx
c00238b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00238b8:	6a 00                	push   0x0
c00238ba:	57                   	push   edi
c00238bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00238be:	83 c4 20             	add    esp,0x20
c00238c1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00238c5:	4d                   	dec    ebp
c00238c6:	74 0a                	je     c00238d2 <IDE::detect()+0x276>
c00238c8:	bd 01 00 00 00       	mov    ebp,0x1
c00238cd:	e9 bb fd ff ff       	jmp    c002368d <IDE::detect()+0x31>
c00238d2:	4e                   	dec    esi
c00238d3:	74 63                	je     c0023938 <IDE::detect()+0x2dc>
c00238d5:	be 01 00 00 00       	mov    esi,0x1
c00238da:	e9 ac fd ff ff       	jmp    c002368b <IDE::detect()+0x2f>
c00238df:	50                   	push   eax
c00238e0:	6a 04                	push   0x4
c00238e2:	56                   	push   esi
c00238e3:	53                   	push   ebx
c00238e4:	e8 05 f7 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c00238e9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238ed:	83 c4 0c             	add    esp,0xc
c00238f0:	6a 05                	push   0x5
c00238f2:	56                   	push   esi
c00238f3:	53                   	push   ebx
c00238f4:	e8 f5 f6 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c00238f9:	83 c4 10             	add    esp,0x10
c00238fc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023900:	80 fa 14             	cmp    dl,0x14
c0023903:	75 04                	jne    c0023909 <IDE::detect()+0x2ad>
c0023905:	3c eb                	cmp    al,0xeb
c0023907:	eb 07                	jmp    c0023910 <IDE::detect()+0x2b4>
c0023909:	3c 96                	cmp    al,0x96
c002390b:	75 b8                	jne    c00238c5 <IDE::detect()+0x269>
c002390d:	80 fa 69             	cmp    dl,0x69
c0023910:	75 b3                	jne    c00238c5 <IDE::detect()+0x269>
c0023912:	68 a1 00 00 00       	push   0xa1
c0023917:	6a 07                	push   0x7
c0023919:	56                   	push   esi
c002391a:	53                   	push   ebx
c002391b:	e8 0e f6 ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023920:	5f                   	pop    edi
c0023921:	58                   	pop    eax
c0023922:	6a 00                	push   0x0
c0023924:	68 40 42 0f 00       	push   0xf4240
c0023929:	e8 42 a9 ff ff       	call   c001e270 <nanoSleep(unsigned long long)>
c002392e:	83 c4 10             	add    esp,0x10
c0023931:	b1 01                	mov    cl,0x1
c0023933:	e9 4a fe ff ff       	jmp    c0023782 <IDE::detect()+0x126>
c0023938:	81 c4 1c 02 00 00    	add    esp,0x21c
c002393e:	5b                   	pop    ebx
c002393f:	5e                   	pop    esi
c0023940:	5f                   	pop    edi
c0023941:	5d                   	pop    ebp
c0023942:	c3                   	ret    
c0023943:	90                   	nop

c0023944 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023944:	55                   	push   ebp
c0023945:	57                   	push   edi
c0023946:	56                   	push   esi
c0023947:	53                   	push   ebx
c0023948:	83 ec 1c             	sub    esp,0x1c
c002394b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002394f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023953:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023957:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002395b:	88 c3                	mov    bl,al
c002395d:	84 c0                	test   al,al
c002395f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023963:	0f 84 67 01 00 00    	je     c0023ad0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023969:	83 ec 0c             	sub    esp,0xc
c002396c:	68 63 ca 02 c0       	push   0xc002ca63
c0023971:	e8 10 f5 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023976:	83 c4 10             	add    esp,0x10
c0023979:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002397d:	3c 01                	cmp    al,0x1
c002397f:	75 17                	jne    c0023998 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023981:	83 ec 0c             	sub    esp,0xc
c0023984:	b3 13                	mov    bl,0x13
c0023986:	68 6f ca 02 c0       	push   0xc002ca6f
c002398b:	e8 f6 f4 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023990:	83 c4 10             	add    esp,0x10
c0023993:	e9 25 01 00 00       	jmp    c0023abd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023998:	3c 02                	cmp    al,0x2
c002399a:	0f 85 ef 00 00 00    	jne    c0023a8f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00239a0:	d1 e6                	shl    esi,1
c00239a2:	09 ee                	or     esi,ebp
c00239a4:	52                   	push   edx
c00239a5:	89 f0                	mov    eax,esi
c00239a7:	6a 01                	push   0x1
c00239a9:	0f b6 f0             	movzx  esi,al
c00239ac:	c1 e6 06             	shl    esi,0x6
c00239af:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00239b7:	50                   	push   eax
c00239b8:	57                   	push   edi
c00239b9:	e8 30 f6 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c00239be:	83 c4 10             	add    esp,0x10
c00239c1:	89 c6                	mov    esi,eax
c00239c3:	a8 01                	test   al,0x1
c00239c5:	74 12                	je     c00239d9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00239c7:	83 ec 0c             	sub    esp,0xc
c00239ca:	b3 07                	mov    bl,0x7
c00239cc:	68 84 ca 02 c0       	push   0xc002ca84
c00239d1:	e8 b0 f4 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00239d6:	83 c4 10             	add    esp,0x10
c00239d9:	f7 c6 02 00 00 00    	test   esi,0x2
c00239df:	74 12                	je     c00239f3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00239e1:	83 ec 0c             	sub    esp,0xc
c00239e4:	b3 03                	mov    bl,0x3
c00239e6:	68 a2 ca 02 c0       	push   0xc002caa2
c00239eb:	e8 96 f4 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00239f0:	83 c4 10             	add    esp,0x10
c00239f3:	f7 c6 04 00 00 00    	test   esi,0x4
c00239f9:	74 12                	je     c0023a0d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00239fb:	83 ec 0c             	sub    esp,0xc
c00239fe:	b3 14                	mov    bl,0x14
c0023a00:	68 c2 ca 02 c0       	push   0xc002cac2
c0023a05:	e8 7c f4 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023a0a:	83 c4 10             	add    esp,0x10
c0023a0d:	f7 c6 08 00 00 00    	test   esi,0x8
c0023a13:	74 12                	je     c0023a27 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023a15:	83 ec 0c             	sub    esp,0xc
c0023a18:	b3 03                	mov    bl,0x3
c0023a1a:	68 a2 ca 02 c0       	push   0xc002caa2
c0023a1f:	e8 62 f4 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023a24:	83 c4 10             	add    esp,0x10
c0023a27:	f7 c6 10 00 00 00    	test   esi,0x10
c0023a2d:	74 12                	je     c0023a41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023a2f:	83 ec 0c             	sub    esp,0xc
c0023a32:	b3 15                	mov    bl,0x15
c0023a34:	68 da ca 02 c0       	push   0xc002cada
c0023a39:	e8 48 f4 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023a3e:	83 c4 10             	add    esp,0x10
c0023a41:	f7 c6 20 00 00 00    	test   esi,0x20
c0023a47:	74 12                	je     c0023a5b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023a49:	83 ec 0c             	sub    esp,0xc
c0023a4c:	b3 03                	mov    bl,0x3
c0023a4e:	68 a2 ca 02 c0       	push   0xc002caa2
c0023a53:	e8 2e f4 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023a58:	83 c4 10             	add    esp,0x10
c0023a5b:	f7 c6 40 00 00 00    	test   esi,0x40
c0023a61:	74 12                	je     c0023a75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023a63:	83 ec 0c             	sub    esp,0xc
c0023a66:	b3 16                	mov    bl,0x16
c0023a68:	68 f4 ca 02 c0       	push   0xc002caf4
c0023a6d:	e8 14 f4 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023a72:	83 c4 10             	add    esp,0x10
c0023a75:	89 f0                	mov    eax,esi
c0023a77:	84 c0                	test   al,al
c0023a79:	79 42                	jns    c0023abd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a7b:	83 ec 0c             	sub    esp,0xc
c0023a7e:	b3 0d                	mov    bl,0xd
c0023a80:	68 15 cb 02 c0       	push   0xc002cb15
c0023a85:	e8 fc f3 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023a8a:	83 c4 10             	add    esp,0x10
c0023a8d:	eb 2e                	jmp    c0023abd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a8f:	3c 03                	cmp    al,0x3
c0023a91:	75 14                	jne    c0023aa7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023a93:	83 ec 0c             	sub    esp,0xc
c0023a96:	b3 17                	mov    bl,0x17
c0023a98:	68 29 cb 02 c0       	push   0xc002cb29
c0023a9d:	e8 e4 f3 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023aa2:	83 c4 10             	add    esp,0x10
c0023aa5:	eb 16                	jmp    c0023abd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023aa7:	3c 04                	cmp    al,0x4
c0023aa9:	75 12                	jne    c0023abd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023aab:	83 ec 0c             	sub    esp,0xc
c0023aae:	b3 08                	mov    bl,0x8
c0023ab0:	68 3f cb 02 c0       	push   0xc002cb3f
c0023ab5:	e8 cc f3 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023aba:	83 c4 10             	add    esp,0x10
c0023abd:	50                   	push   eax
c0023abe:	50                   	push   eax
c0023abf:	0f b6 c3             	movzx  eax,bl
c0023ac2:	50                   	push   eax
c0023ac3:	68 57 cb 02 c0       	push   0xc002cb57
c0023ac8:	e8 b9 f3 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023acd:	83 c4 10             	add    esp,0x10
c0023ad0:	83 c4 1c             	add    esp,0x1c
c0023ad3:	88 d8                	mov    al,bl
c0023ad5:	5b                   	pop    ebx
c0023ad6:	5e                   	pop    esi
c0023ad7:	5f                   	pop    edi
c0023ad8:	5d                   	pop    ebp
c0023ad9:	c3                   	ret    

c0023ada <IDE::polling(unsigned char, unsigned int)>:
c0023ada:	57                   	push   edi
c0023adb:	56                   	push   esi
c0023adc:	53                   	push   ebx
c0023add:	bb 04 00 00 00       	mov    ebx,0x4
c0023ae2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023ae6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023aeb:	52                   	push   edx
c0023aec:	6a 0c                	push   0xc
c0023aee:	56                   	push   esi
c0023aef:	57                   	push   edi
c0023af0:	e8 f9 f4 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c0023af5:	83 c4 10             	add    esp,0x10
c0023af8:	4b                   	dec    ebx
c0023af9:	75 f0                	jne    c0023aeb <IDE::polling(unsigned char, unsigned int)+0x11>
c0023afb:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023b00:	50                   	push   eax
c0023b01:	6a 0c                	push   0xc
c0023b03:	56                   	push   esi
c0023b04:	57                   	push   edi
c0023b05:	e8 e4 f4 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c0023b0a:	83 c4 10             	add    esp,0x10
c0023b0d:	a8 01                	test   al,0x1
c0023b0f:	74 12                	je     c0023b23 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023b11:	83 ec 0c             	sub    esp,0xc
c0023b14:	68 71 cb 02 c0       	push   0xc002cb71
c0023b19:	e8 68 f3 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023b1e:	83 c4 10             	add    esp,0x10
c0023b21:	eb 17                	jmp    c0023b3a <IDE::polling(unsigned char, unsigned int)+0x60>
c0023b23:	a8 20                	test   al,0x20
c0023b25:	75 0f                	jne    c0023b36 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023b27:	4b                   	dec    ebx
c0023b28:	74 10                	je     c0023b3a <IDE::polling(unsigned char, unsigned int)+0x60>
c0023b2a:	84 c0                	test   al,al
c0023b2c:	78 d2                	js     c0023b00 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023b2e:	a8 08                	test   al,0x8
c0023b30:	74 ce                	je     c0023b00 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023b32:	31 c0                	xor    eax,eax
c0023b34:	eb 06                	jmp    c0023b3c <IDE::polling(unsigned char, unsigned int)+0x62>
c0023b36:	b0 01                	mov    al,0x1
c0023b38:	eb 02                	jmp    c0023b3c <IDE::polling(unsigned char, unsigned int)+0x62>
c0023b3a:	b0 02                	mov    al,0x2
c0023b3c:	5b                   	pop    ebx
c0023b3d:	5e                   	pop    esi
c0023b3e:	5f                   	pop    edi
c0023b3f:	c3                   	ret    

c0023b40 <SATABus::close(int, int, void*)>:
c0023b40:	31 c0                	xor    eax,eax
c0023b42:	c3                   	ret    
c0023b43:	90                   	nop

c0023b44 <SATABus::detect()>:
c0023b44:	c3                   	ret    
c0023b45:	90                   	nop

c0023b46 <SATABus::SATABus()>:
c0023b46:	83 ec 0c             	sub    esp,0xc
c0023b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b4d:	83 ec 08             	sub    esp,0x8
c0023b50:	68 b4 cb 02 c0       	push   0xc002cbb4
c0023b55:	50                   	push   eax
c0023b56:	e8 dd 0a ff ff       	call   c0014638 <HardDiskController::HardDiskController(char const*)>
c0023b5b:	83 c4 10             	add    esp,0x10
c0023b5e:	ba 70 cc 02 c0       	mov    edx,0xc002cc70
c0023b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b67:	89 10                	mov    DWORD PTR [eax],edx
c0023b69:	83 ec 0c             	sub    esp,0xc
c0023b6c:	6a 50                	push   0x50
c0023b6e:	e8 4f c4 fe ff       	call   c000ffc2 <Phys::allocateContiguousPages(int)>
c0023b73:	83 c4 10             	add    esp,0x10
c0023b76:	89 c2                	mov    edx,eax
c0023b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b7c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023b82:	83 ec 0c             	sub    esp,0xc
c0023b85:	6a 50                	push   0x50
c0023b87:	e8 29 e1 fe ff       	call   c0011cb5 <Virt::allocateKernelVirtualPages(int)>
c0023b8c:	83 c4 10             	add    esp,0x10
c0023b8f:	89 c2                	mov    edx,eax
c0023b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b95:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023b9b:	e8 53 e3 fe ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c0023ba0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ba4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023baa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023bae:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023bb4:	83 ec 0c             	sub    esp,0xc
c0023bb7:	6a 03                	push   0x3
c0023bb9:	6a 50                	push   0x50
c0023bbb:	51                   	push   ecx
c0023bbc:	52                   	push   edx
c0023bbd:	50                   	push   eax
c0023bbe:	e8 47 ea fe ff       	call   c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023bc3:	83 c4 20             	add    esp,0x20
c0023bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bca:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bd4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023bda:	83 ec 04             	sub    esp,0x4
c0023bdd:	52                   	push   edx
c0023bde:	50                   	push   eax
c0023bdf:	68 d8 cb 02 c0       	push   0xc002cbd8
c0023be4:	e8 9d f2 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023be9:	83 c4 10             	add    esp,0x10
c0023bec:	90                   	nop
c0023bed:	83 c4 0c             	add    esp,0xc
c0023bf0:	c3                   	ret    
c0023bf1:	90                   	nop

c0023bf2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023bf2:	83 ec 0c             	sub    esp,0xc
c0023bf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023bf9:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023bfc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023bff:	09 c2                	or     edx,eax
c0023c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c05:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c0b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023c0d:	31 c0                	xor    eax,eax
c0023c0f:	c1 e9 08             	shr    ecx,0x8
c0023c12:	83 e1 0f             	and    ecx,0xf
c0023c15:	39 c8                	cmp    eax,ecx
c0023c17:	74 0a                	je     c0023c23 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023c19:	f6 c2 01             	test   dl,0x1
c0023c1c:	74 18                	je     c0023c36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c1e:	d1 ea                	shr    edx,1
c0023c20:	40                   	inc    eax
c0023c21:	eb f2                	jmp    c0023c15 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023c23:	83 ec 0c             	sub    esp,0xc
c0023c26:	68 fc cb 02 c0       	push   0xc002cbfc
c0023c2b:	e8 fb 68 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0023c30:	83 c4 10             	add    esp,0x10
c0023c33:	83 c8 ff             	or     eax,0xffffffff
c0023c36:	83 c4 0c             	add    esp,0xc
c0023c39:	c3                   	ret    

c0023c3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023c3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023c3e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023c41:	89 c2                	mov    edx,eax
c0023c43:	c1 ea 08             	shr    edx,0x8
c0023c46:	83 e2 0f             	and    edx,0xf
c0023c49:	fe ca                	dec    dl
c0023c4b:	75 31                	jne    c0023c7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c4d:	83 e0 0f             	and    eax,0xf
c0023c50:	3c 03                	cmp    al,0x3
c0023c52:	75 2a                	jne    c0023c7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c54:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023c57:	b8 02 00 00 00       	mov    eax,0x2
c0023c5c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023c62:	74 1c                	je     c0023c80 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023c64:	b8 04 00 00 00       	mov    eax,0x4
c0023c69:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023c6f:	74 0f                	je     c0023c80 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023c71:	31 c0                	xor    eax,eax
c0023c73:	83 fa 03             	cmp    edx,0x3
c0023c76:	0f 94 c0             	sete   al
c0023c79:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023c7d:	c3                   	ret    
c0023c7e:	31 c0                	xor    eax,eax
c0023c80:	c3                   	ret    
c0023c81:	90                   	nop

c0023c82 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c86:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c89:	0f ba e2 0f          	bt     edx,0xf
c0023c8d:	72 f7                	jb     c0023c86 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023c8f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c92:	83 ca 10             	or     edx,0x10
c0023c95:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c98:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c9b:	83 ca 01             	or     edx,0x1
c0023c9e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ca1:	c3                   	ret    

c0023ca2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023ca6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ca9:	83 e2 fe             	and    edx,0xfffffffe
c0023cac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023caf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cb2:	83 e2 ef             	and    edx,0xffffffef
c0023cb5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023cb8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cbb:	0f ba e2 0e          	bt     edx,0xe
c0023cbf:	72 f7                	jb     c0023cb8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023cc1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cc4:	0f ba e2 0f          	bt     edx,0xf
c0023cc8:	72 ee                	jb     c0023cb8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023cca:	c3                   	ret    
c0023ccb:	90                   	nop

c0023ccc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023ccc:	55                   	push   ebp
c0023ccd:	57                   	push   edi
c0023cce:	56                   	push   esi
c0023ccf:	53                   	push   ebx
c0023cd0:	83 ec 1c             	sub    esp,0x1c
c0023cd3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023cd7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023cdb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023cdf:	53                   	push   ebx
c0023ce0:	89 fd                	mov    ebp,edi
c0023ce2:	56                   	push   esi
c0023ce3:	c1 e5 0a             	shl    ebp,0xa
c0023ce6:	e8 b7 ff ff ff       	call   c0023ca2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023ceb:	83 ec 0c             	sub    esp,0xc
c0023cee:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023cf4:	01 e8                	add    eax,ebp
c0023cf6:	89 03                	mov    DWORD PTR [ebx],eax
c0023cf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023cfa:	68 00 04 00 00       	push   0x400
c0023cff:	6a 00                	push   0x0
c0023d01:	50                   	push   eax
c0023d02:	e8 71 ca fd ff       	call   c0000778 <memset>
c0023d07:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023d0d:	89 fa                	mov    edx,edi
c0023d0f:	01 e8                	add    eax,ebp
c0023d11:	c1 e7 0d             	shl    edi,0xd
c0023d14:	89 03                	mov    DWORD PTR [ebx],eax
c0023d16:	c1 e2 08             	shl    edx,0x8
c0023d19:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023d20:	81 c2 00 80 00 00    	add    edx,0x8000
c0023d26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023d2a:	89 d0                	mov    eax,edx
c0023d2c:	83 c4 1c             	add    esp,0x1c
c0023d2f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023d35:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023d38:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023d3b:	68 00 01 00 00       	push   0x100
c0023d40:	6a 00                	push   0x0
c0023d42:	50                   	push   eax
c0023d43:	e8 30 ca fd ff       	call   c0000778 <memset>
c0023d48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023d4c:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023d52:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023d58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023d5c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023d5f:	83 c4 10             	add    esp,0x10
c0023d62:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023d69:	31 ff                	xor    edi,edi
c0023d6b:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023d71:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023d77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d7b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023d81:	83 c5 20             	add    ebp,0x20
c0023d84:	01 f8                	add    eax,edi
c0023d86:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d89:	52                   	push   edx
c0023d8a:	68 00 01 00 00       	push   0x100
c0023d8f:	6a 00                	push   0x0
c0023d91:	50                   	push   eax
c0023d92:	e8 e1 c9 fd ff       	call   c0000778 <memset>
c0023d97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023d9b:	83 c4 10             	add    esp,0x10
c0023d9e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023da4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023dab:	01 f8                	add    eax,edi
c0023dad:	81 c7 00 01 00 00    	add    edi,0x100
c0023db3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023db6:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023dbc:	75 b3                	jne    c0023d71 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023dbe:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023dc2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023dc6:	83 c4 1c             	add    esp,0x1c
c0023dc9:	5b                   	pop    ebx
c0023dca:	5e                   	pop    esi
c0023dcb:	5f                   	pop    edi
c0023dcc:	5d                   	pop    ebp
c0023dcd:	e9 b0 fe ff ff       	jmp    c0023c82 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023dd2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023dd2:	55                   	push   ebp
c0023dd3:	57                   	push   edi
c0023dd4:	56                   	push   esi
c0023dd5:	53                   	push   ebx
c0023dd6:	31 db                	xor    ebx,ebx
c0023dd8:	83 ec 0c             	sub    esp,0xc
c0023ddb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ddf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023de3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023de6:	f7 c7 01 00 00 00    	test   edi,0x1
c0023dec:	0f 84 aa 00 00 00    	je     c0023e9c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023df2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023df6:	89 d8                	mov    eax,ebx
c0023df8:	c1 e0 07             	shl    eax,0x7
c0023dfb:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023e02:	55                   	push   ebp
c0023e03:	56                   	push   esi
c0023e04:	e8 31 fe ff ff       	call   c0023c3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023e09:	5a                   	pop    edx
c0023e0a:	83 f8 01             	cmp    eax,0x1
c0023e0d:	59                   	pop    ecx
c0023e0e:	75 30                	jne    c0023e40 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023e10:	50                   	push   eax
c0023e11:	50                   	push   eax
c0023e12:	53                   	push   ebx
c0023e13:	68 21 cc 02 c0       	push   0xc002cc21
c0023e18:	e8 69 f0 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023e1d:	83 c4 0c             	add    esp,0xc
c0023e20:	53                   	push   ebx
c0023e21:	55                   	push   ebp
c0023e22:	56                   	push   esi
c0023e23:	e8 a4 fe ff ff       	call   c0023ccc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e28:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023e2f:	e8 0c ba fe ff       	call   c000f840 <malloc>
c0023e34:	89 c5                	mov    ebp,eax
c0023e36:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e39:	e8 60 0d 00 00       	call   c0024b9e <SATA::SATA()>
c0023e3e:	eb 33                	jmp    c0023e73 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023e40:	83 f8 04             	cmp    eax,0x4
c0023e43:	75 47                	jne    c0023e8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023e45:	50                   	push   eax
c0023e46:	50                   	push   eax
c0023e47:	53                   	push   ebx
c0023e48:	68 38 cc 02 c0       	push   0xc002cc38
c0023e4d:	e8 34 f0 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023e52:	83 c4 0c             	add    esp,0xc
c0023e55:	53                   	push   ebx
c0023e56:	55                   	push   ebp
c0023e57:	56                   	push   esi
c0023e58:	e8 6f fe ff ff       	call   c0023ccc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e5d:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023e64:	e8 d7 b9 fe ff       	call   c000f840 <malloc>
c0023e69:	89 c5                	mov    ebp,eax
c0023e6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e6e:	e8 d7 10 00 00       	call   c0024f4a <SATAPI::SATAPI()>
c0023e73:	5a                   	pop    edx
c0023e74:	59                   	pop    ecx
c0023e75:	55                   	push   ebp
c0023e76:	56                   	push   esi
c0023e77:	e8 30 04 ff ff       	call   c00142ac <Device::addChild(Device*)>
c0023e7c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023e7f:	56                   	push   esi
c0023e80:	6a 00                	push   0x0
c0023e82:	53                   	push   ebx
c0023e83:	55                   	push   ebp
c0023e84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023e87:	83 c4 20             	add    esp,0x20
c0023e8a:	eb 10                	jmp    c0023e9c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e8c:	50                   	push   eax
c0023e8d:	50                   	push   eax
c0023e8e:	53                   	push   ebx
c0023e8f:	68 51 cc 02 c0       	push   0xc002cc51
c0023e94:	e8 ed ef fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0023e99:	83 c4 10             	add    esp,0x10
c0023e9c:	d1 ef                	shr    edi,1
c0023e9e:	43                   	inc    ebx
c0023e9f:	83 fb 20             	cmp    ebx,0x20
c0023ea2:	0f 85 3e ff ff ff    	jne    c0023de6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023ea8:	83 c4 0c             	add    esp,0xc
c0023eab:	5b                   	pop    ebx
c0023eac:	5e                   	pop    esi
c0023ead:	5f                   	pop    edi
c0023eae:	5d                   	pop    ebp
c0023eaf:	c3                   	ret    

c0023eb0 <SATABus::open(int, int, void*)>:
c0023eb0:	83 ec 14             	sub    esp,0x14
c0023eb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023eb7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023ebd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023ec3:	52                   	push   edx
c0023ec4:	50                   	push   eax
c0023ec5:	e8 08 ff ff ff       	call   c0023dd2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023eca:	31 c0                	xor    eax,eax
c0023ecc:	83 c4 1c             	add    esp,0x1c
c0023ecf:	c3                   	ret    

c0023ed0 <ATA::close(int, int, void*)>:
c0023ed0:	83 ec 0c             	sub    esp,0xc
c0023ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ed7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023edd:	85 c0                	test   eax,eax
c0023edf:	74 0c                	je     c0023eed <ATA::close(int, int, void*)+0x1d>
c0023ee1:	83 ec 0c             	sub    esp,0xc
c0023ee4:	8b 10                	mov    edx,DWORD PTR [eax]
c0023ee6:	50                   	push   eax
c0023ee7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023eea:	83 c4 10             	add    esp,0x10
c0023eed:	31 c0                	xor    eax,eax
c0023eef:	83 c4 0c             	add    esp,0xc
c0023ef2:	c3                   	ret    
c0023ef3:	90                   	nop

c0023ef4 <ATA::powerSaving(PowerSavingLevel)>:
c0023ef4:	c3                   	ret    
c0023ef5:	90                   	nop

c0023ef6 <ATA::ATA()>:
c0023ef6:	83 ec 0c             	sub    esp,0xc
c0023ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023efd:	83 ec 04             	sub    esp,0x4
c0023f00:	68 00 02 00 00       	push   0x200
c0023f05:	68 39 cd 02 c0       	push   0xc002cd39
c0023f0a:	50                   	push   eax
c0023f0b:	e8 c0 07 ff ff       	call   c00146d0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023f10:	83 c4 10             	add    esp,0x10
c0023f13:	ba bc cc 02 c0       	mov    edx,0xc002ccbc
c0023f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f1c:	89 10                	mov    DWORD PTR [eax],edx
c0023f1e:	90                   	nop
c0023f1f:	83 c4 0c             	add    esp,0xc
c0023f22:	c3                   	ret    
c0023f23:	90                   	nop

c0023f24 <ATA::flush(bool)>:
c0023f24:	53                   	push   ebx
c0023f25:	83 ec 08             	sub    esp,0x8
c0023f28:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023f2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023f31:	19 c0                	sbb    eax,eax
c0023f33:	83 e0 fd             	and    eax,0xfffffffd
c0023f36:	05 ea 00 00 00       	add    eax,0xea
c0023f3b:	50                   	push   eax
c0023f3c:	6a 07                	push   0x7
c0023f3e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f45:	50                   	push   eax
c0023f46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f4c:	e8 dd ef ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f51:	83 c4 0c             	add    esp,0xc
c0023f54:	6a 00                	push   0x0
c0023f56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f5d:	50                   	push   eax
c0023f5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f64:	e8 71 fb ff ff       	call   c0023ada <IDE::polling(unsigned char, unsigned int)>
c0023f69:	83 c4 18             	add    esp,0x18
c0023f6c:	5b                   	pop    ebx
c0023f6d:	c3                   	ret    

c0023f6e <ATA::readyForCommand()>:
c0023f6e:	56                   	push   esi
c0023f6f:	53                   	push   ebx
c0023f70:	31 db                	xor    ebx,ebx
c0023f72:	50                   	push   eax
c0023f73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023f77:	50                   	push   eax
c0023f78:	6a 0c                	push   0xc
c0023f7a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023f81:	50                   	push   eax
c0023f82:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023f88:	e8 61 f0 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c0023f8d:	83 c4 10             	add    esp,0x10
c0023f90:	a8 88                	test   al,0x88
c0023f92:	74 23                	je     c0023fb7 <ATA::readyForCommand()+0x49>
c0023f94:	43                   	inc    ebx
c0023f95:	83 fb 63             	cmp    ebx,0x63
c0023f98:	7e dd                	jle    c0023f77 <ATA::readyForCommand()+0x9>
c0023f9a:	51                   	push   ecx
c0023f9b:	51                   	push   ecx
c0023f9c:	6a 00                	push   0x0
c0023f9e:	68 40 42 0f 00       	push   0xf4240
c0023fa3:	e8 c8 a2 ff ff       	call   c001e270 <nanoSleep(unsigned long long)>
c0023fa8:	83 c4 10             	add    esp,0x10
c0023fab:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023fb1:	75 c4                	jne    c0023f77 <ATA::readyForCommand()+0x9>
c0023fb3:	31 c0                	xor    eax,eax
c0023fb5:	eb 02                	jmp    c0023fb9 <ATA::readyForCommand()+0x4b>
c0023fb7:	b0 01                	mov    al,0x1
c0023fb9:	5a                   	pop    edx
c0023fba:	5b                   	pop    ebx
c0023fbb:	5e                   	pop    esi
c0023fbc:	c3                   	ret    
c0023fbd:	90                   	nop

c0023fbe <ATA::access(unsigned long long, int, void*, bool)>:
c0023fbe:	55                   	push   ebp
c0023fbf:	57                   	push   edi
c0023fc0:	56                   	push   esi
c0023fc1:	53                   	push   ebx
c0023fc2:	83 ec 2c             	sub    esp,0x2c
c0023fc5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023fc9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023fcd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023fd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023fd5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023fd9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023fdd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023fe1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023fe7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023feb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023ff1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ff5:	c1 e0 06             	shl    eax,0x6
c0023ff8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024000:	74 5d                	je     c002405f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024002:	89 fa                	mov    edx,edi
c0024004:	89 f0                	mov    eax,esi
c0024006:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002400a:	c1 ea 1c             	shr    edx,0x1c
c002400d:	89 d1                	mov    ecx,edx
c002400f:	09 c1                	or     ecx,eax
c0024011:	74 25                	je     c0024038 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024013:	31 ed                	xor    ebp,ebp
c0024015:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002401c:	89 fa                	mov    edx,edi
c002401e:	89 f0                	mov    eax,esi
c0024020:	0f ad d0             	shrd   eax,edx,cl
c0024023:	d3 ea                	shr    edx,cl
c0024025:	f6 c1 20             	test   cl,0x20
c0024028:	74 02                	je     c002402c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002402a:	89 d0                	mov    eax,edx
c002402c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024030:	45                   	inc    ebp
c0024031:	83 fd 06             	cmp    ebp,0x6
c0024034:	75 df                	jne    c0024015 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024036:	eb 76                	jmp    c00240ae <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024038:	89 f0                	mov    eax,esi
c002403a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002403f:	89 fa                	mov    edx,edi
c0024041:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024048:	0f ac d0 10          	shrd   eax,edx,0x10
c002404c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024051:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024055:	c1 ee 18             	shr    esi,0x18
c0024058:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002405d:	eb 56                	jmp    c00240b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002405f:	6a 00                	push   0x0
c0024061:	6a 3f                	push   0x3f
c0024063:	57                   	push   edi
c0024064:	56                   	push   esi
c0024065:	e8 92 29 00 00       	call   c00269fc <__umoddi3>
c002406a:	83 c4 10             	add    esp,0x10
c002406d:	40                   	inc    eax
c002406e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024072:	6a 00                	push   0x0
c0024074:	68 f0 03 00 00       	push   0x3f0
c0024079:	57                   	push   edi
c002407a:	56                   	push   esi
c002407b:	e8 7c 28 00 00       	call   c00268fc <__udivdi3>
c0024080:	83 c4 10             	add    esp,0x10
c0024083:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024088:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002408f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024094:	6a 00                	push   0x0
c0024096:	6a 3f                	push   0x3f
c0024098:	57                   	push   edi
c0024099:	56                   	push   esi
c002409a:	e8 5d 28 00 00       	call   c00268fc <__udivdi3>
c002409f:	83 c4 10             	add    esp,0x10
c00240a2:	89 c6                	mov    esi,eax
c00240a4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00240a9:	83 e6 0f             	and    esi,0xf
c00240ac:	eb 07                	jmp    c00240b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00240ae:	31 f6                	xor    esi,esi
c00240b0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00240b5:	bf 01 00 00 00       	mov    edi,0x1
c00240ba:	50                   	push   eax
c00240bb:	6a 00                	push   0x0
c00240bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c4:	50                   	push   eax
c00240c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00240c9:	e8 6c f0 ff ff       	call   c002313a <IDE::enableIRQs(unsigned char, bool)>
c00240ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240d1:	e8 98 fe ff ff       	call   c0023f6e <ATA::readyForCommand()>
c00240d6:	83 c4 10             	add    esp,0x10
c00240d9:	84 c0                	test   al,al
c00240db:	0f 84 5a 02 00 00    	je     c002433b <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00240e1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00240e7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00240ed:	c1 e0 04             	shl    eax,0x4
c00240f0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00240f7:	09 c6                	or     esi,eax
c00240f9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00240fe:	75 05                	jne    c0024105 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024100:	83 ce a0             	or     esi,0xffffffa0
c0024103:	eb 03                	jmp    c0024108 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024105:	83 ce e0             	or     esi,0xffffffe0
c0024108:	89 f0                	mov    eax,esi
c002410a:	0f b6 f0             	movzx  esi,al
c002410d:	56                   	push   esi
c002410e:	6a 06                	push   0x6
c0024110:	51                   	push   ecx
c0024111:	52                   	push   edx
c0024112:	e8 17 ee ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024117:	83 c4 10             	add    esp,0x10
c002411a:	6a 00                	push   0x0
c002411c:	6a 01                	push   0x1
c002411e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024125:	50                   	push   eax
c0024126:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002412c:	e8 fd ed ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024131:	83 c4 10             	add    esp,0x10
c0024134:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024139:	75 6e                	jne    c00241a9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002413b:	6a 00                	push   0x0
c002413d:	6a 08                	push   0x8
c002413f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024146:	50                   	push   eax
c0024147:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002414d:	e8 dc ed ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024152:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024157:	50                   	push   eax
c0024158:	6a 09                	push   0x9
c002415a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024161:	50                   	push   eax
c0024162:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024168:	e8 c1 ed ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002416d:	83 c4 20             	add    esp,0x20
c0024170:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024175:	50                   	push   eax
c0024176:	6a 0a                	push   0xa
c0024178:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002417f:	50                   	push   eax
c0024180:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024186:	e8 a3 ed ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002418b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024190:	50                   	push   eax
c0024191:	6a 0b                	push   0xb
c0024193:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002419a:	50                   	push   eax
c002419b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241a1:	e8 88 ed ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241a6:	83 c4 20             	add    esp,0x20
c00241a9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00241ae:	50                   	push   eax
c00241af:	6a 02                	push   0x2
c00241b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241b8:	50                   	push   eax
c00241b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241bf:	e8 6a ed ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241c4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00241c9:	50                   	push   eax
c00241ca:	6a 03                	push   0x3
c00241cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241d3:	50                   	push   eax
c00241d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241da:	e8 4f ed ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241df:	83 c4 20             	add    esp,0x20
c00241e2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00241e7:	50                   	push   eax
c00241e8:	6a 04                	push   0x4
c00241ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241f1:	50                   	push   eax
c00241f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241f8:	e8 31 ed ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024202:	50                   	push   eax
c0024203:	6a 05                	push   0x5
c0024205:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002420c:	50                   	push   eax
c002420d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024213:	e8 16 ed ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024218:	83 c4 20             	add    esp,0x20
c002421b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024220:	0f 94 c0             	sete   al
c0024223:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024228:	74 09                	je     c0024233 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002422a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024231:	eb 07                	jmp    c002423a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024233:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002423a:	0f b6 c0             	movzx  eax,al
c002423d:	50                   	push   eax
c002423e:	6a 07                	push   0x7
c0024240:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024247:	50                   	push   eax
c0024248:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002424e:	e8 db ec ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024253:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024257:	83 c4 10             	add    esp,0x10
c002425a:	85 f6                	test   esi,esi
c002425c:	0f 84 ba 00 00 00    	je     c002431c <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024262:	50                   	push   eax
c0024263:	6a 01                	push   0x1
c0024265:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002426c:	50                   	push   eax
c002426d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024273:	e8 62 f8 ff ff       	call   c0023ada <IDE::polling(unsigned char, unsigned int)>
c0024278:	83 c4 10             	add    esp,0x10
c002427b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024281:	84 c0                	test   al,al
c0024283:	74 2c                	je     c00242b1 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024285:	0f b6 f8             	movzx  edi,al
c0024288:	0f b6 d2             	movzx  edx,dl
c002428b:	57                   	push   edi
c002428c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024293:	50                   	push   eax
c0024294:	52                   	push   edx
c0024295:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002429b:	e8 a4 f6 ff ff       	call   c0023944 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00242a0:	c7 04 24 94 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc94
c00242a7:	e8 da eb fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00242ac:	e9 87 00 00 00       	jmp    c0024338 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00242b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00242b6:	74 33                	je     c00242eb <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00242b8:	31 ed                	xor    ebp,ebp
c00242ba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00242be:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00242c2:	50                   	push   eax
c00242c3:	50                   	push   eax
c00242c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242cb:	50                   	push   eax
c00242cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242d2:	e8 45 ec ff ff       	call   c0022f1c <IDE::getBase(unsigned char)>
c00242d7:	89 c2                	mov    edx,eax
c00242d9:	89 f8                	mov    eax,edi
c00242db:	66 ef                	out    dx,ax
c00242dd:	45                   	inc    ebp
c00242de:	83 c4 10             	add    esp,0x10
c00242e1:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00242e7:	75 d1                	jne    c00242ba <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00242e9:	eb 23                	jmp    c002430e <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00242eb:	0f b6 d2             	movzx  edx,dl
c00242ee:	51                   	push   ecx
c00242ef:	51                   	push   ecx
c00242f0:	52                   	push   edx
c00242f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242f7:	e8 20 ec ff ff       	call   c0022f1c <IDE::getBase(unsigned char)>
c00242fc:	b9 00 01 00 00       	mov    ecx,0x100
c0024301:	89 c2                	mov    edx,eax
c0024303:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024307:	fc                   	cld    
c0024308:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002430b:	83 c4 10             	add    esp,0x10
c002430e:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024316:	4e                   	dec    esi
c0024317:	e9 3e ff ff ff       	jmp    c002425a <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002431c:	31 ff                	xor    edi,edi
c002431e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024323:	74 16                	je     c002433b <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024325:	50                   	push   eax
c0024326:	50                   	push   eax
c0024327:	31 c0                	xor    eax,eax
c0024329:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002432e:	0f 94 c0             	sete   al
c0024331:	50                   	push   eax
c0024332:	53                   	push   ebx
c0024333:	e8 ec fb ff ff       	call   c0023f24 <ATA::flush(bool)>
c0024338:	83 c4 10             	add    esp,0x10
c002433b:	83 c4 2c             	add    esp,0x2c
c002433e:	89 f8                	mov    eax,edi
c0024340:	5b                   	pop    ebx
c0024341:	5e                   	pop    esi
c0024342:	5f                   	pop    edi
c0024343:	5d                   	pop    ebp
c0024344:	c3                   	ret    
c0024345:	90                   	nop

c0024346 <ATA::read(unsigned long long, int, void*)>:
c0024346:	57                   	push   edi
c0024347:	b8 04 00 00 00       	mov    eax,0x4
c002434c:	56                   	push   esi
c002434d:	53                   	push   ebx
c002434e:	83 ec 10             	sub    esp,0x10
c0024351:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024355:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024359:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002435c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024360:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024364:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002436a:	77 3b                	ja     c00243a7 <ATA::read(unsigned long long, int, void*)+0x61>
c002436c:	b8 06 00 00 00       	mov    eax,0x6
c0024371:	85 d2                	test   edx,edx
c0024373:	74 32                	je     c00243a7 <ATA::read(unsigned long long, int, void*)+0x61>
c0024375:	50                   	push   eax
c0024376:	50                   	push   eax
c0024377:	6a 00                	push   0x0
c0024379:	52                   	push   edx
c002437a:	53                   	push   ebx
c002437b:	57                   	push   edi
c002437c:	56                   	push   esi
c002437d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024381:	e8 38 fc ff ff       	call   c0023fbe <ATA::access(unsigned long long, int, void*, bool)>
c0024386:	83 c4 20             	add    esp,0x20
c0024389:	85 c0                	test   eax,eax
c002438b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002438f:	75 11                	jne    c00243a2 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024391:	01 1d 48 26 03 c0    	add    DWORD PTR ds:0xc0032648,ebx
c0024397:	e8 f4 c5 fe ff       	call   c0010990 <VgaText::updateDiskUsage()>
c002439c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243a0:	eb 05                	jmp    c00243a7 <ATA::read(unsigned long long, int, void*)+0x61>
c00243a2:	b8 01 00 00 00       	mov    eax,0x1
c00243a7:	83 c4 10             	add    esp,0x10
c00243aa:	5b                   	pop    ebx
c00243ab:	5e                   	pop    esi
c00243ac:	5f                   	pop    edi
c00243ad:	c3                   	ret    

c00243ae <ATA::write(unsigned long long, int, void*)>:
c00243ae:	57                   	push   edi
c00243af:	b8 04 00 00 00       	mov    eax,0x4
c00243b4:	56                   	push   esi
c00243b5:	53                   	push   ebx
c00243b6:	83 ec 10             	sub    esp,0x10
c00243b9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00243bd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00243c1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00243c4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00243c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00243cc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00243d2:	77 3b                	ja     c002440f <ATA::write(unsigned long long, int, void*)+0x61>
c00243d4:	b8 06 00 00 00       	mov    eax,0x6
c00243d9:	85 d2                	test   edx,edx
c00243db:	74 32                	je     c002440f <ATA::write(unsigned long long, int, void*)+0x61>
c00243dd:	50                   	push   eax
c00243de:	50                   	push   eax
c00243df:	6a 01                	push   0x1
c00243e1:	52                   	push   edx
c00243e2:	53                   	push   ebx
c00243e3:	57                   	push   edi
c00243e4:	56                   	push   esi
c00243e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00243e9:	e8 d0 fb ff ff       	call   c0023fbe <ATA::access(unsigned long long, int, void*, bool)>
c00243ee:	83 c4 20             	add    esp,0x20
c00243f1:	85 c0                	test   eax,eax
c00243f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243f7:	75 11                	jne    c002440a <ATA::write(unsigned long long, int, void*)+0x5c>
c00243f9:	01 1d 44 26 03 c0    	add    DWORD PTR ds:0xc0032644,ebx
c00243ff:	e8 8c c5 fe ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0024404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024408:	eb 05                	jmp    c002440f <ATA::write(unsigned long long, int, void*)+0x61>
c002440a:	b8 01 00 00 00       	mov    eax,0x1
c002440f:	83 c4 10             	add    esp,0x10
c0024412:	5b                   	pop    ebx
c0024413:	5e                   	pop    esi
c0024414:	5f                   	pop    edi
c0024415:	c3                   	ret    

c0024416 <ATA::detectCHS()>:
c0024416:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002441a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024420:	c1 e0 06             	shl    eax,0x6
c0024423:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024429:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024433:	c7 44 24 04 9f cc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cc9f
c002443b:	e9 eb 60 ff ff       	jmp    c001a52b <Krnl::panic(char const*)>

c0024440 <ATA::open(int, int, void*)>:
c0024440:	53                   	push   ebx
c0024441:	83 ec 08             	sub    esp,0x8
c0024444:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024448:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002444c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024450:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024456:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002445c:	c1 e0 06             	shl    eax,0x6
c002445f:	01 d0                	add    eax,edx
c0024461:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024468:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002446e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024475:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002447f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024485:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002448c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024493:	75 0c                	jne    c00244a1 <ATA::open(int, int, void*)+0x61>
c0024495:	83 ec 0c             	sub    esp,0xc
c0024498:	53                   	push   ebx
c0024499:	e8 78 ff ff ff       	call   c0024416 <ATA::detectCHS()>
c002449e:	83 c4 10             	add    esp,0x10
c00244a1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00244a7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00244ad:	c1 e0 06             	shl    eax,0x6
c00244b0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00244b7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00244c1:	d1 e8                	shr    eax,1
c00244c3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00244c9:	6a 04                	push   0x4
c00244cb:	6a 0c                	push   0xc
c00244cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244d4:	50                   	push   eax
c00244d5:	52                   	push   edx
c00244d6:	e8 53 ea ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244db:	90                   	nop
c00244dc:	90                   	nop
c00244dd:	6a 00                	push   0x0
c00244df:	6a 0c                	push   0xc
c00244e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244e8:	50                   	push   eax
c00244e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244ef:	e8 3a ea ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244f4:	83 c4 14             	add    esp,0x14
c00244f7:	53                   	push   ebx
c00244f8:	e8 3b 02 ff ff       	call   c0014738 <PhysicalDisk::startCache()>
c00244fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024500:	e8 a9 23 ff ff       	call   c00168ae <createPartitionsForDisk(PhysicalDisk*)>
c0024505:	31 c0                	xor    eax,eax
c0024507:	83 c4 18             	add    esp,0x18
c002450a:	5b                   	pop    ebx
c002450b:	c3                   	ret    

c002450c <ATAPI::write(unsigned long long, int, void*)>:
c002450c:	b8 03 00 00 00       	mov    eax,0x3
c0024511:	c3                   	ret    

c0024512 <ATAPI::close(int, int, void*)>:
c0024512:	83 ec 0c             	sub    esp,0xc
c0024515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024519:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002451f:	85 c0                	test   eax,eax
c0024521:	74 0c                	je     c002452f <ATAPI::close(int, int, void*)+0x1d>
c0024523:	83 ec 0c             	sub    esp,0xc
c0024526:	8b 10                	mov    edx,DWORD PTR [eax]
c0024528:	50                   	push   eax
c0024529:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002452c:	83 c4 10             	add    esp,0x10
c002452f:	31 c0                	xor    eax,eax
c0024531:	83 c4 0c             	add    esp,0xc
c0024534:	c3                   	ret    
c0024535:	90                   	nop

c0024536 <ATAPI::ATAPI()>:
c0024536:	83 ec 0c             	sub    esp,0xc
c0024539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002453d:	83 ec 04             	sub    esp,0x4
c0024540:	68 00 08 00 00       	push   0x800
c0024545:	68 d9 cd 02 c0       	push   0xc002cdd9
c002454a:	50                   	push   eax
c002454b:	e8 80 01 ff ff       	call   c00146d0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024550:	83 c4 10             	add    esp,0x10
c0024553:	ba f4 cc 02 c0       	mov    edx,0xc002ccf4
c0024558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002455c:	89 10                	mov    DWORD PTR [eax],edx
c002455e:	90                   	nop
c002455f:	83 c4 0c             	add    esp,0xc
c0024562:	c3                   	ret    
c0024563:	90                   	nop

c0024564 <ATAPI::readyForCommand()>:
c0024564:	56                   	push   esi
c0024565:	53                   	push   ebx
c0024566:	31 db                	xor    ebx,ebx
c0024568:	50                   	push   eax
c0024569:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002456d:	50                   	push   eax
c002456e:	6a 0c                	push   0xc
c0024570:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024577:	50                   	push   eax
c0024578:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002457e:	e8 6b ea ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c0024583:	83 c4 10             	add    esp,0x10
c0024586:	a8 88                	test   al,0x88
c0024588:	74 23                	je     c00245ad <ATAPI::readyForCommand()+0x49>
c002458a:	43                   	inc    ebx
c002458b:	83 fb 63             	cmp    ebx,0x63
c002458e:	7e dd                	jle    c002456d <ATAPI::readyForCommand()+0x9>
c0024590:	51                   	push   ecx
c0024591:	51                   	push   ecx
c0024592:	6a 00                	push   0x0
c0024594:	68 40 42 0f 00       	push   0xf4240
c0024599:	e8 d2 9c ff ff       	call   c001e270 <nanoSleep(unsigned long long)>
c002459e:	83 c4 10             	add    esp,0x10
c00245a1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00245a7:	75 c4                	jne    c002456d <ATAPI::readyForCommand()+0x9>
c00245a9:	31 c0                	xor    eax,eax
c00245ab:	eb 02                	jmp    c00245af <ATAPI::readyForCommand()+0x4b>
c00245ad:	b0 01                	mov    al,0x1
c00245af:	5a                   	pop    edx
c00245b0:	5b                   	pop    ebx
c00245b1:	5e                   	pop    esi
c00245b2:	c3                   	ret    
c00245b3:	90                   	nop

c00245b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00245b4:	55                   	push   ebp
c00245b5:	57                   	push   edi
c00245b6:	56                   	push   esi
c00245b7:	53                   	push   ebx
c00245b8:	83 ec 20             	sub    esp,0x20
c00245bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00245bf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00245c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00245c7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00245cb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00245cf:	6a 01                	push   0x1
c00245d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245d8:	50                   	push   eax
c00245d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245df:	e8 56 eb ff ff       	call   c002313a <IDE::enableIRQs(unsigned char, bool)>
c00245e4:	5e                   	pop    esi
c00245e5:	58                   	pop    eax
c00245e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245ed:	50                   	push   eax
c00245ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245f4:	e8 0f e9 ff ff       	call   c0022f08 <IDE::prepareInterrupt(unsigned char)>
c00245f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00245fc:	e8 63 ff ff ff       	call   c0024564 <ATAPI::readyForCommand()>
c0024601:	83 c4 10             	add    esp,0x10
c0024604:	84 c0                	test   al,al
c0024606:	75 0a                	jne    c0024612 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024608:	bb 01 00 00 00       	mov    ebx,0x1
c002460d:	e9 57 02 00 00       	jmp    c0024869 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024612:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024618:	c1 e0 04             	shl    eax,0x4
c002461b:	0f b6 c0             	movzx  eax,al
c002461e:	50                   	push   eax
c002461f:	6a 06                	push   0x6
c0024621:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024628:	50                   	push   eax
c0024629:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002462f:	e8 fa e8 ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024634:	6a 00                	push   0x0
c0024636:	6a 01                	push   0x1
c0024638:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002463f:	50                   	push   eax
c0024640:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024646:	e8 e3 e8 ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002464b:	83 c4 20             	add    esp,0x20
c002464e:	0f b6 c3             	movzx  eax,bl
c0024651:	0f b6 df             	movzx  ebx,bh
c0024654:	50                   	push   eax
c0024655:	6a 04                	push   0x4
c0024657:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002465e:	50                   	push   eax
c002465f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024665:	e8 c4 e8 ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002466a:	53                   	push   ebx
c002466b:	6a 05                	push   0x5
c002466d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024674:	50                   	push   eax
c0024675:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002467b:	e8 ae e8 ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024680:	83 c4 20             	add    esp,0x20
c0024683:	68 a0 00 00 00       	push   0xa0
c0024688:	6a 07                	push   0x7
c002468a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024691:	50                   	push   eax
c0024692:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024698:	e8 91 e8 ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002469d:	83 c4 0c             	add    esp,0xc
c00246a0:	6a 01                	push   0x1
c00246a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a9:	50                   	push   eax
c00246aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246b0:	e8 25 f4 ff ff       	call   c0023ada <IDE::polling(unsigned char, unsigned int)>
c00246b5:	83 c4 10             	add    esp,0x10
c00246b8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00246be:	84 c0                	test   al,al
c00246c0:	74 23                	je     c00246e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00246c2:	0f b6 d8             	movzx  ebx,al
c00246c5:	0f b6 d2             	movzx  edx,dl
c00246c8:	53                   	push   ebx
c00246c9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00246d0:	50                   	push   eax
c00246d1:	52                   	push   edx
c00246d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246d8:	e8 67 f2 ff ff       	call   c0023944 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00246dd:	83 c4 10             	add    esp,0x10
c00246e0:	e9 84 01 00 00       	jmp    c0024869 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246e5:	0f b6 d2             	movzx  edx,dl
c00246e8:	53                   	push   ebx
c00246e9:	53                   	push   ebx
c00246ea:	52                   	push   edx
c00246eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f1:	e8 26 e8 ff ff       	call   c0022f1c <IDE::getBase(unsigned char)>
c00246f6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00246fa:	b9 06 00 00 00       	mov    ecx,0x6
c00246ff:	89 c2                	mov    edx,eax
c0024701:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024704:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024708:	83 c4 10             	add    esp,0x10
c002470b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024711:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024718:	85 db                	test   ebx,ebx
c002471a:	0f 84 ec 00 00 00    	je     c002480c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024720:	51                   	push   ecx
c0024721:	51                   	push   ecx
c0024722:	52                   	push   edx
c0024723:	50                   	push   eax
c0024724:	e8 73 e9 ff ff       	call   c002309c <IDE::waitInterrupt(unsigned char)>
c0024729:	83 c4 10             	add    esp,0x10
c002472c:	84 c0                	test   al,al
c002472e:	0f 84 d4 fe ff ff    	je     c0024608 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024734:	56                   	push   esi
c0024735:	56                   	push   esi
c0024736:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002473d:	50                   	push   eax
c002473e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024744:	e8 bf e7 ff ff       	call   c0022f08 <IDE::prepareInterrupt(unsigned char)>
c0024749:	83 c4 0c             	add    esp,0xc
c002474c:	6a 04                	push   0x4
c002474e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024755:	50                   	push   eax
c0024756:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002475c:	e8 8d e8 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c0024761:	83 c4 0c             	add    esp,0xc
c0024764:	89 c6                	mov    esi,eax
c0024766:	6a 05                	push   0x5
c0024768:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002476f:	50                   	push   eax
c0024770:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024776:	e8 73 e8 ff ff       	call   c0022fee <IDE::read(unsigned char, unsigned char)>
c002477b:	89 f1                	mov    ecx,esi
c002477d:	0f b6 c0             	movzx  eax,al
c0024780:	0f b6 f1             	movzx  esi,cl
c0024783:	c1 e0 08             	shl    eax,0x8
c0024786:	09 c6                	or     esi,eax
c0024788:	d1 fe                	sar    esi,1
c002478a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002478e:	83 c4 10             	add    esp,0x10
c0024791:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024796:	74 41                	je     c00247d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024798:	31 c9                	xor    ecx,ecx
c002479a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247a0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247a7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00247ab:	75 0a                	jne    c00247b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00247ad:	01 c9                	add    ecx,ecx
c00247af:	01 cd                	add    ebp,ecx
c00247b1:	4b                   	dec    ebx
c00247b2:	e9 54 ff ff ff       	jmp    c002470b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00247b7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00247bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00247c0:	51                   	push   ecx
c00247c1:	51                   	push   ecx
c00247c2:	52                   	push   edx
c00247c3:	50                   	push   eax
c00247c4:	e8 53 e7 ff ff       	call   c0022f1c <IDE::getBase(unsigned char)>
c00247c9:	89 c2                	mov    edx,eax
c00247cb:	89 f0                	mov    eax,esi
c00247cd:	66 ef                	out    dx,ax
c00247cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00247d3:	83 c4 10             	add    esp,0x10
c00247d6:	41                   	inc    ecx
c00247d7:	eb c1                	jmp    c002479a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00247d9:	31 f6                	xor    esi,esi
c00247db:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247e1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247e8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00247ec:	75 06                	jne    c00247f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00247ee:	01 f6                	add    esi,esi
c00247f0:	01 f5                	add    ebp,esi
c00247f2:	eb bd                	jmp    c00247b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00247f4:	51                   	push   ecx
c00247f5:	51                   	push   ecx
c00247f6:	52                   	push   edx
c00247f7:	50                   	push   eax
c00247f8:	e8 1f e7 ff ff       	call   c0022f1c <IDE::getBase(unsigned char)>
c00247fd:	89 c2                	mov    edx,eax
c00247ff:	66 ed                	in     ax,dx
c0024801:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024806:	83 c4 10             	add    esp,0x10
c0024809:	46                   	inc    esi
c002480a:	eb cf                	jmp    c00247db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002480c:	51                   	push   ecx
c002480d:	51                   	push   ecx
c002480e:	52                   	push   edx
c002480f:	50                   	push   eax
c0024810:	e8 87 e8 ff ff       	call   c002309c <IDE::waitInterrupt(unsigned char)>
c0024815:	83 c4 10             	add    esp,0x10
c0024818:	84 c0                	test   al,al
c002481a:	0f 84 e8 fd ff ff    	je     c0024608 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024820:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024825:	52                   	push   edx
c0024826:	52                   	push   edx
c0024827:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002482e:	50                   	push   eax
c002482f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024835:	e8 ce e6 ff ff       	call   c0022f08 <IDE::prepareInterrupt(unsigned char)>
c002483a:	83 c4 10             	add    esp,0x10
c002483d:	50                   	push   eax
c002483e:	50                   	push   eax
c002483f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024846:	50                   	push   eax
c0024847:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002484d:	e8 ca e6 ff ff       	call   c0022f1c <IDE::getBase(unsigned char)>
c0024852:	8d 50 07             	lea    edx,[eax+0x7]
c0024855:	ec                   	in     al,dx
c0024856:	83 c4 10             	add    esp,0x10
c0024859:	a8 88                	test   al,0x88
c002485b:	74 0a                	je     c0024867 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002485d:	4b                   	dec    ebx
c002485e:	75 dd                	jne    c002483d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024860:	bb 02 00 00 00       	mov    ebx,0x2
c0024865:	eb 02                	jmp    c0024869 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024867:	31 db                	xor    ebx,ebx
c0024869:	83 c4 1c             	add    esp,0x1c
c002486c:	89 d8                	mov    eax,ebx
c002486e:	5b                   	pop    ebx
c002486f:	5e                   	pop    esi
c0024870:	5f                   	pop    edi
c0024871:	5d                   	pop    ebp
c0024872:	c3                   	ret    
c0024873:	90                   	nop

c0024874 <ATAPI::diskRemoved()>:
c0024874:	83 ec 18             	sub    esp,0x18
c0024877:	68 e5 cd 02 c0       	push   0xc002cde5
c002487c:	e8 05 e6 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0024881:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024885:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002488c:	83 c4 1c             	add    esp,0x1c
c002488f:	c3                   	ret    

c0024890 <ATAPI::eject()>:
c0024890:	57                   	push   edi
c0024891:	b9 03 00 00 00       	mov    ecx,0x3
c0024896:	53                   	push   ebx
c0024897:	83 ec 14             	sub    esp,0x14
c002489a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002489e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00248a2:	fc                   	cld    
c00248a3:	31 c0                	xor    eax,eax
c00248a5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00248a7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00248ac:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00248b1:	50                   	push   eax
c00248b2:	50                   	push   eax
c00248b3:	6a 00                	push   0x0
c00248b5:	6a 00                	push   0x0
c00248b7:	6a 00                	push   0x0
c00248b9:	6a 02                	push   0x2
c00248bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00248bf:	50                   	push   eax
c00248c0:	53                   	push   ebx
c00248c1:	e8 ee fc ff ff       	call   c00245b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248c6:	83 c4 14             	add    esp,0x14
c00248c9:	53                   	push   ebx
c00248ca:	e8 a5 ff ff ff       	call   c0024874 <ATAPI::diskRemoved()>
c00248cf:	83 c4 24             	add    esp,0x24
c00248d2:	31 c0                	xor    eax,eax
c00248d4:	5b                   	pop    ebx
c00248d5:	5f                   	pop    edi
c00248d6:	c3                   	ret    
c00248d7:	90                   	nop

c00248d8 <ATAPI::diskInserted()>:
c00248d8:	53                   	push   ebx
c00248d9:	83 ec 14             	sub    esp,0x14
c00248dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00248e0:	68 fc cd 02 c0       	push   0xc002cdfc
c00248e5:	e8 9c e5 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00248ea:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00248f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00248f4:	e8 3f fe fe ff       	call   c0014738 <PhysicalDisk::startCache()>
c00248f9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00248fd:	83 c4 18             	add    esp,0x18
c0024900:	5b                   	pop    ebx
c0024901:	e9 a8 1f ff ff       	jmp    c00168ae <createPartitionsForDisk(PhysicalDisk*)>

c0024906 <ATAPI::detectMedia()>:
c0024906:	56                   	push   esi
c0024907:	53                   	push   ebx
c0024908:	83 ec 28             	sub    esp,0x28
c002490b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002490f:	6a 0c                	push   0xc
c0024911:	6a 00                	push   0x0
c0024913:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024917:	56                   	push   esi
c0024918:	e8 5b be fd ff       	call   c0000778 <memset>
c002491d:	58                   	pop    eax
c002491e:	5a                   	pop    edx
c002491f:	6a 00                	push   0x0
c0024921:	6a 00                	push   0x0
c0024923:	6a 00                	push   0x0
c0024925:	6a 00                	push   0x0
c0024927:	56                   	push   esi
c0024928:	53                   	push   ebx
c0024929:	e8 86 fc ff ff       	call   c00245b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002492e:	83 c4 1c             	add    esp,0x1c
c0024931:	6a 0c                	push   0xc
c0024933:	6a 00                	push   0x0
c0024935:	56                   	push   esi
c0024936:	e8 3d be fd ff       	call   c0000778 <memset>
c002493b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024940:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024945:	59                   	pop    ecx
c0024946:	58                   	pop    eax
c0024947:	6a 01                	push   0x1
c0024949:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002494d:	50                   	push   eax
c002494e:	6a 00                	push   0x0
c0024950:	6a 12                	push   0x12
c0024952:	56                   	push   esi
c0024953:	53                   	push   ebx
c0024954:	e8 5b fc ff ff       	call   c00245b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024959:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002495d:	83 c4 20             	add    esp,0x20
c0024960:	83 e0 7f             	and    eax,0x7f
c0024963:	3c 70                	cmp    al,0x70
c0024965:	74 15                	je     c002497c <ATAPI::detectMedia()+0x76>
c0024967:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002496e:	75 0c                	jne    c002497c <ATAPI::detectMedia()+0x76>
c0024970:	83 ec 0c             	sub    esp,0xc
c0024973:	53                   	push   ebx
c0024974:	e8 5f ff ff ff       	call   c00248d8 <ATAPI::diskInserted()>
c0024979:	83 c4 10             	add    esp,0x10
c002497c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024980:	83 e0 0f             	and    eax,0xf
c0024983:	3c 02                	cmp    al,0x2
c0024985:	75 1b                	jne    c00249a2 <ATAPI::detectMedia()+0x9c>
c0024987:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002498c:	75 2d                	jne    c00249bb <ATAPI::detectMedia()+0xb5>
c002498e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024995:	74 24                	je     c00249bb <ATAPI::detectMedia()+0xb5>
c0024997:	83 ec 0c             	sub    esp,0xc
c002499a:	53                   	push   ebx
c002499b:	e8 d4 fe ff ff       	call   c0024874 <ATAPI::diskRemoved()>
c00249a0:	eb 16                	jmp    c00249b8 <ATAPI::detectMedia()+0xb2>
c00249a2:	84 c0                	test   al,al
c00249a4:	75 15                	jne    c00249bb <ATAPI::detectMedia()+0xb5>
c00249a6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249ad:	75 0c                	jne    c00249bb <ATAPI::detectMedia()+0xb5>
c00249af:	83 ec 0c             	sub    esp,0xc
c00249b2:	53                   	push   ebx
c00249b3:	e8 20 ff ff ff       	call   c00248d8 <ATAPI::diskInserted()>
c00249b8:	83 c4 10             	add    esp,0x10
c00249bb:	83 c4 24             	add    esp,0x24
c00249be:	5b                   	pop    ebx
c00249bf:	5e                   	pop    esi
c00249c0:	c3                   	ret    
c00249c1:	90                   	nop

c00249c2 <ATAPI::open(int, int, void*)>:
c00249c2:	53                   	push   ebx
c00249c3:	83 ec 08             	sub    esp,0x8
c00249c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00249ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00249ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00249d2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00249d8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00249de:	c1 e0 06             	shl    eax,0x6
c00249e1:	01 d0                	add    eax,edx
c00249e3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00249ea:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00249f0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00249f7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024a01:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a07:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024a0e:	6a 04                	push   0x4
c0024a10:	6a 0c                	push   0xc
c0024a12:	51                   	push   ecx
c0024a13:	52                   	push   edx
c0024a14:	e8 15 e5 ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a19:	90                   	nop
c0024a1a:	90                   	nop
c0024a1b:	6a 00                	push   0x0
c0024a1d:	6a 0c                	push   0xc
c0024a1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a26:	50                   	push   eax
c0024a27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a2d:	e8 fc e4 ff ff       	call   c0022f2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a32:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024a39:	83 c4 14             	add    esp,0x14
c0024a3c:	53                   	push   ebx
c0024a3d:	e8 c4 fe ff ff       	call   c0024906 <ATAPI::detectMedia()>
c0024a42:	31 c0                	xor    eax,eax
c0024a44:	83 c4 18             	add    esp,0x18
c0024a47:	5b                   	pop    ebx
c0024a48:	c3                   	ret    
c0024a49:	90                   	nop

c0024a4a <ATAPI::read(unsigned long long, int, void*)>:
c0024a4a:	55                   	push   ebp
c0024a4b:	57                   	push   edi
c0024a4c:	56                   	push   esi
c0024a4d:	53                   	push   ebx
c0024a4e:	83 ec 1c             	sub    esp,0x1c
c0024a51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024a55:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a59:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024a5d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024a64:	74 41                	je     c0024aa7 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024a66:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a6a:	b9 03 00 00 00       	mov    ecx,0x3
c0024a6f:	fc                   	cld    
c0024a70:	31 c0                	xor    eax,eax
c0024a72:	86 fb                	xchg   bl,bh
c0024a74:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a76:	c1 c3 10             	rol    ebx,0x10
c0024a79:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024a7e:	89 e8                	mov    eax,ebp
c0024a80:	86 fb                	xchg   bl,bh
c0024a82:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024a86:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024a8a:	50                   	push   eax
c0024a8b:	50                   	push   eax
c0024a8c:	55                   	push   ebp
c0024a8d:	c1 e5 0b             	shl    ebp,0xb
c0024a90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024a94:	6a 00                	push   0x0
c0024a96:	55                   	push   ebp
c0024a97:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a9b:	50                   	push   eax
c0024a9c:	56                   	push   esi
c0024a9d:	e8 12 fb ff ff       	call   c00245b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024aa2:	83 c4 20             	add    esp,0x20
c0024aa5:	eb 1a                	jmp    c0024ac1 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024aa7:	83 ec 0c             	sub    esp,0xc
c0024aaa:	56                   	push   esi
c0024aab:	e8 56 fe ff ff       	call   c0024906 <ATAPI::detectMedia()>
c0024ab0:	83 c4 10             	add    esp,0x10
c0024ab3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024aba:	75 aa                	jne    c0024a66 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024abc:	b8 02 00 00 00       	mov    eax,0x2
c0024ac1:	83 c4 1c             	add    esp,0x1c
c0024ac4:	5b                   	pop    ebx
c0024ac5:	5e                   	pop    esi
c0024ac6:	5f                   	pop    edi
c0024ac7:	5d                   	pop    ebp
c0024ac8:	c3                   	ret    
c0024ac9:	90                   	nop

c0024aca <SATA::close(int, int, void*)>:
c0024aca:	83 ec 0c             	sub    esp,0xc
c0024acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ad1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024ad7:	85 c0                	test   eax,eax
c0024ad9:	74 0c                	je     c0024ae7 <SATA::close(int, int, void*)+0x1d>
c0024adb:	83 ec 0c             	sub    esp,0xc
c0024ade:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ae0:	50                   	push   eax
c0024ae1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ae4:	83 c4 10             	add    esp,0x10
c0024ae7:	31 c0                	xor    eax,eax
c0024ae9:	83 c4 0c             	add    esp,0xc
c0024aec:	c3                   	ret    
c0024aed:	90                   	nop

c0024aee <SATA::powerSaving(PowerSavingLevel)>:
c0024aee:	c3                   	ret    
c0024aef:	90                   	nop

c0024af0 <SATA::open(int, int, void*)>:
c0024af0:	56                   	push   esi
c0024af1:	53                   	push   ebx
c0024af2:	50                   	push   eax
c0024af3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024af7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024afb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024b05:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b0b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b19:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b23:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024b29:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024b30:	e8 a8 b3 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024b35:	89 c6                	mov    esi,eax
c0024b37:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b3d:	81 c6 00 10 00 00    	add    esi,0x1000
c0024b43:	e8 95 b3 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024b48:	39 c6                	cmp    esi,eax
c0024b4a:	74 10                	je     c0024b5c <SATA::open(int, int, void*)+0x6c>
c0024b4c:	83 ec 0c             	sub    esp,0xc
c0024b4f:	68 24 cd 02 c0       	push   0xc002cd24
c0024b54:	e8 d2 59 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0024b59:	83 c4 10             	add    esp,0x10
c0024b5c:	83 ec 0c             	sub    esp,0xc
c0024b5f:	6a 02                	push   0x2
c0024b61:	e8 4f d1 fe ff       	call   c0011cb5 <Virt::allocateKernelVirtualPages(int)>
c0024b66:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b6c:	e8 82 d3 fe ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c0024b71:	6a 03                	push   0x3
c0024b73:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024b79:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024b7f:	50                   	push   eax
c0024b80:	e8 91 d7 fe ff       	call   c0012316 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024b85:	83 c4 14             	add    esp,0x14
c0024b88:	53                   	push   ebx
c0024b89:	e8 aa fb fe ff       	call   c0014738 <PhysicalDisk::startCache()>
c0024b8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b91:	e8 18 1d ff ff       	call   c00168ae <createPartitionsForDisk(PhysicalDisk*)>
c0024b96:	83 c4 14             	add    esp,0x14
c0024b99:	31 c0                	xor    eax,eax
c0024b9b:	5b                   	pop    ebx
c0024b9c:	5e                   	pop    esi
c0024b9d:	c3                   	ret    

c0024b9e <SATA::SATA()>:
c0024b9e:	83 ec 0c             	sub    esp,0xc
c0024ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ba5:	83 ec 04             	sub    esp,0x4
c0024ba8:	68 00 02 00 00       	push   0x200
c0024bad:	68 38 cd 02 c0       	push   0xc002cd38
c0024bb2:	50                   	push   eax
c0024bb3:	e8 18 fb fe ff       	call   c00146d0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024bb8:	83 c4 10             	add    esp,0x10
c0024bbb:	ba a8 cd 02 c0       	mov    edx,0xc002cda8
c0024bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bc4:	89 10                	mov    DWORD PTR [eax],edx
c0024bc6:	90                   	nop
c0024bc7:	83 c4 0c             	add    esp,0xc
c0024bca:	c3                   	ret    
c0024bcb:	90                   	nop

c0024bcc <SATA::access(unsigned long long, int, void*, bool)>:
c0024bcc:	55                   	push   ebp
c0024bcd:	57                   	push   edi
c0024bce:	56                   	push   esi
c0024bcf:	53                   	push   ebx
c0024bd0:	83 ec 2c             	sub    esp,0x2c
c0024bd3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024bd7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024bdb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024bdf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024be3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024be7:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024bec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024bf0:	7e 10                	jle    c0024c02 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024bf2:	83 ec 0c             	sub    esp,0xc
c0024bf5:	68 48 cd 02 c0       	push   0xc002cd48
c0024bfa:	e8 2c 59 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0024bff:	83 c4 10             	add    esp,0x10
c0024c02:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024c08:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024c0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c18:	89 f0                	mov    eax,esi
c0024c1a:	c1 e0 07             	shl    eax,0x7
c0024c1d:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024c21:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024c2b:	53                   	push   ebx
c0024c2c:	8d 46 02             	lea    eax,[esi+0x2]
c0024c2f:	53                   	push   ebx
c0024c30:	c1 e0 07             	shl    eax,0x7
c0024c33:	bb 01 00 00 00       	mov    ebx,0x1
c0024c38:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024c3c:	50                   	push   eax
c0024c3d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024c43:	e8 aa ef ff ff       	call   c0023bf2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024c48:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024c4c:	83 c4 10             	add    esp,0x10
c0024c4f:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024c54:	0f 84 ce 01 00 00    	je     c0024e28 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024c5a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024c5e:	c1 e0 09             	shl    eax,0x9
c0024c61:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024c66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024c6a:	74 17                	je     c0024c83 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024c6c:	51                   	push   ecx
c0024c6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c71:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024c75:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024c7b:	e8 c4 ba fd ff       	call   c0000744 <memcpy>
c0024c80:	83 c4 10             	add    esp,0x10
c0024c83:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c89:	8d 46 02             	lea    eax,[esi+0x2]
c0024c8c:	c1 e0 07             	shl    eax,0x7
c0024c8f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024c93:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c95:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024c9b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ca1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024ca5:	c1 e1 05             	shl    ecx,0x5
c0024ca8:	01 c8                	add    eax,ecx
c0024caa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024cae:	8a 18                	mov    bl,BYTE PTR [eax]
c0024cb0:	83 e1 01             	and    ecx,0x1
c0024cb3:	83 e3 bf             	and    ebx,0xffffffbf
c0024cb6:	c1 e1 06             	shl    ecx,0x6
c0024cb9:	09 d9                	or     ecx,ebx
c0024cbb:	88 08                	mov    BYTE PTR [eax],cl
c0024cbd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024cbf:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024cc5:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024ccb:	89 08                	mov    DWORD PTR [eax],ecx
c0024ccd:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024cd3:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024cd9:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024cdf:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024ce2:	52                   	push   edx
c0024ce3:	68 90 00 00 00       	push   0x90
c0024ce8:	6a 00                	push   0x0
c0024cea:	53                   	push   ebx
c0024ceb:	e8 88 ba fd ff       	call   c0000778 <memset>
c0024cf0:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024cf6:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024cfa:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024d00:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024d08:	83 c4 10             	add    esp,0x10
c0024d0b:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024d0e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024d14:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024d1a:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024d1f:	09 c8                	or     eax,ecx
c0024d21:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024d27:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024d2a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024d31:	66 25 00 7f          	and    ax,0x7f00
c0024d35:	66 0d 27 80          	or     ax,0x8027
c0024d39:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024d3e:	66 89 03             	mov    WORD PTR [ebx],ax
c0024d41:	19 c0                	sbb    eax,eax
c0024d43:	83 e0 f0             	and    eax,0xfffffff0
c0024d46:	83 c0 35             	add    eax,0x35
c0024d49:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024d4c:	89 f8                	mov    eax,edi
c0024d4e:	c1 e8 10             	shr    eax,0x10
c0024d51:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024d54:	89 f8                	mov    eax,edi
c0024d56:	c1 e8 18             	shr    eax,0x18
c0024d59:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024d5c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024d60:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024d63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d67:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024d6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d6e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024d72:	89 f3                	mov    ebx,esi
c0024d74:	31 c0                	xor    eax,eax
c0024d76:	c1 e3 07             	shl    ebx,0x7
c0024d79:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024d7d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024d83:	80 e1 88             	and    cl,0x88
c0024d86:	74 0a                	je     c0024d92 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024d88:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d8d:	74 0a                	je     c0024d99 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024d8f:	40                   	inc    eax
c0024d90:	eb eb                	jmp    c0024d7d <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024d92:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d97:	75 0a                	jne    c0024da3 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024d99:	83 ec 0c             	sub    esp,0xc
c0024d9c:	68 81 cd 02 c0       	push   0xc002cd81
c0024da1:	eb 56                	jmp    c0024df9 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024da3:	b8 01 00 00 00       	mov    eax,0x1
c0024da8:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024dac:	c1 e6 07             	shl    esi,0x7
c0024daf:	d3 e0                	shl    eax,cl
c0024db1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024db5:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024dbb:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024dc1:	85 c8                	test   eax,ecx
c0024dc3:	74 20                	je     c0024de5 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024dc5:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024dcb:	0f ba e1 1e          	bt     ecx,0x1e
c0024dcf:	73 ea                	jae    c0024dbb <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024dd1:	83 ec 0c             	sub    esp,0xc
c0024dd4:	31 db                	xor    ebx,ebx
c0024dd6:	68 8f cd 02 c0       	push   0xc002cd8f
c0024ddb:	e8 4b 57 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0024de0:	83 c4 10             	add    esp,0x10
c0024de3:	eb 43                	jmp    c0024e28 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024de5:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024deb:	0f ba e0 1e          	bt     eax,0x1e
c0024def:	73 17                	jae    c0024e08 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024df1:	83 ec 0c             	sub    esp,0xc
c0024df4:	68 8f cd 02 c0       	push   0xc002cd8f
c0024df9:	e8 2d 57 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0024dfe:	bb 01 00 00 00       	mov    ebx,0x1
c0024e03:	83 c4 10             	add    esp,0x10
c0024e06:	eb 20                	jmp    c0024e28 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e08:	31 db                	xor    ebx,ebx
c0024e0a:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e0f:	75 17                	jne    c0024e28 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e11:	50                   	push   eax
c0024e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e16:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024e1c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024e20:	e8 1f b9 fd ff       	call   c0000744 <memcpy>
c0024e25:	83 c4 10             	add    esp,0x10
c0024e28:	83 c4 2c             	add    esp,0x2c
c0024e2b:	89 d8                	mov    eax,ebx
c0024e2d:	5b                   	pop    ebx
c0024e2e:	5e                   	pop    esi
c0024e2f:	5f                   	pop    edi
c0024e30:	5d                   	pop    ebp
c0024e31:	c3                   	ret    

c0024e32 <SATA::read(unsigned long long, int, void*)>:
c0024e32:	57                   	push   edi
c0024e33:	b8 04 00 00 00       	mov    eax,0x4
c0024e38:	56                   	push   esi
c0024e39:	53                   	push   ebx
c0024e3a:	83 ec 10             	sub    esp,0x10
c0024e3d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024e41:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024e45:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024e48:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024e4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024e50:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024e56:	77 3b                	ja     c0024e93 <SATA::read(unsigned long long, int, void*)+0x61>
c0024e58:	b8 06 00 00 00       	mov    eax,0x6
c0024e5d:	85 d2                	test   edx,edx
c0024e5f:	74 32                	je     c0024e93 <SATA::read(unsigned long long, int, void*)+0x61>
c0024e61:	50                   	push   eax
c0024e62:	50                   	push   eax
c0024e63:	6a 00                	push   0x0
c0024e65:	52                   	push   edx
c0024e66:	53                   	push   ebx
c0024e67:	57                   	push   edi
c0024e68:	56                   	push   esi
c0024e69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024e6d:	e8 5a fd ff ff       	call   c0024bcc <SATA::access(unsigned long long, int, void*, bool)>
c0024e72:	83 c4 20             	add    esp,0x20
c0024e75:	85 c0                	test   eax,eax
c0024e77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e7b:	75 11                	jne    c0024e8e <SATA::read(unsigned long long, int, void*)+0x5c>
c0024e7d:	01 1d 48 26 03 c0    	add    DWORD PTR ds:0xc0032648,ebx
c0024e83:	e8 08 bb fe ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0024e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e8c:	eb 05                	jmp    c0024e93 <SATA::read(unsigned long long, int, void*)+0x61>
c0024e8e:	b8 01 00 00 00       	mov    eax,0x1
c0024e93:	83 c4 10             	add    esp,0x10
c0024e96:	5b                   	pop    ebx
c0024e97:	5e                   	pop    esi
c0024e98:	5f                   	pop    edi
c0024e99:	c3                   	ret    

c0024e9a <SATA::write(unsigned long long, int, void*)>:
c0024e9a:	55                   	push   ebp
c0024e9b:	b8 04 00 00 00       	mov    eax,0x4
c0024ea0:	57                   	push   edi
c0024ea1:	56                   	push   esi
c0024ea2:	53                   	push   ebx
c0024ea3:	83 ec 1c             	sub    esp,0x1c
c0024ea6:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024eaa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024eae:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024eb1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024eb5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024eb9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024ebf:	77 56                	ja     c0024f17 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024ec1:	b8 06 00 00 00       	mov    eax,0x6
c0024ec6:	85 ff                	test   edi,edi
c0024ec8:	74 4d                	je     c0024f17 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024eca:	89 ee                	mov    esi,ebp
c0024ecc:	c1 e6 09             	shl    esi,0x9
c0024ecf:	01 fe                	add    esi,edi
c0024ed1:	89 c8                	mov    eax,ecx
c0024ed3:	89 da                	mov    edx,ebx
c0024ed5:	83 c0 01             	add    eax,0x1
c0024ed8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024edc:	83 d2 00             	adc    edx,0x0
c0024edf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024ee3:	50                   	push   eax
c0024ee4:	50                   	push   eax
c0024ee5:	6a 01                	push   0x1
c0024ee7:	57                   	push   edi
c0024ee8:	81 c7 00 02 00 00    	add    edi,0x200
c0024eee:	6a 01                	push   0x1
c0024ef0:	53                   	push   ebx
c0024ef1:	51                   	push   ecx
c0024ef2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024ef6:	e8 d1 fc ff ff       	call   c0024bcc <SATA::access(unsigned long long, int, void*, bool)>
c0024efb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024eff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f03:	83 c4 20             	add    esp,0x20
c0024f06:	39 f7                	cmp    edi,esi
c0024f08:	75 c7                	jne    c0024ed1 <SATA::write(unsigned long long, int, void*)+0x37>
c0024f0a:	01 2d 44 26 03 c0    	add    DWORD PTR ds:0xc0032644,ebp
c0024f10:	e8 7b ba fe ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0024f15:	31 c0                	xor    eax,eax
c0024f17:	83 c4 1c             	add    esp,0x1c
c0024f1a:	5b                   	pop    ebx
c0024f1b:	5e                   	pop    esi
c0024f1c:	5f                   	pop    edi
c0024f1d:	5d                   	pop    ebp
c0024f1e:	c3                   	ret    
c0024f1f:	90                   	nop

c0024f20 <SATAPI::write(unsigned long long, int, void*)>:
c0024f20:	b8 03 00 00 00       	mov    eax,0x3
c0024f25:	c3                   	ret    

c0024f26 <SATAPI::close(int, int, void*)>:
c0024f26:	83 ec 0c             	sub    esp,0xc
c0024f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f2d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f33:	85 c0                	test   eax,eax
c0024f35:	74 0c                	je     c0024f43 <SATAPI::close(int, int, void*)+0x1d>
c0024f37:	83 ec 0c             	sub    esp,0xc
c0024f3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0024f3c:	50                   	push   eax
c0024f3d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024f40:	83 c4 10             	add    esp,0x10
c0024f43:	31 c0                	xor    eax,eax
c0024f45:	83 c4 0c             	add    esp,0xc
c0024f48:	c3                   	ret    
c0024f49:	90                   	nop

c0024f4a <SATAPI::SATAPI()>:
c0024f4a:	83 ec 0c             	sub    esp,0xc
c0024f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f51:	83 ec 04             	sub    esp,0x4
c0024f54:	68 00 08 00 00       	push   0x800
c0024f59:	68 d8 cd 02 c0       	push   0xc002cdd8
c0024f5e:	50                   	push   eax
c0024f5f:	e8 6c f7 fe ff       	call   c00146d0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024f64:	83 c4 10             	add    esp,0x10
c0024f67:	ba 84 ce 02 c0       	mov    edx,0xc002ce84
c0024f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f70:	89 10                	mov    DWORD PTR [eax],edx
c0024f72:	90                   	nop
c0024f73:	83 c4 0c             	add    esp,0xc
c0024f76:	c3                   	ret    
c0024f77:	90                   	nop

c0024f78 <SATAPI::diskRemoved()>:
c0024f78:	83 ec 18             	sub    esp,0x18
c0024f7b:	68 e4 cd 02 c0       	push   0xc002cde4
c0024f80:	e8 01 df fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0024f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f89:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024f90:	83 c4 1c             	add    esp,0x1c
c0024f93:	c3                   	ret    

c0024f94 <SATAPI::diskInserted()>:
c0024f94:	53                   	push   ebx
c0024f95:	83 ec 14             	sub    esp,0x14
c0024f98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024f9c:	68 fb cd 02 c0       	push   0xc002cdfb
c0024fa1:	e8 e0 de fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0024fa6:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024fad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024fb0:	e8 83 f7 fe ff       	call   c0014738 <PhysicalDisk::startCache()>
c0024fb5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024fb9:	83 c4 18             	add    esp,0x18
c0024fbc:	5b                   	pop    ebx
c0024fbd:	e9 ec 18 ff ff       	jmp    c00168ae <createPartitionsForDisk(PhysicalDisk*)>

c0024fc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024fc2:	55                   	push   ebp
c0024fc3:	57                   	push   edi
c0024fc4:	56                   	push   esi
c0024fc5:	53                   	push   ebx
c0024fc6:	83 ec 24             	sub    esp,0x24
c0024fc9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024fcd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024fd1:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024fd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024fdb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024fdf:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024fe5:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024fe8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024fee:	c1 e3 07             	shl    ebx,0x7
c0024ff1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024ff5:	89 f8                	mov    eax,edi
c0024ff7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024ffb:	c1 e0 07             	shl    eax,0x7
c0024ffe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025002:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025006:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025010:	53                   	push   ebx
c0025011:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0025017:	e8 d6 eb ff ff       	call   c0023bf2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002501c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025020:	83 c4 10             	add    esp,0x10
c0025023:	b8 01 00 00 00       	mov    eax,0x1
c0025028:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c002502d:	0f 84 8a 01 00 00    	je     c00251bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025033:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025039:	8b 03                	mov    eax,DWORD PTR [ebx]
c002503b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025041:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025047:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002504b:	c1 e1 05             	shl    ecx,0x5
c002504e:	01 c8                	add    eax,ecx
c0025050:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025052:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025058:	81 c9 25 00 01 00    	or     ecx,0x10025
c002505e:	89 08                	mov    DWORD PTR [eax],ecx
c0025060:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025066:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002506c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025072:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025075:	52                   	push   edx
c0025076:	68 90 00 00 00       	push   0x90
c002507b:	6a 00                	push   0x0
c002507d:	53                   	push   ebx
c002507e:	e8 f5 b6 fd ff       	call   c0000778 <memset>
c0025083:	83 c4 0c             	add    esp,0xc
c0025086:	8d 43 40             	lea    eax,[ebx+0x40]
c0025089:	6a 0c                	push   0xc
c002508b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002508f:	50                   	push   eax
c0025090:	e8 af b6 fd ff       	call   c0000744 <memcpy>
c0025095:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002509b:	89 ea                	mov    edx,ebp
c002509d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00250a3:	c1 ea 18             	shr    edx,0x18
c00250a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250aa:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00250ad:	8d 48 ff             	lea    ecx,[eax-0x1]
c00250b0:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00250b4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00250ba:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00250c0:	25 00 00 c0 ff       	and    eax,0xffc00000
c00250c5:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00250c9:	09 c8                	or     eax,ecx
c00250cb:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00250cf:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00250d5:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00250d8:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00250df:	66 25 00 7f          	and    ax,0x7f00
c00250e3:	66 0d 27 80          	or     ax,0x8027
c00250e7:	66 89 03             	mov    WORD PTR [ebx],ax
c00250ea:	89 e8                	mov    eax,ebp
c00250ec:	c1 e8 10             	shr    eax,0x10
c00250ef:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00250f2:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00250f6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00250f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250fd:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025100:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025104:	83 c4 10             	add    esp,0x10
c0025107:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002510b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002510f:	31 c0                	xor    eax,eax
c0025111:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025117:	80 e1 88             	and    cl,0x88
c002511a:	74 0a                	je     c0025126 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c002511c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025121:	74 0a                	je     c002512d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025123:	40                   	inc    eax
c0025124:	eb eb                	jmp    c0025111 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0025126:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002512b:	75 0f                	jne    c002513c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c002512d:	83 ec 0c             	sub    esp,0xc
c0025130:	68 81 cd 02 c0       	push   0xc002cd81
c0025135:	e8 f1 53 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c002513a:	eb 3a                	jmp    c0025176 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c002513c:	b8 01 00 00 00       	mov    eax,0x1
c0025141:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025145:	c1 e7 07             	shl    edi,0x7
c0025148:	d3 e0                	shl    eax,cl
c002514a:	03 3c 24             	add    edi,DWORD PTR [esp]
c002514d:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025153:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025159:	85 d0                	test   eax,edx
c002515b:	74 23                	je     c0025180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c002515d:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025163:	0f ba e2 1e          	bt     edx,0x1e
c0025167:	73 ea                	jae    c0025153 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025169:	83 ec 0c             	sub    esp,0xc
c002516c:	68 13 ce 02 c0       	push   0xc002ce13
c0025171:	e8 10 dd fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0025176:	83 c4 10             	add    esp,0x10
c0025179:	b8 01 00 00 00       	mov    eax,0x1
c002517e:	eb 3d                	jmp    c00251bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025180:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025186:	0f ba e0 1e          	bt     eax,0x1e
c002518a:	73 0a                	jae    c0025196 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002518c:	83 ec 0c             	sub    esp,0xc
c002518f:	68 26 ce 02 c0       	push   0xc002ce26
c0025194:	eb db                	jmp    c0025171 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025196:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002519b:	74 1e                	je     c00251bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002519d:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00251a2:	74 17                	je     c00251bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00251a4:	50                   	push   eax
c00251a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251a9:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00251af:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00251b3:	e8 8c b5 fd ff       	call   c0000744 <memcpy>
c00251b8:	83 c4 10             	add    esp,0x10
c00251bb:	31 c0                	xor    eax,eax
c00251bd:	83 c4 1c             	add    esp,0x1c
c00251c0:	5b                   	pop    ebx
c00251c1:	5e                   	pop    esi
c00251c2:	5f                   	pop    edi
c00251c3:	5d                   	pop    ebp
c00251c4:	c3                   	ret    
c00251c5:	90                   	nop

c00251c6 <SATAPI::eject()>:
c00251c6:	57                   	push   edi
c00251c7:	b9 03 00 00 00       	mov    ecx,0x3
c00251cc:	53                   	push   ebx
c00251cd:	83 ec 14             	sub    esp,0x14
c00251d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00251d4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251d8:	fc                   	cld    
c00251d9:	31 c0                	xor    eax,eax
c00251db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251dd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00251e2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00251e7:	50                   	push   eax
c00251e8:	6a 00                	push   0x0
c00251ea:	6a 00                	push   0x0
c00251ec:	6a 00                	push   0x0
c00251ee:	6a 00                	push   0x0
c00251f0:	6a 02                	push   0x2
c00251f2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251f6:	50                   	push   eax
c00251f7:	53                   	push   ebx
c00251f8:	e8 c5 fd ff ff       	call   c0024fc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251fd:	83 c4 14             	add    esp,0x14
c0025200:	53                   	push   ebx
c0025201:	e8 72 fd ff ff       	call   c0024f78 <SATAPI::diskRemoved()>
c0025206:	83 c4 24             	add    esp,0x24
c0025209:	31 c0                	xor    eax,eax
c002520b:	5b                   	pop    ebx
c002520c:	5f                   	pop    edi
c002520d:	c3                   	ret    

c002520e <SATAPI::detectMedia()>:
c002520e:	56                   	push   esi
c002520f:	53                   	push   ebx
c0025210:	83 ec 28             	sub    esp,0x28
c0025213:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025217:	6a 0c                	push   0xc
c0025219:	6a 00                	push   0x0
c002521b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002521f:	56                   	push   esi
c0025220:	e8 53 b5 fd ff       	call   c0000778 <memset>
c0025225:	83 c4 0c             	add    esp,0xc
c0025228:	6a 00                	push   0x0
c002522a:	6a 00                	push   0x0
c002522c:	6a 00                	push   0x0
c002522e:	6a 00                	push   0x0
c0025230:	6a 00                	push   0x0
c0025232:	56                   	push   esi
c0025233:	53                   	push   ebx
c0025234:	e8 89 fd ff ff       	call   c0024fc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025239:	83 c4 1c             	add    esp,0x1c
c002523c:	6a 0c                	push   0xc
c002523e:	6a 00                	push   0x0
c0025240:	56                   	push   esi
c0025241:	e8 32 b5 fd ff       	call   c0000778 <memset>
c0025246:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002524b:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025250:	83 c4 0c             	add    esp,0xc
c0025253:	6a 01                	push   0x1
c0025255:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025259:	50                   	push   eax
c002525a:	6a 00                	push   0x0
c002525c:	6a 00                	push   0x0
c002525e:	6a 12                	push   0x12
c0025260:	56                   	push   esi
c0025261:	53                   	push   ebx
c0025262:	e8 5b fd ff ff       	call   c0024fc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025267:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002526b:	83 c4 20             	add    esp,0x20
c002526e:	83 e0 7f             	and    eax,0x7f
c0025271:	3c 70                	cmp    al,0x70
c0025273:	74 15                	je     c002528a <SATAPI::detectMedia()+0x7c>
c0025275:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002527c:	75 0c                	jne    c002528a <SATAPI::detectMedia()+0x7c>
c002527e:	83 ec 0c             	sub    esp,0xc
c0025281:	53                   	push   ebx
c0025282:	e8 0d fd ff ff       	call   c0024f94 <SATAPI::diskInserted()>
c0025287:	83 c4 10             	add    esp,0x10
c002528a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002528e:	83 e0 0f             	and    eax,0xf
c0025291:	3c 02                	cmp    al,0x2
c0025293:	75 1b                	jne    c00252b0 <SATAPI::detectMedia()+0xa2>
c0025295:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002529a:	75 2d                	jne    c00252c9 <SATAPI::detectMedia()+0xbb>
c002529c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252a3:	74 24                	je     c00252c9 <SATAPI::detectMedia()+0xbb>
c00252a5:	83 ec 0c             	sub    esp,0xc
c00252a8:	53                   	push   ebx
c00252a9:	e8 ca fc ff ff       	call   c0024f78 <SATAPI::diskRemoved()>
c00252ae:	eb 16                	jmp    c00252c6 <SATAPI::detectMedia()+0xb8>
c00252b0:	84 c0                	test   al,al
c00252b2:	75 15                	jne    c00252c9 <SATAPI::detectMedia()+0xbb>
c00252b4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252bb:	75 0c                	jne    c00252c9 <SATAPI::detectMedia()+0xbb>
c00252bd:	83 ec 0c             	sub    esp,0xc
c00252c0:	53                   	push   ebx
c00252c1:	e8 ce fc ff ff       	call   c0024f94 <SATAPI::diskInserted()>
c00252c6:	83 c4 10             	add    esp,0x10
c00252c9:	83 c4 24             	add    esp,0x24
c00252cc:	5b                   	pop    ebx
c00252cd:	5e                   	pop    esi
c00252ce:	c3                   	ret    
c00252cf:	90                   	nop

c00252d0 <SATAPI::open(int, int, void*)>:
c00252d0:	56                   	push   esi
c00252d1:	53                   	push   ebx
c00252d2:	50                   	push   eax
c00252d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00252d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00252db:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00252e5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00252eb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00252f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252f9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025303:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025309:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025310:	e8 c8 ab fe ff       	call   c000fedd <Phys::allocatePage()>
c0025315:	89 c6                	mov    esi,eax
c0025317:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002531d:	81 c6 00 10 00 00    	add    esi,0x1000
c0025323:	e8 b5 ab fe ff       	call   c000fedd <Phys::allocatePage()>
c0025328:	39 c6                	cmp    esi,eax
c002532a:	74 10                	je     c002533c <SATAPI::open(int, int, void*)+0x6c>
c002532c:	83 ec 0c             	sub    esp,0xc
c002532f:	68 3b ce 02 c0       	push   0xc002ce3b
c0025334:	e8 f2 51 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0025339:	83 c4 10             	add    esp,0x10
c002533c:	83 ec 0c             	sub    esp,0xc
c002533f:	6a 02                	push   0x2
c0025341:	e8 6f c9 fe ff       	call   c0011cb5 <Virt::allocateKernelVirtualPages(int)>
c0025346:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002534c:	e8 a2 cb fe ff       	call   c0011ef3 <Virt::getAKernelVAS()>
c0025351:	6a 03                	push   0x3
c0025353:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025359:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002535f:	50                   	push   eax
c0025360:	e8 b1 cf fe ff       	call   c0012316 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025365:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002536c:	83 c4 14             	add    esp,0x14
c002536f:	53                   	push   ebx
c0025370:	e8 99 fe ff ff       	call   c002520e <SATAPI::detectMedia()>
c0025375:	83 c4 14             	add    esp,0x14
c0025378:	31 c0                	xor    eax,eax
c002537a:	5b                   	pop    ebx
c002537b:	5e                   	pop    esi
c002537c:	c3                   	ret    
c002537d:	90                   	nop

c002537e <SATAPI::read(unsigned long long, int, void*)>:
c002537e:	55                   	push   ebp
c002537f:	57                   	push   edi
c0025380:	56                   	push   esi
c0025381:	53                   	push   ebx
c0025382:	83 ec 1c             	sub    esp,0x1c
c0025385:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025389:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002538d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025391:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025398:	74 19                	je     c00253b3 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002539a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002539f:	7e 2e                	jle    c00253cf <SATAPI::read(unsigned long long, int, void*)+0x51>
c00253a1:	83 ec 0c             	sub    esp,0xc
c00253a4:	68 51 ce 02 c0       	push   0xc002ce51
c00253a9:	e8 7d 51 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c00253ae:	83 c4 10             	add    esp,0x10
c00253b1:	eb 1c                	jmp    c00253cf <SATAPI::read(unsigned long long, int, void*)+0x51>
c00253b3:	83 ec 0c             	sub    esp,0xc
c00253b6:	55                   	push   ebp
c00253b7:	e8 52 fe ff ff       	call   c002520e <SATAPI::detectMedia()>
c00253bc:	83 c4 10             	add    esp,0x10
c00253bf:	b8 02 00 00 00       	mov    eax,0x2
c00253c4:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00253cb:	75 cd                	jne    c002539a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00253cd:	eb 49                	jmp    c0025418 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00253cf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00253d3:	b9 03 00 00 00       	mov    ecx,0x3
c00253d8:	fc                   	cld    
c00253d9:	31 c0                	xor    eax,eax
c00253db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00253dd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00253e2:	89 d8                	mov    eax,ebx
c00253e4:	86 e0                	xchg   al,ah
c00253e6:	c1 c0 10             	rol    eax,0x10
c00253e9:	86 e0                	xchg   al,ah
c00253eb:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00253ef:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00253f3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00253f7:	50                   	push   eax
c00253f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00253fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025400:	56                   	push   esi
c0025401:	53                   	push   ebx
c0025402:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025406:	c1 e0 0b             	shl    eax,0xb
c0025409:	50                   	push   eax
c002540a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002540e:	50                   	push   eax
c002540f:	55                   	push   ebp
c0025410:	e8 ad fb ff ff       	call   c0024fc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025415:	83 c4 20             	add    esp,0x20
c0025418:	83 c4 1c             	add    esp,0x1c
c002541b:	5b                   	pop    ebx
c002541c:	5e                   	pop    esi
c002541d:	5f                   	pop    edi
c002541e:	5d                   	pop    ebp
c002541f:	c3                   	ret    

c0025420 <AVX::open(int, int, void*)>:
c0025420:	83 ec 0c             	sub    esp,0xc
c0025423:	e8 40 11 00 00       	call   c0026568 <avxInit>
c0025428:	b8 00 00 00 00       	mov    eax,0x0
c002542d:	83 c4 0c             	add    esp,0xc
c0025430:	c3                   	ret    
c0025431:	90                   	nop

c0025432 <AVX::close(int, int, void*)>:
c0025432:	83 ec 0c             	sub    esp,0xc
c0025435:	e8 2f 11 00 00       	call   c0026569 <avxClose>
c002543a:	b8 00 00 00 00       	mov    eax,0x0
c002543f:	83 c4 0c             	add    esp,0xc
c0025442:	c3                   	ret    
c0025443:	90                   	nop

c0025444 <AVX::available()>:
c0025444:	83 ec 0c             	sub    esp,0xc
c0025447:	e8 14 11 00 00       	call   c0026560 <avxDetect>
c002544c:	85 c0                	test   eax,eax
c002544e:	0f 95 c0             	setne  al
c0025451:	83 c4 0c             	add    esp,0xc
c0025454:	c3                   	ret    
c0025455:	90                   	nop

c0025456 <AVX::save(void*)>:
c0025456:	83 ec 0c             	sub    esp,0xc
c0025459:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002545d:	83 ec 0c             	sub    esp,0xc
c0025460:	50                   	push   eax
c0025461:	e8 00 11 00 00       	call   c0026566 <avxSave>
c0025466:	83 c4 10             	add    esp,0x10
c0025469:	90                   	nop
c002546a:	83 c4 0c             	add    esp,0xc
c002546d:	c3                   	ret    

c002546e <AVX::load(void*)>:
c002546e:	83 ec 0c             	sub    esp,0xc
c0025471:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025475:	83 ec 0c             	sub    esp,0xc
c0025478:	50                   	push   eax
c0025479:	e8 e9 10 00 00       	call   c0026567 <avxLoad>
c002547e:	83 c4 10             	add    esp,0x10
c0025481:	90                   	nop
c0025482:	83 c4 0c             	add    esp,0xc
c0025485:	c3                   	ret    

c0025486 <AVX::AVX()>:
c0025486:	83 ec 0c             	sub    esp,0xc
c0025489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002548d:	83 ec 08             	sub    esp,0x8
c0025490:	68 b4 ce 02 c0       	push   0xc002ceb4
c0025495:	50                   	push   eax
c0025496:	e8 13 f3 fe ff       	call   c00147ae <FPU::FPU(char const*)>
c002549b:	83 c4 10             	add    esp,0x10
c002549e:	ba c4 ce 02 c0       	mov    edx,0xc002cec4
c00254a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254a7:	89 10                	mov    DWORD PTR [eax],edx
c00254a9:	90                   	nop
c00254aa:	83 c4 0c             	add    esp,0xc
c00254ad:	c3                   	ret    

c00254ae <MMX::available()>:
c00254ae:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00254b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00254b9:	83 e0 20             	and    eax,0x20
c00254bc:	84 c0                	test   al,al
c00254be:	0f 95 c0             	setne  al
c00254c1:	c3                   	ret    

c00254c2 <MMX::open(int, int, void*)>:
c00254c2:	83 ec 0c             	sub    esp,0xc
c00254c5:	e8 22 11 00 00       	call   c00265ec <x87Init>
c00254ca:	b8 00 00 00 00       	mov    eax,0x0
c00254cf:	83 c4 0c             	add    esp,0xc
c00254d2:	c3                   	ret    
c00254d3:	90                   	nop

c00254d4 <MMX::close(int, int, void*)>:
c00254d4:	83 ec 0c             	sub    esp,0xc
c00254d7:	e8 2a 11 00 00       	call   c0026606 <x87Close>
c00254dc:	b8 00 00 00 00       	mov    eax,0x0
c00254e1:	83 c4 0c             	add    esp,0xc
c00254e4:	c3                   	ret    
c00254e5:	90                   	nop

c00254e6 <MMX::save(void*)>:
c00254e6:	83 ec 0c             	sub    esp,0xc
c00254e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254ed:	83 ec 0c             	sub    esp,0xc
c00254f0:	50                   	push   eax
c00254f1:	e8 eb 10 00 00       	call   c00265e1 <x87Save>
c00254f6:	83 c4 10             	add    esp,0x10
c00254f9:	90                   	nop
c00254fa:	83 c4 0c             	add    esp,0xc
c00254fd:	c3                   	ret    

c00254fe <MMX::load(void*)>:
c00254fe:	83 ec 0c             	sub    esp,0xc
c0025501:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025505:	83 ec 0c             	sub    esp,0xc
c0025508:	50                   	push   eax
c0025509:	e8 d9 10 00 00       	call   c00265e7 <x87Load>
c002550e:	83 c4 10             	add    esp,0x10
c0025511:	90                   	nop
c0025512:	83 c4 0c             	add    esp,0xc
c0025515:	c3                   	ret    

c0025516 <MMX::MMX()>:
c0025516:	83 ec 0c             	sub    esp,0xc
c0025519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002551d:	83 ec 08             	sub    esp,0x8
c0025520:	68 f4 ce 02 c0       	push   0xc002cef4
c0025525:	50                   	push   eax
c0025526:	e8 83 f2 fe ff       	call   c00147ae <FPU::FPU(char const*)>
c002552b:	83 c4 10             	add    esp,0x10
c002552e:	ba 04 cf 02 c0       	mov    edx,0xc002cf04
c0025533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025537:	89 10                	mov    DWORD PTR [eax],edx
c0025539:	90                   	nop
c002553a:	83 c4 0c             	add    esp,0xc
c002553d:	c3                   	ret    

c002553e <SSE::open(int, int, void*)>:
c002553e:	83 ec 0c             	sub    esp,0xc
c0025541:	e8 5e 10 00 00       	call   c00265a4 <sseInit>
c0025546:	b8 00 00 00 00       	mov    eax,0x0
c002554b:	83 c4 0c             	add    esp,0xc
c002554e:	c3                   	ret    
c002554f:	90                   	nop

c0025550 <SSE::close(int, int, void*)>:
c0025550:	83 ec 0c             	sub    esp,0xc
c0025553:	e8 5c 10 00 00       	call   c00265b4 <sseClose>
c0025558:	b8 00 00 00 00       	mov    eax,0x0
c002555d:	83 c4 0c             	add    esp,0xc
c0025560:	c3                   	ret    
c0025561:	90                   	nop

c0025562 <SSE::available()>:
c0025562:	83 ec 1c             	sub    esp,0x1c
c0025565:	e8 16 10 00 00       	call   c0026580 <absolutelyNoChanceInHell>
c002556a:	85 c0                	test   eax,eax
c002556c:	0f 95 c0             	setne  al
c002556f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025573:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025577:	83 c4 1c             	add    esp,0x1c
c002557a:	c3                   	ret    
c002557b:	90                   	nop

c002557c <SSE::save(void*)>:
c002557c:	83 ec 0c             	sub    esp,0xc
c002557f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025583:	83 ec 0c             	sub    esp,0xc
c0025586:	50                   	push   eax
c0025587:	e8 0c 10 00 00       	call   c0026598 <sseSave>
c002558c:	83 c4 10             	add    esp,0x10
c002558f:	90                   	nop
c0025590:	83 c4 0c             	add    esp,0xc
c0025593:	c3                   	ret    

c0025594 <SSE::load(void*)>:
c0025594:	83 ec 0c             	sub    esp,0xc
c0025597:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002559b:	83 ec 0c             	sub    esp,0xc
c002559e:	50                   	push   eax
c002559f:	e8 fa 0f 00 00       	call   c002659e <sseLoad>
c00255a4:	83 c4 10             	add    esp,0x10
c00255a7:	90                   	nop
c00255a8:	83 c4 0c             	add    esp,0xc
c00255ab:	c3                   	ret    

c00255ac <SSE::SSE()>:
c00255ac:	83 ec 0c             	sub    esp,0xc
c00255af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255b3:	83 ec 08             	sub    esp,0x8
c00255b6:	68 34 cf 02 c0       	push   0xc002cf34
c00255bb:	50                   	push   eax
c00255bc:	e8 ed f1 fe ff       	call   c00147ae <FPU::FPU(char const*)>
c00255c1:	83 c4 10             	add    esp,0x10
c00255c4:	ba 44 cf 02 c0       	mov    edx,0xc002cf44
c00255c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255cd:	89 10                	mov    DWORD PTR [eax],edx
c00255cf:	90                   	nop
c00255d0:	83 c4 0c             	add    esp,0xc
c00255d3:	c3                   	ret    

c00255d4 <x87::open(int, int, void*)>:
c00255d4:	83 ec 0c             	sub    esp,0xc
c00255d7:	e8 10 10 00 00       	call   c00265ec <x87Init>
c00255dc:	b8 00 00 00 00       	mov    eax,0x0
c00255e1:	83 c4 0c             	add    esp,0xc
c00255e4:	c3                   	ret    
c00255e5:	90                   	nop

c00255e6 <x87::close(int, int, void*)>:
c00255e6:	83 ec 0c             	sub    esp,0xc
c00255e9:	e8 18 10 00 00       	call   c0026606 <x87Close>
c00255ee:	b8 00 00 00 00       	mov    eax,0x0
c00255f3:	83 c4 0c             	add    esp,0xc
c00255f6:	c3                   	ret    
c00255f7:	90                   	nop

c00255f8 <x87::available()>:
c00255f8:	83 ec 0c             	sub    esp,0xc
c00255fb:	e8 c6 0f 00 00       	call   c00265c6 <x87Detect>
c0025600:	85 c0                	test   eax,eax
c0025602:	0f 95 c0             	setne  al
c0025605:	83 c4 0c             	add    esp,0xc
c0025608:	c3                   	ret    
c0025609:	90                   	nop

c002560a <x87::save(void*)>:
c002560a:	83 ec 0c             	sub    esp,0xc
c002560d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025611:	83 ec 0c             	sub    esp,0xc
c0025614:	50                   	push   eax
c0025615:	e8 c7 0f 00 00       	call   c00265e1 <x87Save>
c002561a:	83 c4 10             	add    esp,0x10
c002561d:	90                   	nop
c002561e:	83 c4 0c             	add    esp,0xc
c0025621:	c3                   	ret    

c0025622 <x87::load(void*)>:
c0025622:	83 ec 0c             	sub    esp,0xc
c0025625:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025629:	83 ec 0c             	sub    esp,0xc
c002562c:	50                   	push   eax
c002562d:	e8 b5 0f 00 00       	call   c00265e7 <x87Load>
c0025632:	83 c4 10             	add    esp,0x10
c0025635:	90                   	nop
c0025636:	83 c4 0c             	add    esp,0xc
c0025639:	c3                   	ret    

c002563a <x87::x87()>:
c002563a:	83 ec 0c             	sub    esp,0xc
c002563d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025641:	83 ec 08             	sub    esp,0x8
c0025644:	68 74 cf 02 c0       	push   0xc002cf74
c0025649:	50                   	push   eax
c002564a:	e8 5f f1 fe ff       	call   c00147ae <FPU::FPU(char const*)>
c002564f:	83 c4 10             	add    esp,0x10
c0025652:	ba 84 cf 02 c0       	mov    edx,0xc002cf84
c0025657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002565b:	89 10                	mov    DWORD PTR [eax],edx
c002565d:	90                   	nop
c002565e:	83 c4 0c             	add    esp,0xc
c0025661:	c3                   	ret    

c0025662 <APIC::disable()>:
c0025662:	90                   	nop
c0025663:	c3                   	ret    

c0025664 <APIC::close(int, int, void*)>:
c0025664:	55                   	push   ebp
c0025665:	89 e5                	mov    ebp,esp
c0025667:	83 ec 08             	sub    esp,0x8
c002566a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002566d:	8b 00                	mov    eax,DWORD PTR [eax]
c002566f:	83 c0 3c             	add    eax,0x3c
c0025672:	8b 00                	mov    eax,DWORD PTR [eax]
c0025674:	83 ec 0c             	sub    esp,0xc
c0025677:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002567a:	ff d0                	call   eax
c002567c:	83 c4 10             	add    esp,0x10
c002567f:	b8 00 00 00 00       	mov    eax,0x0
c0025684:	c9                   	leave  
c0025685:	c3                   	ret    

c0025686 <IOAPIC::close(int, int, void*)>:
c0025686:	b8 00 00 00 00       	mov    eax,0x0
c002568b:	c3                   	ret    

c002568c <APIC::io_wait()>:
c002568c:	eb 00                	jmp    c002568e <APIC::io_wait()+0x2>
c002568e:	eb 00                	jmp    c0025690 <APIC::io_wait()+0x4>
c0025690:	90                   	nop
c0025691:	c3                   	ret    

c0025692 <APIC::getBase()>:
c0025692:	55                   	push   ebp
c0025693:	89 e5                	mov    ebp,esp
c0025695:	83 ec 18             	sub    esp,0x18
c0025698:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c002569d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00256a3:	83 e0 08             	and    eax,0x8
c00256a6:	84 c0                	test   al,al
c00256a8:	75 07                	jne    c00256b1 <APIC::getBase()+0x1f>
c00256aa:	b8 00 00 00 00       	mov    eax,0x0
c00256af:	eb 21                	jmp    c00256d2 <APIC::getBase()+0x40>
c00256b1:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00256b6:	83 ec 08             	sub    esp,0x8
c00256b9:	6a 1b                	push   0x1b
c00256bb:	50                   	push   eax
c00256bc:	e8 27 97 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00256c1:	83 c4 10             	add    esp,0x10
c00256c4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00256c7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00256ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00256cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00256d2:	c9                   	leave  
c00256d3:	c3                   	ret    

c00256d4 <APIC::eoi(unsigned char)>:
c00256d4:	55                   	push   ebp
c00256d5:	89 e5                	mov    ebp,esp
c00256d7:	83 ec 28             	sub    esp,0x28
c00256da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256dd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00256e0:	83 ec 0c             	sub    esp,0xc
c00256e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256e6:	e8 a7 ff ff ff       	call   c0025692 <APIC::getBase()>
c00256eb:	83 c4 10             	add    esp,0x10
c00256ee:	05 b0 00 00 00       	add    eax,0xb0
c00256f3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00256f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00256f9:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00256ff:	90                   	nop
c0025700:	c9                   	leave  
c0025701:	c3                   	ret    

c0025702 <APIC::open(int, int, void*)>:
c0025702:	55                   	push   ebp
c0025703:	89 e5                	mov    ebp,esp
c0025705:	57                   	push   edi
c0025706:	56                   	push   esi
c0025707:	53                   	push   ebx
c0025708:	83 ec 2c             	sub    esp,0x2c
c002570b:	83 ec 0c             	sub    esp,0xc
c002570e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025711:	e8 7c ff ff ff       	call   c0025692 <APIC::getBase()>
c0025716:	83 c4 10             	add    esp,0x10
c0025719:	89 c2                	mov    edx,eax
c002571b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002571e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025724:	0f b6 f8             	movzx  edi,al
c0025727:	89 d0                	mov    eax,edx
c0025729:	ba 00 00 00 00       	mov    edx,0x0
c002572e:	89 c1                	mov    ecx,eax
c0025730:	80 e5 ff             	and    ch,0xff
c0025733:	89 cb                	mov    ebx,ecx
c0025735:	0f b6 f2             	movzx  esi,dl
c0025738:	89 d8                	mov    eax,ebx
c002573a:	89 f2                	mov    edx,esi
c002573c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002573f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025742:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025746:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002574a:	83 e0 00             	and    eax,0x0
c002574d:	09 d0                	or     eax,edx
c002574f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025756:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002575c:	8d 50 01             	lea    edx,[eax+0x1]
c002575f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025762:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025768:	0f b6 d0             	movzx  edx,al
c002576b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002576e:	83 c2 08             	add    edx,0x8
c0025771:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025775:	0f b6 c9             	movzx  ecx,cl
c0025778:	81 c9 00 00 01 00    	or     ecx,0x10000
c002577e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025782:	83 ec 0c             	sub    esp,0xc
c0025785:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025788:	e8 05 ff ff ff       	call   c0025692 <APIC::getBase()>
c002578d:	83 c4 10             	add    esp,0x10
c0025790:	05 f0 00 00 00       	add    eax,0xf0
c0025795:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025798:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002579b:	8b 00                	mov    eax,DWORD PTR [eax]
c002579d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00257a0:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00257a7:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00257ae:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00257b1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00257b4:	89 10                	mov    DWORD PTR [eax],edx
c00257b6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00257bd:	a1 d0 0b 03 c0       	mov    eax,ds:0xc0030bd0
c00257c2:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00257c5:	7d 7c                	jge    c0025843 <APIC::open(int, int, void*)+0x141>
c00257c7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00257ca:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c00257d1:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00257d4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00257d7:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c00257de:	c1 e8 08             	shr    eax,0x8
c00257e1:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00257e5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00257e8:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c00257ef:	c1 e8 18             	shr    eax,0x18
c00257f2:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00257f5:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00257f9:	75 40                	jne    c002583b <APIC::open(int, int, void*)+0x139>
c00257fb:	83 ec 0c             	sub    esp,0xc
c00257fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025801:	e8 8c fe ff ff       	call   c0025692 <APIC::getBase()>
c0025806:	83 c4 10             	add    esp,0x10
c0025809:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002580d:	75 07                	jne    c0025816 <APIC::open(int, int, void*)+0x114>
c002580f:	ba 60 03 00 00       	mov    edx,0x360
c0025814:	eb 05                	jmp    c002581b <APIC::open(int, int, void*)+0x119>
c0025816:	ba 50 03 00 00       	mov    edx,0x350
c002581b:	01 d0                	add    eax,edx
c002581d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025820:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025823:	8b 00                	mov    eax,DWORD PTR [eax]
c0025825:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025828:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002582f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025833:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025836:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025839:	89 10                	mov    DWORD PTR [eax],edx
c002583b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002583e:	e9 7a ff ff ff       	jmp    c00257bd <APIC::open(int, int, void*)+0xbb>
c0025843:	b8 00 00 00 00       	mov    eax,0x0
c0025848:	8d 65 f4             	lea    esp,[ebp-0xc]
c002584b:	5b                   	pop    ebx
c002584c:	5e                   	pop    esi
c002584d:	5f                   	pop    edi
c002584e:	5d                   	pop    ebp
c002584f:	c3                   	ret    

c0025850 <IOAPIC::IOAPIC()>:
c0025850:	83 ec 0c             	sub    esp,0xc
c0025853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025857:	83 ec 08             	sub    esp,0x8
c002585a:	68 b4 cf 02 c0       	push   0xc002cfb4
c002585f:	50                   	push   eax
c0025860:	e8 37 ec fe ff       	call   c001449c <Device::Device(char const*)>
c0025865:	83 c4 10             	add    esp,0x10
c0025868:	ba dc d0 02 c0       	mov    edx,0xc002d0dc
c002586d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025871:	89 10                	mov    DWORD PTR [eax],edx
c0025873:	90                   	nop
c0025874:	83 c4 0c             	add    esp,0xc
c0025877:	c3                   	ret    

c0025878 <APIC::APIC()>:
c0025878:	53                   	push   ebx
c0025879:	83 ec 18             	sub    esp,0x18
c002587c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025880:	83 ec 08             	sub    esp,0x8
c0025883:	68 bc cf 02 c0       	push   0xc002cfbc
c0025888:	50                   	push   eax
c0025889:	e8 7a f3 fe ff       	call   c0014c08 <InterruptController::InterruptController(char const*)>
c002588e:	83 c4 10             	add    esp,0x10
c0025891:	ba 94 d0 02 c0       	mov    edx,0xc002d094
c0025896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002589a:	89 10                	mov    DWORD PTR [eax],edx
c002589c:	a0 a0 26 03 c0       	mov    al,ds:0xc00326a0
c00258a1:	83 f0 01             	xor    eax,0x1
c00258a4:	84 c0                	test   al,al
c00258a6:	0f 84 a1 00 00 00    	je     c002594d <APIC::APIC()+0xd5>
c00258ac:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00258b1:	a0 80 0c 03 c0       	mov    al,ds:0xc0030c80
c00258b6:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00258ba:	0f 83 86 00 00 00    	jae    c0025946 <APIC::APIC()+0xce>
c00258c0:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00258c8:	83 ec 0c             	sub    esp,0xc
c00258cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00258cf:	e8 6c 9f fe ff       	call   c000f840 <malloc>
c00258d4:	83 c4 10             	add    esp,0x10
c00258d7:	89 c3                	mov    ebx,eax
c00258d9:	83 ec 0c             	sub    esp,0xc
c00258dc:	53                   	push   ebx
c00258dd:	e8 6e ff ff ff       	call   c0025850 <IOAPIC::IOAPIC()>
c00258e2:	83 c4 10             	add    esp,0x10
c00258e5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00258e9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00258ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00258f2:	89 14 85 80 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd980],edx
c00258f9:	a1 60 26 03 c0       	mov    eax,ds:0xc0032660
c00258fe:	40                   	inc    eax
c00258ff:	a3 60 26 03 c0       	mov    ds:0xc0032660,eax
c0025904:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0025909:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002590f:	83 ec 08             	sub    esp,0x8
c0025912:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025916:	50                   	push   eax
c0025917:	e8 90 e9 fe ff       	call   c00142ac <Device::addChild(Device*)>
c002591c:	83 c4 10             	add    esp,0x10
c002591f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025923:	8b 00                	mov    eax,DWORD PTR [eax]
c0025925:	83 c0 08             	add    eax,0x8
c0025928:	8b 00                	mov    eax,DWORD PTR [eax]
c002592a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002592f:	6a 00                	push   0x0
c0025931:	6a 00                	push   0x0
c0025933:	52                   	push   edx
c0025934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025938:	ff d0                	call   eax
c002593a:	83 c4 10             	add    esp,0x10
c002593d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025941:	e9 6b ff ff ff       	jmp    c00258b1 <APIC::APIC()+0x39>
c0025946:	c6 05 a0 26 03 c0 01 	mov    BYTE PTR ds:0xc00326a0,0x1
c002594d:	90                   	nop
c002594e:	83 c4 18             	add    esp,0x18
c0025951:	5b                   	pop    ebx
c0025952:	c3                   	ret    
c0025953:	90                   	nop

c0025954 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025954:	55                   	push   ebp
c0025955:	89 e5                	mov    ebp,esp
c0025957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002595a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025960:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025963:	72 1d                	jb     c0025982 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025968:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002596e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025971:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025977:	01 d0                	add    eax,edx
c0025979:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002597c:	73 04                	jae    c0025982 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002597e:	b0 01                	mov    al,0x1
c0025980:	eb 02                	jmp    c0025984 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025982:	b0 00                	mov    al,0x0
c0025984:	5d                   	pop    ebp
c0025985:	c3                   	ret    

c0025986 <IOAPIC::read(int)>:
c0025986:	55                   	push   ebp
c0025987:	89 e5                	mov    ebp,esp
c0025989:	83 ec 10             	sub    esp,0x10
c002598c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002598f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025995:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025998:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002599b:	0f b6 d0             	movzx  edx,al
c002599e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00259a1:	89 10                	mov    DWORD PTR [eax],edx
c00259a3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00259a6:	83 c0 10             	add    eax,0x10
c00259a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00259ab:	c9                   	leave  
c00259ac:	c3                   	ret    
c00259ad:	90                   	nop

c00259ae <IOAPIC::open(int, int, void*)>:
c00259ae:	55                   	push   ebp
c00259af:	89 e5                	mov    ebp,esp
c00259b1:	57                   	push   edi
c00259b2:	56                   	push   esi
c00259b3:	53                   	push   ebx
c00259b4:	83 ec 0c             	sub    esp,0xc
c00259b7:	83 ec 0c             	sub    esp,0xc
c00259ba:	68 e7 cf 02 c0       	push   0xc002cfe7
c00259bf:	e8 c2 d4 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c00259c4:	83 c4 10             	add    esp,0x10
c00259c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00259cd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00259d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00259dc:	8b 14 85 c0 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf340]
c00259e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259e6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00259ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00259f5:	8b 14 85 40 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf2c0]
c00259fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ff:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a08:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025a0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a11:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a17:	0f b6 f8             	movzx  edi,al
c0025a1a:	89 d0                	mov    eax,edx
c0025a1c:	ba 00 00 00 00       	mov    edx,0x0
c0025a21:	89 c1                	mov    ecx,eax
c0025a23:	80 e5 ff             	and    ch,0xff
c0025a26:	89 cb                	mov    ebx,ecx
c0025a28:	0f b6 f2             	movzx  esi,dl
c0025a2b:	89 d8                	mov    eax,ebx
c0025a2d:	89 f2                	mov    edx,esi
c0025a2f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a32:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025a35:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025a39:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025a3d:	83 e0 00             	and    eax,0x0
c0025a40:	09 d0                	or     eax,edx
c0025a42:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a49:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a4f:	8d 50 01             	lea    edx,[eax+0x1]
c0025a52:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a55:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025a5b:	0f b6 d0             	movzx  edx,al
c0025a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a61:	83 c2 08             	add    edx,0x8
c0025a64:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025a68:	0f b6 c9             	movzx  ecx,cl
c0025a6b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025a71:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025a75:	83 ec 08             	sub    esp,0x8
c0025a78:	6a 01                	push   0x1
c0025a7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a7d:	e8 04 ff ff ff       	call   c0025986 <IOAPIC::read(int)>
c0025a82:	83 c4 10             	add    esp,0x10
c0025a85:	c1 f8 10             	sar    eax,0x10
c0025a88:	0f b6 c0             	movzx  eax,al
c0025a8b:	8d 50 01             	lea    edx,[eax+0x1]
c0025a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a91:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025a97:	b8 00 00 00 00       	mov    eax,0x0
c0025a9c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a9f:	5b                   	pop    ebx
c0025aa0:	5e                   	pop    esi
c0025aa1:	5f                   	pop    edi
c0025aa2:	5d                   	pop    ebp
c0025aa3:	c3                   	ret    

c0025aa4 <IOAPIC::write(int, int)>:
c0025aa4:	55                   	push   ebp
c0025aa5:	89 e5                	mov    ebp,esp
c0025aa7:	83 ec 10             	sub    esp,0x10
c0025aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025ab3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025ab6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ab9:	0f b6 d0             	movzx  edx,al
c0025abc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025abf:	89 10                	mov    DWORD PTR [eax],edx
c0025ac1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ac4:	8d 50 10             	lea    edx,[eax+0x10]
c0025ac7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025aca:	89 02                	mov    DWORD PTR [edx],eax
c0025acc:	90                   	nop
c0025acd:	c9                   	leave  
c0025ace:	c3                   	ret    
c0025acf:	90                   	nop

c0025ad0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025ad0:	55                   	push   ebp
c0025ad1:	89 e5                	mov    ebp,esp
c0025ad3:	53                   	push   ebx
c0025ad4:	83 ec 2c             	sub    esp,0x2c
c0025ad7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ada:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025add:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025ae0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025ae3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025ae6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025ae9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025aec:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025aef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025af2:	88 d8                	mov    al,bl
c0025af4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025af7:	88 c8                	mov    al,cl
c0025af9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025afc:	88 d0                	mov    al,dl
c0025afe:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025b01:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b05:	83 c0 08             	add    eax,0x8
c0025b08:	01 c0                	add    eax,eax
c0025b0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b0d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b11:	83 c0 08             	add    eax,0x8
c0025b14:	01 c0                	add    eax,eax
c0025b16:	40                   	inc    eax
c0025b17:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b1a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b1d:	50                   	push   eax
c0025b1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b21:	e8 60 fe ff ff       	call   c0025986 <IOAPIC::read(int)>
c0025b26:	83 c4 08             	add    esp,0x8
c0025b29:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025b2c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025b33:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025b36:	c1 e0 18             	shl    eax,0x18
c0025b39:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025b3c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025b3f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b42:	52                   	push   edx
c0025b43:	50                   	push   eax
c0025b44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b47:	e8 58 ff ff ff       	call   c0025aa4 <IOAPIC::write(int, int)>
c0025b4c:	83 c4 0c             	add    esp,0xc
c0025b4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b52:	50                   	push   eax
c0025b53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b56:	e8 2b fe ff ff       	call   c0025986 <IOAPIC::read(int)>
c0025b5b:	83 c4 08             	add    esp,0x8
c0025b5e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025b61:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025b68:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025b6f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025b76:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025b7a:	74 09                	je     c0025b85 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025b7c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025b83:	eb 07                	jmp    c0025b8c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025b85:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025b8c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025b90:	74 09                	je     c0025b9b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025b92:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025b99:	eb 07                	jmp    c0025ba2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025b9b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025ba2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025ba9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025bad:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025bb0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025bb3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bb6:	52                   	push   edx
c0025bb7:	50                   	push   eax
c0025bb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bbb:	e8 e4 fe ff ff       	call   c0025aa4 <IOAPIC::write(int, int)>
c0025bc0:	83 c4 0c             	add    esp,0xc
c0025bc3:	90                   	nop
c0025bc4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025bc7:	c9                   	leave  
c0025bc8:	c3                   	ret    
c0025bc9:	90                   	nop

c0025bca <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025bca:	55                   	push   ebp
c0025bcb:	89 e5                	mov    ebp,esp
c0025bcd:	57                   	push   edi
c0025bce:	56                   	push   esi
c0025bcf:	53                   	push   ebx
c0025bd0:	83 ec 2c             	sub    esp,0x2c
c0025bd3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025bd6:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bd9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025bdd:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025be1:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025be5:	74 5a                	je     c0025c41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025be7:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025beb:	7f 44                	jg     c0025c31 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025bed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bf0:	05 40 d5 02 c0       	add    eax,0xc002d540
c0025bf5:	8a 00                	mov    al,BYTE PTR [eax]
c0025bf7:	0f b6 c0             	movzx  eax,al
c0025bfa:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025bfd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c00:	66 8b 84 00 60 0c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf3a0]
c0025c08:	0f b7 c0             	movzx  eax,ax
c0025c0b:	83 e0 02             	and    eax,0x2
c0025c0e:	85 c0                	test   eax,eax
c0025c10:	74 04                	je     c0025c16 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025c12:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025c16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c19:	66 8b 84 00 60 0c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf3a0]
c0025c21:	0f b7 c0             	movzx  eax,ax
c0025c24:	83 e0 08             	and    eax,0x8
c0025c27:	85 c0                	test   eax,eax
c0025c29:	74 16                	je     c0025c41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c2b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c2f:	eb 10                	jmp    c0025c41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c31:	83 ec 0c             	sub    esp,0xc
c0025c34:	68 f8 cf 02 c0       	push   0xc002cff8
c0025c39:	e8 ed 48 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0025c3e:	83 c4 10             	add    esp,0x10
c0025c41:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025c45:	a1 60 26 03 c0       	mov    eax,ds:0xc0032660
c0025c4a:	83 ec 08             	sub    esp,0x8
c0025c4d:	50                   	push   eax
c0025c4e:	68 30 d0 02 c0       	push   0xc002d030
c0025c53:	e8 2e d2 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0025c58:	83 c4 10             	add    esp,0x10
c0025c5b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025c62:	a1 60 26 03 c0       	mov    eax,ds:0xc0032660
c0025c67:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025c6a:	7d 67                	jge    c0025cd3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025c6c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c6f:	8b 04 85 80 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd980]
c0025c76:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c79:	83 ec 08             	sub    esp,0x8
c0025c7c:	52                   	push   edx
c0025c7d:	50                   	push   eax
c0025c7e:	e8 d1 fc ff ff       	call   c0025954 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025c83:	83 c4 10             	add    esp,0x10
c0025c86:	84 c0                	test   al,al
c0025c88:	74 44                	je     c0025cce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025c8a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c8d:	8b 1c 85 80 26 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd980]
c0025c94:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025c98:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025c9b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025c9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ca2:	83 c0 20             	add    eax,0x20
c0025ca5:	0f b6 f0             	movzx  esi,al
c0025ca8:	b8 00 00 00 00       	mov    eax,0x0
c0025cad:	99                   	cdq    
c0025cae:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025cb1:	0f b6 c9             	movzx  ecx,cl
c0025cb4:	83 ec 04             	sub    esp,0x4
c0025cb7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025cba:	57                   	push   edi
c0025cbb:	56                   	push   esi
c0025cbc:	52                   	push   edx
c0025cbd:	50                   	push   eax
c0025cbe:	51                   	push   ecx
c0025cbf:	53                   	push   ebx
c0025cc0:	e8 0b fe ff ff       	call   c0025ad0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025cc5:	83 c4 20             	add    esp,0x20
c0025cc8:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025ccc:	eb 05                	jmp    c0025cd3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025cce:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025cd1:	eb 8f                	jmp    c0025c62 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025cd3:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025cd6:	83 f0 01             	xor    eax,0x1
c0025cd9:	84 c0                	test   al,al
c0025cdb:	74 10                	je     c0025ced <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025cdd:	83 ec 0c             	sub    esp,0xc
c0025ce0:	68 47 d0 02 c0       	push   0xc002d047
c0025ce5:	e8 41 48 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0025cea:	83 c4 10             	add    esp,0x10
c0025ced:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025cf1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025cf8:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025cfc:	7f 65                	jg     c0025d63 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d01:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d04:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d0b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d0e:	01 ca                	add    edx,ecx
c0025d10:	83 c2 54             	add    edx,0x54
c0025d13:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025d17:	85 c0                	test   eax,eax
c0025d19:	75 43                	jne    c0025d5e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025d1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d1e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d21:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d28:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d2b:	01 ca                	add    edx,ecx
c0025d2d:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025d30:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025d33:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025d37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d3a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d3d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d44:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d47:	01 ca                	add    edx,ecx
c0025d49:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025d4f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025d52:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025d56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d59:	83 e8 20             	sub    eax,0x20
c0025d5c:	eb 1a                	jmp    c0025d78 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025d5e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025d61:	eb 95                	jmp    c0025cf8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025d63:	83 ec 0c             	sub    esp,0xc
c0025d66:	68 54 d0 02 c0       	push   0xc002d054
c0025d6b:	e8 bb 47 ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0025d70:	83 c4 10             	add    esp,0x10
c0025d73:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025d78:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d7b:	5b                   	pop    ebx
c0025d7c:	5e                   	pop    esi
c0025d7d:	5f                   	pop    edi
c0025d7e:	5d                   	pop    ebp
c0025d7f:	c3                   	ret    

c0025d80 <PIC::disable()>:
c0025d80:	55                   	push   ebp
c0025d81:	89 e5                	mov    ebp,esp
c0025d83:	83 ec 10             	sub    esp,0x10
c0025d86:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025d8c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025d90:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d93:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d97:	ee                   	out    dx,al
c0025d98:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025d9e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025da2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025da5:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025da9:	ee                   	out    dx,al
c0025daa:	90                   	nop
c0025dab:	c9                   	leave  
c0025dac:	c3                   	ret    
c0025dad:	90                   	nop

c0025dae <PIC::close(int, int, void*)>:
c0025dae:	55                   	push   ebp
c0025daf:	89 e5                	mov    ebp,esp
c0025db1:	83 ec 08             	sub    esp,0x8
c0025db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025db7:	8b 00                	mov    eax,DWORD PTR [eax]
c0025db9:	83 c0 3c             	add    eax,0x3c
c0025dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dbe:	83 ec 0c             	sub    esp,0xc
c0025dc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dc4:	ff d0                	call   eax
c0025dc6:	83 c4 10             	add    esp,0x10
c0025dc9:	b8 00 00 00 00       	mov    eax,0x0
c0025dce:	c9                   	leave  
c0025dcf:	c3                   	ret    

c0025dd0 <PIC::PIC()>:
c0025dd0:	83 ec 0c             	sub    esp,0xc
c0025dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd7:	83 ec 08             	sub    esp,0x8
c0025dda:	68 00 d1 02 c0       	push   0xc002d100
c0025ddf:	50                   	push   eax
c0025de0:	e8 23 ee fe ff       	call   c0014c08 <InterruptController::InterruptController(char const*)>
c0025de5:	83 c4 10             	add    esp,0x10
c0025de8:	ba 2c d1 02 c0       	mov    edx,0xc002d12c
c0025ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df1:	89 10                	mov    DWORD PTR [eax],edx
c0025df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025dfd:	0f b6 d0             	movzx  edx,al
c0025e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e04:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e15:	0f b6 d0             	movzx  edx,al
c0025e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e1c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e2b:	8d 50 01             	lea    edx,[eax+0x1]
c0025e2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e32:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e38:	0f b6 d0             	movzx  edx,al
c0025e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e3f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e43:	83 e1 3f             	and    ecx,0x3f
c0025e46:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e54:	0f b6 d0             	movzx  edx,al
c0025e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e5b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e66:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e6c:	0f b6 d0             	movzx  edx,al
c0025e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e73:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e82:	8d 50 01             	lea    edx,[eax+0x1]
c0025e85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e89:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e8f:	0f b6 d0             	movzx  edx,al
c0025e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e96:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e9a:	83 e1 3f             	and    ecx,0x3f
c0025e9d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ea1:	90                   	nop
c0025ea2:	83 c4 0c             	add    esp,0xc
c0025ea5:	c3                   	ret    

c0025ea6 <PIC::ioWait()>:
c0025ea6:	eb 00                	jmp    c0025ea8 <PIC::ioWait()+0x2>
c0025ea8:	eb 00                	jmp    c0025eaa <PIC::ioWait()+0x4>
c0025eaa:	90                   	nop
c0025eab:	c3                   	ret    

c0025eac <PIC::getIRQReg(int)>:
c0025eac:	55                   	push   ebp
c0025ead:	89 e5                	mov    ebp,esp
c0025eaf:	83 ec 10             	sub    esp,0x10
c0025eb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025eb5:	0f b6 c0             	movzx  eax,al
c0025eb8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025ebe:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025ec1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ec4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ec8:	ee                   	out    dx,al
c0025ec9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ecc:	0f b6 c0             	movzx  eax,al
c0025ecf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025ed5:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025ed8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025edb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025edf:	ee                   	out    dx,al
c0025ee0:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025ee6:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025eea:	89 c2                	mov    edx,eax
c0025eec:	ec                   	in     al,dx
c0025eed:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025ef0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ef3:	0f b6 c0             	movzx  eax,al
c0025ef6:	c1 e0 08             	shl    eax,0x8
c0025ef9:	89 c1                	mov    ecx,eax
c0025efb:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025f01:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025f05:	89 c2                	mov    edx,eax
c0025f07:	ec                   	in     al,dx
c0025f08:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025f0b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f0e:	0f b6 c0             	movzx  eax,al
c0025f11:	09 c8                	or     eax,ecx
c0025f13:	c9                   	leave  
c0025f14:	c3                   	ret    
c0025f15:	90                   	nop

c0025f16 <PIC::eoi(unsigned char)>:
c0025f16:	55                   	push   ebp
c0025f17:	89 e5                	mov    ebp,esp
c0025f19:	83 ec 14             	sub    esp,0x14
c0025f1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f1f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025f22:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f26:	75 1e                	jne    c0025f46 <PIC::eoi(unsigned char)+0x30>
c0025f28:	6a 0b                	push   0xb
c0025f2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f2d:	e8 7a ff ff ff       	call   c0025eac <PIC::getIRQReg(int)>
c0025f32:	83 c4 08             	add    esp,0x8
c0025f35:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025f39:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025f3d:	25 80 00 00 00       	and    eax,0x80
c0025f42:	85 c0                	test   eax,eax
c0025f44:	74 5f                	je     c0025fa5 <PIC::eoi(unsigned char)+0x8f>
c0025f46:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025f4a:	75 2d                	jne    c0025f79 <PIC::eoi(unsigned char)+0x63>
c0025f4c:	6a 0b                	push   0xb
c0025f4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f51:	e8 56 ff ff ff       	call   c0025eac <PIC::getIRQReg(int)>
c0025f56:	83 c4 08             	add    esp,0x8
c0025f59:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025f5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f60:	66 85 c0             	test   ax,ax
c0025f63:	78 14                	js     c0025f79 <PIC::eoi(unsigned char)+0x63>
c0025f65:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025f6b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025f6f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f72:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f76:	ee                   	out    dx,al
c0025f77:	eb 2d                	jmp    c0025fa6 <PIC::eoi(unsigned char)+0x90>
c0025f79:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f7d:	76 12                	jbe    c0025f91 <PIC::eoi(unsigned char)+0x7b>
c0025f7f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f85:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025f89:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f8c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f90:	ee                   	out    dx,al
c0025f91:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f97:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025f9b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f9e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025fa2:	ee                   	out    dx,al
c0025fa3:	eb 01                	jmp    c0025fa6 <PIC::eoi(unsigned char)+0x90>
c0025fa5:	90                   	nop
c0025fa6:	c9                   	leave  
c0025fa7:	c3                   	ret    

c0025fa8 <PIC::remap()>:
c0025fa8:	55                   	push   ebp
c0025fa9:	89 e5                	mov    ebp,esp
c0025fab:	83 ec 48             	sub    esp,0x48
c0025fae:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025fb5:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025fbc:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025fc2:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025fc5:	89 c2                	mov    edx,eax
c0025fc7:	ec                   	in     al,dx
c0025fc8:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025fcb:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025fce:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025fd1:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025fd7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025fda:	89 c2                	mov    edx,eax
c0025fdc:	ec                   	in     al,dx
c0025fdd:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025fe0:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025fe3:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025fe6:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025fec:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025ff0:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025ff3:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025ff6:	ee                   	out    dx,al
c0025ff7:	83 ec 0c             	sub    esp,0xc
c0025ffa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ffd:	e8 a4 fe ff ff       	call   c0025ea6 <PIC::ioWait()>
c0026002:	83 c4 10             	add    esp,0x10
c0026005:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002600b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002600f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026012:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026015:	ee                   	out    dx,al
c0026016:	83 ec 0c             	sub    esp,0xc
c0026019:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002601c:	e8 85 fe ff ff       	call   c0025ea6 <PIC::ioWait()>
c0026021:	83 c4 10             	add    esp,0x10
c0026024:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026027:	0f b6 c0             	movzx  eax,al
c002602a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026030:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026033:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026036:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026039:	ee                   	out    dx,al
c002603a:	83 ec 0c             	sub    esp,0xc
c002603d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026040:	e8 61 fe ff ff       	call   c0025ea6 <PIC::ioWait()>
c0026045:	83 c4 10             	add    esp,0x10
c0026048:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002604b:	0f b6 c0             	movzx  eax,al
c002604e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026054:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026057:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002605a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002605d:	ee                   	out    dx,al
c002605e:	83 ec 0c             	sub    esp,0xc
c0026061:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026064:	e8 3d fe ff ff       	call   c0025ea6 <PIC::ioWait()>
c0026069:	83 c4 10             	add    esp,0x10
c002606c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026072:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026076:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026079:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002607c:	ee                   	out    dx,al
c002607d:	83 ec 0c             	sub    esp,0xc
c0026080:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026083:	e8 1e fe ff ff       	call   c0025ea6 <PIC::ioWait()>
c0026088:	83 c4 10             	add    esp,0x10
c002608b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026091:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026095:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026098:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002609b:	ee                   	out    dx,al
c002609c:	83 ec 0c             	sub    esp,0xc
c002609f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a2:	e8 ff fd ff ff       	call   c0025ea6 <PIC::ioWait()>
c00260a7:	83 c4 10             	add    esp,0x10
c00260aa:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00260b0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00260b4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00260b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00260ba:	ee                   	out    dx,al
c00260bb:	83 ec 0c             	sub    esp,0xc
c00260be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c1:	e8 e0 fd ff ff       	call   c0025ea6 <PIC::ioWait()>
c00260c6:	83 c4 10             	add    esp,0x10
c00260c9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00260cf:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00260d3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00260d6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00260d9:	ee                   	out    dx,al
c00260da:	83 ec 0c             	sub    esp,0xc
c00260dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e0:	e8 c1 fd ff ff       	call   c0025ea6 <PIC::ioWait()>
c00260e5:	83 c4 10             	add    esp,0x10
c00260e8:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00260ec:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00260f2:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00260f5:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00260f8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00260fb:	ee                   	out    dx,al
c00260fc:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026100:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026106:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026109:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002610c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002610f:	ee                   	out    dx,al
c0026110:	90                   	nop
c0026111:	c9                   	leave  
c0026112:	c3                   	ret    
c0026113:	90                   	nop

c0026114 <PIC::open(int, int, void*)>:
c0026114:	55                   	push   ebp
c0026115:	89 e5                	mov    ebp,esp
c0026117:	83 ec 18             	sub    esp,0x18
c002611a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026120:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026124:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026127:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002612b:	ee                   	out    dx,al
c002612c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026132:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026136:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026139:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002613d:	ee                   	out    dx,al
c002613e:	83 ec 0c             	sub    esp,0xc
c0026141:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026144:	e8 5f fe ff ff       	call   c0025fa8 <PIC::remap()>
c0026149:	83 c4 10             	add    esp,0x10
c002614c:	b8 00 00 00 00       	mov    eax,0x0
c0026151:	c9                   	leave  
c0026152:	c3                   	ret    
c0026153:	90                   	nop

c0026154 <APICTimer::close(int, int, void*)>:
c0026154:	b8 00 00 00 00       	mov    eax,0x0
c0026159:	c3                   	ret    

c002615a <apicTimerHandler(regs*, void*)>:
c002615a:	83 ec 0c             	sub    esp,0xc
c002615d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026161:	8b 00                	mov    eax,DWORD PTR [eax]
c0026163:	99                   	cdq    
c0026164:	52                   	push   edx
c0026165:	50                   	push   eax
c0026166:	6a 00                	push   0x0
c0026168:	68 00 ca 9a 3b       	push   0x3b9aca00
c002616d:	e8 8a 07 00 00       	call   c00268fc <__udivdi3>
c0026172:	83 c4 10             	add    esp,0x10
c0026175:	83 ec 08             	sub    esp,0x8
c0026178:	52                   	push   edx
c0026179:	50                   	push   eax
c002617a:	e8 d4 0a ff ff       	call   c0016c53 <timerHandler(unsigned long long)>
c002617f:	83 c4 10             	add    esp,0x10
c0026182:	90                   	nop
c0026183:	83 c4 0c             	add    esp,0xc
c0026186:	c3                   	ret    
c0026187:	90                   	nop

c0026188 <APICTimer::write(int)>:
c0026188:	53                   	push   ebx
c0026189:	83 ec 28             	sub    esp,0x28
c002618c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026190:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026194:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002619a:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c002619f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00261a5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00261ab:	83 ec 0c             	sub    esp,0xc
c00261ae:	50                   	push   eax
c00261af:	e8 de f4 ff ff       	call   c0025692 <APIC::getBase()>
c00261b4:	83 c4 10             	add    esp,0x10
c00261b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00261bb:	a1 70 e9 02 c0       	mov    eax,ds:0xc002e970
c00261c0:	8b 15 74 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e974
c00261c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00261ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00261ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261d2:	05 e0 03 00 00       	add    eax,0x3e0
c00261d7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00261dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261e1:	05 80 03 00 00       	add    eax,0x380
c00261e6:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00261ec:	fb                   	sti    
c00261ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00261f5:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00261fa:	83 d2 00             	adc    edx,0x0
c00261fd:	89 c1                	mov    ecx,eax
c00261ff:	89 d3                	mov    ebx,edx
c0026201:	a1 70 e9 02 c0       	mov    eax,ds:0xc002e970
c0026206:	8b 15 74 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e974
c002620c:	39 c8                	cmp    eax,ecx
c002620e:	89 d0                	mov    eax,edx
c0026210:	19 d8                	sbb    eax,ebx
c0026212:	73 02                	jae    c0026216 <APICTimer::write(int)+0x8e>
c0026214:	eb d7                	jmp    c00261ed <APICTimer::write(int)+0x65>
c0026216:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002621a:	05 20 03 00 00       	add    eax,0x320
c002621f:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026225:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026229:	05 90 03 00 00       	add    eax,0x390
c002622e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026230:	f7 d0                	not    eax
c0026232:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026236:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002623a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002623e:	ba 00 00 00 00       	mov    edx,0x0
c0026243:	f7 f3                	div    ebx
c0026245:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026249:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002624d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026253:	0d 00 00 02 00       	or     eax,0x20000
c0026258:	89 c2                	mov    edx,eax
c002625a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002625e:	05 20 03 00 00       	add    eax,0x320
c0026263:	89 10                	mov    DWORD PTR [eax],edx
c0026265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026269:	05 e0 03 00 00       	add    eax,0x3e0
c002626e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026278:	05 80 03 00 00       	add    eax,0x380
c002627d:	89 c2                	mov    edx,eax
c002627f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026283:	89 02                	mov    DWORD PTR [edx],eax
c0026285:	90                   	nop
c0026286:	83 c4 28             	add    esp,0x28
c0026289:	5b                   	pop    ebx
c002628a:	c3                   	ret    
c002628b:	90                   	nop

c002628c <APICTimer::open(int, int, void*)>:
c002628c:	57                   	push   edi
c002628d:	56                   	push   esi
c002628e:	53                   	push   ebx
c002628f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026293:	8b 00                	mov    eax,DWORD PTR [eax]
c0026295:	83 c0 24             	add    eax,0x24
c0026298:	8b 00                	mov    eax,DWORD PTR [eax]
c002629a:	83 ec 08             	sub    esp,0x8
c002629d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262a5:	ff d0                	call   eax
c00262a7:	83 c4 10             	add    esp,0x10
c00262aa:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c00262af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262b5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00262bb:	83 ec 0c             	sub    esp,0xc
c00262be:	50                   	push   eax
c00262bf:	e8 ce f3 ff ff       	call   c0025692 <APIC::getBase()>
c00262c4:	83 c4 10             	add    esp,0x10
c00262c7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00262cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262d7:	0f b6 f8             	movzx  edi,al
c00262da:	89 d0                	mov    eax,edx
c00262dc:	ba 00 00 00 00       	mov    edx,0x0
c00262e1:	89 c1                	mov    ecx,eax
c00262e3:	80 e5 ff             	and    ch,0xff
c00262e6:	89 cb                	mov    ebx,ecx
c00262e8:	0f b6 f2             	movzx  esi,dl
c00262eb:	89 d8                	mov    eax,ebx
c00262ed:	89 f2                	mov    edx,esi
c00262ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00262f3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00262f6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00262fa:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00262fe:	83 e0 00             	and    eax,0x0
c0026301:	09 d0                	or     eax,edx
c0026303:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002630b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026311:	8d 50 01             	lea    edx,[eax+0x1]
c0026314:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026318:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002631e:	0f b6 d0             	movzx  edx,al
c0026321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026325:	83 c2 08             	add    edx,0x8
c0026328:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002632c:	0f b6 c9             	movzx  ecx,cl
c002632f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026335:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002633d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026341:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002634f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026355:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026359:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002635f:	83 ec 0c             	sub    esp,0xc
c0026362:	51                   	push   ecx
c0026363:	6a 01                	push   0x1
c0026365:	68 5a 61 02 c0       	push   0xc002615a
c002636a:	52                   	push   edx
c002636b:	50                   	push   eax
c002636c:	e8 bf de fe ff       	call   c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026371:	83 c4 20             	add    esp,0x20
c0026374:	89 c2                	mov    edx,eax
c0026376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002637a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026380:	b8 00 00 00 00       	mov    eax,0x0
c0026385:	5b                   	pop    ebx
c0026386:	5e                   	pop    esi
c0026387:	5f                   	pop    edi
c0026388:	c3                   	ret    
c0026389:	90                   	nop

c002638a <APICTimer::APICTimer()>:
c002638a:	83 ec 0c             	sub    esp,0xc
c002638d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026391:	83 ec 08             	sub    esp,0x8
c0026394:	68 6c d1 02 c0       	push   0xc002d16c
c0026399:	50                   	push   eax
c002639a:	e8 25 08 ff ff       	call   c0016bc4 <Timer::Timer(char const*)>
c002639f:	83 c4 10             	add    esp,0x10
c00263a2:	ba 80 d1 02 c0       	mov    edx,0xc002d180
c00263a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ab:	89 10                	mov    DWORD PTR [eax],edx
c00263ad:	90                   	nop
c00263ae:	83 c4 0c             	add    esp,0xc
c00263b1:	c3                   	ret    

c00263b2 <PIT::write(int)>:
c00263b2:	83 ec 10             	sub    esp,0x10
c00263b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00263b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00263c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00263c7:	a3 a4 26 03 c0       	mov    ds:0xc00326a4,eax
c00263cc:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00263d1:	99                   	cdq    
c00263d2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00263d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263da:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00263e1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00263e6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00263ea:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00263ef:	ee                   	out    dx,al
c00263f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263f4:	0f b6 c0             	movzx  eax,al
c00263f7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00263fe:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026402:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026406:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002640b:	ee                   	out    dx,al
c002640c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026410:	c1 f8 08             	sar    eax,0x8
c0026413:	0f b6 c0             	movzx  eax,al
c0026416:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002641d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026421:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026425:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002642a:	ee                   	out    dx,al
c002642b:	90                   	nop
c002642c:	83 c4 10             	add    esp,0x10
c002642f:	c3                   	ret    

c0026430 <pitHandler(regs*, void*)>:
c0026430:	83 ec 0c             	sub    esp,0xc
c0026433:	a1 a4 26 03 c0       	mov    eax,ds:0xc00326a4
c0026438:	99                   	cdq    
c0026439:	52                   	push   edx
c002643a:	50                   	push   eax
c002643b:	6a 00                	push   0x0
c002643d:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026442:	e8 b5 04 00 00       	call   c00268fc <__udivdi3>
c0026447:	83 c4 10             	add    esp,0x10
c002644a:	83 ec 08             	sub    esp,0x8
c002644d:	52                   	push   edx
c002644e:	50                   	push   eax
c002644f:	e8 ff 07 ff ff       	call   c0016c53 <timerHandler(unsigned long long)>
c0026454:	83 c4 10             	add    esp,0x10
c0026457:	90                   	nop
c0026458:	83 c4 0c             	add    esp,0xc
c002645b:	c3                   	ret    

c002645c <PIT::open(int, int, void*)>:
c002645c:	83 ec 0c             	sub    esp,0xc
c002645f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026463:	8b 00                	mov    eax,DWORD PTR [eax]
c0026465:	83 c0 24             	add    eax,0x24
c0026468:	8b 00                	mov    eax,DWORD PTR [eax]
c002646a:	83 ec 08             	sub    esp,0x8
c002646d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026471:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026475:	ff d0                	call   eax
c0026477:	83 c4 10             	add    esp,0x10
c002647a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647e:	83 ec 0c             	sub    esp,0xc
c0026481:	6a 00                	push   0x0
c0026483:	6a 01                	push   0x1
c0026485:	68 30 64 02 c0       	push   0xc0026430
c002648a:	6a 00                	push   0x0
c002648c:	50                   	push   eax
c002648d:	e8 9e dd fe ff       	call   c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026492:	83 c4 20             	add    esp,0x20
c0026495:	89 c2                	mov    edx,eax
c0026497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002649b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00264a1:	b8 00 00 00 00       	mov    eax,0x0
c00264a6:	83 c4 0c             	add    esp,0xc
c00264a9:	c3                   	ret    

c00264aa <PIT::close(int, int, void*)>:
c00264aa:	83 ec 0c             	sub    esp,0xc
c00264ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b1:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00264bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264bf:	6a 01                	push   0x1
c00264c1:	68 30 64 02 c0       	push   0xc0026430
c00264c6:	6a 00                	push   0x0
c00264c8:	50                   	push   eax
c00264c9:	e8 a0 dd fe ff       	call   c001426e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00264ce:	83 c4 10             	add    esp,0x10
c00264d1:	b8 00 00 00 00       	mov    eax,0x0
c00264d6:	83 c4 0c             	add    esp,0xc
c00264d9:	c3                   	ret    

c00264da <PIT::PIT()>:
c00264da:	83 ec 0c             	sub    esp,0xc
c00264dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e1:	83 ec 08             	sub    esp,0x8
c00264e4:	68 a8 d1 02 c0       	push   0xc002d1a8
c00264e9:	50                   	push   eax
c00264ea:	e8 d5 06 ff ff       	call   c0016bc4 <Timer::Timer(char const*)>
c00264ef:	83 c4 10             	add    esp,0x10
c00264f2:	ba d0 d1 02 c0       	mov    edx,0xc002d1d0
c00264f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264fb:	89 10                	mov    DWORD PTR [eax],edx
c00264fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026501:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026507:	0f b6 d0             	movzx  edx,al
c002650a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002650e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026519:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002651f:	0f b6 d0             	movzx  edx,al
c0026522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026526:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002652b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002652f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026535:	8d 50 01             	lea    edx,[eax+0x1]
c0026538:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002653c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026542:	0f b6 d0             	movzx  edx,al
c0026545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026549:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002654d:	83 e1 3f             	and    ecx,0x3f
c0026550:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026554:	90                   	nop
c0026555:	83 c4 0c             	add    esp,0xc
c0026558:	c3                   	ret    
c0026559:	66 90                	xchg   ax,ax
c002655b:	66 90                	xchg   ax,ax
c002655d:	66 90                	xchg   ax,ax
c002655f:	90                   	nop

c0026560 <avxDetect>:
c0026560:	b8 00 00 00 00       	mov    eax,0x0
c0026565:	c3                   	ret    

c0026566 <avxSave>:
c0026566:	c3                   	ret    

c0026567 <avxLoad>:
c0026567:	c3                   	ret    

c0026568 <avxInit>:
c0026568:	c3                   	ret    

c0026569 <avxClose>:
c0026569:	c3                   	ret    

c002656a <wouldSheSayYes>:
c002656a:	c3                   	ret    
c002656b:	49                   	dec    ecx
c002656c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026570:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026574:	75 20                	jne    c0026596 <sseDetect.noSSE+0x1>
c0026576:	4e                   	dec    esi
c0026577:	79 61                	jns    c00265da <x87Detect+0x14>
c0026579:	68 2e 2e 2e 00       	push   0x2e2e2e
c002657e:	66 90                	xchg   ax,ax

c0026580 <absolutelyNoChanceInHell>:
c0026580:	b8 01 00 00 00       	mov    eax,0x1
c0026585:	0f a2                	cpuid  
c0026587:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002658d:	74 06                	je     c0026595 <sseDetect.noSSE>
c002658f:	b8 01 00 00 00       	mov    eax,0x1
c0026594:	c3                   	ret    

c0026595 <sseDetect.noSSE>:
c0026595:	31 c0                	xor    eax,eax
c0026597:	c3                   	ret    

c0026598 <sseSave>:
c0026598:	0f ae 44 24 08       	fxsave [esp+0x8]
c002659d:	c3                   	ret    

c002659e <sseLoad>:
c002659e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00265a3:	c3                   	ret    

c00265a4 <sseInit>:
c00265a4:	e8 43 00 00 00       	call   c00265ec <x87Init>
c00265a9:	0f 20 e0             	mov    eax,cr4
c00265ac:	66 0d 00 06          	or     ax,0x600
c00265b0:	0f 22 e0             	mov    cr4,eax
c00265b3:	c3                   	ret    

c00265b4 <sseClose>:
c00265b4:	c3                   	ret    
c00265b5:	66 90                	xchg   ax,ax
c00265b7:	66 90                	xchg   ax,ax
c00265b9:	66 90                	xchg   ax,ax
c00265bb:	66 90                	xchg   ax,ax
c00265bd:	66 90                	xchg   ax,ax
c00265bf:	90                   	nop

c00265c0 <value_37F>:
c00265c0:	7f 03                	jg     c00265c5 <value_37A+0x1>

c00265c2 <value_37E>:
c00265c2:	7e 03                	jle    c00265c7 <x87Detect+0x1>

c00265c4 <value_37A>:
c00265c4:	7a 03                	jp     c00265c9 <x87Detect+0x3>

c00265c6 <x87Detect>:
c00265c6:	b8 01 00 00 00       	mov    eax,0x1
c00265cb:	0f a2                	cpuid  
c00265cd:	f7 c2 01 00 00 00    	test   edx,0x1
c00265d3:	74 06                	je     c00265db <x87Detect.nox87>
c00265d5:	b8 01 00 00 00       	mov    eax,0x1
c00265da:	c3                   	ret    

c00265db <x87Detect.nox87>:
c00265db:	b8 00 00 00 00       	mov    eax,0x0
c00265e0:	c3                   	ret    

c00265e1 <x87Save>:
c00265e1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00265e6:	c3                   	ret    

c00265e7 <x87Load>:
c00265e7:	dd 64 24 08          	frstor [esp+0x8]
c00265eb:	c3                   	ret    

c00265ec <x87Init>:
c00265ec:	9b db e3             	finit  
c00265ef:	0f 20 c0             	mov    eax,cr0
c00265f2:	66 25 fb ff          	and    ax,0xfffb
c00265f6:	66 0d 22 00          	or     ax,0x22
c00265fa:	0f 22 c0             	mov    cr0,eax
c00265fd:	0f 06                	clts   
c00265ff:	d9 2d c4 65 02 c0    	fldcw  WORD PTR ds:0xc00265c4
c0026605:	c3                   	ret    

c0026606 <x87Close>:
c0026606:	c3                   	ret    
c0026607:	90                   	nop

c0026608 <__do_global_ctors_aux>:
c0026608:	a1 4c 91 02 c0       	mov    eax,ds:0xc002914c
c002660d:	83 f8 ff             	cmp    eax,0xffffffff
c0026610:	74 1a                	je     c002662c <__do_global_ctors_aux+0x24>
c0026612:	55                   	push   ebp
c0026613:	89 e5                	mov    ebp,esp
c0026615:	53                   	push   ebx
c0026616:	52                   	push   edx
c0026617:	bb 4c 91 02 c0       	mov    ebx,0xc002914c
c002661c:	ff d0                	call   eax
c002661e:	83 eb 04             	sub    ebx,0x4
c0026621:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026623:	83 f8 ff             	cmp    eax,0xffffffff
c0026626:	75 f4                	jne    c002661c <__do_global_ctors_aux+0x14>
c0026628:	58                   	pop    eax
c0026629:	5b                   	pop    ebx
c002662a:	5d                   	pop    ebp
c002662b:	c3                   	ret    
c002662c:	c3                   	ret    
c002662d:	66 90                	xchg   ax,ax
c002662f:	90                   	nop

c0026630 <__divdi3>:
c0026630:	55                   	push   ebp
c0026631:	57                   	push   edi
c0026632:	56                   	push   esi
c0026633:	53                   	push   ebx
c0026634:	83 ec 1c             	sub    esp,0x1c
c0026637:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002663b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002663f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026642:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026646:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002664a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002664e:	85 db                	test   ebx,ebx
c0026650:	0f 88 8e 00 00 00    	js     c00266e4 <__divdi3+0xb4>
c0026656:	89 dd                	mov    ebp,ebx
c0026658:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026660:	89 d3                	mov    ebx,edx
c0026662:	85 d2                	test   edx,edx
c0026664:	79 0d                	jns    c0026673 <__divdi3+0x43>
c0026666:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002666a:	f7 d8                	neg    eax
c002666c:	83 d2 00             	adc    edx,0x0
c002666f:	f7 da                	neg    edx
c0026671:	89 d3                	mov    ebx,edx
c0026673:	89 c7                	mov    edi,eax
c0026675:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026678:	85 db                	test   ebx,ebx
c002667a:	75 48                	jne    c00266c4 <__divdi3+0x94>
c002667c:	39 ef                	cmp    edi,ebp
c002667e:	76 24                	jbe    c00266a4 <__divdi3+0x74>
c0026680:	89 ea                	mov    edx,ebp
c0026682:	f7 f7                	div    edi
c0026684:	89 c1                	mov    ecx,eax
c0026686:	31 f6                	xor    esi,esi
c0026688:	89 c8                	mov    eax,ecx
c002668a:	89 f2                	mov    edx,esi
c002668c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026690:	85 c9                	test   ecx,ecx
c0026692:	74 07                	je     c002669b <__divdi3+0x6b>
c0026694:	f7 d8                	neg    eax
c0026696:	83 d2 00             	adc    edx,0x0
c0026699:	f7 da                	neg    edx
c002669b:	83 c4 1c             	add    esp,0x1c
c002669e:	5b                   	pop    ebx
c002669f:	5e                   	pop    esi
c00266a0:	5f                   	pop    edi
c00266a1:	5d                   	pop    ebp
c00266a2:	c3                   	ret    
c00266a3:	90                   	nop
c00266a4:	85 ff                	test   edi,edi
c00266a6:	75 0b                	jne    c00266b3 <__divdi3+0x83>
c00266a8:	b8 01 00 00 00       	mov    eax,0x1
c00266ad:	31 d2                	xor    edx,edx
c00266af:	f7 f3                	div    ebx
c00266b1:	89 c7                	mov    edi,eax
c00266b3:	31 d2                	xor    edx,edx
c00266b5:	89 e8                	mov    eax,ebp
c00266b7:	f7 f7                	div    edi
c00266b9:	89 c6                	mov    esi,eax
c00266bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00266be:	f7 f7                	div    edi
c00266c0:	89 c1                	mov    ecx,eax
c00266c2:	eb c4                	jmp    c0026688 <__divdi3+0x58>
c00266c4:	39 eb                	cmp    ebx,ebp
c00266c6:	77 3c                	ja     c0026704 <__divdi3+0xd4>
c00266c8:	0f bd f3             	bsr    esi,ebx
c00266cb:	83 f6 1f             	xor    esi,0x1f
c00266ce:	75 40                	jne    c0026710 <__divdi3+0xe0>
c00266d0:	39 eb                	cmp    ebx,ebp
c00266d2:	72 09                	jb     c00266dd <__divdi3+0xad>
c00266d4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00266d7:	0f 87 97 00 00 00    	ja     c0026774 <__divdi3+0x144>
c00266dd:	b9 01 00 00 00       	mov    ecx,0x1
c00266e2:	eb a4                	jmp    c0026688 <__divdi3+0x58>
c00266e4:	f7 d9                	neg    ecx
c00266e6:	83 d3 00             	adc    ebx,0x0
c00266e9:	f7 db                	neg    ebx
c00266eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00266ee:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266f2:	89 dd                	mov    ebp,ebx
c00266f4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00266fc:	e9 5f ff ff ff       	jmp    c0026660 <__divdi3+0x30>
c0026701:	8d 76 00             	lea    esi,[esi+0x0]
c0026704:	31 f6                	xor    esi,esi
c0026706:	31 c9                	xor    ecx,ecx
c0026708:	e9 7b ff ff ff       	jmp    c0026688 <__divdi3+0x58>
c002670d:	8d 76 00             	lea    esi,[esi+0x0]
c0026710:	b8 20 00 00 00       	mov    eax,0x20
c0026715:	29 f0                	sub    eax,esi
c0026717:	89 f1                	mov    ecx,esi
c0026719:	d3 e3                	shl    ebx,cl
c002671b:	89 fa                	mov    edx,edi
c002671d:	88 c1                	mov    cl,al
c002671f:	d3 ea                	shr    edx,cl
c0026721:	09 da                	or     edx,ebx
c0026723:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026727:	89 f1                	mov    ecx,esi
c0026729:	d3 e7                	shl    edi,cl
c002672b:	89 eb                	mov    ebx,ebp
c002672d:	88 c1                	mov    cl,al
c002672f:	d3 eb                	shr    ebx,cl
c0026731:	89 f1                	mov    ecx,esi
c0026733:	d3 e5                	shl    ebp,cl
c0026735:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026738:	88 c1                	mov    cl,al
c002673a:	d3 ea                	shr    edx,cl
c002673c:	09 d5                	or     ebp,edx
c002673e:	89 e8                	mov    eax,ebp
c0026740:	89 da                	mov    edx,ebx
c0026742:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026746:	89 d3                	mov    ebx,edx
c0026748:	89 c5                	mov    ebp,eax
c002674a:	f7 e7                	mul    edi
c002674c:	39 d3                	cmp    ebx,edx
c002674e:	72 18                	jb     c0026768 <__divdi3+0x138>
c0026750:	74 0a                	je     c002675c <__divdi3+0x12c>
c0026752:	89 e9                	mov    ecx,ebp
c0026754:	31 f6                	xor    esi,esi
c0026756:	e9 2d ff ff ff       	jmp    c0026688 <__divdi3+0x58>
c002675b:	90                   	nop
c002675c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002675f:	89 f1                	mov    ecx,esi
c0026761:	d3 e7                	shl    edi,cl
c0026763:	39 c7                	cmp    edi,eax
c0026765:	73 eb                	jae    c0026752 <__divdi3+0x122>
c0026767:	90                   	nop
c0026768:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002676b:	31 f6                	xor    esi,esi
c002676d:	e9 16 ff ff ff       	jmp    c0026688 <__divdi3+0x58>
c0026772:	66 90                	xchg   ax,ax
c0026774:	31 c9                	xor    ecx,ecx
c0026776:	e9 0d ff ff ff       	jmp    c0026688 <__divdi3+0x58>
c002677b:	90                   	nop

c002677c <__moddi3>:
c002677c:	55                   	push   ebp
c002677d:	57                   	push   edi
c002677e:	56                   	push   esi
c002677f:	53                   	push   ebx
c0026780:	83 ec 2c             	sub    esp,0x2c
c0026783:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026787:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002678b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002678f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026793:	85 db                	test   ebx,ebx
c0026795:	0f 88 85 00 00 00    	js     c0026820 <__moddi3+0xa4>
c002679b:	89 de                	mov    esi,ebx
c002679d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00267a5:	89 d7                	mov    edi,edx
c00267a7:	85 d2                	test   edx,edx
c00267a9:	79 09                	jns    c00267b4 <__moddi3+0x38>
c00267ab:	f7 d8                	neg    eax
c00267ad:	83 d2 00             	adc    edx,0x0
c00267b0:	f7 da                	neg    edx
c00267b2:	89 d7                	mov    edi,edx
c00267b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00267b8:	89 cd                	mov    ebp,ecx
c00267ba:	85 ff                	test   edi,edi
c00267bc:	75 52                	jne    c0026810 <__moddi3+0x94>
c00267be:	89 c3                	mov    ebx,eax
c00267c0:	39 f0                	cmp    eax,esi
c00267c2:	76 24                	jbe    c00267e8 <__moddi3+0x6c>
c00267c4:	89 c8                	mov    eax,ecx
c00267c6:	89 f2                	mov    edx,esi
c00267c8:	f7 f3                	div    ebx
c00267ca:	89 d6                	mov    esi,edx
c00267cc:	89 f0                	mov    eax,esi
c00267ce:	31 d2                	xor    edx,edx
c00267d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267d4:	85 c9                	test   ecx,ecx
c00267d6:	74 07                	je     c00267df <__moddi3+0x63>
c00267d8:	f7 d8                	neg    eax
c00267da:	83 d2 00             	adc    edx,0x0
c00267dd:	f7 da                	neg    edx
c00267df:	83 c4 2c             	add    esp,0x2c
c00267e2:	5b                   	pop    ebx
c00267e3:	5e                   	pop    esi
c00267e4:	5f                   	pop    edi
c00267e5:	5d                   	pop    ebp
c00267e6:	c3                   	ret    
c00267e7:	90                   	nop
c00267e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00267ec:	85 db                	test   ebx,ebx
c00267ee:	75 0d                	jne    c00267fd <__moddi3+0x81>
c00267f0:	b8 01 00 00 00       	mov    eax,0x1
c00267f5:	31 d2                	xor    edx,edx
c00267f7:	f7 f7                	div    edi
c00267f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00267fd:	89 f0                	mov    eax,esi
c00267ff:	31 d2                	xor    edx,edx
c0026801:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026805:	f7 f7                	div    edi
c0026807:	89 e8                	mov    eax,ebp
c0026809:	f7 f7                	div    edi
c002680b:	89 d6                	mov    esi,edx
c002680d:	eb bd                	jmp    c00267cc <__moddi3+0x50>
c002680f:	90                   	nop
c0026810:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026814:	39 f7                	cmp    edi,esi
c0026816:	76 20                	jbe    c0026838 <__moddi3+0xbc>
c0026818:	89 c8                	mov    eax,ecx
c002681a:	89 f2                	mov    edx,esi
c002681c:	eb b2                	jmp    c00267d0 <__moddi3+0x54>
c002681e:	66 90                	xchg   ax,ax
c0026820:	f7 d9                	neg    ecx
c0026822:	83 d3 00             	adc    ebx,0x0
c0026825:	f7 db                	neg    ebx
c0026827:	89 de                	mov    esi,ebx
c0026829:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026831:	e9 6f ff ff ff       	jmp    c00267a5 <__moddi3+0x29>
c0026836:	66 90                	xchg   ax,ax
c0026838:	0f bd c7             	bsr    eax,edi
c002683b:	83 f0 1f             	xor    eax,0x1f
c002683e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026842:	75 24                	jne    c0026868 <__moddi3+0xec>
c0026844:	39 f7                	cmp    edi,esi
c0026846:	72 06                	jb     c002684e <__moddi3+0xd2>
c0026848:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002684c:	77 0c                	ja     c002685a <__moddi3+0xde>
c002684e:	89 e9                	mov    ecx,ebp
c0026850:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026854:	19 fe                	sbb    esi,edi
c0026856:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002685a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002685e:	89 f2                	mov    edx,esi
c0026860:	e9 6b ff ff ff       	jmp    c00267d0 <__moddi3+0x54>
c0026865:	8d 76 00             	lea    esi,[esi+0x0]
c0026868:	b8 20 00 00 00       	mov    eax,0x20
c002686d:	89 c2                	mov    edx,eax
c002686f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026873:	29 da                	sub    edx,ebx
c0026875:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026879:	88 d9                	mov    cl,bl
c002687b:	d3 e7                	shl    edi,cl
c002687d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026881:	88 d1                	mov    cl,dl
c0026883:	d3 e8                	shr    eax,cl
c0026885:	09 c7                	or     edi,eax
c0026887:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002688b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002688f:	89 d8                	mov    eax,ebx
c0026891:	88 d9                	mov    cl,bl
c0026893:	d3 e7                	shl    edi,cl
c0026895:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026899:	89 f3                	mov    ebx,esi
c002689b:	88 d1                	mov    cl,dl
c002689d:	d3 eb                	shr    ebx,cl
c002689f:	89 c7                	mov    edi,eax
c00268a1:	88 c1                	mov    cl,al
c00268a3:	d3 e6                	shl    esi,cl
c00268a5:	89 e8                	mov    eax,ebp
c00268a7:	88 d1                	mov    cl,dl
c00268a9:	d3 e8                	shr    eax,cl
c00268ab:	09 f0                	or     eax,esi
c00268ad:	89 f9                	mov    ecx,edi
c00268af:	d3 e5                	shl    ebp,cl
c00268b1:	89 da                	mov    edx,ebx
c00268b3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00268b7:	89 d3                	mov    ebx,edx
c00268b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268bd:	89 c6                	mov    esi,eax
c00268bf:	89 d1                	mov    ecx,edx
c00268c1:	39 d3                	cmp    ebx,edx
c00268c3:	72 27                	jb     c00268ec <__moddi3+0x170>
c00268c5:	74 21                	je     c00268e8 <__moddi3+0x16c>
c00268c7:	29 f5                	sub    ebp,esi
c00268c9:	19 cb                	sbb    ebx,ecx
c00268cb:	89 de                	mov    esi,ebx
c00268cd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00268d1:	d3 e6                	shl    esi,cl
c00268d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00268d7:	89 f9                	mov    ecx,edi
c00268d9:	d3 ed                	shr    ebp,cl
c00268db:	09 ee                	or     esi,ebp
c00268dd:	89 f0                	mov    eax,esi
c00268df:	d3 eb                	shr    ebx,cl
c00268e1:	89 da                	mov    edx,ebx
c00268e3:	e9 e8 fe ff ff       	jmp    c00267d0 <__moddi3+0x54>
c00268e8:	39 c5                	cmp    ebp,eax
c00268ea:	73 db                	jae    c00268c7 <__moddi3+0x14b>
c00268ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00268f0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00268f4:	89 d1                	mov    ecx,edx
c00268f6:	89 c6                	mov    esi,eax
c00268f8:	eb cd                	jmp    c00268c7 <__moddi3+0x14b>
c00268fa:	66 90                	xchg   ax,ax

c00268fc <__udivdi3>:
c00268fc:	55                   	push   ebp
c00268fd:	57                   	push   edi
c00268fe:	56                   	push   esi
c00268ff:	53                   	push   ebx
c0026900:	83 ec 1c             	sub    esp,0x1c
c0026903:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026907:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002690b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002690f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026913:	85 d2                	test   edx,edx
c0026915:	75 41                	jne    c0026958 <__udivdi3+0x5c>
c0026917:	39 f7                	cmp    edi,esi
c0026919:	76 15                	jbe    c0026930 <__udivdi3+0x34>
c002691b:	89 e8                	mov    eax,ebp
c002691d:	89 f2                	mov    edx,esi
c002691f:	f7 f7                	div    edi
c0026921:	31 db                	xor    ebx,ebx
c0026923:	89 da                	mov    edx,ebx
c0026925:	83 c4 1c             	add    esp,0x1c
c0026928:	5b                   	pop    ebx
c0026929:	5e                   	pop    esi
c002692a:	5f                   	pop    edi
c002692b:	5d                   	pop    ebp
c002692c:	c3                   	ret    
c002692d:	8d 76 00             	lea    esi,[esi+0x0]
c0026930:	89 f9                	mov    ecx,edi
c0026932:	85 ff                	test   edi,edi
c0026934:	75 0b                	jne    c0026941 <__udivdi3+0x45>
c0026936:	b8 01 00 00 00       	mov    eax,0x1
c002693b:	31 d2                	xor    edx,edx
c002693d:	f7 f7                	div    edi
c002693f:	89 c1                	mov    ecx,eax
c0026941:	31 d2                	xor    edx,edx
c0026943:	89 f0                	mov    eax,esi
c0026945:	f7 f1                	div    ecx
c0026947:	89 c3                	mov    ebx,eax
c0026949:	89 e8                	mov    eax,ebp
c002694b:	f7 f1                	div    ecx
c002694d:	89 da                	mov    edx,ebx
c002694f:	83 c4 1c             	add    esp,0x1c
c0026952:	5b                   	pop    ebx
c0026953:	5e                   	pop    esi
c0026954:	5f                   	pop    edi
c0026955:	5d                   	pop    ebp
c0026956:	c3                   	ret    
c0026957:	90                   	nop
c0026958:	39 f2                	cmp    edx,esi
c002695a:	77 1c                	ja     c0026978 <__udivdi3+0x7c>
c002695c:	0f bd da             	bsr    ebx,edx
c002695f:	83 f3 1f             	xor    ebx,0x1f
c0026962:	75 24                	jne    c0026988 <__udivdi3+0x8c>
c0026964:	39 f2                	cmp    edx,esi
c0026966:	72 08                	jb     c0026970 <__udivdi3+0x74>
c0026968:	39 ef                	cmp    edi,ebp
c002696a:	0f 87 84 00 00 00    	ja     c00269f4 <__udivdi3+0xf8>
c0026970:	b8 01 00 00 00       	mov    eax,0x1
c0026975:	eb ac                	jmp    c0026923 <__udivdi3+0x27>
c0026977:	90                   	nop
c0026978:	31 db                	xor    ebx,ebx
c002697a:	31 c0                	xor    eax,eax
c002697c:	89 da                	mov    edx,ebx
c002697e:	83 c4 1c             	add    esp,0x1c
c0026981:	5b                   	pop    ebx
c0026982:	5e                   	pop    esi
c0026983:	5f                   	pop    edi
c0026984:	5d                   	pop    ebp
c0026985:	c3                   	ret    
c0026986:	66 90                	xchg   ax,ax
c0026988:	b8 20 00 00 00       	mov    eax,0x20
c002698d:	29 d8                	sub    eax,ebx
c002698f:	88 d9                	mov    cl,bl
c0026991:	d3 e2                	shl    edx,cl
c0026993:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026997:	89 fa                	mov    edx,edi
c0026999:	88 c1                	mov    cl,al
c002699b:	d3 ea                	shr    edx,cl
c002699d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00269a1:	09 d1                	or     ecx,edx
c00269a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00269a7:	88 d9                	mov    cl,bl
c00269a9:	d3 e7                	shl    edi,cl
c00269ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00269af:	89 f7                	mov    edi,esi
c00269b1:	88 c1                	mov    cl,al
c00269b3:	d3 ef                	shr    edi,cl
c00269b5:	88 d9                	mov    cl,bl
c00269b7:	d3 e6                	shl    esi,cl
c00269b9:	89 ea                	mov    edx,ebp
c00269bb:	88 c1                	mov    cl,al
c00269bd:	d3 ea                	shr    edx,cl
c00269bf:	09 d6                	or     esi,edx
c00269c1:	89 f0                	mov    eax,esi
c00269c3:	89 fa                	mov    edx,edi
c00269c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00269c9:	89 d7                	mov    edi,edx
c00269cb:	89 c6                	mov    esi,eax
c00269cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269d1:	39 d7                	cmp    edi,edx
c00269d3:	72 13                	jb     c00269e8 <__udivdi3+0xec>
c00269d5:	74 09                	je     c00269e0 <__udivdi3+0xe4>
c00269d7:	89 f0                	mov    eax,esi
c00269d9:	31 db                	xor    ebx,ebx
c00269db:	e9 43 ff ff ff       	jmp    c0026923 <__udivdi3+0x27>
c00269e0:	88 d9                	mov    cl,bl
c00269e2:	d3 e5                	shl    ebp,cl
c00269e4:	39 c5                	cmp    ebp,eax
c00269e6:	73 ef                	jae    c00269d7 <__udivdi3+0xdb>
c00269e8:	8d 46 ff             	lea    eax,[esi-0x1]
c00269eb:	31 db                	xor    ebx,ebx
c00269ed:	e9 31 ff ff ff       	jmp    c0026923 <__udivdi3+0x27>
c00269f2:	66 90                	xchg   ax,ax
c00269f4:	31 c0                	xor    eax,eax
c00269f6:	e9 28 ff ff ff       	jmp    c0026923 <__udivdi3+0x27>
c00269fb:	90                   	nop

c00269fc <__umoddi3>:
c00269fc:	55                   	push   ebp
c00269fd:	57                   	push   edi
c00269fe:	56                   	push   esi
c00269ff:	53                   	push   ebx
c0026a00:	83 ec 1c             	sub    esp,0x1c
c0026a03:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026a07:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026a0b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026a13:	89 da                	mov    edx,ebx
c0026a15:	85 c0                	test   eax,eax
c0026a17:	75 37                	jne    c0026a50 <__umoddi3+0x54>
c0026a19:	39 df                	cmp    edi,ebx
c0026a1b:	76 13                	jbe    c0026a30 <__umoddi3+0x34>
c0026a1d:	89 f0                	mov    eax,esi
c0026a1f:	f7 f7                	div    edi
c0026a21:	89 d0                	mov    eax,edx
c0026a23:	31 d2                	xor    edx,edx
c0026a25:	83 c4 1c             	add    esp,0x1c
c0026a28:	5b                   	pop    ebx
c0026a29:	5e                   	pop    esi
c0026a2a:	5f                   	pop    edi
c0026a2b:	5d                   	pop    ebp
c0026a2c:	c3                   	ret    
c0026a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a30:	89 fd                	mov    ebp,edi
c0026a32:	85 ff                	test   edi,edi
c0026a34:	75 0b                	jne    c0026a41 <__umoddi3+0x45>
c0026a36:	b8 01 00 00 00       	mov    eax,0x1
c0026a3b:	31 d2                	xor    edx,edx
c0026a3d:	f7 f7                	div    edi
c0026a3f:	89 c5                	mov    ebp,eax
c0026a41:	89 d8                	mov    eax,ebx
c0026a43:	31 d2                	xor    edx,edx
c0026a45:	f7 f5                	div    ebp
c0026a47:	89 f0                	mov    eax,esi
c0026a49:	f7 f5                	div    ebp
c0026a4b:	89 d0                	mov    eax,edx
c0026a4d:	eb d4                	jmp    c0026a23 <__umoddi3+0x27>
c0026a4f:	90                   	nop
c0026a50:	89 f1                	mov    ecx,esi
c0026a52:	39 d8                	cmp    eax,ebx
c0026a54:	76 0a                	jbe    c0026a60 <__umoddi3+0x64>
c0026a56:	89 f0                	mov    eax,esi
c0026a58:	83 c4 1c             	add    esp,0x1c
c0026a5b:	5b                   	pop    ebx
c0026a5c:	5e                   	pop    esi
c0026a5d:	5f                   	pop    edi
c0026a5e:	5d                   	pop    ebp
c0026a5f:	c3                   	ret    
c0026a60:	0f bd e8             	bsr    ebp,eax
c0026a63:	83 f5 1f             	xor    ebp,0x1f
c0026a66:	75 1c                	jne    c0026a84 <__umoddi3+0x88>
c0026a68:	39 d8                	cmp    eax,ebx
c0026a6a:	72 04                	jb     c0026a70 <__umoddi3+0x74>
c0026a6c:	39 f7                	cmp    edi,esi
c0026a6e:	77 08                	ja     c0026a78 <__umoddi3+0x7c>
c0026a70:	89 da                	mov    edx,ebx
c0026a72:	29 fe                	sub    esi,edi
c0026a74:	19 c2                	sbb    edx,eax
c0026a76:	89 f1                	mov    ecx,esi
c0026a78:	89 c8                	mov    eax,ecx
c0026a7a:	83 c4 1c             	add    esp,0x1c
c0026a7d:	5b                   	pop    ebx
c0026a7e:	5e                   	pop    esi
c0026a7f:	5f                   	pop    edi
c0026a80:	5d                   	pop    ebp
c0026a81:	c3                   	ret    
c0026a82:	66 90                	xchg   ax,ax
c0026a84:	ba 20 00 00 00       	mov    edx,0x20
c0026a89:	29 ea                	sub    edx,ebp
c0026a8b:	89 e9                	mov    ecx,ebp
c0026a8d:	d3 e0                	shl    eax,cl
c0026a8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a93:	89 f8                	mov    eax,edi
c0026a95:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026a99:	88 d1                	mov    cl,dl
c0026a9b:	d3 e8                	shr    eax,cl
c0026a9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026aa1:	09 c1                	or     ecx,eax
c0026aa3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026aa7:	89 e9                	mov    ecx,ebp
c0026aa9:	d3 e7                	shl    edi,cl
c0026aab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026aaf:	89 d8                	mov    eax,ebx
c0026ab1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026ab5:	88 d1                	mov    cl,dl
c0026ab7:	d3 e8                	shr    eax,cl
c0026ab9:	89 c7                	mov    edi,eax
c0026abb:	89 e9                	mov    ecx,ebp
c0026abd:	d3 e3                	shl    ebx,cl
c0026abf:	89 f0                	mov    eax,esi
c0026ac1:	88 d1                	mov    cl,dl
c0026ac3:	d3 e8                	shr    eax,cl
c0026ac5:	09 d8                	or     eax,ebx
c0026ac7:	89 e9                	mov    ecx,ebp
c0026ac9:	d3 e6                	shl    esi,cl
c0026acb:	89 f3                	mov    ebx,esi
c0026acd:	89 fa                	mov    edx,edi
c0026acf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026ad3:	89 d1                	mov    ecx,edx
c0026ad5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ad9:	89 c6                	mov    esi,eax
c0026adb:	89 d7                	mov    edi,edx
c0026add:	39 d1                	cmp    ecx,edx
c0026adf:	72 27                	jb     c0026b08 <__umoddi3+0x10c>
c0026ae1:	74 21                	je     c0026b04 <__umoddi3+0x108>
c0026ae3:	89 ca                	mov    edx,ecx
c0026ae5:	29 f3                	sub    ebx,esi
c0026ae7:	19 fa                	sbb    edx,edi
c0026ae9:	89 d0                	mov    eax,edx
c0026aeb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026aef:	d3 e0                	shl    eax,cl
c0026af1:	89 e9                	mov    ecx,ebp
c0026af3:	d3 eb                	shr    ebx,cl
c0026af5:	09 d8                	or     eax,ebx
c0026af7:	d3 ea                	shr    edx,cl
c0026af9:	83 c4 1c             	add    esp,0x1c
c0026afc:	5b                   	pop    ebx
c0026afd:	5e                   	pop    esi
c0026afe:	5f                   	pop    edi
c0026aff:	5d                   	pop    ebp
c0026b00:	c3                   	ret    
c0026b01:	8d 76 00             	lea    esi,[esi+0x0]
c0026b04:	39 c3                	cmp    ebx,eax
c0026b06:	73 db                	jae    c0026ae3 <__umoddi3+0xe7>
c0026b08:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026b0c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026b10:	89 d7                	mov    edi,edx
c0026b12:	89 c6                	mov    esi,eax
c0026b14:	eb cd                	jmp    c0026ae3 <__umoddi3+0xe7>

c0026b16 <__addsf3>:
c0026b16:	55                   	push   ebp
c0026b17:	89 e5                	mov    ebp,esp
c0026b19:	57                   	push   edi
c0026b1a:	56                   	push   esi
c0026b1b:	53                   	push   ebx
c0026b1c:	83 ec 08             	sub    esp,0x8
c0026b1f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026b22:	89 fa                	mov    edx,edi
c0026b24:	89 f8                	mov    eax,edi
c0026b26:	c1 f8 17             	sar    eax,0x17
c0026b29:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026b2c:	c1 e2 08             	shl    edx,0x8
c0026b2f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026b35:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026b38:	89 de                	mov    esi,ebx
c0026b3a:	c1 fe 17             	sar    esi,0x17
c0026b3d:	c1 e3 08             	shl    ebx,0x8
c0026b40:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026b46:	31 f0                	xor    eax,esi
c0026b48:	0f 88 3b 01 00 00    	js     c0026c89 <__addsf3+0x173>
c0026b4e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026b51:	29 f1                	sub    ecx,esi
c0026b53:	85 c9                	test   ecx,ecx
c0026b55:	7e 54                	jle    c0026bab <__addsf3+0x95>
c0026b57:	89 f0                	mov    eax,esi
c0026b59:	84 c0                	test   al,al
c0026b5b:	75 10                	jne    c0026b6d <__addsf3+0x57>
c0026b5d:	85 db                	test   ebx,ebx
c0026b5f:	0f 84 aa 02 00 00    	je     c0026e0f <__addsf3+0x2f9>
c0026b65:	49                   	dec    ecx
c0026b66:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b69:	74 38                	je     c0026ba3 <__addsf3+0x8d>
c0026b6b:	eb 13                	jmp    c0026b80 <__addsf3+0x6a>
c0026b6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b70:	f7 d0                	not    eax
c0026b72:	84 c0                	test   al,al
c0026b74:	0f 84 95 02 00 00    	je     c0026e0f <__addsf3+0x2f9>
c0026b7a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b80:	83 f9 1f             	cmp    ecx,0x1f
c0026b83:	0f 8f 86 02 00 00    	jg     c0026e0f <__addsf3+0x2f9>
c0026b89:	89 de                	mov    esi,ebx
c0026b8b:	d3 ee                	shr    esi,cl
c0026b8d:	b8 20 00 00 00       	mov    eax,0x20
c0026b92:	29 c8                	sub    eax,ecx
c0026b94:	89 c1                	mov    ecx,eax
c0026b96:	d3 e3                	shl    ebx,cl
c0026b98:	31 c0                	xor    eax,eax
c0026b9a:	85 db                	test   ebx,ebx
c0026b9c:	0f 95 c0             	setne  al
c0026b9f:	09 f0                	or     eax,esi
c0026ba1:	01 d0                	add    eax,edx
c0026ba3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ba6:	e9 b6 00 00 00       	jmp    c0026c61 <__addsf3+0x14b>
c0026bab:	74 5c                	je     c0026c09 <__addsf3+0xf3>
c0026bad:	89 f1                	mov    ecx,esi
c0026baf:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026bb2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bb5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026bb9:	75 14                	jne    c0026bcf <__addsf3+0xb9>
c0026bbb:	85 d2                	test   edx,edx
c0026bbd:	0f 84 4c 02 00 00    	je     c0026e0f <__addsf3+0x2f9>
c0026bc3:	49                   	dec    ecx
c0026bc4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026bc7:	0f 84 94 00 00 00    	je     c0026c61 <__addsf3+0x14b>
c0026bcd:	eb 12                	jmp    c0026be1 <__addsf3+0xcb>
c0026bcf:	89 f0                	mov    eax,esi
c0026bd1:	f7 d0                	not    eax
c0026bd3:	84 c0                	test   al,al
c0026bd5:	0f 84 34 02 00 00    	je     c0026e0f <__addsf3+0x2f9>
c0026bdb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026be1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026be4:	83 f9 1f             	cmp    ecx,0x1f
c0026be7:	0f 8f 22 02 00 00    	jg     c0026e0f <__addsf3+0x2f9>
c0026bed:	89 d7                	mov    edi,edx
c0026bef:	d3 ef                	shr    edi,cl
c0026bf1:	b8 20 00 00 00       	mov    eax,0x20
c0026bf6:	29 c8                	sub    eax,ecx
c0026bf8:	89 c1                	mov    ecx,eax
c0026bfa:	d3 e2                	shl    edx,cl
c0026bfc:	31 c0                	xor    eax,eax
c0026bfe:	85 d2                	test   edx,edx
c0026c00:	0f 95 c0             	setne  al
c0026c03:	09 f8                	or     eax,edi
c0026c05:	01 d8                	add    eax,ebx
c0026c07:	eb 58                	jmp    c0026c61 <__addsf3+0x14b>
c0026c09:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c0c:	8d 70 01             	lea    esi,[eax+0x1]
c0026c0f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026c15:	75 32                	jne    c0026c49 <__addsf3+0x133>
c0026c17:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c1b:	75 1f                	jne    c0026c3c <__addsf3+0x126>
c0026c1d:	85 d2                	test   edx,edx
c0026c1f:	0f 84 e0 01 00 00    	je     c0026e05 <__addsf3+0x2ef>
c0026c25:	85 db                	test   ebx,ebx
c0026c27:	0f 84 e2 01 00 00    	je     c0026e0f <__addsf3+0x2f9>
c0026c2d:	89 d0                	mov    eax,edx
c0026c2f:	01 d8                	add    eax,ebx
c0026c31:	0f 89 a9 01 00 00    	jns    c0026de0 <__addsf3+0x2ca>
c0026c37:	e9 9d 01 00 00       	jmp    c0026dd9 <__addsf3+0x2c3>
c0026c3c:	85 d2                	test   edx,edx
c0026c3e:	0f 85 cb 01 00 00    	jne    c0026e0f <__addsf3+0x2f9>
c0026c44:	e9 bc 01 00 00       	jmp    c0026e05 <__addsf3+0x2ef>
c0026c49:	31 c0                	xor    eax,eax
c0026c4b:	89 f1                	mov    ecx,esi
c0026c4d:	f7 d1                	not    ecx
c0026c4f:	84 c9                	test   cl,cl
c0026c51:	0f 84 90 01 00 00    	je     c0026de7 <__addsf3+0x2d1>
c0026c57:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c5a:	d1 e8                	shr    eax,1
c0026c5c:	e9 86 01 00 00       	jmp    c0026de7 <__addsf3+0x2d1>
c0026c61:	85 c0                	test   eax,eax
c0026c63:	0f 89 7e 01 00 00    	jns    c0026de7 <__addsf3+0x2d1>
c0026c69:	46                   	inc    esi
c0026c6a:	89 f2                	mov    edx,esi
c0026c6c:	f7 d2                	not    edx
c0026c6e:	84 d2                	test   dl,dl
c0026c70:	0f 84 6f 01 00 00    	je     c0026de5 <__addsf3+0x2cf>
c0026c76:	89 c2                	mov    edx,eax
c0026c78:	83 e2 01             	and    edx,0x1
c0026c7b:	d1 e8                	shr    eax,1
c0026c7d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026c82:	09 d0                	or     eax,edx
c0026c84:	e9 5e 01 00 00       	jmp    c0026de7 <__addsf3+0x2d1>
c0026c89:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026c8d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026c90:	89 f0                	mov    eax,esi
c0026c92:	0f b6 c0             	movzx  eax,al
c0026c95:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c98:	29 c1                	sub    ecx,eax
c0026c9a:	85 c9                	test   ecx,ecx
c0026c9c:	7e 55                	jle    c0026cf3 <__addsf3+0x1dd>
c0026c9e:	85 c0                	test   eax,eax
c0026ca0:	75 11                	jne    c0026cb3 <__addsf3+0x19d>
c0026ca2:	85 db                	test   ebx,ebx
c0026ca4:	0f 84 65 01 00 00    	je     c0026e0f <__addsf3+0x2f9>
c0026caa:	49                   	dec    ecx
c0026cab:	75 19                	jne    c0026cc6 <__addsf3+0x1b0>
c0026cad:	89 d0                	mov    eax,edx
c0026caf:	29 d8                	sub    eax,ebx
c0026cb1:	eb 38                	jmp    c0026ceb <__addsf3+0x1d5>
c0026cb3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cb6:	f7 d0                	not    eax
c0026cb8:	84 c0                	test   al,al
c0026cba:	0f 84 4f 01 00 00    	je     c0026e0f <__addsf3+0x2f9>
c0026cc0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026cc6:	83 f9 1f             	cmp    ecx,0x1f
c0026cc9:	0f 8f 40 01 00 00    	jg     c0026e0f <__addsf3+0x2f9>
c0026ccf:	89 de                	mov    esi,ebx
c0026cd1:	d3 ee                	shr    esi,cl
c0026cd3:	b8 20 00 00 00       	mov    eax,0x20
c0026cd8:	29 c8                	sub    eax,ecx
c0026cda:	89 c1                	mov    ecx,eax
c0026cdc:	d3 e3                	shl    ebx,cl
c0026cde:	31 c0                	xor    eax,eax
c0026ce0:	85 db                	test   ebx,ebx
c0026ce2:	0f 95 c0             	setne  al
c0026ce5:	09 f0                	or     eax,esi
c0026ce7:	29 c2                	sub    edx,eax
c0026ce9:	89 d0                	mov    eax,edx
c0026ceb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026cee:	e9 af 00 00 00       	jmp    c0026da2 <__addsf3+0x28c>
c0026cf3:	74 5c                	je     c0026d51 <__addsf3+0x23b>
c0026cf5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026cf8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cfb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026cff:	75 14                	jne    c0026d15 <__addsf3+0x1ff>
c0026d01:	85 d2                	test   edx,edx
c0026d03:	0f 84 06 01 00 00    	je     c0026e0f <__addsf3+0x2f9>
c0026d09:	48                   	dec    eax
c0026d0a:	75 1b                	jne    c0026d27 <__addsf3+0x211>
c0026d0c:	89 d8                	mov    eax,ebx
c0026d0e:	29 d0                	sub    eax,edx
c0026d10:	e9 8d 00 00 00       	jmp    c0026da2 <__addsf3+0x28c>
c0026d15:	89 f1                	mov    ecx,esi
c0026d17:	f7 d1                	not    ecx
c0026d19:	84 c9                	test   cl,cl
c0026d1b:	0f 84 ee 00 00 00    	je     c0026e0f <__addsf3+0x2f9>
c0026d21:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d27:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d2a:	83 f8 1f             	cmp    eax,0x1f
c0026d2d:	0f 8f dc 00 00 00    	jg     c0026e0f <__addsf3+0x2f9>
c0026d33:	89 d7                	mov    edi,edx
c0026d35:	88 c1                	mov    cl,al
c0026d37:	d3 ef                	shr    edi,cl
c0026d39:	b9 20 00 00 00       	mov    ecx,0x20
c0026d3e:	29 c1                	sub    ecx,eax
c0026d40:	d3 e2                	shl    edx,cl
c0026d42:	31 c0                	xor    eax,eax
c0026d44:	85 d2                	test   edx,edx
c0026d46:	0f 95 c0             	setne  al
c0026d49:	09 f8                	or     eax,edi
c0026d4b:	29 c3                	sub    ebx,eax
c0026d4d:	89 d8                	mov    eax,ebx
c0026d4f:	eb 51                	jmp    c0026da2 <__addsf3+0x28c>
c0026d51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d54:	40                   	inc    eax
c0026d55:	a8 fe                	test   al,0xfe
c0026d57:	75 3d                	jne    c0026d96 <__addsf3+0x280>
c0026d59:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d5d:	0f 85 a7 00 00 00    	jne    c0026e0a <__addsf3+0x2f4>
c0026d63:	85 d2                	test   edx,edx
c0026d65:	75 12                	jne    c0026d79 <__addsf3+0x263>
c0026d67:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d6a:	85 db                	test   ebx,ebx
c0026d6c:	0f 85 9d 00 00 00    	jne    c0026e0f <__addsf3+0x2f9>
c0026d72:	31 ff                	xor    edi,edi
c0026d74:	e9 96 00 00 00       	jmp    c0026e0f <__addsf3+0x2f9>
c0026d79:	85 db                	test   ebx,ebx
c0026d7b:	0f 84 8e 00 00 00    	je     c0026e0f <__addsf3+0x2f9>
c0026d81:	89 d0                	mov    eax,edx
c0026d83:	29 d8                	sub    eax,ebx
c0026d85:	79 06                	jns    c0026d8d <__addsf3+0x277>
c0026d87:	89 d8                	mov    eax,ebx
c0026d89:	29 d0                	sub    eax,edx
c0026d8b:	eb 5a                	jmp    c0026de7 <__addsf3+0x2d1>
c0026d8d:	bf 00 00 00 00       	mov    edi,0x0
c0026d92:	74 7b                	je     c0026e0f <__addsf3+0x2f9>
c0026d94:	eb 4a                	jmp    c0026de0 <__addsf3+0x2ca>
c0026d96:	89 d0                	mov    eax,edx
c0026d98:	29 d8                	sub    eax,ebx
c0026d9a:	79 12                	jns    c0026dae <__addsf3+0x298>
c0026d9c:	89 d8                	mov    eax,ebx
c0026d9e:	29 d0                	sub    eax,edx
c0026da0:	eb 09                	jmp    c0026dab <__addsf3+0x295>
c0026da2:	85 c0                	test   eax,eax
c0026da4:	79 41                	jns    c0026de7 <__addsf3+0x2d1>
c0026da6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026dab:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026dae:	31 f6                	xor    esi,esi
c0026db0:	85 c0                	test   eax,eax
c0026db2:	74 33                	je     c0026de7 <__addsf3+0x2d1>
c0026db4:	0f bd c8             	bsr    ecx,eax
c0026db7:	83 f1 1f             	xor    ecx,0x1f
c0026dba:	d3 e0                	shl    eax,cl
c0026dbc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026dc0:	39 ca                	cmp    edx,ecx
c0026dc2:	7f 10                	jg     c0026dd4 <__addsf3+0x2be>
c0026dc4:	29 d1                	sub    ecx,edx
c0026dc6:	41                   	inc    ecx
c0026dc7:	d3 e8                	shr    eax,cl
c0026dc9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dcc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026dd2:	eb 13                	jmp    c0026de7 <__addsf3+0x2d1>
c0026dd4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dd7:	29 ce                	sub    esi,ecx
c0026dd9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026dde:	eb 07                	jmp    c0026de7 <__addsf3+0x2d1>
c0026de0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026de3:	eb 02                	jmp    c0026de7 <__addsf3+0x2d1>
c0026de5:	31 c0                	xor    eax,eax
c0026de7:	89 c2                	mov    edx,eax
c0026de9:	c1 ea 08             	shr    edx,0x8
c0026dec:	a8 7f                	test   al,0x7f
c0026dee:	0f 95 c1             	setne  cl
c0026df1:	09 d1                	or     ecx,edx
c0026df3:	83 e1 01             	and    ecx,0x1
c0026df6:	c1 e8 07             	shr    eax,0x7
c0026df9:	21 c8                	and    eax,ecx
c0026dfb:	c1 e6 17             	shl    esi,0x17
c0026dfe:	09 d6                	or     esi,edx
c0026e00:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026e03:	eb 0a                	jmp    c0026e0f <__addsf3+0x2f9>
c0026e05:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e08:	eb 05                	jmp    c0026e0f <__addsf3+0x2f9>
c0026e0a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026e0f:	89 f8                	mov    eax,edi
c0026e11:	5a                   	pop    edx
c0026e12:	59                   	pop    ecx
c0026e13:	5b                   	pop    ebx
c0026e14:	5e                   	pop    esi
c0026e15:	5f                   	pop    edi
c0026e16:	5d                   	pop    ebp
c0026e17:	c3                   	ret    

c0026e18 <__subsf3>:
c0026e18:	55                   	push   ebp
c0026e19:	89 e5                	mov    ebp,esp
c0026e1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e1e:	05 00 00 00 80       	add    eax,0x80000000
c0026e23:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026e26:	5d                   	pop    ebp
c0026e27:	e9 ea fc ff ff       	jmp    c0026b16 <__addsf3>

c0026e2c <__negsf2>:
c0026e2c:	55                   	push   ebp
c0026e2d:	89 e5                	mov    ebp,esp
c0026e2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026e32:	05 00 00 00 80       	add    eax,0x80000000
c0026e37:	5d                   	pop    ebp
c0026e38:	c3                   	ret    

c0026e39 <__mulsf3>:
c0026e39:	55                   	push   ebp
c0026e3a:	89 e5                	mov    ebp,esp
c0026e3c:	57                   	push   edi
c0026e3d:	56                   	push   esi
c0026e3e:	53                   	push   ebx
c0026e3f:	83 ec 1c             	sub    esp,0x1c
c0026e42:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026e45:	89 f0                	mov    eax,esi
c0026e47:	89 f1                	mov    ecx,esi
c0026e49:	c1 f9 17             	sar    ecx,0x17
c0026e4c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e4f:	c1 e0 08             	shl    eax,0x8
c0026e52:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e57:	89 c1                	mov    ecx,eax
c0026e59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e5c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e5f:	89 c7                	mov    edi,eax
c0026e61:	c1 ff 17             	sar    edi,0x17
c0026e64:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e68:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e6b:	89 f8                	mov    eax,edi
c0026e6d:	0f b6 c0             	movzx  eax,al
c0026e70:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026e73:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026e77:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e7a:	42                   	inc    edx
c0026e7b:	80 e2 fe             	and    dl,0xfe
c0026e7e:	75 7b                	jne    c0026efb <__mulsf3+0xc2>
c0026e80:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e84:	74 54                	je     c0026eda <__mulsf3+0xa1>
c0026e86:	85 c9                	test   ecx,ecx
c0026e88:	0f 85 64 01 00 00    	jne    c0026ff2 <__mulsf3+0x1b9>
c0026e8e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e91:	80 e2 fe             	and    dl,0xfe
c0026e94:	75 1f                	jne    c0026eb5 <__mulsf3+0x7c>
c0026e96:	85 c0                	test   eax,eax
c0026e98:	b8 00 00 00 00       	mov    eax,0x0
c0026e9d:	74 29                	je     c0026ec8 <__mulsf3+0x8f>
c0026e9f:	53                   	push   ebx
c0026ea0:	53                   	push   ebx
c0026ea1:	50                   	push   eax
c0026ea2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ea5:	e8 96 05 00 00       	call   c0027440 <__nesf2>
c0026eaa:	83 c4 10             	add    esp,0x10
c0026ead:	85 c0                	test   eax,eax
c0026eaf:	0f 85 3a 01 00 00    	jne    c0026fef <__mulsf3+0x1b6>
c0026eb5:	85 ff                	test   edi,edi
c0026eb7:	0f 89 35 01 00 00    	jns    c0026ff2 <__mulsf3+0x1b9>
c0026ebd:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026ec3:	e9 2a 01 00 00       	jmp    c0026ff2 <__mulsf3+0x1b9>
c0026ec8:	51                   	push   ecx
c0026ec9:	51                   	push   ecx
c0026eca:	50                   	push   eax
c0026ecb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ece:	e8 6d 05 00 00       	call   c0027440 <__nesf2>
c0026ed3:	83 c4 10             	add    esp,0x10
c0026ed6:	85 c0                	test   eax,eax
c0026ed8:	eb 15                	jmp    c0026eef <__mulsf3+0xb6>
c0026eda:	85 c9                	test   ecx,ecx
c0026edc:	74 0b                	je     c0026ee9 <__mulsf3+0xb0>
c0026ede:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026ee1:	01 c9                	add    ecx,ecx
c0026ee3:	78 16                	js     c0026efb <__mulsf3+0xc2>
c0026ee5:	89 d3                	mov    ebx,edx
c0026ee7:	eb f5                	jmp    c0026ede <__mulsf3+0xa5>
c0026ee9:	89 f8                	mov    eax,edi
c0026eeb:	f7 d0                	not    eax
c0026eed:	84 c0                	test   al,al
c0026eef:	75 c4                	jne    c0026eb5 <__mulsf3+0x7c>
c0026ef1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026ef6:	e9 f7 00 00 00       	jmp    c0026ff2 <__mulsf3+0x1b9>
c0026efb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026efe:	c1 e6 08             	shl    esi,0x8
c0026f01:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026f07:	8d 57 01             	lea    edx,[edi+0x1]
c0026f0a:	80 e2 fe             	and    dl,0xfe
c0026f0d:	75 63                	jne    c0026f72 <__mulsf3+0x139>
c0026f0f:	85 c0                	test   eax,eax
c0026f11:	74 2f                	je     c0026f42 <__mulsf3+0x109>
c0026f13:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f17:	0f 89 d2 00 00 00    	jns    c0026fef <__mulsf3+0x1b6>
c0026f1d:	52                   	push   edx
c0026f1e:	52                   	push   edx
c0026f1f:	6a 00                	push   0x0
c0026f21:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f24:	e8 dc 04 00 00       	call   c0027405 <__eqsf2>
c0026f29:	83 c4 10             	add    esp,0x10
c0026f2c:	85 c0                	test   eax,eax
c0026f2e:	0f 85 bb 00 00 00    	jne    c0026fef <__mulsf3+0x1b6>
c0026f34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f37:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026f3d:	e9 b0 00 00 00       	jmp    c0026ff2 <__mulsf3+0x1b9>
c0026f42:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f45:	50                   	push   eax
c0026f46:	50                   	push   eax
c0026f47:	6a 00                	push   0x0
c0026f49:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f4c:	e8 b4 04 00 00       	call   c0027405 <__eqsf2>
c0026f51:	83 c4 10             	add    esp,0x10
c0026f54:	85 c0                	test   eax,eax
c0026f56:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f59:	75 0c                	jne    c0026f67 <__mulsf3+0x12e>
c0026f5b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f5f:	0f 89 8a 00 00 00    	jns    c0026fef <__mulsf3+0x1b6>
c0026f65:	eb cd                	jmp    c0026f34 <__mulsf3+0xfb>
c0026f67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026f6a:	01 f6                	add    esi,esi
c0026f6c:	78 04                	js     c0026f72 <__mulsf3+0x139>
c0026f6e:	89 c3                	mov    ebx,eax
c0026f70:	eb f5                	jmp    c0026f67 <__mulsf3+0x12e>
c0026f72:	89 c8                	mov    eax,ecx
c0026f74:	0d 00 00 00 80       	or     eax,0x80000000
c0026f79:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026f7f:	f7 e6                	mul    esi
c0026f81:	85 c0                	test   eax,eax
c0026f83:	0f 95 c0             	setne  al
c0026f86:	0f b6 c0             	movzx  eax,al
c0026f89:	09 c2                	or     edx,eax
c0026f8b:	78 03                	js     c0026f90 <__mulsf3+0x157>
c0026f8d:	01 d2                	add    edx,edx
c0026f8f:	4b                   	dec    ebx
c0026f90:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026f96:	7f 22                	jg     c0026fba <__mulsf3+0x181>
c0026f98:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f9e:	85 db                	test   ebx,ebx
c0026fa0:	7f 23                	jg     c0026fc5 <__mulsf3+0x18c>
c0026fa2:	83 fb e9             	cmp    ebx,0xffffffe9
c0026fa5:	7c 1a                	jl     c0026fc1 <__mulsf3+0x188>
c0026fa7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026fad:	b9 01 00 00 00       	mov    ecx,0x1
c0026fb2:	29 d9                	sub    ecx,ebx
c0026fb4:	d3 ea                	shr    edx,cl
c0026fb6:	31 db                	xor    ebx,ebx
c0026fb8:	eb 0b                	jmp    c0026fc5 <__mulsf3+0x18c>
c0026fba:	bb ff 00 00 00       	mov    ebx,0xff
c0026fbf:	eb 02                	jmp    c0026fc3 <__mulsf3+0x18a>
c0026fc1:	31 db                	xor    ebx,ebx
c0026fc3:	31 d2                	xor    edx,edx
c0026fc5:	89 d0                	mov    eax,edx
c0026fc7:	c1 e8 08             	shr    eax,0x8
c0026fca:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026fcd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026fd3:	09 fb                	or     ebx,edi
c0026fd5:	c1 e3 17             	shl    ebx,0x17
c0026fd8:	09 c3                	or     ebx,eax
c0026fda:	f6 c2 7f             	test   dl,0x7f
c0026fdd:	0f 95 c1             	setne  cl
c0026fe0:	09 c8                	or     eax,ecx
c0026fe2:	83 e0 01             	and    eax,0x1
c0026fe5:	c1 ea 07             	shr    edx,0x7
c0026fe8:	21 c2                	and    edx,eax
c0026fea:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026fed:	eb 03                	jmp    c0026ff2 <__mulsf3+0x1b9>
c0026fef:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026ff2:	89 f0                	mov    eax,esi
c0026ff4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026ff7:	5b                   	pop    ebx
c0026ff8:	5e                   	pop    esi
c0026ff9:	5f                   	pop    edi
c0026ffa:	5d                   	pop    ebp
c0026ffb:	c3                   	ret    

c0026ffc <__divsf3>:
c0026ffc:	55                   	push   ebp
c0026ffd:	89 e5                	mov    ebp,esp
c0026fff:	57                   	push   edi
c0027000:	56                   	push   esi
c0027001:	53                   	push   ebx
c0027002:	83 ec 1c             	sub    esp,0x1c
c0027005:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027008:	89 d8                	mov    eax,ebx
c002700a:	89 d9                	mov    ecx,ebx
c002700c:	c1 f9 17             	sar    ecx,0x17
c002700f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027012:	c1 e0 08             	shl    eax,0x8
c0027015:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002701a:	89 c1                	mov    ecx,eax
c002701c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002701f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027022:	89 c7                	mov    edi,eax
c0027024:	c1 ff 17             	sar    edi,0x17
c0027027:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002702b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002702e:	89 f8                	mov    eax,edi
c0027030:	0f b6 c0             	movzx  eax,al
c0027033:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027036:	29 c6                	sub    esi,eax
c0027038:	83 c6 7f             	add    esi,0x7f
c002703b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002703e:	42                   	inc    edx
c002703f:	80 e2 fe             	and    dl,0xfe
c0027042:	0f 85 9c 00 00 00    	jne    c00270e4 <__divsf3+0xe8>
c0027048:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002704c:	74 33                	je     c0027081 <__divsf3+0x85>
c002704e:	85 c9                	test   ecx,ecx
c0027050:	0f 85 c7 01 00 00    	jne    c002721d <__divsf3+0x221>
c0027056:	8d 57 01             	lea    edx,[edi+0x1]
c0027059:	80 e2 fe             	and    dl,0xfe
c002705c:	75 2f                	jne    c002708d <__divsf3+0x91>
c002705e:	85 c0                	test   eax,eax
c0027060:	74 2b                	je     c002708d <__divsf3+0x91>
c0027062:	51                   	push   ecx
c0027063:	51                   	push   ecx
c0027064:	6a 00                	push   0x0
c0027066:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027069:	e8 d2 03 00 00       	call   c0027440 <__nesf2>
c002706e:	83 c4 10             	add    esp,0x10
c0027071:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027074:	85 c0                	test   eax,eax
c0027076:	0f 85 a1 01 00 00    	jne    c002721d <__divsf3+0x221>
c002707c:	e9 92 01 00 00       	jmp    c0027213 <__divsf3+0x217>
c0027081:	85 c9                	test   ecx,ecx
c0027083:	75 1b                	jne    c00270a0 <__divsf3+0xa4>
c0027085:	8d 57 01             	lea    edx,[edi+0x1]
c0027088:	80 e2 fe             	and    dl,0xfe
c002708b:	74 1e                	je     c00270ab <__divsf3+0xaf>
c002708d:	85 ff                	test   edi,edi
c002708f:	0f 89 88 01 00 00    	jns    c002721d <__divsf3+0x221>
c0027095:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002709b:	e9 7d 01 00 00       	jmp    c002721d <__divsf3+0x221>
c00270a0:	8d 56 ff             	lea    edx,[esi-0x1]
c00270a3:	01 c9                	add    ecx,ecx
c00270a5:	78 3d                	js     c00270e4 <__divsf3+0xe8>
c00270a7:	89 d6                	mov    esi,edx
c00270a9:	eb f5                	jmp    c00270a0 <__divsf3+0xa4>
c00270ab:	85 c0                	test   eax,eax
c00270ad:	b8 00 00 00 00       	mov    eax,0x0
c00270b2:	74 18                	je     c00270cc <__divsf3+0xd0>
c00270b4:	52                   	push   edx
c00270b5:	52                   	push   edx
c00270b6:	50                   	push   eax
c00270b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ba:	e8 81 03 00 00       	call   c0027440 <__nesf2>
c00270bf:	83 c4 10             	add    esp,0x10
c00270c2:	85 c0                	test   eax,eax
c00270c4:	0f 85 50 01 00 00    	jne    c002721a <__divsf3+0x21e>
c00270ca:	eb c1                	jmp    c002708d <__divsf3+0x91>
c00270cc:	56                   	push   esi
c00270cd:	56                   	push   esi
c00270ce:	50                   	push   eax
c00270cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270d2:	e8 69 03 00 00       	call   c0027440 <__nesf2>
c00270d7:	83 c4 10             	add    esp,0x10
c00270da:	85 c0                	test   eax,eax
c00270dc:	0f 84 31 01 00 00    	je     c0027213 <__divsf3+0x217>
c00270e2:	eb a9                	jmp    c002708d <__divsf3+0x91>
c00270e4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00270e7:	c1 e3 08             	shl    ebx,0x8
c00270ea:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00270f0:	8d 57 01             	lea    edx,[edi+0x1]
c00270f3:	80 e2 fe             	and    dl,0xfe
c00270f6:	75 71                	jne    c0027169 <__divsf3+0x16d>
c00270f8:	85 c0                	test   eax,eax
c00270fa:	ba 00 00 00 00       	mov    edx,0x0
c00270ff:	74 2f                	je     c0027130 <__divsf3+0x134>
c0027101:	51                   	push   ecx
c0027102:	51                   	push   ecx
c0027103:	52                   	push   edx
c0027104:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027107:	e8 f9 02 00 00       	call   c0027405 <__eqsf2>
c002710c:	83 c4 10             	add    esp,0x10
c002710f:	85 c0                	test   eax,eax
c0027111:	0f 85 03 01 00 00    	jne    c002721a <__divsf3+0x21e>
c0027117:	31 d2                	xor    edx,edx
c0027119:	89 d3                	mov    ebx,edx
c002711b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002711e:	31 f8                	xor    eax,edi
c0027120:	0f 89 f7 00 00 00    	jns    c002721d <__divsf3+0x221>
c0027126:	bb 00 00 00 80       	mov    ebx,0x80000000
c002712b:	e9 ed 00 00 00       	jmp    c002721d <__divsf3+0x221>
c0027130:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027133:	50                   	push   eax
c0027134:	50                   	push   eax
c0027135:	52                   	push   edx
c0027136:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027139:	e8 c7 02 00 00       	call   c0027405 <__eqsf2>
c002713e:	83 c4 10             	add    esp,0x10
c0027141:	85 c0                	test   eax,eax
c0027143:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027146:	75 16                	jne    c002715e <__divsf3+0x162>
c0027148:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002714b:	31 fb                	xor    ebx,edi
c002714d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027153:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027159:	e9 bf 00 00 00       	jmp    c002721d <__divsf3+0x221>
c002715e:	8d 46 01             	lea    eax,[esi+0x1]
c0027161:	01 db                	add    ebx,ebx
c0027163:	78 04                	js     c0027169 <__divsf3+0x16d>
c0027165:	89 c6                	mov    esi,eax
c0027167:	eb f5                	jmp    c002715e <__divsf3+0x162>
c0027169:	89 c8                	mov    eax,ecx
c002716b:	0d 00 00 00 80       	or     eax,0x80000000
c0027170:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027176:	31 d2                	xor    edx,edx
c0027178:	39 d8                	cmp    eax,ebx
c002717a:	72 07                	jb     c0027183 <__divsf3+0x187>
c002717c:	29 d8                	sub    eax,ebx
c002717e:	ba 01 00 00 00       	mov    edx,0x1
c0027183:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002718a:	01 d2                	add    edx,edx
c002718c:	89 c1                	mov    ecx,eax
c002718e:	01 c0                	add    eax,eax
c0027190:	85 c9                	test   ecx,ecx
c0027192:	78 04                	js     c0027198 <__divsf3+0x19c>
c0027194:	39 c3                	cmp    ebx,eax
c0027196:	77 05                	ja     c002719d <__divsf3+0x1a1>
c0027198:	29 d8                	sub    eax,ebx
c002719a:	83 ca 01             	or     edx,0x1
c002719d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00271a0:	75 e8                	jne    c002718a <__divsf3+0x18e>
c00271a2:	85 c0                	test   eax,eax
c00271a4:	0f 95 c0             	setne  al
c00271a7:	0f b6 c0             	movzx  eax,al
c00271aa:	c1 e2 06             	shl    edx,0x6
c00271ad:	09 c2                	or     edx,eax
c00271af:	78 03                	js     c00271b4 <__divsf3+0x1b8>
c00271b1:	01 d2                	add    edx,edx
c00271b3:	4e                   	dec    esi
c00271b4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00271ba:	7f 22                	jg     c00271de <__divsf3+0x1e2>
c00271bc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00271c2:	85 f6                	test   esi,esi
c00271c4:	7f 23                	jg     c00271e9 <__divsf3+0x1ed>
c00271c6:	83 fe e9             	cmp    esi,0xffffffe9
c00271c9:	7c 1a                	jl     c00271e5 <__divsf3+0x1e9>
c00271cb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00271d1:	b9 01 00 00 00       	mov    ecx,0x1
c00271d6:	29 f1                	sub    ecx,esi
c00271d8:	d3 ea                	shr    edx,cl
c00271da:	31 f6                	xor    esi,esi
c00271dc:	eb 0b                	jmp    c00271e9 <__divsf3+0x1ed>
c00271de:	be ff 00 00 00       	mov    esi,0xff
c00271e3:	eb 02                	jmp    c00271e7 <__divsf3+0x1eb>
c00271e5:	31 f6                	xor    esi,esi
c00271e7:	31 d2                	xor    edx,edx
c00271e9:	89 d0                	mov    eax,edx
c00271eb:	c1 e8 08             	shr    eax,0x8
c00271ee:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00271f1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00271f7:	09 fe                	or     esi,edi
c00271f9:	c1 e6 17             	shl    esi,0x17
c00271fc:	09 c6                	or     esi,eax
c00271fe:	f6 c2 7f             	test   dl,0x7f
c0027201:	0f 95 c1             	setne  cl
c0027204:	09 c8                	or     eax,ecx
c0027206:	83 e0 01             	and    eax,0x1
c0027209:	c1 ea 07             	shr    edx,0x7
c002720c:	21 c2                	and    edx,eax
c002720e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027211:	eb 0a                	jmp    c002721d <__divsf3+0x221>
c0027213:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027218:	eb 03                	jmp    c002721d <__divsf3+0x221>
c002721a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002721d:	89 d8                	mov    eax,ebx
c002721f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027222:	5b                   	pop    ebx
c0027223:	5e                   	pop    esi
c0027224:	5f                   	pop    edi
c0027225:	5d                   	pop    ebp
c0027226:	c3                   	ret    

c0027227 <__floatsisf>:
c0027227:	55                   	push   ebp
c0027228:	89 e5                	mov    ebp,esp
c002722a:	53                   	push   ebx
c002722b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002722e:	85 d2                	test   edx,edx
c0027230:	7e 2b                	jle    c002725d <__floatsisf+0x36>
c0027232:	0f bd ca             	bsr    ecx,edx
c0027235:	83 f1 1f             	xor    ecx,0x1f
c0027238:	d3 e2                	shl    edx,cl
c002723a:	89 d0                	mov    eax,edx
c002723c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027241:	89 c3                	mov    ebx,eax
c0027243:	c1 eb 08             	shr    ebx,0x8
c0027246:	80 e2 7f             	and    dl,0x7f
c0027249:	0f 95 c2             	setne  dl
c002724c:	09 da                	or     edx,ebx
c002724e:	83 e2 01             	and    edx,0x1
c0027251:	c1 e8 07             	shr    eax,0x7
c0027254:	21 c2                	and    edx,eax
c0027256:	b8 9e 00 00 00       	mov    eax,0x9e
c002725b:	eb 32                	jmp    c002728f <__floatsisf+0x68>
c002725d:	b8 00 00 00 00       	mov    eax,0x0
c0027262:	74 34                	je     c0027298 <__floatsisf+0x71>
c0027264:	f7 da                	neg    edx
c0027266:	0f bd ca             	bsr    ecx,edx
c0027269:	83 f1 1f             	xor    ecx,0x1f
c002726c:	d3 e2                	shl    edx,cl
c002726e:	89 d0                	mov    eax,edx
c0027270:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027275:	89 c3                	mov    ebx,eax
c0027277:	c1 eb 08             	shr    ebx,0x8
c002727a:	80 e2 7f             	and    dl,0x7f
c002727d:	0f 95 c2             	setne  dl
c0027280:	09 da                	or     edx,ebx
c0027282:	83 e2 01             	and    edx,0x1
c0027285:	c1 e8 07             	shr    eax,0x7
c0027288:	21 c2                	and    edx,eax
c002728a:	b8 9e 01 00 00       	mov    eax,0x19e
c002728f:	29 c8                	sub    eax,ecx
c0027291:	c1 e0 17             	shl    eax,0x17
c0027294:	09 d8                	or     eax,ebx
c0027296:	01 d0                	add    eax,edx
c0027298:	5b                   	pop    ebx
c0027299:	5d                   	pop    ebp
c002729a:	c3                   	ret    

c002729b <__floatunsisf>:
c002729b:	55                   	push   ebp
c002729c:	89 e5                	mov    ebp,esp
c002729e:	53                   	push   ebx
c002729f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272a2:	31 c0                	xor    eax,eax
c00272a4:	85 d2                	test   edx,edx
c00272a6:	74 32                	je     c00272da <__floatunsisf+0x3f>
c00272a8:	0f bd ca             	bsr    ecx,edx
c00272ab:	83 f1 1f             	xor    ecx,0x1f
c00272ae:	d3 e2                	shl    edx,cl
c00272b0:	89 d0                	mov    eax,edx
c00272b2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272b7:	89 c3                	mov    ebx,eax
c00272b9:	c1 eb 08             	shr    ebx,0x8
c00272bc:	80 e2 7f             	and    dl,0x7f
c00272bf:	0f 95 c2             	setne  dl
c00272c2:	09 da                	or     edx,ebx
c00272c4:	83 e2 01             	and    edx,0x1
c00272c7:	c1 e8 07             	shr    eax,0x7
c00272ca:	21 c2                	and    edx,eax
c00272cc:	b8 9e 00 00 00       	mov    eax,0x9e
c00272d1:	29 c8                	sub    eax,ecx
c00272d3:	c1 e0 17             	shl    eax,0x17
c00272d6:	09 d8                	or     eax,ebx
c00272d8:	01 d0                	add    eax,edx
c00272da:	5b                   	pop    ebx
c00272db:	5d                   	pop    ebp
c00272dc:	c3                   	ret    

c00272dd <__fixsfsi>:
c00272dd:	55                   	push   ebp
c00272de:	89 e5                	mov    ebp,esp
c00272e0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272e3:	89 d1                	mov    ecx,edx
c00272e5:	c1 e1 08             	shl    ecx,0x8
c00272e8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00272ee:	c1 fa 17             	sar    edx,0x17
c00272f1:	78 1c                	js     c002730f <__fixsfsi+0x32>
c00272f3:	83 ea 7f             	sub    edx,0x7f
c00272f6:	31 c0                	xor    eax,eax
c00272f8:	83 fa 1e             	cmp    edx,0x1e
c00272fb:	77 40                	ja     c002733d <__fixsfsi+0x60>
c00272fd:	89 c8                	mov    eax,ecx
c00272ff:	0d 00 00 00 80       	or     eax,0x80000000
c0027304:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027309:	29 d1                	sub    ecx,edx
c002730b:	d3 e8                	shr    eax,cl
c002730d:	eb 2e                	jmp    c002733d <__fixsfsi+0x60>
c002730f:	31 c0                	xor    eax,eax
c0027311:	81 c2 81 00 00 00    	add    edx,0x81
c0027317:	78 24                	js     c002733d <__fixsfsi+0x60>
c0027319:	83 fa 1e             	cmp    edx,0x1e
c002731c:	7e 09                	jle    c0027327 <__fixsfsi+0x4a>
c002731e:	83 fa 1f             	cmp    edx,0x1f
c0027321:	75 18                	jne    c002733b <__fixsfsi+0x5e>
c0027323:	85 c9                	test   ecx,ecx
c0027325:	75 14                	jne    c002733b <__fixsfsi+0x5e>
c0027327:	89 c8                	mov    eax,ecx
c0027329:	0d 00 00 00 80       	or     eax,0x80000000
c002732e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027333:	29 d1                	sub    ecx,edx
c0027335:	d3 e8                	shr    eax,cl
c0027337:	f7 d8                	neg    eax
c0027339:	eb 02                	jmp    c002733d <__fixsfsi+0x60>
c002733b:	31 c0                	xor    eax,eax
c002733d:	5d                   	pop    ebp
c002733e:	c3                   	ret    

c002733f <__fixunssfsi>:
c002733f:	55                   	push   ebp
c0027340:	89 e5                	mov    ebp,esp
c0027342:	53                   	push   ebx
c0027343:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027346:	89 d3                	mov    ebx,edx
c0027348:	c1 fb 17             	sar    ebx,0x17
c002734b:	83 eb 7f             	sub    ebx,0x7f
c002734e:	31 c0                	xor    eax,eax
c0027350:	83 fb 1f             	cmp    ebx,0x1f
c0027353:	77 18                	ja     c002736d <__fixunssfsi+0x2e>
c0027355:	89 d0                	mov    eax,edx
c0027357:	c1 e0 08             	shl    eax,0x8
c002735a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002735f:	0d 00 00 00 80       	or     eax,0x80000000
c0027364:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027369:	29 d9                	sub    ecx,ebx
c002736b:	d3 e8                	shr    eax,cl
c002736d:	5b                   	pop    ebx
c002736e:	5d                   	pop    ebp
c002736f:	c3                   	ret    

c0027370 <__cmpsf2>:
c0027370:	55                   	push   ebp
c0027371:	89 e5                	mov    ebp,esp
c0027373:	57                   	push   edi
c0027374:	56                   	push   esi
c0027375:	53                   	push   ebx
c0027376:	83 ec 24             	sub    esp,0x24
c0027379:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002737c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002737f:	e8 4f 10 00 00       	call   c00283d3 <__truncdfsf2>
c0027384:	5a                   	pop    edx
c0027385:	59                   	pop    ecx
c0027386:	89 c3                	mov    ebx,eax
c0027388:	c1 e8 17             	shr    eax,0x17
c002738b:	0f b6 f0             	movzx  esi,al
c002738e:	89 d8                	mov    eax,ebx
c0027390:	c1 e8 1f             	shr    eax,0x1f
c0027393:	31 c6                	xor    esi,eax
c0027395:	c1 e3 08             	shl    ebx,0x8
c0027398:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002739b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002739e:	e8 30 10 00 00       	call   c00283d3 <__truncdfsf2>
c00273a3:	83 c4 10             	add    esp,0x10
c00273a6:	89 c1                	mov    ecx,eax
c00273a8:	c1 e9 17             	shr    ecx,0x17
c00273ab:	0f b6 c9             	movzx  ecx,cl
c00273ae:	89 c7                	mov    edi,eax
c00273b0:	c1 ef 1f             	shr    edi,0x1f
c00273b3:	89 ca                	mov    edx,ecx
c00273b5:	31 fa                	xor    edx,edi
c00273b7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00273ba:	c1 e0 08             	shl    eax,0x8
c00273bd:	89 c2                	mov    edx,eax
c00273bf:	89 d8                	mov    eax,ebx
c00273c1:	09 d0                	or     eax,edx
c00273c3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00273c8:	09 f0                	or     eax,esi
c00273ca:	75 08                	jne    c00273d4 <__cmpsf2+0x64>
c00273cc:	31 c0                	xor    eax,eax
c00273ce:	39 f9                	cmp    ecx,edi
c00273d0:	75 0c                	jne    c00273de <__cmpsf2+0x6e>
c00273d2:	eb 29                	jmp    c00273fd <__cmpsf2+0x8d>
c00273d4:	b8 01 00 00 00       	mov    eax,0x1
c00273d9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00273dc:	7f 1f                	jg     c00273fd <__cmpsf2+0x8d>
c00273de:	83 c8 ff             	or     eax,0xffffffff
c00273e1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00273e4:	7c 17                	jl     c00273fd <__cmpsf2+0x8d>
c00273e6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00273ec:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00273f2:	b8 01 00 00 00       	mov    eax,0x1
c00273f7:	39 d3                	cmp    ebx,edx
c00273f9:	77 02                	ja     c00273fd <__cmpsf2+0x8d>
c00273fb:	19 c0                	sbb    eax,eax
c00273fd:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027400:	5b                   	pop    ebx
c0027401:	5e                   	pop    esi
c0027402:	5f                   	pop    edi
c0027403:	5d                   	pop    ebp
c0027404:	c3                   	ret    

c0027405 <__eqsf2>:
c0027405:	55                   	push   ebp
c0027406:	89 e5                	mov    ebp,esp
c0027408:	83 ec 24             	sub    esp,0x24
c002740b:	6a 01                	push   0x1
c002740d:	83 ec 0c             	sub    esp,0xc
c0027410:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027413:	e8 df 10 00 00       	call   c00284f7 <__extendsfdf2>
c0027418:	83 c4 10             	add    esp,0x10
c002741b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002741e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027421:	52                   	push   edx
c0027422:	50                   	push   eax
c0027423:	50                   	push   eax
c0027424:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027427:	e8 cb 10 00 00       	call   c00284f7 <__extendsfdf2>
c002742c:	59                   	pop    ecx
c002742d:	59                   	pop    ecx
c002742e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027431:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027434:	52                   	push   edx
c0027435:	50                   	push   eax
c0027436:	e8 35 ff ff ff       	call   c0027370 <__cmpsf2>
c002743b:	83 c4 20             	add    esp,0x20
c002743e:	c9                   	leave  
c002743f:	c3                   	ret    

c0027440 <__nesf2>:
c0027440:	eb c3                	jmp    c0027405 <__eqsf2>

c0027442 <__gtsf2>:
c0027442:	55                   	push   ebp
c0027443:	89 e5                	mov    ebp,esp
c0027445:	83 ec 24             	sub    esp,0x24
c0027448:	6a ff                	push   0xffffffff
c002744a:	83 ec 0c             	sub    esp,0xc
c002744d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027450:	e8 a2 10 00 00       	call   c00284f7 <__extendsfdf2>
c0027455:	83 c4 10             	add    esp,0x10
c0027458:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002745b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002745e:	52                   	push   edx
c002745f:	50                   	push   eax
c0027460:	50                   	push   eax
c0027461:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027464:	e8 8e 10 00 00       	call   c00284f7 <__extendsfdf2>
c0027469:	59                   	pop    ecx
c002746a:	59                   	pop    ecx
c002746b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002746e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027471:	52                   	push   edx
c0027472:	50                   	push   eax
c0027473:	e8 f8 fe ff ff       	call   c0027370 <__cmpsf2>
c0027478:	83 c4 20             	add    esp,0x20
c002747b:	c9                   	leave  
c002747c:	c3                   	ret    

c002747d <__gesf2>:
c002747d:	eb c3                	jmp    c0027442 <__gtsf2>

c002747f <__ltsf2>:
c002747f:	eb 84                	jmp    c0027405 <__eqsf2>

c0027481 <__lesf2>:
c0027481:	eb 82                	jmp    c0027405 <__eqsf2>

c0027483 <__adddf3>:
c0027483:	55                   	push   ebp
c0027484:	89 e5                	mov    ebp,esp
c0027486:	57                   	push   edi
c0027487:	56                   	push   esi
c0027488:	53                   	push   ebx
c0027489:	83 ec 24             	sub    esp,0x24
c002748c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002748f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027492:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027495:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027498:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002749b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002749e:	89 c8                	mov    eax,ecx
c00274a0:	89 ce                	mov    esi,ecx
c00274a2:	c1 fe 14             	sar    esi,0x14
c00274a5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00274a8:	89 fb                	mov    ebx,edi
c00274aa:	89 fa                	mov    edx,edi
c00274ac:	c1 e2 0b             	shl    edx,0xb
c00274af:	c1 e0 0b             	shl    eax,0xb
c00274b2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00274b7:	c1 eb 15             	shr    ebx,0x15
c00274ba:	09 d8                	or     eax,ebx
c00274bc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00274bf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00274c2:	c1 fe 14             	sar    esi,0x14
c00274c5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00274c8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00274cb:	89 f3                	mov    ebx,esi
c00274cd:	c1 e3 0b             	shl    ebx,0xb
c00274d0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00274d3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00274d6:	c1 e3 0b             	shl    ebx,0xb
c00274d9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00274df:	c1 ee 15             	shr    esi,0x15
c00274e2:	09 f3                	or     ebx,esi
c00274e4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00274e7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274ea:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00274ed:	0f 88 5f 02 00 00    	js     c0027752 <__adddf3+0x2cf>
c00274f3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00274f6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00274f9:	85 db                	test   ebx,ebx
c00274fb:	0f 8e c7 00 00 00    	jle    c00275c8 <__adddf3+0x145>
c0027501:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027508:	75 1a                	jne    c0027524 <__adddf3+0xa1>
c002750a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002750d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027510:	0f 84 b2 05 00 00    	je     c0027ac8 <__adddf3+0x645>
c0027516:	4b                   	dec    ebx
c0027517:	75 23                	jne    c002753c <__adddf3+0xb9>
c0027519:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002751c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002751f:	e9 99 00 00 00       	jmp    c00275bd <__adddf3+0x13a>
c0027524:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027527:	f7 d6                	not    esi
c0027529:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002752f:	0f 84 93 05 00 00    	je     c0027ac8 <__adddf3+0x645>
c0027535:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002753c:	83 fb 1f             	cmp    ebx,0x1f
c002753f:	7e 42                	jle    c0027583 <__adddf3+0x100>
c0027541:	83 fb 3f             	cmp    ebx,0x3f
c0027544:	0f 8f 7e 05 00 00    	jg     c0027ac8 <__adddf3+0x645>
c002754a:	83 e3 1f             	and    ebx,0x1f
c002754d:	89 d9                	mov    ecx,ebx
c002754f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027552:	d3 ef                	shr    edi,cl
c0027554:	31 db                	xor    ebx,ebx
c0027556:	85 c9                	test   ecx,ecx
c0027558:	74 15                	je     c002756f <__adddf3+0xec>
c002755a:	be 20 00 00 00       	mov    esi,0x20
c002755f:	29 ce                	sub    esi,ecx
c0027561:	89 f1                	mov    ecx,esi
c0027563:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027566:	d3 e6                	shl    esi,cl
c0027568:	31 db                	xor    ebx,ebx
c002756a:	85 f6                	test   esi,esi
c002756c:	0f 95 c3             	setne  bl
c002756f:	31 c9                	xor    ecx,ecx
c0027571:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027575:	0f 95 c1             	setne  cl
c0027578:	09 cf                	or     edi,ecx
c002757a:	09 fb                	or     ebx,edi
c002757c:	01 da                	add    edx,ebx
c002757e:	83 d0 00             	adc    eax,0x0
c0027581:	eb 3a                	jmp    c00275bd <__adddf3+0x13a>
c0027583:	bf 20 00 00 00       	mov    edi,0x20
c0027588:	29 df                	sub    edi,ebx
c002758a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002758d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027590:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027593:	d3 e6                	shl    esi,cl
c0027595:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027598:	88 d9                	mov    cl,bl
c002759a:	d3 ef                	shr    edi,cl
c002759c:	09 fe                	or     esi,edi
c002759e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275a1:	88 d9                	mov    cl,bl
c00275a3:	d3 ef                	shr    edi,cl
c00275a5:	89 fb                	mov    ebx,edi
c00275a7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275aa:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00275ad:	d3 e7                	shl    edi,cl
c00275af:	85 ff                	test   edi,edi
c00275b1:	0f 95 c1             	setne  cl
c00275b4:	0f b6 c9             	movzx  ecx,cl
c00275b7:	09 ce                	or     esi,ecx
c00275b9:	01 f2                	add    edx,esi
c00275bb:	11 d8                	adc    eax,ebx
c00275bd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275c0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275c3:	e9 52 01 00 00       	jmp    c002771a <__adddf3+0x297>
c00275c8:	0f 84 d5 00 00 00    	je     c00276a3 <__adddf3+0x220>
c00275ce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00275d1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00275d4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275d7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275da:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00275e1:	75 20                	jne    c0027603 <__adddf3+0x180>
c00275e3:	89 d6                	mov    esi,edx
c00275e5:	09 c6                	or     esi,eax
c00275e7:	0f 84 db 04 00 00    	je     c0027ac8 <__adddf3+0x645>
c00275ed:	4b                   	dec    ebx
c00275ee:	75 29                	jne    c0027619 <__adddf3+0x196>
c00275f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00275f6:	01 d1                	add    ecx,edx
c00275f8:	11 c6                	adc    esi,eax
c00275fa:	89 f0                	mov    eax,esi
c00275fc:	89 ca                	mov    edx,ecx
c00275fe:	e9 17 01 00 00       	jmp    c002771a <__adddf3+0x297>
c0027603:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027606:	f7 d6                	not    esi
c0027608:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002760e:	0f 84 b4 04 00 00    	je     c0027ac8 <__adddf3+0x645>
c0027614:	0d 00 00 00 80       	or     eax,0x80000000
c0027619:	83 fb 1f             	cmp    ebx,0x1f
c002761c:	7e 48                	jle    c0027666 <__adddf3+0x1e3>
c002761e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027621:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027624:	83 fb 3f             	cmp    ebx,0x3f
c0027627:	0f 8f 9b 04 00 00    	jg     c0027ac8 <__adddf3+0x645>
c002762d:	83 e3 1f             	and    ebx,0x1f
c0027630:	89 d9                	mov    ecx,ebx
c0027632:	89 c7                	mov    edi,eax
c0027634:	d3 ef                	shr    edi,cl
c0027636:	31 db                	xor    ebx,ebx
c0027638:	85 c9                	test   ecx,ecx
c002763a:	74 12                	je     c002764e <__adddf3+0x1cb>
c002763c:	be 20 00 00 00       	mov    esi,0x20
c0027641:	29 ce                	sub    esi,ecx
c0027643:	89 f1                	mov    ecx,esi
c0027645:	d3 e0                	shl    eax,cl
c0027647:	31 db                	xor    ebx,ebx
c0027649:	85 c0                	test   eax,eax
c002764b:	0f 95 c3             	setne  bl
c002764e:	31 c0                	xor    eax,eax
c0027650:	85 d2                	test   edx,edx
c0027652:	0f 95 c0             	setne  al
c0027655:	09 c7                	or     edi,eax
c0027657:	09 fb                	or     ebx,edi
c0027659:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002765c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002765f:	01 da                	add    edx,ebx
c0027661:	83 d6 00             	adc    esi,0x0
c0027664:	eb 39                	jmp    c002769f <__adddf3+0x21c>
c0027666:	be 20 00 00 00       	mov    esi,0x20
c002766b:	29 de                	sub    esi,ebx
c002766d:	89 c7                	mov    edi,eax
c002766f:	89 f1                	mov    ecx,esi
c0027671:	d3 e7                	shl    edi,cl
c0027673:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027676:	89 d7                	mov    edi,edx
c0027678:	88 d9                	mov    cl,bl
c002767a:	d3 ef                	shr    edi,cl
c002767c:	89 f9                	mov    ecx,edi
c002767e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027681:	09 cf                	or     edi,ecx
c0027683:	88 d9                	mov    cl,bl
c0027685:	d3 e8                	shr    eax,cl
c0027687:	89 f1                	mov    ecx,esi
c0027689:	d3 e2                	shl    edx,cl
c002768b:	85 d2                	test   edx,edx
c002768d:	0f 95 c2             	setne  dl
c0027690:	0f b6 d2             	movzx  edx,dl
c0027693:	09 d7                	or     edi,edx
c0027695:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027698:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002769b:	01 fa                	add    edx,edi
c002769d:	11 c6                	adc    esi,eax
c002769f:	89 f0                	mov    eax,esi
c00276a1:	eb 77                	jmp    c002771a <__adddf3+0x297>
c00276a3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276a6:	46                   	inc    esi
c00276a7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00276aa:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00276b0:	75 41                	jne    c00276f3 <__adddf3+0x270>
c00276b2:	89 d3                	mov    ebx,edx
c00276b4:	09 c3                	or     ebx,eax
c00276b6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276bd:	75 27                	jne    c00276e6 <__adddf3+0x263>
c00276bf:	85 db                	test   ebx,ebx
c00276c1:	0f 84 fb 03 00 00    	je     c0027ac2 <__adddf3+0x63f>
c00276c7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00276ca:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00276cd:	0f 84 f5 03 00 00    	je     c0027ac8 <__adddf3+0x645>
c00276d3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276d6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276d9:	85 c0                	test   eax,eax
c00276db:	0f 89 91 03 00 00    	jns    c0027a72 <__adddf3+0x5ef>
c00276e1:	e9 85 03 00 00       	jmp    c0027a6b <__adddf3+0x5e8>
c00276e6:	85 db                	test   ebx,ebx
c00276e8:	0f 85 da 03 00 00    	jne    c0027ac8 <__adddf3+0x645>
c00276ee:	e9 cf 03 00 00       	jmp    c0027ac2 <__adddf3+0x63f>
c00276f3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276f6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276f9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276fc:	f7 d1                	not    ecx
c00276fe:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027704:	0f 84 70 03 00 00    	je     c0027a7a <__adddf3+0x5f7>
c002770a:	d1 ea                	shr    edx,1
c002770c:	89 c1                	mov    ecx,eax
c002770e:	c1 e1 1f             	shl    ecx,0x1f
c0027711:	09 ca                	or     edx,ecx
c0027713:	d1 e8                	shr    eax,1
c0027715:	e9 6f 03 00 00       	jmp    c0027a89 <__adddf3+0x606>
c002771a:	85 c0                	test   eax,eax
c002771c:	0f 89 67 03 00 00    	jns    c0027a89 <__adddf3+0x606>
c0027722:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027725:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027728:	f7 d1                	not    ecx
c002772a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027730:	0f 84 44 03 00 00    	je     c0027a7a <__adddf3+0x5f7>
c0027736:	89 d1                	mov    ecx,edx
c0027738:	d1 e9                	shr    ecx,1
c002773a:	83 e2 01             	and    edx,0x1
c002773d:	09 ca                	or     edx,ecx
c002773f:	89 c1                	mov    ecx,eax
c0027741:	c1 e1 1f             	shl    ecx,0x1f
c0027744:	09 ca                	or     edx,ecx
c0027746:	d1 e8                	shr    eax,1
c0027748:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002774d:	e9 37 03 00 00       	jmp    c0027a89 <__adddf3+0x606>
c0027752:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027755:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002775b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002775e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027761:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027767:	29 de                	sub    esi,ebx
c0027769:	85 f6                	test   esi,esi
c002776b:	0f 8e bd 00 00 00    	jle    c002782e <__adddf3+0x3ab>
c0027771:	85 db                	test   ebx,ebx
c0027773:	75 17                	jne    c002778c <__adddf3+0x309>
c0027775:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027778:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002777b:	0f 84 47 03 00 00    	je     c0027ac8 <__adddf3+0x645>
c0027781:	4e                   	dec    esi
c0027782:	75 20                	jne    c00277a4 <__adddf3+0x321>
c0027784:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027787:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002778a:	eb 5b                	jmp    c00277e7 <__adddf3+0x364>
c002778c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002778f:	f7 d3                	not    ebx
c0027791:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027797:	0f 84 2b 03 00 00    	je     c0027ac8 <__adddf3+0x645>
c002779d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00277a4:	83 fe 1f             	cmp    esi,0x1f
c00277a7:	7e 49                	jle    c00277f2 <__adddf3+0x36f>
c00277a9:	83 fe 3f             	cmp    esi,0x3f
c00277ac:	0f 8f 16 03 00 00    	jg     c0027ac8 <__adddf3+0x645>
c00277b2:	83 e6 1f             	and    esi,0x1f
c00277b5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00277b8:	89 f1                	mov    ecx,esi
c00277ba:	d3 ef                	shr    edi,cl
c00277bc:	31 db                	xor    ebx,ebx
c00277be:	85 f6                	test   esi,esi
c00277c0:	74 13                	je     c00277d5 <__adddf3+0x352>
c00277c2:	b9 20 00 00 00       	mov    ecx,0x20
c00277c7:	29 f1                	sub    ecx,esi
c00277c9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277cc:	d3 e6                	shl    esi,cl
c00277ce:	31 db                	xor    ebx,ebx
c00277d0:	85 f6                	test   esi,esi
c00277d2:	0f 95 c3             	setne  bl
c00277d5:	31 c9                	xor    ecx,ecx
c00277d7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00277db:	0f 95 c1             	setne  cl
c00277de:	09 cf                	or     edi,ecx
c00277e0:	09 fb                	or     ebx,edi
c00277e2:	29 da                	sub    edx,ebx
c00277e4:	83 d8 00             	sbb    eax,0x0
c00277e7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277ea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277ed:	e9 aa 01 00 00       	jmp    c002799c <__adddf3+0x519>
c00277f2:	bf 20 00 00 00       	mov    edi,0x20
c00277f7:	29 f7                	sub    edi,esi
c00277f9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277fc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00277ff:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027802:	d3 e3                	shl    ebx,cl
c0027804:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027807:	89 f1                	mov    ecx,esi
c0027809:	d3 ef                	shr    edi,cl
c002780b:	09 fb                	or     ebx,edi
c002780d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027810:	89 f1                	mov    ecx,esi
c0027812:	d3 ef                	shr    edi,cl
c0027814:	89 fe                	mov    esi,edi
c0027816:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027819:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002781c:	d3 e7                	shl    edi,cl
c002781e:	85 ff                	test   edi,edi
c0027820:	0f 95 c1             	setne  cl
c0027823:	0f b6 c9             	movzx  ecx,cl
c0027826:	09 cb                	or     ebx,ecx
c0027828:	29 da                	sub    edx,ebx
c002782a:	19 f0                	sbb    eax,esi
c002782c:	eb b9                	jmp    c00277e7 <__adddf3+0x364>
c002782e:	0f 84 cd 00 00 00    	je     c0027901 <__adddf3+0x47e>
c0027834:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027837:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002783a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002783d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027841:	75 1b                	jne    c002785e <__adddf3+0x3db>
c0027843:	89 d6                	mov    esi,edx
c0027845:	09 c6                	or     esi,eax
c0027847:	0f 84 7b 02 00 00    	je     c0027ac8 <__adddf3+0x645>
c002784d:	4b                   	dec    ebx
c002784e:	75 24                	jne    c0027874 <__adddf3+0x3f1>
c0027850:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027853:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027856:	29 d1                	sub    ecx,edx
c0027858:	19 c6                	sbb    esi,eax
c002785a:	89 ca                	mov    edx,ecx
c002785c:	eb 61                	jmp    c00278bf <__adddf3+0x43c>
c002785e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027861:	f7 d6                	not    esi
c0027863:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027869:	0f 84 59 02 00 00    	je     c0027ac8 <__adddf3+0x645>
c002786f:	0d 00 00 00 80       	or     eax,0x80000000
c0027874:	83 fb 1f             	cmp    ebx,0x1f
c0027877:	7e 4d                	jle    c00278c6 <__adddf3+0x443>
c0027879:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002787c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002787f:	83 fb 3f             	cmp    ebx,0x3f
c0027882:	0f 8f 40 02 00 00    	jg     c0027ac8 <__adddf3+0x645>
c0027888:	83 e3 1f             	and    ebx,0x1f
c002788b:	89 d9                	mov    ecx,ebx
c002788d:	89 c7                	mov    edi,eax
c002788f:	d3 ef                	shr    edi,cl
c0027891:	31 db                	xor    ebx,ebx
c0027893:	85 c9                	test   ecx,ecx
c0027895:	74 12                	je     c00278a9 <__adddf3+0x426>
c0027897:	be 20 00 00 00       	mov    esi,0x20
c002789c:	29 ce                	sub    esi,ecx
c002789e:	89 f1                	mov    ecx,esi
c00278a0:	d3 e0                	shl    eax,cl
c00278a2:	31 db                	xor    ebx,ebx
c00278a4:	85 c0                	test   eax,eax
c00278a6:	0f 95 c3             	setne  bl
c00278a9:	31 c0                	xor    eax,eax
c00278ab:	85 d2                	test   edx,edx
c00278ad:	0f 95 c0             	setne  al
c00278b0:	09 c7                	or     edi,eax
c00278b2:	09 fb                	or     ebx,edi
c00278b4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278ba:	29 da                	sub    edx,ebx
c00278bc:	83 de 00             	sbb    esi,0x0
c00278bf:	89 f0                	mov    eax,esi
c00278c1:	e9 d6 00 00 00       	jmp    c002799c <__adddf3+0x519>
c00278c6:	be 20 00 00 00       	mov    esi,0x20
c00278cb:	29 de                	sub    esi,ebx
c00278cd:	89 c7                	mov    edi,eax
c00278cf:	89 f1                	mov    ecx,esi
c00278d1:	d3 e7                	shl    edi,cl
c00278d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00278d6:	89 d7                	mov    edi,edx
c00278d8:	88 d9                	mov    cl,bl
c00278da:	d3 ef                	shr    edi,cl
c00278dc:	89 f9                	mov    ecx,edi
c00278de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278e1:	09 cf                	or     edi,ecx
c00278e3:	88 d9                	mov    cl,bl
c00278e5:	d3 e8                	shr    eax,cl
c00278e7:	89 f1                	mov    ecx,esi
c00278e9:	d3 e2                	shl    edx,cl
c00278eb:	85 d2                	test   edx,edx
c00278ed:	0f 95 c2             	setne  dl
c00278f0:	0f b6 d2             	movzx  edx,dl
c00278f3:	09 d7                	or     edi,edx
c00278f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278fb:	29 fa                	sub    edx,edi
c00278fd:	19 c6                	sbb    esi,eax
c00278ff:	eb be                	jmp    c00278bf <__adddf3+0x43c>
c0027901:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027904:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027907:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002790d:	75 6a                	jne    c0027979 <__adddf3+0x4f6>
c002790f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027913:	75 58                	jne    c002796d <__adddf3+0x4ea>
c0027915:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027918:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002791b:	89 d6                	mov    esi,edx
c002791d:	09 c6                	or     esi,eax
c002791f:	75 17                	jne    c0027938 <__adddf3+0x4b5>
c0027921:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027924:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027927:	85 db                	test   ebx,ebx
c0027929:	0f 85 99 01 00 00    	jne    c0027ac8 <__adddf3+0x645>
c002792f:	31 ff                	xor    edi,edi
c0027931:	31 c9                	xor    ecx,ecx
c0027933:	e9 90 01 00 00       	jmp    c0027ac8 <__adddf3+0x645>
c0027938:	85 db                	test   ebx,ebx
c002793a:	0f 84 88 01 00 00    	je     c0027ac8 <__adddf3+0x645>
c0027940:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027943:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027946:	85 c0                	test   eax,eax
c0027948:	79 10                	jns    c002795a <__adddf3+0x4d7>
c002794a:	31 c9                	xor    ecx,ecx
c002794c:	f7 da                	neg    edx
c002794e:	0f 95 c1             	setne  cl
c0027951:	01 c8                	add    eax,ecx
c0027953:	f7 d8                	neg    eax
c0027955:	e9 2f 01 00 00       	jmp    c0027a89 <__adddf3+0x606>
c002795a:	31 ff                	xor    edi,edi
c002795c:	31 c9                	xor    ecx,ecx
c002795e:	89 c3                	mov    ebx,eax
c0027960:	09 d3                	or     ebx,edx
c0027962:	0f 84 60 01 00 00    	je     c0027ac8 <__adddf3+0x645>
c0027968:	e9 05 01 00 00       	jmp    c0027a72 <__adddf3+0x5ef>
c002796d:	31 ff                	xor    edi,edi
c002796f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027974:	e9 4f 01 00 00       	jmp    c0027ac8 <__adddf3+0x645>
c0027979:	89 c1                	mov    ecx,eax
c002797b:	89 d0                	mov    eax,edx
c002797d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027980:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027983:	89 ca                	mov    edx,ecx
c0027985:	85 c9                	test   ecx,ecx
c0027987:	79 2c                	jns    c00279b5 <__adddf3+0x532>
c0027989:	31 c9                	xor    ecx,ecx
c002798b:	f7 d8                	neg    eax
c002798d:	0f 95 c1             	setne  cl
c0027990:	01 ca                	add    edx,ecx
c0027992:	f7 da                	neg    edx
c0027994:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027997:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002799a:	eb 19                	jmp    c00279b5 <__adddf3+0x532>
c002799c:	85 c0                	test   eax,eax
c002799e:	0f 89 e5 00 00 00    	jns    c0027a89 <__adddf3+0x606>
c00279a4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00279a9:	89 c1                	mov    ecx,eax
c00279ab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279ae:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00279b1:	89 d0                	mov    eax,edx
c00279b3:	89 ca                	mov    edx,ecx
c00279b5:	85 d2                	test   edx,edx
c00279b7:	74 59                	je     c0027a12 <__adddf3+0x58f>
c00279b9:	0f bd da             	bsr    ebx,edx
c00279bc:	83 f3 1f             	xor    ebx,0x1f
c00279bf:	88 d9                	mov    cl,bl
c00279c1:	d3 e2                	shl    edx,cl
c00279c3:	bf 20 00 00 00       	mov    edi,0x20
c00279c8:	89 f9                	mov    ecx,edi
c00279ca:	29 d9                	sub    ecx,ebx
c00279cc:	89 c6                	mov    esi,eax
c00279ce:	d3 ee                	shr    esi,cl
c00279d0:	09 d6                	or     esi,edx
c00279d2:	88 d9                	mov    cl,bl
c00279d4:	d3 e0                	shl    eax,cl
c00279d6:	89 c2                	mov    edx,eax
c00279d8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279db:	25 ff 07 00 00       	and    eax,0x7ff
c00279e0:	39 d8                	cmp    eax,ebx
c00279e2:	7f 22                	jg     c0027a06 <__adddf3+0x583>
c00279e4:	29 c3                	sub    ebx,eax
c00279e6:	43                   	inc    ebx
c00279e7:	88 d9                	mov    cl,bl
c00279e9:	d3 ea                	shr    edx,cl
c00279eb:	29 df                	sub    edi,ebx
c00279ed:	89 f9                	mov    ecx,edi
c00279ef:	89 f0                	mov    eax,esi
c00279f1:	d3 e0                	shl    eax,cl
c00279f3:	09 c2                	or     edx,eax
c00279f5:	89 f0                	mov    eax,esi
c00279f7:	88 d9                	mov    cl,bl
c00279f9:	d3 e8                	shr    eax,cl
c00279fb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279fe:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027a04:	eb 6f                	jmp    c0027a75 <__adddf3+0x5f2>
c0027a06:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a09:	29 d8                	sub    eax,ebx
c0027a0b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a0e:	89 f0                	mov    eax,esi
c0027a10:	eb 59                	jmp    c0027a6b <__adddf3+0x5e8>
c0027a12:	85 c0                	test   eax,eax
c0027a14:	74 6a                	je     c0027a80 <__adddf3+0x5fd>
c0027a16:	0f bd c8             	bsr    ecx,eax
c0027a19:	83 f1 1f             	xor    ecx,0x1f
c0027a1c:	d3 e0                	shl    eax,cl
c0027a1e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a21:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a27:	83 c1 20             	add    ecx,0x20
c0027a2a:	39 cb                	cmp    ebx,ecx
c0027a2c:	7f 35                	jg     c0027a63 <__adddf3+0x5e0>
c0027a2e:	29 d9                	sub    ecx,ebx
c0027a30:	8d 71 01             	lea    esi,[ecx+0x1]
c0027a33:	83 fe 1f             	cmp    esi,0x1f
c0027a36:	7e 09                	jle    c0027a41 <__adddf3+0x5be>
c0027a38:	83 e9 1f             	sub    ecx,0x1f
c0027a3b:	d3 e8                	shr    eax,cl
c0027a3d:	89 c3                	mov    ebx,eax
c0027a3f:	eb 11                	jmp    c0027a52 <__adddf3+0x5cf>
c0027a41:	b9 20 00 00 00       	mov    ecx,0x20
c0027a46:	29 f1                	sub    ecx,esi
c0027a48:	89 c3                	mov    ebx,eax
c0027a4a:	d3 e3                	shl    ebx,cl
c0027a4c:	89 f1                	mov    ecx,esi
c0027a4e:	d3 e8                	shr    eax,cl
c0027a50:	89 c2                	mov    edx,eax
c0027a52:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a55:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027a5a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a5d:	89 d0                	mov    eax,edx
c0027a5f:	89 da                	mov    edx,ebx
c0027a61:	eb 26                	jmp    c0027a89 <__adddf3+0x606>
c0027a63:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a66:	29 cf                	sub    edi,ecx
c0027a68:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a6b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a70:	eb 17                	jmp    c0027a89 <__adddf3+0x606>
c0027a72:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a75:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a78:	eb 0f                	jmp    c0027a89 <__adddf3+0x606>
c0027a7a:	31 d2                	xor    edx,edx
c0027a7c:	31 c0                	xor    eax,eax
c0027a7e:	eb 09                	jmp    c0027a89 <__adddf3+0x606>
c0027a80:	89 c2                	mov    edx,eax
c0027a82:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027a89:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a8c:	c1 e1 14             	shl    ecx,0x14
c0027a8f:	89 c3                	mov    ebx,eax
c0027a91:	c1 eb 0b             	shr    ebx,0xb
c0027a94:	09 d9                	or     ecx,ebx
c0027a96:	89 d3                	mov    ebx,edx
c0027a98:	c1 eb 0b             	shr    ebx,0xb
c0027a9b:	c1 e0 15             	shl    eax,0x15
c0027a9e:	09 d8                	or     eax,ebx
c0027aa0:	89 c7                	mov    edi,eax
c0027aa2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027aa8:	0f 95 c0             	setne  al
c0027aab:	89 c6                	mov    esi,eax
c0027aad:	09 f3                	or     ebx,esi
c0027aaf:	83 e3 01             	and    ebx,0x1
c0027ab2:	c1 ea 0a             	shr    edx,0xa
c0027ab5:	21 da                	and    edx,ebx
c0027ab7:	89 f8                	mov    eax,edi
c0027ab9:	01 d0                	add    eax,edx
c0027abb:	83 d1 00             	adc    ecx,0x0
c0027abe:	89 c7                	mov    edi,eax
c0027ac0:	eb 06                	jmp    c0027ac8 <__adddf3+0x645>
c0027ac2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ac5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ac8:	89 f8                	mov    eax,edi
c0027aca:	89 ca                	mov    edx,ecx
c0027acc:	83 c4 24             	add    esp,0x24
c0027acf:	5b                   	pop    ebx
c0027ad0:	5e                   	pop    esi
c0027ad1:	5f                   	pop    edi
c0027ad2:	5d                   	pop    ebp
c0027ad3:	c3                   	ret    

c0027ad4 <__subdf3>:
c0027ad4:	55                   	push   ebp
c0027ad5:	89 e5                	mov    ebp,esp
c0027ad7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ada:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027add:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ae3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027ae6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027ae9:	5d                   	pop    ebp
c0027aea:	e9 94 f9 ff ff       	jmp    c0027483 <__adddf3>

c0027aef <__negdf2>:
c0027aef:	55                   	push   ebp
c0027af0:	89 e5                	mov    ebp,esp
c0027af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027af5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027af8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027afe:	5d                   	pop    ebp
c0027aff:	c3                   	ret    

c0027b00 <__muldf3>:
c0027b00:	55                   	push   ebp
c0027b01:	89 e5                	mov    ebp,esp
c0027b03:	57                   	push   edi
c0027b04:	56                   	push   esi
c0027b05:	53                   	push   ebx
c0027b06:	83 ec 24             	sub    esp,0x24
c0027b09:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b0f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b12:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b15:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027b18:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027b1b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b1e:	89 c8                	mov    eax,ecx
c0027b20:	c1 f8 14             	sar    eax,0x14
c0027b23:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b26:	89 f8                	mov    eax,edi
c0027b28:	89 fb                	mov    ebx,edi
c0027b2a:	c1 e3 0b             	shl    ebx,0xb
c0027b2d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027b30:	c1 e1 0b             	shl    ecx,0xb
c0027b33:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b39:	c1 e8 15             	shr    eax,0x15
c0027b3c:	09 c1                	or     ecx,eax
c0027b3e:	89 d6                	mov    esi,edx
c0027b40:	89 d0                	mov    eax,edx
c0027b42:	c1 f8 14             	sar    eax,0x14
c0027b45:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027b48:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027b4b:	89 c3                	mov    ebx,eax
c0027b4d:	c1 e3 0b             	shl    ebx,0xb
c0027b50:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027b53:	c1 e6 0b             	shl    esi,0xb
c0027b56:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027b5c:	c1 e8 15             	shr    eax,0x15
c0027b5f:	09 c6                	or     esi,eax
c0027b61:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b64:	25 ff 07 00 00       	and    eax,0x7ff
c0027b69:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027b6c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b6f:	25 ff 07 00 00       	and    eax,0x7ff
c0027b74:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027b77:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027b7a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027b7d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027b84:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b87:	40                   	inc    eax
c0027b88:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b8d:	0f 85 8d 00 00 00    	jne    c0027c20 <__muldf3+0x120>
c0027b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b96:	09 c8                	or     eax,ecx
c0027b98:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027b9c:	74 44                	je     c0027be2 <__muldf3+0xe2>
c0027b9e:	85 c0                	test   eax,eax
c0027ba0:	0f 85 31 02 00 00    	jne    c0027dd7 <__muldf3+0x2d7>
c0027ba6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ba9:	40                   	inc    eax
c0027baa:	a9 fe 07 00 00       	test   eax,0x7fe
c0027baf:	75 13                	jne    c0027bc4 <__muldf3+0xc4>
c0027bb1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027bb4:	09 f1                	or     ecx,esi
c0027bb6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027bba:	74 22                	je     c0027bde <__muldf3+0xde>
c0027bbc:	85 c9                	test   ecx,ecx
c0027bbe:	0f 85 0d 02 00 00    	jne    c0027dd1 <__muldf3+0x2d1>
c0027bc4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027bc8:	0f 89 09 02 00 00    	jns    c0027dd7 <__muldf3+0x2d7>
c0027bce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027bd1:	05 00 00 00 80       	add    eax,0x80000000
c0027bd6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bd9:	e9 f9 01 00 00       	jmp    c0027dd7 <__muldf3+0x2d7>
c0027bde:	85 c9                	test   ecx,ecx
c0027be0:	eb 2e                	jmp    c0027c10 <__muldf3+0x110>
c0027be2:	85 c0                	test   eax,eax
c0027be4:	74 20                	je     c0027c06 <__muldf3+0x106>
c0027be6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027be9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bec:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bef:	c1 ef 1f             	shr    edi,0x1f
c0027bf2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027bf5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027bf8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027bfb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bfe:	09 f9                	or     ecx,edi
c0027c00:	78 1e                	js     c0027c20 <__muldf3+0x120>
c0027c02:	89 c3                	mov    ebx,eax
c0027c04:	eb e0                	jmp    c0027be6 <__muldf3+0xe6>
c0027c06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c09:	f7 d0                	not    eax
c0027c0b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027c10:	75 b2                	jne    c0027bc4 <__muldf3+0xc4>
c0027c12:	31 ff                	xor    edi,edi
c0027c14:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027c1b:	e9 b7 01 00 00       	jmp    c0027dd7 <__muldf3+0x2d7>
c0027c20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c23:	40                   	inc    eax
c0027c24:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c29:	75 57                	jne    c0027c82 <__muldf3+0x182>
c0027c2b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027c2e:	09 f0                	or     eax,esi
c0027c30:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c34:	74 23                	je     c0027c59 <__muldf3+0x159>
c0027c36:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027c3a:	0f 89 91 01 00 00    	jns    c0027dd1 <__muldf3+0x2d1>
c0027c40:	85 c0                	test   eax,eax
c0027c42:	0f 85 89 01 00 00    	jne    c0027dd1 <__muldf3+0x2d1>
c0027c48:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027c4b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027c51:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c54:	e9 7e 01 00 00       	jmp    c0027dd7 <__muldf3+0x2d7>
c0027c59:	85 c0                	test   eax,eax
c0027c5b:	75 0c                	jne    c0027c69 <__muldf3+0x169>
c0027c5d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027c61:	0f 89 6a 01 00 00    	jns    c0027dd1 <__muldf3+0x2d1>
c0027c67:	eb df                	jmp    c0027c48 <__muldf3+0x148>
c0027c69:	01 f6                	add    esi,esi
c0027c6b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027c6e:	c1 ea 1f             	shr    edx,0x1f
c0027c71:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027c74:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027c77:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c7a:	09 d6                	or     esi,edx
c0027c7c:	78 04                	js     c0027c82 <__muldf3+0x182>
c0027c7e:	89 c3                	mov    ebx,eax
c0027c80:	eb e7                	jmp    c0027c69 <__muldf3+0x169>
c0027c82:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027c88:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c8e:	89 c8                	mov    eax,ecx
c0027c90:	f7 e6                	mul    esi
c0027c92:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027c95:	89 c7                	mov    edi,eax
c0027c97:	89 c8                	mov    eax,ecx
c0027c99:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c9c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027c9f:	89 c1                	mov    ecx,eax
c0027ca1:	89 f0                	mov    eax,esi
c0027ca3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027ca6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027ca9:	89 c6                	mov    esi,eax
c0027cab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cae:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027cb1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027cb4:	31 c0                	xor    eax,eax
c0027cb6:	01 f1                	add    ecx,esi
c0027cb8:	0f 92 c0             	setb   al
c0027cbb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027cbe:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027cc1:	83 d6 00             	adc    esi,0x0
c0027cc4:	01 c7                	add    edi,eax
c0027cc6:	83 d6 00             	adc    esi,0x0
c0027cc9:	01 ca                	add    edx,ecx
c0027ccb:	0f 92 c1             	setb   cl
c0027cce:	0f b6 c9             	movzx  ecx,cl
c0027cd1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027cd4:	83 d6 00             	adc    esi,0x0
c0027cd7:	01 cf                	add    edi,ecx
c0027cd9:	83 d6 00             	adc    esi,0x0
c0027cdc:	31 c9                	xor    ecx,ecx
c0027cde:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027ce1:	0f 95 c1             	setne  cl
c0027ce4:	09 cf                	or     edi,ecx
c0027ce6:	85 f6                	test   esi,esi
c0027ce8:	78 0c                	js     c0027cf6 <__muldf3+0x1f6>
c0027cea:	01 f6                	add    esi,esi
c0027cec:	89 f8                	mov    eax,edi
c0027cee:	c1 e8 1f             	shr    eax,0x1f
c0027cf1:	09 c6                	or     esi,eax
c0027cf3:	01 ff                	add    edi,edi
c0027cf5:	4b                   	dec    ebx
c0027cf6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027cfc:	0f 8f 85 00 00 00    	jg     c0027d87 <__muldf3+0x287>
c0027d02:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027d08:	85 db                	test   ebx,ebx
c0027d0a:	0f 8f 84 00 00 00    	jg     c0027d94 <__muldf3+0x294>
c0027d10:	83 fb cc             	cmp    ebx,0xffffffcc
c0027d13:	7c 79                	jl     c0027d8e <__muldf3+0x28e>
c0027d15:	ba 01 00 00 00       	mov    edx,0x1
c0027d1a:	29 da                	sub    edx,ebx
c0027d1c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d22:	83 fa 1f             	cmp    edx,0x1f
c0027d25:	7e 30                	jle    c0027d57 <__muldf3+0x257>
c0027d27:	83 fa 20             	cmp    edx,0x20
c0027d2a:	75 0b                	jne    c0027d37 <__muldf3+0x237>
c0027d2c:	31 c0                	xor    eax,eax
c0027d2e:	85 ff                	test   edi,edi
c0027d30:	0f 95 c0             	setne  al
c0027d33:	89 c7                	mov    edi,eax
c0027d35:	eb 1a                	jmp    c0027d51 <__muldf3+0x251>
c0027d37:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027d3a:	89 f0                	mov    eax,esi
c0027d3c:	d3 e0                	shl    eax,cl
c0027d3e:	09 f8                	or     eax,edi
c0027d40:	0f 95 c0             	setne  al
c0027d43:	0f b6 c0             	movzx  eax,al
c0027d46:	89 c7                	mov    edi,eax
c0027d48:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027d4d:	29 d9                	sub    ecx,ebx
c0027d4f:	d3 ee                	shr    esi,cl
c0027d51:	09 f7                	or     edi,esi
c0027d53:	31 db                	xor    ebx,ebx
c0027d55:	eb 3b                	jmp    c0027d92 <__muldf3+0x292>
c0027d57:	83 c3 1f             	add    ebx,0x1f
c0027d5a:	89 f0                	mov    eax,esi
c0027d5c:	88 d9                	mov    cl,bl
c0027d5e:	d3 e0                	shl    eax,cl
c0027d60:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d63:	89 f8                	mov    eax,edi
c0027d65:	88 d1                	mov    cl,dl
c0027d67:	d3 e8                	shr    eax,cl
c0027d69:	89 c1                	mov    ecx,eax
c0027d6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d6e:	09 c8                	or     eax,ecx
c0027d70:	88 d9                	mov    cl,bl
c0027d72:	d3 e7                	shl    edi,cl
c0027d74:	31 db                	xor    ebx,ebx
c0027d76:	85 ff                	test   edi,edi
c0027d78:	0f 95 c3             	setne  bl
c0027d7b:	89 df                	mov    edi,ebx
c0027d7d:	09 c7                	or     edi,eax
c0027d7f:	88 d1                	mov    cl,dl
c0027d81:	d3 ee                	shr    esi,cl
c0027d83:	31 db                	xor    ebx,ebx
c0027d85:	eb 0d                	jmp    c0027d94 <__muldf3+0x294>
c0027d87:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027d8c:	eb 02                	jmp    c0027d90 <__muldf3+0x290>
c0027d8e:	31 db                	xor    ebx,ebx
c0027d90:	31 ff                	xor    edi,edi
c0027d92:	31 f6                	xor    esi,esi
c0027d94:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d97:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027d9a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027d9f:	09 c3                	or     ebx,eax
c0027da1:	c1 e3 14             	shl    ebx,0x14
c0027da4:	89 f0                	mov    eax,esi
c0027da6:	c1 e8 0b             	shr    eax,0xb
c0027da9:	09 c3                	or     ebx,eax
c0027dab:	89 f8                	mov    eax,edi
c0027dad:	c1 e8 0b             	shr    eax,0xb
c0027db0:	c1 e6 15             	shl    esi,0x15
c0027db3:	09 c6                	or     esi,eax
c0027db5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027dbb:	0f 95 c1             	setne  cl
c0027dbe:	09 c8                	or     eax,ecx
c0027dc0:	83 e0 01             	and    eax,0x1
c0027dc3:	c1 ef 0a             	shr    edi,0xa
c0027dc6:	21 c7                	and    edi,eax
c0027dc8:	01 f7                	add    edi,esi
c0027dca:	83 d3 00             	adc    ebx,0x0
c0027dcd:	89 da                	mov    edx,ebx
c0027dcf:	eb 03                	jmp    c0027dd4 <__muldf3+0x2d4>
c0027dd1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027dd4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027dd7:	89 f8                	mov    eax,edi
c0027dd9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027ddc:	83 c4 24             	add    esp,0x24
c0027ddf:	5b                   	pop    ebx
c0027de0:	5e                   	pop    esi
c0027de1:	5f                   	pop    edi
c0027de2:	5d                   	pop    ebp
c0027de3:	c3                   	ret    

c0027de4 <__divdf3>:
c0027de4:	55                   	push   ebp
c0027de5:	89 e5                	mov    ebp,esp
c0027de7:	57                   	push   edi
c0027de8:	56                   	push   esi
c0027de9:	53                   	push   ebx
c0027dea:	83 ec 2c             	sub    esp,0x2c
c0027ded:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027df0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027df3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027df6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027df9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027dfc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027dff:	89 ce                	mov    esi,ecx
c0027e01:	89 c8                	mov    eax,ecx
c0027e03:	c1 f8 14             	sar    eax,0x14
c0027e06:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e09:	89 f8                	mov    eax,edi
c0027e0b:	89 fb                	mov    ebx,edi
c0027e0d:	c1 e3 0b             	shl    ebx,0xb
c0027e10:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027e13:	c1 e6 0b             	shl    esi,0xb
c0027e16:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027e1c:	c1 e8 15             	shr    eax,0x15
c0027e1f:	09 c6                	or     esi,eax
c0027e21:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027e24:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027e27:	89 c2                	mov    edx,eax
c0027e29:	c1 fa 14             	sar    edx,0x14
c0027e2c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027e2f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027e32:	89 de                	mov    esi,ebx
c0027e34:	c1 e6 0b             	shl    esi,0xb
c0027e37:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027e3a:	c1 e0 0b             	shl    eax,0xb
c0027e3d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027e42:	c1 eb 15             	shr    ebx,0x15
c0027e45:	09 d8                	or     eax,ebx
c0027e47:	89 c2                	mov    edx,eax
c0027e49:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e4c:	25 ff 07 00 00       	and    eax,0x7ff
c0027e51:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027e54:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e57:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027e5d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027e60:	29 d8                	sub    eax,ebx
c0027e62:	05 ff 03 00 00       	add    eax,0x3ff
c0027e67:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027e6a:	46                   	inc    esi
c0027e6b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027e71:	0f 85 a5 00 00 00    	jne    c0027f1c <__divdf3+0x138>
c0027e77:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027e7a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027e7d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027e81:	74 2a                	je     c0027ead <__divdf3+0xc9>
c0027e83:	85 f6                	test   esi,esi
c0027e85:	0f 85 cc 02 00 00    	jne    c0028157 <__divdf3+0x373>
c0027e8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e8e:	40                   	inc    eax
c0027e8f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e94:	75 26                	jne    c0027ebc <__divdf3+0xd8>
c0027e96:	85 db                	test   ebx,ebx
c0027e98:	74 22                	je     c0027ebc <__divdf3+0xd8>
c0027e9a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e9d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ea0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ea3:	09 d0                	or     eax,edx
c0027ea5:	0f 85 ac 02 00 00    	jne    c0028157 <__divdf3+0x373>
c0027eab:	eb 63                	jmp    c0027f10 <__divdf3+0x12c>
c0027ead:	85 f6                	test   esi,esi
c0027eaf:	75 22                	jne    c0027ed3 <__divdf3+0xef>
c0027eb1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027eb4:	40                   	inc    eax
c0027eb5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027eba:	74 36                	je     c0027ef2 <__divdf3+0x10e>
c0027ebc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ec0:	0f 89 91 02 00 00    	jns    c0028157 <__divdf3+0x373>
c0027ec6:	89 f8                	mov    eax,edi
c0027ec8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ece:	e9 80 02 00 00       	jmp    c0028153 <__divdf3+0x36f>
c0027ed3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ed6:	01 f6                	add    esi,esi
c0027ed8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027edb:	c1 ef 1f             	shr    edi,0x1f
c0027ede:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ee1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027ee4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027ee7:	09 f7                	or     edi,esi
c0027ee9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027eec:	78 2e                	js     c0027f1c <__divdf3+0x138>
c0027eee:	89 c8                	mov    eax,ecx
c0027ef0:	eb e1                	jmp    c0027ed3 <__divdf3+0xef>
c0027ef2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ef5:	09 d0                	or     eax,edx
c0027ef7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027efb:	74 0f                	je     c0027f0c <__divdf3+0x128>
c0027efd:	85 c0                	test   eax,eax
c0027eff:	74 bb                	je     c0027ebc <__divdf3+0xd8>
c0027f01:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f04:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f07:	e9 4b 02 00 00       	jmp    c0028157 <__divdf3+0x373>
c0027f0c:	85 c0                	test   eax,eax
c0027f0e:	75 ac                	jne    c0027ebc <__divdf3+0xd8>
c0027f10:	31 ff                	xor    edi,edi
c0027f12:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027f17:	e9 3b 02 00 00       	jmp    c0028157 <__divdf3+0x373>
c0027f1c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f1f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027f22:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027f28:	75 6b                	jne    c0027f95 <__divdf3+0x1b1>
c0027f2a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f2d:	09 d6                	or     esi,edx
c0027f2f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f33:	74 28                	je     c0027f5d <__divdf3+0x179>
c0027f35:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f38:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f3b:	85 f6                	test   esi,esi
c0027f3d:	0f 85 14 02 00 00    	jne    c0028157 <__divdf3+0x373>
c0027f43:	31 ff                	xor    edi,edi
c0027f45:	31 c9                	xor    ecx,ecx
c0027f47:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f4a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027f4d:	0f 89 04 02 00 00    	jns    c0028157 <__divdf3+0x373>
c0027f53:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027f58:	e9 fa 01 00 00       	jmp    c0028157 <__divdf3+0x373>
c0027f5d:	85 f6                	test   esi,esi
c0027f5f:	75 1b                	jne    c0027f7c <__divdf3+0x198>
c0027f61:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f64:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027f67:	25 00 00 00 80       	and    eax,0x80000000
c0027f6c:	31 c9                	xor    ecx,ecx
c0027f6e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027f73:	89 cf                	mov    edi,ecx
c0027f75:	89 c1                	mov    ecx,eax
c0027f77:	e9 db 01 00 00       	jmp    c0028157 <__divdf3+0x373>
c0027f7c:	01 d2                	add    edx,edx
c0027f7e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f81:	c1 eb 1f             	shr    ebx,0x1f
c0027f84:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f87:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027f8a:	8d 48 01             	lea    ecx,[eax+0x1]
c0027f8d:	09 da                	or     edx,ebx
c0027f8f:	78 04                	js     c0027f95 <__divdf3+0x1b1>
c0027f91:	89 c8                	mov    eax,ecx
c0027f93:	eb e7                	jmp    c0027f7c <__divdf3+0x198>
c0027f95:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f98:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f9e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027fa4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027fa7:	39 d6                	cmp    esi,edx
c0027fa9:	77 0d                	ja     c0027fb8 <__divdf3+0x1d4>
c0027fab:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027fae:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027fb1:	72 1b                	jb     c0027fce <__divdf3+0x1ea>
c0027fb3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027fb6:	75 16                	jne    c0027fce <__divdf3+0x1ea>
c0027fb8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027fbb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027fbe:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027fc1:	83 de 00             	sbb    esi,0x0
c0027fc4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027fc7:	ba 01 00 00 00       	mov    edx,0x1
c0027fcc:	eb 02                	jmp    c0027fd0 <__divdf3+0x1ec>
c0027fce:	31 d2                	xor    edx,edx
c0027fd0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027fd7:	31 ff                	xor    edi,edi
c0027fd9:	01 ff                	add    edi,edi
c0027fdb:	89 d1                	mov    ecx,edx
c0027fdd:	c1 e9 1f             	shr    ecx,0x1f
c0027fe0:	09 cf                	or     edi,ecx
c0027fe2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027fe5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027fe8:	89 da                	mov    edx,ebx
c0027fea:	89 f3                	mov    ebx,esi
c0027fec:	8d 34 36             	lea    esi,[esi+esi*1]
c0027fef:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ff2:	c1 e9 1f             	shr    ecx,0x1f
c0027ff5:	09 ce                	or     esi,ecx
c0027ff7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ffa:	01 c9                	add    ecx,ecx
c0027ffc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027fff:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028002:	85 db                	test   ebx,ebx
c0028004:	78 29                	js     c002802f <__divdf3+0x24b>
c0028006:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028009:	72 07                	jb     c0028012 <__divdf3+0x22e>
c002800b:	75 3c                	jne    c0028049 <__divdf3+0x265>
c002800d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028010:	77 37                	ja     c0028049 <__divdf3+0x265>
c0028012:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028015:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028018:	31 d2                	xor    edx,edx
c002801a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002801d:	0f 97 c2             	seta   dl
c0028020:	29 d6                	sub    esi,edx
c0028022:	89 d9                	mov    ecx,ebx
c0028024:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028027:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002802a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002802d:	eb 17                	jmp    c0028046 <__divdf3+0x262>
c002802f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028032:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028035:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028038:	0f 97 c1             	seta   cl
c002803b:	0f b6 c9             	movzx  ecx,cl
c002803e:	29 ce                	sub    esi,ecx
c0028040:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028043:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028046:	83 ca 01             	or     edx,0x1
c0028049:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002804c:	75 8b                	jne    c0027fd9 <__divdf3+0x1f5>
c002804e:	c1 e7 09             	shl    edi,0x9
c0028051:	89 d1                	mov    ecx,edx
c0028053:	c1 e9 17             	shr    ecx,0x17
c0028056:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028059:	09 f3                	or     ebx,esi
c002805b:	0f 95 c3             	setne  bl
c002805e:	0f b6 db             	movzx  ebx,bl
c0028061:	c1 e2 09             	shl    edx,0x9
c0028064:	09 d3                	or     ebx,edx
c0028066:	89 ca                	mov    edx,ecx
c0028068:	09 fa                	or     edx,edi
c002806a:	78 0c                	js     c0028078 <__divdf3+0x294>
c002806c:	01 d2                	add    edx,edx
c002806e:	89 d9                	mov    ecx,ebx
c0028070:	c1 e9 1f             	shr    ecx,0x1f
c0028073:	09 ca                	or     edx,ecx
c0028075:	01 db                	add    ebx,ebx
c0028077:	48                   	dec    eax
c0028078:	3d fe 07 00 00       	cmp    eax,0x7fe
c002807d:	0f 8f 83 00 00 00    	jg     c0028106 <__divdf3+0x322>
c0028083:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028089:	85 c0                	test   eax,eax
c002808b:	0f 8f 82 00 00 00    	jg     c0028113 <__divdf3+0x32f>
c0028091:	83 f8 cc             	cmp    eax,0xffffffcc
c0028094:	7c 77                	jl     c002810d <__divdf3+0x329>
c0028096:	be 01 00 00 00       	mov    esi,0x1
c002809b:	29 c6                	sub    esi,eax
c002809d:	81 ca 00 00 00 80    	or     edx,0x80000000
c00280a3:	83 fe 1f             	cmp    esi,0x1f
c00280a6:	7e 2f                	jle    c00280d7 <__divdf3+0x2f3>
c00280a8:	83 fe 20             	cmp    esi,0x20
c00280ab:	75 0a                	jne    c00280b7 <__divdf3+0x2d3>
c00280ad:	85 db                	test   ebx,ebx
c00280af:	0f 95 c3             	setne  bl
c00280b2:	0f b6 db             	movzx  ebx,bl
c00280b5:	eb 1a                	jmp    c00280d1 <__divdf3+0x2ed>
c00280b7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00280ba:	89 d7                	mov    edi,edx
c00280bc:	d3 e7                	shl    edi,cl
c00280be:	89 f9                	mov    ecx,edi
c00280c0:	09 d9                	or     ecx,ebx
c00280c2:	0f 95 c3             	setne  bl
c00280c5:	0f b6 db             	movzx  ebx,bl
c00280c8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00280cd:	29 c1                	sub    ecx,eax
c00280cf:	d3 ea                	shr    edx,cl
c00280d1:	09 d3                	or     ebx,edx
c00280d3:	31 c0                	xor    eax,eax
c00280d5:	eb 3a                	jmp    c0028111 <__divdf3+0x32d>
c00280d7:	83 c0 1f             	add    eax,0x1f
c00280da:	89 d7                	mov    edi,edx
c00280dc:	88 c1                	mov    cl,al
c00280de:	d3 e7                	shl    edi,cl
c00280e0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280e3:	89 df                	mov    edi,ebx
c00280e5:	89 f1                	mov    ecx,esi
c00280e7:	d3 ef                	shr    edi,cl
c00280e9:	89 f9                	mov    ecx,edi
c00280eb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00280ee:	09 cf                	or     edi,ecx
c00280f0:	88 c1                	mov    cl,al
c00280f2:	d3 e3                	shl    ebx,cl
c00280f4:	85 db                	test   ebx,ebx
c00280f6:	0f 95 c3             	setne  bl
c00280f9:	0f b6 db             	movzx  ebx,bl
c00280fc:	09 fb                	or     ebx,edi
c00280fe:	89 f1                	mov    ecx,esi
c0028100:	d3 ea                	shr    edx,cl
c0028102:	31 c0                	xor    eax,eax
c0028104:	eb 0d                	jmp    c0028113 <__divdf3+0x32f>
c0028106:	b8 ff 07 00 00       	mov    eax,0x7ff
c002810b:	eb 02                	jmp    c002810f <__divdf3+0x32b>
c002810d:	31 c0                	xor    eax,eax
c002810f:	31 db                	xor    ebx,ebx
c0028111:	31 d2                	xor    edx,edx
c0028113:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028116:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028119:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002811f:	09 c8                	or     eax,ecx
c0028121:	c1 e0 14             	shl    eax,0x14
c0028124:	89 d1                	mov    ecx,edx
c0028126:	c1 e9 0b             	shr    ecx,0xb
c0028129:	09 c8                	or     eax,ecx
c002812b:	89 c6                	mov    esi,eax
c002812d:	89 d9                	mov    ecx,ebx
c002812f:	c1 e9 0b             	shr    ecx,0xb
c0028132:	c1 e2 15             	shl    edx,0x15
c0028135:	09 ca                	or     edx,ecx
c0028137:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002813d:	0f 95 c0             	setne  al
c0028140:	09 c1                	or     ecx,eax
c0028142:	83 e1 01             	and    ecx,0x1
c0028145:	c1 eb 0a             	shr    ebx,0xa
c0028148:	21 cb                	and    ebx,ecx
c002814a:	01 d3                	add    ebx,edx
c002814c:	89 d8                	mov    eax,ebx
c002814e:	83 d6 00             	adc    esi,0x0
c0028151:	89 f2                	mov    edx,esi
c0028153:	89 c7                	mov    edi,eax
c0028155:	89 d1                	mov    ecx,edx
c0028157:	89 f8                	mov    eax,edi
c0028159:	89 ca                	mov    edx,ecx
c002815b:	83 c4 2c             	add    esp,0x2c
c002815e:	5b                   	pop    ebx
c002815f:	5e                   	pop    esi
c0028160:	5f                   	pop    edi
c0028161:	5d                   	pop    ebp
c0028162:	c3                   	ret    

c0028163 <__floatsidf>:
c0028163:	55                   	push   ebp
c0028164:	89 e5                	mov    ebp,esp
c0028166:	56                   	push   esi
c0028167:	53                   	push   ebx
c0028168:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002816b:	85 db                	test   ebx,ebx
c002816d:	7e 15                	jle    c0028184 <__floatsidf+0x21>
c002816f:	0f bd cb             	bsr    ecx,ebx
c0028172:	83 f1 1f             	xor    ecx,0x1f
c0028175:	d3 e3                	shl    ebx,cl
c0028177:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002817d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028182:	eb 21                	jmp    c00281a5 <__floatsidf+0x42>
c0028184:	b8 00 00 00 00       	mov    eax,0x0
c0028189:	ba 00 00 00 00       	mov    edx,0x0
c002818e:	74 2a                	je     c00281ba <__floatsidf+0x57>
c0028190:	f7 db                	neg    ebx
c0028192:	0f bd cb             	bsr    ecx,ebx
c0028195:	83 f1 1f             	xor    ecx,0x1f
c0028198:	d3 e3                	shl    ebx,cl
c002819a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281a0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00281a5:	29 c8                	sub    eax,ecx
c00281a7:	c1 e0 14             	shl    eax,0x14
c00281aa:	89 c1                	mov    ecx,eax
c00281ac:	89 de                	mov    esi,ebx
c00281ae:	c1 ee 0b             	shr    esi,0xb
c00281b1:	09 f1                	or     ecx,esi
c00281b3:	89 ca                	mov    edx,ecx
c00281b5:	c1 e3 15             	shl    ebx,0x15
c00281b8:	89 d8                	mov    eax,ebx
c00281ba:	5b                   	pop    ebx
c00281bb:	5e                   	pop    esi
c00281bc:	5d                   	pop    ebp
c00281bd:	c3                   	ret    

c00281be <__floatunsidf>:
c00281be:	55                   	push   ebp
c00281bf:	89 e5                	mov    ebp,esp
c00281c1:	56                   	push   esi
c00281c2:	53                   	push   ebx
c00281c3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281c6:	85 db                	test   ebx,ebx
c00281c8:	74 2a                	je     c00281f4 <__floatunsidf+0x36>
c00281ca:	0f bd cb             	bsr    ecx,ebx
c00281cd:	83 f1 1f             	xor    ecx,0x1f
c00281d0:	d3 e3                	shl    ebx,cl
c00281d2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281d8:	b8 1e 04 00 00       	mov    eax,0x41e
c00281dd:	29 c8                	sub    eax,ecx
c00281df:	c1 e0 14             	shl    eax,0x14
c00281e2:	89 c1                	mov    ecx,eax
c00281e4:	89 de                	mov    esi,ebx
c00281e6:	c1 ee 0b             	shr    esi,0xb
c00281e9:	09 f1                	or     ecx,esi
c00281eb:	89 ca                	mov    edx,ecx
c00281ed:	c1 e3 15             	shl    ebx,0x15
c00281f0:	89 d8                	mov    eax,ebx
c00281f2:	eb 04                	jmp    c00281f8 <__floatunsidf+0x3a>
c00281f4:	31 c0                	xor    eax,eax
c00281f6:	31 d2                	xor    edx,edx
c00281f8:	5b                   	pop    ebx
c00281f9:	5e                   	pop    esi
c00281fa:	5d                   	pop    ebp
c00281fb:	c3                   	ret    

c00281fc <__fixdfsi>:
c00281fc:	55                   	push   ebp
c00281fd:	89 e5                	mov    ebp,esp
c00281ff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028202:	89 d1                	mov    ecx,edx
c0028204:	c1 e1 0b             	shl    ecx,0xb
c0028207:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002820d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028210:	c1 e8 15             	shr    eax,0x15
c0028213:	09 c1                	or     ecx,eax
c0028215:	c1 fa 14             	sar    edx,0x14
c0028218:	78 1f                	js     c0028239 <__fixdfsi+0x3d>
c002821a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028220:	31 c0                	xor    eax,eax
c0028222:	83 fa 1e             	cmp    edx,0x1e
c0028225:	77 40                	ja     c0028267 <__fixdfsi+0x6b>
c0028227:	89 c8                	mov    eax,ecx
c0028229:	0d 00 00 00 80       	or     eax,0x80000000
c002822e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028233:	29 d1                	sub    ecx,edx
c0028235:	d3 e8                	shr    eax,cl
c0028237:	eb 2e                	jmp    c0028267 <__fixdfsi+0x6b>
c0028239:	31 c0                	xor    eax,eax
c002823b:	81 c2 01 04 00 00    	add    edx,0x401
c0028241:	78 24                	js     c0028267 <__fixdfsi+0x6b>
c0028243:	83 fa 1e             	cmp    edx,0x1e
c0028246:	7e 09                	jle    c0028251 <__fixdfsi+0x55>
c0028248:	83 fa 1f             	cmp    edx,0x1f
c002824b:	75 18                	jne    c0028265 <__fixdfsi+0x69>
c002824d:	85 c9                	test   ecx,ecx
c002824f:	75 14                	jne    c0028265 <__fixdfsi+0x69>
c0028251:	89 c8                	mov    eax,ecx
c0028253:	0d 00 00 00 80       	or     eax,0x80000000
c0028258:	b9 1f 00 00 00       	mov    ecx,0x1f
c002825d:	29 d1                	sub    ecx,edx
c002825f:	d3 e8                	shr    eax,cl
c0028261:	f7 d8                	neg    eax
c0028263:	eb 02                	jmp    c0028267 <__fixdfsi+0x6b>
c0028265:	31 c0                	xor    eax,eax
c0028267:	5d                   	pop    ebp
c0028268:	c3                   	ret    

c0028269 <__fixunsdfsi>:
c0028269:	55                   	push   ebp
c002826a:	89 e5                	mov    ebp,esp
c002826c:	53                   	push   ebx
c002826d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028270:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028273:	89 d3                	mov    ebx,edx
c0028275:	c1 fb 14             	sar    ebx,0x14
c0028278:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002827e:	31 c0                	xor    eax,eax
c0028280:	83 fb 1f             	cmp    ebx,0x1f
c0028283:	77 1d                	ja     c00282a2 <__fixunsdfsi+0x39>
c0028285:	89 d0                	mov    eax,edx
c0028287:	c1 e0 0b             	shl    eax,0xb
c002828a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002828f:	c1 e9 15             	shr    ecx,0x15
c0028292:	09 c8                	or     eax,ecx
c0028294:	0d 00 00 00 80       	or     eax,0x80000000
c0028299:	b9 1f 00 00 00       	mov    ecx,0x1f
c002829e:	29 d9                	sub    ecx,ebx
c00282a0:	d3 e8                	shr    eax,cl
c00282a2:	5b                   	pop    ebx
c00282a3:	5d                   	pop    ebp
c00282a4:	c3                   	ret    

c00282a5 <__cmpdf2>:
c00282a5:	55                   	push   ebp
c00282a6:	89 e5                	mov    ebp,esp
c00282a8:	57                   	push   edi
c00282a9:	56                   	push   esi
c00282aa:	53                   	push   ebx
c00282ab:	83 ec 0c             	sub    esp,0xc
c00282ae:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00282b1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00282b4:	89 ca                	mov    edx,ecx
c00282b6:	c1 ea 14             	shr    edx,0x14
c00282b9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00282bf:	89 cb                	mov    ebx,ecx
c00282c1:	c1 fb 1f             	sar    ebx,0x1f
c00282c4:	31 da                	xor    edx,ebx
c00282c6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282c9:	89 df                	mov    edi,ebx
c00282cb:	c1 e7 0b             	shl    edi,0xb
c00282ce:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282d1:	c1 e1 0b             	shl    ecx,0xb
c00282d4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282da:	c1 eb 15             	shr    ebx,0x15
c00282dd:	09 d9                	or     ecx,ebx
c00282df:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00282e2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00282e5:	89 ce                	mov    esi,ecx
c00282e7:	c1 ee 14             	shr    esi,0x14
c00282ea:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00282f0:	89 cb                	mov    ebx,ecx
c00282f2:	c1 fb 1f             	sar    ebx,0x1f
c00282f5:	31 de                	xor    esi,ebx
c00282f7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00282fa:	89 df                	mov    edi,ebx
c00282fc:	c1 e7 0b             	shl    edi,0xb
c00282ff:	c1 e1 0b             	shl    ecx,0xb
c0028302:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028308:	c1 eb 15             	shr    ebx,0x15
c002830b:	09 d9                	or     ecx,ebx
c002830d:	89 d3                	mov    ebx,edx
c002830f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028315:	43                   	inc    ebx
c0028316:	83 fb 01             	cmp    ebx,0x1
c0028319:	77 08                	ja     c0028323 <__cmpdf2+0x7e>
c002831b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002831e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028321:	75 68                	jne    c002838b <__cmpdf2+0xe6>
c0028323:	89 f3                	mov    ebx,esi
c0028325:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002832b:	43                   	inc    ebx
c002832c:	83 fb 01             	cmp    ebx,0x1
c002832f:	77 06                	ja     c0028337 <__cmpdf2+0x92>
c0028331:	89 fb                	mov    ebx,edi
c0028333:	09 cb                	or     ebx,ecx
c0028335:	75 54                	jne    c002838b <__cmpdf2+0xe6>
c0028337:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002833a:	09 f8                	or     eax,edi
c002833c:	09 c8                	or     eax,ecx
c002833e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028341:	75 12                	jne    c0028355 <__cmpdf2+0xb0>
c0028343:	8d 42 01             	lea    eax,[edx+0x1]
c0028346:	83 f8 01             	cmp    eax,0x1
c0028349:	77 0a                	ja     c0028355 <__cmpdf2+0xb0>
c002834b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002834e:	31 c0                	xor    eax,eax
c0028350:	83 fb 01             	cmp    ebx,0x1
c0028353:	76 36                	jbe    c002838b <__cmpdf2+0xe6>
c0028355:	b8 01 00 00 00       	mov    eax,0x1
c002835a:	39 f2                	cmp    edx,esi
c002835c:	7f 2d                	jg     c002838b <__cmpdf2+0xe6>
c002835e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028363:	7c 26                	jl     c002838b <__cmpdf2+0xe6>
c0028365:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028368:	77 07                	ja     c0028371 <__cmpdf2+0xcc>
c002836a:	72 16                	jb     c0028382 <__cmpdf2+0xdd>
c002836c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002836f:	76 0a                	jbe    c002837b <__cmpdf2+0xd6>
c0028371:	89 d0                	mov    eax,edx
c0028373:	c1 f8 1f             	sar    eax,0x1f
c0028376:	83 c8 01             	or     eax,0x1
c0028379:	eb 10                	jmp    c002838b <__cmpdf2+0xe6>
c002837b:	b8 00 00 00 00       	mov    eax,0x0
c0028380:	73 09                	jae    c002838b <__cmpdf2+0xe6>
c0028382:	89 d0                	mov    eax,edx
c0028384:	c1 f8 1f             	sar    eax,0x1f
c0028387:	83 e0 02             	and    eax,0x2
c002838a:	48                   	dec    eax
c002838b:	83 c4 0c             	add    esp,0xc
c002838e:	5b                   	pop    ebx
c002838f:	5e                   	pop    esi
c0028390:	5f                   	pop    edi
c0028391:	5d                   	pop    ebp
c0028392:	c3                   	ret    

c0028393 <__eqdf2>:
c0028393:	55                   	push   ebp
c0028394:	89 e5                	mov    ebp,esp
c0028396:	50                   	push   eax
c0028397:	6a 01                	push   0x1
c0028399:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002839c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002839f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00283a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00283a5:	e8 fb fe ff ff       	call   c00282a5 <__cmpdf2>
c00283aa:	83 c4 18             	add    esp,0x18
c00283ad:	c9                   	leave  
c00283ae:	c3                   	ret    

c00283af <__nedf2>:
c00283af:	eb e2                	jmp    c0028393 <__eqdf2>

c00283b1 <__gtdf2>:
c00283b1:	55                   	push   ebp
c00283b2:	89 e5                	mov    ebp,esp
c00283b4:	50                   	push   eax
c00283b5:	6a ff                	push   0xffffffff
c00283b7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00283ba:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00283bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00283c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00283c3:	e8 dd fe ff ff       	call   c00282a5 <__cmpdf2>
c00283c8:	83 c4 18             	add    esp,0x18
c00283cb:	c9                   	leave  
c00283cc:	c3                   	ret    

c00283cd <__gedf2>:
c00283cd:	eb e2                	jmp    c00283b1 <__gtdf2>

c00283cf <__ltdf2>:
c00283cf:	eb c2                	jmp    c0028393 <__eqdf2>

c00283d1 <__ledf2>:
c00283d1:	eb c0                	jmp    c0028393 <__eqdf2>

c00283d3 <__truncdfsf2>:
c00283d3:	55                   	push   ebp
c00283d4:	89 e5                	mov    ebp,esp
c00283d6:	57                   	push   edi
c00283d7:	56                   	push   esi
c00283d8:	53                   	push   ebx
c00283d9:	83 ec 0c             	sub    esp,0xc
c00283dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283df:	89 d1                	mov    ecx,edx
c00283e1:	c1 f9 14             	sar    ecx,0x14
c00283e4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283e7:	89 df                	mov    edi,ebx
c00283e9:	c1 e7 0b             	shl    edi,0xb
c00283ec:	89 d0                	mov    eax,edx
c00283ee:	c1 e0 0b             	shl    eax,0xb
c00283f1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00283f6:	c1 eb 15             	shr    ebx,0x15
c00283f9:	09 d8                	or     eax,ebx
c00283fb:	89 cb                	mov    ebx,ecx
c00283fd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028403:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028409:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002840f:	0f 86 9e 00 00 00    	jbe    c00284b3 <__truncdfsf2+0xe0>
c0028415:	85 db                	test   ebx,ebx
c0028417:	75 0a                	jne    c0028423 <__truncdfsf2+0x50>
c0028419:	c1 fa 17             	sar    edx,0x17
c002841c:	30 d2                	xor    dl,dl
c002841e:	e9 84 00 00 00       	jmp    c00284a7 <__truncdfsf2+0xd4>
c0028423:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028429:	83 fe 83             	cmp    esi,0xffffff83
c002842c:	7d 4b                	jge    c0028479 <__truncdfsf2+0xa6>
c002842e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028433:	29 f1                	sub    ecx,esi
c0028435:	83 f9 1f             	cmp    ecx,0x1f
c0028438:	7f 6b                	jg     c00284a5 <__truncdfsf2+0xd2>
c002843a:	0d 00 00 00 80       	or     eax,0x80000000
c002843f:	89 c3                	mov    ebx,eax
c0028441:	d3 eb                	shr    ebx,cl
c0028443:	be 01 00 00 00       	mov    esi,0x1
c0028448:	d3 e6                	shl    esi,cl
c002844a:	4e                   	dec    esi
c002844b:	21 f0                	and    eax,esi
c002844d:	09 f8                	or     eax,edi
c002844f:	0f 95 c0             	setne  al
c0028452:	0f b6 c0             	movzx  eax,al
c0028455:	09 c3                	or     ebx,eax
c0028457:	89 d9                	mov    ecx,ebx
c0028459:	c1 e9 08             	shr    ecx,0x8
c002845c:	f6 c3 7f             	test   bl,0x7f
c002845f:	0f 95 c0             	setne  al
c0028462:	09 c8                	or     eax,ecx
c0028464:	83 e0 01             	and    eax,0x1
c0028467:	c1 eb 07             	shr    ebx,0x7
c002846a:	21 c3                	and    ebx,eax
c002846c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028472:	09 d1                	or     ecx,edx
c0028474:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028477:	eb 76                	jmp    c00284ef <__truncdfsf2+0x11c>
c0028479:	83 c6 80             	add    esi,0xffffff80
c002847c:	7e 1d                	jle    c002849b <__truncdfsf2+0xc8>
c002847e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028484:	75 0b                	jne    c0028491 <__truncdfsf2+0xbe>
c0028486:	09 f8                	or     eax,edi
c0028488:	74 09                	je     c0028493 <__truncdfsf2+0xc0>
c002848a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002848f:	eb 02                	jmp    c0028493 <__truncdfsf2+0xc0>
c0028491:	31 c0                	xor    eax,eax
c0028493:	c1 fa 17             	sar    edx,0x17
c0028496:	80 ca ff             	or     dl,0xff
c0028499:	eb 0e                	jmp    c00284a9 <__truncdfsf2+0xd6>
c002849b:	c1 fa 1f             	sar    edx,0x1f
c002849e:	c1 e2 08             	shl    edx,0x8
c00284a1:	09 ca                	or     edx,ecx
c00284a3:	eb 04                	jmp    c00284a9 <__truncdfsf2+0xd6>
c00284a5:	31 d2                	xor    edx,edx
c00284a7:	31 c0                	xor    eax,eax
c00284a9:	c1 e2 17             	shl    edx,0x17
c00284ac:	c1 e8 08             	shr    eax,0x8
c00284af:	09 d0                	or     eax,edx
c00284b1:	eb 3c                	jmp    c00284ef <__truncdfsf2+0x11c>
c00284b3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00284b9:	89 ca                	mov    edx,ecx
c00284bb:	c1 fa 0b             	sar    edx,0xb
c00284be:	c1 e2 08             	shl    edx,0x8
c00284c1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00284c4:	31 db                	xor    ebx,ebx
c00284c6:	85 ff                	test   edi,edi
c00284c8:	0f 95 c3             	setne  bl
c00284cb:	09 d8                	or     eax,ebx
c00284cd:	89 c3                	mov    ebx,eax
c00284cf:	c1 eb 08             	shr    ebx,0x8
c00284d2:	a8 7f                	test   al,0x7f
c00284d4:	0f 95 c2             	setne  dl
c00284d7:	89 d6                	mov    esi,edx
c00284d9:	09 de                	or     esi,ebx
c00284db:	83 e6 01             	and    esi,0x1
c00284de:	c1 e8 07             	shr    eax,0x7
c00284e1:	21 f0                	and    eax,esi
c00284e3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00284e6:	09 ca                	or     edx,ecx
c00284e8:	c1 e2 17             	shl    edx,0x17
c00284eb:	09 da                	or     edx,ebx
c00284ed:	01 d0                	add    eax,edx
c00284ef:	83 c4 0c             	add    esp,0xc
c00284f2:	5b                   	pop    ebx
c00284f3:	5e                   	pop    esi
c00284f4:	5f                   	pop    edi
c00284f5:	5d                   	pop    ebp
c00284f6:	c3                   	ret    

c00284f7 <__extendsfdf2>:
c00284f7:	55                   	push   ebp
c00284f8:	89 e5                	mov    ebp,esp
c00284fa:	57                   	push   edi
c00284fb:	56                   	push   esi
c00284fc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00284ff:	89 d1                	mov    ecx,edx
c0028501:	c1 f9 17             	sar    ecx,0x17
c0028504:	c1 e2 08             	shl    edx,0x8
c0028507:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002850d:	89 c8                	mov    eax,ecx
c002850f:	80 e4 f8             	and    ah,0xf8
c0028512:	8d 71 01             	lea    esi,[ecx+0x1]
c0028515:	81 e6 fe 00 00 00    	and    esi,0xfe
c002851b:	75 27                	jne    c0028544 <__extendsfdf2+0x4d>
c002851d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028523:	75 18                	jne    c002853d <__extendsfdf2+0x46>
c0028525:	85 d2                	test   edx,edx
c0028527:	74 20                	je     c0028549 <__extendsfdf2+0x52>
c0028529:	41                   	inc    ecx
c002852a:	01 d2                	add    edx,edx
c002852c:	79 fb                	jns    c0028529 <__extendsfdf2+0x32>
c002852e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028534:	29 c8                	sub    eax,ecx
c0028536:	05 81 03 00 00       	add    eax,0x381
c002853b:	eb 0c                	jmp    c0028549 <__extendsfdf2+0x52>
c002853d:	05 00 07 00 00       	add    eax,0x700
c0028542:	eb 05                	jmp    c0028549 <__extendsfdf2+0x52>
c0028544:	05 80 03 00 00       	add    eax,0x380
c0028549:	c1 e0 14             	shl    eax,0x14
c002854c:	89 c1                	mov    ecx,eax
c002854e:	89 d0                	mov    eax,edx
c0028550:	c1 e8 0b             	shr    eax,0xb
c0028553:	09 c1                	or     ecx,eax
c0028555:	c1 e2 15             	shl    edx,0x15
c0028558:	89 d0                	mov    eax,edx
c002855a:	89 ca                	mov    edx,ecx
c002855c:	5e                   	pop    esi
c002855d:	5f                   	pop    edi
c002855e:	5d                   	pop    ebp
c002855f:	c3                   	ret    

c0028560 <fabs>:
c0028560:	83 ec 0c             	sub    esp,0xc
c0028563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028567:	89 04 24             	mov    DWORD PTR [esp],eax
c002856a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002856e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028573:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028577:	dd 04 24             	fld    QWORD PTR [esp]
c002857a:	83 c4 0c             	add    esp,0xc
c002857d:	c3                   	ret    
c002857e:	66 90                	xchg   ax,ax

c0028580 <lrint>:
c0028580:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028584:	83 ec 04             	sub    esp,0x4
c0028587:	db 1c 24             	fistp  DWORD PTR [esp]
c002858a:	58                   	pop    eax
c002858b:	c3                   	ret    

c002858c <lrintf>:
c002858c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028590:	83 ec 04             	sub    esp,0x4
c0028593:	db 1c 24             	fistp  DWORD PTR [esp]
c0028596:	58                   	pop    eax
c0028597:	c3                   	ret    

Disassembly of section .init:

c0028598 <_init>:
c0028598:	55                   	push   ebp
c0028599:	89 e5                	mov    ebp,esp
c002859b:	e8 78 7b fd ff       	call   c0000118 <frame_dummy>
c00285a0:	e8 63 e0 ff ff       	call   c0026608 <__do_global_ctors_aux>
c00285a5:	5d                   	pop    ebp
c00285a6:	c3                   	ret    

Disassembly of section .fini:

c00285a7 <_fini>:
c00285a7:	55                   	push   ebp
c00285a8:	89 e5                	mov    ebp,esp
c00285aa:	e8 f9 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00285af:	5d                   	pop    ebp
c00285b0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00285b2 <Computer::~Computer()>:
c00285b2:	83 ec 0c             	sub    esp,0xc
c00285b5:	ba e8 a0 02 c0       	mov    edx,0xc002a0e8
c00285ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285be:	89 10                	mov    DWORD PTR [eax],edx
c00285c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c4:	83 ec 0c             	sub    esp,0xc
c00285c7:	50                   	push   eax
c00285c8:	e8 b1 bb fe ff       	call   c001417e <Device::~Device()>
c00285cd:	83 c4 10             	add    esp,0x10
c00285d0:	90                   	nop
c00285d1:	83 c4 0c             	add    esp,0xc
c00285d4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00285d6 <Computer::~Computer()>:
c00285d6:	83 ec 0c             	sub    esp,0xc
c00285d9:	83 ec 0c             	sub    esp,0xc
c00285dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285e0:	e8 cd ff ff ff       	call   c00285b2 <Computer::~Computer()>
c00285e5:	83 c4 10             	add    esp,0x10
c00285e8:	83 ec 08             	sub    esp,0x8
c00285eb:	68 ec 01 00 00       	push   0x1ec
c00285f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285f4:	e8 ad a7 fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c00285f9:	83 c4 10             	add    esp,0x10
c00285fc:	83 c4 0c             	add    esp,0xc
c00285ff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028600 <idleCommon()>:
c0028600:	83 ec 0c             	sub    esp,0xc
c0028603:	e8 18 57 ff ff       	call   c001dd20 <lockScheduler()>
c0028608:	e8 4f 5a ff ff       	call   c001e05c <schedule()>
c002860d:	83 c4 0c             	add    esp,0xc
c0028610:	e9 0d 57 ff ff       	jmp    c001dd22 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028616 <LinkedList<UnixFile>::~LinkedList()>:
c0028616:	90                   	nop
c0028617:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028618 <LinkedList<UnixFile>::LinkedList()>:
c0028618:	83 ec 0c             	sub    esp,0xc
c002861b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028629:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028634:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002863b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002863f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028649:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028654:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002865b:	83 ec 0c             	sub    esp,0xc
c002865e:	68 a6 a3 02 c0       	push   0xc002a3a6
c0028663:	e8 1e a8 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0028668:	83 c4 10             	add    esp,0x10
c002866b:	90                   	nop
c002866c:	83 c4 0c             	add    esp,0xc
c002866f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028670 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028670:	83 ec 0c             	sub    esp,0xc
c0028673:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028678:	75 10                	jne    c002868a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002867a:	83 ec 0c             	sub    esp,0xc
c002867d:	68 c0 a3 02 c0       	push   0xc002a3c0
c0028682:	e8 a4 1e ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0028687:	83 c4 10             	add    esp,0x10
c002868a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028690:	85 c0                	test   eax,eax
c0028692:	74 34                	je     c00286c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028698:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002869b:	85 c0                	test   eax,eax
c002869d:	74 29                	je     c00286c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002869f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286c6:	eb 65                	jmp    c002872d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00286c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00286ce:	85 c0                	test   eax,eax
c00286d0:	75 4b                	jne    c002871d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00286d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286d9:	85 c0                	test   eax,eax
c00286db:	75 40                	jne    c002871d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00286dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286e5:	89 10                	mov    DWORD PTR [eax],edx
c00286e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286f9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028704:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028707:	85 c0                	test   eax,eax
c0028709:	74 22                	je     c002872d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002870b:	83 ec 0c             	sub    esp,0xc
c002870e:	68 e2 a3 02 c0       	push   0xc002a3e2
c0028713:	e8 13 1e ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0028718:	83 c4 10             	add    esp,0x10
c002871b:	eb 10                	jmp    c002872d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002871d:	83 ec 0c             	sub    esp,0xc
c0028720:	68 ec a3 02 c0       	push   0xc002a3ec
c0028725:	e8 01 1e ff ff       	call   c001a52b <Krnl::panic(char const*)>
c002872a:	83 c4 10             	add    esp,0x10
c002872d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028731:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028734:	8d 50 01             	lea    edx,[eax+0x1]
c0028737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002873e:	90                   	nop
c002873f:	83 c4 0c             	add    esp,0xc
c0028742:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028744 <LinkedList<UnixFile>::getFirstElement()>:
c0028744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028748:	8b 00                	mov    eax,DWORD PTR [eax]
c002874a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002874c <LinkedList<UnixFile>::removeFirst()>:
c002874c:	83 ec 0c             	sub    esp,0xc
c002874f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028753:	8b 00                	mov    eax,DWORD PTR [eax]
c0028755:	85 c0                	test   eax,eax
c0028757:	75 12                	jne    c002876b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028759:	83 ec 0c             	sub    esp,0xc
c002875c:	68 f8 a3 02 c0       	push   0xc002a3f8
c0028761:	e8 c5 1d ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0028766:	83 c4 10             	add    esp,0x10
c0028769:	eb 7e                	jmp    c00287e9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002876b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028772:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028775:	85 c0                	test   eax,eax
c0028777:	74 10                	je     c0028789 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028779:	83 ec 0c             	sub    esp,0xc
c002877c:	68 43 a4 02 c0       	push   0xc002a443
c0028781:	e8 a5 1d ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0028786:	83 c4 10             	add    esp,0x10
c0028789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878d:	8b 00                	mov    eax,DWORD PTR [eax]
c002878f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028792:	85 c0                	test   eax,eax
c0028794:	75 33                	jne    c00287c9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287b2:	83 f8 01             	cmp    eax,0x1
c00287b5:	74 21                	je     c00287d8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00287b7:	83 ec 0c             	sub    esp,0xc
c00287ba:	68 1c a4 02 c0       	push   0xc002a41c
c00287bf:	e8 67 1d ff ff       	call   c001a52b <Krnl::panic(char const*)>
c00287c4:	83 c4 10             	add    esp,0x10
c00287c7:	eb 0f                	jmp    c00287d8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00287c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00287cf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00287d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d6:	89 10                	mov    DWORD PTR [eax],edx
c00287d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287df:	8d 50 ff             	lea    edx,[eax-0x1]
c00287e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287e9:	83 c4 0c             	add    esp,0xc
c00287ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00287ee <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00287ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00287f6 <DriverlessDevice::~DriverlessDevice()>:
c00287f6:	ba 64 ab 02 c0       	mov    edx,0xc002ab64
c00287fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287ff:	89 10                	mov    DWORD PTR [eax],edx
c0028801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028805:	50                   	push   eax
c0028806:	e8 73 b9 fe ff       	call   c001417e <Device::~Device()>
c002880b:	83 c4 04             	add    esp,0x4
c002880e:	90                   	nop
c002880f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028810 <DriverlessDevice::~DriverlessDevice()>:
c0028810:	83 ec 0c             	sub    esp,0xc
c0028813:	83 ec 0c             	sub    esp,0xc
c0028816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002881a:	e8 d7 ff ff ff       	call   c00287f6 <DriverlessDevice::~DriverlessDevice()>
c002881f:	83 c4 10             	add    esp,0x10
c0028822:	83 ec 08             	sub    esp,0x8
c0028825:	68 58 01 00 00       	push   0x158
c002882a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002882e:	e8 73 a5 fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028833:	83 c4 10             	add    esp,0x10
c0028836:	83 c4 0c             	add    esp,0xc
c0028839:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002883a <LinkedList<Device>::addElement(Device*)>:
c002883a:	83 ec 0c             	sub    esp,0xc
c002883d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028842:	75 10                	jne    c0028854 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028844:	83 ec 0c             	sub    esp,0xc
c0028847:	68 c0 a3 02 c0       	push   0xc002a3c0
c002884c:	e8 da 1c ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0028851:	83 c4 10             	add    esp,0x10
c0028854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028858:	8b 00                	mov    eax,DWORD PTR [eax]
c002885a:	85 c0                	test   eax,eax
c002885c:	74 3a                	je     c0028898 <LinkedList<Device>::addElement(Device*)+0x5e>
c002885e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028862:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028865:	85 c0                	test   eax,eax
c0028867:	74 2f                	je     c0028898 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028874:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002887a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028882:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028889:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002888c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028896:	eb 68                	jmp    c0028900 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889c:	8b 00                	mov    eax,DWORD PTR [eax]
c002889e:	85 c0                	test   eax,eax
c00288a0:	75 4e                	jne    c00288f0 <LinkedList<Device>::addElement(Device*)+0xb6>
c00288a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288a9:	85 c0                	test   eax,eax
c00288ab:	75 43                	jne    c00288f0 <LinkedList<Device>::addElement(Device*)+0xb6>
c00288ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288b5:	89 10                	mov    DWORD PTR [eax],edx
c00288b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288c9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00288d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288da:	85 c0                	test   eax,eax
c00288dc:	74 22                	je     c0028900 <LinkedList<Device>::addElement(Device*)+0xc6>
c00288de:	83 ec 0c             	sub    esp,0xc
c00288e1:	68 e2 a3 02 c0       	push   0xc002a3e2
c00288e6:	e8 40 1c ff ff       	call   c001a52b <Krnl::panic(char const*)>
c00288eb:	83 c4 10             	add    esp,0x10
c00288ee:	eb 10                	jmp    c0028900 <LinkedList<Device>::addElement(Device*)+0xc6>
c00288f0:	83 ec 0c             	sub    esp,0xc
c00288f3:	68 ec a3 02 c0       	push   0xc002a3ec
c00288f8:	e8 2e 1c ff ff       	call   c001a52b <Krnl::panic(char const*)>
c00288fd:	83 c4 10             	add    esp,0x10
c0028900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028904:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028907:	8d 50 01             	lea    edx,[eax+0x1]
c002890a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028911:	90                   	nop
c0028912:	83 c4 0c             	add    esp,0xc
c0028915:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028916 <LinkedList<Device>::LinkedList()>:
c0028916:	83 ec 0c             	sub    esp,0xc
c0028919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028927:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028932:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028947:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028952:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028959:	83 ec 0c             	sub    esp,0xc
c002895c:	68 a6 a3 02 c0       	push   0xc002a3a6
c0028961:	e8 20 a5 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0028966:	83 c4 10             	add    esp,0x10
c0028969:	90                   	nop
c002896a:	83 c4 0c             	add    esp,0xc
c002896d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002896e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002896e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028972:	8b 00                	mov    eax,DWORD PTR [eax]
c0028974:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028976 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002897a:	8b 00                	mov    eax,DWORD PTR [eax]
c002897c:	85 c0                	test   eax,eax
c002897e:	75 0e                	jne    c002898e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028984:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028987:	85 c0                	test   eax,eax
c0028989:	75 03                	jne    c002898e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002898b:	b0 01                	mov    al,0x1
c002898d:	c3                   	ret    
c002898e:	b0 00                	mov    al,0x0
c0028990:	90                   	nop
c0028991:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028992 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028992:	83 ec 0c             	sub    esp,0xc
c0028995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028999:	8b 00                	mov    eax,DWORD PTR [eax]
c002899b:	85 c0                	test   eax,eax
c002899d:	75 15                	jne    c00289b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002899f:	83 ec 0c             	sub    esp,0xc
c00289a2:	68 f8 a3 02 c0       	push   0xc002a3f8
c00289a7:	e8 7f 1b ff ff       	call   c001a52b <Krnl::panic(char const*)>
c00289ac:	83 c4 10             	add    esp,0x10
c00289af:	e9 88 00 00 00       	jmp    c0028a3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00289b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00289be:	85 c0                	test   eax,eax
c00289c0:	0f 95 c0             	setne  al
c00289c3:	84 c0                	test   al,al
c00289c5:	74 10                	je     c00289d7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00289c7:	83 ec 0c             	sub    esp,0xc
c00289ca:	68 43 a4 02 c0       	push   0xc002a443
c00289cf:	e8 57 1b ff ff       	call   c001a52b <Krnl::panic(char const*)>
c00289d4:	83 c4 10             	add    esp,0x10
c00289d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289db:	8b 00                	mov    eax,DWORD PTR [eax]
c00289dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00289e0:	85 c0                	test   eax,eax
c00289e2:	0f 94 c0             	sete   al
c00289e5:	84 c0                	test   al,al
c00289e7:	74 33                	je     c0028a1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00289e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a05:	83 f8 01             	cmp    eax,0x1
c0028a08:	74 21                	je     c0028a2b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a0a:	83 ec 0c             	sub    esp,0xc
c0028a0d:	68 1c a4 02 c0       	push   0xc002a41c
c0028a12:	e8 14 1b ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0028a17:	83 c4 10             	add    esp,0x10
c0028a1a:	eb 0f                	jmp    c0028a2b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a20:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a22:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a29:	89 10                	mov    DWORD PTR [eax],edx
c0028a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a32:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a39:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a3c:	83 c4 0c             	add    esp,0xc
c0028a3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028a40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028a40:	83 ec 0c             	sub    esp,0xc
c0028a43:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028a48:	75 10                	jne    c0028a5a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028a4a:	83 ec 0c             	sub    esp,0xc
c0028a4d:	68 c0 a3 02 c0       	push   0xc002a3c0
c0028a52:	e8 d4 1a ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0028a57:	83 c4 10             	add    esp,0x10
c0028a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a60:	85 c0                	test   eax,eax
c0028a62:	74 34                	je     c0028a98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a6b:	85 c0                	test   eax,eax
c0028a6d:	74 29                	je     c0028a98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a7a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028a7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a8f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a96:	eb 65                	jmp    c0028afd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a9e:	85 c0                	test   eax,eax
c0028aa0:	75 4b                	jne    c0028aed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aa9:	85 c0                	test   eax,eax
c0028aab:	75 40                	jne    c0028aed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028aad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ab5:	89 10                	mov    DWORD PTR [eax],edx
c0028ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028abf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ac9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ad7:	85 c0                	test   eax,eax
c0028ad9:	74 22                	je     c0028afd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028adb:	83 ec 0c             	sub    esp,0xc
c0028ade:	68 e2 a3 02 c0       	push   0xc002a3e2
c0028ae3:	e8 43 1a ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0028ae8:	83 c4 10             	add    esp,0x10
c0028aeb:	eb 10                	jmp    c0028afd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028aed:	83 ec 0c             	sub    esp,0xc
c0028af0:	68 ec a3 02 c0       	push   0xc002a3ec
c0028af5:	e8 31 1a ff ff       	call   c001a52b <Krnl::panic(char const*)>
c0028afa:	83 c4 10             	add    esp,0x10
c0028afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b04:	8d 50 01             	lea    edx,[eax+0x1]
c0028b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b0e:	90                   	nop
c0028b0f:	83 c4 0c             	add    esp,0xc
c0028b12:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028b14 <ACPI::~ACPI()>:
c0028b14:	83 ec 0c             	sub    esp,0xc
c0028b17:	ba b0 b4 02 c0       	mov    edx,0xc002b4b0
c0028b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b20:	89 10                	mov    DWORD PTR [eax],edx
c0028b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b26:	83 ec 0c             	sub    esp,0xc
c0028b29:	50                   	push   eax
c0028b2a:	e8 4f b6 fe ff       	call   c001417e <Device::~Device()>
c0028b2f:	83 c4 10             	add    esp,0x10
c0028b32:	90                   	nop
c0028b33:	83 c4 0c             	add    esp,0xc
c0028b36:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028b38 <ACPI::~ACPI()>:
c0028b38:	83 ec 0c             	sub    esp,0xc
c0028b3b:	83 ec 0c             	sub    esp,0xc
c0028b3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b42:	e8 cd ff ff ff       	call   c0028b14 <ACPI::~ACPI()>
c0028b47:	83 c4 10             	add    esp,0x10
c0028b4a:	83 ec 08             	sub    esp,0x8
c0028b4d:	68 68 12 00 00       	push   0x1268
c0028b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b56:	e8 4b a2 fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028b5b:	83 c4 10             	add    esp,0x10
c0028b5e:	83 c4 0c             	add    esp,0xc
c0028b61:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028b62 <CPU::~CPU()>:
c0028b62:	83 ec 0c             	sub    esp,0xc
c0028b65:	ba a0 b8 02 c0       	mov    edx,0xc002b8a0
c0028b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6e:	89 10                	mov    DWORD PTR [eax],edx
c0028b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b74:	83 ec 0c             	sub    esp,0xc
c0028b77:	50                   	push   eax
c0028b78:	e8 01 b6 fe ff       	call   c001417e <Device::~Device()>
c0028b7d:	83 c4 10             	add    esp,0x10
c0028b80:	90                   	nop
c0028b81:	83 c4 0c             	add    esp,0xc
c0028b84:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028b86 <CPU::~CPU()>:
c0028b86:	83 ec 0c             	sub    esp,0xc
c0028b89:	83 ec 0c             	sub    esp,0xc
c0028b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b90:	e8 cd ff ff ff       	call   c0028b62 <CPU::~CPU()>
c0028b95:	83 c4 10             	add    esp,0x10
c0028b98:	83 ec 08             	sub    esp,0x8
c0028b9b:	68 98 11 00 00       	push   0x1198
c0028ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ba4:	e8 fd a1 fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028ba9:	83 c4 10             	add    esp,0x10
c0028bac:	83 c4 0c             	add    esp,0xc
c0028baf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028bb0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028bb0:	90                   	nop
c0028bb1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028bb2 <ThreadControlBlock::ThreadControlBlock()>:
c0028bb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bb6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bc1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bcc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028bd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bd7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028bde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028be2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bea:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028bee:	90                   	nop
c0028bef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028bf0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028bf0:	83 ec 0c             	sub    esp,0xc
c0028bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c33:	83 ec 0c             	sub    esp,0xc
c0028c36:	68 a6 a3 02 c0       	push   0xc002a3a6
c0028c3b:	e8 46 a2 fe ff       	call   c0012e86 <Dbg::kprintf(char const*, ...)>
c0028c40:	83 c4 10             	add    esp,0x10
c0028c43:	90                   	nop
c0028c44:	83 c4 0c             	add    esp,0xc
c0028c47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028c48 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028c48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c4c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028c4f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028c50 <Vm::_FPUState::_FPUState()>:
c0028c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c54:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028c5b:	90                   	nop
c0028c5c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028c5e <PCI::~PCI()>:
c0028c5e:	83 ec 0c             	sub    esp,0xc
c0028c61:	ba 2c c9 02 c0       	mov    edx,0xc002c92c
c0028c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6a:	89 10                	mov    DWORD PTR [eax],edx
c0028c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c70:	83 ec 0c             	sub    esp,0xc
c0028c73:	50                   	push   eax
c0028c74:	e8 dd ae fe ff       	call   c0013b56 <Bus::~Bus()>
c0028c79:	83 c4 10             	add    esp,0x10
c0028c7c:	90                   	nop
c0028c7d:	83 c4 0c             	add    esp,0xc
c0028c80:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028c82 <PCI::~PCI()>:
c0028c82:	83 ec 0c             	sub    esp,0xc
c0028c85:	83 ec 0c             	sub    esp,0xc
c0028c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c8c:	e8 cd ff ff ff       	call   c0028c5e <PCI::~PCI()>
c0028c91:	83 c4 10             	add    esp,0x10
c0028c94:	83 ec 08             	sub    esp,0x8
c0028c97:	68 58 01 00 00       	push   0x158
c0028c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca0:	e8 01 a1 fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028ca5:	83 c4 10             	add    esp,0x10
c0028ca8:	83 c4 0c             	add    esp,0xc
c0028cab:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028cac <IDE::~IDE()>:
c0028cac:	83 ec 0c             	sub    esp,0xc
c0028caf:	ba 90 cb 02 c0       	mov    edx,0xc002cb90
c0028cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb8:	89 10                	mov    DWORD PTR [eax],edx
c0028cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbe:	83 ec 0c             	sub    esp,0xc
c0028cc1:	50                   	push   eax
c0028cc2:	e8 a7 b9 fe ff       	call   c001466e <HardDiskController::~HardDiskController()>
c0028cc7:	83 c4 10             	add    esp,0x10
c0028cca:	90                   	nop
c0028ccb:	83 c4 0c             	add    esp,0xc
c0028cce:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028cd0 <IDE::~IDE()>:
c0028cd0:	83 ec 0c             	sub    esp,0xc
c0028cd3:	83 ec 0c             	sub    esp,0xc
c0028cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cda:	e8 cd ff ff ff       	call   c0028cac <IDE::~IDE()>
c0028cdf:	83 c4 10             	add    esp,0x10
c0028ce2:	83 ec 08             	sub    esp,0x8
c0028ce5:	68 70 02 00 00       	push   0x270
c0028cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cee:	e8 b3 a0 fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028cf3:	83 c4 10             	add    esp,0x10
c0028cf6:	83 c4 0c             	add    esp,0xc
c0028cf9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028cfa <SATABus::~SATABus()>:
c0028cfa:	83 ec 0c             	sub    esp,0xc
c0028cfd:	ba 70 cc 02 c0       	mov    edx,0xc002cc70
c0028d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d06:	89 10                	mov    DWORD PTR [eax],edx
c0028d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0c:	83 ec 0c             	sub    esp,0xc
c0028d0f:	50                   	push   eax
c0028d10:	e8 59 b9 fe ff       	call   c001466e <HardDiskController::~HardDiskController()>
c0028d15:	83 c4 10             	add    esp,0x10
c0028d18:	90                   	nop
c0028d19:	83 c4 0c             	add    esp,0xc
c0028d1c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028d1e <SATABus::~SATABus()>:
c0028d1e:	83 ec 0c             	sub    esp,0xc
c0028d21:	83 ec 0c             	sub    esp,0xc
c0028d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d28:	e8 cd ff ff ff       	call   c0028cfa <SATABus::~SATABus()>
c0028d2d:	83 c4 10             	add    esp,0x10
c0028d30:	83 ec 08             	sub    esp,0x8
c0028d33:	68 64 01 00 00       	push   0x164
c0028d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d3c:	e8 65 a0 fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028d41:	83 c4 10             	add    esp,0x10
c0028d44:	83 c4 0c             	add    esp,0xc
c0028d47:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028d48 <ATA::~ATA()>:
c0028d48:	83 ec 0c             	sub    esp,0xc
c0028d4b:	ba bc cc 02 c0       	mov    edx,0xc002ccbc
c0028d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d54:	89 10                	mov    DWORD PTR [eax],edx
c0028d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5a:	83 ec 0c             	sub    esp,0xc
c0028d5d:	50                   	push   eax
c0028d5e:	e8 fd b9 fe ff       	call   c0014760 <PhysicalDisk::~PhysicalDisk()>
c0028d63:	83 c4 10             	add    esp,0x10
c0028d66:	90                   	nop
c0028d67:	83 c4 0c             	add    esp,0xc
c0028d6a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028d6c <ATA::~ATA()>:
c0028d6c:	83 ec 0c             	sub    esp,0xc
c0028d6f:	83 ec 0c             	sub    esp,0xc
c0028d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d76:	e8 cd ff ff ff       	call   c0028d48 <ATA::~ATA()>
c0028d7b:	83 c4 10             	add    esp,0x10
c0028d7e:	83 ec 08             	sub    esp,0x8
c0028d81:	68 7c 01 00 00       	push   0x17c
c0028d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d8a:	e8 17 a0 fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028d8f:	83 c4 10             	add    esp,0x10
c0028d92:	83 c4 0c             	add    esp,0xc
c0028d95:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028d96 <ATAPI::~ATAPI()>:
c0028d96:	83 ec 0c             	sub    esp,0xc
c0028d99:	ba f4 cc 02 c0       	mov    edx,0xc002ccf4
c0028d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da2:	89 10                	mov    DWORD PTR [eax],edx
c0028da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da8:	83 ec 0c             	sub    esp,0xc
c0028dab:	50                   	push   eax
c0028dac:	e8 af b9 fe ff       	call   c0014760 <PhysicalDisk::~PhysicalDisk()>
c0028db1:	83 c4 10             	add    esp,0x10
c0028db4:	90                   	nop
c0028db5:	83 c4 0c             	add    esp,0xc
c0028db8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028dba <ATAPI::~ATAPI()>:
c0028dba:	83 ec 0c             	sub    esp,0xc
c0028dbd:	83 ec 0c             	sub    esp,0xc
c0028dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc4:	e8 cd ff ff ff       	call   c0028d96 <ATAPI::~ATAPI()>
c0028dc9:	83 c4 10             	add    esp,0x10
c0028dcc:	83 ec 08             	sub    esp,0x8
c0028dcf:	68 80 01 00 00       	push   0x180
c0028dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd8:	e8 c9 9f fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028ddd:	83 c4 10             	add    esp,0x10
c0028de0:	83 c4 0c             	add    esp,0xc
c0028de3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028de4 <SATA::~SATA()>:
c0028de4:	83 ec 0c             	sub    esp,0xc
c0028de7:	ba a8 cd 02 c0       	mov    edx,0xc002cda8
c0028dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df0:	89 10                	mov    DWORD PTR [eax],edx
c0028df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df6:	83 ec 0c             	sub    esp,0xc
c0028df9:	50                   	push   eax
c0028dfa:	e8 61 b9 fe ff       	call   c0014760 <PhysicalDisk::~PhysicalDisk()>
c0028dff:	83 c4 10             	add    esp,0x10
c0028e02:	90                   	nop
c0028e03:	83 c4 0c             	add    esp,0xc
c0028e06:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028e08 <SATA::~SATA()>:
c0028e08:	83 ec 0c             	sub    esp,0xc
c0028e0b:	83 ec 0c             	sub    esp,0xc
c0028e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e12:	e8 cd ff ff ff       	call   c0028de4 <SATA::~SATA()>
c0028e17:	83 c4 10             	add    esp,0x10
c0028e1a:	83 ec 08             	sub    esp,0x8
c0028e1d:	68 7c 01 00 00       	push   0x17c
c0028e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e26:	e8 7b 9f fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028e2b:	83 c4 10             	add    esp,0x10
c0028e2e:	83 c4 0c             	add    esp,0xc
c0028e31:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028e32 <SATAPI::~SATAPI()>:
c0028e32:	83 ec 0c             	sub    esp,0xc
c0028e35:	ba 84 ce 02 c0       	mov    edx,0xc002ce84
c0028e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3e:	89 10                	mov    DWORD PTR [eax],edx
c0028e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e44:	83 ec 0c             	sub    esp,0xc
c0028e47:	50                   	push   eax
c0028e48:	e8 13 b9 fe ff       	call   c0014760 <PhysicalDisk::~PhysicalDisk()>
c0028e4d:	83 c4 10             	add    esp,0x10
c0028e50:	90                   	nop
c0028e51:	83 c4 0c             	add    esp,0xc
c0028e54:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028e56 <SATAPI::~SATAPI()>:
c0028e56:	83 ec 0c             	sub    esp,0xc
c0028e59:	83 ec 0c             	sub    esp,0xc
c0028e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e60:	e8 cd ff ff ff       	call   c0028e32 <SATAPI::~SATAPI()>
c0028e65:	83 c4 10             	add    esp,0x10
c0028e68:	83 ec 08             	sub    esp,0x8
c0028e6b:	68 80 01 00 00       	push   0x180
c0028e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e74:	e8 2d 9f fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028e79:	83 c4 10             	add    esp,0x10
c0028e7c:	83 c4 0c             	add    esp,0xc
c0028e7f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028e80 <AVX::~AVX()>:
c0028e80:	83 ec 0c             	sub    esp,0xc
c0028e83:	ba c4 ce 02 c0       	mov    edx,0xc002cec4
c0028e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8c:	89 10                	mov    DWORD PTR [eax],edx
c0028e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e92:	83 ec 0c             	sub    esp,0xc
c0028e95:	50                   	push   eax
c0028e96:	e8 49 b9 fe ff       	call   c00147e4 <FPU::~FPU()>
c0028e9b:	83 c4 10             	add    esp,0x10
c0028e9e:	90                   	nop
c0028e9f:	83 c4 0c             	add    esp,0xc
c0028ea2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028ea4 <AVX::~AVX()>:
c0028ea4:	83 ec 0c             	sub    esp,0xc
c0028ea7:	83 ec 0c             	sub    esp,0xc
c0028eaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eae:	e8 cd ff ff ff       	call   c0028e80 <AVX::~AVX()>
c0028eb3:	83 c4 10             	add    esp,0x10
c0028eb6:	83 ec 08             	sub    esp,0x8
c0028eb9:	68 58 01 00 00       	push   0x158
c0028ebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec2:	e8 df 9e fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028ec7:	83 c4 10             	add    esp,0x10
c0028eca:	83 c4 0c             	add    esp,0xc
c0028ecd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028ece <MMX::~MMX()>:
c0028ece:	83 ec 0c             	sub    esp,0xc
c0028ed1:	ba 04 cf 02 c0       	mov    edx,0xc002cf04
c0028ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eda:	89 10                	mov    DWORD PTR [eax],edx
c0028edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee0:	83 ec 0c             	sub    esp,0xc
c0028ee3:	50                   	push   eax
c0028ee4:	e8 fb b8 fe ff       	call   c00147e4 <FPU::~FPU()>
c0028ee9:	83 c4 10             	add    esp,0x10
c0028eec:	90                   	nop
c0028eed:	83 c4 0c             	add    esp,0xc
c0028ef0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028ef2 <MMX::~MMX()>:
c0028ef2:	83 ec 0c             	sub    esp,0xc
c0028ef5:	83 ec 0c             	sub    esp,0xc
c0028ef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028efc:	e8 cd ff ff ff       	call   c0028ece <MMX::~MMX()>
c0028f01:	83 c4 10             	add    esp,0x10
c0028f04:	83 ec 08             	sub    esp,0x8
c0028f07:	68 58 01 00 00       	push   0x158
c0028f0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f10:	e8 91 9e fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028f15:	83 c4 10             	add    esp,0x10
c0028f18:	83 c4 0c             	add    esp,0xc
c0028f1b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028f1c <SSE::~SSE()>:
c0028f1c:	83 ec 0c             	sub    esp,0xc
c0028f1f:	ba 44 cf 02 c0       	mov    edx,0xc002cf44
c0028f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f28:	89 10                	mov    DWORD PTR [eax],edx
c0028f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2e:	83 ec 0c             	sub    esp,0xc
c0028f31:	50                   	push   eax
c0028f32:	e8 ad b8 fe ff       	call   c00147e4 <FPU::~FPU()>
c0028f37:	83 c4 10             	add    esp,0x10
c0028f3a:	90                   	nop
c0028f3b:	83 c4 0c             	add    esp,0xc
c0028f3e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028f40 <SSE::~SSE()>:
c0028f40:	83 ec 0c             	sub    esp,0xc
c0028f43:	83 ec 0c             	sub    esp,0xc
c0028f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f4a:	e8 cd ff ff ff       	call   c0028f1c <SSE::~SSE()>
c0028f4f:	83 c4 10             	add    esp,0x10
c0028f52:	83 ec 08             	sub    esp,0x8
c0028f55:	68 58 01 00 00       	push   0x158
c0028f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f5e:	e8 43 9e fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028f63:	83 c4 10             	add    esp,0x10
c0028f66:	83 c4 0c             	add    esp,0xc
c0028f69:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028f6a <x87::~x87()>:
c0028f6a:	83 ec 0c             	sub    esp,0xc
c0028f6d:	ba 84 cf 02 c0       	mov    edx,0xc002cf84
c0028f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f76:	89 10                	mov    DWORD PTR [eax],edx
c0028f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7c:	83 ec 0c             	sub    esp,0xc
c0028f7f:	50                   	push   eax
c0028f80:	e8 5f b8 fe ff       	call   c00147e4 <FPU::~FPU()>
c0028f85:	83 c4 10             	add    esp,0x10
c0028f88:	90                   	nop
c0028f89:	83 c4 0c             	add    esp,0xc
c0028f8c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028f8e <x87::~x87()>:
c0028f8e:	83 ec 0c             	sub    esp,0xc
c0028f91:	83 ec 0c             	sub    esp,0xc
c0028f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f98:	e8 cd ff ff ff       	call   c0028f6a <x87::~x87()>
c0028f9d:	83 c4 10             	add    esp,0x10
c0028fa0:	83 ec 08             	sub    esp,0x8
c0028fa3:	68 58 01 00 00       	push   0x158
c0028fa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fac:	e8 f5 9d fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028fb1:	83 c4 10             	add    esp,0x10
c0028fb4:	83 c4 0c             	add    esp,0xc
c0028fb7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028fb8 <IOAPIC::~IOAPIC()>:
c0028fb8:	83 ec 0c             	sub    esp,0xc
c0028fbb:	ba dc d0 02 c0       	mov    edx,0xc002d0dc
c0028fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc4:	89 10                	mov    DWORD PTR [eax],edx
c0028fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fca:	83 ec 0c             	sub    esp,0xc
c0028fcd:	50                   	push   eax
c0028fce:	e8 ab b1 fe ff       	call   c001417e <Device::~Device()>
c0028fd3:	83 c4 10             	add    esp,0x10
c0028fd6:	90                   	nop
c0028fd7:	83 c4 0c             	add    esp,0xc
c0028fda:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028fdc <IOAPIC::~IOAPIC()>:
c0028fdc:	83 ec 0c             	sub    esp,0xc
c0028fdf:	83 ec 0c             	sub    esp,0xc
c0028fe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe6:	e8 cd ff ff ff       	call   c0028fb8 <IOAPIC::~IOAPIC()>
c0028feb:	83 c4 10             	add    esp,0x10
c0028fee:	83 ec 08             	sub    esp,0x8
c0028ff1:	68 68 01 00 00       	push   0x168
c0028ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ffa:	e8 a7 9d fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0028fff:	83 c4 10             	add    esp,0x10
c0029002:	83 c4 0c             	add    esp,0xc
c0029005:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029006 <APIC::~APIC()>:
c0029006:	83 ec 0c             	sub    esp,0xc
c0029009:	ba 94 d0 02 c0       	mov    edx,0xc002d094
c002900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029012:	89 10                	mov    DWORD PTR [eax],edx
c0029014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029018:	83 ec 0c             	sub    esp,0xc
c002901b:	50                   	push   eax
c002901c:	e8 8d bc fe ff       	call   c0014cae <InterruptController::~InterruptController()>
c0029021:	83 c4 10             	add    esp,0x10
c0029024:	90                   	nop
c0029025:	83 c4 0c             	add    esp,0xc
c0029028:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002902a <APIC::~APIC()>:
c002902a:	83 ec 0c             	sub    esp,0xc
c002902d:	83 ec 0c             	sub    esp,0xc
c0029030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029034:	e8 cd ff ff ff       	call   c0029006 <APIC::~APIC()>
c0029039:	83 c4 10             	add    esp,0x10
c002903c:	83 ec 08             	sub    esp,0x8
c002903f:	68 58 21 00 00       	push   0x2158
c0029044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029048:	e8 59 9d fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c002904d:	83 c4 10             	add    esp,0x10
c0029050:	83 c4 0c             	add    esp,0xc
c0029053:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029054 <PIC::~PIC()>:
c0029054:	83 ec 0c             	sub    esp,0xc
c0029057:	ba 2c d1 02 c0       	mov    edx,0xc002d12c
c002905c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029060:	89 10                	mov    DWORD PTR [eax],edx
c0029062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029066:	83 ec 0c             	sub    esp,0xc
c0029069:	50                   	push   eax
c002906a:	e8 3f bc fe ff       	call   c0014cae <InterruptController::~InterruptController()>
c002906f:	83 c4 10             	add    esp,0x10
c0029072:	90                   	nop
c0029073:	83 c4 0c             	add    esp,0xc
c0029076:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029078 <PIC::~PIC()>:
c0029078:	83 ec 0c             	sub    esp,0xc
c002907b:	83 ec 0c             	sub    esp,0xc
c002907e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029082:	e8 cd ff ff ff       	call   c0029054 <PIC::~PIC()>
c0029087:	83 c4 10             	add    esp,0x10
c002908a:	83 ec 08             	sub    esp,0x8
c002908d:	68 58 21 00 00       	push   0x2158
c0029092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029096:	e8 0b 9d fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c002909b:	83 c4 10             	add    esp,0x10
c002909e:	83 c4 0c             	add    esp,0xc
c00290a1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00290a2 <APICTimer::~APICTimer()>:
c00290a2:	83 ec 0c             	sub    esp,0xc
c00290a5:	ba 80 d1 02 c0       	mov    edx,0xc002d180
c00290aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ae:	89 10                	mov    DWORD PTR [eax],edx
c00290b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b4:	83 ec 0c             	sub    esp,0xc
c00290b7:	50                   	push   eax
c00290b8:	e8 3d db fe ff       	call   c0016bfa <Timer::~Timer()>
c00290bd:	83 c4 10             	add    esp,0x10
c00290c0:	90                   	nop
c00290c1:	83 c4 0c             	add    esp,0xc
c00290c4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00290c6 <APICTimer::~APICTimer()>:
c00290c6:	83 ec 0c             	sub    esp,0xc
c00290c9:	83 ec 0c             	sub    esp,0xc
c00290cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d0:	e8 cd ff ff ff       	call   c00290a2 <APICTimer::~APICTimer()>
c00290d5:	83 c4 10             	add    esp,0x10
c00290d8:	83 ec 08             	sub    esp,0x8
c00290db:	68 60 01 00 00       	push   0x160
c00290e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e4:	e8 bd 9c fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c00290e9:	83 c4 10             	add    esp,0x10
c00290ec:	83 c4 0c             	add    esp,0xc
c00290ef:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00290f0 <PIT::~PIT()>:
c00290f0:	83 ec 0c             	sub    esp,0xc
c00290f3:	ba d0 d1 02 c0       	mov    edx,0xc002d1d0
c00290f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fc:	89 10                	mov    DWORD PTR [eax],edx
c00290fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029102:	83 ec 0c             	sub    esp,0xc
c0029105:	50                   	push   eax
c0029106:	e8 ef da fe ff       	call   c0016bfa <Timer::~Timer()>
c002910b:	83 c4 10             	add    esp,0x10
c002910e:	90                   	nop
c002910f:	83 c4 0c             	add    esp,0xc
c0029112:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029114 <PIT::~PIT()>:
c0029114:	83 ec 0c             	sub    esp,0xc
c0029117:	83 ec 0c             	sub    esp,0xc
c002911a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002911e:	e8 cd ff ff ff       	call   c00290f0 <PIT::~PIT()>
c0029123:	83 c4 10             	add    esp,0x10
c0029126:	83 ec 08             	sub    esp,0x8
c0029129:	68 5c 01 00 00       	push   0x15c
c002912e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029132:	e8 6f 9c fe ff       	call   c0012da6 <operator delete(void*, unsigned long)>
c0029137:	83 c4 10             	add    esp,0x10
c002913a:	83 c4 0c             	add    esp,0xc
c002913d:	c3                   	ret    
